[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "writer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "PrintWriter writer()\n{\r\n    response().setContentType(contentType);\r\n    return super.writer();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "echo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void echo(Object... args)\n{\r\n    PrintWriter out = writer();\r\n    for (Object s : args) {\r\n        String escapedString = StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(s.toString()));\r\n        out.print(escapedString);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "echoWithoutEscapeHtml",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void echoWithoutEscapeHtml(Object... args)\n{\r\n    PrintWriter out = writer();\r\n    for (Object s : args) {\r\n        out.print(s);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "puts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void puts(Object... args)\n{\r\n    echo(args);\r\n    writer().println();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "putWithoutEscapeHtml",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void putWithoutEscapeHtml(Object args)\n{\r\n    echoWithoutEscapeHtml(args);\r\n    writer().println();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "initStore",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initStore(Configuration conf, Path fsStorePath, StoreSchema schma, M mgr) throws IOException\n{\r\n    this.schema = schma;\r\n    this.fsWorkingPath = fsStorePath;\r\n    this.manager = mgr;\r\n    initFileSystem(conf);\r\n    fs.mkdirs(fsWorkingPath);\r\n    this.replication = conf.getInt(YarnConfiguration.FS_STORE_FILE_REPLICATION, YarnConfiguration.DEFAULT_FS_STORE_FILE_REPLICATION);\r\n    LOG.info(\"Created store directory :\" + fsWorkingPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "initFileSystem",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initFileSystem(Configuration conf) throws IOException\n{\r\n    Configuration confCopy = new Configuration(conf);\r\n    fs = fsWorkingPath.getFileSystem(confCopy);\r\n    if (fs.getScheme().equals(\"file\")) {\r\n        fs = ((LocalFileSystem) fs).getRaw();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "writeToLog",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void writeToLog(FSNodeStoreLogOp op) throws IOException\n{\r\n    try {\r\n        ensureAppendEditLogFile();\r\n        editlogOs.writeInt(op.getOpCode());\r\n        op.write(editlogOs, manager);\r\n    } finally {\r\n        ensureCloseEditlogFile();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "ensureAppendEditLogFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void ensureAppendEditLogFile() throws IOException\n{\r\n    editlogOs = fs.append(editLogPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "ensureCloseEditlogFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void ensureCloseEditlogFile() throws IOException\n{\r\n    editlogOs.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "loadFromMirror",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void loadFromMirror(Path newMirrorPath, Path oldMirrorPath) throws IOException\n{\r\n    Path mirrorToRead = fs.exists(newMirrorPath) ? newMirrorPath : fs.exists(oldMirrorPath) ? oldMirrorPath : null;\r\n    if (mirrorToRead != null) {\r\n        try (FSDataInputStream is = fs.open(mirrorToRead)) {\r\n            StoreOp op = FSStoreOpHandler.getMirrorOp(storeType);\r\n            op.recover(is, manager);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "getStoreType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "StoreType getStoreType()\n{\r\n    return storeType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "getFsWorkingPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getFsWorkingPath()\n{\r\n    return fsWorkingPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "recoverFromStore",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void recoverFromStore() throws IOException\n{\r\n    Path mirrorPath = new Path(fsWorkingPath, schema.mirrorName);\r\n    Path oldMirrorPath = new Path(fsWorkingPath, schema.mirrorName + \".old\");\r\n    loadFromMirror(mirrorPath, oldMirrorPath);\r\n    editLogPath = new Path(fsWorkingPath, schema.editLogName);\r\n    loadManagerFromEditLog(editLogPath);\r\n    Path writingMirrorPath = new Path(fsWorkingPath, schema.mirrorName + \".writing\");\r\n    try (FSDataOutputStream os = fs.create(writingMirrorPath, true)) {\r\n        StoreOp op = FSStoreOpHandler.getMirrorOp(storeType);\r\n        op.write(os, manager);\r\n    }\r\n    checkAvailability(writingMirrorPath);\r\n    if (fs.exists(mirrorPath)) {\r\n        fs.delete(oldMirrorPath, false);\r\n        fs.rename(mirrorPath, oldMirrorPath);\r\n    }\r\n    fs.rename(writingMirrorPath, mirrorPath);\r\n    fs.delete(writingMirrorPath, false);\r\n    fs.delete(oldMirrorPath, false);\r\n    editlogOs = fs.create(editLogPath, true);\r\n    editlogOs.close();\r\n    checkAvailability(editLogPath);\r\n    LOG.info(\"Finished write mirror at:\" + mirrorPath.toString());\r\n    LOG.info(\"Finished create editlog file at:\" + editLogPath.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "checkAvailability",
  "errType" : [ "UnsupportedOperationException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void checkAvailability(Path file) throws IOException\n{\r\n    try {\r\n        if (replication != 0 && fs.getFileStatus(file).getReplication() < replication) {\r\n            fs.setReplication(file, (short) replication);\r\n        }\r\n    } catch (UnsupportedOperationException e) {\r\n        LOG.error(\"Failed set replication for a file : {}\", file);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "loadManagerFromEditLog",
  "errType" : [ "EOFException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void loadManagerFromEditLog(Path editPath) throws IOException\n{\r\n    if (!fs.exists(editPath)) {\r\n        return;\r\n    }\r\n    try (FSDataInputStream is = fs.open(editPath)) {\r\n        while (true) {\r\n            try {\r\n                StoreOp storeOp = FSStoreOpHandler.get(is.readInt(), storeType);\r\n                storeOp.recover(is, manager);\r\n            } catch (EOFException e) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "getFs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileSystem getFs()\n{\r\n    return fs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "setFs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFs(FileSystem fs)\n{\r\n    this.fs = fs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "closeFSStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void closeFSStore()\n{\r\n    IOUtils.closeStreams(fs, editlogOs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "convert",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PlacementConstraintProto convert()\n{\r\n    return (PlacementConstraintProto) placementConstraint.getConstraintExpr().accept(this);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "visit",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "GeneratedMessageV3 visit(SingleConstraint constraint)\n{\r\n    SimplePlacementConstraintProto.Builder sb = SimplePlacementConstraintProto.newBuilder();\r\n    if (constraint.getScope() != null) {\r\n        sb.setScope(constraint.getScope());\r\n    }\r\n    sb.setMinCardinality(constraint.getMinCardinality());\r\n    sb.setMaxCardinality(constraint.getMaxCardinality());\r\n    if (constraint.getNodeAttributeOpCode() != null) {\r\n        sb.setAttributeOpCode(convertToProtoFormat(constraint.getNodeAttributeOpCode()));\r\n    }\r\n    if (constraint.getTargetExpressions() != null) {\r\n        for (TargetExpression target : constraint.getTargetExpressions()) {\r\n            sb.addTargetExpressions((PlacementConstraintTargetProto) target.accept(this));\r\n        }\r\n    }\r\n    SimplePlacementConstraintProto sProto = sb.build();\r\n    PlacementConstraintProto.Builder pb = PlacementConstraintProto.newBuilder();\r\n    pb.setSimpleConstraint(sProto);\r\n    return pb.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "visit",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "GeneratedMessageV3 visit(TargetExpression target)\n{\r\n    PlacementConstraintTargetProto.Builder tb = PlacementConstraintTargetProto.newBuilder();\r\n    tb.setTargetType(ProtoUtils.convertToProtoFormat(target.getTargetType()));\r\n    if (target.getTargetKey() != null) {\r\n        tb.setTargetKey(target.getTargetKey());\r\n    }\r\n    if (target.getTargetValues() != null) {\r\n        tb.addAllTargetValues(target.getTargetValues());\r\n    }\r\n    return tb.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "visit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GeneratedMessageV3 visit(TargetConstraint constraint)\n{\r\n    throw new YarnRuntimeException(\"Unexpected TargetConstraint found.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "visit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GeneratedMessageV3 visit(CardinalityConstraint constraint)\n{\r\n    throw new YarnRuntimeException(\"Unexpected CardinalityConstraint found.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "visitAndOr",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "GeneratedMessageV3 visitAndOr(CompositeConstraint<AbstractConstraint> composite, CompositeType type)\n{\r\n    CompositePlacementConstraintProto.Builder cb = CompositePlacementConstraintProto.newBuilder();\r\n    cb.setCompositeType(type);\r\n    for (AbstractConstraint c : composite.getChildren()) {\r\n        cb.addChildConstraints((PlacementConstraintProto) c.accept(this));\r\n    }\r\n    CompositePlacementConstraintProto cProto = cb.build();\r\n    PlacementConstraintProto.Builder pb = PlacementConstraintProto.newBuilder();\r\n    pb.setCompositeConstraint(cProto);\r\n    return pb.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "visit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GeneratedMessageV3 visit(And constraint)\n{\r\n    return visitAndOr(constraint, CompositeType.AND);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "visit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GeneratedMessageV3 visit(Or constraint)\n{\r\n    return visitAndOr(constraint, CompositeType.OR);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "visit",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "GeneratedMessageV3 visit(DelayedOr constraint)\n{\r\n    CompositePlacementConstraintProto.Builder cb = CompositePlacementConstraintProto.newBuilder();\r\n    cb.setCompositeType(CompositeType.DELAYED_OR);\r\n    for (TimedPlacementConstraint c : constraint.getChildren()) {\r\n        cb.addTimedChildConstraints((TimedPlacementConstraintProto) c.accept(this));\r\n    }\r\n    CompositePlacementConstraintProto cProto = cb.build();\r\n    PlacementConstraintProto.Builder pb = PlacementConstraintProto.newBuilder();\r\n    pb.setCompositeConstraint(cProto);\r\n    return pb.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "visit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "GeneratedMessageV3 visit(TimedPlacementConstraint constraint)\n{\r\n    TimedPlacementConstraintProto.Builder tb = TimedPlacementConstraintProto.newBuilder();\r\n    tb.setDelayUnit(ProtoUtils.convertToProtoFormat(constraint.getDelayUnit()));\r\n    tb.setSchedulingDelay(constraint.getSchedulingDelay());\r\n    tb.setPlacementConstraint((PlacementConstraintProto) constraint.getConstraint().accept(this));\r\n    return tb.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeOpCodeProto convertToProtoFormat(NodeAttributeOpCode p)\n{\r\n    return NodeAttributeOpCodeProto.valueOf(p.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshClusterMaxPriorityRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void render(Page.HTML<__> html)\n{\r\n    preHead(html);\r\n    html.title($(TITLE)).link(root_url(\"static\", \"yarn.css\")).style(\"#layout { height: 100%; }\", \"#layout thead td { height: 3em; }\", \"#layout #navcell { width: 11em; padding: 0 1em; }\", \"#layout td.content { padding-top: 0 }\", \"#layout tbody { vertical-align: top; }\", \"#layout tfoot td { height: 4em; }\").__(JQueryUI.class);\r\n    postHead(html);\r\n    JQueryUI.jsnotice(html);\r\n    html.table(\"#layout.ui-widget-content\").thead().tr().td().$colspan(2).__(header()).__().__().__().tfoot().tr().td().$colspan(2).__(footer()).__().__().__().tbody().tr().td().$id(\"navcell\").__(nav()).__().td().$class(\"content\").__(content()).__().__().__().__().__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "postHead",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void postHead(Page.HTML<__> html)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "header",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> header()\n{\r\n    return HeaderBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return LipsumBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "nav",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> nav()\n{\r\n    return NavBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "footer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> footer()\n{\r\n    return FooterBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "setTableStyles",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setTableStyles(Page.HTML<__> html, String tableId, String... innerStyles)\n{\r\n    List<String> styles = Lists.newArrayList();\r\n    styles.add(join('#', tableId, \"_paginate span {font-weight:normal}\"));\r\n    styles.add(join('#', tableId, \" .progress {width:8em}\"));\r\n    styles.add(join('#', tableId, \"_processing {top:-1.5em; font-size:1em;\"));\r\n    styles.add(\"  color:#000; background:#fefefe}\");\r\n    for (String style : innerStyles) {\r\n        styles.add(join('#', tableId, \" \", style));\r\n    }\r\n    html.style(styles.toArray());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceTypeInfoProto getProto()\n{\r\n    mergeLocalToProto();\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.name != null) {\r\n        builder.setName(this.name);\r\n    }\r\n    if (this.defaultUnit != null) {\r\n        builder.setUnits(this.defaultUnit);\r\n    }\r\n    if (this.resourceTypes != null) {\r\n        builder.setType(convertToProtoFormat(this.resourceTypes));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = YarnProtos.ResourceTypeInfoProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getName()\n{\r\n    if (this.name != null) {\r\n        return this.name;\r\n    }\r\n    YarnProtos.ResourceTypeInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setName(String rName)\n{\r\n    maybeInitBuilder();\r\n    if (rName == null) {\r\n        builder.clearName();\r\n    }\r\n    this.name = rName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getDefaultUnit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getDefaultUnit()\n{\r\n    if (this.defaultUnit != null) {\r\n        return this.defaultUnit;\r\n    }\r\n    YarnProtos.ResourceTypeInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getUnits();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setDefaultUnit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setDefaultUnit(String rUnits)\n{\r\n    maybeInitBuilder();\r\n    if (rUnits == null) {\r\n        builder.clearUnits();\r\n    }\r\n    this.defaultUnit = rUnits;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResourceType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceTypes getResourceType()\n{\r\n    if (this.resourceTypes != null) {\r\n        return this.resourceTypes;\r\n    }\r\n    YarnProtos.ResourceTypeInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return convertFromProtoFormat(p.getType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResourceType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResourceType(ResourceTypes type)\n{\r\n    maybeInitBuilder();\r\n    if (type == null) {\r\n        builder.clearType();\r\n    }\r\n    this.resourceTypes = type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceTypesProto convertToProtoFormat(ResourceTypes e)\n{\r\n    return ResourceTypesProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceTypes convertFromProtoFormat(ResourceTypesProto e)\n{\r\n    return ResourceTypes.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "dumpLogs",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void dumpLogs(String level, int timePeriod) throws YarnRuntimeException, IOException\n{\r\n    synchronized (lock) {\r\n        if (logFlag) {\r\n            LOG.info(\"Attempt to dump logs when appender is already running\");\r\n            throw new YarnRuntimeException(\"Appender is already dumping logs\");\r\n        }\r\n        Level targetLevel = Level.toLevel(level);\r\n        Logger logger = LogManager.getLogger(name);\r\n        appenderLevels.clear();\r\n        currentLogLevel = logger.getLevel();\r\n        Level currentEffectiveLevel = logger.getEffectiveLevel();\r\n        Layout layout = new PatternLayout(\"%d{ISO8601} %p %c: %m%n\");\r\n        FileAppender fApp;\r\n        File file = new File(System.getProperty(\"yarn.log.dir\"), targetFilename);\r\n        try {\r\n            fApp = new FileAppender(layout, file.getAbsolutePath(), false);\r\n        } catch (IOException ie) {\r\n            LOG.warn(\"Error creating file, can't dump logs to \" + file.getAbsolutePath(), ie);\r\n            throw ie;\r\n        }\r\n        fApp.setName(AdHocLogDumper.AD_HOC_DUMPER_APPENDER);\r\n        fApp.setThreshold(targetLevel);\r\n        for (Enumeration appenders = Logger.getRootLogger().getAllAppenders(); appenders.hasMoreElements(); ) {\r\n            Object obj = appenders.nextElement();\r\n            if (obj instanceof AppenderSkeleton) {\r\n                AppenderSkeleton appender = (AppenderSkeleton) obj;\r\n                appenderLevels.put(appender.getName(), appender.getThreshold());\r\n                appender.setThreshold(currentEffectiveLevel);\r\n            }\r\n        }\r\n        logger.addAppender(fApp);\r\n        LOG.info(\"Dumping adhoc logs for \" + name + \" to \" + file.getAbsolutePath() + \" for \" + timePeriod + \" milliseconds\");\r\n        logger.setLevel(targetLevel);\r\n        logFlag = true;\r\n        TimerTask restoreLogLevel = new RestoreLogLevel();\r\n        Timer restoreLogLevelTimer = new Timer();\r\n        restoreLogLevelTimer.schedule(restoreLogLevel, timePeriod);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getState()\n{\r\n    return logFlag;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "collect",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "List<ContainerLogMeta> collect(LogAggregationFileController fileController) throws IOException\n{\r\n    List<ContainerLogMeta> containersLogMeta = new ArrayList<>();\r\n    RemoteIterator<FileStatus> appDirs = fileController.getApplicationDirectoriesOfUser(logsRequest.getUser());\r\n    while (appDirs.hasNext()) {\r\n        FileStatus currentAppDir = appDirs.next();\r\n        if (logsRequest.getAppId() == null || logsRequest.getAppId().equals(currentAppDir.getPath().getName())) {\r\n            ApplicationId appId = ApplicationId.fromString(currentAppDir.getPath().getName());\r\n            RemoteIterator<FileStatus> nodeFiles = fileController.getNodeFilesOfApplicationDirectory(currentAppDir);\r\n            while (nodeFiles.hasNext()) {\r\n                FileStatus currentNodeFile = nodeFiles.next();\r\n                if (!logsRequest.getNodeId().match(currentNodeFile.getPath().getName())) {\r\n                    continue;\r\n                }\r\n                if (currentNodeFile.getPath().getName().equals(logsRequest.getAppId() + \".har\")) {\r\n                    Path p = new Path(\"har:///\" + currentNodeFile.getPath().toUri().getRawPath());\r\n                    nodeFiles = HarFs.get(p.toUri(), conf).listStatusIterator(p);\r\n                    continue;\r\n                }\r\n                try {\r\n                    Map<String, List<ContainerLogFileInfo>> metaFiles = fileController.getLogMetaFilesOfNode(logsRequest, currentNodeFile, appId);\r\n                    if (metaFiles == null) {\r\n                        continue;\r\n                    }\r\n                    metaFiles.entrySet().removeIf(entry -> !(logsRequest.getContainerId() == null || logsRequest.getContainerId().equals(entry.getKey())));\r\n                    containersLogMeta.addAll(createContainerLogMetas(currentNodeFile.getPath().getName(), metaFiles));\r\n                } catch (IOException ioe) {\r\n                    LOG.warn(\"Can not get log meta from the log file:\" + currentNodeFile.getPath() + \"\\n\" + ioe.getMessage());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return containersLogMeta;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "createContainerLogMetas",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "List<ContainerLogMeta> createContainerLogMetas(String nodeId, Map<String, List<ContainerLogFileInfo>> metaFiles)\n{\r\n    List<ContainerLogMeta> containerLogMetas = new ArrayList<>();\r\n    for (Map.Entry<String, List<ContainerLogFileInfo>> containerLogs : metaFiles.entrySet()) {\r\n        ContainerLogMeta containerLogMeta = new ContainerLogMeta(containerLogs.getKey(), nodeId);\r\n        for (ContainerLogFileInfo file : containerLogs.getValue()) {\r\n            boolean isFileNameMatches = logsRequest.getFileName().match(file.getFileName());\r\n            boolean fileSizeComparison = logsRequest.getFileSize().match(file.getFileSize());\r\n            boolean modificationTimeComparison = logsRequest.getModificationTime().match(file.getLastModifiedTime());\r\n            if (!isFileNameMatches || !fileSizeComparison || !modificationTimeComparison) {\r\n                continue;\r\n            }\r\n            containerLogMeta.getContainerLogMeta().add(file);\r\n        }\r\n        if (!containerLogMeta.getContainerLogMeta().isEmpty()) {\r\n            containerLogMetas.add(containerLogMeta);\r\n        }\r\n    }\r\n    return containerLogMetas;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.capability != null) {\r\n        builder.setCapability(convertToProtoFormat(this.capability));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReservationRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getCapability()\n{\r\n    ReservationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.capability != null) {\r\n        return this.capability;\r\n    }\r\n    if (!p.hasCapability()) {\r\n        return null;\r\n    }\r\n    this.capability = convertFromProtoFormat(p.getCapability());\r\n    return this.capability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCapability(Resource capability)\n{\r\n    maybeInitBuilder();\r\n    if (capability == null)\r\n        builder.clearCapability();\r\n    this.capability = capability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumContainers()\n{\r\n    ReservationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getNumContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumContainers(int numContainers)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumContainers((numContainers));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getConcurrency",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getConcurrency()\n{\r\n    ReservationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasConcurrency()) {\r\n        return 1;\r\n    }\r\n    return (p.getConcurrency());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setConcurrency",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setConcurrency(int numContainers)\n{\r\n    maybeInitBuilder();\r\n    builder.setConcurrency(numContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getDuration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getDuration()\n{\r\n    ReservationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDuration()) {\r\n        return 0;\r\n    }\r\n    return (p.getDuration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setDuration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setDuration(long duration)\n{\r\n    maybeInitBuilder();\r\n    builder.setDuration(duration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource t)\n{\r\n    return ProtoUtils.convertToProtoFormat(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String toString()\n{\r\n    return \"{Capability: \" + getCapability() + \", # Containers: \" + getNumContainers() + \", Concurrency: \" + getConcurrency() + \", Lease Duration: \" + getDuration() + \"}\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\example",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    WebApps.$for(new HelloWorld()).at(8888).inDevMode().start().joinThread();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationSubmissionRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.reservationDefinition != null) {\r\n        builder.setReservationDefinition(convertToProtoFormat(reservationDefinition));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReservationSubmissionRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getReservationDefinition",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationDefinition getReservationDefinition()\n{\r\n    ReservationSubmissionRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (reservationDefinition != null) {\r\n        return reservationDefinition;\r\n    }\r\n    if (!p.hasReservationDefinition()) {\r\n        return null;\r\n    }\r\n    reservationDefinition = convertFromProtoFormat(p.getReservationDefinition());\r\n    return reservationDefinition;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setReservationDefinition",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservationDefinition(ReservationDefinition reservationDefinition)\n{\r\n    maybeInitBuilder();\r\n    if (reservationDefinition == null) {\r\n        builder.clearReservationDefinition();\r\n    }\r\n    this.reservationDefinition = reservationDefinition;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getQueue()\n{\r\n    ReservationSubmissionRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasQueue()) {\r\n        return null;\r\n    }\r\n    return (p.getQueue());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueue(String planName)\n{\r\n    maybeInitBuilder();\r\n    if (planName == null) {\r\n        builder.clearQueue();\r\n        return;\r\n    }\r\n    builder.setQueue(planName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getReservationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationId getReservationId()\n{\r\n    ReservationSubmissionRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasReservationId()) {\r\n        return null;\r\n    }\r\n    return (convertFromProtoFormat(p.getReservationId()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setReservationId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setReservationId(ReservationId reservationId)\n{\r\n    maybeInitBuilder();\r\n    if (reservationId == null) {\r\n        builder.clearReservationId();\r\n        return;\r\n    }\r\n    builder.setReservationId(convertToProtoFormat(reservationId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationDefinitionProto convertToProtoFormat(ReservationDefinition r)\n{\r\n    return ((ReservationDefinitionPBImpl) r).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationDefinitionPBImpl convertFromProtoFormat(ReservationDefinitionProto r)\n{\r\n    return new ReservationDefinitionPBImpl(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationIdProto convertToProtoFormat(ReservationId r)\n{\r\n    return ((ReservationIdPBImpl) r).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationIdPBImpl convertFromProtoFormat(ReservationIdProto r)\n{\r\n    return new ReservationIdPBImpl(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateApplicationTimeoutsResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = UpdateApplicationTimeoutsResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationTimeouts != null) {\r\n        addApplicationTimeouts();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ApplicationTimeoutType, String> getApplicationTimeouts()\n{\r\n    initApplicationTimeout();\r\n    return this.applicationTimeouts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initApplicationTimeout",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initApplicationTimeout()\n{\r\n    if (this.applicationTimeouts != null) {\r\n        return;\r\n    }\r\n    UpdateApplicationTimeoutsResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ApplicationUpdateTimeoutMapProto> lists = p.getApplicationTimeoutsList();\r\n    this.applicationTimeouts = new HashMap<ApplicationTimeoutType, String>(lists.size());\r\n    for (ApplicationUpdateTimeoutMapProto timeoutProto : lists) {\r\n        this.applicationTimeouts.put(ProtoUtils.convertFromProtoFormat(timeoutProto.getApplicationTimeoutType()), timeoutProto.getExpireTime());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationTimeouts(Map<ApplicationTimeoutType, String> appTimeouts)\n{\r\n    if (appTimeouts == null) {\r\n        return;\r\n    }\r\n    initApplicationTimeout();\r\n    this.applicationTimeouts.clear();\r\n    this.applicationTimeouts.putAll(appTimeouts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addApplicationTimeouts()\n{\r\n    maybeInitBuilder();\r\n    builder.clearApplicationTimeouts();\r\n    if (applicationTimeouts == null) {\r\n        return;\r\n    }\r\n    Iterable<? extends ApplicationUpdateTimeoutMapProto> values = new Iterable<ApplicationUpdateTimeoutMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<ApplicationUpdateTimeoutMapProto> iterator() {\r\n            return new Iterator<ApplicationUpdateTimeoutMapProto>() {\r\n\r\n                private Iterator<ApplicationTimeoutType> iterator = applicationTimeouts.keySet().iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iterator.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ApplicationUpdateTimeoutMapProto next() {\r\n                    ApplicationTimeoutType key = iterator.next();\r\n                    return ApplicationUpdateTimeoutMapProto.newBuilder().setExpireTime(applicationTimeouts.get(key)).setApplicationTimeoutType(ProtoUtils.convertToProtoFormat(key)).build();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    this.builder.addAllApplicationTimeouts(values);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\sharedcache",
  "methodName" : "getChecksum",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SharedCacheChecksum getChecksum(Configuration conf)\n{\r\n    Class<? extends SharedCacheChecksum> clazz = conf.getClass(YarnConfiguration.SHARED_CACHE_CHECKSUM_ALGO_IMPL, defaultAlgorithm, SharedCacheChecksum.class);\r\n    SharedCacheChecksum checksum = instances.get(clazz);\r\n    if (checksum == null) {\r\n        try {\r\n            checksum = ReflectionUtils.newInstance(clazz, conf);\r\n            SharedCacheChecksum old = instances.putIfAbsent(clazz, checksum);\r\n            if (old != null) {\r\n                checksum = old;\r\n            }\r\n        } catch (Exception e) {\r\n            throw new YarnRuntimeException(e);\r\n        }\r\n    }\r\n    return checksum;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "convertToContainerReport",
  "errType" : null,
  "containingMethodsNum" : 31,
  "sourceCodeText" : "ContainerReport convertToContainerReport(TimelineEntity entity, String serverAddress, String user)\n{\r\n    int allocatedMem = 0;\r\n    int allocatedVcore = 0;\r\n    String allocatedHost = null;\r\n    int allocatedPort = -1;\r\n    int allocatedPriority = 0;\r\n    long createdTime = 0;\r\n    long finishedTime = 0;\r\n    String diagnosticsInfo = null;\r\n    int exitStatus = ContainerExitStatus.INVALID;\r\n    ContainerState state = null;\r\n    String nodeHttpAddress = null;\r\n    Map<String, List<Map<String, String>>> exposedPorts = null;\r\n    Map<String, Object> entityInfo = entity.getInfo();\r\n    if (entityInfo != null) {\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO)) {\r\n            allocatedMem = (Integer) entityInfo.get(ContainerMetricsConstants.ALLOCATED_MEMORY_INFO);\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_VCORE_INFO)) {\r\n            allocatedVcore = (Integer) entityInfo.get(ContainerMetricsConstants.ALLOCATED_VCORE_INFO);\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_HOST_INFO)) {\r\n            allocatedHost = entityInfo.get(ContainerMetricsConstants.ALLOCATED_HOST_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_PORT_INFO)) {\r\n            allocatedPort = (Integer) entityInfo.get(ContainerMetricsConstants.ALLOCATED_PORT_INFO);\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO)) {\r\n            allocatedPriority = Integer.parseInt(entityInfo.get(ContainerMetricsConstants.ALLOCATED_PRIORITY_INFO).toString());\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO)) {\r\n            nodeHttpAddress = (String) entityInfo.get(ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO);\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.ALLOCATED_EXPOSED_PORTS)) {\r\n            exposedPorts = (Map<String, List<Map<String, String>>>) entityInfo.get(ContainerMetricsConstants.ALLOCATED_EXPOSED_PORTS);\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.DIAGNOSTICS_INFO)) {\r\n            diagnosticsInfo = entityInfo.get(ContainerMetricsConstants.DIAGNOSTICS_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.EXIT_STATUS_INFO)) {\r\n            exitStatus = (Integer) entityInfo.get(ContainerMetricsConstants.EXIT_STATUS_INFO);\r\n        }\r\n        if (entityInfo.containsKey(ContainerMetricsConstants.STATE_INFO)) {\r\n            state = ContainerState.valueOf(entityInfo.get(ContainerMetricsConstants.STATE_INFO).toString());\r\n        }\r\n    }\r\n    NavigableSet<TimelineEvent> events = entity.getEvents();\r\n    if (events != null) {\r\n        for (TimelineEvent event : events) {\r\n            if (event.getId().equals(ContainerMetricsConstants.CREATED_IN_RM_EVENT_TYPE)) {\r\n                createdTime = event.getTimestamp();\r\n            } else if (event.getId().equals(ContainerMetricsConstants.FINISHED_IN_RM_EVENT_TYPE)) {\r\n                finishedTime = event.getTimestamp();\r\n            }\r\n        }\r\n    }\r\n    String logUrl = null;\r\n    NodeId allocatedNode = null;\r\n    String containerId = entity.getId();\r\n    if (allocatedHost != null) {\r\n        allocatedNode = NodeId.newInstance(allocatedHost, allocatedPort);\r\n        if (serverAddress != null && user != null) {\r\n            logUrl = PATH_JOINER.join(serverAddress, \"logs\", allocatedNode, containerId, containerId, user);\r\n        }\r\n    }\r\n    ContainerReport container = ContainerReport.newInstance(ContainerId.fromString(entity.getId()), Resource.newInstance(allocatedMem, allocatedVcore), allocatedNode, Priority.newInstance(allocatedPriority), createdTime, finishedTime, diagnosticsInfo, logUrl, exitStatus, state, nodeHttpAddress);\r\n    container.setExposedPorts(exposedPorts);\r\n    return container;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "convertToApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "ApplicationAttemptReport convertToApplicationAttemptReport(TimelineEntity entity)\n{\r\n    String host = null;\r\n    int rpcPort = -1;\r\n    ContainerId amContainerId = null;\r\n    String trackingUrl = null;\r\n    String originalTrackingUrl = null;\r\n    String diagnosticsInfo = null;\r\n    YarnApplicationAttemptState state = null;\r\n    Map<String, Object> entityInfo = entity.getInfo();\r\n    long startTime = 0;\r\n    long finishTime = 0;\r\n    if (entityInfo != null) {\r\n        if (entityInfo.containsKey(AppAttemptMetricsConstants.HOST_INFO)) {\r\n            host = entityInfo.get(AppAttemptMetricsConstants.HOST_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(AppAttemptMetricsConstants.RPC_PORT_INFO)) {\r\n            rpcPort = (Integer) entityInfo.get(AppAttemptMetricsConstants.RPC_PORT_INFO);\r\n        }\r\n        if (entityInfo.containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)) {\r\n            amContainerId = ContainerId.fromString(entityInfo.get(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO).toString());\r\n        }\r\n        if (entityInfo.containsKey(AppAttemptMetricsConstants.TRACKING_URL_INFO)) {\r\n            trackingUrl = entityInfo.get(AppAttemptMetricsConstants.TRACKING_URL_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO)) {\r\n            originalTrackingUrl = entityInfo.get(AppAttemptMetricsConstants.ORIGINAL_TRACKING_URL_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(AppAttemptMetricsConstants.DIAGNOSTICS_INFO)) {\r\n            diagnosticsInfo = entityInfo.get(AppAttemptMetricsConstants.DIAGNOSTICS_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(AppAttemptMetricsConstants.STATE_INFO)) {\r\n            state = YarnApplicationAttemptState.valueOf(entityInfo.get(AppAttemptMetricsConstants.STATE_INFO).toString());\r\n        }\r\n        if (entityInfo.containsKey(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO)) {\r\n            amContainerId = ContainerId.fromString(entityInfo.get(AppAttemptMetricsConstants.MASTER_CONTAINER_INFO).toString());\r\n        }\r\n    }\r\n    NavigableSet<TimelineEvent> events = entity.getEvents();\r\n    if (events != null) {\r\n        for (TimelineEvent event : events) {\r\n            if (event.getId().equals(AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE)) {\r\n                startTime = event.getTimestamp();\r\n            } else if (event.getId().equals(AppAttemptMetricsConstants.FINISHED_EVENT_TYPE)) {\r\n                finishTime = event.getTimestamp();\r\n            }\r\n        }\r\n    }\r\n    return ApplicationAttemptReport.newInstance(ApplicationAttemptId.fromString(entity.getId()), host, rpcPort, trackingUrl, originalTrackingUrl, diagnosticsInfo, state, amContainerId, startTime, finishTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "convertToApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 57,
  "sourceCodeText" : "ApplicationReport convertToApplicationReport(TimelineEntity entity)\n{\r\n    String user = null;\r\n    String queue = null;\r\n    String name = null;\r\n    String type = null;\r\n    boolean unmanagedApplication = false;\r\n    long createdTime = 0;\r\n    long launchTime = 0;\r\n    long finishedTime = 0;\r\n    float progress = 0.0f;\r\n    int applicationPriority = 0;\r\n    ApplicationAttemptId latestApplicationAttemptId = null;\r\n    String diagnosticsInfo = null;\r\n    FinalApplicationStatus finalStatus = FinalApplicationStatus.UNDEFINED;\r\n    YarnApplicationState state = YarnApplicationState.ACCEPTED;\r\n    ApplicationResourceUsageReport appResources = null;\r\n    Set<String> appTags = null;\r\n    String appNodeLabelExpression = null;\r\n    String amNodeLabelExpression = null;\r\n    Map<String, Object> entityInfo = entity.getInfo();\r\n    if (entityInfo != null) {\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.USER_ENTITY_INFO)) {\r\n            user = entityInfo.get(ApplicationMetricsConstants.USER_ENTITY_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.QUEUE_ENTITY_INFO)) {\r\n            queue = entityInfo.get(ApplicationMetricsConstants.QUEUE_ENTITY_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.NAME_ENTITY_INFO)) {\r\n            name = entityInfo.get(ApplicationMetricsConstants.NAME_ENTITY_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.TYPE_ENTITY_INFO)) {\r\n            type = entityInfo.get(ApplicationMetricsConstants.TYPE_ENTITY_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.TYPE_ENTITY_INFO)) {\r\n            type = entityInfo.get(ApplicationMetricsConstants.TYPE_ENTITY_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.UNMANAGED_APPLICATION_ENTITY_INFO)) {\r\n            unmanagedApplication = Boolean.parseBoolean(entityInfo.get(ApplicationMetricsConstants.UNMANAGED_APPLICATION_ENTITY_INFO).toString());\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.APPLICATION_PRIORITY_INFO)) {\r\n            applicationPriority = Integer.parseInt(entityInfo.get(ApplicationMetricsConstants.APPLICATION_PRIORITY_INFO).toString());\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.APP_TAGS_INFO)) {\r\n            appTags = new HashSet<>();\r\n            Object obj = entityInfo.get(ApplicationMetricsConstants.APP_TAGS_INFO);\r\n            if (obj != null && obj instanceof Collection<?>) {\r\n                for (Object o : (Collection<?>) obj) {\r\n                    if (o != null) {\r\n                        appTags.add(o.toString());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO)) {\r\n            latestApplicationAttemptId = ApplicationAttemptId.fromString(entityInfo.get(ApplicationMetricsConstants.LATEST_APP_ATTEMPT_EVENT_INFO).toString());\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO)) {\r\n            diagnosticsInfo = entityInfo.get(ApplicationMetricsConstants.DIAGNOSTICS_INFO_EVENT_INFO).toString();\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO)) {\r\n            finalStatus = FinalApplicationStatus.valueOf(entityInfo.get(ApplicationMetricsConstants.FINAL_STATUS_EVENT_INFO).toString());\r\n        }\r\n        if (entityInfo.containsKey(ApplicationMetricsConstants.STATE_EVENT_INFO)) {\r\n            state = YarnApplicationState.valueOf(entityInfo.get(ApplicationMetricsConstants.STATE_EVENT_INFO).toString());\r\n        }\r\n    }\r\n    Map<String, String> configs = entity.getConfigs();\r\n    if (configs.containsKey(ApplicationMetricsConstants.APP_NODE_LABEL_EXPRESSION)) {\r\n        appNodeLabelExpression = configs.get(ApplicationMetricsConstants.APP_NODE_LABEL_EXPRESSION);\r\n    }\r\n    if (configs.containsKey(ApplicationMetricsConstants.AM_NODE_LABEL_EXPRESSION)) {\r\n        amNodeLabelExpression = configs.get(ApplicationMetricsConstants.AM_NODE_LABEL_EXPRESSION);\r\n    }\r\n    Set<TimelineMetric> metrics = entity.getMetrics();\r\n    if (metrics != null) {\r\n        long vcoreSeconds = 0;\r\n        long memorySeconds = 0;\r\n        long preemptedVcoreSeconds = 0;\r\n        long preemptedMemorySeconds = 0;\r\n        for (TimelineMetric metric : metrics) {\r\n            switch(metric.getId()) {\r\n                case ApplicationMetricsConstants.APP_CPU_METRICS:\r\n                    vcoreSeconds = getAverageValue(metric.getValues().values());\r\n                    break;\r\n                case ApplicationMetricsConstants.APP_MEM_METRICS:\r\n                    memorySeconds = getAverageValue(metric.getValues().values());\r\n                    break;\r\n                case ApplicationMetricsConstants.APP_MEM_PREEMPT_METRICS:\r\n                    preemptedVcoreSeconds = getAverageValue(metric.getValues().values());\r\n                    break;\r\n                case ApplicationMetricsConstants.APP_CPU_PREEMPT_METRICS:\r\n                    preemptedVcoreSeconds = getAverageValue(metric.getValues().values());\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        Map<String, Long> resourceSecondsMap = new HashMap<>();\r\n        Map<String, Long> preemptedResoureSecondsMap = new HashMap<>();\r\n        resourceSecondsMap.put(ResourceInformation.MEMORY_MB.getName(), memorySeconds);\r\n        resourceSecondsMap.put(ResourceInformation.VCORES.getName(), vcoreSeconds);\r\n        preemptedResoureSecondsMap.put(ResourceInformation.MEMORY_MB.getName(), preemptedMemorySeconds);\r\n        preemptedResoureSecondsMap.put(ResourceInformation.VCORES.getName(), preemptedVcoreSeconds);\r\n        appResources = ApplicationResourceUsageReport.newInstance(0, 0, null, null, null, resourceSecondsMap, 0, 0, preemptedResoureSecondsMap);\r\n    }\r\n    NavigableSet<TimelineEvent> events = entity.getEvents();\r\n    long updatedTimeStamp = 0L;\r\n    if (events != null) {\r\n        for (TimelineEvent event : events) {\r\n            if (event.getId().equals(ApplicationMetricsConstants.CREATED_EVENT_TYPE)) {\r\n                createdTime = event.getTimestamp();\r\n            } else if (event.getId().equals(ApplicationMetricsConstants.LAUNCHED_EVENT_TYPE)) {\r\n                launchTime = event.getTimestamp();\r\n            } else if (event.getId().equals(ApplicationMetricsConstants.UPDATED_EVENT_TYPE)) {\r\n                if (event.getTimestamp() > updatedTimeStamp) {\r\n                    updatedTimeStamp = event.getTimestamp();\r\n                }\r\n            } else if (event.getId().equals(ApplicationMetricsConstants.STATE_UPDATED_EVENT_TYPE)) {\r\n                Map<String, Object> eventInfo = event.getInfo();\r\n                if (eventInfo == null) {\r\n                    continue;\r\n                }\r\n                if (eventInfo.containsKey(ApplicationMetricsConstants.STATE_EVENT_INFO)) {\r\n                    if (state == YarnApplicationState.ACCEPTED) {\r\n                        state = YarnApplicationState.valueOf(eventInfo.get(ApplicationMetricsConstants.STATE_EVENT_INFO).toString());\r\n                    }\r\n                }\r\n            } else if (event.getId().equals(ApplicationMetricsConstants.FINISHED_EVENT_TYPE)) {\r\n                progress = 1.0F;\r\n                state = YarnApplicationState.FINISHED;\r\n                finishedTime = event.getTimestamp();\r\n            }\r\n        }\r\n    }\r\n    return ApplicationReport.newInstance(ApplicationId.fromString(entity.getId()), latestApplicationAttemptId, user, queue, name, null, -1, null, state, diagnosticsInfo, null, createdTime, launchTime, finishedTime, finalStatus, appResources, null, progress, type, null, appTags, unmanagedApplication, Priority.newInstance(applicationPriority), appNodeLabelExpression, amNodeLabelExpression);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "getAverageValue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getAverageValue(Collection<Number> values)\n{\r\n    if (values == null || values.isEmpty()) {\r\n        return 0;\r\n    }\r\n    long sum = 0;\r\n    for (Number value : values) {\r\n        sum += value.longValue();\r\n    }\r\n    return sum / values.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(OutputStream os, CommonNodeLabelsManager mgr) throws IOException\n{\r\n    ((RemoveFromClusterNodeLabelsRequestPBImpl) RemoveFromClusterNodeLabelsRequest.newInstance(Sets.newHashSet(labels.iterator()))).getProto().writeDelimitedTo(os);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void recover(InputStream is, CommonNodeLabelsManager mgr) throws IOException\n{\r\n    labels = YarnServerResourceManagerServiceProtos.RemoveFromClusterNodeLabelsRequestProto.parseDelimitedFrom(is).getNodeLabelsList();\r\n    mgr.removeFromClusterNodeLabels(labels);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "setLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RemoveClusterLabelOp setLabels(Collection<String> nodeLabels)\n{\r\n    this.labels = nodeLabels;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Collection<String> getLabels()\n{\r\n    return labels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getOpCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getOpCode()\n{\r\n    return OPCODE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MoveApplicationAcrossQueuesResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PriorityProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = PriorityProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getPriority()\n{\r\n    PriorityProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getPriority());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPriority(int priority)\n{\r\n    maybeInitBuilder();\r\n    builder.setPriority((priority));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return Integer.toString(getPriority());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createTimelineClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineV2Client createTimelineClient(ApplicationId appId)\n{\r\n    TimelineV2Client client = new TimelineV2ClientImpl(appId);\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "putEntities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void putEntities(TimelineEntity... entities) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "putEntitiesAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void putEntitiesAsync(TimelineEntity... entities) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "setTimelineCollectorInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTimelineCollectorInfo(CollectorInfo collectorInfo)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "putSubAppEntities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void putSubAppEntities(TimelineEntity... entities) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "putSubAppEntitiesAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void putSubAppEntitiesAsync(TimelineEntity... entities) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshServiceAclsResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void close() throws Exception\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void flush() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"Timeline writer posting to \" + resURI;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putEntities",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelinePutResponse putEntities(TimelineEntity... entities) throws IOException, YarnException\n{\r\n    TimelineEntities entitiesContainer = new TimelineEntities();\r\n    for (TimelineEntity entity : entities) {\r\n        if (entity.getEntityId() == null || entity.getEntityType() == null) {\r\n            throw new YarnException(\"Incomplete entity without entity id/type\");\r\n        }\r\n        entitiesContainer.addEntity(entity);\r\n    }\r\n    ClientResponse resp = doPosting(entitiesContainer, null);\r\n    return resp.getEntity(TimelinePutResponse.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void putDomain(TimelineDomain domain) throws IOException, YarnException\n{\r\n    doPosting(domain, \"domain\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putEntities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelinePutResponse putEntities(ApplicationAttemptId appAttemptId, TimelineEntityGroupId groupId, TimelineEntity... entities) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putDomain",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void putDomain(ApplicationAttemptId appAttemptId, TimelineDomain domain) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "doPosting",
  "errType" : [ "UndeclaredThrowableException", "InterruptedException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ClientResponse doPosting(final Object obj, final String path) throws IOException, YarnException\n{\r\n    ClientResponse resp;\r\n    try {\r\n        resp = authUgi.doAs(new PrivilegedExceptionAction<ClientResponse>() {\r\n\r\n            @Override\r\n            public ClientResponse run() throws Exception {\r\n                return doPostingObject(obj, path);\r\n            }\r\n        });\r\n    } catch (UndeclaredThrowableException e) {\r\n        Throwable cause = e.getCause();\r\n        if (cause instanceof IOException) {\r\n            throw (IOException) cause;\r\n        } else {\r\n            throw new IOException(cause);\r\n        }\r\n    } catch (InterruptedException ie) {\r\n        throw (IOException) new InterruptedIOException().initCause(ie);\r\n    }\r\n    if (resp == null || resp.getStatusInfo().getStatusCode() != ClientResponse.Status.OK.getStatusCode()) {\r\n        String msg = \"Failed to get the response from the timeline server.\";\r\n        LOG.error(msg);\r\n        if (resp != null) {\r\n            msg += \" HTTP error code: \" + resp.getStatus();\r\n            LOG.debug(\"HTTP error code: {} Server response : \\n{}\", resp.getStatus(), resp.getEntity(String.class));\r\n        }\r\n        throw new YarnException(msg);\r\n    }\r\n    return resp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "doPostingObject",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ClientResponse doPostingObject(Object object, String path)\n{\r\n    WebResource webResource = client.resource(resURI);\r\n    if (path == null) {\r\n        LOG.debug(\"POST to {}\", resURI);\r\n        ClientResponse r = webResource.accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).post(ClientResponse.class, object);\r\n        r.bufferEntity();\r\n        return r;\r\n    } else if (path.equals(\"domain\")) {\r\n        LOG.debug(\"PUT to {}/{}\", resURI, path);\r\n        ClientResponse r = webResource.path(path).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class, object);\r\n        r.bufferEntity();\r\n        return r;\r\n    } else {\r\n        throw new YarnRuntimeException(\"Unknown resource type\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void render(Block html)\n{\r\n    html.link(root_url(\"static/jquery/themes-1.9.1/base/jquery-ui.css\")).link(root_url(\"static/dt-1.10.18/css/jquery.dataTables.css\")).link(root_url(\"static/dt-1.10.18/css/jui-dt.css\")).link(root_url(\"static/dt-1.10.18/css/custom_datatable.css\")).script(root_url(\"static/jquery/jquery-3.6.0.min.js\")).script(root_url(\"static/jquery/jquery-ui-1.12.1.custom.min.js\")).script(root_url(\"static/dt-1.10.18/js/jquery.dataTables.min.js\")).script(root_url(\"static/yarn.dt.plugins.js\")).script(root_url(\"static/dt-sorting/natural.js\")).style(\"#jsnotice { padding: 0.2em; text-align: center; }\", \".ui-progressbar { height: 1em; min-width: 5em }\");\r\n    List<String> list = Lists.newArrayList();\r\n    initAccordions(list);\r\n    initDataTables(list);\r\n    initDialogs(list);\r\n    initProgressBars(list);\r\n    if (!list.isEmpty()) {\r\n        html.script().$type(\"text/javascript\").__(\"$(function() {\").__(list.toArray()).__(\"});\").__();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "jsnotice",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void jsnotice(HTML html)\n{\r\n    html.div(\"#jsnotice.ui-state-error\").__(\"This page will not function without javascript enabled.\" + \" Please enable javascript on your browser.\").__();\r\n    html.script().$type(\"text/javascript\").__(\"$('#jsnotice').hide();\").__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "initAccordions",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void initAccordions(List<String> list)\n{\r\n    for (String id : split($(ACCORDION_ID))) {\r\n        if (Html.isValidId(id)) {\r\n            String init = $(initID(ACCORDION, id));\r\n            if (init.isEmpty()) {\r\n                init = \"{autoHeight: false}\";\r\n            }\r\n            list.add(join(\"  $('#\", id, \"').accordion(\", init, \");\"));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "initDataTables",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void initDataTables(List<String> list)\n{\r\n    String defaultInit = \"{bJQueryUI: true, sPaginationType: 'full_numbers'}\";\r\n    String stateSaveInit = \"bStateSave : true, \" + \"\\\"fnStateSave\\\": function (oSettings, oData) { \" + \" data = oData.aoSearchCols;\" + \"for(i =0 ; i < data.length; i ++) {\" + \"data[i].sSearch = \\\"\\\"\" + \"}\" + \" sessionStorage.setItem( oSettings.sTableId, JSON.stringify(oData) ); }, \" + \"\\\"fnStateLoad\\\": function (oSettings) { \" + \"return JSON.parse( sessionStorage.getItem(oSettings.sTableId) );}, \";\r\n    for (String id : split($(DATATABLES_ID))) {\r\n        if (Html.isValidId(id)) {\r\n            String init = $(initID(DATATABLES, id));\r\n            if (init.isEmpty()) {\r\n                init = defaultInit;\r\n            }\r\n            int pos = init.indexOf('{') + 1;\r\n            init = new StringBuffer(init).insert(pos, stateSaveInit).toString();\r\n            list.add(join(id, \"DataTable =  $('#\", id, \"').dataTable(\", init, \").fnSetFilteringDelay(188);\"));\r\n            String postInit = $(postInitID(DATATABLES, id));\r\n            if (!postInit.isEmpty()) {\r\n                list.add(postInit);\r\n            }\r\n        }\r\n    }\r\n    String selector = $(DATATABLES_SELECTOR);\r\n    if (!selector.isEmpty()) {\r\n        String init = $(initSelector(DATATABLES));\r\n        if (init.isEmpty()) {\r\n            init = defaultInit;\r\n        }\r\n        int pos = init.indexOf('{') + 1;\r\n        init = new StringBuffer(init).insert(pos, stateSaveInit).toString();\r\n        list.add(join(\"  $('\", escapeEcmaScript(selector), \"').dataTable(\", init, \").fnSetFilteringDelay(288);\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "initDialogs",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void initDialogs(List<String> list)\n{\r\n    String defaultInit = \"{autoOpen: false, show: transfer, hide: explode}\";\r\n    for (String id : split($(DIALOG_ID))) {\r\n        if (Html.isValidId(id)) {\r\n            String init = $(initID(DIALOG, id));\r\n            if (init.isEmpty()) {\r\n                init = defaultInit;\r\n            }\r\n            String opener = $(djoin(DIALOG, id, \"opener\"));\r\n            list.add(join(\"  $('#\", id, \"').dialog(\", init, \");\"));\r\n            if (!opener.isEmpty() && Html.isValidId(opener)) {\r\n                list.add(join(\"  $('#\", opener, \"').click(function() { \", \"$('#\", id, \"').dialog('open'); return false; });\"));\r\n            }\r\n        }\r\n    }\r\n    String selector = $(DIALOG_SELECTOR);\r\n    if (!selector.isEmpty()) {\r\n        String init = $(initSelector(DIALOG));\r\n        if (init.isEmpty()) {\r\n            init = defaultInit;\r\n        }\r\n        list.add(join(\"  $('\", escapeEcmaScript(selector), \"').click(function() { $(this).children('.dialog').dialog(\", init, \"); return false; });\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "initProgressBars",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initProgressBars(List<String> list)\n{\r\n    for (String id : split($(PROGRESSBAR_ID))) {\r\n        if (Html.isValidId(id)) {\r\n            String init = $(initID(PROGRESSBAR, id));\r\n            list.add(join(\"  $('#\", id, \"').progressbar(\", init, \");\"));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "initID",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String initID(String name, String id)\n{\r\n    return djoin(name, id, \"init\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "postInitID",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String postInitID(String name, String id)\n{\r\n    return djoin(name, id, \"postinit\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "initSelector",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String initSelector(String name)\n{\r\n    return djoin(name, \"selector.init\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "tableInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "StringBuilder tableInit()\n{\r\n    return new StringBuilder(\"{bJQueryUI:true, \").append(\"sPaginationType: 'full_numbers', iDisplayLength:20, \").append(\"aLengthMenu:[20, 40, 60, 80, 100]\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SignalContainerCommand convertFromProtoFormat(SignalContainerCommandProto p)\n{\r\n    return SignalContainerCommand.valueOf(p.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SignalContainerCommandProto convertToProtoFormat(SignalContainerCommand p)\n{\r\n    return SignalContainerCommandProto.valueOf(p.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SignalContainerRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerId != null) {\r\n        builder.setContainerId(convertToProtoFormat(this.containerId));\r\n    }\r\n    if (this.command != null) {\r\n        builder.setCommand(convertToProtoFormat(this.command));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SignalContainerRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    SignalContainerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerId != null) {\r\n        return this.containerId;\r\n    }\r\n    if (!p.hasContainerId()) {\r\n        return null;\r\n    }\r\n    this.containerId = convertFromProtoFormat(p.getContainerId());\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)\n{\r\n    maybeInitBuilder();\r\n    if (containerId == null) {\r\n        builder.clearContainerId();\r\n    }\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initCommand",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initCommand()\n{\r\n    if (this.command != null) {\r\n        return;\r\n    }\r\n    SignalContainerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (p.hasCommand()) {\r\n        this.command = convertFromProtoFormat(p.getCommand());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getCommand",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SignalContainerCommand getCommand()\n{\r\n    initCommand();\r\n    return command;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setCommand",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCommand(SignalContainerCommand command)\n{\r\n    maybeInitBuilder();\r\n    if (command == null) {\r\n        builder.clearCommand();\r\n    }\r\n    this.command = command;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getContainerID",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getContainerID()\n{\r\n    if (!proto.hasContainerId()) {\r\n        return null;\r\n    }\r\n    return new ContainerIdPBImpl(proto.getContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getApplicationSubmitter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getApplicationSubmitter()\n{\r\n    return proto.getAppSubmitter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getNmHostAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getNmHostAddress()\n{\r\n    return proto.getNmHostAddr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getResource()\n{\r\n    if (!proto.hasResource()) {\r\n        return null;\r\n    }\r\n    return new ResourcePBImpl(proto.getResource());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getExpiryTimeStamp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getExpiryTimeStamp()\n{\r\n    return proto.getExpiryTimeStamp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getMasterKeyId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getMasterKeyId()\n{\r\n    return proto.getMasterKeyId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    if (!proto.hasPriority()) {\r\n        return null;\r\n    }\r\n    return new PriorityPBImpl(proto.getPriority());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getCreationTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCreationTime()\n{\r\n    return proto.getCreationTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getRMIdentifier",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getRMIdentifier()\n{\r\n    return proto.getRmIdentifier();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getContainerType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerType getContainerType()\n{\r\n    if (!proto.hasContainerType()) {\r\n        return ContainerType.TASK;\r\n    }\r\n    return convertFromProtoFormat(proto.getContainerType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getExecutionType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ExecutionType getExecutionType()\n{\r\n    if (!proto.hasExecutionType()) {\r\n        return ExecutionType.GUARANTEED;\r\n    }\r\n    return convertFromProtoFormat(proto.getExecutionType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerTokenIdentifierProto getProto()\n{\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getLogAggregationContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LogAggregationContext getLogAggregationContext()\n{\r\n    if (!proto.hasLogAggregationContext()) {\r\n        return null;\r\n    }\r\n    return new LogAggregationContextPBImpl(proto.getLogAggregationContext());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getAllocationRequestId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAllocationRequestId()\n{\r\n    return proto.getAllocationRequestId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    LOG.debug(\"Writing ContainerTokenIdentifier to RPC layer: {}\", this);\r\n    out.write(proto.toByteArray());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "readFields",
  "errType" : [ "InvalidProtocolBufferException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    byte[] data = IOUtils.readFullyToByteArray(in);\r\n    try {\r\n        proto = ContainerTokenIdentifierProto.parseFrom(data);\r\n    } catch (InvalidProtocolBufferException e) {\r\n        LOG.warn(\"Recovering old formatted token\");\r\n        readFieldsInOldFormat(new DataInputStream(new ByteArrayInputStream(data)));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "readFieldsInOldFormat",
  "errType" : [ "EOFException" ],
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void readFieldsInOldFormat(DataInputStream in) throws IOException\n{\r\n    ContainerTokenIdentifierProto.Builder builder = ContainerTokenIdentifierProto.newBuilder();\r\n    builder.setNodeLabelExpression(CommonNodeLabelsManager.NO_LABEL);\r\n    builder.setContainerType(ProtoUtils.convertToProtoFormat(ContainerType.TASK));\r\n    builder.setExecutionType(ProtoUtils.convertToProtoFormat(ExecutionType.GUARANTEED));\r\n    builder.setAllocationRequestId(-1);\r\n    builder.setVersion(0);\r\n    ApplicationId applicationId = ApplicationId.newInstance(in.readLong(), in.readInt());\r\n    ApplicationAttemptId applicationAttemptId = ApplicationAttemptId.newInstance(applicationId, in.readInt());\r\n    ContainerId containerId = ContainerId.newContainerId(applicationAttemptId, in.readLong());\r\n    builder.setContainerId(ProtoUtils.convertToProtoFormat(containerId));\r\n    builder.setNmHostAddr(in.readUTF());\r\n    builder.setAppSubmitter(in.readUTF());\r\n    int memory = in.readInt();\r\n    int vCores = in.readInt();\r\n    Resource resource = Resource.newInstance(memory, vCores);\r\n    builder.setResource(ProtoUtils.convertToProtoFormat(resource));\r\n    builder.setExpiryTimeStamp(in.readLong());\r\n    builder.setMasterKeyId(in.readInt());\r\n    builder.setRmIdentifier(in.readLong());\r\n    Priority priority = Priority.newInstance(in.readInt());\r\n    builder.setPriority(((PriorityPBImpl) priority).getProto());\r\n    builder.setCreationTime(in.readLong());\r\n    int logAggregationSize = -1;\r\n    try {\r\n        logAggregationSize = in.readInt();\r\n    } catch (EOFException eof) {\r\n    }\r\n    if (logAggregationSize != -1) {\r\n        byte[] bytes = new byte[logAggregationSize];\r\n        in.readFully(bytes);\r\n        builder.setLogAggregationContext(LogAggregationContextProto.parseFrom(bytes));\r\n    }\r\n    proto = builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getKind",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Text getKind()\n{\r\n    return KIND;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "UserGroupInformation getUser()\n{\r\n    String containerId = null;\r\n    if (proto.hasContainerId()) {\r\n        containerId = new ContainerIdPBImpl(proto.getContainerId()).toString();\r\n    }\r\n    return UserGroupInformation.createRemoteUser(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getVersion()\n{\r\n    if (proto.hasVersion()) {\r\n        return proto.getVersion();\r\n    } else {\r\n        return 0;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getNodeLabelExpression()\n{\r\n    if (proto.hasNodeLabelExpression()) {\r\n        return proto.getNodeLabelExpression();\r\n    }\r\n    return CommonNodeLabelsManager.NO_LABEL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getAllcationTags",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Set<String> getAllcationTags()\n{\r\n    if (proto.getAllocationTagsList() != null) {\r\n        return new HashSet<>(proto.getAllocationTagsList());\r\n    }\r\n    return Collections.emptySet();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerTypeProto convertToProtoFormat(ContainerType containerType)\n{\r\n    return ProtoUtils.convertToProtoFormat(containerType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerType convertFromProtoFormat(ContainerTypeProto containerType)\n{\r\n    return ProtoUtils.convertFromProtoFormat(containerType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionTypeProto convertToProtoFormat(ExecutionType executionType)\n{\r\n    return ProtoUtils.convertToProtoFormat(executionType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionType convertFromProtoFormat(ExecutionTypeProto executionType)\n{\r\n    return ProtoUtils.convertFromProtoFormat(executionType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateApplicationPriorityRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = UpdateApplicationPriorityRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationId != null) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n    if (this.applicationPriority != null) {\r\n        builder.setApplicationPriority(convertToProtoFormat(this.applicationPriority));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getApplicationPriority()\n{\r\n    UpdateApplicationPriorityRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.applicationPriority != null) {\r\n        return this.applicationPriority;\r\n    }\r\n    if (!p.hasApplicationPriority()) {\r\n        return null;\r\n    }\r\n    this.applicationPriority = convertFromProtoFormat(p.getApplicationPriority());\r\n    return this.applicationPriority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationPriority(Priority priority)\n{\r\n    maybeInitBuilder();\r\n    if (priority == null)\r\n        builder.clearApplicationPriority();\r\n    this.applicationPriority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    UpdateApplicationPriorityRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.applicationId != null) {\r\n        return applicationId;\r\n    }\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null)\r\n        builder.clearApplicationId();\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PriorityPBImpl convertFromProtoFormat(PriorityProto p)\n{\r\n    return new PriorityPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PriorityProto convertToProtoFormat(Priority t)\n{\r\n    return ((PriorityPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "selectToken",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Token<ContainerTokenIdentifier> selectToken(Text service, Collection<Token<? extends TokenIdentifier>> tokens)\n{\r\n    if (service == null) {\r\n        return null;\r\n    }\r\n    for (Token<? extends TokenIdentifier> token : tokens) {\r\n        LOG.debug(\"Looking for service: {}. Current token is {}\", service, token);\r\n        if (ContainerTokenIdentifier.KIND.equals(token.getKind()) && service.equals(token.getService())) {\r\n            return (Token<ContainerTokenIdentifier>) token;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SystemClock getInstance()\n{\r\n    return INSTANCE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTime()\n{\r\n    return System.currentTimeMillis();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getPluginInfo",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CsiAdaptorProtos.GetPluginInfoResponse getPluginInfo(RpcController controller, CsiAdaptorProtos.GetPluginInfoRequest request) throws ServiceException\n{\r\n    try {\r\n        GetPluginInfoRequest req = new GetPluginInfoRequestPBImpl(request);\r\n        GetPluginInfoResponse response = real.getPluginInfo(req);\r\n        return ((GetPluginInfoResponsePBImpl) response).getProto();\r\n    } catch (YarnException | IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "validateVolumeCapacity",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CsiAdaptorProtos.ValidateVolumeCapabilitiesResponse validateVolumeCapacity(RpcController controller, CsiAdaptorProtos.ValidateVolumeCapabilitiesRequest request) throws ServiceException\n{\r\n    try {\r\n        ValidateVolumeCapabilitiesRequestPBImpl req = new ValidateVolumeCapabilitiesRequestPBImpl(request);\r\n        ValidateVolumeCapabilitiesResponse response = real.validateVolumeCapacity(req);\r\n        return ((ValidateVolumeCapabilitiesResponsePBImpl) response).getProto();\r\n    } catch (YarnException | IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "nodePublishVolume",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CsiAdaptorProtos.NodePublishVolumeResponse nodePublishVolume(RpcController controller, CsiAdaptorProtos.NodePublishVolumeRequest request) throws ServiceException\n{\r\n    try {\r\n        NodePublishVolumeRequestPBImpl req = new NodePublishVolumeRequestPBImpl(request);\r\n        NodePublishVolumeResponse response = real.nodePublishVolume(req);\r\n        return ((NodePublishVolumeResponsePBImpl) response).getProto();\r\n    } catch (YarnException | IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "nodeUnpublishVolume",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CsiAdaptorProtos.NodeUnpublishVolumeResponse nodeUnpublishVolume(RpcController controller, CsiAdaptorProtos.NodeUnpublishVolumeRequest request) throws ServiceException\n{\r\n    try {\r\n        NodeUnpublishVolumeRequestPBImpl req = new NodeUnpublishVolumeRequestPBImpl(request);\r\n        NodeUnpublishVolumeResponse response = real.nodeUnpublishVolume(req);\r\n        return ((NodeUnpublishVolumeResponsePBImpl) response).getProto();\r\n    } catch (YarnException | IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "toResponse",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Response toResponse(Exception e)\n{\r\n    if (LOG.isTraceEnabled()) {\r\n        LOG.trace(\"GOT EXCEPITION\", e);\r\n    }\r\n    if (e instanceof com.sun.jersey.api.NotFoundException) {\r\n        return ((com.sun.jersey.api.NotFoundException) e).getResponse();\r\n    }\r\n    response.setContentType(null);\r\n    if (e instanceof RemoteException) {\r\n        e = ((RemoteException) e).unwrapRemoteException();\r\n    }\r\n    final Response.Status s;\r\n    if (e instanceof SecurityException) {\r\n        s = Response.Status.UNAUTHORIZED;\r\n    } else if (e instanceof AuthorizationException) {\r\n        s = Response.Status.UNAUTHORIZED;\r\n    } else if (e instanceof FileNotFoundException) {\r\n        s = Response.Status.NOT_FOUND;\r\n    } else if (e instanceof NotFoundException) {\r\n        s = Response.Status.NOT_FOUND;\r\n    } else if (e instanceof IOException) {\r\n        s = Response.Status.NOT_FOUND;\r\n    } else if (e instanceof ForbiddenException) {\r\n        s = Response.Status.FORBIDDEN;\r\n    } else if (e instanceof UnsupportedOperationException) {\r\n        s = Response.Status.BAD_REQUEST;\r\n    } else if (e instanceof IllegalArgumentException) {\r\n        s = Response.Status.BAD_REQUEST;\r\n    } else if (e instanceof BadRequestException) {\r\n        s = Response.Status.BAD_REQUEST;\r\n    } else if (e instanceof WebApplicationException && e.getCause() instanceof UnmarshalException) {\r\n        s = Response.Status.BAD_REQUEST;\r\n    } else {\r\n        LOG.warn(\"INTERNAL_SERVER_ERROR\", e);\r\n        s = Response.Status.INTERNAL_SERVER_ERROR;\r\n    }\r\n    RemoteExceptionData exception = new RemoteExceptionData(e.getClass().getSimpleName(), e.getMessage(), e.getClass().getName());\r\n    return Response.status(s).entity(exception).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FailApplicationAttemptResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshNodesResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetContainerReportRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (containerId != null) {\r\n        builder.setContainerId(convertToProtoFormat(this.containerId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetContainerReportRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    if (this.containerId != null) {\r\n        return this.containerId;\r\n    }\r\n    GetContainerReportRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerId()) {\r\n        return null;\r\n    }\r\n    this.containerId = convertFromProtoFormat(p.getContainerId());\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)\n{\r\n    maybeInitBuilder();\r\n    if (containerId == null) {\r\n        builder.clearContainerId();\r\n    }\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UserGroupInformation getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getAccessType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AccessType getAccessType()\n{\r\n    return accessType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppId()\n{\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getAppName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppName()\n{\r\n    return appName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getEntity",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PrivilegedEntity getEntity()\n{\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getForwardedAddresses",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<String> getForwardedAddresses()\n{\r\n    return forwardedAddresses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getRemoteAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRemoteAddress()\n{\r\n    return remoteAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "nestLevel",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int nestLevel()\n{\r\n    return nestLevel;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "wasInline",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean wasInline()\n{\r\n    return wasInline;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "setWasInline",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setWasInline(boolean state)\n{\r\n    wasInline = state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "getWriter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PrintWriter getWriter()\n{\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "root",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Generic<T> root(String name, EnumSet<EOpt> opts)\n{\r\n    return new Generic<T>(name, null, opts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "root",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Generic<T> root(String name)\n{\r\n    return root(name, of(ENDTAG));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "printStartTag",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void printStartTag(String name, EnumSet<EOpt> opts)\n{\r\n    indent(opts);\r\n    sb.setLength(0);\r\n    out.print(sb.append('<').append(name).toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "indent",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void indent(EnumSet<EOpt> opts)\n{\r\n    if (opts.contains(INLINE) && wasInline) {\r\n        return;\r\n    }\r\n    if (wasInline) {\r\n        out.println();\r\n    }\r\n    wasInline = opts.contains(INLINE) || opts.contains(PRE);\r\n    for (int i = 0; i < nestLevel; ++i) {\r\n        out.print(INDENT_CHARS);\r\n    }\r\n    ++indents;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "printEndTag",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void printEndTag(String name, EnumSet<EOpt> opts)\n{\r\n    if (!opts.contains(ENDTAG)) {\r\n        return;\r\n    }\r\n    if (!opts.contains(PRE)) {\r\n        indent(opts);\r\n    } else {\r\n        wasInline = opts.contains(INLINE);\r\n    }\r\n    sb.setLength(0);\r\n    out.print(sb.append(\"</\").append(name).append('>').toString());\r\n    if (!opts.contains(INLINE)) {\r\n        out.println();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "printAttr",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void printAttr(String name, String value)\n{\r\n    sb.setLength(0);\r\n    sb.append(' ').append(name);\r\n    if (value != null) {\r\n        sb.append(\"=\\\"\").append(escapeHtml4(value)).append(\"\\\"\");\r\n    }\r\n    out.print(sb.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "subView",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void subView(Class<? extends SubView> cls)\n{\r\n    indent(of(ENDTAG));\r\n    sb.setLength(0);\r\n    out.print(sb.append('[').append(cls.getName()).append(']').toString());\r\n    out.println();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "parseSelector",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "String[] parseSelector(String selector)\n{\r\n    String[] result = new String[] { null, null };\r\n    Iterable<String> rs = SS.split(selector);\r\n    Iterator<String> it = rs.iterator();\r\n    if (it.hasNext()) {\r\n        String maybeId = it.next();\r\n        if (maybeId.charAt(0) == '#') {\r\n            result[S_ID] = maybeId.substring(1);\r\n            if (it.hasNext()) {\r\n                result[S_CLASS] = SJ.join(Iterables.skip(rs, 1));\r\n            }\r\n        } else {\r\n            result[S_CLASS] = SJ.join(rs);\r\n        }\r\n        return result;\r\n    }\r\n    throw new WebAppException(\"Error parsing selector: \" + selector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "setSelector",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "E setSelector(E e, String selector)\n{\r\n    String[] res = parseSelector(selector);\r\n    if (res[S_ID] != null) {\r\n        e.$id(res[S_ID]);\r\n    }\r\n    if (res[S_CLASS] != null) {\r\n        e.$class(res[S_CLASS]);\r\n    }\r\n    return e;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "setLinkHref",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "E setLinkHref(E e, String href)\n{\r\n    if (href.endsWith(\".css\")) {\r\n        e.$rel(\"stylesheet\");\r\n    }\r\n    e.$href(href);\r\n    return e;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "setScriptSrc",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "E setScriptSrc(E e, String src)\n{\r\n    if (src.endsWith(\".js\")) {\r\n        e.$type(\"text/javascript\");\r\n    }\r\n    e.$src(src);\r\n    return e;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "init",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void init(Configuration conf)\n{\r\n    if (initCalled) {\r\n        return;\r\n    }\r\n    initCalled = true;\r\n    Class<? extends DNSToSwitchMapping> dnsToSwitchMappingClass = conf.getClass(CommonConfigurationKeysPublic.NET_TOPOLOGY_NODE_SWITCH_MAPPING_IMPL_KEY, ScriptBasedMapping.class, DNSToSwitchMapping.class);\r\n    try {\r\n        DNSToSwitchMapping newInstance = ReflectionUtils.newInstance(dnsToSwitchMappingClass, conf);\r\n        dnsToSwitchMapping = ((newInstance instanceof CachedDNSToSwitchMapping) ? newInstance : new CachedDNSToSwitchMapping(newInstance));\r\n    } catch (Exception e) {\r\n        throw new RuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "resolve",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Node resolve(Configuration conf, String hostName)\n{\r\n    init(conf);\r\n    return coreResolve(hostName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "resolve",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<Node> resolve(Configuration conf, List<String> hostNames)\n{\r\n    init(conf);\r\n    return coreResolve(hostNames);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "resolve",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Node resolve(String hostName)\n{\r\n    if (!initCalled) {\r\n        throw new IllegalStateException(\"RackResolver class not yet initialized\");\r\n    }\r\n    return coreResolve(hostName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "resolve",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Node> resolve(List<String> hostNames)\n{\r\n    if (!initCalled) {\r\n        throw new IllegalStateException(\"RackResolver class \" + \"not yet initialized\");\r\n    }\r\n    return coreResolve(hostNames);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "coreResolve",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Node coreResolve(String hostName)\n{\r\n    List<String> tmpList = Collections.singletonList(hostName);\r\n    return coreResolve(tmpList).get(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "coreResolve",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "List<Node> coreResolve(List<String> hostNames)\n{\r\n    List<Node> nodes = new ArrayList<Node>(hostNames.size());\r\n    List<String> rNameList = dnsToSwitchMapping.resolve(hostNames);\r\n    if (rNameList == null || rNameList.isEmpty()) {\r\n        for (String hostName : hostNames) {\r\n            nodes.add(new NodeBase(hostName, NetworkTopology.DEFAULT_RACK));\r\n        }\r\n        LOG.info(\"Got an error when resolve hostNames. Falling back to \" + NetworkTopology.DEFAULT_RACK + \" for all.\");\r\n    } else {\r\n        for (int i = 0; i < hostNames.size(); i++) {\r\n            if (Strings.isNullOrEmpty(rNameList.get(i))) {\r\n                nodes.add(new NodeBase(hostNames.get(i), NetworkTopology.DEFAULT_RACK));\r\n                LOG.debug(\"Could not resolve {}. Falling back to {}\", hostNames.get(i), NetworkTopology.DEFAULT_RACK);\r\n            } else {\r\n                nodes.add(new NodeBase(hostNames.get(i), rNameList.get(i)));\r\n                LOG.debug(\"Resolved {} to {}\", hostNames.get(i), rNameList.get(i));\r\n            }\r\n        }\r\n    }\r\n    return nodes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getDnsToSwitchMapping",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DNSToSwitchMapping getDnsToSwitchMapping()\n{\r\n    return dnsToSwitchMapping;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "reset",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void reset()\n{\r\n    initCalled = false;\r\n    dnsToSwitchMapping = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "compare",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int compare(Resource clusterResource, Resource lhs, Resource rhs, boolean singleType)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "compare",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int compare(Resource clusterResource, Resource lhs, Resource rhs)\n{\r\n    return compare(clusterResource, lhs, rhs, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int divideAndCeil(int a, int b)\n{\r\n    if (b == 0) {\r\n        return 0;\r\n    }\r\n    return (a + (b - 1)) / b;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int divideAndCeil(int a, float b)\n{\r\n    if (b == 0) {\r\n        return 0;\r\n    }\r\n    return (int) Math.ceil(a / b);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long divideAndCeil(long a, long b)\n{\r\n    if (b == 0) {\r\n        return 0;\r\n    }\r\n    return (a + (b - 1)) / b;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long divideAndCeil(long a, float b)\n{\r\n    if (b == 0) {\r\n        return 0;\r\n    }\r\n    return (long) Math.ceil(a / b);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideSafelyAsFloat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float divideSafelyAsFloat(long lhs, long rhs)\n{\r\n    if (lhs == 0 && rhs == 0) {\r\n        return 0;\r\n    } else {\r\n        return (float) lhs / (float) rhs;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "roundUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int roundUp(int a, int b)\n{\r\n    return divideAndCeil(a, b) * b;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "roundUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long roundUp(long a, long b)\n{\r\n    return divideAndCeil(a, b) * b;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "roundDown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long roundDown(long a, long b)\n{\r\n    return (a / b) * b;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "roundDown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int roundDown(int a, int b)\n{\r\n    return (a / b) * b;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "computeAvailableContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long computeAvailableContainers(Resource available, Resource required)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalizeUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource multiplyAndNormalizeUp(Resource r, double by, Resource stepFactor)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalizeUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource multiplyAndNormalizeUp(Resource r, double[] by, Resource stepFactor)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalizeDown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource multiplyAndNormalizeDown(Resource r, double by, Resource stepFactor)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "normalize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource normalize(Resource r, Resource minimumResource, Resource maximumResource, Resource stepFactor)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "roundUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource roundUp(Resource r, Resource stepFactor)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "roundDown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource roundDown(Resource r, Resource stepFactor)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divide",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float divide(Resource clusterResource, Resource numerator, Resource denominator)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isInvalidDivisor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isInvalidDivisor(Resource r)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isAllInvalidDivisor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isAllInvalidDivisor(Resource r)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "ratio",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float ratio(Resource a, Resource b)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource divideAndCeil(Resource numerator, int denominator)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource divideAndCeil(Resource numerator, float denominator)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "fitsIn",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean fitsIn(Resource smaller, Resource bigger)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isAnyMajorResourceZeroOrNegative",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isAnyMajorResourceZeroOrNegative(Resource resource)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "normalizeDown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource normalizeDown(Resource r, Resource stepFactor)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isAnyMajorResourceAboveZero",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isAnyMajorResourceAboveZero(Resource resource)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "getInsufficientResourceNames",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<String> getInsufficientResourceNames(Resource required, Resource available)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalResourceProto getProto()\n{\r\n    mergeLocalToBuilder();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    LocalResourceProtoOrBuilder l = viaProto ? proto : builder;\r\n    if (this.url != null && !(l.getResource().equals(((URLPBImpl) url).getProto()))) {\r\n        maybeInitBuilder();\r\n        l = builder;\r\n        builder.setResource(convertToProtoFormat(this.url));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = LocalResourceProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getSize()\n{\r\n    LocalResourceProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getSize());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setSize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setSize(long size)\n{\r\n    maybeInitBuilder();\r\n    builder.setSize((size));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getTimestamp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTimestamp()\n{\r\n    LocalResourceProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getTimestamp());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setTimestamp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTimestamp(long timestamp)\n{\r\n    maybeInitBuilder();\r\n    builder.setTimestamp((timestamp));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalResourceType getType()\n{\r\n    LocalResourceProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasType()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setType(LocalResourceType type)\n{\r\n    maybeInitBuilder();\r\n    if (type == null) {\r\n        builder.clearType();\r\n        return;\r\n    }\r\n    builder.setType(convertToProtoFormat(type));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "URL getResource()\n{\r\n    LocalResourceProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.url != null) {\r\n        return this.url;\r\n    }\r\n    if (!p.hasResource()) {\r\n        return null;\r\n    }\r\n    this.url = convertFromProtoFormat(p.getResource());\r\n    return this.url;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResource(URL resource)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null)\r\n        builder.clearResource();\r\n    this.url = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getVisibility",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalResourceVisibility getVisibility()\n{\r\n    LocalResourceProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasVisibility()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getVisibility());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setVisibility",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setVisibility(LocalResourceVisibility visibility)\n{\r\n    maybeInitBuilder();\r\n    if (visibility == null) {\r\n        builder.clearVisibility();\r\n        return;\r\n    }\r\n    builder.setVisibility(convertToProtoFormat(visibility));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPattern",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getPattern()\n{\r\n    LocalResourceProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasPattern()) {\r\n        return null;\r\n    }\r\n    return p.getPattern();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPattern",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setPattern(String pattern)\n{\r\n    maybeInitBuilder();\r\n    if (pattern == null) {\r\n        builder.clearPattern();\r\n        return;\r\n    }\r\n    builder.setPattern(pattern);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getShouldBeUploadedToSharedCache",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean getShouldBeUploadedToSharedCache()\n{\r\n    LocalResourceProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasShouldBeUploadedToSharedCache()) {\r\n        return false;\r\n    }\r\n    return p.getShouldBeUploadedToSharedCache();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setShouldBeUploadedToSharedCache",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setShouldBeUploadedToSharedCache(boolean shouldBeUploadedToSharedCache)\n{\r\n    maybeInitBuilder();\r\n    if (!shouldBeUploadedToSharedCache) {\r\n        builder.clearShouldBeUploadedToSharedCache();\r\n        return;\r\n    }\r\n    builder.setShouldBeUploadedToSharedCache(shouldBeUploadedToSharedCache);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResourceTypeProto convertToProtoFormat(LocalResourceType e)\n{\r\n    return ProtoUtils.convertToProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResourceType convertFromProtoFormat(LocalResourceTypeProto e)\n{\r\n    return ProtoUtils.convertFromProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "URLPBImpl convertFromProtoFormat(URLProto p)\n{\r\n    return new URLPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URLProto convertToProtoFormat(URL t)\n{\r\n    return ((URLPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResourceVisibilityProto convertToProtoFormat(LocalResourceVisibility e)\n{\r\n    return ProtoUtils.convertToProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResourceVisibility convertFromProtoFormat(LocalResourceVisibilityProto e)\n{\r\n    return ProtoUtils.convertFromProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationRequestsProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.reservationRequests != null) {\r\n        addReservationResourcesToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReservationRequestsProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getReservationResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ReservationRequest> getReservationResources()\n{\r\n    initReservationRequestsList();\r\n    return reservationRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setReservationResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setReservationResources(List<ReservationRequest> resources)\n{\r\n    if (resources == null) {\r\n        builder.clearReservationResources();\r\n        return;\r\n    }\r\n    this.reservationRequests = resources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getInterpreter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationRequestInterpreter getInterpreter()\n{\r\n    ReservationRequestsProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasInterpreter()) {\r\n        return null;\r\n    }\r\n    return (convertFromProtoFormat(p.getInterpreter()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setInterpreter",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setInterpreter(ReservationRequestInterpreter interpreter)\n{\r\n    maybeInitBuilder();\r\n    if (interpreter == null) {\r\n        builder.clearInterpreter();\r\n        return;\r\n    }\r\n    builder.setInterpreter(convertToProtoFormat(interpreter));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initReservationRequestsList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initReservationRequestsList()\n{\r\n    if (this.reservationRequests != null) {\r\n        return;\r\n    }\r\n    ReservationRequestsProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ReservationRequestProto> resourceProtos = p.getReservationResourcesList();\r\n    reservationRequests = new ArrayList<ReservationRequest>();\r\n    for (ReservationRequestProto r : resourceProtos) {\r\n        reservationRequests.add(convertFromProtoFormat(r));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addReservationResourcesToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addReservationResourcesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearReservationResources();\r\n    if (reservationRequests == null)\r\n        return;\r\n    Iterable<ReservationRequestProto> iterable = new Iterable<ReservationRequestProto>() {\r\n\r\n        @Override\r\n        public Iterator<ReservationRequestProto> iterator() {\r\n            return new Iterator<ReservationRequestProto>() {\r\n\r\n                Iterator<ReservationRequest> iter = reservationRequests.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ReservationRequestProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllReservationResources(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationRequestProto convertToProtoFormat(ReservationRequest r)\n{\r\n    return ((ReservationRequestPBImpl) r).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationRequestPBImpl convertFromProtoFormat(ReservationRequestProto r)\n{\r\n    return new ReservationRequestPBImpl(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationRequestInterpreterProto convertToProtoFormat(ReservationRequestInterpreter r)\n{\r\n    return ProtoUtils.convertToProtoFormat(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationRequestInterpreter convertFromProtoFormat(ReservationRequestInterpreterProto r)\n{\r\n    return ProtoUtils.convertFromProtoFormat(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    return \"{Reservation Resources: \" + getReservationResources() + \", Reservation Type: \" + getInterpreter() + \"}\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnServiceProtos.ReInitializeContainerResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getServiceDataFromEnv",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ByteBuffer getServiceDataFromEnv(String serviceName, Map<String, String> env)\n{\r\n    String meta = env.get(getPrefixServiceName(serviceName));\r\n    if (null == meta) {\r\n        return null;\r\n    }\r\n    byte[] metaData = Base64.decodeBase64(meta);\r\n    return ByteBuffer.wrap(metaData);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setServiceDataIntoEnv",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setServiceDataIntoEnv(String serviceName, ByteBuffer metaData, Map<String, String> env)\n{\r\n    byte[] byteData = metaData.array();\r\n    env.put(getPrefixServiceName(serviceName), Base64.encodeBase64String(byteData));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getPrefixServiceName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPrefixServiceName(String serviceName)\n{\r\n    return NM_AUX_SERVICE + serviceName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetClusterNodesRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeStates",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "EnumSet<NodeState> getNodeStates()\n{\r\n    initNodeStates();\r\n    return this.states;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeStates",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeStates(final EnumSet<NodeState> states)\n{\r\n    initNodeStates();\r\n    this.states.clear();\r\n    if (states == null) {\r\n        return;\r\n    }\r\n    this.states.addAll(states);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetClusterNodesRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.states != null) {\r\n        maybeInitBuilder();\r\n        builder.clearNodeStates();\r\n        Iterable<NodeStateProto> iterable = new Iterable<NodeStateProto>() {\r\n\r\n            @Override\r\n            public Iterator<NodeStateProto> iterator() {\r\n                return new Iterator<NodeStateProto>() {\r\n\r\n                    Iterator<NodeState> iter = states.iterator();\r\n\r\n                    @Override\r\n                    public boolean hasNext() {\r\n                        return iter.hasNext();\r\n                    }\r\n\r\n                    @Override\r\n                    public NodeStateProto next() {\r\n                        return ProtoUtils.convertToProtoFormat(iter.next());\r\n                    }\r\n\r\n                    @Override\r\n                    public void remove() {\r\n                        throw new UnsupportedOperationException();\r\n                    }\r\n                };\r\n            }\r\n        };\r\n        builder.addAllNodeStates(iterable);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeStates",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initNodeStates()\n{\r\n    if (this.states != null) {\r\n        return;\r\n    }\r\n    GetClusterNodesRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeStateProto> list = p.getNodeStatesList();\r\n    this.states = EnumSet.noneOf(NodeState.class);\r\n    for (NodeStateProto c : list) {\r\n        this.states.add(ProtoUtils.convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\log",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n    String logEntity = $(ENTITY_STRING);\r\n    if (logEntity == null || logEntity.isEmpty()) {\r\n        logEntity = $(CONTAINER_ID);\r\n    }\r\n    if (logEntity == null || logEntity.isEmpty()) {\r\n        logEntity = \"UNKNOWN\";\r\n    }\r\n    set(TITLE, join(\"Logs for \", logEntity));\r\n    set(ACCORDION_ID, \"nav\");\r\n    set(initID(ACCORDION, \"nav\"), \"{autoHeight:false, active:0}\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\log",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return AggregatedLogsBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\log",
  "methodName" : "nav",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> nav()\n{\r\n    return AggregatedLogsNavBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "runCleanerTask",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RunSharedCacheCleanerTaskResponse runCleanerTask(RunSharedCacheCleanerTaskRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.RunSharedCacheCleanerTaskRequestProto requestProto = ((RunSharedCacheCleanerTaskRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RunSharedCacheCleanerTaskResponsePBImpl(proxy.runCleanerTask(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getQueueName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getQueueName()\n{\r\n    QueueUserACLInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasQueueName()) ? p.getQueueName() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getUserAcls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<QueueACL> getUserAcls()\n{\r\n    initLocalQueueUserAclsList();\r\n    return this.userAclsList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setQueueName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueueName(String queueName)\n{\r\n    maybeInitBuilder();\r\n    if (queueName == null) {\r\n        builder.clearQueueName();\r\n        return;\r\n    }\r\n    builder.setQueueName(queueName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setUserAcls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setUserAcls(List<QueueACL> userAclsList)\n{\r\n    if (userAclsList == null) {\r\n        builder.clearUserAcls();\r\n    }\r\n    this.userAclsList = userAclsList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "QueueUserACLInfoProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initLocalQueueUserAclsList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalQueueUserAclsList()\n{\r\n    if (this.userAclsList != null) {\r\n        return;\r\n    }\r\n    QueueUserACLInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<QueueACLProto> list = p.getUserAclsList();\r\n    userAclsList = new ArrayList<QueueACL>();\r\n    for (QueueACLProto a : list) {\r\n        userAclsList.add(convertFromProtoFormat(a));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addQueueACLsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addQueueACLsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearUserAcls();\r\n    if (userAclsList == null)\r\n        return;\r\n    Iterable<QueueACLProto> iterable = new Iterable<QueueACLProto>() {\r\n\r\n        @Override\r\n        public Iterator<QueueACLProto> iterator() {\r\n            return new Iterator<QueueACLProto>() {\r\n\r\n                Iterator<QueueACL> iter = userAclsList.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public QueueACLProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllUserAcls(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = QueueUserACLInfoProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.userAclsList != null) {\r\n        addQueueACLsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueACL convertFromProtoFormat(QueueACLProto q)\n{\r\n    return ProtoUtils.convertFromProtoFormat(q);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueACLProto convertToProtoFormat(QueueACL queueAcl)\n{\r\n    return ProtoUtils.convertToProtoFormat(queueAcl);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpdateNodeResourceResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return getProto().toString().replaceAll(\"\\\\n\", \", \").replaceAll(\"\\\\s+\", \" \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void render(Page.HTML<__> html)\n{\r\n    preHead(html);\r\n    html.title($(\"title\")).link(root_url(\"static\", \"yarn.css\")).style(\".main { min-height: 100%; height: auto !important; height: 100%;\", \"  margin: 0 auto -4em; border: 0; }\", \".footer, .push { height: 4em; clear: both; border: 0 }\", \".main.ui-widget-content, .footer.ui-widget-content { border: 0; }\", \".cmask { position: relative; clear: both; float: left;\", \"  width: 100%; overflow: hidden; }\", \".leftnav .c1right { float: left; width: 200%; position: relative;\", \"  left: 13em; border: 0; /* background: #fff; */ }\", \".leftnav .c1wrap { float: right; width: 50%; position: relative;\", \"  right: 13em; padding-bottom: 1em; }\", \".leftnav .content { margin: 0 1em 0 14em; position: relative;\", \"  right: 100%; overflow: hidden; }\", \".leftnav .nav { float: left; width: 11em; position: relative;\", \"  right: 12em; overflow: hidden; }\").__(JQueryUI.class);\r\n    postHead(html);\r\n    JQueryUI.jsnotice(html);\r\n    html.div(\".main.ui-widget-content\").__(header()).div(\".cmask.leftnav\").div(\".c1right\").div(\".c1wrap\").div(\".content\").__(content()).__().__().div(\".nav\").__(nav()).div(\".push\").__().__().__().__().__().div(\".footer.ui-widget-content\").__(footer()).__().__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "preHead",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void preHead(Page.HTML<__> html)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "postHead",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void postHead(Page.HTML<__> html)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "header",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> header()\n{\r\n    return HeaderBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "content",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> content()\n{\r\n    return LipsumBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "nav",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> nav()\n{\r\n    return NavBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "footer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends SubView> footer()\n{\r\n    return FooterBlock.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getKind",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Text getKind()\n{\r\n    return KIND_NAME;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getVolumeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getVolumeId()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.getVolumeId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setVolumeAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setVolumeAttributes(Map<String, String> attributes)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.addAllVolumeAttributes(ProtoUtils.convertToProtoFormat(attributes));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setVolumeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setVolumeId(String volumeId)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setVolumeId(volumeId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addVolumeCapability",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addVolumeCapability(VolumeCapability volumeCapability)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    CsiAdaptorProtos.VolumeCapability vc = CsiAdaptorProtos.VolumeCapability.newBuilder().setAccessMode(CsiAdaptorProtos.VolumeCapability.AccessMode.forNumber(volumeCapability.getAccessMode().ordinal())).setVolumeType(CsiAdaptorProtos.VolumeCapability.VolumeType.forNumber(volumeCapability.getVolumeType().ordinal())).addAllMountFlags(volumeCapability.getMountFlags()).build();\r\n    builder.addVolumeCapabilities(vc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getVolumeCapabilities",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<VolumeCapability> getVolumeCapabilities()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    List<VolumeCapability> caps = new ArrayList<>(builder.getVolumeCapabilitiesCount());\r\n    builder.getVolumeCapabilitiesList().forEach(capability -> {\r\n        VolumeCapability vc = new VolumeCapability(AccessMode.valueOf(capability.getAccessMode().name()), VolumeType.valueOf(capability.getVolumeType().name()), capability.getMountFlagsList());\r\n        caps.add(vc);\r\n    });\r\n    return caps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getVolumeAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, String> getVolumeAttributes()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return ProtoUtils.convertStringStringMapProtoListToMap(builder.getVolumeAttributesList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CsiAdaptorProtos.ValidateVolumeCapabilitiesRequest getProto()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AllocateRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.ask != null) {\r\n        addAsksToProto();\r\n    }\r\n    if (this.release != null) {\r\n        addReleasesToProto();\r\n    }\r\n    if (this.updateRequests != null) {\r\n        addUpdateRequestsToProto();\r\n    }\r\n    if (this.schedulingRequests != null) {\r\n        addSchedulingRequestsToProto();\r\n    }\r\n    if (this.blacklistRequest != null) {\r\n        builder.setBlacklistRequest(convertToProtoFormat(this.blacklistRequest));\r\n    }\r\n    if (this.trackingUrl != null) {\r\n        builder.setTrackingUrl(this.trackingUrl);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = AllocateRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResponseId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getResponseId()\n{\r\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getResponseId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResponseId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResponseId(int id)\n{\r\n    maybeInitBuilder();\r\n    builder.setResponseId(id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProgress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getProgress()\n{\r\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getProgress();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setProgress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setProgress(float progress)\n{\r\n    maybeInitBuilder();\r\n    builder.setProgress(progress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAskList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ResourceRequest> getAskList()\n{\r\n    initAsks();\r\n    return this.ask;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAskList",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAskList(final List<ResourceRequest> resourceRequests)\n{\r\n    if (resourceRequests == null) {\r\n        return;\r\n    }\r\n    initAsks();\r\n    this.ask.clear();\r\n    this.ask.addAll(resourceRequests);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getUpdateRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<UpdateContainerRequest> getUpdateRequests()\n{\r\n    initUpdateRequests();\r\n    return this.updateRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setUpdateRequests",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUpdateRequests(List<UpdateContainerRequest> updateRequests)\n{\r\n    if (updateRequests == null) {\r\n        return;\r\n    }\r\n    initUpdateRequests();\r\n    this.updateRequests.clear();\r\n    this.updateRequests.addAll(updateRequests);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getSchedulingRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<SchedulingRequest> getSchedulingRequests()\n{\r\n    initSchedulingRequests();\r\n    return this.schedulingRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setSchedulingRequests",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setSchedulingRequests(List<SchedulingRequest> schedulingRequests)\n{\r\n    if (schedulingRequests == null) {\r\n        builder.clearSchedulingRequests();\r\n        return;\r\n    }\r\n    initSchedulingRequests();\r\n    this.schedulingRequests.clear();\r\n    this.schedulingRequests.addAll(schedulingRequests);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResourceBlacklistRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceBlacklistRequest getResourceBlacklistRequest()\n{\r\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.blacklistRequest != null) {\r\n        return this.blacklistRequest;\r\n    }\r\n    if (!p.hasBlacklistRequest()) {\r\n        return null;\r\n    }\r\n    this.blacklistRequest = convertFromProtoFormat(p.getBlacklistRequest());\r\n    return this.blacklistRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResourceBlacklistRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResourceBlacklistRequest(ResourceBlacklistRequest blacklistRequest)\n{\r\n    maybeInitBuilder();\r\n    if (blacklistRequest == null) {\r\n        builder.clearBlacklistRequest();\r\n    }\r\n    this.blacklistRequest = blacklistRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initAsks",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initAsks()\n{\r\n    if (this.ask != null) {\r\n        return;\r\n    }\r\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ResourceRequestProto> list = p.getAskList();\r\n    this.ask = new ArrayList<ResourceRequest>();\r\n    for (ResourceRequestProto c : list) {\r\n        this.ask.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addAsksToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addAsksToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearAsk();\r\n    if (ask == null)\r\n        return;\r\n    Iterable<ResourceRequestProto> iterable = new Iterable<ResourceRequestProto>() {\r\n\r\n        @Override\r\n        public Iterator<ResourceRequestProto> iterator() {\r\n            return new Iterator<ResourceRequestProto>() {\r\n\r\n                Iterator<ResourceRequest> iter = ask.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ResourceRequestProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllAsk(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initUpdateRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initUpdateRequests()\n{\r\n    if (this.updateRequests != null) {\r\n        return;\r\n    }\r\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<UpdateContainerRequestProto> list = p.getUpdateRequestsList();\r\n    this.updateRequests = new ArrayList<>();\r\n    for (UpdateContainerRequestProto c : list) {\r\n        this.updateRequests.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initSchedulingRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initSchedulingRequests()\n{\r\n    if (this.schedulingRequests != null) {\r\n        return;\r\n    }\r\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<SchedulingRequestProto> list = p.getSchedulingRequestsList();\r\n    this.schedulingRequests = new ArrayList<>();\r\n    for (SchedulingRequestProto c : list) {\r\n        this.schedulingRequests.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addUpdateRequestsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addUpdateRequestsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearUpdateRequests();\r\n    if (updateRequests == null) {\r\n        return;\r\n    }\r\n    Iterable<UpdateContainerRequestProto> iterable = new Iterable<UpdateContainerRequestProto>() {\r\n\r\n        @Override\r\n        public Iterator<UpdateContainerRequestProto> iterator() {\r\n            return new Iterator<UpdateContainerRequestProto>() {\r\n\r\n                private Iterator<UpdateContainerRequest> iter = updateRequests.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public UpdateContainerRequestProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllUpdateRequests(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addSchedulingRequestsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addSchedulingRequestsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearSchedulingRequests();\r\n    if (schedulingRequests == null) {\r\n        return;\r\n    }\r\n    Iterable<SchedulingRequestProto> iterable = new Iterable<SchedulingRequestProto>() {\r\n\r\n        @Override\r\n        public Iterator<SchedulingRequestProto> iterator() {\r\n            return new Iterator<SchedulingRequestProto>() {\r\n\r\n                private Iterator<SchedulingRequest> iter = schedulingRequests.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public SchedulingRequestProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllSchedulingRequests(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getReleaseList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerId> getReleaseList()\n{\r\n    initReleases();\r\n    return this.release;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setReleaseList",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setReleaseList(List<ContainerId> releaseContainers)\n{\r\n    if (releaseContainers == null) {\r\n        return;\r\n    }\r\n    initReleases();\r\n    this.release.clear();\r\n    this.release.addAll(releaseContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initReleases",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initReleases()\n{\r\n    if (this.release != null) {\r\n        return;\r\n    }\r\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerIdProto> list = p.getReleaseList();\r\n    this.release = new ArrayList<ContainerId>();\r\n    for (ContainerIdProto c : list) {\r\n        this.release.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getTrackingUrl()\n{\r\n    AllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.trackingUrl != null) {\r\n        return this.trackingUrl;\r\n    }\r\n    if (p.hasTrackingUrl()) {\r\n        this.trackingUrl = p.getTrackingUrl();\r\n    }\r\n    return this.trackingUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTrackingUrl(String trackingUrl)\n{\r\n    maybeInitBuilder();\r\n    if (trackingUrl == null) {\r\n        builder.clearTrackingUrl();\r\n    }\r\n    this.trackingUrl = trackingUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addReleasesToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addReleasesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearRelease();\r\n    if (release == null)\r\n        return;\r\n    Iterable<ContainerIdProto> iterable = new Iterable<ContainerIdProto>() {\r\n\r\n        @Override\r\n        public Iterator<ContainerIdProto> iterator() {\r\n            return new Iterator<ContainerIdProto>() {\r\n\r\n                Iterator<ContainerId> iter = release.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ContainerIdProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllRelease(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceRequestPBImpl convertFromProtoFormat(ResourceRequestProto p)\n{\r\n    return new ResourceRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceRequestProto convertToProtoFormat(ResourceRequest t)\n{\r\n    return ((ResourceRequestPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UpdateContainerRequestPBImpl convertFromProtoFormat(UpdateContainerRequestProto p)\n{\r\n    return new UpdateContainerRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpdateContainerRequestProto convertToProtoFormat(UpdateContainerRequest t)\n{\r\n    return ((UpdateContainerRequestPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SchedulingRequestPBImpl convertFromProtoFormat(SchedulingRequestProto p)\n{\r\n    return new SchedulingRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SchedulingRequestProto convertToProtoFormat(SchedulingRequest t)\n{\r\n    return ((SchedulingRequestPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceBlacklistRequestPBImpl convertFromProtoFormat(ResourceBlacklistRequestProto p)\n{\r\n    return new ResourceBlacklistRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceBlacklistRequestProto convertToProtoFormat(ResourceBlacklistRequest t)\n{\r\n    return ((ResourceBlacklistRequestPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "PreemptionContractProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.resources != null) {\r\n        addResourcesToProto();\r\n    }\r\n    if (this.containers != null) {\r\n        addContainersToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = PreemptionContractProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<PreemptionContainer> getContainers()\n{\r\n    initPreemptionContainers();\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setContainers(final Set<PreemptionContainer> containers)\n{\r\n    if (null == containers) {\r\n        builder.clearContainer();\r\n    }\r\n    this.containers = containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<PreemptionResourceRequest> getResourceRequest()\n{\r\n    initPreemptionResourceRequests();\r\n    return resources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setResourceRequest(final List<PreemptionResourceRequest> req)\n{\r\n    if (null == resources) {\r\n        builder.clearResource();\r\n    }\r\n    this.resources = req;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initPreemptionResourceRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initPreemptionResourceRequests()\n{\r\n    if (resources != null) {\r\n        return;\r\n    }\r\n    PreemptionContractProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<PreemptionResourceRequestProto> list = p.getResourceList();\r\n    resources = new ArrayList<PreemptionResourceRequest>();\r\n    for (PreemptionResourceRequestProto rr : list) {\r\n        resources.add(convertFromProtoFormat(rr));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addResourcesToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addResourcesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearResource();\r\n    if (null == resources) {\r\n        return;\r\n    }\r\n    Iterable<PreemptionResourceRequestProto> iterable = new Iterable<PreemptionResourceRequestProto>() {\r\n\r\n        @Override\r\n        public Iterator<PreemptionResourceRequestProto> iterator() {\r\n            return new Iterator<PreemptionResourceRequestProto>() {\r\n\r\n                Iterator<PreemptionResourceRequest> iter = resources.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public PreemptionResourceRequestProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllResource(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initPreemptionContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initPreemptionContainers()\n{\r\n    if (containers != null) {\r\n        return;\r\n    }\r\n    PreemptionContractProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<PreemptionContainerProto> list = p.getContainerList();\r\n    containers = new HashSet<PreemptionContainer>();\r\n    for (PreemptionContainerProto c : list) {\r\n        containers.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addContainersToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addContainersToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainer();\r\n    if (null == containers) {\r\n        return;\r\n    }\r\n    Iterable<PreemptionContainerProto> iterable = new Iterable<PreemptionContainerProto>() {\r\n\r\n        @Override\r\n        public Iterator<PreemptionContainerProto> iterator() {\r\n            return new Iterator<PreemptionContainerProto>() {\r\n\r\n                Iterator<PreemptionContainer> iter = containers.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public PreemptionContainerProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllContainer(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PreemptionContainerPBImpl convertFromProtoFormat(PreemptionContainerProto p)\n{\r\n    return new PreemptionContainerPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PreemptionContainerProto convertToProtoFormat(PreemptionContainer t)\n{\r\n    return ((PreemptionContainerPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PreemptionResourceRequestPBImpl convertFromProtoFormat(PreemptionResourceRequestProto p)\n{\r\n    return new PreemptionResourceRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PreemptionResourceRequestProto convertToProtoFormat(PreemptionResourceRequest t)\n{\r\n    return ((PreemptionResourceRequestPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "initInternal",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initInternal(Configuration conf)\n{\r\n    String compressName = conf.get(YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE, YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE);\r\n    this.compressAlgo = Compression.getCompressionAlgorithmByName(compressName);\r\n    this.fsNumRetries = conf.getInt(FS_NUM_RETRIES_ATTR, 3);\r\n    this.fsRetryInterval = conf.getLong(FS_RETRY_INTERVAL_MS_ATTR, 1000L);\r\n    this.logRollOverMaxFileSize = getRollOverLogMaxSize(conf);\r\n    this.sysClock = getSystemClock();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "initializeWriter",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void initializeWriter(final LogAggregationFileControllerContext context) throws IOException\n{\r\n    final UserGroupInformation userUgi = context.getUserUgi();\r\n    final Map<ApplicationAccessType, String> appAcls = context.getAppAcls();\r\n    final String nodeId = context.getNodeId().toString();\r\n    final ApplicationId appId = context.getAppId();\r\n    final Path remoteLogFile = context.getRemoteNodeLogFileForApp();\r\n    this.ugi = userUgi;\r\n    logAggregationSuccessfullyInThisCyCle = false;\r\n    logsMetaInThisCycle = new IndexedPerAggregationLogMeta();\r\n    logAggregationTimeInThisCycle = this.sysClock.getTime();\r\n    logsMetaInThisCycle.setUploadTimeStamp(logAggregationTimeInThisCycle);\r\n    logsMetaInThisCycle.setRemoteNodeFile(remoteLogFile.getName());\r\n    try {\r\n        userUgi.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n            @Override\r\n            public Object run() throws Exception {\r\n                fc = FileContext.getFileContext(remoteRootLogDir.toUri(), conf);\r\n                fc.setUMask(APP_LOG_FILE_UMASK);\r\n                if (indexedLogsMeta == null) {\r\n                    indexedLogsMeta = new IndexedLogsMeta();\r\n                    indexedLogsMeta.setVersion(VERSION);\r\n                    indexedLogsMeta.setUser(userUgi.getShortUserName());\r\n                    indexedLogsMeta.setAcls(appAcls);\r\n                    indexedLogsMeta.setNodeId(nodeId);\r\n                    String compressName = conf.get(YarnConfiguration.NM_LOG_AGG_COMPRESSION_TYPE, YarnConfiguration.DEFAULT_NM_LOG_AGG_COMPRESSION_TYPE);\r\n                    indexedLogsMeta.setCompressName(compressName);\r\n                }\r\n                Path aggregatedLogFile = null;\r\n                Pair<Path, Boolean> initializationResult = null;\r\n                boolean createdNew;\r\n                if (context.isLogAggregationInRolling()) {\r\n                    initializationResult = initializeWriterInRolling(remoteLogFile, appId, nodeId);\r\n                    aggregatedLogFile = initializationResult.getLeft();\r\n                    createdNew = initializationResult.getRight();\r\n                } else {\r\n                    aggregatedLogFile = remoteLogFile;\r\n                    fsDataOStream = fc.create(remoteLogFile, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), new Options.CreateOpts[] {});\r\n                    if (uuid == null) {\r\n                        uuid = createUUID(appId);\r\n                    }\r\n                    fsDataOStream.write(uuid);\r\n                    fsDataOStream.flush();\r\n                    createdNew = true;\r\n                }\r\n                if (createdNew) {\r\n                    currentOffSet = 0;\r\n                } else {\r\n                    long aggregatedLogFileLength = fc.getFileStatus(aggregatedLogFile).getLen();\r\n                    final byte[] dummyBytes = \"\\n\".getBytes(Charset.forName(\"UTF-8\"));\r\n                    fsDataOStream.write(dummyBytes);\r\n                    fsDataOStream.flush();\r\n                    if (fsDataOStream.getPos() < (aggregatedLogFileLength + dummyBytes.length)) {\r\n                        currentOffSet = fc.getFileStatus(aggregatedLogFile).getLen();\r\n                    } else {\r\n                        currentOffSet = 0;\r\n                    }\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    } catch (Exception e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "initializeWriterInRolling",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "Pair<Path, Boolean> initializeWriterInRolling(final Path remoteLogFile, final ApplicationId appId, final String nodeId) throws Exception\n{\r\n    boolean createdNew = false;\r\n    Path aggregatedLogFile = null;\r\n    if (uuid == null) {\r\n        uuid = loadUUIDFromLogFile(fc, remoteLogFile.getParent(), appId, nodeId);\r\n    }\r\n    Path currentRemoteLogFile = getCurrentRemoteLogFile(fc, remoteLogFile.getParent(), nodeId);\r\n    boolean overwriteCheckSum = true;\r\n    remoteLogCheckSumFile = new Path(remoteLogFile.getParent(), (remoteLogFile.getName() + CHECK_SUM_FILE_SUFFIX));\r\n    if (fc.util().exists(remoteLogCheckSumFile)) {\r\n        indexedLogsMeta.getLogMetas().clear();\r\n        if (currentRemoteLogFile != null) {\r\n            FSDataInputStream checksumFileInputStream = null;\r\n            try {\r\n                checksumFileInputStream = fc.open(remoteLogCheckSumFile);\r\n                int nameLength = checksumFileInputStream.readInt();\r\n                byte[] b = new byte[nameLength];\r\n                int actualLength = checksumFileInputStream.read(b);\r\n                if (actualLength == nameLength) {\r\n                    String recoveredLogFile = new String(b, Charset.forName(\"UTF-8\"));\r\n                    if (recoveredLogFile.equals(currentRemoteLogFile.getName())) {\r\n                        overwriteCheckSum = false;\r\n                        long endIndex = checksumFileInputStream.readLong();\r\n                        IndexedLogsMeta recoveredLogsMeta = loadIndexedLogsMeta(currentRemoteLogFile, endIndex, appId);\r\n                        if (recoveredLogsMeta != null) {\r\n                            indexedLogsMeta = recoveredLogsMeta;\r\n                        }\r\n                    }\r\n                }\r\n            } finally {\r\n                IOUtils.cleanupWithLogger(LOG, checksumFileInputStream);\r\n            }\r\n        }\r\n    }\r\n    if (currentRemoteLogFile == null || isRollover(fc, currentRemoteLogFile)) {\r\n        indexedLogsMeta.getLogMetas().clear();\r\n        overwriteCheckSum = true;\r\n        aggregatedLogFile = new Path(remoteLogFile.getParent(), remoteLogFile.getName() + \"_\" + sysClock.getTime());\r\n        fsDataOStream = fc.create(aggregatedLogFile, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), new Options.CreateOpts[] {});\r\n        fsDataOStream.write(uuid);\r\n        fsDataOStream.flush();\r\n        createdNew = true;\r\n    } else {\r\n        aggregatedLogFile = currentRemoteLogFile;\r\n        fsDataOStream = fc.create(currentRemoteLogFile, EnumSet.of(CreateFlag.CREATE, CreateFlag.APPEND), new Options.CreateOpts[] {});\r\n    }\r\n    if (overwriteCheckSum) {\r\n        long currentAggregatedLogFileLength;\r\n        if (createdNew) {\r\n            currentAggregatedLogFileLength = 0;\r\n        } else {\r\n            currentAggregatedLogFileLength = fc.getFileStatus(aggregatedLogFile).getLen();\r\n        }\r\n        FSDataOutputStream checksumFileOutputStream = null;\r\n        try {\r\n            checksumFileOutputStream = fc.create(remoteLogCheckSumFile, EnumSet.of(CreateFlag.CREATE, CreateFlag.OVERWRITE), new Options.CreateOpts[] {});\r\n            String fileName = aggregatedLogFile.getName();\r\n            checksumFileOutputStream.writeInt(fileName.length());\r\n            checksumFileOutputStream.write(fileName.getBytes(Charset.forName(\"UTF-8\")));\r\n            checksumFileOutputStream.writeLong(currentAggregatedLogFileLength);\r\n            checksumFileOutputStream.flush();\r\n        } finally {\r\n            IOUtils.cleanupWithLogger(LOG, checksumFileOutputStream);\r\n        }\r\n    }\r\n    return Pair.of(aggregatedLogFile, createdNew);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "closeWriter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void closeWriter()\n{\r\n    IOUtils.cleanupWithLogger(LOG, this.fsDataOStream);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "write",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void write(LogKey logKey, LogValue logValue) throws IOException\n{\r\n    String containerId = logKey.toString();\r\n    Set<File> pendingUploadFiles = logValue.getPendingLogFilesToUploadForThisContainer();\r\n    List<IndexedFileLogMeta> metas = new ArrayList<>();\r\n    for (File logFile : pendingUploadFiles) {\r\n        FileInputStream in = null;\r\n        try {\r\n            in = SecureIOUtils.openForRead(logFile, logValue.getUser(), null);\r\n        } catch (IOException e) {\r\n            logErrorMessage(logFile, e);\r\n            IOUtils.cleanupWithLogger(LOG, in);\r\n            continue;\r\n        }\r\n        final long fileLength = logFile.length();\r\n        IndexedFileOutputStreamState outputStreamState = null;\r\n        try {\r\n            outputStreamState = new IndexedFileOutputStreamState(this.compressAlgo, this.fsDataOStream, conf, this.currentOffSet);\r\n            byte[] buf = new byte[65535];\r\n            int len = 0;\r\n            long bytesLeft = fileLength;\r\n            while ((len = in.read(buf)) != -1) {\r\n                if (len < bytesLeft) {\r\n                    outputStreamState.getOutputStream().write(buf, 0, len);\r\n                    bytesLeft -= len;\r\n                } else {\r\n                    outputStreamState.getOutputStream().write(buf, 0, (int) bytesLeft);\r\n                    break;\r\n                }\r\n            }\r\n            long newLength = logFile.length();\r\n            if (fileLength < newLength) {\r\n                LOG.warn(\"Aggregated logs truncated by approximately \" + (newLength - fileLength) + \" bytes.\");\r\n            }\r\n            logAggregationSuccessfullyInThisCyCle = true;\r\n        } catch (IOException e) {\r\n            String message = logErrorMessage(logFile, e);\r\n            if (outputStreamState != null && outputStreamState.getOutputStream() != null) {\r\n                outputStreamState.getOutputStream().write(message.getBytes(Charset.forName(\"UTF-8\")));\r\n            }\r\n        } finally {\r\n            IOUtils.cleanupWithLogger(LOG, in);\r\n        }\r\n        IndexedFileLogMeta meta = new IndexedFileLogMeta();\r\n        meta.setContainerId(containerId.toString());\r\n        meta.setFileName(logFile.getName());\r\n        if (outputStreamState != null) {\r\n            outputStreamState.finish();\r\n            meta.setFileCompressedSize(outputStreamState.getCompressedSize());\r\n            meta.setStartIndex(outputStreamState.getStartPos());\r\n            meta.setFileSize(fileLength);\r\n        }\r\n        meta.setLastModifiedTime(logFile.lastModified());\r\n        metas.add(meta);\r\n    }\r\n    logsMetaInThisCycle.addContainerLogMeta(containerId, metas);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "postWrite",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void postWrite(LogAggregationFileControllerContext record) throws Exception\n{\r\n    indexedLogsMeta.addLogMeta(logsMetaInThisCycle);\r\n    byte[] b = SerializationUtils.serialize(indexedLogsMeta);\r\n    this.fsDataOStream.write(b);\r\n    int length = b.length;\r\n    this.fsDataOStream.writeInt(length);\r\n    this.fsDataOStream.write(uuid);\r\n    if (logAggregationSuccessfullyInThisCyCle && record.isLogAggregationInRolling()) {\r\n        deleteFileWithRetries(fc, ugi, remoteLogCheckSumFile);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "deleteFileWithRetries",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void deleteFileWithRetries(final FileContext fileContext, final UserGroupInformation userUgi, final Path deletePath) throws Exception\n{\r\n    new FSAction<Void>() {\r\n\r\n        @Override\r\n        public Void run() throws Exception {\r\n            deleteFileWithPrivilege(fileContext, userUgi, deletePath);\r\n            return null;\r\n        }\r\n    }.runWithRetries();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "deleteFileWithRetries",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void deleteFileWithRetries(final FileContext fileContext, final Path deletePath) throws Exception\n{\r\n    new FSAction<Void>() {\r\n\r\n        @Override\r\n        public Void run() throws Exception {\r\n            if (fileContext.util().exists(deletePath)) {\r\n                fileContext.delete(deletePath, false);\r\n            }\r\n            return null;\r\n        }\r\n    }.runWithRetries();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "truncateFileWithRetries",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void truncateFileWithRetries(final FileContext fileContext, final Path truncatePath, final long newLength) throws Exception\n{\r\n    new FSAction<Void>() {\r\n\r\n        @Override\r\n        public Void run() throws Exception {\r\n            fileContext.truncate(truncatePath, newLength);\r\n            return null;\r\n        }\r\n    }.runWithRetries();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "deleteFileWithPrivilege",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Object deleteFileWithPrivilege(final FileContext fileContext, final UserGroupInformation userUgi, final Path fileToDelete) throws Exception\n{\r\n    return userUgi.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            if (fileContext.util().exists(fileToDelete)) {\r\n                fileContext.delete(fileToDelete, false);\r\n            }\r\n            return null;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "readAggregatedLogs",
  "errType" : [ "Exception", "IOException" ],
  "containingMethodsNum" : 46,
  "sourceCodeText" : "boolean readAggregatedLogs(ContainerLogsRequest logRequest, OutputStream os) throws IOException\n{\r\n    boolean findLogs = false;\r\n    boolean createPrintStream = (os == null);\r\n    ApplicationId appId = logRequest.getAppId();\r\n    String nodeId = logRequest.getNodeId();\r\n    String nodeIdStr = (nodeId == null || nodeId.isEmpty()) ? null : LogAggregationUtils.getNodeString(nodeId);\r\n    List<String> logTypes = new ArrayList<>();\r\n    if (logRequest.getLogTypes() != null && !logRequest.getLogTypes().isEmpty()) {\r\n        logTypes.addAll(logRequest.getLogTypes());\r\n    }\r\n    String containerIdStr = logRequest.getContainerId();\r\n    boolean getAllContainers = (containerIdStr == null || containerIdStr.isEmpty());\r\n    long size = logRequest.getBytes();\r\n    RemoteIterator<FileStatus> nodeFiles = LogAggregationUtils.getRemoteNodeFileDir(conf, appId, logRequest.getAppOwner(), this.remoteRootLogDir, this.remoteRootLogDirSuffix);\r\n    if (!nodeFiles.hasNext()) {\r\n        throw new IOException(\"There is no available log file for \" + \"application:\" + appId);\r\n    }\r\n    List<FileStatus> allFiles = getAllNodeFiles(nodeFiles, appId);\r\n    if (allFiles.isEmpty()) {\r\n        throw new IOException(\"There is no available log file for \" + \"application:\" + appId);\r\n    }\r\n    Map<String, Long> checkSumFiles = parseCheckSumFiles(allFiles);\r\n    List<FileStatus> fileToRead = getNodeLogFileToRead(allFiles, nodeIdStr, appId);\r\n    byte[] buf = new byte[65535];\r\n    for (FileStatus thisNodeFile : fileToRead) {\r\n        String nodeName = thisNodeFile.getPath().getName();\r\n        Long checkSumIndex = checkSumFiles.get(nodeName);\r\n        long endIndex = -1;\r\n        if (checkSumIndex != null) {\r\n            endIndex = checkSumIndex.longValue();\r\n        }\r\n        IndexedLogsMeta indexedLogsMeta = null;\r\n        try {\r\n            indexedLogsMeta = loadIndexedLogsMeta(thisNodeFile.getPath(), endIndex, appId);\r\n        } catch (Exception ex) {\r\n            LOG.warn(\"Can not load log meta from the log file:\" + thisNodeFile.getPath() + \"\\n\" + ex.getMessage());\r\n            continue;\r\n        }\r\n        if (indexedLogsMeta == null) {\r\n            continue;\r\n        }\r\n        String compressAlgo = indexedLogsMeta.getCompressName();\r\n        List<IndexedFileLogMeta> candidates = new ArrayList<>();\r\n        for (IndexedPerAggregationLogMeta logMeta : indexedLogsMeta.getLogMetas()) {\r\n            for (Entry<String, List<IndexedFileLogMeta>> meta : logMeta.getLogMetas().entrySet()) {\r\n                for (IndexedFileLogMeta log : meta.getValue()) {\r\n                    if (!getAllContainers && !log.getContainerId().equals(containerIdStr)) {\r\n                        continue;\r\n                    }\r\n                    if (logTypes != null && !logTypes.isEmpty() && !logTypes.contains(log.getFileName())) {\r\n                        continue;\r\n                    }\r\n                    candidates.add(log);\r\n                }\r\n            }\r\n        }\r\n        if (candidates.isEmpty()) {\r\n            continue;\r\n        }\r\n        Algorithm compressName = Compression.getCompressionAlgorithmByName(compressAlgo);\r\n        Decompressor decompressor = compressName.getDecompressor();\r\n        FileContext fileContext = FileContext.getFileContext(thisNodeFile.getPath().toUri(), conf);\r\n        FSDataInputStream fsin = fileContext.open(thisNodeFile.getPath());\r\n        String currentContainer = \"\";\r\n        for (IndexedFileLogMeta candidate : candidates) {\r\n            if (!candidate.getContainerId().equals(currentContainer)) {\r\n                if (createPrintStream) {\r\n                    closePrintStream(os);\r\n                    os = LogToolUtils.createPrintStream(logRequest.getOutputLocalDir(), thisNodeFile.getPath().getName(), candidate.getContainerId());\r\n                    currentContainer = candidate.getContainerId();\r\n                }\r\n            }\r\n            InputStream in = null;\r\n            try {\r\n                in = compressName.createDecompressionStream(new BoundedRangeFileInputStream(fsin, candidate.getStartIndex(), candidate.getFileCompressedSize()), decompressor, getFSInputBufferSize(conf));\r\n                LogToolUtils.outputContainerLog(candidate.getContainerId(), nodeName, candidate.getFileName(), candidate.getFileSize(), size, Times.format(candidate.getLastModifiedTime()), in, os, buf, ContainerLogAggregationType.AGGREGATED);\r\n                byte[] b = aggregatedLogSuffix(candidate.getFileName()).getBytes(Charset.forName(\"UTF-8\"));\r\n                os.write(b, 0, b.length);\r\n                findLogs = true;\r\n            } catch (IOException e) {\r\n                System.err.println(e.getMessage());\r\n                compressName.returnDecompressor(decompressor);\r\n                continue;\r\n            } finally {\r\n                os.flush();\r\n                IOUtils.cleanupWithLogger(LOG, in);\r\n            }\r\n        }\r\n    }\r\n    return findLogs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getLogMetaFilesOfNode",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "Map<String, List<ContainerLogFileInfo>> getLogMetaFilesOfNode(ExtendedLogMetaRequest logRequest, FileStatus currentNodeFile, ApplicationId appId) throws IOException\n{\r\n    Map<String, List<ContainerLogFileInfo>> logMetaFiles = new HashMap<>();\r\n    Long checkSumIndex = parseChecksum(currentNodeFile);\r\n    long endIndex = -1;\r\n    if (checkSumIndex != null) {\r\n        endIndex = checkSumIndex;\r\n    }\r\n    IndexedLogsMeta current = loadIndexedLogsMeta(currentNodeFile.getPath(), endIndex, appId);\r\n    if (current != null) {\r\n        for (IndexedPerAggregationLogMeta logMeta : current.getLogMetas()) {\r\n            for (Entry<String, List<IndexedFileLogMeta>> log : logMeta.getLogMetas().entrySet()) {\r\n                String currentContainerId = log.getKey();\r\n                if (!(logRequest.getContainerId() == null || logRequest.getContainerId().equals(currentContainerId))) {\r\n                    continue;\r\n                }\r\n                logMetaFiles.put(currentContainerId, new ArrayList<>());\r\n                for (IndexedFileLogMeta aMeta : log.getValue()) {\r\n                    ContainerLogFileInfo file = new ContainerLogFileInfo();\r\n                    file.setFileName(aMeta.getFileName());\r\n                    file.setFileSize(Long.toString(aMeta.getFileSize()));\r\n                    file.setLastModifiedTime(Long.toString(aMeta.getLastModifiedTime()));\r\n                    logMetaFiles.get(currentContainerId).add(file);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return logMetaFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "readAggregatedLogsMeta",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 33,
  "sourceCodeText" : "List<ContainerLogMeta> readAggregatedLogsMeta(ContainerLogsRequest logRequest) throws IOException\n{\r\n    List<IndexedLogsMeta> listOfLogsMeta = new ArrayList<>();\r\n    List<ContainerLogMeta> containersLogMeta = new ArrayList<>();\r\n    String containerIdStr = logRequest.getContainerId();\r\n    String nodeId = logRequest.getNodeId();\r\n    ApplicationId appId = logRequest.getAppId();\r\n    String appOwner = logRequest.getAppOwner();\r\n    ApplicationAttemptId appAttemptId = logRequest.getAppAttemptId();\r\n    boolean getAllContainers = (containerIdStr == null || containerIdStr.isEmpty());\r\n    String nodeIdStr = (nodeId == null || nodeId.isEmpty()) ? null : LogAggregationUtils.getNodeString(nodeId);\r\n    RemoteIterator<FileStatus> nodeFiles = LogAggregationUtils.getRemoteNodeFileDir(conf, appId, appOwner, this.remoteRootLogDir, this.remoteRootLogDirSuffix);\r\n    if (!nodeFiles.hasNext()) {\r\n        throw new IOException(\"There is no available log file for \" + \"application:\" + appId);\r\n    }\r\n    List<FileStatus> allFiles = getAllNodeFiles(nodeFiles, appId);\r\n    if (allFiles.isEmpty()) {\r\n        throw new IOException(\"There is no available log file for \" + \"application:\" + appId);\r\n    }\r\n    Map<String, Long> checkSumFiles = parseCheckSumFiles(allFiles);\r\n    List<FileStatus> fileToRead = getNodeLogFileToRead(allFiles, nodeIdStr, appId);\r\n    for (FileStatus thisNodeFile : fileToRead) {\r\n        try {\r\n            Long checkSumIndex = checkSumFiles.get(thisNodeFile.getPath().getName());\r\n            long endIndex = -1;\r\n            if (checkSumIndex != null) {\r\n                endIndex = checkSumIndex.longValue();\r\n            }\r\n            IndexedLogsMeta current = loadIndexedLogsMeta(thisNodeFile.getPath(), endIndex, appId);\r\n            if (current != null) {\r\n                listOfLogsMeta.add(current);\r\n            }\r\n        } catch (IOException ex) {\r\n            LOG.warn(\"Can not get log meta from the log file:\" + thisNodeFile.getPath() + \"\\n\" + ex.getMessage());\r\n        }\r\n    }\r\n    for (IndexedLogsMeta indexedLogMeta : listOfLogsMeta) {\r\n        String curNodeId = indexedLogMeta.getNodeId();\r\n        for (IndexedPerAggregationLogMeta logMeta : indexedLogMeta.getLogMetas()) {\r\n            if (getAllContainers) {\r\n                for (Entry<String, List<IndexedFileLogMeta>> log : logMeta.getLogMetas().entrySet()) {\r\n                    String currentContainerIdStr = log.getKey();\r\n                    if (appAttemptId != null && !belongsToAppAttempt(appAttemptId, currentContainerIdStr)) {\r\n                        continue;\r\n                    }\r\n                    ContainerLogMeta meta = new ContainerLogMeta(log.getKey(), curNodeId);\r\n                    for (IndexedFileLogMeta aMeta : log.getValue()) {\r\n                        meta.addLogMeta(aMeta.getFileName(), Long.toString(aMeta.getFileSize()), Times.format(aMeta.getLastModifiedTime()));\r\n                    }\r\n                    containersLogMeta.add(meta);\r\n                }\r\n            } else if (logMeta.getContainerLogMeta(containerIdStr) != null) {\r\n                ContainerLogMeta meta = new ContainerLogMeta(containerIdStr, curNodeId);\r\n                for (IndexedFileLogMeta log : logMeta.getContainerLogMeta(containerIdStr)) {\r\n                    meta.addLogMeta(log.getFileName(), Long.toString(log.getFileSize()), Times.format(log.getLastModifiedTime()));\r\n                }\r\n                containersLogMeta.add(meta);\r\n            }\r\n        }\r\n    }\r\n    Collections.sort(containersLogMeta, new Comparator<ContainerLogMeta>() {\r\n\r\n        @Override\r\n        public int compare(ContainerLogMeta o1, ContainerLogMeta o2) {\r\n            return o1.getContainerId().compareTo(o2.getContainerId());\r\n        }\r\n    });\r\n    return containersLogMeta;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "parseCheckSumFiles",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Map<String, Long> parseCheckSumFiles(List<FileStatus> fileList) throws IOException\n{\r\n    Map<String, Long> checkSumFiles = new HashMap<>();\r\n    Set<FileStatus> status = new HashSet<>(fileList).stream().filter(next -> next.getPath().getName().endsWith(CHECK_SUM_FILE_SUFFIX)).collect(Collectors.toSet());\r\n    FileContext fc = null;\r\n    for (FileStatus file : status) {\r\n        FSDataInputStream checksumFileInputStream = null;\r\n        try {\r\n            if (fc == null) {\r\n                fc = FileContext.getFileContext(file.getPath().toUri(), conf);\r\n            }\r\n            String nodeName = null;\r\n            long index = 0L;\r\n            checksumFileInputStream = fc.open(file.getPath());\r\n            int nameLength = checksumFileInputStream.readInt();\r\n            byte[] b = new byte[nameLength];\r\n            int actualLength = checksumFileInputStream.read(b);\r\n            if (actualLength == nameLength) {\r\n                nodeName = new String(b, Charset.forName(\"UTF-8\"));\r\n                index = checksumFileInputStream.readLong();\r\n            } else {\r\n                continue;\r\n            }\r\n            if (nodeName != null && !nodeName.isEmpty()) {\r\n                checkSumFiles.put(nodeName, Long.valueOf(index));\r\n            }\r\n        } catch (IOException ex) {\r\n            LOG.warn(ex.getMessage());\r\n            continue;\r\n        } finally {\r\n            IOUtils.cleanupWithLogger(LOG, checksumFileInputStream);\r\n        }\r\n    }\r\n    return checkSumFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "parseChecksum",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Long parseChecksum(FileStatus file)\n{\r\n    if (!file.getPath().getName().endsWith(CHECK_SUM_FILE_SUFFIX)) {\r\n        return null;\r\n    }\r\n    FSDataInputStream checksumFileInputStream = null;\r\n    try {\r\n        FileContext fileContext = FileContext.getFileContext(file.getPath().toUri(), conf);\r\n        String nodeName = null;\r\n        long index = 0L;\r\n        checksumFileInputStream = fileContext.open(file.getPath());\r\n        int nameLength = checksumFileInputStream.readInt();\r\n        byte[] b = new byte[nameLength];\r\n        int actualLength = checksumFileInputStream.read(b);\r\n        if (actualLength == nameLength) {\r\n            nodeName = new String(b, StandardCharsets.UTF_8);\r\n            index = checksumFileInputStream.readLong();\r\n        } else {\r\n            return null;\r\n        }\r\n        if (!nodeName.isEmpty()) {\r\n            return index;\r\n        }\r\n    } catch (IOException ex) {\r\n        LOG.warn(ex.getMessage());\r\n        return null;\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, checksumFileInputStream);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getNodeLogFileToRead",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<FileStatus> getNodeLogFileToRead(List<FileStatus> nodeFiles, String nodeId, ApplicationId appId) throws IOException\n{\r\n    List<FileStatus> listOfFiles = new ArrayList<>();\r\n    for (FileStatus thisNodeFile : nodeFiles) {\r\n        String nodeName = thisNodeFile.getPath().getName();\r\n        if ((nodeId == null || nodeId.isEmpty() || nodeName.contains(LogAggregationUtils.getNodeString(nodeId))) && !nodeName.endsWith(LogAggregationUtils.TMP_FILE_SUFFIX) && !nodeName.endsWith(CHECK_SUM_FILE_SUFFIX)) {\r\n            listOfFiles.add(thisNodeFile);\r\n        }\r\n    }\r\n    return listOfFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getAllNodeFiles",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<FileStatus> getAllNodeFiles(RemoteIterator<FileStatus> nodeFiles, ApplicationId appId) throws IOException\n{\r\n    List<FileStatus> listOfFiles = new ArrayList<>();\r\n    while (nodeFiles != null && nodeFiles.hasNext()) {\r\n        FileStatus thisNodeFile = nodeFiles.next();\r\n        String nodeName = thisNodeFile.getPath().getName();\r\n        if (nodeName.equals(appId + \".har\")) {\r\n            Path p = new Path(\"har:///\" + thisNodeFile.getPath().toUri().getRawPath());\r\n            nodeFiles = HarFs.get(p.toUri(), conf).listStatusIterator(p);\r\n            continue;\r\n        }\r\n        listOfFiles.add(thisNodeFile);\r\n    }\r\n    return listOfFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getAllChecksumFiles",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "FileStatus getAllChecksumFiles(Map<String, FileStatus> fileMap, String fileName)\n{\r\n    for (Entry<String, FileStatus> file : fileMap.entrySet()) {\r\n        if (file.getKey().startsWith(fileName) && file.getKey().endsWith(CHECK_SUM_FILE_SUFFIX)) {\r\n            return file.getValue();\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "renderAggregatedLogsBlock",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void renderAggregatedLogsBlock(Block html, ViewContext context)\n{\r\n    IndexedFileAggregatedLogsBlock block = new IndexedFileAggregatedLogsBlock(context, this.conf, this);\r\n    block.render(html);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getApplicationOwner",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getApplicationOwner(Path aggregatedLogPath, ApplicationId appId) throws IOException\n{\r\n    if (this.cachedIndexedLogsMeta == null || !this.cachedIndexedLogsMeta.getRemoteLogPath().equals(aggregatedLogPath)) {\r\n        this.cachedIndexedLogsMeta = new CachedIndexedLogsMeta(loadIndexedLogsMeta(aggregatedLogPath, appId), aggregatedLogPath);\r\n    }\r\n    return this.cachedIndexedLogsMeta.getCachedIndexedLogsMeta().getUser();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getApplicationAcls",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<ApplicationAccessType, String> getApplicationAcls(Path aggregatedLogPath, ApplicationId appId) throws IOException\n{\r\n    if (this.cachedIndexedLogsMeta == null || !this.cachedIndexedLogsMeta.getRemoteLogPath().equals(aggregatedLogPath)) {\r\n        this.cachedIndexedLogsMeta = new CachedIndexedLogsMeta(loadIndexedLogsMeta(aggregatedLogPath, appId), aggregatedLogPath);\r\n    }\r\n    return this.cachedIndexedLogsMeta.getCachedIndexedLogsMeta().getAcls();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getRemoteAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getRemoteAppLogDir(ApplicationId appId, String user) throws IOException\n{\r\n    return LogAggregationUtils.getRemoteAppLogDir(conf, appId, user, this.remoteRootLogDir, this.remoteRootLogDirSuffix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getOlderRemoteAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getOlderRemoteAppLogDir(ApplicationId appId, String user) throws IOException\n{\r\n    return LogAggregationUtils.getOlderRemoteAppLogDir(conf, appId, user, this.remoteRootLogDir, this.remoteRootLogDirSuffix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "loadIndexedLogsMeta",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "IndexedLogsMeta loadIndexedLogsMeta(Path remoteLogPath, long end, ApplicationId appId) throws IOException\n{\r\n    FileContext fileContext = FileContext.getFileContext(remoteLogPath.toUri(), conf);\r\n    FSDataInputStream fsDataIStream = null;\r\n    try {\r\n        fsDataIStream = fileContext.open(remoteLogPath);\r\n        if (end == 0) {\r\n            return null;\r\n        }\r\n        long fileLength = end < 0 ? fileContext.getFileStatus(remoteLogPath).getLen() : end;\r\n        fsDataIStream.seek(fileLength - Integer.SIZE / Byte.SIZE - UUID_LENGTH);\r\n        int offset = fsDataIStream.readInt();\r\n        if (offset > 64 * 1024 * 1024) {\r\n            LOG.warn(\"The log meta size read from \" + remoteLogPath + \" is \" + offset);\r\n        }\r\n        byte[] uuidRead = new byte[UUID_LENGTH];\r\n        int uuidReadLen = fsDataIStream.read(uuidRead);\r\n        if (this.uuid == null) {\r\n            this.uuid = createUUID(appId);\r\n        }\r\n        if (uuidReadLen != UUID_LENGTH || !Arrays.equals(this.uuid, uuidRead)) {\r\n            if (LOG.isDebugEnabled()) {\r\n                LOG.debug(\"the length of loaded UUID:{}\", uuidReadLen);\r\n                LOG.debug(\"the loaded UUID:{}\", new String(uuidRead, Charset.forName(\"UTF-8\")));\r\n                LOG.debug(\"the expected UUID:{}\", new String(this.uuid, Charset.forName(\"UTF-8\")));\r\n            }\r\n            throw new IOException(\"The UUID from \" + remoteLogPath + \" is not correct. The offset of loaded UUID is \" + (fileLength - UUID_LENGTH));\r\n        }\r\n        byte[] array = new byte[offset];\r\n        fsDataIStream.seek(fileLength - offset - Integer.SIZE / Byte.SIZE - UUID_LENGTH);\r\n        fsDataIStream.readFully(array);\r\n        int actual = array.length;\r\n        if (actual != offset) {\r\n            throw new IOException(\"Error on loading log meta from \" + remoteLogPath);\r\n        }\r\n        return (IndexedLogsMeta) SerializationUtils.deserialize(array);\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, fsDataIStream);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "loadIndexedLogsMeta",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "IndexedLogsMeta loadIndexedLogsMeta(Path remoteLogPath, ApplicationId appId) throws IOException\n{\r\n    return loadIndexedLogsMeta(remoteLogPath, -1, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "logErrorMessage",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String logErrorMessage(File logFile, Exception e)\n{\r\n    String message = \"Error aggregating log file. Log file : \" + logFile.getAbsolutePath() + \". \" + e.getMessage();\r\n    LOG.error(message, e);\r\n    return message;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getFSOutputBufferSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getFSOutputBufferSize(Configuration conf)\n{\r\n    return conf.getInt(FS_OUTPUT_BUF_SIZE_ATTR, 256 * 1024);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getFSInputBufferSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getFSInputBufferSize(Configuration conf)\n{\r\n    return conf.getInt(FS_INPUT_BUF_SIZE_ATTR, 256 * 1024);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getRollOverLogMaxSize",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "long getRollOverLogMaxSize(Configuration conf)\n{\r\n    boolean supportAppend = false;\r\n    try {\r\n        FileSystem fs = FileSystem.get(remoteRootLogDir.toUri(), conf);\r\n        if (fs instanceof LocalFileSystem || fs.hasPathCapability(remoteRootLogDir, CommonPathCapabilities.FS_APPEND)) {\r\n            supportAppend = true;\r\n        }\r\n    } catch (Exception ioe) {\r\n        LOG.warn(\"Unable to determine if the filesystem supports \" + \"append operation\", ioe);\r\n    }\r\n    if (supportAppend) {\r\n        return 1024L * 1024 * 1024 * conf.getInt(LOG_ROLL_OVER_MAX_FILE_SIZE_GB, LOG_ROLL_OVER_MAX_FILE_SIZE_GB_DEFAULT);\r\n    } else {\r\n        return 0L;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getCurrentRemoteLogFile",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "Path getCurrentRemoteLogFile(final FileContext fc, final Path parent, final String nodeId) throws IOException\n{\r\n    RemoteIterator<FileStatus> files = fc.listStatus(parent);\r\n    long maxTime = 0L;\r\n    Path returnPath = null;\r\n    while (files.hasNext()) {\r\n        FileStatus candidate = files.next();\r\n        String fileName = candidate.getPath().getName();\r\n        if (fileName.contains(LogAggregationUtils.getNodeString(nodeId)) && !fileName.endsWith(LogAggregationUtils.TMP_FILE_SUFFIX) && !fileName.endsWith(CHECK_SUM_FILE_SUFFIX)) {\r\n            if (candidate.getModificationTime() > maxTime) {\r\n                maxTime = candidate.getModificationTime();\r\n                returnPath = candidate.getPath();\r\n            }\r\n        }\r\n    }\r\n    return returnPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "loadUUIDFromLogFile",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "byte[] loadUUIDFromLogFile(final FileContext fc, final Path parent, final ApplicationId appId, final String nodeId) throws Exception\n{\r\n    byte[] id = null;\r\n    RemoteIterator<FileStatus> files = fc.listStatus(parent);\r\n    FSDataInputStream fsDataInputStream = null;\r\n    byte[] uuid = createUUID(appId);\r\n    while (files.hasNext()) {\r\n        try {\r\n            Path checkPath = files.next().getPath();\r\n            if (checkPath.getName().contains(LogAggregationUtils.getNodeString(nodeId)) && !checkPath.getName().endsWith(CHECK_SUM_FILE_SUFFIX)) {\r\n                fsDataInputStream = fc.open(checkPath);\r\n                byte[] b = new byte[uuid.length];\r\n                int actual = fsDataInputStream.read(b);\r\n                if (actual != uuid.length || Arrays.equals(b, uuid)) {\r\n                    deleteFileWithRetries(fc, checkPath);\r\n                } else if (id == null) {\r\n                    id = uuid;\r\n                }\r\n            }\r\n        } finally {\r\n            IOUtils.cleanupWithLogger(LOG, fsDataInputStream);\r\n        }\r\n    }\r\n    return id == null ? uuid : id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "isRollover",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isRollover(final FileContext fc, final Path candidate) throws IOException\n{\r\n    FileStatus fs = fc.getFileStatus(candidate);\r\n    return fs.getLen() >= this.logRollOverMaxFileSize;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "getSystemClock",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Clock getSystemClock()\n{\r\n    return SystemClock.getInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "createUUID",
  "errType" : [ "NoSuchAlgorithmException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] createUUID(ApplicationId appId) throws IOException\n{\r\n    try {\r\n        MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\r\n        return digest.digest(appId.toString().getBytes(Charset.forName(\"UTF-8\")));\r\n    } catch (NoSuchAlgorithmException ex) {\r\n        throw new IOException(ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = RemoveFromClusterNodeLabelsRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.labels != null && !this.labels.isEmpty()) {\r\n        builder.clearNodeLabels();\r\n        builder.addAllNodeLabels(this.labels);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RemoveFromClusterNodeLabelsRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initNodeLabels()\n{\r\n    if (this.labels != null) {\r\n        return;\r\n    }\r\n    RemoveFromClusterNodeLabelsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.labels = new HashSet<String>();\r\n    this.labels.addAll(p.getNodeLabelsList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeLabels(Set<String> labels)\n{\r\n    maybeInitBuilder();\r\n    if (labels == null || labels.isEmpty()) {\r\n        builder.clearNodeLabels();\r\n    }\r\n    this.labels = labels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getNodeLabels()\n{\r\n    initNodeLabels();\r\n    return this.labels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    assert false : \"hashCode not designed\";\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshUserToGroupsMappingsRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNewReservationResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (reservationId != null) {\r\n        builder.setReservationId(convertToProtoFormat(this.reservationId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetNewReservationResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getReservationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationId getReservationId()\n{\r\n    if (this.reservationId != null) {\r\n        return this.reservationId;\r\n    }\r\n    GetNewReservationResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasReservationId()) {\r\n        return null;\r\n    }\r\n    this.reservationId = convertFromProtoFormat(p.getReservationId());\r\n    return this.reservationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setReservationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservationId(ReservationId reservationId)\n{\r\n    maybeInitBuilder();\r\n    if (reservationId == null) {\r\n        builder.clearReservationId();\r\n    }\r\n    this.reservationId = reservationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationIdPBImpl convertFromProtoFormat(ReservationIdProto p)\n{\r\n    return new ReservationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationIdProto convertToProtoFormat(ReservationId t)\n{\r\n    return ((ReservationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "checkAllowedProtocols",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void checkAllowedProtocols(Class<?> protocol)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getRMAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "InetSocketAddress getRMAddress(YarnConfiguration conf, Class<?> protocol) throws IOException\n{\r\n    throw new UnsupportedOperationException(\"This method should be invoked \" + \"from an instance of ClientRMProxy or ServerRMProxy\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createRMProxy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "T createRMProxy(final Configuration configuration, final Class<T> protocol, RMProxy<T> instance) throws IOException\n{\r\n    YarnConfiguration conf = (configuration instanceof YarnConfiguration) ? (YarnConfiguration) configuration : new YarnConfiguration(configuration);\r\n    RetryPolicy retryPolicy = createRetryPolicy(conf, (HAUtil.isHAEnabled(conf) || HAUtil.isFederationFailoverEnabled(conf)));\r\n    return newProxyInstance(conf, protocol, instance, retryPolicy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createRMProxy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "T createRMProxy(final Configuration configuration, final Class<T> protocol, RMProxy<T> instance, final long retryTime, final long retryInterval) throws IOException\n{\r\n    YarnConfiguration conf = (configuration instanceof YarnConfiguration) ? (YarnConfiguration) configuration : new YarnConfiguration(configuration);\r\n    RetryPolicy retryPolicy = createRetryPolicy(conf, retryTime, retryInterval, HAUtil.isHAEnabled(conf));\r\n    return newProxyInstance(conf, protocol, instance, retryPolicy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "newProxyInstance",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "T newProxyInstance(final YarnConfiguration conf, final Class<T> protocol, RMProxy<T> instance, RetryPolicy retryPolicy) throws IOException\n{\r\n    RMFailoverProxyProvider<T> provider;\r\n    if (HAUtil.isHAEnabled(conf) || HAUtil.isFederationEnabled(conf)) {\r\n        provider = instance.createRMFailoverProxyProvider(conf, protocol);\r\n    } else {\r\n        provider = instance.createNonHaRMFailoverProxyProvider(conf, protocol);\r\n    }\r\n    return (T) RetryProxy.create(protocol, provider, retryPolicy);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T getProxy(final Configuration conf, final Class<T> protocol, final InetSocketAddress rmAddress) throws IOException\n{\r\n    return user.doAs(new PrivilegedAction<T>() {\r\n\r\n        @Override\r\n        public T run() {\r\n            return (T) YarnRPC.create(conf).getProxy(protocol, rmAddress, conf);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createNonHaRMFailoverProxyProvider",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RMFailoverProxyProvider<T> createNonHaRMFailoverProxyProvider(Configuration conf, Class<T> protocol)\n{\r\n    Class<? extends RMFailoverProxyProvider<T>> defaultProviderClass;\r\n    try {\r\n        defaultProviderClass = (Class<? extends RMFailoverProxyProvider<T>>) Class.forName(YarnConfiguration.DEFAULT_CLIENT_FAILOVER_NO_HA_PROXY_PROVIDER);\r\n    } catch (Exception e) {\r\n        throw new YarnRuntimeException(\"Invalid default failover provider class\" + YarnConfiguration.DEFAULT_CLIENT_FAILOVER_NO_HA_PROXY_PROVIDER, e);\r\n    }\r\n    RMFailoverProxyProvider<T> provider = ReflectionUtils.newInstance(conf.getClass(YarnConfiguration.CLIENT_FAILOVER_NO_HA_PROXY_PROVIDER, defaultProviderClass, RMFailoverProxyProvider.class), conf);\r\n    provider.init(conf, (RMProxy<T>) this, protocol);\r\n    return provider;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createRMFailoverProxyProvider",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RMFailoverProxyProvider<T> createRMFailoverProxyProvider(Configuration conf, Class<T> protocol)\n{\r\n    Class<? extends RMFailoverProxyProvider<T>> defaultProviderClass;\r\n    try {\r\n        defaultProviderClass = (Class<? extends RMFailoverProxyProvider<T>>) Class.forName(YarnConfiguration.DEFAULT_CLIENT_FAILOVER_PROXY_PROVIDER);\r\n    } catch (Exception e) {\r\n        throw new YarnRuntimeException(\"Invalid default failover provider class\" + YarnConfiguration.DEFAULT_CLIENT_FAILOVER_PROXY_PROVIDER, e);\r\n    }\r\n    RMFailoverProxyProvider<T> provider = ReflectionUtils.newInstance(conf.getClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER, defaultProviderClass, RMFailoverProxyProvider.class), conf);\r\n    provider.init(conf, (RMProxy<T>) this, protocol);\r\n    return provider;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createRetryPolicy",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RetryPolicy createRetryPolicy(Configuration conf, boolean isHAEnabled)\n{\r\n    long rmConnectWaitMS = conf.getLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\r\n    long rmConnectionRetryIntervalMS = conf.getLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS, YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\r\n    return createRetryPolicy(conf, rmConnectWaitMS, rmConnectionRetryIntervalMS, isHAEnabled);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createRetryPolicy",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "RetryPolicy createRetryPolicy(Configuration conf, long retryTime, long retryInterval, boolean isHAEnabled)\n{\r\n    long rmConnectWaitMS = retryTime;\r\n    long rmConnectionRetryIntervalMS = retryInterval;\r\n    boolean waitForEver = (rmConnectWaitMS == -1);\r\n    if (!waitForEver) {\r\n        if (rmConnectWaitMS < 0) {\r\n            throw new YarnRuntimeException(\"Invalid Configuration. \" + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS + \" can be -1, but can not be other negative numbers\");\r\n        }\r\n        if (rmConnectWaitMS < rmConnectionRetryIntervalMS) {\r\n            LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS + \" is smaller than \" + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS + \". Only try connect once.\");\r\n            rmConnectWaitMS = 0;\r\n        }\r\n    }\r\n    if (isHAEnabled) {\r\n        final long failoverSleepBaseMs = conf.getLong(YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS, rmConnectionRetryIntervalMS);\r\n        final long failoverSleepMaxMs = conf.getLong(YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS, rmConnectionRetryIntervalMS);\r\n        int maxFailoverAttempts = conf.getInt(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\r\n        if (maxFailoverAttempts == -1) {\r\n            if (waitForEver) {\r\n                maxFailoverAttempts = Integer.MAX_VALUE;\r\n            } else {\r\n                maxFailoverAttempts = (int) (rmConnectWaitMS / failoverSleepBaseMs);\r\n            }\r\n        }\r\n        return RetryPolicies.failoverOnNetworkException(RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts, failoverSleepBaseMs, failoverSleepMaxMs);\r\n    }\r\n    if (rmConnectionRetryIntervalMS < 0) {\r\n        throw new YarnRuntimeException(\"Invalid Configuration. \" + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS + \" should not be negative.\");\r\n    }\r\n    RetryPolicy retryPolicy = null;\r\n    if (waitForEver) {\r\n        retryPolicy = RetryPolicies.retryForeverWithFixedSleep(rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\r\n    } else {\r\n        retryPolicy = RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS, rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\r\n    }\r\n    Map<Class<? extends Exception>, RetryPolicy> exceptionToPolicyMap = new HashMap<Class<? extends Exception>, RetryPolicy>();\r\n    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(SocketTimeoutException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(StandbyException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(IOException.class, retryPolicy);\r\n    return RetryPolicies.retryOtherThanRemoteException(RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void render(Block html)\n{\r\n    String loggedIn = \"\";\r\n    if (request().getRemoteUser() != null) {\r\n        loggedIn = \"Logged in as: \" + request().getRemoteUser();\r\n    }\r\n    html.div(\"#header.ui-widget\").div(\"#user\").__(loggedIn).__().div(\"#logo\").img(\"/static/hadoop-st.png\").__().h1($(TITLE)).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "selectToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token<TimelineDelegationTokenIdentifier> selectToken(Text service, Collection<Token<? extends TokenIdentifier>> tokens)\n{\r\n    if (service == null) {\r\n        return null;\r\n    }\r\n    LOG.debug(\"Looking for a token with service {}\", service);\r\n    for (Token<? extends TokenIdentifier> token : tokens) {\r\n        LOG.debug(\"Token kind is {} and the token's service name is {}\", token.getKind(), token.getService());\r\n        if (TimelineDelegationTokenIdentifier.KIND_NAME.equals(token.getKind()) && service.equals(token.getService())) {\r\n            return (Token<TimelineDelegationTokenIdentifier>) token;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RecordFactory get()\n{\r\n    return self;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "newRecordInstance",
  "errType" : [ "ClassNotFoundException", "NoSuchMethodException", "InvocationTargetException", "IllegalAccessException", "InstantiationException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "T newRecordInstance(Class<T> clazz)\n{\r\n    Constructor<?> constructor = cache.get(clazz);\r\n    if (constructor == null) {\r\n        Class<?> pbClazz = null;\r\n        try {\r\n            pbClazz = localConf.getClassByName(getPBImplClassName(clazz));\r\n        } catch (ClassNotFoundException e) {\r\n            throw new YarnRuntimeException(\"Failed to load class: [\" + getPBImplClassName(clazz) + \"]\", e);\r\n        }\r\n        try {\r\n            constructor = pbClazz.getConstructor();\r\n            constructor.setAccessible(true);\r\n            cache.putIfAbsent(clazz, constructor);\r\n        } catch (NoSuchMethodException e) {\r\n            throw new YarnRuntimeException(\"Could not find 0 argument constructor\", e);\r\n        }\r\n    }\r\n    try {\r\n        Object retObject = constructor.newInstance();\r\n        return (T) retObject;\r\n    } catch (InvocationTargetException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (IllegalAccessException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (InstantiationException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getPBImplClassName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getPBImplClassName(Class<?> clazz)\n{\r\n    String srcPackagePart = getPackageName(clazz);\r\n    String srcClassName = getClassName(clazz);\r\n    String destPackagePart = srcPackagePart + \".\" + PB_IMPL_PACKAGE_SUFFIX;\r\n    String destClassPart = srcClassName + PB_IMPL_CLASS_SUFFIX;\r\n    return destPackagePart + \".\" + destClassPart;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getClassName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getClassName(Class<?> clazz)\n{\r\n    String fqName = clazz.getName();\r\n    return (fqName.substring(fqName.lastIndexOf(\".\") + 1, fqName.length()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getPackageName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getPackageName(Class<?> clazz)\n{\r\n    return clazz.getPackage().getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "startContainers",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "StartContainersResponse startContainers(StartContainersRequest requests) throws YarnException, IOException\n{\r\n    StartContainersRequestProto requestProto = ((StartContainersRequestPBImpl) requests).getProto();\r\n    try {\r\n        return new StartContainersResponsePBImpl(proxy.startContainers(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "stopContainers",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "StopContainersResponse stopContainers(StopContainersRequest requests) throws YarnException, IOException\n{\r\n    StopContainersRequestProto requestProto = ((StopContainersRequestPBImpl) requests).getProto();\r\n    try {\r\n        return new StopContainersResponsePBImpl(proxy.stopContainers(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getContainerStatuses",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetContainerStatusesResponse getContainerStatuses(GetContainerStatusesRequest request) throws YarnException, IOException\n{\r\n    GetContainerStatusesRequestProto requestProto = ((GetContainerStatusesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetContainerStatusesResponsePBImpl(proxy.getContainerStatuses(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "increaseContainersResource",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "IncreaseContainersResourceResponse increaseContainersResource(IncreaseContainersResourceRequest request) throws YarnException, IOException\n{\r\n    try {\r\n        ContainerUpdateRequest req = ContainerUpdateRequest.newInstance(request.getContainersToIncrease());\r\n        ContainerUpdateRequestProto reqProto = ((ContainerUpdateRequestPBImpl) req).getProto();\r\n        ContainerUpdateResponse resp = new ContainerUpdateResponsePBImpl(proxy.updateContainer(null, reqProto));\r\n        return IncreaseContainersResourceResponse.newInstance(resp.getSuccessfullyUpdatedContainers(), resp.getFailedRequests());\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "updateContainer",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerUpdateResponse updateContainer(ContainerUpdateRequest request) throws YarnException, IOException\n{\r\n    ContainerUpdateRequestProto requestProto = ((ContainerUpdateRequestPBImpl) request).getProto();\r\n    try {\r\n        return new ContainerUpdateResponsePBImpl(proxy.updateContainer(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "signalToContainer",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SignalContainerResponse signalToContainer(SignalContainerRequest request) throws YarnException, IOException\n{\r\n    SignalContainerRequestProto requestProto = ((SignalContainerRequestPBImpl) request).getProto();\r\n    try {\r\n        return new SignalContainerResponsePBImpl(proxy.signalToContainer(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "localize",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ResourceLocalizationResponse localize(ResourceLocalizationRequest request) throws YarnException, IOException\n{\r\n    ResourceLocalizationRequestProto requestProto = ((ResourceLocalizationRequestPBImpl) request).getProto();\r\n    try {\r\n        return new ResourceLocalizationResponsePBImpl(proxy.localize(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "reInitializeContainer",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ReInitializeContainerResponse reInitializeContainer(ReInitializeContainerRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.ReInitializeContainerRequestProto requestProto = ((ReInitializeContainerRequestPBImpl) request).getProto();\r\n    try {\r\n        return new ReInitializeContainerResponsePBImpl(proxy.reInitializeContainer(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "restartContainer",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RestartContainerResponse restartContainer(ContainerId containerId) throws YarnException, IOException\n{\r\n    YarnProtos.ContainerIdProto containerIdProto = ProtoUtils.convertToProtoFormat(containerId);\r\n    try {\r\n        return new RestartContainerResponsePBImpl(proxy.restartContainer(null, containerIdProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "rollbackLastReInitialization",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RollbackResponse rollbackLastReInitialization(ContainerId containerId) throws YarnException, IOException\n{\r\n    YarnProtos.ContainerIdProto containerIdProto = ProtoUtils.convertToProtoFormat(containerId);\r\n    try {\r\n        return new RollbackResponsePBImpl(proxy.rollbackLastReInitialization(null, containerIdProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "commitLastReInitialization",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "CommitResponse commitLastReInitialization(ContainerId containerId) throws YarnException, IOException\n{\r\n    YarnProtos.ContainerIdProto containerIdProto = ProtoUtils.convertToProtoFormat(containerId);\r\n    try {\r\n        return new CommitResponsePBImpl(proxy.commitLastReInitialization(null, containerIdProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getLocalizationStatuses",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetLocalizationStatusesResponse getLocalizationStatuses(GetLocalizationStatusesRequest request) throws YarnException, IOException\n{\r\n    GetLocalizationStatusesRequestProto requestProto = ((GetLocalizationStatusesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetLocalizationStatusesResponsePBImpl(proxy.getLocalizationStatuses(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "PreemptionContainerProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (id != null) {\r\n        builder.setId(convertToProtoFormat(id));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = PreemptionContainerProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getId()\n{\r\n    PreemptionContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (id != null) {\r\n        return id;\r\n    }\r\n    if (!p.hasId()) {\r\n        return null;\r\n    }\r\n    id = convertFromProtoFormat(p.getId());\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setId(final ContainerId id)\n{\r\n    maybeInitBuilder();\r\n    if (null == id) {\r\n        builder.clearId();\r\n    }\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateApplicationTimeoutsRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = UpdateApplicationTimeoutsRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationId != null) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n    if (this.applicationTimeouts != null) {\r\n        addApplicationTimeouts();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    UpdateApplicationTimeoutsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.applicationId != null) {\r\n        return applicationId;\r\n    }\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null) {\r\n        builder.clearApplicationId();\r\n    }\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ApplicationTimeoutType, String> getApplicationTimeouts()\n{\r\n    initApplicationTimeout();\r\n    return this.applicationTimeouts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initApplicationTimeout",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initApplicationTimeout()\n{\r\n    if (this.applicationTimeouts != null) {\r\n        return;\r\n    }\r\n    UpdateApplicationTimeoutsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ApplicationUpdateTimeoutMapProto> lists = p.getApplicationTimeoutsList();\r\n    this.applicationTimeouts = new HashMap<ApplicationTimeoutType, String>(lists.size());\r\n    for (ApplicationUpdateTimeoutMapProto timeoutProto : lists) {\r\n        this.applicationTimeouts.put(ProtoUtils.convertFromProtoFormat(timeoutProto.getApplicationTimeoutType()), timeoutProto.getExpireTime());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationTimeouts(Map<ApplicationTimeoutType, String> appTimeouts)\n{\r\n    if (appTimeouts == null) {\r\n        return;\r\n    }\r\n    initApplicationTimeout();\r\n    this.applicationTimeouts.clear();\r\n    this.applicationTimeouts.putAll(appTimeouts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addApplicationTimeouts()\n{\r\n    maybeInitBuilder();\r\n    builder.clearApplicationTimeouts();\r\n    if (applicationTimeouts == null) {\r\n        return;\r\n    }\r\n    Iterable<? extends ApplicationUpdateTimeoutMapProto> values = new Iterable<ApplicationUpdateTimeoutMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<ApplicationUpdateTimeoutMapProto> iterator() {\r\n            return new Iterator<ApplicationUpdateTimeoutMapProto>() {\r\n\r\n                private Iterator<ApplicationTimeoutType> iterator = applicationTimeouts.keySet().iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iterator.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ApplicationUpdateTimeoutMapProto next() {\r\n                    ApplicationTimeoutType key = iterator.next();\r\n                    return ApplicationUpdateTimeoutMapProto.newBuilder().setExpireTime(applicationTimeouts.get(key)).setApplicationTimeoutType(ProtoUtils.convertToProtoFormat(key)).build();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    this.builder.addAllApplicationTimeouts(values);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "increment",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void increment(Enum type, long processingTimeUs)\n{\r\n    return;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "getMetrics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void getMetrics(MetricsCollector collector, boolean all)\n{\r\n    return;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long get(Enum type)\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getSuccessfullyUpdatedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerId> getSuccessfullyUpdatedContainers()\n{\r\n    initSucceededRequests();\r\n    return this.succeededRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setSuccessfullyUpdatedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setSuccessfullyUpdatedContainers(List<ContainerId> succeeded)\n{\r\n    maybeInitBuilder();\r\n    if (succeeded == null) {\r\n        builder.clearSucceededRequests();\r\n    }\r\n    this.succeededRequests = succeeded;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ContainerId, SerializedException> getFailedRequests()\n{\r\n    initFailedRequests();\r\n    return this.failedRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFailedRequests(Map<ContainerId, SerializedException> failedRequests)\n{\r\n    maybeInitBuilder();\r\n    if (failedRequests == null) {\r\n        builder.clearFailedRequests();\r\n    }\r\n    this.failedRequests = failedRequests;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerUpdateResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initSucceededRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initSucceededRequests()\n{\r\n    if (this.succeededRequests != null) {\r\n        return;\r\n    }\r\n    ContainerUpdateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerIdProto> list = p.getSucceededRequestsList();\r\n    this.succeededRequests = new ArrayList<ContainerId>();\r\n    for (ContainerIdProto c : list) {\r\n        this.succeededRequests.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ContainerUpdateResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initFailedRequests()\n{\r\n    if (this.failedRequests != null) {\r\n        return;\r\n    }\r\n    ContainerUpdateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerExceptionMapProto> protoList = p.getFailedRequestsList();\r\n    this.failedRequests = new HashMap<ContainerId, SerializedException>();\r\n    for (ContainerExceptionMapProto ce : protoList) {\r\n        this.failedRequests.put(convertFromProtoFormat(ce.getContainerId()), convertFromProtoFormat(ce.getException()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.succeededRequests != null) {\r\n        addSucceededRequestsToProto();\r\n    }\r\n    if (this.failedRequests != null) {\r\n        addFailedRequestsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addSucceededRequestsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addSucceededRequestsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearSucceededRequests();\r\n    if (this.succeededRequests == null) {\r\n        return;\r\n    }\r\n    Iterable<ContainerIdProto> iterable = new Iterable<ContainerIdProto>() {\r\n\r\n        @Override\r\n        public Iterator<ContainerIdProto> iterator() {\r\n            return new Iterator<ContainerIdProto>() {\r\n\r\n                private Iterator<ContainerId> iter = succeededRequests.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ContainerIdProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllSucceededRequests(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addFailedRequestsToProto",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void addFailedRequestsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearFailedRequests();\r\n    if (this.failedRequests == null) {\r\n        return;\r\n    }\r\n    List<ContainerExceptionMapProto> protoList = new ArrayList<ContainerExceptionMapProto>();\r\n    for (Map.Entry<ContainerId, SerializedException> entry : this.failedRequests.entrySet()) {\r\n        protoList.add(ContainerExceptionMapProto.newBuilder().setContainerId(convertToProtoFormat(entry.getKey())).setException(convertToProtoFormat(entry.getValue())).build());\r\n    }\r\n    builder.addAllFailedRequests(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SerializedExceptionPBImpl convertFromProtoFormat(SerializedExceptionProto p)\n{\r\n    return new SerializedExceptionPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SerializedExceptionProto convertToProtoFormat(SerializedException t)\n{\r\n    return ((SerializedExceptionPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "startContainers",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "StartContainersResponseProto startContainers(RpcController arg0, StartContainersRequestProto proto) throws ServiceException\n{\r\n    StartContainersRequestPBImpl request = new StartContainersRequestPBImpl(proto);\r\n    try {\r\n        StartContainersResponse response = real.startContainers(request);\r\n        return ((StartContainersResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "stopContainers",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "StopContainersResponseProto stopContainers(RpcController arg0, StopContainersRequestProto proto) throws ServiceException\n{\r\n    StopContainersRequestPBImpl request = new StopContainersRequestPBImpl(proto);\r\n    try {\r\n        StopContainersResponse response = real.stopContainers(request);\r\n        return ((StopContainersResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getContainerStatuses",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetContainerStatusesResponseProto getContainerStatuses(RpcController arg0, GetContainerStatusesRequestProto proto) throws ServiceException\n{\r\n    GetContainerStatusesRequestPBImpl request = new GetContainerStatusesRequestPBImpl(proto);\r\n    try {\r\n        GetContainerStatusesResponse response = real.getContainerStatuses(request);\r\n        return ((GetContainerStatusesResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "increaseContainersResource",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "IncreaseContainersResourceResponseProto increaseContainersResource(RpcController controller, IncreaseContainersResourceRequestProto proto) throws ServiceException\n{\r\n    IncreaseContainersResourceRequestPBImpl request = new IncreaseContainersResourceRequestPBImpl(proto);\r\n    try {\r\n        ContainerUpdateResponse resp = real.updateContainer(ContainerUpdateRequest.newInstance(request.getContainersToIncrease()));\r\n        IncreaseContainersResourceResponse response = IncreaseContainersResourceResponse.newInstance(resp.getSuccessfullyUpdatedContainers(), resp.getFailedRequests());\r\n        return ((IncreaseContainersResourceResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "updateContainer",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerUpdateResponseProto updateContainer(RpcController controller, ContainerUpdateRequestProto proto) throws ServiceException\n{\r\n    ContainerUpdateRequestPBImpl request = new ContainerUpdateRequestPBImpl(proto);\r\n    try {\r\n        ContainerUpdateResponse response = real.updateContainer(request);\r\n        return ((ContainerUpdateResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "signalToContainer",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SignalContainerResponseProto signalToContainer(RpcController arg0, SignalContainerRequestProto proto) throws ServiceException\n{\r\n    final SignalContainerRequestPBImpl request = new SignalContainerRequestPBImpl(proto);\r\n    try {\r\n        final SignalContainerResponse response = real.signalToContainer(request);\r\n        return ((SignalContainerResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "localize",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceLocalizationResponseProto localize(RpcController controller, ResourceLocalizationRequestProto proto) throws ServiceException\n{\r\n    ResourceLocalizationRequestPBImpl request = new ResourceLocalizationRequestPBImpl(proto);\r\n    try {\r\n        ResourceLocalizationResponse response = real.localize(request);\r\n        return ((ResourceLocalizationResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "reInitializeContainer",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReInitializeContainerResponseProto reInitializeContainer(RpcController controller, ReInitializeContainerRequestProto proto) throws ServiceException\n{\r\n    ReInitializeContainerRequestPBImpl request = new ReInitializeContainerRequestPBImpl(proto);\r\n    try {\r\n        ReInitializeContainerResponse response = real.reInitializeContainer(request);\r\n        return ((ReInitializeContainerResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "restartContainer",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RestartContainerResponseProto restartContainer(RpcController controller, ContainerIdProto containerId) throws ServiceException\n{\r\n    ContainerId request = ProtoUtils.convertFromProtoFormat(containerId);\r\n    try {\r\n        RestartContainerResponse response = real.restartContainer(request);\r\n        return ((RestartContainerResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "rollbackLastReInitialization",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RollbackResponseProto rollbackLastReInitialization(RpcController controller, ContainerIdProto containerId) throws ServiceException\n{\r\n    ContainerId request = ProtoUtils.convertFromProtoFormat(containerId);\r\n    try {\r\n        RollbackResponse response = real.rollbackLastReInitialization(request);\r\n        return ((RollbackResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "commitLastReInitialization",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "CommitResponseProto commitLastReInitialization(RpcController controller, ContainerIdProto containerId) throws ServiceException\n{\r\n    ContainerId request = ProtoUtils.convertFromProtoFormat(containerId);\r\n    try {\r\n        CommitResponse response = real.commitLastReInitialization(request);\r\n        return ((CommitResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getLocalizationStatuses",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetLocalizationStatusesResponseProto getLocalizationStatuses(RpcController controller, GetLocalizationStatusesRequestProto request) throws ServiceException\n{\r\n    GetLocalizationStatusesRequestPBImpl lclReq = new GetLocalizationStatusesRequestPBImpl(request);\r\n    try {\r\n        GetLocalizationStatusesResponse response = real.getLocalizationStatuses(lclReq);\r\n        return ((GetLocalizationStatusesResponsePBImpl) response).getProto();\r\n    } catch (YarnException | IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "findActiveRMHAId",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String findActiveRMHAId(Configuration conf)\n{\r\n    YarnConfiguration yarnConf = new YarnConfiguration(conf);\r\n    Collection<String> rmIds = yarnConf.getStringCollection(YarnConfiguration.RM_HA_IDS);\r\n    for (String currentId : rmIds) {\r\n        yarnConf.set(YarnConfiguration.RM_HA_ID, currentId);\r\n        try {\r\n            HAServiceState haState = getHAState(yarnConf);\r\n            if (haState.equals(HAServiceState.ACTIVE)) {\r\n                return currentId;\r\n            }\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getHAState",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "HAServiceState getHAState(YarnConfiguration yarnConf) throws Exception\n{\r\n    HAServiceTarget haServiceTarget;\r\n    int rpcTimeoutForChecks = yarnConf.getInt(CommonConfigurationKeys.HA_FC_CLI_CHECK_TIMEOUT_KEY, CommonConfigurationKeys.HA_FC_CLI_CHECK_TIMEOUT_DEFAULT);\r\n    yarnConf.set(CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_USER_NAME_KEY, yarnConf.get(YarnConfiguration.RM_PRINCIPAL, \"\"));\r\n    haServiceTarget = new RMHAServiceTarget(yarnConf);\r\n    HAServiceProtocol proto = haServiceTarget.getProxy(yarnConf, rpcTimeoutForChecks);\r\n    HAServiceState haState = proto.getServiceStatus().getState();\r\n    return haState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getRMHAWebappAddresses",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<String> getRMHAWebappAddresses(final YarnConfiguration conf)\n{\r\n    String prefix;\r\n    String defaultPort;\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        prefix = YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS;\r\n        defaultPort = \":\" + YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT;\r\n    } else {\r\n        prefix = YarnConfiguration.RM_WEBAPP_ADDRESS;\r\n        defaultPort = \":\" + YarnConfiguration.DEFAULT_RM_WEBAPP_PORT;\r\n    }\r\n    Collection<String> rmIds = conf.getStringCollection(YarnConfiguration.RM_HA_IDS);\r\n    List<String> addrs = new ArrayList<String>();\r\n    for (String id : rmIds) {\r\n        String addr = conf.get(HAUtil.addSuffix(prefix, id));\r\n        if (addr == null) {\r\n            String hostname = conf.get(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME, id));\r\n            if (hostname != null) {\r\n                addr = hostname + defaultPort;\r\n            }\r\n        }\r\n        if (addr != null) {\r\n            addrs.add(addr);\r\n        }\r\n    }\r\n    return addrs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "allocate",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "AllocateResponse allocate(AllocateRequest request) throws YarnException, IOException\n{\r\n    AllocateRequestProto requestProto = ((AllocateRequestPBImpl) request).getProto();\r\n    try {\r\n        return new AllocateResponsePBImpl(proxy.allocate(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "finishApplicationMaster",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(FinishApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    FinishApplicationMasterRequestProto requestProto = ((FinishApplicationMasterRequestPBImpl) request).getProto();\r\n    try {\r\n        return new FinishApplicationMasterResponsePBImpl(proxy.finishApplicationMaster(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "registerApplicationMaster",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    RegisterApplicationMasterRequestProto requestProto = ((RegisterApplicationMasterRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RegisterApplicationMasterResponsePBImpl(proxy.registerApplicationMaster(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "registerMirror",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void registerMirror(StoreType type, Class<? extends FSNodeStoreLogOp> clazz)\n{\r\n    mirrorOp.put(type, clazz);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "registerLog",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void registerLog(StoreType type, int opcode, Class<? extends FSNodeStoreLogOp> clazz)\n{\r\n    Map<Integer, Class<? extends FSNodeStoreLogOp>> ops = editLogOp.get(type);\r\n    Integer code = Integer.valueOf(opcode);\r\n    if (ops == null) {\r\n        Map<Integer, Class<? extends FSNodeStoreLogOp>> newOps = new HashMap<>();\r\n        newOps.put(code, clazz);\r\n        editLogOp.put(type, newOps);\r\n    } else {\r\n        ops.put(code, clazz);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "getMirrorOp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FSNodeStoreLogOp getMirrorOp(StoreType storeType)\n{\r\n    return newInstance(mirrorOp.get(storeType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FSNodeStoreLogOp get(int opCode, StoreType storeType)\n{\r\n    return newInstance(editLogOp.get(storeType).get(opCode));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store",
  "methodName" : "newInstance",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T newInstance(Class<T> clazz)\n{\r\n    FSNodeStoreLogOp instance = null;\r\n    if (clazz != null) {\r\n        try {\r\n            instance = clazz.newInstance();\r\n        } catch (Exception ex) {\r\n            throw new RuntimeException(\"Failed to instantiate \" + clazz, ex);\r\n        }\r\n    }\r\n    return (T) instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CsiAdaptorProtos.GetPluginInfoRequest getProto()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "addNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addNode(Resource nodeRes)\n{\r\n    Resources.addTo(resource, nodeRes);\r\n    numActiveNMs++;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "removeNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeNode(Resource nodeRes)\n{\r\n    Resources.subtractFrom(resource, nodeRes);\r\n    numActiveNMs--;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource getResource()\n{\r\n    return Resource.newInstance(this.resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getNumActiveNMs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getNumActiveNMs()\n{\r\n    return numActiveNMs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getLabelName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getLabelName()\n{\r\n    return labelName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\admin",
  "methodName" : "getKerberosInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "KerberosInfo getKerberosInfo(Class<?> protocol, Configuration conf)\n{\r\n    if (!protocol.equals(ResourceManagerAdministrationProtocolPB.class)) {\r\n        return null;\r\n    }\r\n    return new KerberosInfo() {\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public String serverPrincipal() {\r\n            return YarnConfiguration.RM_PRINCIPAL;\r\n        }\r\n\r\n        @Override\r\n        public String clientPrincipal() {\r\n            return null;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\admin",
  "methodName" : "getTokenInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenInfo getTokenInfo(Class<?> protocol, Configuration conf)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getAppId()\n{\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAppId(ApplicationId appId)\n{\r\n    this.appId = appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getAppAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptId getAppAttemptId()\n{\r\n    return this.appAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setAppAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAppAttemptId(ApplicationAttemptId appAttemptId)\n{\r\n    this.appAttemptId = appAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerId()\n{\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerId(String containerId)\n{\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNodeId()\n{\r\n    return nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeId(String nodeAddress)\n{\r\n    this.nodeId = nodeAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getAppOwner",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppOwner()\n{\r\n    return appOwner;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setAppOwner",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAppOwner(String appOwner)\n{\r\n    this.appOwner = appOwner;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getNodeHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNodeHttpAddress()\n{\r\n    return nodeHttpAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setNodeHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeHttpAddress(String nodeHttpAddress)\n{\r\n    this.nodeHttpAddress = nodeHttpAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "isAppFinished",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isAppFinished()\n{\r\n    return appFinished;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setAppFinished",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAppFinished(boolean appFinished)\n{\r\n    this.appFinished = appFinished;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getOutputLocalDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getOutputLocalDir()\n{\r\n    return outputLocalDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setOutputLocalDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOutputLocalDir(String outputLocalDir)\n{\r\n    this.outputLocalDir = outputLocalDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getLogTypes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<String> getLogTypes()\n{\r\n    return logTypes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setLogTypes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLogTypes(Set<String> logTypes)\n{\r\n    this.logTypes = logTypes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getBytes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getBytes()\n{\r\n    return bytes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setBytes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setBytes(long bytes)\n{\r\n    this.bytes = bytes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getContainerState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerState getContainerState()\n{\r\n    return containerState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setContainerState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerState(ContainerState containerState)\n{\r\n    this.containerState = containerState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "block",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Block block()\n{\r\n    if (block == null) {\r\n        block = new Block(writer(), context().nestLevel(), context().wasInline());\r\n    }\r\n    return block;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void render()\n{\r\n    int nestLevel = context().nestLevel();\r\n    LOG.debug(\"Rendering {} @{}\", getClass(), nestLevel);\r\n    render(block());\r\n    if (block.nestLevel() != nestLevel) {\r\n        throw new WebAppException(\"Error rendering block: nestLevel=\" + block.nestLevel() + \" expected \" + nestLevel);\r\n    }\r\n    context().set(nestLevel, block.wasInline());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "renderPartial",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void renderPartial()\n{\r\n    render();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void render(Block html)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "getCallerUGI",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UserGroupInformation getCallerUGI()\n{\r\n    String remoteUser = request().getRemoteUser();\r\n    UserGroupInformation callerUGI = null;\r\n    if (remoteUser != null) {\r\n        callerUGI = UserGroupInformation.createRemoteUser(remoteUser);\r\n    }\r\n    return callerUGI;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeIdProto getProto()\n{\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getHost()\n{\r\n    Preconditions.checkNotNull(proto);\r\n    return proto.getHost();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setHost",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setHost(String host)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setHost(host);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getPort()\n{\r\n    Preconditions.checkNotNull(proto);\r\n    return proto.getPort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPort(int port)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setPort(port);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "build",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void build()\n{\r\n    proto = builder.build();\r\n    builder = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "append",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "BoundedAppender append(final CharSequence csq)\n{\r\n    appendAndCount(csq);\r\n    checkAndCut();\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "appendAndCount",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void appendAndCount(final CharSequence csq)\n{\r\n    final int before = messages.length();\r\n    messages.append(csq);\r\n    final int after = messages.length();\r\n    totalCharacterCount += after - before;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "checkAndCut",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void checkAndCut()\n{\r\n    if (messages.length() > limit) {\r\n        final int newStart = messages.length() - limit;\r\n        messages.delete(0, newStart);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "length",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int length()\n{\r\n    return messages.length();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getLimit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getLimit()\n{\r\n    return limit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String toString()\n{\r\n    if (messages.length() < totalCharacterCount) {\r\n        return String.format(TRUNCATED_MESSAGES_TEMPLATE, messages.length(), totalCharacterCount, messages.toString());\r\n    }\r\n    return messages.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "elapsed",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long elapsed(long started, long finished)\n{\r\n    return Times.elapsed(started, finished, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "elapsed",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long elapsed(long started, long finished, boolean isRunning)\n{\r\n    if (finished > 0 && started > 0) {\r\n        long elapsed = finished - started;\r\n        if (elapsed >= 0) {\r\n            return elapsed;\r\n        } else {\r\n            LOG.warn(\"Finished time \" + finished + \" is ahead of started time \" + started);\r\n            return -1;\r\n        }\r\n    }\r\n    if (isRunning) {\r\n        long current = System.currentTimeMillis();\r\n        long elapsed = started > 0 ? current - started : 0;\r\n        if (elapsed >= 0) {\r\n            return elapsed;\r\n        } else {\r\n            LOG.warn(\"Current time \" + current + \" is ahead of started time \" + started);\r\n            return -1;\r\n        }\r\n    } else {\r\n        return -1;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "format",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String format(long ts)\n{\r\n    return ts > 0 ? String.valueOf(dateFormat.get().format(new Date(ts))) : \"N/A\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "formatISO8601",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String formatISO8601(long ts)\n{\r\n    return isoFormat.get().format(new Date(ts));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "parseISO8601ToLocalTimeInMillis",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long parseISO8601ToLocalTimeInMillis(String isoString) throws ParseException\n{\r\n    if (isoString == null) {\r\n        throw new ParseException(\"Invalid input.\", -1);\r\n    }\r\n    return isoFormat.get().parse(isoString).getTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnClusterMetricsProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = YarnClusterMetricsProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumNodeManagers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumNodeManagers()\n{\r\n    YarnClusterMetricsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getNumNodeManagers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumNodeManagers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumNodeManagers(int numNodeManagers)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumNodeManagers((numNodeManagers));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumDecommissionedNodeManagers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getNumDecommissionedNodeManagers()\n{\r\n    YarnClusterMetricsProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (p.hasNumDecommissionedNms()) {\r\n        return (p.getNumDecommissionedNms());\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumDecommissionedNodeManagers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumDecommissionedNodeManagers(int numDecommissionedNodeManagers)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumDecommissionedNms((numDecommissionedNodeManagers));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumActiveNodeManagers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getNumActiveNodeManagers()\n{\r\n    YarnClusterMetricsProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (p.hasNumActiveNms()) {\r\n        return (p.getNumActiveNms());\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumActiveNodeManagers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumActiveNodeManagers(int numActiveNodeManagers)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumActiveNms((numActiveNodeManagers));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumLostNodeManagers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getNumLostNodeManagers()\n{\r\n    YarnClusterMetricsProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (p.hasNumLostNms()) {\r\n        return (p.getNumLostNms());\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumLostNodeManagers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumLostNodeManagers(int numLostNodeManagers)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumLostNms((numLostNodeManagers));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumUnhealthyNodeManagers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getNumUnhealthyNodeManagers()\n{\r\n    YarnClusterMetricsProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (p.hasNumUnhealthyNms()) {\r\n        return (p.getNumUnhealthyNms());\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumUnhealthyNodeManagers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumUnhealthyNodeManagers(int numUnhealthyNodeManagers)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumUnhealthyNms((numUnhealthyNodeManagers));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumRebootedNodeManagers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getNumRebootedNodeManagers()\n{\r\n    YarnClusterMetricsProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (p.hasNumRebootedNms()) {\r\n        return (p.getNumRebootedNms());\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumRebootedNodeManagers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumRebootedNodeManagers(int numRebootedNodeManagers)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumRebootedNms((numRebootedNodeManagers));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initialize(Configuration conf) throws Exception\n{\r\n    if (instance == null) {\r\n        synchronized (WebServiceClient.class) {\r\n            if (instance == null) {\r\n                isHttps = YarnConfiguration.useHttps(conf);\r\n                if (isHttps) {\r\n                    createSSLFactory(conf);\r\n                }\r\n                instance = new WebServiceClient();\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getWebServiceClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WebServiceClient getWebServiceClient()\n{\r\n    return instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getSSLFactory",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SSLFactory getSSLFactory()\n{\r\n    return sslFactory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "createSSLFactory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SSLFactory createSSLFactory(Configuration conf) throws Exception\n{\r\n    sslFactory = new SSLFactory(SSLFactory.Mode.CLIENT, conf);\r\n    sslFactory.init();\r\n    return sslFactory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "createClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Client createClient()\n{\r\n    return new Client(new URLConnectionClientHandler(getHttpURLConnectionFactory()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getHttpURLConnectionFactory",
  "errType" : [ "AuthenticationException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "HttpURLConnectionFactory getHttpURLConnectionFactory()\n{\r\n    return new HttpURLConnectionFactory() {\r\n\r\n        @Override\r\n        public HttpURLConnection getHttpURLConnection(URL url) throws IOException {\r\n            AuthenticatedURL.Token token = new AuthenticatedURL.Token();\r\n            HttpURLConnection conn = null;\r\n            try {\r\n                HttpURLConnection.setFollowRedirects(false);\r\n                if (isHttps) {\r\n                    conn = new AuthenticatedURL(new KerberosAuthenticator(), sslFactory).openConnection(url, token);\r\n                } else {\r\n                    conn = new AuthenticatedURL().openConnection(url, token);\r\n                }\r\n            } catch (AuthenticationException e) {\r\n                throw new IOException(e);\r\n            }\r\n            return conn;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "destroy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void destroy()\n{\r\n    if (sslFactory != null) {\r\n        sslFactory.destroy();\r\n    }\r\n    instance = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\event",
  "methodName" : "getLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Collection<String> getLabels()\n{\r\n    return labels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createNMProxy",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "T createNMProxy(final Configuration conf, final Class<T> protocol, final UserGroupInformation ugi, final YarnRPC rpc, final InetSocketAddress serverAddress)\n{\r\n    RetryPolicy retryPolicy = createRetryPolicy(conf, YarnConfiguration.CLIENT_NM_CONNECT_MAX_WAIT_MS, YarnConfiguration.DEFAULT_CLIENT_NM_CONNECT_MAX_WAIT_MS, YarnConfiguration.CLIENT_NM_CONNECT_RETRY_INTERVAL_MS, YarnConfiguration.DEFAULT_CLIENT_NM_CONNECT_RETRY_INTERVAL_MS);\r\n    Configuration confClone = new Configuration(conf);\r\n    confClone.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 0);\r\n    confClone.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY, 0);\r\n    return createRetriableProxy(confClone, protocol, ugi, rpc, serverAddress, retryPolicy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getRenewer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getRenewer()\n{\r\n    GetDelegationTokenRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.renewer != null) {\r\n        return this.renewer;\r\n    }\r\n    this.renewer = p.getRenewer();\r\n    return this.renewer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setRenewer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRenewer(String renewer)\n{\r\n    maybeInitBuilder();\r\n    if (renewer == null)\r\n        builder.clearRenewer();\r\n    this.renewer = renewer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetDelegationTokenRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (renewer != null) {\r\n        builder.setRenewer(this.renewer);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetDelegationTokenRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetNewApplicationRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initLowerCaseConfig",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initLowerCaseConfig()\n{\r\n    if (forceLowerCaseTags == null) {\r\n        Configuration conf = new Configuration();\r\n        forceLowerCaseTags = conf.getBoolean(APPLICATION_TAG_FORCE_LOWERCASE_CONVERSION, DEFAULT_APPLICATION_TAG_FORCE_LOWERCASE_CONVERSION);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationSubmissionContextProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationId != null) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n    if (this.priority != null) {\r\n        builder.setPriority(convertToProtoFormat(this.priority));\r\n    }\r\n    if (this.amContainer != null) {\r\n        builder.setAmContainerSpec(convertToProtoFormat(this.amContainer));\r\n    }\r\n    if (this.resource != null) {\r\n        builder.setResource(convertToProtoFormat(this.resource));\r\n    }\r\n    if (this.applicationTags != null && !this.applicationTags.isEmpty()) {\r\n        builder.clearApplicationTags();\r\n        builder.addAllApplicationTags(this.applicationTags);\r\n    }\r\n    if (this.amResourceRequests != null) {\r\n        builder.clearAmContainerResourceRequest();\r\n        builder.addAllAmContainerResourceRequest(convertToProtoFormat(this.amResourceRequests));\r\n    }\r\n    if (this.logAggregationContext != null) {\r\n        builder.setLogAggregationContext(convertToProtoFormat(this.logAggregationContext));\r\n    }\r\n    if (this.reservationId != null) {\r\n        builder.setReservationId(convertToProtoFormat(this.reservationId));\r\n    }\r\n    if (this.applicationTimeouts != null) {\r\n        addApplicationTimeouts();\r\n    }\r\n    if (this.schedulingProperties != null) {\r\n        addApplicationSchedulingProperties();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ApplicationSubmissionContextProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.priority != null) {\r\n        return this.priority;\r\n    }\r\n    if (!p.hasPriority()) {\r\n        return null;\r\n    }\r\n    this.priority = convertFromProtoFormat(p.getPriority());\r\n    return this.priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPriority(Priority priority)\n{\r\n    maybeInitBuilder();\r\n    if (priority == null)\r\n        builder.clearPriority();\r\n    this.priority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.applicationId != null) {\r\n        return applicationId;\r\n    }\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null)\r\n        builder.clearApplicationId();\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getApplicationName()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationName()) {\r\n        return null;\r\n    }\r\n    return (p.getApplicationName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationName(String applicationName)\n{\r\n    maybeInitBuilder();\r\n    if (applicationName == null) {\r\n        builder.clearApplicationName();\r\n        return;\r\n    }\r\n    builder.setApplicationName((applicationName));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getQueue()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasQueue()) {\r\n        return null;\r\n    }\r\n    return (p.getQueue());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getApplicationType()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationType()) {\r\n        return null;\r\n    }\r\n    return (p.getApplicationType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initApplicationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initApplicationTags()\n{\r\n    if (this.applicationTags != null) {\r\n        return;\r\n    }\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.applicationTags = new TreeSet<>();\r\n    this.applicationTags.addAll(p.getApplicationTagsList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getApplicationTags()\n{\r\n    initApplicationTags();\r\n    return this.applicationTags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueue(String queue)\n{\r\n    maybeInitBuilder();\r\n    if (queue == null) {\r\n        builder.clearQueue();\r\n        return;\r\n    }\r\n    builder.setQueue((queue));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationType(String applicationType)\n{\r\n    maybeInitBuilder();\r\n    if (applicationType == null) {\r\n        builder.clearApplicationType();\r\n        return;\r\n    }\r\n    builder.setApplicationType((applicationType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationTags",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setApplicationTags(Set<String> tags)\n{\r\n    maybeInitBuilder();\r\n    if (tags == null || tags.isEmpty()) {\r\n        builder.clearApplicationTags();\r\n        this.applicationTags = null;\r\n        return;\r\n    }\r\n    this.applicationTags = new TreeSet<>();\r\n    for (String tag : tags) {\r\n        this.applicationTags.add(forceLowerCaseTags ? StringUtils.toLowerCase(tag) : tag);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAMContainerSpec",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerLaunchContext getAMContainerSpec()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.amContainer != null) {\r\n        return amContainer;\r\n    }\r\n    if (!p.hasAmContainerSpec()) {\r\n        return null;\r\n    }\r\n    amContainer = convertFromProtoFormat(p.getAmContainerSpec());\r\n    return amContainer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAMContainerSpec",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAMContainerSpec(ContainerLaunchContext amContainer)\n{\r\n    maybeInitBuilder();\r\n    if (amContainer == null) {\r\n        builder.clearAmContainerSpec();\r\n    }\r\n    this.amContainer = amContainer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getUnmanagedAM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getUnmanagedAM()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getUnmanagedAm();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setUnmanagedAM",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUnmanagedAM(boolean value)\n{\r\n    maybeInitBuilder();\r\n    builder.setUnmanagedAm(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCancelTokensWhenComplete",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getCancelTokensWhenComplete()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getCancelTokensWhenComplete();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCancelTokensWhenComplete",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCancelTokensWhenComplete(boolean cancel)\n{\r\n    maybeInitBuilder();\r\n    builder.setCancelTokensWhenComplete(cancel);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getMaxAppAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getMaxAppAttempts()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getMaxAppAttempts();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setMaxAppAttempts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMaxAppAttempts(int maxAppAttempts)\n{\r\n    maybeInitBuilder();\r\n    builder.setMaxAppAttempts(maxAppAttempts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getResource()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.resource != null) {\r\n        return this.resource;\r\n    }\r\n    if (!p.hasResource()) {\r\n        return null;\r\n    }\r\n    this.resource = convertFromProtoFormat(p.getResource());\r\n    return this.resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResource(Resource resource)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null) {\r\n        builder.clearResource();\r\n    }\r\n    this.resource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getReservationID",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationId getReservationID()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (reservationId != null) {\r\n        return reservationId;\r\n    }\r\n    if (!p.hasReservationId()) {\r\n        return null;\r\n    }\r\n    reservationId = convertFromProtoFormat(p.getReservationId());\r\n    return reservationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setReservationID",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservationID(ReservationId reservationID)\n{\r\n    maybeInitBuilder();\r\n    if (reservationID == null) {\r\n        builder.clearReservationId();\r\n        return;\r\n    }\r\n    this.reservationId = reservationID;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setKeepContainersAcrossApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setKeepContainersAcrossApplicationAttempts(boolean keepContainers)\n{\r\n    maybeInitBuilder();\r\n    builder.setKeepContainersAcrossApplicationAttempts(keepContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getKeepContainersAcrossApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getKeepContainersAcrossApplicationAttempts()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getKeepContainersAcrossApplicationAttempts();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PriorityPBImpl convertFromProtoFormat(PriorityProto p)\n{\r\n    return new PriorityPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PriorityProto convertToProtoFormat(Priority t)\n{\r\n    return ((PriorityPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ResourceRequest> convertFromProtoFormat(List<ResourceRequestProto> ps)\n{\r\n    List<ResourceRequest> rs = new ArrayList<>();\r\n    for (ResourceRequestProto p : ps) {\r\n        rs.add(new ResourceRequestPBImpl(p));\r\n    }\r\n    return rs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<ResourceRequestProto> convertToProtoFormat(List<ResourceRequest> ts)\n{\r\n    List<ResourceRequestProto> rs = new ArrayList<>(ts.size());\r\n    for (ResourceRequest t : ts) {\r\n        rs.add(((ResourceRequestPBImpl) t).getProto());\r\n    }\r\n    return rs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerLaunchContextPBImpl convertFromProtoFormat(ContainerLaunchContextProto p)\n{\r\n    return new ContainerLaunchContextPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerLaunchContextProto convertToProtoFormat(ContainerLaunchContext t)\n{\r\n    return ((ContainerLaunchContextPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource t)\n{\r\n    return ProtoUtils.convertToProtoFormat(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getNodeLabelExpression()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeLabelExpression()) {\r\n        return null;\r\n    }\r\n    return p.getNodeLabelExpression();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeLabelExpression(String labelExpression)\n{\r\n    maybeInitBuilder();\r\n    if (labelExpression == null) {\r\n        builder.clearNodeLabelExpression();\r\n        return;\r\n    }\r\n    builder.setNodeLabelExpression(labelExpression);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAMContainerResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ResourceRequest getAMContainerResourceRequest()\n{\r\n    List<ResourceRequest> reqs = getAMContainerResourceRequests();\r\n    if (reqs == null || reqs.isEmpty()) {\r\n        return null;\r\n    }\r\n    return getAMContainerResourceRequests().get(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAMContainerResourceRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<ResourceRequest> getAMContainerResourceRequests()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.amResourceRequests != null) {\r\n        return amResourceRequests;\r\n    }\r\n    if (p.getAmContainerResourceRequestCount() == 0) {\r\n        return null;\r\n    }\r\n    amResourceRequests = convertFromProtoFormat(p.getAmContainerResourceRequestList());\r\n    return amResourceRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAMContainerResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAMContainerResourceRequest(ResourceRequest request)\n{\r\n    maybeInitBuilder();\r\n    if (request == null) {\r\n        builder.clearAmContainerResourceRequest();\r\n    }\r\n    this.amResourceRequests = Collections.singletonList(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAMContainerResourceRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAMContainerResourceRequests(List<ResourceRequest> requests)\n{\r\n    maybeInitBuilder();\r\n    if (requests == null) {\r\n        builder.clearAmContainerResourceRequest();\r\n    }\r\n    this.amResourceRequests = requests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAttemptFailuresValidityInterval",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAttemptFailuresValidityInterval()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getAttemptFailuresValidityInterval();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAttemptFailuresValidityInterval",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAttemptFailuresValidityInterval(long attemptFailuresValidityInterval)\n{\r\n    maybeInitBuilder();\r\n    builder.setAttemptFailuresValidityInterval(attemptFailuresValidityInterval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LogAggregationContextPBImpl convertFromProtoFormat(LogAggregationContextProto p)\n{\r\n    return new LogAggregationContextPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationContextProto convertToProtoFormat(LogAggregationContext t)\n{\r\n    return ((LogAggregationContextPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getLogAggregationContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LogAggregationContext getLogAggregationContext()\n{\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.logAggregationContext != null) {\r\n        return this.logAggregationContext;\r\n    }\r\n    if (!p.hasLogAggregationContext()) {\r\n        return null;\r\n    }\r\n    logAggregationContext = convertFromProtoFormat(p.getLogAggregationContext());\r\n    return logAggregationContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setLogAggregationContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLogAggregationContext(LogAggregationContext logAggregationContext)\n{\r\n    maybeInitBuilder();\r\n    if (logAggregationContext == null)\r\n        builder.clearLogAggregationContext();\r\n    this.logAggregationContext = logAggregationContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationIdPBImpl convertFromProtoFormat(ReservationIdProto p)\n{\r\n    return new ReservationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationIdProto convertToProtoFormat(ReservationId t)\n{\r\n    return ((ReservationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ApplicationTimeoutType, Long> getApplicationTimeouts()\n{\r\n    initApplicationTimeout();\r\n    return this.applicationTimeouts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initApplicationTimeout",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initApplicationTimeout()\n{\r\n    if (this.applicationTimeouts != null) {\r\n        return;\r\n    }\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ApplicationTimeoutMapProto> lists = p.getApplicationTimeoutsList();\r\n    this.applicationTimeouts = new HashMap<ApplicationTimeoutType, Long>(lists.size());\r\n    for (ApplicationTimeoutMapProto timeoutProto : lists) {\r\n        this.applicationTimeouts.put(ProtoUtils.convertFromProtoFormat(timeoutProto.getApplicationTimeoutType()), timeoutProto.getTimeout());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationTimeouts(Map<ApplicationTimeoutType, Long> appTimeouts)\n{\r\n    if (appTimeouts == null) {\r\n        return;\r\n    }\r\n    initApplicationTimeout();\r\n    this.applicationTimeouts.clear();\r\n    this.applicationTimeouts.putAll(appTimeouts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addApplicationTimeouts()\n{\r\n    maybeInitBuilder();\r\n    builder.clearApplicationTimeouts();\r\n    if (applicationTimeouts == null) {\r\n        return;\r\n    }\r\n    Iterable<? extends ApplicationTimeoutMapProto> values = new Iterable<ApplicationTimeoutMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<ApplicationTimeoutMapProto> iterator() {\r\n            return new Iterator<ApplicationTimeoutMapProto>() {\r\n\r\n                private Iterator<ApplicationTimeoutType> iterator = applicationTimeouts.keySet().iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iterator.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ApplicationTimeoutMapProto next() {\r\n                    ApplicationTimeoutType key = iterator.next();\r\n                    return ApplicationTimeoutMapProto.newBuilder().setTimeout(applicationTimeouts.get(key)).setApplicationTimeoutType(ProtoUtils.convertToProtoFormat(key)).build();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    this.builder.addAllApplicationTimeouts(values);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addApplicationSchedulingProperties",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addApplicationSchedulingProperties()\n{\r\n    maybeInitBuilder();\r\n    builder.clearApplicationSchedulingProperties();\r\n    if (this.schedulingProperties == null) {\r\n        return;\r\n    }\r\n    Iterable<? extends StringStringMapProto> values = new Iterable<StringStringMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<StringStringMapProto> iterator() {\r\n            return new Iterator<StringStringMapProto>() {\r\n\r\n                private Iterator<String> iterator = schedulingProperties.keySet().iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iterator.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public StringStringMapProto next() {\r\n                    String key = iterator.next();\r\n                    return StringStringMapProto.newBuilder().setValue(schedulingProperties.get(key)).setKey(key).build();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    this.builder.addAllApplicationSchedulingProperties(values);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initApplicationSchedulingProperties",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initApplicationSchedulingProperties()\n{\r\n    if (this.schedulingProperties != null) {\r\n        return;\r\n    }\r\n    ApplicationSubmissionContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<StringStringMapProto> properties = p.getApplicationSchedulingPropertiesList();\r\n    this.schedulingProperties = new HashMap<String, String>(properties.size());\r\n    for (StringStringMapProto envProto : properties) {\r\n        this.schedulingProperties.put(envProto.getKey(), envProto.getValue());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationSchedulingPropertiesMap",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, String> getApplicationSchedulingPropertiesMap()\n{\r\n    initApplicationSchedulingProperties();\r\n    return this.schedulingProperties;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationSchedulingPropertiesMap",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationSchedulingPropertiesMap(Map<String, String> schedulingPropertyMap)\n{\r\n    if (schedulingPropertyMap == null) {\r\n        return;\r\n    }\r\n    initApplicationSchedulingProperties();\r\n    this.schedulingProperties.clear();\r\n    this.schedulingProperties.putAll(schedulingPropertyMap);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setForceLowerCaseTags",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setForceLowerCaseTags(boolean convert)\n{\r\n    ApplicationSubmissionContextPBImpl.forceLowerCaseTags = convert;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    NMTokenProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.nodeId != null) {\r\n        return nodeId;\r\n    }\r\n    if (!p.hasNodeId()) {\r\n        return null;\r\n    }\r\n    this.nodeId = convertFromProtoFormat(p.getNodeId());\r\n    return nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeId(NodeId nodeId)\n{\r\n    maybeInitBuilder();\r\n    if (nodeId == null) {\r\n        builder.clearNodeId();\r\n    }\r\n    this.nodeId = nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token getToken()\n{\r\n    NMTokenProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.token != null) {\r\n        return this.token;\r\n    }\r\n    if (!p.hasToken()) {\r\n        return null;\r\n    }\r\n    this.token = convertFromProtoFormat(p.getToken());\r\n    return token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setToken(Token token)\n{\r\n    maybeInitBuilder();\r\n    if (token == null) {\r\n        builder.clearToken();\r\n    }\r\n    this.token = token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NMTokenProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodeId != null) {\r\n        builder.setNodeId(convertToProtoFormat(nodeId));\r\n    }\r\n    if (this.token != null) {\r\n        builder.setToken(convertToProtoFormat(token));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NMTokenProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId convertFromProtoFormat(NodeIdProto p)\n{\r\n    return new NodeIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId nodeId)\n{\r\n    return ((NodeIdPBImpl) nodeId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token token)\n{\r\n    return ((TokenPBImpl) token).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Token convertFromProtoFormat(TokenProto proto)\n{\r\n    return new TokenPBImpl(proto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CsiAdaptorProtos.NodePublishVolumeResponse getProto()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "setIsExclusive",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setIsExclusive(boolean exclusive)\n{\r\n    this.exclusive = exclusive;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getIsExclusive",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getIsExclusive()\n{\r\n    return this.exclusive;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (obj instanceof RMNodeLabel) {\r\n        RMNodeLabel other = (RMNodeLabel) obj;\r\n        return Resources.equals(getResource(), other.getResource()) && StringUtils.equals(getLabelName(), other.getLabelName()) && (other.getNumActiveNMs() == getNumActiveNMs());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getCopy",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RMNodeLabel getCopy()\n{\r\n    return new RMNodeLabel(getLabelName(), getResource(), getNumActiveNMs(), exclusive);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 502357;\r\n    return (int) ((((long) getLabelName().hashCode() << 8) + (getResource().hashCode() << 4) + getNumActiveNMs()) % prime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int compareTo(RMNodeLabel o)\n{\r\n    if (getLabelName().isEmpty() != o.getLabelName().isEmpty()) {\r\n        if (getLabelName().isEmpty()) {\r\n            return -1;\r\n        }\r\n        return 1;\r\n    }\r\n    return getLabelName().compareTo(o.getLabelName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getNodeLabel",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeLabel getNodeLabel()\n{\r\n    return this.nodeLabel;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "addNodeId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addNodeId(NodeId node)\n{\r\n    nodeIds.add(node);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "removeNodeId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeNodeId(NodeId node)\n{\r\n    nodeIds.remove(node);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getAssociatedNodeIds",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<NodeId> getAssociatedNodeIds()\n{\r\n    return new HashSet<NodeId>(nodeIds);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init(Configuration configuration, RMProxy<T> rmProxy, Class<T> protocol)\n{\r\n    this.rmProxy = rmProxy;\r\n    this.protocol = protocol;\r\n    this.conf = new YarnConfiguration(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ProxyInfo<T> getProxy()\n{\r\n    if (proxy == null) {\r\n        proxy = getProxyInternal();\r\n    }\r\n    return new ProxyInfo<T>(proxy, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getProxyInternal",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "T getProxyInternal()\n{\r\n    try {\r\n        final InetSocketAddress rmAddress = rmProxy.getRMAddress(conf, protocol);\r\n        return rmProxy.getProxy(conf, protocol, rmAddress);\r\n    } catch (IOException ioe) {\r\n        LOG.error(\"Unable to create proxy to the ResourceManager\", ioe.getMessage());\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "performFailover",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void performFailover(T currentProxy)\n{\r\n    RPC.stopProxy(proxy);\r\n    proxy = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    if (this.nodeAttributesMapping != null) {\r\n        for (NodeToAttributes nodeAttributes : nodeAttributesMapping) {\r\n            builder.addNodeToAttributes(((NodeToAttributesPBImpl) nodeAttributes).getProto());\r\n        }\r\n    }\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodesToAttributesMappingRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NodesToAttributesMappingRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodesToAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodesToAttributes(List<NodeToAttributes> nodesToAttributes)\n{\r\n    if (nodeAttributesMapping == null) {\r\n        nodeAttributesMapping = new ArrayList<>();\r\n    }\r\n    if (nodesToAttributes == null) {\r\n        throw new IllegalArgumentException(\"nodesToAttributes cannot be null\");\r\n    }\r\n    nodeAttributesMapping.clear();\r\n    nodeAttributesMapping.addAll(nodesToAttributes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeAttributesMapping",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initNodeAttributesMapping()\n{\r\n    if (this.nodeAttributesMapping != null) {\r\n        return;\r\n    }\r\n    NodesToAttributesMappingRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeToAttributesProto> nodeAttributesProtoList = p.getNodeToAttributesList();\r\n    List<NodeToAttributes> attributes = new ArrayList<>();\r\n    if (nodeAttributesProtoList == null || nodeAttributesProtoList.size() == 0) {\r\n        this.nodeAttributesMapping = attributes;\r\n        return;\r\n    }\r\n    for (NodeToAttributesProto nodeAttributeProto : nodeAttributesProtoList) {\r\n        attributes.add(new NodeToAttributesPBImpl(nodeAttributeProto));\r\n    }\r\n    this.nodeAttributesMapping = attributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodesToAttributes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<NodeToAttributes> getNodesToAttributes()\n{\r\n    initNodeAttributesMapping();\r\n    return this.nodeAttributesMapping;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFailOnUnknownNodes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFailOnUnknownNodes(boolean failOnUnknownNodes)\n{\r\n    maybeInitBuilder();\r\n    builder.setFailOnUnknownNodes(failOnUnknownNodes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFailOnUnknownNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getFailOnUnknownNodes()\n{\r\n    NodesToAttributesMappingRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getFailOnUnknownNodes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setOperation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setOperation(AttributeMappingOperationType operation)\n{\r\n    maybeInitBuilder();\r\n    builder.setOperation(convertToProtoFormat(operation));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AttributeMappingOperationTypeProto convertToProtoFormat(AttributeMappingOperationType operation)\n{\r\n    return AttributeMappingOperationTypeProto.valueOf(operation.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AttributeMappingOperationType convertFromProtoFormat(AttributeMappingOperationTypeProto operationTypeProto)\n{\r\n    return AttributeMappingOperationType.valueOf(operationTypeProto.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getOperation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AttributeMappingOperationType getOperation()\n{\r\n    NodesToAttributesMappingRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasOperation()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getOperation());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (obj instanceof NodesToAttributesMappingRequest) {\r\n        NodesToAttributesMappingRequest other = (NodesToAttributesMappingRequest) obj;\r\n        if (getNodesToAttributes() == null) {\r\n            if (other.getNodesToAttributes() != null) {\r\n                return false;\r\n            }\r\n        } else if (!getNodesToAttributes().containsAll(other.getNodesToAttributes())) {\r\n            return false;\r\n        }\r\n        if (getOperation() == null) {\r\n            if (other.getOperation() != null) {\r\n                return false;\r\n            }\r\n        } else if (!getOperation().equals(other.getOperation())) {\r\n            return false;\r\n        }\r\n        return getFailOnUnknownNodes() == other.getFailOnUnknownNodes();\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationUpdateRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.reservationId != null) {\r\n        builder.setReservationId(convertToProtoFormat(this.reservationId));\r\n    }\r\n    if (this.reservationDefinition != null) {\r\n        builder.setReservationDefinition(convertToProtoFormat(reservationDefinition));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReservationUpdateRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getReservationDefinition",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationDefinition getReservationDefinition()\n{\r\n    ReservationUpdateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (reservationDefinition != null) {\r\n        return reservationDefinition;\r\n    }\r\n    if (!p.hasReservationDefinition()) {\r\n        return null;\r\n    }\r\n    reservationDefinition = convertFromProtoFormat(p.getReservationDefinition());\r\n    return reservationDefinition;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setReservationDefinition",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservationDefinition(ReservationDefinition reservationDefinition)\n{\r\n    maybeInitBuilder();\r\n    if (reservationDefinition == null) {\r\n        builder.clearReservationDefinition();\r\n    }\r\n    this.reservationDefinition = reservationDefinition;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getReservationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationId getReservationId()\n{\r\n    ReservationUpdateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (reservationId != null) {\r\n        return reservationId;\r\n    }\r\n    if (!p.hasReservationId()) {\r\n        return null;\r\n    }\r\n    reservationId = convertFromProtoFormat(p.getReservationId());\r\n    return reservationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setReservationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservationId(ReservationId reservationId)\n{\r\n    maybeInitBuilder();\r\n    if (reservationId == null) {\r\n        builder.clearReservationId();\r\n        return;\r\n    }\r\n    this.reservationId = reservationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationIdPBImpl convertFromProtoFormat(ReservationIdProto p)\n{\r\n    return new ReservationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationIdProto convertToProtoFormat(ReservationId t)\n{\r\n    return ((ReservationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationDefinitionProto convertToProtoFormat(ReservationDefinition r)\n{\r\n    return ((ReservationDefinitionPBImpl) r).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationDefinitionPBImpl convertFromProtoFormat(ReservationDefinitionProto r)\n{\r\n    return new ReservationDefinitionPBImpl(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "append",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void append(LoggingEvent event)\n{\r\n    String message = event.getRenderedMessage();\r\n    String[] throwableStr = event.getThrowableStrRep();\r\n    if (throwableStr != null) {\r\n        message = message + \"\\n\" + StringUtils.join(\"\\n\", throwableStr);\r\n        message = org.apache.commons.lang3.StringUtils.left(message, MAX_MESSAGE_SIZE);\r\n    }\r\n    int level = event.getLevel().toInt();\r\n    if (level == Level.WARN_INT || level == Level.ERROR_INT) {\r\n        Long eventTimeSeconds = event.getTimeStamp() / 1000;\r\n        Map<String, SortedMap<Long, Integer>> map;\r\n        SortedMap<Long, Integer> timestampsCount;\r\n        SortedSet<PurgeElement> purgeInformation;\r\n        if (level == Level.WARN_INT) {\r\n            map = warnings;\r\n            timestampsCount = warningsTimestampCount;\r\n            purgeInformation = warningsPurgeInformation;\r\n        } else {\r\n            map = errors;\r\n            timestampsCount = errorsTimestampCount;\r\n            purgeInformation = errorsPurgeInformation;\r\n        }\r\n        updateMessageDetails(message, eventTimeSeconds, map, timestampsCount, purgeInformation);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "updateMessageDetails",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void updateMessageDetails(String message, Long eventTimeSeconds, Map<String, SortedMap<Long, Integer>> map, SortedMap<Long, Integer> timestampsCount, SortedSet<PurgeElement> purgeInformation)\n{\r\n    synchronized (lock) {\r\n        if (map.containsKey(message)) {\r\n            SortedMap<Long, Integer> tmp = map.get(message);\r\n            Long lastMessageTime = tmp.lastKey();\r\n            int value = 1;\r\n            if (tmp.containsKey(eventTimeSeconds)) {\r\n                value = tmp.get(eventTimeSeconds) + 1;\r\n            }\r\n            tmp.put(eventTimeSeconds, value);\r\n            purgeInformation.remove(new PurgeElement(message, lastMessageTime));\r\n        } else {\r\n            SortedMap<Long, Integer> value = new TreeMap<>();\r\n            value.put(eventTimeSeconds, 1);\r\n            map.put(message, value);\r\n            if (map.size() > maxUniqueMessages * 2) {\r\n                cleanupTimer.cancel();\r\n                cleanupTimer = new Timer();\r\n                cleanupTimer.schedule(new ErrorAndWarningsCleanup(), 0);\r\n            }\r\n        }\r\n        purgeInformation.add(new PurgeElement(message, eventTimeSeconds));\r\n        int newValue = 1;\r\n        if (timestampsCount.containsKey(eventTimeSeconds)) {\r\n            newValue = timestampsCount.get(eventTimeSeconds) + 1;\r\n        }\r\n        timestampsCount.put(eventTimeSeconds, newValue);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    cleanupTimer.cancel();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "requiresLayout",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean requiresLayout()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getErrorCounts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Integer> getErrorCounts(List<Long> cutoffs)\n{\r\n    return this.getCounts(errorsTimestampCount, cutoffs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getWarningCounts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Integer> getWarningCounts(List<Long> cutoffs)\n{\r\n    return this.getCounts(warningsTimestampCount, cutoffs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCounts",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "List<Integer> getCounts(SortedMap<Long, Integer> map, List<Long> cutoffs)\n{\r\n    List<Integer> ret = new ArrayList<>();\r\n    Long largestCutoff = Collections.min(cutoffs);\r\n    for (int i = 0; i < cutoffs.size(); ++i) {\r\n        ret.add(0);\r\n    }\r\n    synchronized (lock) {\r\n        Map<Long, Integer> submap = map.tailMap(largestCutoff);\r\n        for (Map.Entry<Long, Integer> entry : submap.entrySet()) {\r\n            for (int i = 0; i < cutoffs.size(); ++i) {\r\n                if (entry.getKey() >= cutoffs.get(i)) {\r\n                    int tmp = ret.get(i);\r\n                    ret.set(i, tmp + entry.getValue());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getErrorMessagesAndCounts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Map<String, Element>> getErrorMessagesAndCounts(List<Long> cutoffs)\n{\r\n    return this.getElementsAndCounts(errors, cutoffs, errorsPurgeInformation);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getWarningMessagesAndCounts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Map<String, Element>> getWarningMessagesAndCounts(List<Long> cutoffs)\n{\r\n    return this.getElementsAndCounts(warnings, cutoffs, warningsPurgeInformation);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getElementsAndCounts",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "List<Map<String, Element>> getElementsAndCounts(Map<String, SortedMap<Long, Integer>> map, List<Long> cutoffs, SortedSet<PurgeElement> purgeInformation)\n{\r\n    if (purgeInformation.size() > maxUniqueMessages) {\r\n        ErrorAndWarningsCleanup cleanup = new ErrorAndWarningsCleanup();\r\n        long cutoff = Time.now() - (messageAgeLimitSeconds * 1000);\r\n        cutoff = (cutoff / 1000);\r\n        cleanup.cleanupMessages(map, purgeInformation, cutoff, maxUniqueMessages);\r\n    }\r\n    List<Map<String, Element>> ret = new ArrayList<>(cutoffs.size());\r\n    for (int i = 0; i < cutoffs.size(); ++i) {\r\n        ret.add(new HashMap<String, Element>());\r\n    }\r\n    synchronized (lock) {\r\n        for (Map.Entry<String, SortedMap<Long, Integer>> element : map.entrySet()) {\r\n            for (int i = 0; i < cutoffs.size(); ++i) {\r\n                Map<String, Element> retMap = ret.get(i);\r\n                SortedMap<Long, Integer> qualifyingTimes = element.getValue().tailMap(cutoffs.get(i));\r\n                long count = 0;\r\n                for (Map.Entry<Long, Integer> entry : qualifyingTimes.entrySet()) {\r\n                    count += entry.getValue();\r\n                }\r\n                if (!qualifyingTimes.isEmpty()) {\r\n                    retMap.put(element.getKey(), new Element(count, qualifyingTimes.lastKey()));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCleanupInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCleanupInterval()\n{\r\n    return cleanupInterval;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setCleanupInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCleanupInterval(long cleanupInterval)\n{\r\n    this.cleanupInterval = cleanupInterval;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getMessageAgeLimitSeconds",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getMessageAgeLimitSeconds()\n{\r\n    return messageAgeLimitSeconds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setMessageAgeLimitSeconds",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMessageAgeLimitSeconds(long messageAgeLimitSeconds)\n{\r\n    this.messageAgeLimitSeconds = messageAgeLimitSeconds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getMaxUniqueMessages",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMaxUniqueMessages()\n{\r\n    return maxUniqueMessages;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setMaxUniqueMessages",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMaxUniqueMessages(int maxUniqueMessages)\n{\r\n    this.maxUniqueMessages = maxUniqueMessages;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "findAppender",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Log4jWarningErrorMetricsAppender findAppender()\n{\r\n    Enumeration appenders = Logger.getRootLogger().getAllAppenders();\r\n    while (appenders.hasMoreElements()) {\r\n        Object obj = appenders.nextElement();\r\n        if (obj instanceof Log4jWarningErrorMetricsAppender) {\r\n            return (Log4jWarningErrorMetricsAppender) obj;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "refreshQueues",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RefreshQueuesResponse refreshQueues(RefreshQueuesRequest request) throws YarnException, IOException\n{\r\n    RefreshQueuesRequestProto requestProto = ((RefreshQueuesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RefreshQueuesResponsePBImpl(proxy.refreshQueues(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "refreshNodes",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RefreshNodesResponse refreshNodes(RefreshNodesRequest request) throws YarnException, IOException\n{\r\n    RefreshNodesRequestProto requestProto = ((RefreshNodesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RefreshNodesResponsePBImpl(proxy.refreshNodes(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "refreshSuperUserGroupsConfiguration",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RefreshSuperUserGroupsConfigurationResponse refreshSuperUserGroupsConfiguration(RefreshSuperUserGroupsConfigurationRequest request) throws YarnException, IOException\n{\r\n    RefreshSuperUserGroupsConfigurationRequestProto requestProto = ((RefreshSuperUserGroupsConfigurationRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RefreshSuperUserGroupsConfigurationResponsePBImpl(proxy.refreshSuperUserGroupsConfiguration(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "refreshUserToGroupsMappings",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RefreshUserToGroupsMappingsResponse refreshUserToGroupsMappings(RefreshUserToGroupsMappingsRequest request) throws YarnException, IOException\n{\r\n    RefreshUserToGroupsMappingsRequestProto requestProto = ((RefreshUserToGroupsMappingsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RefreshUserToGroupsMappingsResponsePBImpl(proxy.refreshUserToGroupsMappings(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "refreshAdminAcls",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RefreshAdminAclsResponse refreshAdminAcls(RefreshAdminAclsRequest request) throws YarnException, IOException\n{\r\n    RefreshAdminAclsRequestProto requestProto = ((RefreshAdminAclsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RefreshAdminAclsResponsePBImpl(proxy.refreshAdminAcls(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "refreshServiceAcls",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RefreshServiceAclsResponse refreshServiceAcls(RefreshServiceAclsRequest request) throws YarnException, IOException\n{\r\n    RefreshServiceAclsRequestProto requestProto = ((RefreshServiceAclsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RefreshServiceAclsResponsePBImpl(proxy.refreshServiceAcls(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "getGroupsForUser",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String[] getGroupsForUser(String user) throws IOException\n{\r\n    GetGroupsForUserRequestProto requestProto = GetGroupsForUserRequestProto.newBuilder().setUser(user).build();\r\n    try {\r\n        GetGroupsForUserResponseProto responseProto = proxy.getGroupsForUser(null, requestProto);\r\n        return (String[]) responseProto.getGroupsList().toArray(new String[responseProto.getGroupsCount()]);\r\n    } catch (ServiceException e) {\r\n        throw ProtobufHelper.getRemoteException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "updateNodeResource",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "UpdateNodeResourceResponse updateNodeResource(UpdateNodeResourceRequest request) throws YarnException, IOException\n{\r\n    UpdateNodeResourceRequestProto requestProto = ((UpdateNodeResourceRequestPBImpl) request).getProto();\r\n    try {\r\n        return new UpdateNodeResourceResponsePBImpl(proxy.updateNodeResource(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "refreshNodesResources",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RefreshNodesResourcesResponse refreshNodesResources(RefreshNodesResourcesRequest request) throws YarnException, IOException\n{\r\n    RefreshNodesResourcesRequestProto requestProto = ((RefreshNodesResourcesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RefreshNodesResourcesResponsePBImpl(proxy.refreshNodesResources(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "addToClusterNodeLabels",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "AddToClusterNodeLabelsResponse addToClusterNodeLabels(AddToClusterNodeLabelsRequest request) throws YarnException, IOException\n{\r\n    AddToClusterNodeLabelsRequestProto requestProto = ((AddToClusterNodeLabelsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new AddToClusterNodeLabelsResponsePBImpl(proxy.addToClusterNodeLabels(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "removeFromClusterNodeLabels",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RemoveFromClusterNodeLabelsResponse removeFromClusterNodeLabels(RemoveFromClusterNodeLabelsRequest request) throws YarnException, IOException\n{\r\n    RemoveFromClusterNodeLabelsRequestProto requestProto = ((RemoveFromClusterNodeLabelsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RemoveFromClusterNodeLabelsResponsePBImpl(proxy.removeFromClusterNodeLabels(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "replaceLabelsOnNode",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ReplaceLabelsOnNodeResponse replaceLabelsOnNode(ReplaceLabelsOnNodeRequest request) throws YarnException, IOException\n{\r\n    ReplaceLabelsOnNodeRequestProto requestProto = ((ReplaceLabelsOnNodeRequestPBImpl) request).getProto();\r\n    try {\r\n        return new ReplaceLabelsOnNodeResponsePBImpl(proxy.replaceLabelsOnNodes(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "checkForDecommissioningNodes",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "CheckForDecommissioningNodesResponse checkForDecommissioningNodes(CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest) throws YarnException, IOException\n{\r\n    CheckForDecommissioningNodesRequestProto requestProto = ((CheckForDecommissioningNodesRequestPBImpl) checkForDecommissioningNodesRequest).getProto();\r\n    try {\r\n        return new CheckForDecommissioningNodesResponsePBImpl(proxy.checkForDecommissioningNodes(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "refreshClusterMaxPriority",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RefreshClusterMaxPriorityResponse refreshClusterMaxPriority(RefreshClusterMaxPriorityRequest request) throws YarnException, IOException\n{\r\n    RefreshClusterMaxPriorityRequestProto requestProto = ((RefreshClusterMaxPriorityRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RefreshClusterMaxPriorityResponsePBImpl(proxy.refreshClusterMaxPriority(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "mapAttributesToNodes",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "NodesToAttributesMappingResponse mapAttributesToNodes(NodesToAttributesMappingRequest request) throws YarnException, IOException\n{\r\n    NodesToAttributesMappingRequestProto requestProto = ((NodesToAttributesMappingRequestPBImpl) request).getProto();\r\n    try {\r\n        return new NodesToAttributesMappingResponsePBImpl(proxy.mapAttributesToNodes(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RenewDelegationTokenResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = RenewDelegationTokenResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNextExpirationTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNextExpirationTime()\n{\r\n    RenewDelegationTokenResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getNewExpiryTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNextExpirationTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNextExpirationTime(long expTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setNewExpiryTime(expTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "isAvailable",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean isAvailable()\n{\r\n    if (Shell.WINDOWS) {\r\n        if (!Shell.hasWinutilsPath()) {\r\n            return false;\r\n        }\r\n        ShellCommandExecutor shellExecutor = new ShellCommandExecutor(new String[] { Shell.getWinUtilsPath(), \"help\" });\r\n        try {\r\n            shellExecutor.execute();\r\n        } catch (IOException e) {\r\n            LOG.error(StringUtils.stringifyException(e));\r\n        } finally {\r\n            String output = shellExecutor.getOutput();\r\n            if (output != null && output.contains(\"Prints to stdout a list of processes in the task\")) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getAllProcessInfoFromShell",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getAllProcessInfoFromShell()\n{\r\n    try {\r\n        ShellCommandExecutor shellExecutor = new ShellCommandExecutor(new String[] { Shell.getWinUtilsFile().getCanonicalPath(), \"task\", \"processList\", taskProcessId });\r\n        shellExecutor.execute();\r\n        return shellExecutor.getOutput();\r\n    } catch (IOException e) {\r\n        LOG.error(StringUtils.stringifyException(e));\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "createProcessInfo",
  "errType" : [ "NumberFormatException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Map<String, ProcessInfo> createProcessInfo(String processesInfoStr)\n{\r\n    String[] processesStr = processesInfoStr.split(\"\\r\\n\");\r\n    Map<String, ProcessInfo> allProcs = new HashMap<String, ProcessInfo>();\r\n    final int procInfoSplitCount = 4;\r\n    for (String processStr : processesStr) {\r\n        if (processStr != null) {\r\n            String[] procInfo = processStr.split(\",\");\r\n            if (procInfo.length == procInfoSplitCount) {\r\n                try {\r\n                    ProcessInfo pInfo = new ProcessInfo();\r\n                    pInfo.pid = procInfo[0];\r\n                    pInfo.vmem = Long.parseLong(procInfo[1]);\r\n                    pInfo.workingSet = Long.parseLong(procInfo[2]);\r\n                    pInfo.cpuTimeMs = Long.parseLong(procInfo[3]);\r\n                    allProcs.put(pInfo.pid, pInfo);\r\n                } catch (NumberFormatException nfe) {\r\n                    LOG.debug(\"Error parsing procInfo.\", nfe);\r\n                }\r\n            } else {\r\n                LOG.debug(\"Expected split length of proc info to be {}. Got {}\", procInfoSplitCount, procInfo.length);\r\n            }\r\n        }\r\n    }\r\n    return allProcs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "updateProcessTree",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void updateProcessTree()\n{\r\n    if (taskProcessId != null) {\r\n        String processesInfoStr = getAllProcessInfoFromShell();\r\n        if (processesInfoStr != null && processesInfoStr.length() > 0) {\r\n            Map<String, ProcessInfo> allProcessInfo = createProcessInfo(processesInfoStr);\r\n            for (Map.Entry<String, ProcessInfo> entry : allProcessInfo.entrySet()) {\r\n                String pid = entry.getKey();\r\n                ProcessInfo pInfo = entry.getValue();\r\n                ProcessInfo oldInfo = processTree.get(pid);\r\n                if (oldInfo != null) {\r\n                    pInfo.age += oldInfo.age;\r\n                    pInfo.cpuTimeMsDelta = pInfo.cpuTimeMs - oldInfo.cpuTimeMs;\r\n                } else {\r\n                    pInfo.cpuTimeMsDelta = pInfo.cpuTimeMs;\r\n                }\r\n            }\r\n            processTree.clear();\r\n            processTree = allProcessInfo;\r\n        } else {\r\n            processTree.clear();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "checkPidPgrpidForMatch",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean checkPidPgrpidForMatch()\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getProcessTreeDump",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getProcessTreeDump()\n{\r\n    StringBuilder ret = new StringBuilder();\r\n    ret.append(String.format(\"\\t|- PID \" + \"CPU_TIME(MILLIS) \" + \"VMEM(BYTES) WORKING_SET(BYTES)%n\"));\r\n    for (ProcessInfo p : processTree.values()) {\r\n        if (p != null) {\r\n            ret.append(String.format(\"\\t|- %s %d %d %d%n\", p.pid, p.cpuTimeMs, p.vmem, p.workingSet));\r\n        }\r\n    }\r\n    return ret.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getVirtualMemorySize(int olderThanAge)\n{\r\n    long total = UNAVAILABLE;\r\n    for (ProcessInfo p : processTree.values()) {\r\n        if (p != null) {\r\n            if (total == UNAVAILABLE) {\r\n                total = 0;\r\n            }\r\n            if (p.age > olderThanAge) {\r\n                total += p.vmem;\r\n            }\r\n        }\r\n    }\r\n    return total;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getRssMemorySize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getRssMemorySize(int olderThanAge)\n{\r\n    long total = UNAVAILABLE;\r\n    for (ProcessInfo p : processTree.values()) {\r\n        if (p != null) {\r\n            if (total == UNAVAILABLE) {\r\n                total = 0;\r\n            }\r\n            if (p.age > olderThanAge) {\r\n                total += p.workingSet;\r\n            }\r\n        }\r\n    }\r\n    return total;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCumulativeCpuTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCumulativeCpuTime()\n{\r\n    for (ProcessInfo p : processTree.values()) {\r\n        if (cpuTimeMs == UNAVAILABLE) {\r\n            cpuTimeMs = 0;\r\n        }\r\n        cpuTimeMs += p.cpuTimeMsDelta;\r\n    }\r\n    return cpuTimeMs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getTotalProcessMs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "BigInteger getTotalProcessMs()\n{\r\n    long totalMs = 0;\r\n    for (ProcessInfo p : processTree.values()) {\r\n        if (p != null) {\r\n            totalMs += p.cpuTimeMs;\r\n        }\r\n    }\r\n    return BigInteger.valueOf(totalMs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCpuUsagePercent",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "float getCpuUsagePercent()\n{\r\n    BigInteger processTotalMs = getTotalProcessMs();\r\n    cpuTimeTracker.updateElapsedJiffies(processTotalMs, clock.getTime());\r\n    return cpuTimeTracker.getCpuTrackerUsagePercent();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshSuperUserGroupsConfigurationRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getTrackingUri",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "URI getTrackingUri(ApplicationId id) throws URISyntaxException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationAttemptReportResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationAttemptReport != null) {\r\n        builder.setApplicationAttemptReport(convertToProtoFormat(this.applicationAttemptReport));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetApplicationAttemptReportResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptReport getApplicationAttemptReport()\n{\r\n    if (this.applicationAttemptReport != null) {\r\n        return this.applicationAttemptReport;\r\n    }\r\n    GetApplicationAttemptReportResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationAttemptReport()) {\r\n        return null;\r\n    }\r\n    this.applicationAttemptReport = convertFromProtoFormat(p.getApplicationAttemptReport());\r\n    return this.applicationAttemptReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationAttemptReport(ApplicationAttemptReport ApplicationAttemptReport)\n{\r\n    maybeInitBuilder();\r\n    if (ApplicationAttemptReport == null) {\r\n        builder.clearApplicationAttemptReport();\r\n    }\r\n    this.applicationAttemptReport = ApplicationAttemptReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptReportPBImpl convertFromProtoFormat(ApplicationAttemptReportProto p)\n{\r\n    return new ApplicationAttemptReportPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptReportProto convertToProtoFormat(ApplicationAttemptReport t)\n{\r\n    return ((ApplicationAttemptReportPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationReport> getApplications()\n{\r\n    initLocalApplicationsList();\r\n    return this.applicationsList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getCapacity()\n{\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasCapacity()) ? p.getCapacity() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getChildQueues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<QueueInfo> getChildQueues()\n{\r\n    initLocalChildQueuesList();\r\n    return this.childQueuesList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCurrentCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getCurrentCapacity()\n{\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasCurrentCapacity()) ? p.getCurrentCapacity() : 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getMaximumCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getMaximumCapacity()\n{\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasMaximumCapacity()) ? p.getMaximumCapacity() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getQueueName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getQueueName()\n{\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasQueueName()) ? p.getQueueName() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getQueuePath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getQueuePath()\n{\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasQueuePath()) ? p.getQueuePath() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getQueueState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "QueueState getQueueState()\n{\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasState()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setApplications(List<ApplicationReport> applications)\n{\r\n    if (applications == null) {\r\n        builder.clearApplications();\r\n    }\r\n    this.applicationsList = applications;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCapacity(float capacity)\n{\r\n    maybeInitBuilder();\r\n    builder.setCapacity(capacity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getWeight",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getWeight()\n{\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasWeight()) ? p.getWeight() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setWeight",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setWeight(float weight)\n{\r\n    maybeInitBuilder();\r\n    builder.setWeight(weight);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getMaxParallelApps",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getMaxParallelApps()\n{\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasMaxParallelApps()) ? p.getMaxParallelApps() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setMaxParallelApps",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMaxParallelApps(int weight)\n{\r\n    maybeInitBuilder();\r\n    builder.setMaxParallelApps(weight);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setChildQueues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setChildQueues(List<QueueInfo> childQueues)\n{\r\n    if (childQueues == null) {\r\n        builder.clearChildQueues();\r\n    }\r\n    this.childQueuesList = childQueues;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCurrentCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCurrentCapacity(float currentCapacity)\n{\r\n    maybeInitBuilder();\r\n    builder.setCurrentCapacity(currentCapacity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setMaximumCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMaximumCapacity(float maximumCapacity)\n{\r\n    maybeInitBuilder();\r\n    builder.setMaximumCapacity(maximumCapacity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setQueueName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueueName(String queueName)\n{\r\n    maybeInitBuilder();\r\n    if (queueName == null) {\r\n        builder.clearQueueName();\r\n        return;\r\n    }\r\n    builder.setQueueName(queueName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setQueuePath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueuePath(String queuePath)\n{\r\n    maybeInitBuilder();\r\n    if (queuePath == null) {\r\n        builder.clearQueuePath();\r\n        return;\r\n    }\r\n    builder.setQueuePath(queuePath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setQueueState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueueState(QueueState queueState)\n{\r\n    maybeInitBuilder();\r\n    if (queueState == null) {\r\n        builder.clearState();\r\n        return;\r\n    }\r\n    builder.setState(convertToProtoFormat(queueState));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "QueueInfoProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initLocalApplicationsList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalApplicationsList()\n{\r\n    if (this.applicationsList != null) {\r\n        return;\r\n    }\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ApplicationReportProto> list = p.getApplicationsList();\r\n    applicationsList = new ArrayList<ApplicationReport>();\r\n    for (ApplicationReportProto a : list) {\r\n        applicationsList.add(convertFromProtoFormat(a));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addApplicationsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addApplicationsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearApplications();\r\n    if (applicationsList == null)\r\n        return;\r\n    Iterable<ApplicationReportProto> iterable = new Iterable<ApplicationReportProto>() {\r\n\r\n        @Override\r\n        public Iterator<ApplicationReportProto> iterator() {\r\n            return new Iterator<ApplicationReportProto>() {\r\n\r\n                Iterator<ApplicationReport> iter = applicationsList.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ApplicationReportProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllApplications(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initLocalChildQueuesList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalChildQueuesList()\n{\r\n    if (this.childQueuesList != null) {\r\n        return;\r\n    }\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<QueueInfoProto> list = p.getChildQueuesList();\r\n    childQueuesList = new ArrayList<QueueInfo>();\r\n    for (QueueInfoProto a : list) {\r\n        childQueuesList.add(convertFromProtoFormat(a));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addChildQueuesInfoToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addChildQueuesInfoToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearChildQueues();\r\n    if (childQueuesList == null)\r\n        return;\r\n    Iterable<QueueInfoProto> iterable = new Iterable<QueueInfoProto>() {\r\n\r\n        @Override\r\n        public Iterator<QueueInfoProto> iterator() {\r\n            return new Iterator<QueueInfoProto>() {\r\n\r\n                Iterator<QueueInfo> iter = childQueuesList.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public QueueInfoProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllChildQueues(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addQueueConfigurations",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addQueueConfigurations()\n{\r\n    maybeInitBuilder();\r\n    builder.clearQueueConfigurationsMap();\r\n    if (queueConfigurations == null) {\r\n        return;\r\n    }\r\n    Iterable<? extends QueueConfigurationsMapProto> values = new Iterable<QueueConfigurationsMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<QueueConfigurationsMapProto> iterator() {\r\n            return new Iterator<QueueConfigurationsMapProto>() {\r\n\r\n                private Iterator<String> iterator = queueConfigurations.keySet().iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iterator.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public QueueConfigurationsMapProto next() {\r\n                    String key = iterator.next();\r\n                    return QueueConfigurationsMapProto.newBuilder().setPartitionName(key).setQueueConfigurations(convertToProtoFormat(queueConfigurations.get(key))).build();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    this.builder.addAllQueueConfigurationsMap(values);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.childQueuesList != null) {\r\n        addChildQueuesInfoToProto();\r\n    }\r\n    if (this.applicationsList != null) {\r\n        addApplicationsToProto();\r\n    }\r\n    if (this.accessibleNodeLabels != null) {\r\n        builder.clearAccessibleNodeLabels();\r\n        builder.addAllAccessibleNodeLabels(this.accessibleNodeLabels);\r\n    }\r\n    if (this.queueConfigurations != null) {\r\n        addQueueConfigurations();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = QueueInfoProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationReportPBImpl convertFromProtoFormat(ApplicationReportProto a)\n{\r\n    return new ApplicationReportPBImpl(a);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationReportProto convertToProtoFormat(ApplicationReport t)\n{\r\n    return ((ApplicationReportPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "QueueInfoPBImpl convertFromProtoFormat(QueueInfoProto a)\n{\r\n    return new QueueInfoPBImpl(a);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueInfoProto convertToProtoFormat(QueueInfo q)\n{\r\n    return ((QueueInfoPBImpl) q).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueState convertFromProtoFormat(QueueStateProto q)\n{\r\n    return ProtoUtils.convertFromProtoFormat(q);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueStateProto convertToProtoFormat(QueueState queueState)\n{\r\n    return ProtoUtils.convertToProtoFormat(queueState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "QueueConfigurationsPBImpl convertFromProtoFormat(QueueConfigurationsProto q)\n{\r\n    return new QueueConfigurationsPBImpl(q);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueConfigurationsProto convertToProtoFormat(QueueConfigurations q)\n{\r\n    return ((QueueConfigurationsPBImpl) q).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAccessibleNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAccessibleNodeLabels(Set<String> nodeLabels)\n{\r\n    maybeInitBuilder();\r\n    builder.clearAccessibleNodeLabels();\r\n    this.accessibleNodeLabels = nodeLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initNodeLabels()\n{\r\n    if (this.accessibleNodeLabels != null) {\r\n        return;\r\n    }\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.accessibleNodeLabels = new HashSet<String>();\r\n    this.accessibleNodeLabels.addAll(p.getAccessibleNodeLabelsList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAccessibleNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getAccessibleNodeLabels()\n{\r\n    initNodeLabels();\r\n    return this.accessibleNodeLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getDefaultNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDefaultNodeLabelExpression()\n{\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasDefaultNodeLabelExpression()) ? p.getDefaultNodeLabelExpression().trim() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setDefaultNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDefaultNodeLabelExpression(String defaultNodeLabelExpression)\n{\r\n    maybeInitBuilder();\r\n    if (defaultNodeLabelExpression == null) {\r\n        builder.clearDefaultNodeLabelExpression();\r\n        return;\r\n    }\r\n    builder.setDefaultNodeLabelExpression(defaultNodeLabelExpression);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "QueueStatistics convertFromProtoFormat(QueueStatisticsProto q)\n{\r\n    return new QueueStatisticsPBImpl(q);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueStatisticsProto convertToProtoFormat(QueueStatistics q)\n{\r\n    return ((QueueStatisticsPBImpl) q).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getQueueStatistics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "QueueStatistics getQueueStatistics()\n{\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasQueueStatistics()) ? convertFromProtoFormat(p.getQueueStatistics()) : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setQueueStatistics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueueStatistics(QueueStatistics queueStatistics)\n{\r\n    maybeInitBuilder();\r\n    if (queueStatistics == null) {\r\n        builder.clearQueueStatistics();\r\n        return;\r\n    }\r\n    builder.setQueueStatistics(convertToProtoFormat(queueStatistics));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPreemptionDisabled",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Boolean getPreemptionDisabled()\n{\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasPreemptionDisabled()) ? p.getPreemptionDisabled() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPreemptionDisabled",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPreemptionDisabled(boolean preemptionDisabled)\n{\r\n    maybeInitBuilder();\r\n    builder.setPreemptionDisabled(preemptionDisabled);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initQueueConfigurations",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initQueueConfigurations()\n{\r\n    if (queueConfigurations != null) {\r\n        return;\r\n    }\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<QueueConfigurationsMapProto> lists = p.getQueueConfigurationsMapList();\r\n    queueConfigurations = new HashMap<String, QueueConfigurations>(lists.size());\r\n    for (QueueConfigurationsMapProto queueConfigurationsProto : lists) {\r\n        queueConfigurations.put(queueConfigurationsProto.getPartitionName(), convertFromProtoFormat(queueConfigurationsProto.getQueueConfigurations()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getQueueConfigurations",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, QueueConfigurations> getQueueConfigurations()\n{\r\n    initQueueConfigurations();\r\n    return queueConfigurations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setQueueConfigurations",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueueConfigurations(Map<String, QueueConfigurations> queueConfigurations)\n{\r\n    if (queueConfigurations == null) {\r\n        return;\r\n    }\r\n    initQueueConfigurations();\r\n    this.queueConfigurations.clear();\r\n    this.queueConfigurations.putAll(queueConfigurations);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getIntraQueuePreemptionDisabled",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Boolean getIntraQueuePreemptionDisabled()\n{\r\n    QueueInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasIntraQueuePreemptionDisabled()) ? p.getIntraQueuePreemptionDisabled() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setIntraQueuePreemptionDisabled",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setIntraQueuePreemptionDisabled(boolean intraQueuePreemptionDisabled)\n{\r\n    maybeInitBuilder();\r\n    builder.setIntraQueuePreemptionDisabled(intraQueuePreemptionDisabled);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "compare",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int compare(Resource lhs, Resource rhs)\n{\r\n    boolean lhsGreater = false;\r\n    boolean rhsGreater = false;\r\n    int ret = 0;\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation lhsResourceInformation = lhs.getResourceInformation(i);\r\n        ResourceInformation rhsResourceInformation = rhs.getResourceInformation(i);\r\n        int diff = lhsResourceInformation.compareTo(rhsResourceInformation);\r\n        if (diff >= 1) {\r\n            lhsGreater = true;\r\n        } else if (diff <= -1) {\r\n            rhsGreater = true;\r\n        }\r\n    }\r\n    if (lhsGreater && rhsGreater) {\r\n        ret = 0;\r\n    } else if (lhsGreater) {\r\n        ret = 1;\r\n    } else if (rhsGreater) {\r\n        ret = -1;\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "compare",
  "errType" : [ "ArrayIndexOutOfBoundsException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "int compare(Resource clusterResource, Resource lhs, Resource rhs, boolean singleType)\n{\r\n    if (lhs.equals(rhs)) {\r\n        return 0;\r\n    }\r\n    if (isAllInvalidDivisor(clusterResource)) {\r\n        return this.compare(lhs, rhs);\r\n    }\r\n    ResourceInformation[] clusterRes = clusterResource.getResources();\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    double[] lhsShares = new double[maxLength];\r\n    double[] rhsShares = new double[maxLength];\r\n    double diff;\r\n    try {\r\n        if (singleType) {\r\n            double[] max = new double[2];\r\n            calculateShares(clusterRes, lhs, rhs, lhsShares, rhsShares, max);\r\n            diff = max[0] - max[1];\r\n        } else if (maxLength == 2) {\r\n            diff = calculateSharesForTwoMandatoryResources(clusterRes, lhs, rhs, lhsShares, rhsShares);\r\n        } else {\r\n            calculateShares(clusterRes, lhs, rhs, lhsShares, rhsShares);\r\n            Arrays.sort(lhsShares);\r\n            Arrays.sort(rhsShares);\r\n            diff = compareShares(lhsShares, rhsShares);\r\n        }\r\n    } catch (ArrayIndexOutOfBoundsException ex) {\r\n        StringWriter out = new StringWriter();\r\n        ex.printStackTrace(new PrintWriter(out));\r\n        LOG.error(\"A problem was encountered while calculating resource \" + \"availability that should not occur under normal circumstances. \" + \"Please report this error to the Hadoop community by opening a \" + \"JIRA ticket at http://issues.apache.org/jira and including the \" + \"following information:\\n* Exception encountered: \" + out + \"* \" + \"Cluster resources: \" + Arrays.toString(clusterRes) + \"\\n* \" + \"LHS resource: \" + Arrays.toString(lhs.getResources()) + \"\\n* \" + \"RHS resource: \" + Arrays.toString(rhs.getResources()));\r\n        LOG.error(\"The resource manager is in an inconsistent state. It is safe \" + \"for the resource manager to be restarted as the error encountered \" + \"should be transitive. If high availability is enabled, failing \" + \"over to a standby resource manager is also safe.\");\r\n        throw new YarnRuntimeException(\"A problem was encountered while \" + \"calculating resource availability that should not occur under \" + \"normal circumstances. Please see the log for more information.\", ex);\r\n    }\r\n    return (int) Math.signum(diff);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "calculateShares",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void calculateShares(ResourceInformation[] clusterRes, Resource first, Resource second, double[] firstShares, double[] secondShares)\n{\r\n    ResourceInformation[] firstRes = first.getResources();\r\n    ResourceInformation[] secondRes = second.getResources();\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        firstShares[i] = calculateShare(clusterRes[i], firstRes[i]);\r\n        secondShares[i] = calculateShare(clusterRes[i], secondRes[i]);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "calculateSharesForTwoMandatoryResources",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "int calculateSharesForTwoMandatoryResources(ResourceInformation[] clusterRes, Resource first, Resource second, double[] firstShares, double[] secondShares)\n{\r\n    ResourceInformation[] firstRes = first.getResources();\r\n    ResourceInformation[] secondRes = second.getResources();\r\n    firstShares[0] = calculateShare(clusterRes[0], firstRes[0]);\r\n    secondShares[0] = calculateShare(clusterRes[0], secondRes[0]);\r\n    firstShares[1] = calculateShare(clusterRes[1], firstRes[1]);\r\n    secondShares[1] = calculateShare(clusterRes[1], secondRes[1]);\r\n    int firstDom = 0;\r\n    int firstSub = 1;\r\n    if (firstShares[1] > firstShares[0]) {\r\n        firstDom = 1;\r\n        firstSub = 0;\r\n    }\r\n    int secondDom = 0;\r\n    int secondSub = 1;\r\n    if (secondShares[1] > secondShares[0]) {\r\n        secondDom = 1;\r\n        secondSub = 0;\r\n    }\r\n    if (firstShares[firstDom] > secondShares[secondDom]) {\r\n        return 1;\r\n    } else if (firstShares[firstDom] < secondShares[secondDom]) {\r\n        return -1;\r\n    } else if (firstShares[firstSub] > secondShares[secondSub]) {\r\n        return 1;\r\n    } else if (firstShares[firstSub] < secondShares[secondSub]) {\r\n        return -1;\r\n    } else {\r\n        return 0;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "calculateShares",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void calculateShares(ResourceInformation[] clusterRes, Resource first, Resource second, double[] firstShares, double[] secondShares, double[] max)\n{\r\n    ResourceInformation[] firstRes = first.getResources();\r\n    ResourceInformation[] secondRes = second.getResources();\r\n    max[0] = 0.0;\r\n    max[1] = 0.0;\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        firstShares[i] = calculateShare(clusterRes[i], firstRes[i]);\r\n        secondShares[i] = calculateShare(clusterRes[i], secondRes[i]);\r\n        if (firstShares[i] == Float.POSITIVE_INFINITY || secondShares[i] == Float.POSITIVE_INFINITY) {\r\n            continue;\r\n        }\r\n        if (firstShares[i] > max[0]) {\r\n            max[0] = firstShares[i];\r\n        }\r\n        if (secondShares[i] > max[1]) {\r\n            max[1] = secondShares[i];\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "calculateShare",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "double calculateShare(ResourceInformation clusterRes, ResourceInformation res)\n{\r\n    if (clusterRes.getValue() == 0) {\r\n        return Float.POSITIVE_INFINITY;\r\n    }\r\n    return (double) res.getValue() / clusterRes.getValue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "compareShares",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "double compareShares(double[] lhsShares, double[] rhsShares)\n{\r\n    double diff = 0.0;\r\n    for (int i = lhsShares.length - 1; i >= 0; i--) {\r\n        if (lhsShares[i] == Float.POSITIVE_INFINITY || rhsShares[i] == Float.POSITIVE_INFINITY) {\r\n            continue;\r\n        }\r\n        diff = lhsShares[i] - rhsShares[i];\r\n        if (diff != 0.0) {\r\n            break;\r\n        }\r\n    }\r\n    return diff;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "computeAvailableContainers",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "long computeAvailableContainers(Resource available, Resource required)\n{\r\n    long min = Long.MAX_VALUE;\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation availableResource = available.getResourceInformation(i);\r\n        ResourceInformation requiredResource = required.getResourceInformation(i);\r\n        if (requiredResource.getValue() != 0) {\r\n            long tmp = availableResource.getValue() / requiredResource.getValue();\r\n            min = min < tmp ? min : tmp;\r\n        }\r\n    }\r\n    return min > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) min;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divide",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "float divide(Resource clusterResource, Resource numerator, Resource denominator)\n{\r\n    int nKnownResourceTypes = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    ResourceInformation[] clusterRes = clusterResource.getResources();\r\n    double[] numeratorShares = new double[nKnownResourceTypes];\r\n    double[] denominatorShares = new double[nKnownResourceTypes];\r\n    double[] max = new double[2];\r\n    calculateShares(clusterRes, numerator, denominator, numeratorShares, denominatorShares, max);\r\n    return (float) (max[0] / max[1]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isInvalidDivisor",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isInvalidDivisor(Resource r)\n{\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        if (r.getResourceInformation(i).getValue() == 0L) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isAllInvalidDivisor",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isAllInvalidDivisor(Resource r)\n{\r\n    boolean flag = true;\r\n    for (ResourceInformation res : r.getResources()) {\r\n        if (flag == true && res.getValue() == 0L) {\r\n            flag = true;\r\n            continue;\r\n        }\r\n        flag = false;\r\n    }\r\n    return flag;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "ratio",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float ratio(Resource a, Resource b)\n{\r\n    return ratio(a, b, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "ratio",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "float ratio(Resource a, Resource b, boolean isDominantShare)\n{\r\n    float ratio = isDominantShare ? 0.0f : 1.0f;\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation aResourceInformation = a.getResourceInformation(i);\r\n        ResourceInformation bResourceInformation = b.getResourceInformation(i);\r\n        final float tmp = divideSafelyAsFloat(aResourceInformation.getValue(), bResourceInformation.getValue());\r\n        if (isDominantShare) {\r\n            ratio = Math.max(ratio, tmp);\r\n        } else {\r\n            ratio = Math.min(ratio, tmp);\r\n        }\r\n    }\r\n    return ratio;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "minRatio",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float minRatio(Resource a, Resource b)\n{\r\n    return ratio(a, b, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource divideAndCeil(Resource numerator, int denominator)\n{\r\n    return divideAndCeil(numerator, (long) denominator);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Resource divideAndCeil(Resource numerator, long denominator)\n{\r\n    Resource ret = Resource.newInstance(numerator);\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation resourceInformation = ret.getResourceInformation(i);\r\n        resourceInformation.setValue(divideAndCeil(resourceInformation.getValue(), denominator));\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Resource divideAndCeil(Resource numerator, float denominator)\n{\r\n    Resource ret = Resource.newInstance(numerator);\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation resourceInformation = ret.getResourceInformation(i);\r\n        resourceInformation.setValue(divideAndCeil(resourceInformation.getValue(), denominator));\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "normalize",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "Resource normalize(Resource r, Resource minimumResource, Resource maximumResource, Resource stepFactor)\n{\r\n    Resource ret = Resource.newInstance(r);\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation rResourceInformation = r.getResourceInformation(i);\r\n        ResourceInformation minimumResourceInformation = minimumResource.getResourceInformation(i);\r\n        ResourceInformation maximumResourceInformation = maximumResource.getResourceInformation(i);\r\n        ResourceInformation stepFactorResourceInformation = stepFactor.getResourceInformation(i);\r\n        ResourceInformation tmp = ret.getResourceInformation(i);\r\n        long rValue = rResourceInformation.getValue();\r\n        long value = Math.max(rValue, minimumResourceInformation.getValue());\r\n        if (stepFactorResourceInformation.getValue() != 0) {\r\n            value = roundUp(value, stepFactorResourceInformation.getValue());\r\n        }\r\n        tmp.setValue(Math.min(value, maximumResourceInformation.getValue()));\r\n        ret.setResourceInformation(i, tmp);\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "roundUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource roundUp(Resource r, Resource stepFactor)\n{\r\n    return this.rounding(r, stepFactor, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "roundDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource roundDown(Resource r, Resource stepFactor)\n{\r\n    return this.rounding(r, stepFactor, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "rounding",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "Resource rounding(Resource r, Resource stepFactor, boolean roundUp)\n{\r\n    Resource ret = Resource.newInstance(r);\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation rResourceInformation = r.getResourceInformation(i);\r\n        ResourceInformation stepFactorResourceInformation = stepFactor.getResourceInformation(i);\r\n        long rValue = rResourceInformation.getValue();\r\n        long stepFactorValue = stepFactorResourceInformation.getValue();\r\n        long value = rValue;\r\n        if (stepFactorValue != 0) {\r\n            value = roundUp ? roundUp(rValue, stepFactorValue) : roundDown(rValue, stepFactorValue);\r\n        }\r\n        ResourceInformation.copy(rResourceInformation, ret.getResourceInformation(i));\r\n        ret.getResourceInformation(i).setValue(value);\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalizeUp",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Resource multiplyAndNormalizeUp(Resource r, double[] by, Resource stepFactor)\n{\r\n    Resource ret = Resource.newInstance(r);\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation rResourceInformation = r.getResourceInformation(i);\r\n        ResourceInformation stepFactorResourceInformation = stepFactor.getResourceInformation(i);\r\n        long rValue = rResourceInformation.getValue();\r\n        long stepFactorValue = stepFactorResourceInformation.getValue();\r\n        ret.setResourceValue(i, ResourceCalculator.roundUp((long) Math.ceil(rValue * by[i]), stepFactorValue));\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalizeUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource multiplyAndNormalizeUp(Resource r, double by, Resource stepFactor)\n{\r\n    return this.multiplyAndNormalize(r, by, stepFactor, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalizeDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource multiplyAndNormalizeDown(Resource r, double by, Resource stepFactor)\n{\r\n    return this.multiplyAndNormalize(r, by, stepFactor, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalize",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Resource multiplyAndNormalize(Resource r, double by, Resource stepFactor, boolean roundUp)\n{\r\n    Resource ret = Resource.newInstance(r);\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation rResourceInformation = r.getResourceInformation(i);\r\n        ResourceInformation stepFactorResourceInformation = stepFactor.getResourceInformation(i);\r\n        ResourceInformation tmp = ret.getResourceInformation(i);\r\n        long rValue = rResourceInformation.getValue();\r\n        long stepFactorValue = stepFactorResourceInformation.getValue();\r\n        long value;\r\n        if (stepFactorValue != 0) {\r\n            value = roundUp ? roundUp((long) Math.ceil((float) (rValue * by)), stepFactorValue) : roundDown((long) (rValue * by), stepFactorValue);\r\n        } else {\r\n            value = roundUp ? (long) Math.ceil((float) (rValue * by)) : (long) (rValue * by);\r\n        }\r\n        tmp.setValue(value);\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "fitsIn",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean fitsIn(Resource smaller, Resource bigger)\n{\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation sResourceInformation = smaller.getResourceInformation(i);\r\n        ResourceInformation bResourceInformation = bigger.getResourceInformation(i);\r\n        if (sResourceInformation.getValue() > bResourceInformation.getValue()) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "normalizeDown",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Resource normalizeDown(Resource r, Resource stepFactor)\n{\r\n    Resource ret = Resource.newInstance(r);\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation rResourceInformation = r.getResourceInformation(i);\r\n        ResourceInformation stepFactorResourceInformation = stepFactor.getResourceInformation(i);\r\n        ResourceInformation tmp = ret.getResourceInformation(i);\r\n        long rValue = rResourceInformation.getValue();\r\n        long stepFactorValue = stepFactorResourceInformation.getValue();\r\n        long value = rValue;\r\n        if (stepFactorValue != 0) {\r\n            value = roundDown(rValue, stepFactorValue);\r\n        }\r\n        tmp.setValue(value);\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isAnyMajorResourceZeroOrNegative",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isAnyMajorResourceZeroOrNegative(Resource resource)\n{\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation resourceInformation = resource.getResourceInformation(i);\r\n        if (resourceInformation.getValue() <= 0L) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isAnyMajorResourceAboveZero",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isAnyMajorResourceAboveZero(Resource resource)\n{\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        ResourceInformation resourceInformation = resource.getResourceInformation(i);\r\n        if (resourceInformation.getValue() > 0) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "getInsufficientResourceNames",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<String> getInsufficientResourceNames(Resource required, Resource available)\n{\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    return IntStream.range(0, maxLength).filter(i -> required.getResourceInformation(i).getValue() > available.getResourceInformation(i).getValue()).mapToObj(i -> ResourceUtils.getResourceTypesArray()[i].getName()).collect(Collectors.toSet());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createAHSProxy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "T createAHSProxy(final Configuration conf, final Class<T> protocol, InetSocketAddress ahsAddress) throws IOException\n{\r\n    LOG.info(\"Connecting to Application History server at \" + ahsAddress);\r\n    return (T) getProxy(conf, protocol, ahsAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T getProxy(final Configuration conf, final Class<T> protocol, final InetSocketAddress rmAddress) throws IOException\n{\r\n    return UserGroupInformation.getCurrentUser().doAs(new PrivilegedAction<T>() {\r\n\r\n        @Override\r\n        public T run() {\r\n            return (T) YarnRPC.create(conf).getProxy(protocol, rmAddress, conf);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNewApplicationResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (applicationId != null) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n    if (maximumResourceCapability != null) {\r\n        builder.setMaximumCapability(convertToProtoFormat(this.maximumResourceCapability));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetNewApplicationResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    if (this.applicationId != null) {\r\n        return this.applicationId;\r\n    }\r\n    GetNewApplicationResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null)\r\n        builder.clearApplicationId();\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getMaximumResourceCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getMaximumResourceCapability()\n{\r\n    if (this.maximumResourceCapability != null) {\r\n        return this.maximumResourceCapability;\r\n    }\r\n    GetNewApplicationResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasMaximumCapability()) {\r\n        return null;\r\n    }\r\n    this.maximumResourceCapability = convertFromProtoFormat(p.getMaximumCapability());\r\n    return this.maximumResourceCapability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setMaximumResourceCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMaximumResourceCapability(Resource capability)\n{\r\n    maybeInitBuilder();\r\n    if (maximumResourceCapability == null) {\r\n        builder.clearMaximumCapability();\r\n    }\r\n    this.maximumResourceCapability = capability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource convertFromProtoFormat(ResourceProto resource)\n{\r\n    return new ResourcePBImpl(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource resource)\n{\r\n    return ProtoUtils.convertToProtoFormat(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void render(Block html)\n{\r\n    TABLE<DIV<Hamlet>> table = html.div(_INFO_WRAP).table(_INFO).tr().th().$class(C_TH).$colspan(2).__(info.about()).__().__();\r\n    int i = 0;\r\n    for (ResponseInfo.Item item : info) {\r\n        TR<TABLE<DIV<Hamlet>>> tr = table.tr((++i % 2 != 0) ? _ODD : _EVEN).th(item.key);\r\n        String value = String.valueOf(item.value);\r\n        if (item.url == null) {\r\n            if (!item.isRaw) {\r\n                TD<TR<TABLE<DIV<Hamlet>>>> td = tr.td();\r\n                if (value.lastIndexOf('\\n') > 0) {\r\n                    String[] lines = value.split(\"\\n\");\r\n                    DIV<TD<TR<TABLE<DIV<Hamlet>>>>> singleLineDiv;\r\n                    for (String line : lines) {\r\n                        singleLineDiv = td.div();\r\n                        singleLineDiv.__(line);\r\n                        singleLineDiv.__();\r\n                    }\r\n                } else {\r\n                    td.__(value);\r\n                }\r\n                td.__();\r\n            } else {\r\n                tr.td()._r(value).__();\r\n            }\r\n        } else {\r\n            tr.td().a(url(item.url), value).__();\r\n        }\r\n        tr.__();\r\n    }\r\n    table.__().__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnProtos.RejectedSchedulingRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.request != null) {\r\n        builder.setRequest(convertToProtoFormat(this.request));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = YarnProtos.RejectedSchedulingRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getReason",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RejectionReason getReason()\n{\r\n    YarnProtos.RejectedSchedulingRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasReason()) {\r\n        return null;\r\n    }\r\n    return ProtoUtils.convertFromProtoFormat(p.getReason());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setReason",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setReason(RejectionReason reason)\n{\r\n    maybeInitBuilder();\r\n    if (reason == null) {\r\n        builder.clearReason();\r\n        return;\r\n    }\r\n    builder.setReason(ProtoUtils.convertToProtoFormat(reason));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SchedulingRequest getRequest()\n{\r\n    YarnProtos.RejectedSchedulingRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.request != null) {\r\n        return this.request;\r\n    }\r\n    if (!p.hasRequest()) {\r\n        return null;\r\n    }\r\n    this.request = convertFromProtoFormat(p.getRequest());\r\n    return this.request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRequest(SchedulingRequest req)\n{\r\n    maybeInitBuilder();\r\n    if (null == req) {\r\n        builder.clearRequest();\r\n    }\r\n    this.request = req;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnProtos.SchedulingRequestProto convertToProtoFormat(SchedulingRequest r)\n{\r\n    return ((SchedulingRequestPBImpl) r).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SchedulingRequestPBImpl convertFromProtoFormat(YarnProtos.SchedulingRequestProto p)\n{\r\n    return new SchedulingRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAllocatedResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getAllocatedResource()\n{\r\n    if (this.resource != null) {\r\n        return this.resource;\r\n    }\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasResource()) {\r\n        return null;\r\n    }\r\n    this.resource = convertFromProtoFormat(p.getResource());\r\n    return this.resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAssignedNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeId getAssignedNode()\n{\r\n    if (this.nodeId != null) {\r\n        return this.nodeId;\r\n    }\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeId()) {\r\n        return null;\r\n    }\r\n    this.nodeId = convertFromProtoFormat(p.getNodeId());\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    if (this.containerId != null) {\r\n        return this.containerId;\r\n    }\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerId()) {\r\n        return null;\r\n    }\r\n    this.containerId = convertFromProtoFormat(p.getContainerId());\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDiagnosticsInfo()\n{\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDiagnosticsInfo()) {\r\n        return null;\r\n    }\r\n    return (p.getDiagnosticsInfo());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainerState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerState getContainerState()\n{\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerState()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getContainerState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getFinishTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFinishTime()\n{\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getFinishTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getLogUrl",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getLogUrl()\n{\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasLogUrl()) {\r\n        return null;\r\n    }\r\n    return (p.getLogUrl());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    if (this.priority != null) {\r\n        return this.priority;\r\n    }\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasPriority()) {\r\n        return null;\r\n    }\r\n    this.priority = convertFromProtoFormat(p.getPriority());\r\n    return this.priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCreationTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCreationTime()\n{\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getCreationTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAllocatedResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocatedResource(Resource resource)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null)\r\n        builder.clearResource();\r\n    this.resource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAssignedNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAssignedNode(NodeId nodeId)\n{\r\n    maybeInitBuilder();\r\n    if (nodeId == null)\r\n        builder.clearNodeId();\r\n    this.nodeId = nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)\n{\r\n    maybeInitBuilder();\r\n    if (containerId == null)\r\n        builder.clearContainerId();\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDiagnosticsInfo(String diagnosticsInfo)\n{\r\n    maybeInitBuilder();\r\n    if (diagnosticsInfo == null) {\r\n        builder.clearDiagnosticsInfo();\r\n        return;\r\n    }\r\n    builder.setDiagnosticsInfo(diagnosticsInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainerState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setContainerState(ContainerState containerState)\n{\r\n    maybeInitBuilder();\r\n    if (containerState == null) {\r\n        builder.clearContainerState();\r\n        return;\r\n    }\r\n    builder.setContainerState(convertToProtoFormat(containerState));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getContainerExitStatus()\n{\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getContainerExitStatus();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerExitStatus(int containerExitStatus)\n{\r\n    maybeInitBuilder();\r\n    builder.setContainerExitStatus(containerExitStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getExposedPorts()\n{\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getExposedPorts();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setExposedPorts(Map<String, List<Map<String, String>>> ports)\n{\r\n    maybeInitBuilder();\r\n    if (ports == null) {\r\n        builder.clearExposedPorts();\r\n        return;\r\n    }\r\n    Gson gson = new Gson();\r\n    String strPorts = gson.toJson(ports);\r\n    builder.setExposedPorts(strPorts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setFinishTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFinishTime(long finishTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setFinishTime(finishTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setLogUrl",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setLogUrl(String logUrl)\n{\r\n    maybeInitBuilder();\r\n    if (logUrl == null) {\r\n        builder.clearLogUrl();\r\n        return;\r\n    }\r\n    builder.setLogUrl(logUrl);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPriority(Priority priority)\n{\r\n    maybeInitBuilder();\r\n    if (priority == null) {\r\n        builder.clearPriority();\r\n    }\r\n    this.priority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCreationTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCreationTime(long creationTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setCreationTime(creationTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerReportProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return this.getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerId != null && !((ContainerIdPBImpl) containerId).getProto().equals(builder.getContainerId())) {\r\n        builder.setContainerId(convertToProtoFormat(this.containerId));\r\n    }\r\n    if (this.nodeId != null && !((NodeIdPBImpl) nodeId).getProto().equals(builder.getNodeId())) {\r\n        builder.setNodeId(convertToProtoFormat(this.nodeId));\r\n    }\r\n    if (this.resource != null) {\r\n        builder.setResource(convertToProtoFormat(this.resource));\r\n    }\r\n    if (this.priority != null && !((PriorityPBImpl) this.priority).getProto().equals(builder.getPriority())) {\r\n        builder.setPriority(convertToProtoFormat(this.priority));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ContainerReportProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeIdPBImpl convertFromProtoFormat(NodeIdProto p)\n{\r\n    return new NodeIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId t)\n{\r\n    return ((NodeIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource t)\n{\r\n    return ProtoUtils.convertToProtoFormat(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PriorityPBImpl convertFromProtoFormat(PriorityProto p)\n{\r\n    return new PriorityPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PriorityProto convertToProtoFormat(Priority p)\n{\r\n    return ((PriorityPBImpl) p).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerStateProto convertToProtoFormat(ContainerState containerState)\n{\r\n    return ProtoUtils.convertToProtoFormat(containerState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerState convertFromProtoFormat(ContainerStateProto containerState)\n{\r\n    return ProtoUtils.convertFromProtoFormat(containerState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNodeHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getNodeHttpAddress()\n{\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeHttpAddress()) {\r\n        return null;\r\n    }\r\n    return (p.getNodeHttpAddress());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNodeHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeHttpAddress(String nodeHttpAddress)\n{\r\n    maybeInitBuilder();\r\n    if (nodeHttpAddress == null) {\r\n        builder.clearNodeHttpAddress();\r\n        return;\r\n    }\r\n    builder.setNodeHttpAddress(nodeHttpAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExecutionType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ExecutionType getExecutionType()\n{\r\n    ContainerReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasExecutionType()) {\r\n        return ExecutionType.GUARANTEED;\r\n    }\r\n    return ProtoUtils.convertFromProtoFormat(p.getExecutionType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExecutionType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setExecutionType(ExecutionType executionType)\n{\r\n    maybeInitBuilder();\r\n    if (executionType == null) {\r\n        builder.clearExecutionType();\r\n        return;\r\n    }\r\n    builder.setExecutionType(ProtoUtils.convertToProtoFormat(executionType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "getParent",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Graph getParent()\n{\r\n    return parent;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "newNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Node newNode(String id)\n{\r\n    Node ret = new Node(id);\r\n    nodes.add(ret);\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "getNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Node getNode(String id)\n{\r\n    for (Node node : nodes) {\r\n        if (node.id.equals(id)) {\r\n            return node;\r\n        }\r\n    }\r\n    return newNode(id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "newSubGraph",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Graph newSubGraph(String name)\n{\r\n    Graph ret = new Graph(name, this);\r\n    subgraphs.add(ret);\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "addSubGraph",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addSubGraph(Graph graph)\n{\r\n    subgraphs.add(graph);\r\n    graph.parent = this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "wrapSafeString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String wrapSafeString(String label)\n{\r\n    if (label.indexOf(',') >= 0) {\r\n        if (label.length() > 14) {\r\n            label = label.replaceAll(\",\", \",\\n\");\r\n        }\r\n    }\r\n    label = \"\\\"\" + StringEscapeUtils.escapeJava(label) + \"\\\"\";\r\n    return label;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "generateGraphViz",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "String generateGraphViz(String indent)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    if (this.parent == null) {\r\n        sb.append(\"digraph \" + name + \" {\\n\").append(String.format(\"graph [ label=%s, fontsize=24, fontname=Helvetica];%n\", wrapSafeString(name))).append(\"node [fontsize=12, fontname=Helvetica];\\n\").append(\"edge [fontsize=9, fontcolor=blue, fontname=Arial];\\n\");\r\n    } else {\r\n        sb.append(\"subgraph cluster_\" + name + \" {\\nlabel=\\\"\" + name + \"\\\"\\n\");\r\n    }\r\n    for (Graph g : subgraphs) {\r\n        String ginfo = g.generateGraphViz(indent + \"  \");\r\n        sb.append(ginfo).append(\"\\n\");\r\n    }\r\n    for (Node n : nodes) {\r\n        sb.append(String.format(\"%s%s [ label = %s ];%n\", indent, wrapSafeString(n.getUniqueId()), n.id));\r\n        List<Edge> combinedOuts = combineEdges(n.outs);\r\n        for (Edge e : combinedOuts) {\r\n            sb.append(String.format(\"%s%s -> %s [ label = %s ];%n\", indent, wrapSafeString(e.from.getUniqueId()), wrapSafeString(e.to.getUniqueId()), wrapSafeString(e.label)));\r\n        }\r\n    }\r\n    sb.append(\"}\\n\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "generateGraphViz",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String generateGraphViz()\n{\r\n    return generateGraphViz(\"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "save",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void save(String filepath) throws IOException\n{\r\n    try (OutputStreamWriter fout = new OutputStreamWriter(new FileOutputStream(filepath), Charset.forName(\"UTF-8\"))) {\r\n        fout.write(generateGraphViz());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "combineEdges",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<Edge> combineEdges(List<Edge> edges)\n{\r\n    List<Edge> ret = new ArrayList<Edge>();\r\n    for (Edge edge : edges) {\r\n        boolean found = false;\r\n        for (int i = 0; i < ret.size(); i++) {\r\n            Edge current = ret.get(i);\r\n            if (edge.sameAs(current)) {\r\n                ret.set(i, current.combine(edge));\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            ret.add(edge);\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void render(Block html)\n{\r\n    html.p().__(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit.\", \"Vivamus eu dui in ipsum tincidunt egestas ac sed nibh.\", \"Praesent quis nisl lorem, nec interdum urna.\", \"Duis sagittis dignissim purus sed sollicitudin.\", \"Morbi quis diam eu enim semper suscipit.\", \"Nullam pretium faucibus sapien placerat tincidunt.\", \"Donec eget lorem at quam fermentum vulputate a ac purus.\", \"Cras ac dui felis, in pulvinar est.\", \"Praesent tempor est sed neque pulvinar dictum.\", \"Nullam magna augue, egestas luctus sollicitudin sed,\", \"venenatis nec turpis.\", \"Ut ante enim, congue sed laoreet et, accumsan id metus.\", \"Mauris tincidunt imperdiet est, sed porta arcu vehicula et.\", \"Etiam in nisi nunc.\", \"Phasellus vehicula scelerisque quam, ac dignissim felis euismod a.\", \"Proin eu ante nisl, vel porttitor eros.\", \"Aliquam gravida luctus augue, at scelerisque enim consectetur vel.\", \"Donec interdum tempor nisl, quis laoreet enim venenatis eu.\", \"Quisque elit elit, vulputate eget porta vel, laoreet ac lacus.\").__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetQueueInfoResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "QueueInfo getQueueInfo()\n{\r\n    if (this.queueInfo != null) {\r\n        return this.queueInfo;\r\n    }\r\n    GetQueueInfoResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasQueueInfo()) {\r\n        return null;\r\n    }\r\n    this.queueInfo = convertFromProtoFormat(p.getQueueInfo());\r\n    return this.queueInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setQueueInfo(QueueInfo queueInfo)\n{\r\n    maybeInitBuilder();\r\n    if (queueInfo == null) {\r\n        builder.clearQueueInfo();\r\n    }\r\n    this.queueInfo = queueInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.queueInfo != null) {\r\n        builder.setQueueInfo(convertToProtoFormat(this.queueInfo));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetQueueInfoResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "QueueInfo convertFromProtoFormat(QueueInfoProto queueInfo)\n{\r\n    return new QueueInfoPBImpl(queueInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueInfoProto convertToProtoFormat(QueueInfo queueInfo)\n{\r\n    return ((QueueInfoPBImpl) queueInfo).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "refreshQueues",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshQueuesResponseProto refreshQueues(RpcController controller, RefreshQueuesRequestProto proto) throws ServiceException\n{\r\n    RefreshQueuesRequestPBImpl request = new RefreshQueuesRequestPBImpl(proto);\r\n    try {\r\n        RefreshQueuesResponse response = real.refreshQueues(request);\r\n        return ((RefreshQueuesResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "refreshAdminAcls",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshAdminAclsResponseProto refreshAdminAcls(RpcController controller, RefreshAdminAclsRequestProto proto) throws ServiceException\n{\r\n    RefreshAdminAclsRequestPBImpl request = new RefreshAdminAclsRequestPBImpl(proto);\r\n    try {\r\n        RefreshAdminAclsResponse response = real.refreshAdminAcls(request);\r\n        return ((RefreshAdminAclsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "refreshNodes",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshNodesResponseProto refreshNodes(RpcController controller, RefreshNodesRequestProto proto) throws ServiceException\n{\r\n    RefreshNodesRequestPBImpl request = new RefreshNodesRequestPBImpl(proto);\r\n    try {\r\n        RefreshNodesResponse response = real.refreshNodes(request);\r\n        return ((RefreshNodesResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "refreshSuperUserGroupsConfiguration",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshSuperUserGroupsConfigurationResponseProto refreshSuperUserGroupsConfiguration(RpcController controller, RefreshSuperUserGroupsConfigurationRequestProto proto) throws ServiceException\n{\r\n    RefreshSuperUserGroupsConfigurationRequestPBImpl request = new RefreshSuperUserGroupsConfigurationRequestPBImpl(proto);\r\n    try {\r\n        RefreshSuperUserGroupsConfigurationResponse response = real.refreshSuperUserGroupsConfiguration(request);\r\n        return ((RefreshSuperUserGroupsConfigurationResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "refreshUserToGroupsMappings",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshUserToGroupsMappingsResponseProto refreshUserToGroupsMappings(RpcController controller, RefreshUserToGroupsMappingsRequestProto proto) throws ServiceException\n{\r\n    RefreshUserToGroupsMappingsRequestPBImpl request = new RefreshUserToGroupsMappingsRequestPBImpl(proto);\r\n    try {\r\n        RefreshUserToGroupsMappingsResponse response = real.refreshUserToGroupsMappings(request);\r\n        return ((RefreshUserToGroupsMappingsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "refreshServiceAcls",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshServiceAclsResponseProto refreshServiceAcls(RpcController controller, RefreshServiceAclsRequestProto proto) throws ServiceException\n{\r\n    RefreshServiceAclsRequestPBImpl request = new RefreshServiceAclsRequestPBImpl(proto);\r\n    try {\r\n        RefreshServiceAclsResponse response = real.refreshServiceAcls(request);\r\n        return ((RefreshServiceAclsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "getGroupsForUser",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "GetGroupsForUserResponseProto getGroupsForUser(RpcController controller, GetGroupsForUserRequestProto request) throws ServiceException\n{\r\n    String user = request.getUser();\r\n    try {\r\n        String[] groups = real.getGroupsForUser(user);\r\n        GetGroupsForUserResponseProto.Builder responseBuilder = GetGroupsForUserResponseProto.newBuilder();\r\n        for (String group : groups) {\r\n            responseBuilder.addGroups(group);\r\n        }\r\n        return responseBuilder.build();\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "updateNodeResource",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateNodeResourceResponseProto updateNodeResource(RpcController controller, UpdateNodeResourceRequestProto proto) throws ServiceException\n{\r\n    UpdateNodeResourceRequestPBImpl request = new UpdateNodeResourceRequestPBImpl(proto);\r\n    try {\r\n        UpdateNodeResourceResponse response = real.updateNodeResource(request);\r\n        return ((UpdateNodeResourceResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "refreshNodesResources",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshNodesResourcesResponseProto refreshNodesResources(RpcController controller, RefreshNodesResourcesRequestProto proto) throws ServiceException\n{\r\n    RefreshNodesResourcesRequestPBImpl request = new RefreshNodesResourcesRequestPBImpl(proto);\r\n    try {\r\n        RefreshNodesResourcesResponse response = real.refreshNodesResources(request);\r\n        return ((RefreshNodesResourcesResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "addToClusterNodeLabels",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AddToClusterNodeLabelsResponseProto addToClusterNodeLabels(RpcController controller, AddToClusterNodeLabelsRequestProto proto) throws ServiceException\n{\r\n    AddToClusterNodeLabelsRequestPBImpl request = new AddToClusterNodeLabelsRequestPBImpl(proto);\r\n    try {\r\n        AddToClusterNodeLabelsResponse response = real.addToClusterNodeLabels(request);\r\n        return ((AddToClusterNodeLabelsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "removeFromClusterNodeLabels",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RemoveFromClusterNodeLabelsResponseProto removeFromClusterNodeLabels(RpcController controller, RemoveFromClusterNodeLabelsRequestProto proto) throws ServiceException\n{\r\n    RemoveFromClusterNodeLabelsRequestPBImpl request = new RemoveFromClusterNodeLabelsRequestPBImpl(proto);\r\n    try {\r\n        RemoveFromClusterNodeLabelsResponse response = real.removeFromClusterNodeLabels(request);\r\n        return ((RemoveFromClusterNodeLabelsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "replaceLabelsOnNodes",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReplaceLabelsOnNodeResponseProto replaceLabelsOnNodes(RpcController controller, ReplaceLabelsOnNodeRequestProto proto) throws ServiceException\n{\r\n    ReplaceLabelsOnNodeRequestPBImpl request = new ReplaceLabelsOnNodeRequestPBImpl(proto);\r\n    try {\r\n        ReplaceLabelsOnNodeResponse response = real.replaceLabelsOnNode(request);\r\n        return ((ReplaceLabelsOnNodeResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "checkForDecommissioningNodes",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CheckForDecommissioningNodesResponseProto checkForDecommissioningNodes(RpcController controller, CheckForDecommissioningNodesRequestProto proto) throws ServiceException\n{\r\n    CheckForDecommissioningNodesRequest request = new CheckForDecommissioningNodesRequestPBImpl(proto);\r\n    try {\r\n        CheckForDecommissioningNodesResponse response = real.checkForDecommissioningNodes(request);\r\n        return ((CheckForDecommissioningNodesResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "refreshClusterMaxPriority",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshClusterMaxPriorityResponseProto refreshClusterMaxPriority(RpcController arg0, RefreshClusterMaxPriorityRequestProto proto) throws ServiceException\n{\r\n    RefreshClusterMaxPriorityRequest request = new RefreshClusterMaxPriorityRequestPBImpl(proto);\r\n    try {\r\n        RefreshClusterMaxPriorityResponse response = real.refreshClusterMaxPriority(request);\r\n        return ((RefreshClusterMaxPriorityResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "mapAttributesToNodes",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodesToAttributesMappingResponseProto mapAttributesToNodes(RpcController controller, NodesToAttributesMappingRequestProto proto) throws ServiceException\n{\r\n    NodesToAttributesMappingRequest request = new NodesToAttributesMappingRequestPBImpl(proto);\r\n    try {\r\n        NodesToAttributesMappingResponse response = real.mapAttributesToNodes(request);\r\n        return ((NodesToAttributesMappingResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Token getDelegationToken()\n{\r\n    RenewDelegationTokenRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.token != null) {\r\n        return this.token;\r\n    }\r\n    this.token = convertFromProtoFormat(p.getToken());\r\n    return this.token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setDelegationToken(Token token)\n{\r\n    maybeInitBuilder();\r\n    if (token == null)\r\n        builder.clearToken();\r\n    this.token = token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RenewDelegationTokenRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (token != null) {\r\n        builder.setToken(convertToProtoFormat(this.token));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = RenewDelegationTokenRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenPBImpl convertFromProtoFormat(TokenProto p)\n{\r\n    return new TokenPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token t)\n{\r\n    return ((TokenPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "StopContainersResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = StopContainersResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.succeededRequests != null) {\r\n        addSucceededRequestsToProto();\r\n    }\r\n    if (this.failedRequests != null) {\r\n        addFailedRequestsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addSucceededRequestsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addSucceededRequestsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearSucceededRequests();\r\n    if (this.succeededRequests == null) {\r\n        return;\r\n    }\r\n    Iterable<ContainerIdProto> iterable = new Iterable<ContainerIdProto>() {\r\n\r\n        @Override\r\n        public Iterator<ContainerIdProto> iterator() {\r\n            return new Iterator<ContainerIdProto>() {\r\n\r\n                Iterator<ContainerId> iter = succeededRequests.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ContainerIdProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllSucceededRequests(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addFailedRequestsToProto",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void addFailedRequestsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearFailedRequests();\r\n    if (this.failedRequests == null)\r\n        return;\r\n    List<ContainerExceptionMapProto> protoList = new ArrayList<ContainerExceptionMapProto>();\r\n    for (Map.Entry<ContainerId, SerializedException> entry : this.failedRequests.entrySet()) {\r\n        protoList.add(ContainerExceptionMapProto.newBuilder().setContainerId(convertToProtoFormat(entry.getKey())).setException(convertToProtoFormat(entry.getValue())).build());\r\n    }\r\n    builder.addAllFailedRequests(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initSucceededRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initSucceededRequests()\n{\r\n    if (this.succeededRequests != null)\r\n        return;\r\n    StopContainersResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerIdProto> list = p.getSucceededRequestsList();\r\n    this.succeededRequests = new ArrayList<ContainerId>();\r\n    for (ContainerIdProto c : list) {\r\n        this.succeededRequests.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initFailedRequests()\n{\r\n    if (this.failedRequests != null) {\r\n        return;\r\n    }\r\n    StopContainersResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerExceptionMapProto> protoList = p.getFailedRequestsList();\r\n    this.failedRequests = new HashMap<ContainerId, SerializedException>();\r\n    for (ContainerExceptionMapProto ce : protoList) {\r\n        this.failedRequests.put(convertFromProtoFormat(ce.getContainerId()), convertFromProtoFormat(ce.getException()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getSuccessfullyStoppedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerId> getSuccessfullyStoppedContainers()\n{\r\n    initSucceededRequests();\r\n    return this.succeededRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setSuccessfullyStoppedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setSuccessfullyStoppedContainers(List<ContainerId> succeededRequests)\n{\r\n    maybeInitBuilder();\r\n    if (succeededRequests == null) {\r\n        builder.clearSucceededRequests();\r\n    }\r\n    this.succeededRequests = succeededRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ContainerId, SerializedException> getFailedRequests()\n{\r\n    initFailedRequests();\r\n    return this.failedRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFailedRequests(Map<ContainerId, SerializedException> failedRequests)\n{\r\n    maybeInitBuilder();\r\n    if (failedRequests == null)\r\n        builder.clearFailedRequests();\r\n    this.failedRequests = failedRequests;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SerializedExceptionPBImpl convertFromProtoFormat(SerializedExceptionProto p)\n{\r\n    return new SerializedExceptionPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SerializedExceptionProto convertToProtoFormat(SerializedException t)\n{\r\n    return ((SerializedExceptionPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\event",
  "methodName" : "getNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<NodeId, Set<String>> getNodeToLabels()\n{\r\n    return nodeToLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationReportResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationReport != null) {\r\n        builder.setApplicationReport(convertToProtoFormat(this.applicationReport));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetApplicationReportResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationReport getApplicationReport()\n{\r\n    GetApplicationReportResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.applicationReport != null) {\r\n        return this.applicationReport;\r\n    }\r\n    if (!p.hasApplicationReport()) {\r\n        return null;\r\n    }\r\n    this.applicationReport = convertFromProtoFormat(p.getApplicationReport());\r\n    return this.applicationReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationReport(ApplicationReport applicationMaster)\n{\r\n    maybeInitBuilder();\r\n    if (applicationMaster == null)\r\n        builder.clearApplicationReport();\r\n    this.applicationReport = applicationMaster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationReportPBImpl convertFromProtoFormat(ApplicationReportProto p)\n{\r\n    return new ApplicationReportPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationReportProto convertToProtoFormat(ApplicationReport t)\n{\r\n    return ((ApplicationReportPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getKind",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Text getKind()\n{\r\n    return KIND_NAME;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setHttpServer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setHttpServer(HttpServer2 server)\n{\r\n    httpServer = checkNotNull(server, \"http server\");\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "httpServer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "HttpServer2 httpServer()\n{\r\n    return httpServer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "getListenerAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "InetSocketAddress getListenerAddress()\n{\r\n    return checkNotNull(httpServer, \"httpServer\").getConnectorAddress(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "port",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int port()\n{\r\n    InetSocketAddress addr = checkNotNull(httpServer, \"httpServer\").getConnectorAddress(0);\r\n    return addr == null ? -1 : addr.getPort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "stop",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void stop()\n{\r\n    try {\r\n        checkNotNull(httpServer, \"httpServer\").stop();\r\n        checkNotNull(guiceFilter, \"guiceFilter\").destroy();\r\n    } catch (Exception e) {\r\n        throw new WebAppException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "joinThread",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void joinThread()\n{\r\n    try {\r\n        checkNotNull(httpServer, \"httpServer\").join();\r\n    } catch (InterruptedException e) {\r\n        LOG.info(\"interrupted\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    this.conf = conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "conf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration conf()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "router",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Router router()\n{\r\n    return router;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "webApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WebApp webApp()\n{\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "name",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String name()\n{\r\n    return this.name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "wsName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String wsName()\n{\r\n    return this.wsName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "addServePathSpec",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addServePathSpec(String path)\n{\r\n    this.servePathSpecs.add(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "getServePathSpecs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] getServePathSpecs()\n{\r\n    return this.servePathSpecs.toArray(new String[this.servePathSpecs.size()]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setRedirectPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRedirectPath(String path)\n{\r\n    this.redirectPath = path;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setWebServices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setWebServices(String name)\n{\r\n    this.wsName = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "getRedirectPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRedirectPath()\n{\r\n    return this.redirectPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setHostClass",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setHostClass(Class<?> cls)\n{\r\n    router.setHostClass(cls);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setGuiceFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setGuiceFilter(GuiceFilter instance)\n{\r\n    guiceFilter = instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "configureServlets",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void configureServlets()\n{\r\n    setup();\r\n    serve(\"/\", \"/__stop\", RobotsTextPage.ROBOTS_TXT_PATH).with(Dispatcher.class);\r\n    for (String path : this.servePathSpecs) {\r\n        serve(path).with(Dispatcher.class);\r\n    }\r\n    configureWebAppServlets();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "configureWebAppServlets",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void configureWebAppServlets()\n{\r\n    if (this.wsName != null) {\r\n        String regex = \"(?!/\" + this.wsName + \")\";\r\n        serveRegex(regex).with(DefaultWrapperServlet.class);\r\n        Map<String, String> params = new HashMap<String, String>();\r\n        params.put(ResourceConfig.FEATURE_IMPLICIT_VIEWABLES, \"true\");\r\n        params.put(ServletContainer.FEATURE_FILTER_FORWARD_ON_404, \"true\");\r\n        params.put(FeaturesAndProperties.FEATURE_XMLROOTELEMENT_PROCESSING, \"true\");\r\n        params.put(ResourceConfig.PROPERTY_CONTAINER_REQUEST_FILTERS, GZIPContentEncodingFilter.class.getName());\r\n        params.put(ResourceConfig.PROPERTY_CONTAINER_RESPONSE_FILTERS, GZIPContentEncodingFilter.class.getName());\r\n        filter(\"/*\").through(getWebAppFilterClass(), params);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "getWebAppFilterClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<? extends GuiceContainer> getWebAppFilterClass()\n{\r\n    return GuiceContainer.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "route",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void route(HTTP method, String pathSpec, Class<? extends Controller> cls, String action)\n{\r\n    List<String> res = parseRoute(pathSpec);\r\n    router.add(method, res.get(R_PATH), cls, action, res.subList(R_PARAMS, res.size()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "routeWithoutDefaultView",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void routeWithoutDefaultView(String pathSpec, Class<? extends Controller> cls, String action)\n{\r\n    List<String> res = parseRoute(pathSpec);\r\n    router.addWithoutDefaultView(HTTP.GET, res.get(R_PATH), cls, action, res.subList(R_PARAMS, res.size()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "route",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void route(String pathSpec, Class<? extends Controller> cls, String action)\n{\r\n    route(HTTP.GET, pathSpec, cls, action);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "route",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void route(String pathSpec, Class<? extends Controller> cls)\n{\r\n    List<String> res = parseRoute(pathSpec);\r\n    router.add(HTTP.GET, res.get(R_PATH), cls, res.get(R_ACTION), res.subList(R_PARAMS, res.size()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "parseRoute",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "List<String> parseRoute(String pathSpec)\n{\r\n    List<String> result = Lists.newArrayList();\r\n    result.add(getPrefix(checkNotNull(pathSpec, \"pathSpec\")));\r\n    Iterable<String> parts = pathSplitter.split(pathSpec);\r\n    String controller = null, action = null;\r\n    for (String s : parts) {\r\n        if (controller == null) {\r\n            if (s.charAt(0) == ':') {\r\n                controller = \"default\";\r\n                result.add(controller);\r\n                action = \"index\";\r\n                result.add(action);\r\n            } else {\r\n                controller = s;\r\n            }\r\n        } else if (action == null) {\r\n            if (s.charAt(0) == ':') {\r\n                action = \"index\";\r\n                result.add(action);\r\n            } else {\r\n                action = s;\r\n            }\r\n        }\r\n        result.add(s);\r\n    }\r\n    if (controller == null) {\r\n        result.add(\"default\");\r\n    }\r\n    if (action == null) {\r\n        result.add(\"index\");\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "getPrefix",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "String getPrefix(String pathSpec)\n{\r\n    int start = 0;\r\n    while (StringUtils.isAnyBlank(Character.toString(pathSpec.charAt(start)))) {\r\n        ++start;\r\n    }\r\n    if (pathSpec.charAt(start) != '/') {\r\n        throw new WebAppException(\"Path spec syntax error: \" + pathSpec);\r\n    }\r\n    int ci = pathSpec.indexOf(':');\r\n    if (ci == -1) {\r\n        ci = pathSpec.length();\r\n    }\r\n    if (ci == 1) {\r\n        return \"/\";\r\n    }\r\n    char c;\r\n    do {\r\n        c = pathSpec.charAt(--ci);\r\n    } while (c == '/' || StringUtils.isAnyBlank(Character.toString(c)));\r\n    return pathSpec.substring(start, ci + 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factory\\providers",
  "methodName" : "getServerFactory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RpcServerFactory getServerFactory(Configuration conf)\n{\r\n    if (conf == null) {\r\n        conf = new Configuration();\r\n    }\r\n    String serverFactoryClassName = conf.get(YarnConfiguration.IPC_SERVER_FACTORY_CLASS, YarnConfiguration.DEFAULT_IPC_SERVER_FACTORY_CLASS);\r\n    return (RpcServerFactory) getFactoryClassInstance(serverFactoryClassName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factory\\providers",
  "methodName" : "getClientFactory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RpcClientFactory getClientFactory(Configuration conf)\n{\r\n    String clientFactoryClassName = conf.get(YarnConfiguration.IPC_CLIENT_FACTORY_CLASS, YarnConfiguration.DEFAULT_IPC_CLIENT_FACTORY_CLASS);\r\n    return (RpcClientFactory) getFactoryClassInstance(clientFactoryClassName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factory\\providers",
  "methodName" : "getFactoryClassInstance",
  "errType" : [ "ClassNotFoundException|NoSuchMethodException|InvocationTargetException|IllegalAccessException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Object getFactoryClassInstance(String factoryClassName)\n{\r\n    try {\r\n        Class<?> clazz = Class.forName(factoryClassName);\r\n        Method method = clazz.getMethod(\"get\");\r\n        method.setAccessible(true);\r\n        return method.invoke(null);\r\n    } catch (ClassNotFoundException | NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResource getResource()\n{\r\n    return resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "createDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createDir(Path path, FsPermission perm) throws IOException\n{\r\n    files.mkdir(path, perm, false);\r\n    if (!perm.equals(files.getUMask().applyUMask(perm))) {\r\n        files.setPermission(path, perm);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "createStatusCacheLoader",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "CacheLoader<Path, Future<FileStatus>> createStatusCacheLoader(final Configuration conf)\n{\r\n    return new CacheLoader<Path, Future<FileStatus>>() {\r\n\r\n        public Future<FileStatus> load(Path path) {\r\n            try {\r\n                FileSystem fs = path.getFileSystem(conf);\r\n                return Futures.immediateFuture(fs.getFileStatus(path));\r\n            } catch (Throwable th) {\r\n                return Futures.immediateFailedFuture(th);\r\n            }\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "isPublic",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isPublic(FileSystem fs, Path current, FileStatus sStat, LoadingCache<Path, Future<FileStatus>> statCache) throws IOException\n{\r\n    current = fs.makeQualified(current);\r\n    if (!checkPublicPermsForAll(fs, sStat, FsAction.READ_EXECUTE, FsAction.READ)) {\r\n        return false;\r\n    }\r\n    if (Shell.WINDOWS && fs instanceof LocalFileSystem) {\r\n        return true;\r\n    }\r\n    return ancestorsHaveExecutePermissions(fs, current.getParent(), statCache);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "checkPublicPermsForAll",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean checkPublicPermsForAll(FileSystem fs, FileStatus status, FsAction dir, FsAction file) throws IOException\n{\r\n    FsPermission perms = status.getPermission();\r\n    FsAction otherAction = perms.getOtherAction();\r\n    if (status.isDirectory()) {\r\n        if (!otherAction.implies(dir)) {\r\n            return false;\r\n        }\r\n        for (FileStatus child : fs.listStatus(status.getPath())) {\r\n            if (!checkPublicPermsForAll(fs, child, dir, file)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    return (otherAction.implies(file));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "ancestorsHaveExecutePermissions",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean ancestorsHaveExecutePermissions(FileSystem fs, Path path, LoadingCache<Path, Future<FileStatus>> statCache) throws IOException\n{\r\n    Path current = path;\r\n    while (current != null) {\r\n        if (!checkPermissionOfOther(fs, current, FsAction.EXECUTE, statCache)) {\r\n            return false;\r\n        }\r\n        current = current.getParent();\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "checkPermissionOfOther",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean checkPermissionOfOther(FileSystem fs, Path path, FsAction action, LoadingCache<Path, Future<FileStatus>> statCache) throws IOException\n{\r\n    FileStatus status = getFileStatus(fs, path, statCache);\r\n    FsPermission perms = status.getPermission();\r\n    FsAction otherAction = perms.getOtherAction();\r\n    return otherAction.implies(action);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getFileStatus",
  "errType" : [ "ExecutionException", "InterruptedException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "FileStatus getFileStatus(final FileSystem fs, final Path path, LoadingCache<Path, Future<FileStatus>> statCache) throws IOException\n{\r\n    if (statCache == null) {\r\n        return fs.getFileStatus(path);\r\n    }\r\n    try {\r\n        return statCache.get(path).get();\r\n    } catch (ExecutionException e) {\r\n        Throwable cause = e.getCause();\r\n        if (cause instanceof IOException) {\r\n            throw (IOException) cause;\r\n        } else {\r\n            throw new IOException(cause);\r\n        }\r\n    } catch (InterruptedException e) {\r\n        Thread.currentThread().interrupt();\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "verifyAndCopy",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void verifyAndCopy(Path destination) throws IOException, YarnException\n{\r\n    final Path sCopy;\r\n    try {\r\n        sCopy = resource.getResource().toPath();\r\n    } catch (URISyntaxException e) {\r\n        throw new IOException(\"Invalid resource\", e);\r\n    }\r\n    FileSystem sourceFs = sCopy.getFileSystem(conf);\r\n    FileStatus sStat = sourceFs.getFileStatus(sCopy);\r\n    if (sStat.getModificationTime() != resource.getTimestamp()) {\r\n        throw new IOException(\"Resource \" + sCopy + \" changed on src filesystem\" + \" - expected: \" + \"\\\"\" + Times.formatISO8601(resource.getTimestamp()) + \"\\\"\" + \", was: \" + \"\\\"\" + Times.formatISO8601(sStat.getModificationTime()) + \"\\\"\" + \", current time: \" + \"\\\"\" + Times.formatISO8601(Time.now()) + \"\\\"\");\r\n    }\r\n    if (resource.getVisibility() == LocalResourceVisibility.PUBLIC) {\r\n        if (!isPublic(sourceFs, sCopy, sStat, statCache)) {\r\n            throw new IOException(\"Resource \" + sCopy + \" is not publicly accessible and as such cannot be part of the\" + \" public cache.\");\r\n        }\r\n    }\r\n    downloadAndUnpack(sCopy, destination);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "downloadAndUnpack",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void downloadAndUnpack(Path source, Path destination) throws YarnException\n{\r\n    try {\r\n        FileSystem sourceFileSystem = source.getFileSystem(conf);\r\n        FileSystem destinationFileSystem = destination.getFileSystem(conf);\r\n        if (sourceFileSystem.getFileStatus(source).isDirectory()) {\r\n            FileUtil.copy(sourceFileSystem, source, destinationFileSystem, destination, false, true, conf);\r\n        } else {\r\n            unpack(source, destination, sourceFileSystem, destinationFileSystem);\r\n        }\r\n    } catch (Exception e) {\r\n        throw new YarnException(\"Download and unpack failed\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "unpack",
  "errType" : null,
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void unpack(Path source, Path destination, FileSystem sourceFileSystem, FileSystem destinationFileSystem) throws IOException, InterruptedException, ExecutionException\n{\r\n    try (InputStream inputStream = sourceFileSystem.open(source)) {\r\n        File dst = new File(destination.toUri());\r\n        String lowerDst = StringUtils.toLowerCase(dst.getName());\r\n        switch(resource.getType()) {\r\n            case ARCHIVE:\r\n                if (lowerDst.endsWith(\".jar\")) {\r\n                    RunJar.unJar(inputStream, dst, RunJar.MATCH_ANY);\r\n                } else if (lowerDst.endsWith(\".zip\")) {\r\n                    FileUtil.unZip(inputStream, dst);\r\n                } else if (lowerDst.endsWith(\".tar.gz\") || lowerDst.endsWith(\".tgz\") || lowerDst.endsWith(\".tar\")) {\r\n                    FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\r\n                } else {\r\n                    LOG.warn(\"Cannot unpack \" + source);\r\n                    try (OutputStream outputStream = destinationFileSystem.create(destination, true)) {\r\n                        IOUtils.copy(inputStream, outputStream);\r\n                    }\r\n                }\r\n                break;\r\n            case PATTERN:\r\n                if (lowerDst.endsWith(\".jar\")) {\r\n                    String p = resource.getPattern();\r\n                    if (!dst.exists() && !dst.mkdir()) {\r\n                        throw new IOException(\"Unable to create directory: [\" + dst + \"]\");\r\n                    }\r\n                    RunJar.unJarAndSave(inputStream, dst, source.getName(), p == null ? RunJar.MATCH_ANY : Pattern.compile(p));\r\n                } else if (lowerDst.endsWith(\".zip\")) {\r\n                    LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" + \"was specified as PATTERN\");\r\n                    FileUtil.unZip(inputStream, dst);\r\n                } else if (lowerDst.endsWith(\".tar.gz\") || lowerDst.endsWith(\".tgz\") || lowerDst.endsWith(\".tar\")) {\r\n                    LOG.warn(\"Treating [\" + source + \"] as an archive even though it \" + \"was specified as PATTERN\");\r\n                    FileUtil.unTar(inputStream, dst, lowerDst.endsWith(\"gz\"));\r\n                } else {\r\n                    LOG.warn(\"Cannot unpack \" + source);\r\n                    try (OutputStream outputStream = destinationFileSystem.create(destination, true)) {\r\n                        IOUtils.copy(inputStream, outputStream);\r\n                    }\r\n                }\r\n                break;\r\n            case FILE:\r\n            default:\r\n                try (OutputStream outputStream = destinationFileSystem.create(destination, true)) {\r\n                    IOUtils.copy(inputStream, outputStream);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "call",
  "errType" : [ "URISyntaxException", "Exception", "IOException", "FileNotFoundException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "Path call() throws Exception\n{\r\n    final Path sCopy;\r\n    try {\r\n        sCopy = resource.getResource().toPath();\r\n    } catch (URISyntaxException e) {\r\n        throw new IOException(\"Invalid resource\", e);\r\n    }\r\n    LOG.debug(\"Starting to download {} {} {}\", sCopy, resource.getType(), resource.getPattern());\r\n    final Path destinationTmp = new Path(destDirPath + \"_tmp\");\r\n    createDir(destinationTmp, cachePerms);\r\n    Path dFinal = files.makeQualified(new Path(destinationTmp, sCopy.getName()));\r\n    try {\r\n        if (userUgi == null) {\r\n            verifyAndCopy(dFinal);\r\n        } else {\r\n            userUgi.doAs(new PrivilegedExceptionAction<Void>() {\r\n\r\n                @Override\r\n                public Void run() throws Exception {\r\n                    verifyAndCopy(dFinal);\r\n                    return null;\r\n                }\r\n            });\r\n        }\r\n        changePermissions(dFinal.getFileSystem(conf), dFinal);\r\n        files.rename(destinationTmp, destDirPath, Rename.OVERWRITE);\r\n        LOG.debug(\"File has been downloaded to {} from {}\", new Path(destDirPath, sCopy.getName()), sCopy);\r\n    } catch (Exception e) {\r\n        try {\r\n            files.delete(destDirPath, true);\r\n        } catch (IOException ignore) {\r\n        }\r\n        throw e;\r\n    } finally {\r\n        try {\r\n            files.delete(destinationTmp, true);\r\n        } catch (FileNotFoundException ignore) {\r\n        }\r\n        conf = null;\r\n        resource = null;\r\n    }\r\n    return files.makeQualified(new Path(destDirPath, sCopy.getName()));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "changePermissions",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void changePermissions(FileSystem fs, final Path path) throws IOException, InterruptedException\n{\r\n    File f = new File(path.toUri());\r\n    if (FileUtils.isSymlink(f)) {\r\n        return;\r\n    }\r\n    boolean isDir = f.isDirectory();\r\n    FsPermission perm = cachePerms;\r\n    if (resource.getVisibility() == LocalResourceVisibility.PUBLIC) {\r\n        perm = isDir ? PUBLIC_DIR_PERMS : PUBLIC_FILE_PERMS;\r\n    } else {\r\n        perm = isDir ? PRIVATE_DIR_PERMS : PRIVATE_FILE_PERMS;\r\n    }\r\n    LOG.debug(\"Changing permissions for path {} to perm {}\", path, perm);\r\n    final FsPermission fPerm = perm;\r\n    if (null == userUgi) {\r\n        files.setPermission(path, perm);\r\n    } else {\r\n        userUgi.doAs(new PrivilegedExceptionAction<Void>() {\r\n\r\n            public Void run() throws Exception {\r\n                files.setPermission(path, fPerm);\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n    if (isDir) {\r\n        FileStatus[] statuses = fs.listStatus(path);\r\n        for (FileStatus status : statuses) {\r\n            changePermissions(fs, status.getPath());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "InetSocketAddress getAddress()\n{\r\n    return haAdminServiceAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getZKFCAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "InetSocketAddress getZKFCAddress()\n{\r\n    throw new UnsupportedOperationException(\"RMHAServiceTarget doesn't have \" + \"a corresponding ZKFC address\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getFencer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeFencer getFencer()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "checkFencingConfigured",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void checkFencingConfigured() throws BadFencingConfigurationException\n{\r\n    throw new BadFencingConfigurationException(\"Fencer not configured\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "isAutoFailoverEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isAutoFailoverEnabled()\n{\r\n    return autoFailoverEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "YarnAuthorizationProvider getInstance(Configuration conf)\n{\r\n    synchronized (YarnAuthorizationProvider.class) {\r\n        if (authorizer == null) {\r\n            Class<?> authorizerClass = conf.getClass(YarnConfiguration.YARN_AUTHORIZATION_PROVIDER, ConfiguredYarnAuthorizer.class);\r\n            authorizer = (YarnAuthorizationProvider) ReflectionUtils.newInstance(authorizerClass, conf);\r\n            authorizer.init(conf);\r\n            LOG.info(authorizerClass.getName() + \" is instantiated.\");\r\n        }\r\n    }\r\n    return authorizer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "destroy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void destroy()\n{\r\n    synchronized (YarnAuthorizationProvider.class) {\r\n        if (authorizer != null) {\r\n            LOG.debug(\"{} is destroyed.\", authorizer.getClass().getName());\r\n            authorizer = null;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init(Configuration conf)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "checkPermission",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean checkPermission(AccessRequest accessRequest)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "setPermission",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPermission(List<Permission> permissions, UserGroupInformation ugi)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "setAdmins",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAdmins(AccessControlList acls, UserGroupInformation ugi)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "isAdmin",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isAdmin(UserGroupInformation ugi)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceSizingProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.resources != null) {\r\n        builder.setResources(convertToProtoFormat(this.resources));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ResourceSizingProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumAllocations",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumAllocations()\n{\r\n    ResourceSizingProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getNumAllocations());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumAllocations",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumAllocations(int numAllocations)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumAllocations(numAllocations);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getResources()\n{\r\n    ResourceSizingProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.resources != null) {\r\n        return this.resources;\r\n    }\r\n    if (!p.hasResources()) {\r\n        return null;\r\n    }\r\n    this.resources = convertFromProtoFormat(p.getResources());\r\n    return this.resources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResources(Resource resources)\n{\r\n    maybeInitBuilder();\r\n    if (resources == null) {\r\n        builder.clearResources();\r\n    }\r\n    this.resources = resources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto r)\n{\r\n    return new ResourcePBImpl(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource r)\n{\r\n    return ProtoUtils.convertToProtoFormat(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    return \"ResourceSizingPBImpl{\" + \"numAllocations=\" + getNumAllocations() + \", resources=\" + getResources() + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initNodeToLabels()\n{\r\n    if (this.nodeIdToLabels != null) {\r\n        return;\r\n    }\r\n    ReplaceLabelsOnNodeRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeIdToLabelsProto> list = p.getNodeToLabelsList();\r\n    this.nodeIdToLabels = new HashMap<NodeId, Set<String>>();\r\n    for (NodeIdToLabelsProto c : list) {\r\n        this.nodeIdToLabels.put(new NodeIdPBImpl(c.getNodeId()), Sets.newHashSet(c.getNodeLabelsList()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReplaceLabelsOnNodeRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addNodeToLabelsToProto",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addNodeToLabelsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeToLabels();\r\n    if (nodeIdToLabels == null) {\r\n        return;\r\n    }\r\n    Iterable<NodeIdToLabelsProto> iterable = new Iterable<NodeIdToLabelsProto>() {\r\n\r\n        @Override\r\n        public Iterator<NodeIdToLabelsProto> iterator() {\r\n            return new Iterator<NodeIdToLabelsProto>() {\r\n\r\n                Iterator<Entry<NodeId, Set<String>>> iter = nodeIdToLabels.entrySet().iterator();\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n\r\n                @Override\r\n                public NodeIdToLabelsProto next() {\r\n                    Entry<NodeId, Set<String>> now = iter.next();\r\n                    return NodeIdToLabelsProto.newBuilder().setNodeId(convertToProtoFormat(now.getKey())).clearNodeLabels().addAllNodeLabels(now.getValue()).build();\r\n                }\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllNodeToLabels(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodeIdToLabels != null) {\r\n        addNodeToLabelsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReplaceLabelsOnNodeRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<NodeId, Set<String>> getNodeToLabels()\n{\r\n    initNodeToLabels();\r\n    return this.nodeIdToLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeToLabels(Map<NodeId, Set<String>> map)\n{\r\n    initNodeToLabels();\r\n    nodeIdToLabels.clear();\r\n    nodeIdToLabels.putAll(map);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFailOnUnknownNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getFailOnUnknownNodes()\n{\r\n    ReplaceLabelsOnNodeRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getFailOnUnknownNodes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFailOnUnknownNodes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFailOnUnknownNodes(boolean failOnUnknownNodes)\n{\r\n    maybeInitBuilder();\r\n    builder.setFailOnUnknownNodes(failOnUnknownNodes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId t)\n{\r\n    return ((NodeIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    assert false : \"hashCode not designed\";\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNodesToAttributesRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (hostNames != null && !hostNames.isEmpty()) {\r\n        builder.clearHostnames();\r\n        builder.addAllHostnames(hostNames);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setHostNames",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setHostNames(Set<String> hostnames)\n{\r\n    maybeInitBuilder();\r\n    if (hostNames == null) {\r\n        builder.clearHostnames();\r\n    }\r\n    this.hostNames = hostnames;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = YarnServiceProtos.GetNodesToAttributesRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getHostNames",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getHostNames()\n{\r\n    initNodeToAttributes();\r\n    return this.hostNames;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeToAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initNodeToAttributes()\n{\r\n    if (this.hostNames != null) {\r\n        return;\r\n    }\r\n    YarnServiceProtos.GetNodesToAttributesRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<String> hostNamesList = p.getHostnamesList();\r\n    this.hostNames = new HashSet<>();\r\n    this.hostNames.addAll(hostNamesList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    if (!proto.hasAppAttemptId()) {\r\n        return null;\r\n    }\r\n    return new ApplicationAttemptIdPBImpl(proto.getAppAttemptId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    if (!proto.hasNodeId()) {\r\n        return null;\r\n    }\r\n    return new NodeIdPBImpl(proto.getNodeId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getApplicationSubmitter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getApplicationSubmitter()\n{\r\n    return proto.getAppSubmitter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getKeyId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getKeyId()\n{\r\n    return proto.getKeyId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    LOG.debug(\"Writing NMTokenIdentifier to RPC layer: {}\", this);\r\n    out.write(proto.toByteArray());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "readFields",
  "errType" : [ "InvalidProtocolBufferException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    byte[] data = IOUtils.readFullyToByteArray(in);\r\n    try {\r\n        proto = NMTokenIdentifierProto.parseFrom(data);\r\n    } catch (InvalidProtocolBufferException e) {\r\n        LOG.warn(\"Recovering old formatted token\");\r\n        readFieldsInOldFormat(new DataInputStream(new ByteArrayInputStream(data)));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "readFieldsInOldFormat",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void readFieldsInOldFormat(DataInputStream in) throws IOException\n{\r\n    NMTokenIdentifierProto.Builder builder = NMTokenIdentifierProto.newBuilder();\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(in.readLong(), in.readInt()), in.readInt());\r\n    builder.setAppAttemptId(((ApplicationAttemptIdPBImpl) appAttemptId).getProto());\r\n    String[] hostAddr = in.readUTF().split(\":\");\r\n    NodeId nodeId = NodeId.newInstance(hostAddr[0], Integer.parseInt(hostAddr[1]));\r\n    builder.setNodeId(((NodeIdPBImpl) nodeId).getProto());\r\n    builder.setAppSubmitter(in.readUTF());\r\n    builder.setKeyId(in.readInt());\r\n    proto = builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getKind",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Text getKind()\n{\r\n    return KIND;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "UserGroupInformation getUser()\n{\r\n    String appAttemptId = null;\r\n    if (proto.hasAppAttemptId()) {\r\n        appAttemptId = new ApplicationAttemptIdPBImpl(proto.getAppAttemptId()).toString();\r\n    }\r\n    return UserGroupInformation.createRemoteUser(appAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMTokenIdentifierProto getProto()\n{\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueStatisticsProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = QueueStatisticsProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumAppsSubmitted",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getNumAppsSubmitted()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasNumAppsSubmitted()) ? p.getNumAppsSubmitted() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumAppsSubmitted",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumAppsSubmitted(long numAppsSubmitted)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumAppsSubmitted(numAppsSubmitted);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumAppsRunning",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getNumAppsRunning()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasNumAppsRunning()) ? p.getNumAppsRunning() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumAppsRunning",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumAppsRunning(long numAppsRunning)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumAppsRunning(numAppsRunning);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumAppsPending",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getNumAppsPending()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasNumAppsPending()) ? p.getNumAppsPending() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumAppsPending",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumAppsPending(long numAppsPending)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumAppsPending(numAppsPending);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumAppsCompleted",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getNumAppsCompleted()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasNumAppsCompleted()) ? p.getNumAppsCompleted() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumAppsCompleted",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumAppsCompleted(long numAppsCompleted)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumAppsCompleted(numAppsCompleted);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumAppsKilled",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getNumAppsKilled()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasNumAppsKilled()) ? p.getNumAppsKilled() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumAppsKilled",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumAppsKilled(long numAppsKilled)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumAppsKilled(numAppsKilled);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumAppsFailed",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getNumAppsFailed()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasNumAppsFailed()) ? p.getNumAppsFailed() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumAppsFailed",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumAppsFailed(long numAppsFailed)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumAppsFailed(numAppsFailed);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumActiveUsers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getNumActiveUsers()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasNumActiveUsers()) ? p.getNumActiveUsers() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumActiveUsers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumActiveUsers(long numActiveUsers)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumActiveUsers(numActiveUsers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAvailableMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getAvailableMemoryMB()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasAvailableMemoryMB()) ? p.getAvailableMemoryMB() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAvailableMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAvailableMemoryMB(long availableMemoryMB)\n{\r\n    maybeInitBuilder();\r\n    builder.setAvailableMemoryMB(availableMemoryMB);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAllocatedMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getAllocatedMemoryMB()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasAllocatedMemoryMB()) ? p.getAllocatedMemoryMB() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAllocatedMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocatedMemoryMB(long allocatedMemoryMB)\n{\r\n    maybeInitBuilder();\r\n    builder.setAllocatedMemoryMB(allocatedMemoryMB);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPendingMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getPendingMemoryMB()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasPendingMemoryMB()) ? p.getPendingMemoryMB() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPendingMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPendingMemoryMB(long pendingMemoryMB)\n{\r\n    maybeInitBuilder();\r\n    builder.setPendingMemoryMB(pendingMemoryMB);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getReservedMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getReservedMemoryMB()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasReservedMemoryMB()) ? p.getReservedMemoryMB() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setReservedMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservedMemoryMB(long reservedMemoryMB)\n{\r\n    maybeInitBuilder();\r\n    builder.setReservedMemoryMB(reservedMemoryMB);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAvailableVCores",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getAvailableVCores()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasAvailableVCores()) ? p.getAvailableVCores() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAvailableVCores",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAvailableVCores(long availableVCores)\n{\r\n    maybeInitBuilder();\r\n    builder.setAvailableVCores(availableVCores);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAllocatedVCores",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getAllocatedVCores()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasAllocatedVCores()) ? p.getAllocatedVCores() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAllocatedVCores",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocatedVCores(long allocatedVCores)\n{\r\n    maybeInitBuilder();\r\n    builder.setAllocatedVCores(allocatedVCores);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPendingVCores",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getPendingVCores()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasPendingVCores()) ? p.getPendingVCores() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPendingVCores",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPendingVCores(long pendingVCores)\n{\r\n    maybeInitBuilder();\r\n    builder.setPendingVCores(pendingVCores);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getReservedVCores",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getReservedVCores()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasReservedVCores()) ? p.getReservedVCores() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setReservedVCores",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservedVCores(long reservedVCores)\n{\r\n    maybeInitBuilder();\r\n    builder.setReservedVCores(reservedVCores);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPendingContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getPendingContainers()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasPendingContainers()) ? p.getPendingContainers() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPendingContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPendingContainers(long pendingContainers)\n{\r\n    maybeInitBuilder();\r\n    builder.setPendingContainers(pendingContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAllocatedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getAllocatedContainers()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasAllocatedContainers()) ? p.getAllocatedContainers() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAllocatedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocatedContainers(long allocatedContainers)\n{\r\n    maybeInitBuilder();\r\n    builder.setAllocatedContainers(allocatedContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getReservedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getReservedContainers()\n{\r\n    QueueStatisticsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasReservedContainers()) ? p.getReservedContainers() : -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setReservedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservedContainers(long reservedContainers)\n{\r\n    maybeInitBuilder();\r\n    builder.setReservedContainers(reservedContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerId != null) {\r\n        builder.setContainerId(convertToProtoFormat(this.containerId));\r\n    }\r\n    if (this.localResources != null) {\r\n        addLocalResourcesToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ResourceLocalizationRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalResourcesToProto",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addLocalResourcesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearLocalResources();\r\n    if (localResources == null) {\r\n        return;\r\n    }\r\n    Iterable<YarnProtos.StringLocalResourceMapProto> iterable = new Iterable<YarnProtos.StringLocalResourceMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<YarnProtos.StringLocalResourceMapProto> iterator() {\r\n            return new Iterator<YarnProtos.StringLocalResourceMapProto>() {\r\n\r\n                Iterator<String> keyIter = localResources.keySet().iterator();\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n\r\n                @Override\r\n                public YarnProtos.StringLocalResourceMapProto next() {\r\n                    String key = keyIter.next();\r\n                    return YarnProtos.StringLocalResourceMapProto.newBuilder().setKey(key).setValue(convertToProtoFormat(localResources.get(key))).build();\r\n                }\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return keyIter.hasNext();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllLocalResources(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceLocalizationRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalResources()\n{\r\n    if (this.localResources != null) {\r\n        return;\r\n    }\r\n    YarnServiceProtos.ResourceLocalizationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<YarnProtos.StringLocalResourceMapProto> list = p.getLocalResourcesList();\r\n    this.localResources = new HashMap<>();\r\n    for (YarnProtos.StringLocalResourceMapProto c : list) {\r\n        this.localResources.put(c.getKey(), convertFromProtoFormat(c.getValue()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourcePBImpl convertFromProtoFormat(YarnProtos.LocalResourceProto p)\n{\r\n    return new LocalResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(YarnProtos.ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnProtos.ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnProtos.LocalResourceProto convertToProtoFormat(LocalResource t)\n{\r\n    return ((LocalResourcePBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    YarnServiceProtos.ResourceLocalizationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerId != null) {\r\n        return this.containerId;\r\n    }\r\n    if (!p.hasContainerId()) {\r\n        return null;\r\n    }\r\n    this.containerId = convertFromProtoFormat(p.getContainerId());\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)\n{\r\n    maybeInitBuilder();\r\n    if (containerId == null) {\r\n        builder.clearContainerId();\r\n    }\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLocalResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, LocalResource> getLocalResources()\n{\r\n    initLocalResources();\r\n    return this.localResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLocalResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setLocalResources(Map<String, LocalResource> localResources)\n{\r\n    if (localResources == null) {\r\n        this.localResources = null;\r\n        builder.clearLocalResources();\r\n        return;\r\n    }\r\n    this.localResources = new HashMap<>(localResources);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnServiceProtos.RollbackResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getKerberosInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "KerberosInfo getKerberosInfo(Class<?> protocol, Configuration conf)\n{\r\n    if (!protocol.equals(ApplicationClientProtocolPB.class)) {\r\n        return null;\r\n    }\r\n    return new KerberosInfo() {\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public String serverPrincipal() {\r\n            return YarnConfiguration.RM_PRINCIPAL;\r\n        }\r\n\r\n        @Override\r\n        public String clientPrincipal() {\r\n            return null;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getTokenInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenInfo getTokenInfo(Class<?> protocol, Configuration conf)\n{\r\n    if (!protocol.equals(ApplicationClientProtocolPB.class)) {\r\n        return null;\r\n    }\r\n    return new TokenInfo() {\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends TokenSelector<? extends TokenIdentifier>> value() {\r\n            return RMDelegationTokenSelector.class;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "isValidId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isValidId(String id)\n{\r\n    return validIdRe.matcher(id).matches();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "StartContainersResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.servicesMetaData != null) {\r\n        addServicesMetaDataToProto();\r\n    }\r\n    if (this.succeededContainers != null) {\r\n        addSucceededContainersToProto();\r\n    }\r\n    if (this.failedContainers != null) {\r\n        addFailedContainersToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteBuffer convertFromProtoFormat(ByteString byteString)\n{\r\n    return ProtoUtils.convertFromProtoFormat(byteString);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteString convertToProtoFormat(ByteBuffer byteBuffer)\n{\r\n    return ProtoUtils.convertToProtoFormat(byteBuffer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SerializedExceptionPBImpl convertFromProtoFormat(SerializedExceptionProto p)\n{\r\n    return new SerializedExceptionPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SerializedExceptionProto convertToProtoFormat(SerializedException t)\n{\r\n    return ((SerializedExceptionPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = StartContainersResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAllServicesMetaData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, ByteBuffer> getAllServicesMetaData()\n{\r\n    initServicesMetaData();\r\n    return this.servicesMetaData;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAllServicesMetaData",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAllServicesMetaData(Map<String, ByteBuffer> servicesMetaData)\n{\r\n    if (servicesMetaData == null) {\r\n        return;\r\n    }\r\n    initServicesMetaData();\r\n    this.servicesMetaData.clear();\r\n    this.servicesMetaData.putAll(servicesMetaData);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initServicesMetaData",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initServicesMetaData()\n{\r\n    if (this.servicesMetaData != null) {\r\n        return;\r\n    }\r\n    StartContainersResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<StringBytesMapProto> list = p.getServicesMetaDataList();\r\n    this.servicesMetaData = new HashMap<String, ByteBuffer>();\r\n    for (StringBytesMapProto c : list) {\r\n        this.servicesMetaData.put(c.getKey(), convertFromProtoFormat(c.getValue()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addServicesMetaDataToProto",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addServicesMetaDataToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearServicesMetaData();\r\n    if (servicesMetaData == null)\r\n        return;\r\n    Iterable<StringBytesMapProto> iterable = new Iterable<StringBytesMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<StringBytesMapProto> iterator() {\r\n            return new Iterator<StringBytesMapProto>() {\r\n\r\n                Iterator<String> keyIter = servicesMetaData.keySet().iterator();\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n\r\n                @Override\r\n                public StringBytesMapProto next() {\r\n                    String key = keyIter.next();\r\n                    return StringBytesMapProto.newBuilder().setKey(key).setValue(convertToProtoFormat(servicesMetaData.get(key))).build();\r\n                }\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return keyIter.hasNext();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllServicesMetaData(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addFailedContainersToProto",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void addFailedContainersToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearFailedRequests();\r\n    if (this.failedContainers == null)\r\n        return;\r\n    List<ContainerExceptionMapProto> protoList = new ArrayList<ContainerExceptionMapProto>();\r\n    for (Map.Entry<ContainerId, SerializedException> entry : this.failedContainers.entrySet()) {\r\n        protoList.add(ContainerExceptionMapProto.newBuilder().setContainerId(convertToProtoFormat(entry.getKey())).setException(convertToProtoFormat(entry.getValue())).build());\r\n    }\r\n    builder.addAllFailedRequests(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addSucceededContainersToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addSucceededContainersToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearSucceededRequests();\r\n    if (this.succeededContainers == null) {\r\n        return;\r\n    }\r\n    Iterable<ContainerIdProto> iterable = new Iterable<ContainerIdProto>() {\r\n\r\n        @Override\r\n        public Iterator<ContainerIdProto> iterator() {\r\n            return new Iterator<ContainerIdProto>() {\r\n\r\n                Iterator<ContainerId> iter = succeededContainers.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ContainerIdProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllSucceededRequests(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initSucceededContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initSucceededContainers()\n{\r\n    if (this.succeededContainers != null)\r\n        return;\r\n    StartContainersResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerIdProto> list = p.getSucceededRequestsList();\r\n    this.succeededContainers = new ArrayList<ContainerId>();\r\n    for (ContainerIdProto c : list) {\r\n        this.succeededContainers.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getSuccessfullyStartedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerId> getSuccessfullyStartedContainers()\n{\r\n    initSucceededContainers();\r\n    return this.succeededContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setSuccessfullyStartedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setSuccessfullyStartedContainers(List<ContainerId> succeededContainers)\n{\r\n    maybeInitBuilder();\r\n    if (succeededContainers == null) {\r\n        builder.clearSucceededRequests();\r\n    }\r\n    this.succeededContainers = succeededContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initFailedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initFailedContainers()\n{\r\n    if (this.failedContainers != null) {\r\n        return;\r\n    }\r\n    StartContainersResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerExceptionMapProto> protoList = p.getFailedRequestsList();\r\n    this.failedContainers = new HashMap<ContainerId, SerializedException>();\r\n    for (ContainerExceptionMapProto ce : protoList) {\r\n        this.failedContainers.put(convertFromProtoFormat(ce.getContainerId()), convertFromProtoFormat(ce.getException()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ContainerId, SerializedException> getFailedRequests()\n{\r\n    initFailedContainers();\r\n    return this.failedContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFailedRequests(Map<ContainerId, SerializedException> failedContainers)\n{\r\n    maybeInitBuilder();\r\n    if (failedContainers == null)\r\n        builder.clearFailedRequests();\r\n    this.failedContainers = failedContainers;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "runCleanerTask",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RunSharedCacheCleanerTaskResponseProto runCleanerTask(RpcController controller, RunSharedCacheCleanerTaskRequestProto proto) throws ServiceException\n{\r\n    RunSharedCacheCleanerTaskRequestPBImpl request = new RunSharedCacheCleanerTaskRequestPBImpl(proto);\r\n    try {\r\n        RunSharedCacheCleanerTaskResponse response = real.runCleanerTask(request);\r\n        return ((RunSharedCacheCleanerTaskResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\dao",
  "methodName" : "getAddQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ArrayList<QueueConfigInfo> getAddQueueInfo()\n{\r\n    return addQueueInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\dao",
  "methodName" : "setAddQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAddQueueInfo(ArrayList<QueueConfigInfo> addQueueInfo)\n{\r\n    this.addQueueInfo = addQueueInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\dao",
  "methodName" : "getRemoveQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ArrayList<String> getRemoveQueueInfo()\n{\r\n    return removeQueueInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\dao",
  "methodName" : "setRemoveQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRemoveQueueInfo(ArrayList<String> removeQueueInfo)\n{\r\n    this.removeQueueInfo = removeQueueInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\dao",
  "methodName" : "getUpdateQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ArrayList<QueueConfigInfo> getUpdateQueueInfo()\n{\r\n    return updateQueueInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\dao",
  "methodName" : "setUpdateQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUpdateQueueInfo(ArrayList<QueueConfigInfo> updateQueueInfo)\n{\r\n    this.updateQueueInfo = updateQueueInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\dao",
  "methodName" : "getGlobalParams",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "HashMap<String, String> getGlobalParams()\n{\r\n    return global;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\dao",
  "methodName" : "setGlobalParams",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setGlobalParams(HashMap<String, String> globalInfo)\n{\r\n    this.global = globalInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshAdminAclsResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RpcServerFactoryPBImpl get()\n{\r\n    return RpcServerFactoryPBImpl.self;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getServer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers)\n{\r\n    return getServer(protocol, instance, addr, conf, secretManager, numHandlers, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getServer",
  "errType" : [ "ClassNotFoundException", "NoSuchMethodException", "InvocationTargetException", "IllegalAccessException", "InstantiationException", "ClassNotFoundException", "NoSuchMethodException", "InvocationTargetException", "IllegalAccessException", "IOException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "Server getServer(Class<?> protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig)\n{\r\n    Constructor<?> constructor = serviceCache.get(protocol);\r\n    if (constructor == null) {\r\n        Class<?> pbServiceImplClazz = null;\r\n        try {\r\n            pbServiceImplClazz = conf.getClassByName(getPbServiceImplClassName(protocol));\r\n        } catch (ClassNotFoundException e) {\r\n            throw new YarnRuntimeException(\"Failed to load class: [\" + getPbServiceImplClassName(protocol) + \"]\", e);\r\n        }\r\n        try {\r\n            constructor = pbServiceImplClazz.getConstructor(protocol);\r\n            constructor.setAccessible(true);\r\n            serviceCache.putIfAbsent(protocol, constructor);\r\n        } catch (NoSuchMethodException e) {\r\n            throw new YarnRuntimeException(\"Could not find constructor with params: \" + Long.TYPE + \", \" + InetSocketAddress.class + \", \" + Configuration.class, e);\r\n        }\r\n    }\r\n    Object service = null;\r\n    try {\r\n        service = constructor.newInstance(instance);\r\n    } catch (InvocationTargetException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (IllegalAccessException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (InstantiationException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n    Class<?> pbProtocol = service.getClass().getInterfaces()[0];\r\n    Method method = protoCache.get(protocol);\r\n    if (method == null) {\r\n        Class<?> protoClazz = null;\r\n        try {\r\n            protoClazz = conf.getClassByName(getProtoClassName(protocol));\r\n        } catch (ClassNotFoundException e) {\r\n            throw new YarnRuntimeException(\"Failed to load class: [\" + getProtoClassName(protocol) + \"]\", e);\r\n        }\r\n        try {\r\n            method = protoClazz.getMethod(\"newReflectiveBlockingService\", pbProtocol.getInterfaces()[0]);\r\n            method.setAccessible(true);\r\n            protoCache.putIfAbsent(protocol, method);\r\n        } catch (NoSuchMethodException e) {\r\n            throw new YarnRuntimeException(e);\r\n        }\r\n    }\r\n    try {\r\n        return createServer(pbProtocol, addr, conf, secretManager, numHandlers, (BlockingService) method.invoke(null, service), portRangeConfig);\r\n    } catch (InvocationTargetException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (IllegalAccessException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 6,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getProtoClassName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getProtoClassName(Class<?> clazz)\n{\r\n    String srcClassName = getClassName(clazz);\r\n    return PROTO_GEN_PACKAGE_NAME + \".\" + srcClassName + \"$\" + srcClassName + PROTO_GEN_CLASS_SUFFIX;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getPbServiceImplClassName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getPbServiceImplClassName(Class<?> clazz)\n{\r\n    String srcPackagePart = getPackageName(clazz);\r\n    String srcClassName = getClassName(clazz);\r\n    String destPackagePart = srcPackagePart + \".\" + PB_IMPL_PACKAGE_SUFFIX;\r\n    String destClassPart = srcClassName + PB_IMPL_CLASS_SUFFIX;\r\n    return destPackagePart + \".\" + destClassPart;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getClassName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getClassName(Class<?> clazz)\n{\r\n    String fqName = clazz.getName();\r\n    return (fqName.substring(fqName.lastIndexOf(\".\") + 1, fqName.length()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getPackageName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getPackageName(Class<?> clazz)\n{\r\n    return clazz.getPackage().getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "createServer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Server createServer(Class<?> pbProtocol, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, BlockingService blockingService, String portRangeConfig) throws IOException\n{\r\n    RPC.setProtocolEngine(conf, pbProtocol, ProtobufRpcEngine2.class);\r\n    RPC.Server server = new RPC.Builder(conf).setProtocol(pbProtocol).setInstance(blockingService).setBindAddress(addr.getHostName()).setPort(addr.getPort()).setNumHandlers(numHandlers).setVerbose(false).setSecretManager(secretManager).setPortRangeConfig(portRangeConfig).build();\r\n    LOG.info(\"Adding protocol \" + pbProtocol.getCanonicalName() + \" to the server\");\r\n    server.addProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER, pbProtocol, blockingService);\r\n    return server;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void initLabelsToNodes()\n{\r\n    if (this.labelsToNodes != null) {\r\n        return;\r\n    }\r\n    GetLabelsToNodesResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<LabelsToNodeIdsProto> list = p.getLabelsToNodesList();\r\n    this.labelsToNodes = new HashMap<String, Set<NodeId>>();\r\n    for (LabelsToNodeIdsProto c : list) {\r\n        Set<NodeId> setNodes = new HashSet<NodeId>();\r\n        for (NodeIdProto n : c.getNodeIdList()) {\r\n            NodeId node = new NodeIdPBImpl(n);\r\n            setNodes.add(node);\r\n        }\r\n        if (!setNodes.isEmpty()) {\r\n            this.labelsToNodes.put(c.getNodeLabels(), setNodes);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetLabelsToNodesResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLabelsToNodesToProto",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void addLabelsToNodesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearLabelsToNodes();\r\n    if (labelsToNodes == null) {\r\n        return;\r\n    }\r\n    Iterable<LabelsToNodeIdsProto> iterable = new Iterable<LabelsToNodeIdsProto>() {\r\n\r\n        @Override\r\n        public Iterator<LabelsToNodeIdsProto> iterator() {\r\n            return new Iterator<LabelsToNodeIdsProto>() {\r\n\r\n                Iterator<Entry<String, Set<NodeId>>> iter = labelsToNodes.entrySet().iterator();\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n\r\n                @Override\r\n                public LabelsToNodeIdsProto next() {\r\n                    Entry<String, Set<NodeId>> now = iter.next();\r\n                    Set<NodeIdProto> nodeProtoSet = new HashSet<NodeIdProto>();\r\n                    for (NodeId n : now.getValue()) {\r\n                        nodeProtoSet.add(convertToProtoFormat(n));\r\n                    }\r\n                    return LabelsToNodeIdsProto.newBuilder().setNodeLabels(now.getKey()).addAllNodeId(nodeProtoSet).build();\r\n                }\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllLabelsToNodes(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.labelsToNodes != null) {\r\n        addLabelsToNodesToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetLabelsToNodesResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId t)\n{\r\n    return ((NodeIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    assert false : \"hashCode not designed\";\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setLabelsToNodes(Map<String, Set<NodeId>> map)\n{\r\n    initLabelsToNodes();\r\n    labelsToNodes.clear();\r\n    labelsToNodes.putAll(map);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Set<NodeId>> getLabelsToNodes()\n{\r\n    initLabelsToNodes();\r\n    return this.labelsToNodes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReleaseSharedCacheResourceResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReleaseSharedCacheResourceResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "selectToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token<ClientToAMTokenIdentifier> selectToken(Text service, Collection<Token<? extends TokenIdentifier>> tokens)\n{\r\n    if (service == null) {\r\n        return null;\r\n    }\r\n    LOG.debug(\"Looking for a token with service {}\", service);\r\n    for (Token<? extends TokenIdentifier> token : tokens) {\r\n        LOG.debug(\"Token kind is {} and the token's service name is {}\", token.getKind(), token.getService());\r\n        if (ClientToAMTokenIdentifier.KIND_NAME.equals(token.getKind()) && service.equals(token.getService())) {\r\n            return (Token<ClientToAMTokenIdentifier>) token;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdProto getProto()\n{\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getId()\n{\r\n    Preconditions.checkNotNull(proto);\r\n    return (int) proto.getId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getContainerId()\n{\r\n    Preconditions.checkNotNull(proto);\r\n    return proto.getId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerId(long id)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setId((id));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    return this.applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationAttemptId(ApplicationAttemptId atId)\n{\r\n    if (atId != null) {\r\n        Preconditions.checkNotNull(builder);\r\n        builder.setAppAttemptId(convertToProtoFormat(atId));\r\n    }\r\n    this.applicationAttemptId = atId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptIdPBImpl convertFromProtoFormat(ApplicationAttemptIdProto p)\n{\r\n    return new ApplicationAttemptIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptIdProto convertToProtoFormat(ApplicationAttemptId t)\n{\r\n    return ((ApplicationAttemptIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "build",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void build()\n{\r\n    proto = builder.build();\r\n    builder = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getPluginInfo",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetPluginInfoResponse getPluginInfo(GetPluginInfoRequest request) throws YarnException, IOException\n{\r\n    CsiAdaptorProtos.GetPluginInfoRequest requestProto = ((GetPluginInfoRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetPluginInfoResponsePBImpl(proxy.getPluginInfo(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "validateVolumeCapacity",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ValidateVolumeCapabilitiesResponse validateVolumeCapacity(ValidateVolumeCapabilitiesRequest request) throws YarnException, IOException\n{\r\n    CsiAdaptorProtos.ValidateVolumeCapabilitiesRequest requestProto = ((ValidateVolumeCapabilitiesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new ValidateVolumeCapabilitiesResponsePBImpl(proxy.validateVolumeCapacity(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "nodePublishVolume",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "NodePublishVolumeResponse nodePublishVolume(NodePublishVolumeRequest request) throws IOException, YarnException\n{\r\n    CsiAdaptorProtos.NodePublishVolumeRequest requestProto = ((NodePublishVolumeRequestPBImpl) request).getProto();\r\n    try {\r\n        return new NodePublishVolumeResponsePBImpl(proxy.nodePublishVolume(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "nodeUnpublishVolume",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "NodeUnpublishVolumeResponse nodeUnpublishVolume(NodeUnpublishVolumeRequest request) throws YarnException, IOException\n{\r\n    CsiAdaptorProtos.NodeUnpublishVolumeRequest requestProto = ((NodeUnpublishVolumeRequestPBImpl) request).getProto();\r\n    try {\r\n        return new NodeUnpublishVolumeResponsePBImpl(proxy.nodeUnpublishVolume(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "KillApplicationRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationId != null) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = KillApplicationRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    KillApplicationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.applicationId != null) {\r\n        return this.applicationId;\r\n    }\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null)\r\n        builder.clearApplicationId();\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDiagnostics()\n{\r\n    KillApplicationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDiagnostics()) {\r\n        return null;\r\n    }\r\n    return (p.getDiagnostics());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDiagnostics(String diagnostics)\n{\r\n    maybeInitBuilder();\r\n    if (diagnostics == null) {\r\n        builder.clearDiagnostics();\r\n        return;\r\n    }\r\n    builder.setDiagnostics(diagnostics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "checkAndThrowLabelName",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkAndThrowLabelName(String label) throws IOException\n{\r\n    if (label == null || label.isEmpty() || label.length() > MAX_LABEL_LENGTH) {\r\n        throw new IOException(\"label added is empty or exceeds \" + MAX_LABEL_LENGTH + \" character(s)\");\r\n    }\r\n    label = label.trim();\r\n    boolean match = LABEL_OR_VALUE_PATTERN.matcher(label).matches();\r\n    if (!match) {\r\n        throw new IOException(\"label name should only contains \" + \"{0-9, a-z, A-Z, -, _} and should not started with {-,_}\" + \", now it is= \" + label);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "checkAndThrowAttributeName",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkAndThrowAttributeName(String attributeName) throws IOException\n{\r\n    if (attributeName == null || attributeName.isEmpty() || attributeName.length() > MAX_LABEL_LENGTH) {\r\n        throw new IOException(\"attribute name added is empty or exceeds \" + MAX_LABEL_LENGTH + \" character(s)\");\r\n    }\r\n    attributeName = attributeName.trim();\r\n    boolean match = ATTRIBUTE_NAME_PATTERN.matcher(attributeName).matches();\r\n    if (!match) {\r\n        throw new IOException(\"attribute name should only contains \" + \"{0-9, a-z, A-Z, -, _} and should not started with {-,_}\" + \", now it is= \" + attributeName);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "checkAndThrowAttributeValue",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkAndThrowAttributeValue(String value) throws IOException\n{\r\n    if (value == null) {\r\n        return;\r\n    } else if (value.trim().length() > MAX_LABEL_LENGTH) {\r\n        throw new IOException(\"Attribute value added exceeds \" + MAX_LABEL_LENGTH + \" character(s)\");\r\n    }\r\n    value = value.trim();\r\n    if (value.isEmpty()) {\r\n        return;\r\n    }\r\n    boolean match = ATTRIBUTE_VALUE_PATTERN.matcher(value).matches();\r\n    if (!match) {\r\n        throw new IOException(\"attribute value should only contains \" + \"{0-9, a-z, A-Z, -, _} and should not started with {-,_}\" + \", now it is= \" + value);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "checkAndThrowAttributePrefix",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkAndThrowAttributePrefix(String prefix) throws IOException\n{\r\n    if (prefix == null) {\r\n        throw new IOException(\"Attribute prefix cannot be null.\");\r\n    }\r\n    if (prefix.trim().length() > MAX_LABEL_LENGTH) {\r\n        throw new IOException(\"Attribute value added exceeds \" + MAX_LABEL_LENGTH + \" character(s)\");\r\n    }\r\n    prefix = prefix.trim();\r\n    if (prefix.isEmpty()) {\r\n        return;\r\n    }\r\n    boolean match = PREFIX_PATTERN.matcher(prefix).matches();\r\n    if (!match) {\r\n        throw new IOException(\"attribute value should only contains \" + \"{0-9, a-z, A-Z, -, _,.} and should not started with {-,_}\" + \", now it is= \" + prefix);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "validateNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void validateNodeAttributes(Set<NodeAttribute> attributeSet) throws IOException\n{\r\n    if (attributeSet != null && !attributeSet.isEmpty()) {\r\n        for (NodeAttribute nodeAttribute : attributeSet) {\r\n            NodeAttributeKey attributeKey = nodeAttribute.getAttributeKey();\r\n            if (attributeKey == null) {\r\n                throw new IOException(\"AttributeKey  must be set\");\r\n            }\r\n            String prefix = attributeKey.getAttributePrefix();\r\n            if (Strings.isNullOrEmpty(prefix)) {\r\n                throw new IOException(\"Attribute prefix must be set\");\r\n            }\r\n            checkAndThrowAttributePrefix(prefix);\r\n            checkAndThrowAttributeName(attributeKey.getAttributeName());\r\n            checkAndThrowAttributeValue(nodeAttribute.getAttributeValue());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "filterAttributesByPrefix",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<NodeAttribute> filterAttributesByPrefix(Set<NodeAttribute> attributeSet, String prefix)\n{\r\n    if (Strings.isNullOrEmpty(prefix)) {\r\n        return attributeSet;\r\n    }\r\n    return attributeSet.stream().filter(nodeAttribute -> prefix.equals(nodeAttribute.getAttributeKey().getAttributePrefix())).collect(Collectors.toSet());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "isNodeAttributesEquals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isNodeAttributesEquals(Set<NodeAttribute> leftNodeAttributes, Set<NodeAttribute> rightNodeAttributes)\n{\r\n    if (leftNodeAttributes == null && rightNodeAttributes == null) {\r\n        return true;\r\n    } else if (leftNodeAttributes == null || rightNodeAttributes == null || leftNodeAttributes.size() != rightNodeAttributes.size()) {\r\n        return false;\r\n    }\r\n    return leftNodeAttributes.stream().allMatch(e -> isNodeAttributeIncludes(rightNodeAttributes, e));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "isNodeAttributeIncludes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isNodeAttributeIncludes(Set<NodeAttribute> nodeAttributes, NodeAttribute checkNodeAttribute)\n{\r\n    return nodeAttributes.stream().anyMatch(e -> e.equals(checkNodeAttribute) && Objects.equals(e.getAttributeValue(), checkNodeAttribute.getAttributeValue()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalizationStatusProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"LocalizationStatus: [\").append(\"ResourceKey: \").append(getResourceKey()).append(\", \").append(\"LocalizationState: \").append(getLocalizationState()).append(\", \").append(\"Diagnostics: \").append(getDiagnostics()).append(\", \").append(\"]\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (resourceKey != null) {\r\n        builder.setResourceKey(this.resourceKey);\r\n    }\r\n    if (localizationState != null) {\r\n        builder.setLocalizationState(convertToProtoFormat(localizationState));\r\n    }\r\n    if (diagnostics != null) {\r\n        builder.setDiagnostics(diagnostics);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = LocalizationStatusProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResourceKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getResourceKey()\n{\r\n    LocalizationStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.resourceKey != null) {\r\n        return this.resourceKey;\r\n    }\r\n    if (!p.hasResourceKey()) {\r\n        return null;\r\n    }\r\n    this.resourceKey = p.getResourceKey();\r\n    return this.resourceKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResourceKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResourceKey(String resourceKey)\n{\r\n    maybeInitBuilder();\r\n    if (resourceKey == null) {\r\n        builder.clearResourceKey();\r\n    }\r\n    this.resourceKey = resourceKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getLocalizationState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalizationState getLocalizationState()\n{\r\n    LocalizationStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.localizationState != null) {\r\n        return this.localizationState;\r\n    }\r\n    if (!p.hasLocalizationState()) {\r\n        return null;\r\n    }\r\n    this.localizationState = convertFromProtoFormat(p.getLocalizationState());\r\n    return localizationState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setLocalizationState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLocalizationState(LocalizationState localizationState)\n{\r\n    maybeInitBuilder();\r\n    if (localizationState == null) {\r\n        builder.clearLocalizationState();\r\n    }\r\n    this.localizationState = localizationState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDiagnostics()\n{\r\n    LocalizationStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.diagnostics != null) {\r\n        return this.diagnostics;\r\n    }\r\n    if (!p.hasDiagnostics()) {\r\n        return null;\r\n    }\r\n    this.diagnostics = p.getDiagnostics();\r\n    return diagnostics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setDiagnostics(String diagnostics)\n{\r\n    maybeInitBuilder();\r\n    if (diagnostics == null) {\r\n        builder.clearDiagnostics();\r\n    }\r\n    this.diagnostics = diagnostics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizationStateProto convertToProtoFormat(LocalizationState e)\n{\r\n    return ProtoUtils.convertToProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizationState convertFromProtoFormat(LocalizationStateProto e)\n{\r\n    return ProtoUtils.convertFromProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\log",
  "methodName" : "render",
  "errType" : [ "NumberFormatException", "NumberFormatException", "Exception" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void render(Block html)\n{\r\n    ContainerId containerId = LogAggregationWebUtils.verifyAndGetContainerId(html, $(CONTAINER_ID));\r\n    NodeId nodeId = LogAggregationWebUtils.verifyAndGetNodeId(html, $(NM_NODENAME));\r\n    String appOwner = LogAggregationWebUtils.verifyAndGetAppOwner(html, $(APP_OWNER));\r\n    boolean isValid = true;\r\n    try {\r\n        LogAggregationWebUtils.getLogStartIndex(html, $(\"start\"));\r\n    } catch (NumberFormatException ne) {\r\n        html.h1().__(\"Invalid log start value: \" + $(\"start\")).__();\r\n        isValid = false;\r\n    }\r\n    try {\r\n        LogAggregationWebUtils.getLogEndIndex(html, $(\"end\"));\r\n    } catch (NumberFormatException ne) {\r\n        html.h1().__(\"Invalid log end value: \" + $(\"end\")).__();\r\n        isValid = false;\r\n    }\r\n    if (containerId == null || nodeId == null || appOwner == null || appOwner.isEmpty() || !isValid) {\r\n        return;\r\n    }\r\n    ApplicationId applicationId = containerId.getApplicationAttemptId().getApplicationId();\r\n    String logEntity = $(ENTITY_STRING);\r\n    if (logEntity == null || logEntity.isEmpty()) {\r\n        logEntity = containerId.toString();\r\n    }\r\n    String nmApplicationLogUrl = getApplicationLogURL(applicationId);\r\n    if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\r\n        html.h1().__(\"Aggregation is not enabled. Try the nodemanager at \" + nodeId).__();\r\n        if (nmApplicationLogUrl != null) {\r\n            html.h1().__(\"Or see application log at \" + nmApplicationLogUrl).__();\r\n        }\r\n        return;\r\n    }\r\n    LogAggregationFileController fileController;\r\n    try {\r\n        fileController = this.factory.getFileControllerForRead(applicationId, appOwner);\r\n    } catch (Exception fnf) {\r\n        html.h1().__(\"Logs not available for \" + logEntity + \". Aggregation may not be complete, Check back later or \" + \"try to find the container logs in the local directory of \" + \"nodemanager \" + nodeId).__();\r\n        if (nmApplicationLogUrl != null) {\r\n            html.h1().__(\"Or see application log at \" + nmApplicationLogUrl).__();\r\n        }\r\n        return;\r\n    }\r\n    fileController.renderAggregatedLogsBlock(html, this.context());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\log",
  "methodName" : "getApplicationLogURL",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "String getApplicationLogURL(ApplicationId applicationId)\n{\r\n    String appId = applicationId.toString();\r\n    if (appId == null || appId.isEmpty()) {\r\n        return null;\r\n    }\r\n    String nodeId = $(NM_NODENAME);\r\n    if (nodeId == null || nodeId.isEmpty()) {\r\n        return null;\r\n    }\r\n    StringBuilder sb = new StringBuilder();\r\n    String scheme = YarnConfiguration.useHttps(this.conf) ? \"https://\" : \"http://\";\r\n    String webAppURLWithoutScheme = WebAppUtils.getNMWebAppURLWithoutScheme(conf);\r\n    if (webAppURLWithoutScheme.contains(\":\")) {\r\n        String httpPort = webAppURLWithoutScheme.split(\":\")[1];\r\n        nodeId = NodeId.fromString(nodeId).getHost() + \":\" + httpPort;\r\n    }\r\n    sb.append(scheme).append(nodeId).append(\"/node/application/\").append(appId);\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CsiAdaptorProtos.NodeUnpublishVolumeRequest getProto()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setVolumeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setVolumeId(String volumeId)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    this.builder.setVolumeId(volumeId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setTargetPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTargetPath(String targetPath)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    this.builder.setTargetPath(targetPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getVolumeId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getVolumeId()\n{\r\n    return builder.getVolumeId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getTargetPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getTargetPath()\n{\r\n    return builder.getTargetPath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTime()\n{\r\n    return Calendar.getInstance(utcZone).getTimeInMillis();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnServiceProtos.UpdateContainerErrorProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getReason",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getReason()\n{\r\n    YarnServiceProtos.UpdateContainerErrorProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.reason != null) {\r\n        return this.reason;\r\n    }\r\n    if (p.hasReason()) {\r\n        this.reason = p.getReason();\r\n    }\r\n    return this.reason;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setReason",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReason(String reason)\n{\r\n    maybeInitBuilder();\r\n    if (reason == null) {\r\n        builder.clearReason();\r\n    }\r\n    this.reason = reason;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCurrentContainerVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getCurrentContainerVersion()\n{\r\n    YarnServiceProtos.UpdateContainerErrorProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasCurrentContainerVersion()) {\r\n        return 0;\r\n    }\r\n    return p.getCurrentContainerVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCurrentContainerVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCurrentContainerVersion(int containerVersion)\n{\r\n    maybeInitBuilder();\r\n    builder.setCurrentContainerVersion(containerVersion);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getUpdateContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateContainerRequest getUpdateContainerRequest()\n{\r\n    YarnServiceProtos.UpdateContainerErrorProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.updateRequest != null) {\r\n        return this.updateRequest;\r\n    }\r\n    if (p.hasUpdateRequest()) {\r\n        this.updateRequest = ProtoUtils.convertFromProtoFormat(p.getUpdateRequest());\r\n    }\r\n    return this.updateRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setUpdateContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUpdateContainerRequest(UpdateContainerRequest updateContainerRequest)\n{\r\n    maybeInitBuilder();\r\n    if (updateContainerRequest == null) {\r\n        builder.clearUpdateRequest();\r\n    }\r\n    this.updateRequest = updateContainerRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = YarnServiceProtos.UpdateContainerErrorProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.reason != null) {\r\n        builder.setReason(this.reason);\r\n    }\r\n    if (this.updateRequest != null) {\r\n        builder.setUpdateRequest(ProtoUtils.convertToProtoFormat(this.updateRequest));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetClusterNodeLabelsResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.updatedNodeLabels != null) {\r\n        addNodeLabelsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addNodeLabelsToProto",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addNodeLabelsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeLabels();\r\n    builder.clearDeprecatedNodeLabels();\r\n    List<NodeLabelProto> protoList = new ArrayList<NodeLabelProto>();\r\n    List<String> protoListString = new ArrayList<String>();\r\n    for (NodeLabel r : this.updatedNodeLabels) {\r\n        protoList.add(convertToProtoFormat(r));\r\n        protoListString.add(r.getName());\r\n    }\r\n    builder.addAllNodeLabels(protoList);\r\n    builder.addAllDeprecatedNodeLabels(protoListString);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    assert false : \"hashCode not designed\";\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetClusterNodeLabelsResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeLabelList",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeLabelList(List<NodeLabel> nodeLabels)\n{\r\n    maybeInitBuilder();\r\n    this.updatedNodeLabels = new ArrayList<>();\r\n    if (nodeLabels == null) {\r\n        builder.clearNodeLabels();\r\n        return;\r\n    }\r\n    this.updatedNodeLabels.addAll(nodeLabels);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<String> getNodeLabels()\n{\r\n    Set<String> set = new HashSet<>();\r\n    List<NodeLabel> labelList = getNodeLabelList();\r\n    if (labelList != null) {\r\n        for (NodeLabel label : labelList) {\r\n            set.add(label.getName());\r\n        }\r\n    }\r\n    return set;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeLabels(Set<String> labels)\n{\r\n    List<NodeLabel> list = new ArrayList<>();\r\n    for (String s : labels) {\r\n        list.add(NodeLabel.newInstance(s));\r\n    }\r\n    setNodeLabelList(list);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalNodeLabels()\n{\r\n    GetClusterNodeLabelsResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeLabelProto> attributesProtoList = p.getNodeLabelsList();\r\n    this.updatedNodeLabels = new ArrayList<NodeLabel>();\r\n    for (NodeLabelProto r : attributesProtoList) {\r\n        this.updatedNodeLabels.add(convertFromProtoFormat(r));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeLabelList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<NodeLabel> getNodeLabelList()\n{\r\n    if (this.updatedNodeLabels != null) {\r\n        return this.updatedNodeLabels;\r\n    }\r\n    initLocalNodeLabels();\r\n    return this.updatedNodeLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeLabel convertFromProtoFormat(NodeLabelProto p)\n{\r\n    return new NodeLabelPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeLabelProto convertToProtoFormat(NodeLabel t)\n{\r\n    return ((NodeLabelPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return getProto().toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    super.setConf(conf);\r\n    if (conf != null) {\r\n        smapsEnabled = conf.getBoolean(YarnConfiguration.PROCFS_USE_SMAPS_BASED_RSS_ENABLED, YarnConfiguration.DEFAULT_PROCFS_USE_SMAPS_BASED_RSS_ENABLED);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "isAvailable",
  "errType" : [ "SecurityException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isAvailable()\n{\r\n    try {\r\n        if (!Shell.LINUX) {\r\n            LOG.info(\"ProcfsBasedProcessTree currently is supported only on \" + \"Linux.\");\r\n            return false;\r\n        }\r\n    } catch (SecurityException se) {\r\n        LOG.warn(\"Failed to get Operating System name.\", se);\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "updateProcessTree",
  "errType" : null,
  "containingMethodsNum" : 34,
  "sourceCodeText" : "void updateProcessTree()\n{\r\n    if (!pid.equals(deadPid)) {\r\n        List<String> processList = getProcessList();\r\n        Map<String, ProcessInfo> allProcessInfo = new HashMap<String, ProcessInfo>();\r\n        Map<String, ProcessInfo> oldProcs = new HashMap<String, ProcessInfo>(processTree);\r\n        processTree.clear();\r\n        ProcessInfo me = null;\r\n        for (String proc : processList) {\r\n            ProcessInfo pInfo = new ProcessInfo(proc);\r\n            if (constructProcessInfo(pInfo, procfsDir) != null) {\r\n                allProcessInfo.put(proc, pInfo);\r\n                if (proc.equals(this.pid)) {\r\n                    me = pInfo;\r\n                    processTree.put(proc, pInfo);\r\n                }\r\n            }\r\n        }\r\n        if (me == null) {\r\n            return;\r\n        }\r\n        for (Map.Entry<String, ProcessInfo> entry : allProcessInfo.entrySet()) {\r\n            String pID = entry.getKey();\r\n            if (!\"1\".equals(pID)) {\r\n                ProcessInfo pInfo = entry.getValue();\r\n                String ppid = pInfo.getPpid();\r\n                if (\"1\".equals(ppid)) {\r\n                    String sid = pInfo.getSessionId().toString();\r\n                    if (!pID.equals(sid)) {\r\n                        ppid = sid;\r\n                    }\r\n                }\r\n                ProcessInfo parentPInfo = allProcessInfo.get(ppid);\r\n                if (parentPInfo != null) {\r\n                    parentPInfo.addChild(pInfo);\r\n                }\r\n            }\r\n        }\r\n        List<ProcessInfo> children = me.getChildren();\r\n        Queue<ProcessInfo> pInfoQueue = new ArrayDeque<ProcessInfo>(children);\r\n        while (!pInfoQueue.isEmpty()) {\r\n            ProcessInfo pInfo = pInfoQueue.remove();\r\n            if (!processTree.containsKey(pInfo.getPid())) {\r\n                processTree.put(pInfo.getPid(), pInfo);\r\n            }\r\n            pInfoQueue.addAll(pInfo.getChildren());\r\n        }\r\n        for (Map.Entry<String, ProcessInfo> procs : processTree.entrySet()) {\r\n            ProcessInfo oldInfo = oldProcs.get(procs.getKey());\r\n            if (procs.getValue() != null) {\r\n                procs.getValue().updateJiffy(oldInfo);\r\n                if (oldInfo != null) {\r\n                    procs.getValue().updateAge(oldInfo);\r\n                }\r\n            }\r\n        }\r\n        LOG.debug(\"{}\", this);\r\n        if (smapsEnabled) {\r\n            processSMAPTree.clear();\r\n            for (ProcessInfo p : processTree.values()) {\r\n                if (p != null) {\r\n                    ProcessTreeSmapMemInfo memInfo = new ProcessTreeSmapMemInfo(p.getPid());\r\n                    constructProcessSMAPInfo(memInfo, procfsDir);\r\n                    processSMAPTree.put(p.getPid(), memInfo);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "checkPidPgrpidForMatch",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean checkPidPgrpidForMatch()\n{\r\n    return checkPidPgrpidForMatch(pid, PROCFS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "checkPidPgrpidForMatch",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean checkPidPgrpidForMatch(String _pid, String procfs)\n{\r\n    ProcessInfo pInfo = new ProcessInfo(_pid);\r\n    pInfo = constructProcessInfo(pInfo, procfs);\r\n    if (pInfo == null)\r\n        return true;\r\n    String pgrpId = pInfo.getPgrpId().toString();\r\n    return pgrpId.equals(_pid);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCurrentProcessIDs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getCurrentProcessIDs()\n{\r\n    return Collections.unmodifiableList(new ArrayList<>(processTree.keySet()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getProcessTreeDump",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getProcessTreeDump()\n{\r\n    StringBuilder ret = new StringBuilder();\r\n    ret.append(String.format(\"\\t|- PID PPID PGRPID SESSID CMD_NAME \" + \"USER_MODE_TIME(MILLIS) SYSTEM_TIME(MILLIS) VMEM_USAGE(BYTES) \" + \"RSSMEM_USAGE(PAGES) FULL_CMD_LINE%n\"));\r\n    for (ProcessInfo p : processTree.values()) {\r\n        if (p != null) {\r\n            ret.append(String.format(PROCESSTREE_DUMP_FORMAT, p.getPid(), p.getPpid(), p.getPgrpId(), p.getSessionId(), p.getName(), p.getUtime(), p.getStime(), p.getVmem(), p.getRssmemPage(), p.getCmdLine(procfsDir)));\r\n        }\r\n    }\r\n    return ret.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getVirtualMemorySize(int olderThanAge)\n{\r\n    long total = 0L;\r\n    boolean isAvailable = false;\r\n    for (ProcessInfo p : processTree.values()) {\r\n        if (p != null) {\r\n            isAvailable = true;\r\n            if (p.getAge() > olderThanAge) {\r\n                total += p.getVmem();\r\n            }\r\n        }\r\n    }\r\n    return isAvailable ? total : UNAVAILABLE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getRssMemorySize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "long getRssMemorySize(int olderThanAge)\n{\r\n    if (PAGE_SIZE < 0) {\r\n        return UNAVAILABLE;\r\n    }\r\n    if (smapsEnabled) {\r\n        return getSmapBasedRssMemorySize(olderThanAge);\r\n    }\r\n    boolean isAvailable = false;\r\n    long totalPages = 0;\r\n    for (ProcessInfo p : processTree.values()) {\r\n        if (p != null) {\r\n            isAvailable = true;\r\n            if (p.getAge() > olderThanAge) {\r\n                totalPages += p.getRssmemPage();\r\n            }\r\n        }\r\n    }\r\n    return isAvailable ? totalPages * PAGE_SIZE : UNAVAILABLE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getSmapBasedRssMemorySize",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "long getSmapBasedRssMemorySize(int olderThanAge)\n{\r\n    long total = UNAVAILABLE;\r\n    for (ProcessInfo p : processTree.values()) {\r\n        if (p != null) {\r\n            if (total == UNAVAILABLE) {\r\n                total = 0;\r\n            }\r\n            if (p.getAge() > olderThanAge) {\r\n                ProcessTreeSmapMemInfo procMemInfo = processSMAPTree.get(p.getPid());\r\n                if (procMemInfo != null) {\r\n                    for (ProcessSmapMemoryInfo info : procMemInfo.getMemoryInfoList()) {\r\n                        if (info.getPermission().trim().equalsIgnoreCase(READ_ONLY_WITH_SHARED_PERMISSION) || info.getPermission().trim().equalsIgnoreCase(READ_EXECUTE_WITH_SHARED_PERMISSION)) {\r\n                            continue;\r\n                        }\r\n                        total += info.anonymous;\r\n                        LOG.debug(\" total({}): PID : {}, info : {}, total : {}\", olderThanAge, p.getPid(), info, (total * KB_TO_BYTES));\r\n                    }\r\n                    LOG.debug(\"{}\", procMemInfo);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (total > 0) {\r\n        total *= KB_TO_BYTES;\r\n    }\r\n    LOG.info(\"SmapBasedCumulativeRssmem (bytes) : \" + total);\r\n    return total;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCumulativeCpuTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getCumulativeCpuTime()\n{\r\n    if (JIFFY_LENGTH_IN_MILLIS < 0) {\r\n        return UNAVAILABLE;\r\n    }\r\n    long incJiffies = 0;\r\n    boolean isAvailable = false;\r\n    for (ProcessInfo p : processTree.values()) {\r\n        if (p != null) {\r\n            isAvailable = true;\r\n            incJiffies += p.getDtime();\r\n        }\r\n    }\r\n    if (isAvailable) {\r\n        if (cpuTime == UNAVAILABLE) {\r\n            cpuTime = 0L;\r\n        }\r\n        cpuTime += incJiffies * JIFFY_LENGTH_IN_MILLIS;\r\n    }\r\n    return cpuTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getTotalProcessJiffies",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "BigInteger getTotalProcessJiffies()\n{\r\n    BigInteger totalStime = BigInteger.ZERO;\r\n    long totalUtime = 0;\r\n    for (ProcessInfo p : processTree.values()) {\r\n        if (p != null) {\r\n            totalUtime += p.getUtime();\r\n            totalStime = totalStime.add(p.getStime());\r\n        }\r\n    }\r\n    return totalStime.add(BigInteger.valueOf(totalUtime));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCpuUsagePercent",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "float getCpuUsagePercent()\n{\r\n    BigInteger processTotalJiffies = getTotalProcessJiffies();\r\n    LOG.debug(\"Process {} jiffies:{}\", pid, processTotalJiffies);\r\n    cpuTimeTracker.updateElapsedJiffies(processTotalJiffies, clock.getTime());\r\n    return cpuTimeTracker.getCpuTrackerUsagePercent();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getValidPID",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getValidPID(String pid)\n{\r\n    if (pid == null)\r\n        return deadPid;\r\n    Matcher m = numberPattern.matcher(pid);\r\n    if (m.matches())\r\n        return pid;\r\n    return deadPid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getProcessList",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<String> getProcessList()\n{\r\n    List<String> processList = Collections.emptyList();\r\n    FileFilter procListFileFilter = new AndFileFilter(DirectoryFileFilter.INSTANCE, new RegexFileFilter(numberPattern));\r\n    File dir = new File(procfsDir);\r\n    File[] processDirs = dir.listFiles(procListFileFilter);\r\n    if (ArrayUtils.isNotEmpty(processDirs)) {\r\n        processList = new ArrayList<String>(processDirs.length);\r\n        for (File processDir : processDirs) {\r\n            processList.add(processDir.getName());\r\n        }\r\n    }\r\n    return processList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "constructProcessInfo",
  "errType" : [ "FileNotFoundException", "IOException", "IOException", "IOException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "ProcessInfo constructProcessInfo(ProcessInfo pinfo, String procfsDir)\n{\r\n    ProcessInfo ret = null;\r\n    BufferedReader in = null;\r\n    InputStreamReader fReader = null;\r\n    try {\r\n        File pidDir = new File(procfsDir, pinfo.getPid());\r\n        fReader = new InputStreamReader(new FileInputStream(new File(pidDir, PROCFS_STAT_FILE)), Charset.forName(\"UTF-8\"));\r\n        in = new BufferedReader(fReader);\r\n    } catch (FileNotFoundException f) {\r\n        return ret;\r\n    }\r\n    ret = pinfo;\r\n    try {\r\n        String str = in.readLine();\r\n        Matcher m = PROCFS_STAT_FILE_FORMAT.matcher(str);\r\n        boolean mat = m.find();\r\n        if (mat) {\r\n            String processName = \"(\" + m.group(2) + \")\";\r\n            pinfo.updateProcessInfo(processName, m.group(3), Integer.parseInt(m.group(4)), Integer.parseInt(m.group(5)), Long.parseLong(m.group(7)), new BigInteger(m.group(8)), Long.parseLong(m.group(10)), Long.parseLong(m.group(11)));\r\n        } else {\r\n            LOG.warn(\"Unexpected: procfs stat file is not in the expected format\" + \" for process with pid \" + pinfo.getPid());\r\n            ret = null;\r\n        }\r\n    } catch (IOException io) {\r\n        LOG.warn(\"Error reading the stream\", io);\r\n        ret = null;\r\n    } finally {\r\n        try {\r\n            fReader.close();\r\n            try {\r\n                in.close();\r\n            } catch (IOException i) {\r\n                LOG.warn(\"Error closing the stream\", i);\r\n            }\r\n        } catch (IOException i) {\r\n            LOG.warn(\"Error closing the stream\", i);\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuffer pTree = new StringBuffer(\"[ \");\r\n    for (String p : processTree.keySet()) {\r\n        pTree.append(p);\r\n        pTree.append(\" \");\r\n    }\r\n    return pTree.substring(0, pTree.length()) + \"]\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "contains",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean contains(String pid)\n{\r\n    return processTree.containsKey(pid);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "constructProcessSMAPInfo",
  "errType" : [ "FileNotFoundException", "IOException", "Throwable", "Throwable" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void constructProcessSMAPInfo(ProcessTreeSmapMemInfo pInfo, String procfsDir)\n{\r\n    BufferedReader in = null;\r\n    InputStreamReader fReader = null;\r\n    try {\r\n        File pidDir = new File(procfsDir, pInfo.getPid());\r\n        File file = new File(pidDir, SMAPS);\r\n        if (!file.exists()) {\r\n            return;\r\n        }\r\n        fReader = new InputStreamReader(new FileInputStream(file), Charset.forName(\"UTF-8\"));\r\n        in = new BufferedReader(fReader);\r\n        ProcessSmapMemoryInfo memoryMappingInfo = null;\r\n        List<String> lines = IOUtils.readLines(in);\r\n        for (String line : lines) {\r\n            line = line.trim();\r\n            try {\r\n                Matcher address = ADDRESS_PATTERN.matcher(line);\r\n                if (address.find()) {\r\n                    memoryMappingInfo = new ProcessSmapMemoryInfo(line);\r\n                    memoryMappingInfo.setPermission(address.group(4));\r\n                    pInfo.getMemoryInfoList().add(memoryMappingInfo);\r\n                    continue;\r\n                }\r\n                Matcher memInfo = MEM_INFO_PATTERN.matcher(line);\r\n                if (memInfo.find()) {\r\n                    String key = memInfo.group(1).trim();\r\n                    String value = memInfo.group(2).replace(KB, \"\").trim();\r\n                    LOG.debug(\"MemInfo : {} : Value  : {}\", key, value);\r\n                    if (memoryMappingInfo != null) {\r\n                        memoryMappingInfo.setMemInfo(key, value);\r\n                    }\r\n                }\r\n            } catch (Throwable t) {\r\n                LOG.warn(\"Error parsing smaps line : \" + line + \"; \" + t.getMessage());\r\n            }\r\n        }\r\n    } catch (FileNotFoundException f) {\r\n        LOG.error(f.toString());\r\n    } catch (IOException e) {\r\n        LOG.error(e.toString());\r\n    } catch (Throwable t) {\r\n        LOG.error(t.toString());\r\n    } finally {\r\n        org.apache.hadoop.io.IOUtils.closeStream(in);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "main",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    if (args.length != 1) {\r\n        System.out.println(\"Provide <pid of process to monitor>\");\r\n        return;\r\n    }\r\n    int numprocessors = ResourceCalculatorPlugin.getResourceCalculatorPlugin(null, null).getNumProcessors();\r\n    System.out.println(\"Number of processors \" + numprocessors);\r\n    System.out.println(\"Creating ProcfsBasedProcessTree for process \" + args[0]);\r\n    ProcfsBasedProcessTree procfsBasedProcessTree = new ProcfsBasedProcessTree(args[0]);\r\n    procfsBasedProcessTree.updateProcessTree();\r\n    System.out.println(procfsBasedProcessTree.getProcessTreeDump());\r\n    System.out.println(\"Get cpu usage \" + procfsBasedProcessTree.getCpuUsagePercent());\r\n    try {\r\n        Thread.sleep(500L);\r\n    } catch (InterruptedException e) {\r\n    }\r\n    procfsBasedProcessTree.updateProcessTree();\r\n    System.out.println(procfsBasedProcessTree.getProcessTreeDump());\r\n    System.out.println(\"Cpu usage  \" + procfsBasedProcessTree.getCpuUsagePercent());\r\n    System.out.println(\"Vmem usage in bytes \" + procfsBasedProcessTree.getVirtualMemorySize());\r\n    System.out.println(\"Rss mem usage in bytes \" + procfsBasedProcessTree.getRssMemorySize());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetContainerStatusesRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerIds != null) {\r\n        addLocalContainerIdsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetContainerStatusesRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalContainerIdsToProto",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addLocalContainerIdsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainerId();\r\n    if (this.containerIds == null)\r\n        return;\r\n    List<ContainerIdProto> protoList = new ArrayList<ContainerIdProto>();\r\n    for (ContainerId id : containerIds) {\r\n        protoList.add(convertToProtoFormat(id));\r\n    }\r\n    builder.addAllContainerId(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalContainerIds",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalContainerIds()\n{\r\n    if (this.containerIds != null) {\r\n        return;\r\n    }\r\n    GetContainerStatusesRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerIdProto> containerIds = p.getContainerIdList();\r\n    this.containerIds = new ArrayList<ContainerId>();\r\n    for (ContainerIdProto id : containerIds) {\r\n        this.containerIds.add(convertFromProtoFormat(id));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerIds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerId> getContainerIds()\n{\r\n    initLocalContainerIds();\r\n    return this.containerIds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerIds",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerIds(List<ContainerId> containerIds)\n{\r\n    maybeInitBuilder();\r\n    if (containerIds == null)\r\n        builder.clearContainerId();\r\n    this.containerIds = containerIds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshNodesResourcesRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "getCurrentState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Enum<?> getCurrentState()\n{\r\n    return currentState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "getEvent",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Enum<?> getEvent()\n{\r\n    return event;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "StopContainersRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerIds != null) {\r\n        addLocalContainerIdsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = StopContainersRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalContainerIdsToProto",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addLocalContainerIdsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainerId();\r\n    if (this.containerIds == null)\r\n        return;\r\n    List<ContainerIdProto> protoList = new ArrayList<ContainerIdProto>();\r\n    for (ContainerId id : containerIds) {\r\n        protoList.add(convertToProtoFormat(id));\r\n    }\r\n    builder.addAllContainerId(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalContainerIds",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalContainerIds()\n{\r\n    if (this.containerIds != null) {\r\n        return;\r\n    }\r\n    StopContainersRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerIdProto> containerIds = p.getContainerIdList();\r\n    this.containerIds = new ArrayList<ContainerId>();\r\n    for (ContainerIdProto id : containerIds) {\r\n        this.containerIds.add(convertFromProtoFormat(id));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerIds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerId> getContainerIds()\n{\r\n    initLocalContainerIds();\r\n    return this.containerIds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerIds",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerIds(List<ContainerId> containerIds)\n{\r\n    maybeInitBuilder();\r\n    if (containerIds == null)\r\n        builder.clearContainerId();\r\n    this.containerIds = containerIds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetAttributesToNodesRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodeAttributes != null) {\r\n        addLocalAttributesToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalAttributesToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addLocalAttributesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeAttributes();\r\n    if (nodeAttributes == null) {\r\n        return;\r\n    }\r\n    Iterable<NodeAttributeKeyProto> iterable = () -> new Iterator<NodeAttributeKeyProto>() {\r\n\r\n        private Iterator<NodeAttributeKey> iter = nodeAttributes.iterator();\r\n\r\n        @Override\r\n        public boolean hasNext() {\r\n            return iter.hasNext();\r\n        }\r\n\r\n        @Override\r\n        public NodeAttributeKeyProto next() {\r\n            return convertToProtoFormat(iter.next());\r\n        }\r\n\r\n        @Override\r\n        public void remove() {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    };\r\n    builder.addAllNodeAttributes(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeAttributeKeyPBImpl convertFromProtoFormat(NodeAttributeKeyProto p)\n{\r\n    return new NodeAttributeKeyPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeKeyProto convertToProtoFormat(NodeAttributeKey t)\n{\r\n    return ((NodeAttributeKeyPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetAttributesToNodesRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initNodeAttributes()\n{\r\n    if (this.nodeAttributes != null) {\r\n        return;\r\n    }\r\n    YarnServiceProtos.GetAttributesToNodesRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeAttributeKeyProto> nodeAttributesList = p.getNodeAttributesList();\r\n    this.nodeAttributes = new HashSet<>();\r\n    nodeAttributesList.forEach((v) -> nodeAttributes.add(convertFromProtoFormat(v)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeAttributes(Set<NodeAttributeKey> attributes)\n{\r\n    maybeInitBuilder();\r\n    if (nodeAttributes == null) {\r\n        builder.clearNodeAttributes();\r\n    }\r\n    this.nodeAttributes = attributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<NodeAttributeKey> getNodeAttributes()\n{\r\n    initNodeAttributes();\r\n    return this.nodeAttributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationDeleteResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReInitializeContainerRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerId != null) {\r\n        builder.setContainerId(ProtoUtils.convertToProtoFormat(this.containerId));\r\n    }\r\n    if (this.containerLaunchContext != null) {\r\n        builder.setContainerLaunchContext(convertToProtoFormat(this.containerLaunchContext));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReInitializeContainerRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    ReInitializeContainerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerId != null) {\r\n        return this.containerId;\r\n    }\r\n    if (!p.hasContainerId()) {\r\n        return null;\r\n    }\r\n    this.containerId = ProtoUtils.convertFromProtoFormat(p.getContainerId());\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)\n{\r\n    maybeInitBuilder();\r\n    if (containerId == null) {\r\n        builder.clearContainerId();\r\n    }\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerLaunchContext getContainerLaunchContext()\n{\r\n    ReInitializeContainerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerLaunchContext != null) {\r\n        return this.containerLaunchContext;\r\n    }\r\n    if (!p.hasContainerLaunchContext()) {\r\n        return null;\r\n    }\r\n    this.containerLaunchContext = convertFromProtoFormat(p.getContainerLaunchContext());\r\n    return this.containerLaunchContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerLaunchContext(ContainerLaunchContext containerLaunchContext)\n{\r\n    maybeInitBuilder();\r\n    if (containerLaunchContext == null)\r\n        builder.clearContainerLaunchContext();\r\n    this.containerLaunchContext = containerLaunchContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAutoCommit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean getAutoCommit()\n{\r\n    ReInitializeContainerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAutoCommit()) {\r\n        return false;\r\n    }\r\n    return (p.getAutoCommit());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAutoCommit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAutoCommit(boolean autoCommit)\n{\r\n    maybeInitBuilder();\r\n    builder.setAutoCommit(autoCommit);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerLaunchContextPBImpl convertFromProtoFormat(ContainerLaunchContextProto p)\n{\r\n    return new ContainerLaunchContextPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerLaunchContextProto convertToProtoFormat(ContainerLaunchContext t)\n{\r\n    return ((ContainerLaunchContextPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "addListener",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addListener(StateTransitionListener<OPERAND, EVENT, STATE> listener)\n{\r\n    listeners.add(listener);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "preTransition",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void preTransition(OPERAND op, STATE beforeState, EVENT eventToBeProcessed)\n{\r\n    for (StateTransitionListener<OPERAND, EVENT, STATE> listener : listeners) {\r\n        listener.preTransition(op, beforeState, eventToBeProcessed);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "postTransition",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void postTransition(OPERAND op, STATE beforeState, STATE afterState, EVENT processedEvent)\n{\r\n    for (StateTransitionListener<OPERAND, EVENT, STATE> listener : listeners) {\r\n        listener.postTransition(op, beforeState, afterState, processedEvent);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnServiceProtos.CommitResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "getTimestamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTimestamp()\n{\r\n    return timestamp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TYPE getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return \"EventType: \" + getType();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerReport> getContainerList()\n{\r\n    initLocalContainerList();\r\n    return this.containerList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerList(List<ContainerReport> containers)\n{\r\n    maybeInitBuilder();\r\n    if (containers == null) {\r\n        builder.clearContainers();\r\n    }\r\n    this.containerList = containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetContainersResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerList != null) {\r\n        addLocalContainersToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetContainersResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalContainerList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalContainerList()\n{\r\n    if (this.containerList != null) {\r\n        return;\r\n    }\r\n    GetContainersResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerReportProto> list = p.getContainersList();\r\n    containerList = new ArrayList<ContainerReport>();\r\n    for (ContainerReportProto c : list) {\r\n        containerList.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalContainersToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addLocalContainersToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainers();\r\n    if (containerList == null) {\r\n        return;\r\n    }\r\n    Iterable<ContainerReportProto> iterable = new Iterable<ContainerReportProto>() {\r\n\r\n        @Override\r\n        public Iterator<ContainerReportProto> iterator() {\r\n            return new Iterator<ContainerReportProto>() {\r\n\r\n                Iterator<ContainerReport> iter = containerList.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ContainerReportProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllContainers(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerReportPBImpl convertFromProtoFormat(ContainerReportProto p)\n{\r\n    return new ContainerReportPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerReportProto convertToProtoFormat(ContainerReport t)\n{\r\n    return ((ContainerReportPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerStateProto convertToProtoFormat(ContainerState state)\n{\r\n    switch(state) {\r\n        case NEW:\r\n            return ContainerStateProto.C_NEW;\r\n        case RUNNING:\r\n            return ContainerStateProto.C_RUNNING;\r\n        case COMPLETE:\r\n            return ContainerStateProto.C_COMPLETE;\r\n        default:\r\n            throw new IllegalArgumentException(\"ContainerState conversion unsupported\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerState convertFromProtoFormat(ContainerStateProto proto)\n{\r\n    switch(proto) {\r\n        case C_NEW:\r\n            return ContainerState.NEW;\r\n        case C_RUNNING:\r\n            return ContainerState.RUNNING;\r\n        case C_COMPLETE:\r\n            return ContainerState.COMPLETE;\r\n        default:\r\n            throw new IllegalArgumentException(\"ContainerStateProto conversion unsupported\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerSubStateProto convertToProtoFormat(ContainerSubState state)\n{\r\n    switch(state) {\r\n        case SCHEDULED:\r\n            return ContainerSubStateProto.CSS_SCHEDULED;\r\n        case RUNNING:\r\n            return ContainerSubStateProto.CSS_RUNNING;\r\n        case PAUSED:\r\n            return ContainerSubStateProto.CSS_PAUSED;\r\n        case COMPLETING:\r\n            return ContainerSubStateProto.CSS_COMPLETING;\r\n        case DONE:\r\n            return ContainerSubStateProto.CSS_DONE;\r\n        default:\r\n            throw new IllegalArgumentException(\"ContainerSubState conversion unsupported\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerSubState convertFromProtoFormat(ContainerSubStateProto proto)\n{\r\n    switch(proto) {\r\n        case CSS_SCHEDULED:\r\n            return ContainerSubState.SCHEDULED;\r\n        case CSS_RUNNING:\r\n            return ContainerSubState.RUNNING;\r\n        case CSS_PAUSED:\r\n            return ContainerSubState.PAUSED;\r\n        case CSS_COMPLETING:\r\n            return ContainerSubState.COMPLETING;\r\n        case CSS_DONE:\r\n            return ContainerSubState.DONE;\r\n        default:\r\n            throw new IllegalArgumentException(\"ContainerSubStateProto conversion unsupported\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeStateProto convertToProtoFormat(NodeState e)\n{\r\n    return NodeStateProto.valueOf(NODE_STATE_PREFIX + e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeState convertFromProtoFormat(NodeStateProto e)\n{\r\n    return NodeState.valueOf(e.name().replace(NODE_STATE_PREFIX, \"\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId e)\n{\r\n    return ((NodeIdPBImpl) e).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId convertFromProtoFormat(NodeIdProto e)\n{\r\n    return new NodeIdPBImpl(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnApplicationStateProto convertToProtoFormat(YarnApplicationState e)\n{\r\n    return YarnApplicationStateProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnApplicationState convertFromProtoFormat(YarnApplicationStateProto e)\n{\r\n    return YarnApplicationState.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnApplicationAttemptStateProto convertToProtoFormat(YarnApplicationAttemptState e)\n{\r\n    return YarnApplicationAttemptStateProto.valueOf(YARN_APPLICATION_ATTEMPT_STATE_PREFIX + e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnApplicationAttemptState convertFromProtoFormat(YarnApplicationAttemptStateProto e)\n{\r\n    return YarnApplicationAttemptState.valueOf(e.name().replace(YARN_APPLICATION_ATTEMPT_STATE_PREFIX, \"\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnServiceProtos.ApplicationsRequestScopeProto convertToProtoFormat(ApplicationsRequestScope e)\n{\r\n    return YarnServiceProtos.ApplicationsRequestScopeProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationsRequestScope convertFromProtoFormat(YarnServiceProtos.ApplicationsRequestScopeProto e)\n{\r\n    return ApplicationsRequestScope.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationResourceUsageReportProto convertToProtoFormat(ApplicationResourceUsageReport e)\n{\r\n    return ((ApplicationResourceUsageReportPBImpl) e).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationResourceUsageReport convertFromProtoFormat(ApplicationResourceUsageReportProto e)\n{\r\n    return new ApplicationResourceUsageReportPBImpl(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinalApplicationStatusProto convertToProtoFormat(FinalApplicationStatus e)\n{\r\n    return FinalApplicationStatusProto.valueOf(FINAL_APPLICATION_STATUS_PREFIX + e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinalApplicationStatus convertFromProtoFormat(FinalApplicationStatusProto e)\n{\r\n    return FinalApplicationStatus.valueOf(e.name().replace(FINAL_APPLICATION_STATUS_PREFIX, \"\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResourceTypeProto convertToProtoFormat(LocalResourceType e)\n{\r\n    return LocalResourceTypeProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResourceType convertFromProtoFormat(LocalResourceTypeProto e)\n{\r\n    return LocalResourceType.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResourceVisibilityProto convertToProtoFormat(LocalResourceVisibility e)\n{\r\n    return LocalResourceVisibilityProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResourceVisibility convertFromProtoFormat(LocalResourceVisibilityProto e)\n{\r\n    return LocalResourceVisibility.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AMCommandProto convertToProtoFormat(AMCommand e)\n{\r\n    return AMCommandProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AMCommand convertFromProtoFormat(AMCommandProto e)\n{\r\n    return AMCommand.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnProtos.RejectionReasonProto convertToProtoFormat(RejectionReason e)\n{\r\n    return YarnProtos.RejectionReasonProto.valueOf(REJECTION_REASON_PREFIX + e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RejectionReason convertFromProtoFormat(YarnProtos.RejectionReasonProto e)\n{\r\n    return RejectionReason.valueOf(e.name().replace(REJECTION_REASON_PREFIX, \"\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ByteBuffer convertFromProtoFormat(ByteString byteString)\n{\r\n    int capacity = byteString.asReadOnlyByteBuffer().rewind().remaining();\r\n    byte[] b = new byte[capacity];\r\n    byteString.asReadOnlyByteBuffer().get(b, 0, capacity);\r\n    return ByteBuffer.wrap(b);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ByteString convertToProtoFormat(ByteBuffer byteBuffer)\n{\r\n    int oldPos = byteBuffer.position();\r\n    byteBuffer.rewind();\r\n    ByteString bs = ByteString.copyFrom(byteBuffer);\r\n    byteBuffer.position(oldPos);\r\n    return bs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueStateProto convertToProtoFormat(QueueState e)\n{\r\n    return QueueStateProto.valueOf(QUEUE_STATE_PREFIX + e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueState convertFromProtoFormat(QueueStateProto e)\n{\r\n    return QueueState.valueOf(e.name().replace(QUEUE_STATE_PREFIX, \"\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueACLProto convertToProtoFormat(QueueACL e)\n{\r\n    return QueueACLProto.valueOf(QUEUE_ACL_PREFIX + e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueACL convertFromProtoFormat(QueueACLProto e)\n{\r\n    return QueueACL.valueOf(e.name().replace(QUEUE_ACL_PREFIX, \"\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAccessTypeProto convertToProtoFormat(ApplicationAccessType e)\n{\r\n    return ApplicationAccessTypeProto.valueOf(APP_ACCESS_TYPE_PREFIX + e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAccessType convertFromProtoFormat(ApplicationAccessTypeProto e)\n{\r\n    return ApplicationAccessType.valueOf(e.name().replace(APP_ACCESS_TYPE_PREFIX, \"\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationTimeoutTypeProto convertToProtoFormat(ApplicationTimeoutType e)\n{\r\n    return ApplicationTimeoutTypeProto.valueOf(APP_TIMEOUT_TYPE_PREFIX + e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationTimeoutType convertFromProtoFormat(ApplicationTimeoutTypeProto e)\n{\r\n    return ApplicationTimeoutType.valueOf(e.name().replace(APP_TIMEOUT_TYPE_PREFIX, \"\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationRequestInterpreterProto convertToProtoFormat(ReservationRequestInterpreter e)\n{\r\n    return ReservationRequestInterpreterProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationRequestInterpreter convertFromProtoFormat(ReservationRequestInterpreterProto e)\n{\r\n    return ReservationRequestInterpreter.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationStatusProto convertToProtoFormat(LogAggregationStatus e)\n{\r\n    return LogAggregationStatusProto.valueOf(LOG_AGGREGATION_STATUS_PREFIX + e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationStatus convertFromProtoFormat(LogAggregationStatusProto e)\n{\r\n    return LogAggregationStatus.valueOf(e.name().substring(LOG_AGGREGATION_STATUS_PREFIX_LEN));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerTypeProto convertToProtoFormat(ContainerType e)\n{\r\n    return ContainerTypeProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerType convertFromProtoFormat(ContainerTypeProto e)\n{\r\n    return ContainerType.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeUpdateTypeProto convertToProtoFormat(NodeUpdateType e)\n{\r\n    return NodeUpdateTypeProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeUpdateType convertFromProtoFormat(NodeUpdateTypeProto e)\n{\r\n    return NodeUpdateType.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionTypeProto convertToProtoFormat(ExecutionType e)\n{\r\n    return ExecutionTypeProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionType convertFromProtoFormat(ExecutionTypeProto e)\n{\r\n    return ExecutionType.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerUpdateTypeProto convertToProtoFormat(ContainerUpdateType e)\n{\r\n    return ContainerUpdateTypeProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerUpdateType convertFromProtoFormat(ContainerUpdateTypeProto e)\n{\r\n    return ContainerUpdateType.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource r)\n{\r\n    return ResourcePBImpl.getProto(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource convertFromProtoFormat(ResourceProto resource)\n{\r\n    return new ResourcePBImpl(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerRetryPolicyProto convertToProtoFormat(ContainerRetryPolicy e)\n{\r\n    return ContainerRetryPolicyProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerRetryPolicy convertFromProtoFormat(ContainerRetryPolicyProto e)\n{\r\n    return ContainerRetryPolicy.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionTypeRequestProto convertToProtoFormat(ExecutionTypeRequest e)\n{\r\n    return ((ExecutionTypeRequestPBImpl) e).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ExecutionTypeRequest convertFromProtoFormat(ExecutionTypeRequestProto e)\n{\r\n    return new ExecutionTypeRequestPBImpl(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnProtos.ContainerProto convertToProtoFormat(Container t)\n{\r\n    return ((ContainerPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerPBImpl convertFromProtoFormat(YarnProtos.ContainerProto t)\n{\r\n    return new ContainerPBImpl(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerStatusPBImpl convertFromProtoFormat(YarnProtos.ContainerStatusProto p)\n{\r\n    return new ContainerStatusPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UpdateContainerRequestPBImpl convertFromProtoFormat(YarnServiceProtos.UpdateContainerRequestProto p)\n{\r\n    return new UpdateContainerRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnServiceProtos.UpdateContainerRequestProto convertToProtoFormat(UpdateContainerRequest t)\n{\r\n    return ((UpdateContainerRequestPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UpdateContainerErrorPBImpl convertFromProtoFormat(YarnServiceProtos.UpdateContainerErrorProto p)\n{\r\n    return new UpdateContainerErrorPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnServiceProtos.UpdateContainerErrorProto convertToProtoFormat(UpdateContainerError t)\n{\r\n    return ((UpdateContainerErrorPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "converToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceTypesProto converToProtoFormat(ResourceTypes e)\n{\r\n    return ResourceTypesProto.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceTypes convertFromProtoFormat(ResourceTypesProto e)\n{\r\n    return ResourceTypes.valueOf(e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertStringLongMapProtoListToMap",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<String, Long> convertStringLongMapProtoListToMap(List<YarnProtos.StringLongMapProto> pList)\n{\r\n    Resource tmp = Resource.newInstance(0, 0);\r\n    Map<String, Long> ret = new HashMap<>();\r\n    for (ResourceInformation entry : tmp.getResources()) {\r\n        ret.put(entry.getName(), 0L);\r\n    }\r\n    if (pList != null) {\r\n        for (YarnProtos.StringLongMapProto p : pList) {\r\n            ret.put(p.getKey(), p.getValue());\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertMapToStringLongMapProtoList",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<YarnProtos.StringLongMapProto> convertMapToStringLongMapProtoList(Map<String, Long> map)\n{\r\n    List<YarnProtos.StringLongMapProto> ret = new ArrayList<>();\r\n    for (Map.Entry<String, Long> entry : map.entrySet()) {\r\n        YarnProtos.StringLongMapProto.Builder tmp = YarnProtos.StringLongMapProto.newBuilder();\r\n        tmp.setKey(entry.getKey());\r\n        tmp.setValue(entry.getValue());\r\n        ret.add(tmp.build());\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertMapToStringFloatMapProtoList",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<YarnProtos.StringFloatMapProto> convertMapToStringFloatMapProtoList(Map<String, Float> map)\n{\r\n    List<YarnProtos.StringFloatMapProto> ret = new ArrayList<>();\r\n    if (map != null) {\r\n        for (Map.Entry<String, Float> entry : map.entrySet()) {\r\n            YarnProtos.StringFloatMapProto.Builder tmp = YarnProtos.StringFloatMapProto.newBuilder();\r\n            tmp.setKey(entry.getKey());\r\n            tmp.setValue(entry.getValue());\r\n            ret.add(tmp.build());\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertStringStringMapProtoListToMap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, String> convertStringStringMapProtoListToMap(List<StringStringMapProto> pList)\n{\r\n    Map<String, String> ret = new HashMap<>();\r\n    if (pList != null) {\r\n        for (StringStringMapProto p : pList) {\r\n            if (p.hasKey()) {\r\n                ret.put(p.getKey(), p.getValue());\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertStringFloatMapProtoListToMap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, Float> convertStringFloatMapProtoListToMap(List<YarnProtos.StringFloatMapProto> pList)\n{\r\n    Map<String, Float> ret = new HashMap<>();\r\n    if (pList != null) {\r\n        for (YarnProtos.StringFloatMapProto p : pList) {\r\n            if (p.hasKey()) {\r\n                ret.put(p.getKey(), p.getValue());\r\n            }\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<YarnProtos.StringStringMapProto> convertToProtoFormat(Map<String, String> stringMap)\n{\r\n    List<YarnProtos.StringStringMapProto> pList = new ArrayList<>();\r\n    if (stringMap != null && !stringMap.isEmpty()) {\r\n        StringStringMapProto.Builder pBuilder = StringStringMapProto.newBuilder();\r\n        for (Map.Entry<String, String> entry : stringMap.entrySet()) {\r\n            pBuilder.setKey(entry.getKey());\r\n            pBuilder.setValue(entry.getValue());\r\n            pList.add(pBuilder.build());\r\n        }\r\n    }\r\n    return pList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PlacementConstraintTargetProto.TargetType convertToProtoFormat(TargetExpression.TargetType t)\n{\r\n    return PlacementConstraintTargetProto.TargetType.valueOf(t.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TargetExpression.TargetType convertFromProtoFormat(PlacementConstraintTargetProto.TargetType t)\n{\r\n    return TargetExpression.TargetType.valueOf(t.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimedPlacementConstraintProto.DelayUnit convertToProtoFormat(TimedPlacementConstraint.DelayUnit u)\n{\r\n    return TimedPlacementConstraintProto.DelayUnit.valueOf(u.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimedPlacementConstraint.DelayUnit convertFromProtoFormat(TimedPlacementConstraintProto.DelayUnit u)\n{\r\n    return TimedPlacementConstraint.DelayUnit.valueOf(u.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizationStateProto convertToProtoFormat(LocalizationState e)\n{\r\n    return LocalizationStateProto.valueOf(LOCALIZATION_STATE_PREFIX + e.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizationState convertFromProtoFormat(LocalizationStateProto e)\n{\r\n    return LocalizationState.valueOf(e.name().replace(LOCALIZATION_STATE_PREFIX, \"\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "performFailover",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void performFailover(T currentProxy)\n{\r\n    RPC.stopProxy(currentProxy);\r\n    Set<String> rmIds = new HashSet<>();\r\n    for (Entry<String, T> entry : proxies.entrySet()) {\r\n        T proxy = entry.getValue();\r\n        if (proxy.equals(currentProxy)) {\r\n            String rmId = entry.getKey();\r\n            rmIds.add(rmId);\r\n        }\r\n    }\r\n    for (String rmId : rmIds) {\r\n        proxies.remove(rmId);\r\n    }\r\n    super.performFailover(currentProxy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetLabelsToNodesRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (nodeLabels != null && !nodeLabels.isEmpty()) {\r\n        builder.clearNodeLabels();\r\n        builder.addAllNodeLabels(nodeLabels);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetLabelsToNodesRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initNodeLabels()\n{\r\n    if (this.nodeLabels != null) {\r\n        return;\r\n    }\r\n    GetLabelsToNodesRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<String> nodeLabelsList = p.getNodeLabelsList();\r\n    this.nodeLabels = new HashSet<String>();\r\n    this.nodeLabels.addAll(nodeLabelsList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getNodeLabels()\n{\r\n    initNodeLabels();\r\n    return this.nodeLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeLabels(Set<String> nodeLabels)\n{\r\n    maybeInitBuilder();\r\n    if (nodeLabels == null)\r\n        builder.clearNodeLabels();\r\n    this.nodeLabels = nodeLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "render",
  "errType" : [ "Exception", "IOException", "IOException", "RuntimeException", "Exception", "Exception" ],
  "containingMethodsNum" : 45,
  "sourceCodeText" : "void render(Block html)\n{\r\n    BlockParameters params = verifyAndParseParameters(html);\r\n    if (params == null) {\r\n        return;\r\n    }\r\n    ApplicationId appId = params.getAppId();\r\n    ContainerId containerId = params.getContainerId();\r\n    NodeId nodeId = params.getNodeId();\r\n    String appOwner = params.getAppOwner();\r\n    String logEntity = params.getLogEntity();\r\n    long start = params.getStartIndex();\r\n    long end = params.getEndIndex();\r\n    long startTime = params.getStartTime();\r\n    long endTime = params.getEndTime();\r\n    List<FileStatus> nodeFiles = null;\r\n    try {\r\n        nodeFiles = LogAggregationUtils.getRemoteNodeFileList(conf, appId, appOwner, this.fileController.getRemoteRootLogDir(), this.fileController.getRemoteRootLogDirSuffix());\r\n    } catch (Exception ex) {\r\n        html.h1(\"Unable to locate any logs for container \" + containerId.toString());\r\n        LOG.error(ex.getMessage());\r\n        return;\r\n    }\r\n    Map<String, Long> checkSumFiles;\r\n    try {\r\n        checkSumFiles = fileController.parseCheckSumFiles(nodeFiles);\r\n    } catch (IOException ex) {\r\n        LOG.error(\"Error getting logs for \" + logEntity, ex);\r\n        html.h1(\"Error getting logs for \" + logEntity);\r\n        return;\r\n    }\r\n    List<FileStatus> fileToRead;\r\n    try {\r\n        fileToRead = fileController.getNodeLogFileToRead(nodeFiles, nodeId.toString(), appId);\r\n    } catch (IOException ex) {\r\n        LOG.error(\"Error getting logs for \" + logEntity, ex);\r\n        html.h1(\"Error getting logs for \" + logEntity);\r\n        return;\r\n    }\r\n    boolean foundLog = false;\r\n    String desiredLogType = $(CONTAINER_LOG_TYPE);\r\n    try {\r\n        for (FileStatus thisNodeFile : fileToRead) {\r\n            Long checkSumIndex = checkSumFiles.get(thisNodeFile.getPath().getName());\r\n            long endIndex = -1;\r\n            if (checkSumIndex != null) {\r\n                endIndex = checkSumIndex.longValue();\r\n            }\r\n            IndexedLogsMeta indexedLogsMeta = null;\r\n            try {\r\n                indexedLogsMeta = fileController.loadIndexedLogsMeta(thisNodeFile.getPath(), endIndex, appId);\r\n            } catch (Exception ex) {\r\n                LOG.warn(\"Can not load log meta from the log file:\" + thisNodeFile.getPath());\r\n                continue;\r\n            }\r\n            if (indexedLogsMeta == null) {\r\n                continue;\r\n            }\r\n            Map<ApplicationAccessType, String> appAcls = indexedLogsMeta.getAcls();\r\n            String user = indexedLogsMeta.getUser();\r\n            String remoteUser = request().getRemoteUser();\r\n            if (!checkAcls(conf, appId, user, appAcls, remoteUser)) {\r\n                html.h1().__(\"User [\" + remoteUser + \"] is not authorized to view the logs for \" + logEntity + \" in log file [\" + thisNodeFile.getPath().getName() + \"]\").__();\r\n                LOG.error(\"User [\" + remoteUser + \"] is not authorized to view the logs for \" + logEntity);\r\n                continue;\r\n            }\r\n            String compressAlgo = indexedLogsMeta.getCompressName();\r\n            List<IndexedFileLogMeta> candidates = new ArrayList<>();\r\n            for (IndexedPerAggregationLogMeta logMeta : indexedLogsMeta.getLogMetas()) {\r\n                for (Entry<String, List<IndexedFileLogMeta>> meta : logMeta.getLogMetas().entrySet()) {\r\n                    for (IndexedFileLogMeta log : meta.getValue()) {\r\n                        if (!log.getContainerId().equals(containerId.toString())) {\r\n                            continue;\r\n                        }\r\n                        if (desiredLogType != null && !desiredLogType.isEmpty() && !desiredLogType.equals(log.getFileName())) {\r\n                            continue;\r\n                        }\r\n                        candidates.add(log);\r\n                    }\r\n                }\r\n            }\r\n            if (candidates.isEmpty()) {\r\n                continue;\r\n            }\r\n            foundLog = readContainerLog(compressAlgo, html, thisNodeFile, start, end, candidates, startTime, endTime, foundLog, logEntity);\r\n        }\r\n        if (!foundLog) {\r\n            if (desiredLogType.isEmpty()) {\r\n                html.h1(\"No logs available for container \" + containerId.toString());\r\n            } else {\r\n                html.h1(\"Unable to locate '\" + desiredLogType + \"' log for container \" + containerId.toString());\r\n            }\r\n        }\r\n    } catch (RuntimeException e) {\r\n        throw e;\r\n    } catch (Exception ex) {\r\n        html.h1().__(\"Error getting logs for \" + logEntity).__();\r\n        LOG.error(\"Error getting logs for \" + logEntity, ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 5,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\ifile",
  "methodName" : "readContainerLog",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "boolean readContainerLog(String compressAlgo, Block html, FileStatus thisNodeFile, long start, long end, List<IndexedFileLogMeta> candidates, long startTime, long endTime, boolean foundLog, String logEntity) throws IOException\n{\r\n    Algorithm compressName = Compression.getCompressionAlgorithmByName(compressAlgo);\r\n    Decompressor decompressor = compressName.getDecompressor();\r\n    FileContext fileContext = FileContext.getFileContext(thisNodeFile.getPath().toUri(), conf);\r\n    try (FSDataInputStream fsin = fileContext.open(thisNodeFile.getPath())) {\r\n        int bufferSize = 65536;\r\n        for (IndexedFileLogMeta candidate : candidates) {\r\n            if (candidate.getLastModifiedTime() < startTime || candidate.getLastModifiedTime() > endTime) {\r\n                continue;\r\n            }\r\n            byte[] cbuf = new byte[bufferSize];\r\n            InputStream in = null;\r\n            try {\r\n                in = compressName.createDecompressionStream(new BoundedRangeFileInputStream(fsin, candidate.getStartIndex(), candidate.getFileCompressedSize()), decompressor, LogAggregationIndexedFileController.getFSInputBufferSize(conf));\r\n                long logLength = candidate.getFileSize();\r\n                html.pre().__(\"\\n\\n\").__();\r\n                html.p().__(\"Log Type: \" + candidate.getFileName()).__();\r\n                html.p().__(\"Log Upload Time: \" + Times.format(candidate.getLastModifiedTime())).__();\r\n                html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\r\n                long[] range = checkParseRange(html, start, end, startTime, endTime, logLength, candidate.getFileName());\r\n                processContainerLog(html, range, in, bufferSize, cbuf);\r\n                foundLog = true;\r\n            } catch (Exception ex) {\r\n                LOG.error(\"Error getting logs for \" + logEntity, ex);\r\n                continue;\r\n            } finally {\r\n                IOUtils.closeStream(in);\r\n            }\r\n        }\r\n    }\r\n    return foundLog;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getUserAclsInfoList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<QueueUserACLInfo> getUserAclsInfoList()\n{\r\n    initLocalQueueUserAclsList();\r\n    return queueUserAclsInfoList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setUserAclsInfoList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setUserAclsInfoList(List<QueueUserACLInfo> queueUserAclsList)\n{\r\n    if (queueUserAclsList == null) {\r\n        builder.clearQueueUserAcls();\r\n    }\r\n    this.queueUserAclsInfoList = queueUserAclsList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetQueueUserAclsInfoResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.queueUserAclsInfoList != null) {\r\n        addLocalQueueUserACLInfosToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetQueueUserAclsInfoResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalQueueUserAclsList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalQueueUserAclsList()\n{\r\n    if (this.queueUserAclsInfoList != null) {\r\n        return;\r\n    }\r\n    GetQueueUserAclsInfoResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<QueueUserACLInfoProto> list = p.getQueueUserAclsList();\r\n    queueUserAclsInfoList = new ArrayList<QueueUserACLInfo>();\r\n    for (QueueUserACLInfoProto a : list) {\r\n        queueUserAclsInfoList.add(convertFromProtoFormat(a));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalQueueUserACLInfosToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addLocalQueueUserACLInfosToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearQueueUserAcls();\r\n    if (queueUserAclsInfoList == null)\r\n        return;\r\n    Iterable<QueueUserACLInfoProto> iterable = new Iterable<QueueUserACLInfoProto>() {\r\n\r\n        @Override\r\n        public Iterator<QueueUserACLInfoProto> iterator() {\r\n            return new Iterator<QueueUserACLInfoProto>() {\r\n\r\n                Iterator<QueueUserACLInfo> iter = queueUserAclsInfoList.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public QueueUserACLInfoProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllQueueUserAcls(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "QueueUserACLInfoPBImpl convertFromProtoFormat(QueueUserACLInfoProto p)\n{\r\n    return new QueueUserACLInfoPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "QueueUserACLInfoProto convertToProtoFormat(QueueUserACLInfo t)\n{\r\n    return ((QueueUserACLInfoPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationResourceUsageReportProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.usedResources != null) {\r\n        builder.setUsedResources(convertToProtoFormat(this.usedResources));\r\n    }\r\n    if (this.reservedResources != null) {\r\n        builder.setReservedResources(convertToProtoFormat(this.reservedResources));\r\n    }\r\n    if (this.neededResources != null) {\r\n        builder.setNeededResources(convertToProtoFormat(this.neededResources));\r\n    }\r\n    builder.clearApplicationResourceUsageMap();\r\n    builder.clearApplicationPreemptedResourceUsageMap();\r\n    if (preemptedResourceSecondsMap != null && !preemptedResourceSecondsMap.isEmpty()) {\r\n        builder.addAllApplicationPreemptedResourceUsageMap(ProtoUtils.convertMapToStringLongMapProtoList(preemptedResourceSecondsMap));\r\n    }\r\n    if (resourceSecondsMap != null && !resourceSecondsMap.isEmpty()) {\r\n        builder.addAllApplicationResourceUsageMap(ProtoUtils.convertMapToStringLongMapProtoList(resourceSecondsMap));\r\n    }\r\n    builder.setMemorySeconds(this.getMemorySeconds());\r\n    builder.setVcoreSeconds(this.getVcoreSeconds());\r\n    builder.setPreemptedMemorySeconds(this.getPreemptedMemorySeconds());\r\n    builder.setPreemptedVcoreSeconds(this.getPreemptedVcoreSeconds());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ApplicationResourceUsageReportProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumUsedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumUsedContainers()\n{\r\n    ApplicationResourceUsageReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getNumUsedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumUsedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumUsedContainers(int num_containers)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumUsedContainers((num_containers));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumReservedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumReservedContainers()\n{\r\n    ApplicationResourceUsageReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getNumReservedContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumReservedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumReservedContainers(int num_reserved_containers)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumReservedContainers((num_reserved_containers));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getUsedResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getUsedResources()\n{\r\n    ApplicationResourceUsageReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.usedResources != null) {\r\n        return this.usedResources;\r\n    }\r\n    if (!p.hasUsedResources()) {\r\n        return null;\r\n    }\r\n    this.usedResources = convertFromProtoFormat(p.getUsedResources());\r\n    return this.usedResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setUsedResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUsedResources(Resource resources)\n{\r\n    maybeInitBuilder();\r\n    if (resources == null)\r\n        builder.clearUsedResources();\r\n    this.usedResources = resources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getReservedResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getReservedResources()\n{\r\n    ApplicationResourceUsageReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.reservedResources != null) {\r\n        return this.reservedResources;\r\n    }\r\n    if (!p.hasReservedResources()) {\r\n        return null;\r\n    }\r\n    this.reservedResources = convertFromProtoFormat(p.getReservedResources());\r\n    return this.reservedResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setReservedResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservedResources(Resource reserved_resources)\n{\r\n    maybeInitBuilder();\r\n    if (reserved_resources == null)\r\n        builder.clearReservedResources();\r\n    this.reservedResources = reserved_resources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNeededResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getNeededResources()\n{\r\n    ApplicationResourceUsageReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.neededResources != null) {\r\n        return this.neededResources;\r\n    }\r\n    if (!p.hasNeededResources()) {\r\n        return null;\r\n    }\r\n    this.neededResources = convertFromProtoFormat(p.getNeededResources());\r\n    return this.neededResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNeededResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNeededResources(Resource reserved_resources)\n{\r\n    maybeInitBuilder();\r\n    if (reserved_resources == null)\r\n        builder.clearNeededResources();\r\n    this.neededResources = reserved_resources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setMemorySeconds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setMemorySeconds(long memory_seconds)\n{\r\n    getResourceSecondsMap().put(ResourceInformation.MEMORY_MB.getName(), memory_seconds);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getMemorySeconds",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getMemorySeconds()\n{\r\n    Map<String, Long> tmp = getResourceSecondsMap();\r\n    if (tmp.containsKey(ResourceInformation.MEMORY_MB.getName())) {\r\n        return tmp.get(ResourceInformation.MEMORY_MB.getName());\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setVcoreSeconds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setVcoreSeconds(long vcore_seconds)\n{\r\n    getResourceSecondsMap().put(ResourceInformation.VCORES.getName(), vcore_seconds);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getVcoreSeconds",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getVcoreSeconds()\n{\r\n    Map<String, Long> tmp = getResourceSecondsMap();\r\n    if (tmp.containsKey(ResourceInformation.VCORES.getName())) {\r\n        return tmp.get(ResourceInformation.VCORES.getName());\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPreemptedMemorySeconds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setPreemptedMemorySeconds(long preemptedMemorySeconds)\n{\r\n    getPreemptedResourceSecondsMap().put(ResourceInformation.MEMORY_MB.getName(), preemptedMemorySeconds);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPreemptedMemorySeconds",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getPreemptedMemorySeconds()\n{\r\n    Map<String, Long> tmp = getPreemptedResourceSecondsMap();\r\n    if (tmp.containsKey(ResourceInformation.MEMORY_MB.getName())) {\r\n        return tmp.get(ResourceInformation.MEMORY_MB.getName());\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPreemptedVcoreSeconds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setPreemptedVcoreSeconds(long vcoreSeconds)\n{\r\n    getPreemptedResourceSecondsMap().put(ResourceInformation.VCORES.getName(), vcoreSeconds);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPreemptedVcoreSeconds",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getPreemptedVcoreSeconds()\n{\r\n    Map<String, Long> tmp = getPreemptedResourceSecondsMap();\r\n    if (tmp.containsKey(ResourceInformation.VCORES.getName())) {\r\n        return tmp.get(ResourceInformation.VCORES.getName());\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource t)\n{\r\n    return ProtoUtils.convertToProtoFormat(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getQueueUsagePercentage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getQueueUsagePercentage()\n{\r\n    ApplicationResourceUsageReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getQueueUsagePercentage());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setQueueUsagePercentage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setQueueUsagePercentage(float queueUsagePerc)\n{\r\n    maybeInitBuilder();\r\n    builder.setQueueUsagePercentage((queueUsagePerc));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getClusterUsagePercentage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getClusterUsagePercentage()\n{\r\n    ApplicationResourceUsageReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getClusterUsagePercentage());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setClusterUsagePercentage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setClusterUsagePercentage(float clusterUsagePerc)\n{\r\n    maybeInitBuilder();\r\n    builder.setClusterUsagePercentage((clusterUsagePerc));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResourceSecondsMap",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setResourceSecondsMap(Map<String, Long> resourceSecondsMap)\n{\r\n    this.resourceSecondsMap = resourceSecondsMap;\r\n    if (resourceSecondsMap == null) {\r\n        return;\r\n    }\r\n    if (!resourceSecondsMap.containsKey(ResourceInformation.MEMORY_MB.getName())) {\r\n        this.setMemorySeconds(0L);\r\n    }\r\n    if (!resourceSecondsMap.containsKey(ResourceInformation.VCORES.getName())) {\r\n        this.setVcoreSeconds(0L);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResourceSecondsMap",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Map<String, Long> getResourceSecondsMap()\n{\r\n    if (this.resourceSecondsMap != null) {\r\n        return this.resourceSecondsMap;\r\n    }\r\n    ApplicationResourceUsageReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.resourceSecondsMap = ProtoUtils.convertStringLongMapProtoListToMap(p.getApplicationResourceUsageMapList());\r\n    if (!this.resourceSecondsMap.containsKey(ResourceInformation.MEMORY_MB.getName())) {\r\n        this.setMemorySeconds(p.getMemorySeconds());\r\n    }\r\n    if (!this.resourceSecondsMap.containsKey(ResourceInformation.VCORES.getName())) {\r\n        this.setVcoreSeconds(p.getVcoreSeconds());\r\n    }\r\n    this.setMemorySeconds(p.getMemorySeconds());\r\n    this.setVcoreSeconds(p.getVcoreSeconds());\r\n    return this.resourceSecondsMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPreemptedResourceSecondsMap",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setPreemptedResourceSecondsMap(Map<String, Long> preemptedResourceSecondsMap)\n{\r\n    this.preemptedResourceSecondsMap = preemptedResourceSecondsMap;\r\n    if (preemptedResourceSecondsMap == null) {\r\n        return;\r\n    }\r\n    if (!preemptedResourceSecondsMap.containsKey(ResourceInformation.MEMORY_MB.getName())) {\r\n        this.setPreemptedMemorySeconds(0L);\r\n    }\r\n    if (!preemptedResourceSecondsMap.containsKey(ResourceInformation.VCORES.getName())) {\r\n        this.setPreemptedVcoreSeconds(0L);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPreemptedResourceSecondsMap",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Map<String, Long> getPreemptedResourceSecondsMap()\n{\r\n    if (this.preemptedResourceSecondsMap != null) {\r\n        return this.preemptedResourceSecondsMap;\r\n    }\r\n    ApplicationResourceUsageReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.preemptedResourceSecondsMap = ProtoUtils.convertStringLongMapProtoListToMap(p.getApplicationPreemptedResourceUsageMapList());\r\n    if (!this.preemptedResourceSecondsMap.containsKey(ResourceInformation.MEMORY_MB.getName())) {\r\n        this.setPreemptedMemorySeconds(p.getPreemptedMemorySeconds());\r\n    }\r\n    if (!this.preemptedResourceSecondsMap.containsKey(ResourceInformation.VCORES.getName())) {\r\n        this.setPreemptedVcoreSeconds(p.getPreemptedVcoreSeconds());\r\n    }\r\n    this.setPreemptedMemorySeconds(p.getPreemptedMemorySeconds());\r\n    this.setPreemptedVcoreSeconds(p.getPreemptedVcoreSeconds());\r\n    return this.preemptedResourceSecondsMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getContextAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getContextAppId()\n{\r\n    return contextAppId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    if (!YarnConfiguration.timelineServiceV2Enabled(conf)) {\r\n        throw new IOException(\"Timeline V2 client is not properly configured. \" + \"Either timeline service is not enabled or version is not set to\" + \" 2\");\r\n    }\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    UserGroupInformation realUgi = ugi.getRealUser();\r\n    String doAsUser = null;\r\n    if (realUgi != null) {\r\n        authUgi = realUgi;\r\n        doAsUser = ugi.getShortUserName();\r\n    } else {\r\n        authUgi = ugi;\r\n        doAsUser = null;\r\n    }\r\n    DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token();\r\n    connector = new TimelineConnector(false, authUgi, doAsUser, token);\r\n    addIfService(connector);\r\n    maxServiceRetries = conf.getInt(YarnConfiguration.TIMELINE_SERVICE_CLIENT_MAX_RETRIES, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_MAX_RETRIES);\r\n    serviceRetryInterval = conf.getLong(YarnConfiguration.TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_RETRY_INTERVAL_MS);\r\n    entityDispatcher = new TimelineEntityDispatcher(conf);\r\n    subAppEntityDispatcher = new TimelineEntityDispatcher(conf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n    entityDispatcher.start();\r\n    subAppEntityDispatcher.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    entityDispatcher.stop();\r\n    subAppEntityDispatcher.stop();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void putEntities(TimelineEntity... entities) throws IOException, YarnException\n{\r\n    entityDispatcher.dispatchEntities(true, entities, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putEntitiesAsync",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void putEntitiesAsync(TimelineEntity... entities) throws IOException, YarnException\n{\r\n    entityDispatcher.dispatchEntities(false, entities, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putSubAppEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void putSubAppEntities(TimelineEntity... entities) throws IOException, YarnException\n{\r\n    subAppEntityDispatcher.dispatchEntities(true, entities, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putSubAppEntitiesAsync",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void putSubAppEntitiesAsync(TimelineEntity... entities) throws IOException, YarnException\n{\r\n    subAppEntityDispatcher.dispatchEntities(false, entities, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setTimelineCollectorInfo",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setTimelineCollectorInfo(CollectorInfo collectorInfo)\n{\r\n    if (collectorInfo == null) {\r\n        LOG.warn(\"Not setting collector info as it is null.\");\r\n        return;\r\n    }\r\n    if (collectorInfo.getCollectorToken() != null) {\r\n        setTimelineDelegationToken(collectorInfo.getCollectorToken(), collectorInfo.getCollectorAddr());\r\n    }\r\n    if (collectorInfo.getCollectorAddr() != null && !collectorInfo.getCollectorAddr().isEmpty() && !collectorInfo.getCollectorAddr().equals(timelineServiceAddress)) {\r\n        this.timelineServiceAddress = collectorInfo.getCollectorAddr();\r\n        LOG.info(\"Updated timeline service address to \" + timelineServiceAddress);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setTimelineDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void setTimelineDelegationToken(Token delegationToken, String collectorAddr)\n{\r\n    if (!delegationToken.getKind().equals(TimelineDelegationTokenIdentifier.KIND_NAME.toString())) {\r\n        LOG.warn(\"Timeline token to be updated should be of kind \" + TimelineDelegationTokenIdentifier.KIND_NAME);\r\n        return;\r\n    }\r\n    if (collectorAddr == null || collectorAddr.isEmpty()) {\r\n        collectorAddr = timelineServiceAddress;\r\n    }\r\n    String service = delegationToken.getService();\r\n    if ((service == null || service.isEmpty()) && (collectorAddr == null || collectorAddr.isEmpty())) {\r\n        LOG.warn(\"Timeline token does not have service and timeline service \" + \"address is not yet set. Not updating the token\");\r\n        return;\r\n    }\r\n    if (currentTimelineToken != null && currentTimelineToken.equals(delegationToken)) {\r\n        return;\r\n    }\r\n    currentTimelineToken = delegationToken;\r\n    org.apache.hadoop.security.token.Token<TimelineDelegationTokenIdentifier> timelineToken = new org.apache.hadoop.security.token.Token<TimelineDelegationTokenIdentifier>(delegationToken.getIdentifier().array(), delegationToken.getPassword().array(), new Text(delegationToken.getKind()), service == null ? new Text() : new Text(service));\r\n    InetSocketAddress serviceAddr = (collectorAddr != null && !collectorAddr.isEmpty()) ? NetUtils.createSocketAddr(collectorAddr) : SecurityUtil.getTokenServiceAddr(timelineToken);\r\n    SecurityUtil.setTokenService(timelineToken, serviceAddr);\r\n    authUgi.addToken(timelineToken);\r\n    LOG.info(\"Updated timeline delegation token \" + timelineToken);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putObjects",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void putObjects(String path, MultivaluedMap<String, String> params, Object obj) throws IOException, YarnException\n{\r\n    int retries = verifyRestEndPointAvailable();\r\n    boolean needRetry = true;\r\n    while (needRetry) {\r\n        try {\r\n            URI uri = TimelineConnector.constructResURI(getConfig(), timelineServiceAddress, RESOURCE_URI_STR_V2);\r\n            putObjects(uri, path, params, obj);\r\n            needRetry = false;\r\n        } catch (IOException e) {\r\n            checkRetryWithSleep(retries, e);\r\n            retries--;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "checkRetryWithSleep",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void checkRetryWithSleep(int retries, IOException e) throws YarnException, IOException\n{\r\n    if (retries > 0) {\r\n        try {\r\n            Thread.sleep(this.serviceRetryInterval);\r\n        } catch (InterruptedException ex) {\r\n            Thread.currentThread().interrupt();\r\n            throw new YarnException(\"Interrupted while retrying to connect to ATS\");\r\n        }\r\n    } else {\r\n        StringBuilder msg = new StringBuilder(\"TimelineClient has reached to max retry times : \");\r\n        msg.append(this.maxServiceRetries).append(\" for service address: \").append(timelineServiceAddress);\r\n        LOG.error(msg.toString());\r\n        throw new IOException(msg.toString(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "doPutObjects",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ClientResponse doPutObjects(URI base, String path, MultivaluedMap<String, String> params, Object obj)\n{\r\n    return connector.getClient().resource(base).path(path).queryParams(params).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).put(ClientResponse.class, obj);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putObjects",
  "errType" : [ "UndeclaredThrowableException", "InterruptedException", "ClientHandlerException|UniformInterfaceException", "Throwable", "ClientHandlerException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void putObjects(URI base, String path, MultivaluedMap<String, String> params, Object obj) throws IOException, YarnException\n{\r\n    ClientResponse resp = null;\r\n    try {\r\n        resp = authUgi.doAs(new PrivilegedExceptionAction<ClientResponse>() {\r\n\r\n            @Override\r\n            public ClientResponse run() throws Exception {\r\n                return doPutObjects(base, path, params, obj);\r\n            }\r\n        });\r\n    } catch (UndeclaredThrowableException ue) {\r\n        Throwable cause = ue.getCause();\r\n        if (cause instanceof IOException) {\r\n            throw (IOException) cause;\r\n        } else {\r\n            throw new IOException(cause);\r\n        }\r\n    } catch (InterruptedException ie) {\r\n        throw (IOException) new InterruptedIOException().initCause(ie);\r\n    }\r\n    if (resp == null) {\r\n        String msg = \"Error getting HTTP response from the timeline server.\";\r\n        LOG.error(msg);\r\n        throw new YarnException(msg);\r\n    } else if (resp.getStatusInfo().getStatusCode() == ClientResponse.Status.OK.getStatusCode()) {\r\n        try {\r\n            resp.close();\r\n        } catch (ClientHandlerException che) {\r\n            LOG.warn(\"Error closing the HTTP response's inputstream. \", che);\r\n        }\r\n    } else {\r\n        String msg = \"\";\r\n        try {\r\n            String stringType = resp.getEntity(String.class);\r\n            msg = \"Server response:\\n\" + stringType;\r\n        } catch (ClientHandlerException | UniformInterfaceException chuie) {\r\n            msg = \"Error getting entity from the HTTP response.\" + chuie.getLocalizedMessage();\r\n        } catch (Throwable t) {\r\n            msg = \"Error getting entity from the HTTP response.\" + t.getLocalizedMessage();\r\n        } finally {\r\n            msg = \"Response from the timeline server is not successful\" + \", HTTP error code: \" + resp.getStatus() + \", \" + msg;\r\n            LOG.error(msg);\r\n            throw new YarnException(msg);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "verifyRestEndPointAvailable",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int verifyRestEndPointAvailable() throws YarnException\n{\r\n    int retries = pollTimelineServiceAddress(this.maxServiceRetries);\r\n    if (timelineServiceAddress == null) {\r\n        String errMessage = \"TimelineClient has reached to max retry times : \" + this.maxServiceRetries + \", but failed to fetch timeline service address. Please verify\" + \" Timeline Auxiliary Service is configured in all the NMs\";\r\n        LOG.error(errMessage);\r\n        throw new YarnException(errMessage);\r\n    }\r\n    return retries;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "pollTimelineServiceAddress",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int pollTimelineServiceAddress(int retries) throws YarnException\n{\r\n    while (timelineServiceAddress == null && retries > 0) {\r\n        try {\r\n            Thread.sleep(this.serviceRetryInterval);\r\n        } catch (InterruptedException e) {\r\n            Thread.currentThread().interrupt();\r\n            throw new YarnException(\"Interrupted while trying to connect ATS\");\r\n        }\r\n        retries--;\r\n    }\r\n    return retries;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "IncreaseContainersResourceRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containersToIncrease != null) {\r\n        addIncreaseContainersToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = IncreaseContainersResourceRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainersToIncrease",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<Token> getContainersToIncrease()\n{\r\n    if (containersToIncrease != null) {\r\n        return containersToIncrease;\r\n    }\r\n    IncreaseContainersResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<TokenProto> list = p.getIncreaseContainersList();\r\n    containersToIncrease = new ArrayList<>();\r\n    for (TokenProto c : list) {\r\n        containersToIncrease.add(convertFromProtoFormat(c));\r\n    }\r\n    return containersToIncrease;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainersToIncrease",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainersToIncrease(List<Token> containersToIncrease)\n{\r\n    maybeInitBuilder();\r\n    if (containersToIncrease == null) {\r\n        builder.clearIncreaseContainers();\r\n    }\r\n    this.containersToIncrease = containersToIncrease;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addIncreaseContainersToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addIncreaseContainersToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearIncreaseContainers();\r\n    if (this.containersToIncrease == null) {\r\n        return;\r\n    }\r\n    Iterable<TokenProto> iterable = new Iterable<TokenProto>() {\r\n\r\n        @Override\r\n        public Iterator<TokenProto> iterator() {\r\n            return new Iterator<TokenProto>() {\r\n\r\n                Iterator<Token> iter = containersToIncrease.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public TokenProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllIncreaseContainers(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Token convertFromProtoFormat(TokenProto p)\n{\r\n    return new TokenPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token t)\n{\r\n    return ((TokenPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "increase",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void increase(Resource res)\n{\r\n    update(res, Long::sum);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "increaseWithMultiplier",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void increaseWithMultiplier(Resource res, long multiplier)\n{\r\n    update(res, (v1, v2) -> v1 + v2 * multiplier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "decrease",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void decrease(Resource res)\n{\r\n    update(res, (v1, v2) -> v1 - v2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "decreaseWithMultiplier",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void decreaseWithMultiplier(Resource res, int containers)\n{\r\n    update(res, (v1, v2) -> v1 - v2 * containers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "set",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void set(Resource res)\n{\r\n    update(res, (v1, v2) -> v2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "update",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void update(Resource res, BiFunction<Long, Long, Long> operation)\n{\r\n    if (ResourceUtils.getNumberOfKnownResourceTypes() > 2) {\r\n        ResourceInformation[] resources = res.getResources();\r\n        for (int i = 2; i < resources.length; i++) {\r\n            ResourceInformation resource = resources[i];\r\n            if (!values.containsKey(resource.getName())) {\r\n                values.put(resource.getName(), 0L);\r\n            }\r\n            values.merge(resource.getName(), resource.getValue(), operation);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "getValues",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Long> getValues()\n{\r\n    return values;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeResourceMap",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<NodeId, ResourceOption> getNodeResourceMap()\n{\r\n    initNodeResourceMap();\r\n    return this.nodeResourceMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeResourceMap",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeResourceMap(Map<NodeId, ResourceOption> nodeResourceMap)\n{\r\n    if (nodeResourceMap == null) {\r\n        return;\r\n    }\r\n    initNodeResourceMap();\r\n    this.nodeResourceMap.clear();\r\n    this.nodeResourceMap.putAll(nodeResourceMap);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateNodeResourceRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodeResourceMap != null) {\r\n        addNodeResourceMap();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeResourceMap",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initNodeResourceMap()\n{\r\n    if (this.nodeResourceMap != null) {\r\n        return;\r\n    }\r\n    UpdateNodeResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeResourceMapProto> list = p.getNodeResourceMapList();\r\n    this.nodeResourceMap = new HashMap<NodeId, ResourceOption>(list.size());\r\n    for (NodeResourceMapProto nodeResourceProto : list) {\r\n        this.nodeResourceMap.put(convertFromProtoFormat(nodeResourceProto.getNodeId()), convertFromProtoFormat(nodeResourceProto.getResourceOption()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = UpdateNodeResourceRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId nodeId)\n{\r\n    return ((NodeIdPBImpl) nodeId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId convertFromProtoFormat(NodeIdProto proto)\n{\r\n    return new NodeIdPBImpl(proto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceOptionPBImpl convertFromProtoFormat(ResourceOptionProto c)\n{\r\n    return new ResourceOptionPBImpl(c);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceOptionProto convertToProtoFormat(ResourceOption c)\n{\r\n    return ((ResourceOptionPBImpl) c).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addNodeResourceMap",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addNodeResourceMap()\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeResourceMap();\r\n    if (nodeResourceMap == null) {\r\n        return;\r\n    }\r\n    Iterable<? extends NodeResourceMapProto> values = new Iterable<NodeResourceMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<NodeResourceMapProto> iterator() {\r\n            return new Iterator<NodeResourceMapProto>() {\r\n\r\n                Iterator<NodeId> nodeIterator = nodeResourceMap.keySet().iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return nodeIterator.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public NodeResourceMapProto next() {\r\n                    NodeId nodeId = nodeIterator.next();\r\n                    return NodeResourceMapProto.newBuilder().setNodeId(convertToProtoFormat(nodeId)).setResourceOption(convertToProtoFormat(nodeResourceMap.get(nodeId))).build();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    this.builder.addAllNodeResourceMap(values);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void init(Configuration configuration, RMProxy<T> rmProxy, Class<T> protocol)\n{\r\n    super.init(configuration, rmProxy, protocol);\r\n    Map<String, ProxyInfo<T>> retriableProxies = new HashMap<>();\r\n    String originalId = HAUtil.getRMHAId(conf);\r\n    for (String rmId : rmServiceIds) {\r\n        conf.set(YarnConfiguration.RM_HA_ID, rmId);\r\n        nonRetriableProxy.put(rmId, super.getProxyInternal());\r\n        T proxy = createRetriableProxy();\r\n        ProxyInfo<T> pInfo = new ProxyInfo<T>(proxy, rmId);\r\n        retriableProxies.put(rmId, pInfo);\r\n    }\r\n    conf.set(YarnConfiguration.RM_HA_ID, originalId);\r\n    T proxyInstance = (T) Proxy.newProxyInstance(RMRequestHedgingInvocationHandler.class.getClassLoader(), new Class<?>[] { protocol }, new RMRequestHedgingInvocationHandler(retriableProxies));\r\n    String combinedInfo = Arrays.toString(rmServiceIds);\r\n    wrappedProxy = new ProxyInfo<T>(proxyInstance, combinedInfo);\r\n    LOG.info(\"Created wrapped proxy for \" + combinedInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createRetriableProxy",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "T createRetriableProxy()\n{\r\n    try {\r\n        RetryPolicy retryPolicy = RMProxy.createRetryPolicy(conf, false);\r\n        InetSocketAddress rmAddress = rmProxy.getRMAddress(conf, protocol);\r\n        T proxy = rmProxy.getProxy(conf, protocol, rmAddress);\r\n        return (T) RetryProxy.create(protocol, proxy, retryPolicy);\r\n    } catch (IOException ioe) {\r\n        LOG.error(\"Unable to create proxy to the ResourceManager \" + HAUtil.getRMHAId(conf), ioe);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getProxy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ProxyInfo<T> getProxy()\n{\r\n    return wrappedProxy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "performFailover",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void performFailover(T currentProxy)\n{\r\n    LOG.info(\"Connection lost with \" + successfulProxy + \", trying to fail over.\");\r\n    successfulProxy = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NodeAttributeProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAttributeKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeAttributeKey getAttributeKey()\n{\r\n    NodeAttributeProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAttributeKey()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getAttributeKey());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAttributeKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAttributeKey(NodeAttributeKey attributeKey)\n{\r\n    maybeInitBuilder();\r\n    if (attributeKey == null) {\r\n        builder.clearAttributeKey();\r\n        return;\r\n    }\r\n    builder.setAttributeKey(convertToProtoFormat(attributeKey));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAttributeValue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getAttributeValue()\n{\r\n    NodeAttributeProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAttributeValue()) {\r\n        return null;\r\n    }\r\n    return p.getAttributeValue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAttributeValue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAttributeValue(String attributeValue)\n{\r\n    maybeInitBuilder();\r\n    if (attributeValue == null) {\r\n        builder.clearAttributeValue();\r\n        return;\r\n    }\r\n    builder.setAttributeValue(attributeValue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAttributeType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeAttributeType getAttributeType()\n{\r\n    NodeAttributeProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAttributeType()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getAttributeType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAttributeType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAttributeType(NodeAttributeType attributeType)\n{\r\n    maybeInitBuilder();\r\n    if (attributeType == null) {\r\n        builder.clearAttributeType();\r\n        return;\r\n    }\r\n    builder.setAttributeType(convertToProtoFormat(attributeType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeTypeProto convertToProtoFormat(NodeAttributeType attributeType)\n{\r\n    return NodeAttributeTypeProto.valueOf(attributeType.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeType convertFromProtoFormat(NodeAttributeTypeProto containerState)\n{\r\n    return NodeAttributeType.valueOf(containerState.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeAttributeKeyPBImpl convertFromProtoFormat(NodeAttributeKeyProto attributeKeyProto)\n{\r\n    return new NodeAttributeKeyPBImpl(attributeKeyProto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeKeyProto convertToProtoFormat(NodeAttributeKey attributeKey)\n{\r\n    return ((NodeAttributeKeyPBImpl) attributeKey).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getAttributeKey().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (obj instanceof NodeAttribute) {\r\n        NodeAttribute other = (NodeAttribute) obj;\r\n        return getAttributeKey().equals(other.getAttributeKey());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder strBuilder = new StringBuilder();\r\n    NodeAttributeKey key = this.getAttributeKey();\r\n    strBuilder.append(key.getAttributePrefix()).append(\"/\").append(key.getAttributeName()).append(\"(\").append(this.getAttributeType()).append(\")=\").append(this.getAttributeValue());\r\n    return strBuilder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "EntityType getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((name == null) ? 0 : name.hashCode());\r\n    result = prime * result + ((type == null) ? 0 : type.hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj)\r\n        return true;\r\n    if (obj == null)\r\n        return false;\r\n    if (getClass() != obj.getClass())\r\n        return false;\r\n    PrivilegedEntity other = (PrivilegedEntity) obj;\r\n    if (name == null) {\r\n        if (other.name != null)\r\n            return false;\r\n    } else if (!name.equals(other.name))\r\n        return false;\r\n    if (type != other.type)\r\n        return false;\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "setRMWebAppPort",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setRMWebAppPort(Configuration conf, int port)\n{\r\n    String hostname = getRMWebAppURLWithoutScheme(conf);\r\n    hostname = (hostname.contains(\":\")) ? hostname.substring(0, hostname.indexOf(\":\")) : hostname;\r\n    setRMWebAppHostnameAndPort(conf, hostname, port);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "setRMWebAppHostnameAndPort",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRMWebAppHostnameAndPort(Configuration conf, String hostname, int port)\n{\r\n    String resolvedAddress = hostname + \":\" + port;\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        conf.set(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS, resolvedAddress);\r\n    } else {\r\n        conf.set(YarnConfiguration.RM_WEBAPP_ADDRESS, resolvedAddress);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "setNMWebAppHostNameAndPort",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNMWebAppHostNameAndPort(Configuration conf, String hostName, int port)\n{\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        conf.set(YarnConfiguration.NM_WEBAPP_HTTPS_ADDRESS, hostName + \":\" + port);\r\n    } else {\r\n        conf.set(YarnConfiguration.NM_WEBAPP_ADDRESS, hostName + \":\" + port);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "execOnActiveRM",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "R execOnActiveRM(Configuration conf, ThrowingBiFunction<String, T, R> func, T arg) throws Exception\n{\r\n    int haIndex = 0;\r\n    if (HAUtil.isHAEnabled(conf)) {\r\n        String activeRMId = RMHAUtils.findActiveRMHAId(conf);\r\n        if (activeRMId != null) {\r\n            haIndex = new ArrayList<>(HAUtil.getRMHAIds(conf)).indexOf(activeRMId);\r\n        } else {\r\n            throw new ConnectException(\"No Active RM available\");\r\n        }\r\n    }\r\n    String rm1Address = getRMWebAppURLWithScheme(conf, haIndex);\r\n    return func.apply(rm1Address, arg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getRMWebAppURLWithoutScheme",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "String getRMWebAppURLWithoutScheme(Configuration conf, boolean isHAEnabled, int haIdIndex)\n{\r\n    YarnConfiguration yarnConfig = new YarnConfiguration(conf);\r\n    if (isHAEnabled) {\r\n        String rmId = yarnConfig.get(YarnConfiguration.RM_HA_ID);\r\n        if (rmId == null || rmId.isEmpty()) {\r\n            List<String> rmIds = new ArrayList<>(HAUtil.getRMHAIds(conf));\r\n            if (rmIds != null && !rmIds.isEmpty()) {\r\n                yarnConfig.set(YarnConfiguration.RM_HA_ID, rmIds.get(haIdIndex));\r\n            }\r\n        }\r\n    }\r\n    if (YarnConfiguration.useHttps(yarnConfig)) {\r\n        if (isHAEnabled) {\r\n            return HAUtil.getConfValueForRMInstance(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS, yarnConfig);\r\n        }\r\n        return yarnConfig.get(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS, YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS);\r\n    } else {\r\n        if (isHAEnabled) {\r\n            return HAUtil.getConfValueForRMInstance(YarnConfiguration.RM_WEBAPP_ADDRESS, yarnConfig);\r\n        }\r\n        return yarnConfig.get(YarnConfiguration.RM_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getRMWebAppURLWithScheme",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRMWebAppURLWithScheme(Configuration conf, int haIdIndex)\n{\r\n    return getHttpSchemePrefix(conf) + getRMWebAppURLWithoutScheme(conf, HAUtil.isHAEnabled(conf), haIdIndex);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getRMWebAppURLWithScheme",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRMWebAppURLWithScheme(Configuration conf)\n{\r\n    return getHttpSchemePrefix(conf) + getRMWebAppURLWithoutScheme(conf, HAUtil.isHAEnabled(conf), 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getRMWebAppURLWithoutScheme",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getRMWebAppURLWithoutScheme(Configuration conf)\n{\r\n    return getRMWebAppURLWithoutScheme(conf, false, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getRouterWebAppURLWithScheme",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRouterWebAppURLWithScheme(Configuration conf)\n{\r\n    return getHttpSchemePrefix(conf) + getRouterWebAppURLWithoutScheme(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getRouterWebAppURLWithoutScheme",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getRouterWebAppURLWithoutScheme(Configuration conf)\n{\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        return conf.get(YarnConfiguration.ROUTER_WEBAPP_HTTPS_ADDRESS, YarnConfiguration.DEFAULT_ROUTER_WEBAPP_HTTPS_ADDRESS);\r\n    } else {\r\n        return conf.get(YarnConfiguration.ROUTER_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_ROUTER_WEBAPP_ADDRESS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getProxyHostsAndPortsForAmFilter",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "List<String> getProxyHostsAndPortsForAmFilter(Configuration conf)\n{\r\n    List<String> addrs = new ArrayList<String>();\r\n    String proxyAddr = conf.get(YarnConfiguration.PROXY_ADDRESS);\r\n    if (proxyAddr == null || proxyAddr.isEmpty()) {\r\n        if (HAUtil.isHAEnabled(conf)) {\r\n            List<String> haAddrs = RMHAUtils.getRMHAWebappAddresses(new YarnConfiguration(conf));\r\n            for (String addr : haAddrs) {\r\n                try {\r\n                    InetSocketAddress socketAddr = NetUtils.createSocketAddr(addr);\r\n                    addrs.add(getResolvedAddress(socketAddr));\r\n                } catch (IllegalArgumentException e) {\r\n                }\r\n            }\r\n        }\r\n        if (addrs.isEmpty()) {\r\n            addrs.add(getResolvedRMWebAppURLWithoutScheme(conf));\r\n        }\r\n    } else {\r\n        addrs.add(proxyAddr);\r\n    }\r\n    return addrs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getProxyHostAndPort",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getProxyHostAndPort(Configuration conf)\n{\r\n    String addr = conf.get(YarnConfiguration.PROXY_ADDRESS);\r\n    if (addr == null || addr.isEmpty()) {\r\n        addr = getResolvedRMWebAppURLWithoutScheme(conf);\r\n    }\r\n    return addr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getResolvedRemoteRMWebAppURLWithScheme",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getResolvedRemoteRMWebAppURLWithScheme(Configuration conf)\n{\r\n    return getHttpSchemePrefix(conf) + getResolvedRemoteRMWebAppURLWithoutScheme(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getResolvedRMWebAppURLWithScheme",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getResolvedRMWebAppURLWithScheme(Configuration conf)\n{\r\n    return getHttpSchemePrefix(conf) + getResolvedRMWebAppURLWithoutScheme(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getResolvedRemoteRMWebAppURLWithoutScheme",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getResolvedRemoteRMWebAppURLWithoutScheme(Configuration conf)\n{\r\n    return getResolvedRemoteRMWebAppURLWithoutScheme(conf, YarnConfiguration.useHttps(conf) ? Policy.HTTPS_ONLY : Policy.HTTP_ONLY);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getResolvedRMWebAppURLWithoutScheme",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getResolvedRMWebAppURLWithoutScheme(Configuration conf)\n{\r\n    return getResolvedRMWebAppURLWithoutScheme(conf, YarnConfiguration.useHttps(conf) ? Policy.HTTPS_ONLY : Policy.HTTP_ONLY);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getResolvedRMWebAppURLWithoutScheme",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getResolvedRMWebAppURLWithoutScheme(Configuration conf, Policy httpPolicy)\n{\r\n    InetSocketAddress address = null;\r\n    if (httpPolicy == Policy.HTTPS_ONLY) {\r\n        address = conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS, YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS, YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\r\n    } else {\r\n        address = conf.getSocketAddr(YarnConfiguration.RM_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);\r\n    }\r\n    return getResolvedAddress(address);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getResolvedRemoteRMWebAppURLWithoutScheme",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getResolvedRemoteRMWebAppURLWithoutScheme(Configuration conf, Policy httpPolicy)\n{\r\n    String rmId = null;\r\n    if (HAUtil.isHAEnabled(conf)) {\r\n        rmId = (String) HAUtil.getRMHAIds(conf).toArray()[0];\r\n    }\r\n    return getResolvedRemoteRMWebAppURLWithoutScheme(conf, httpPolicy, rmId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getResolvedRemoteRMWebAppURLWithoutScheme",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getResolvedRemoteRMWebAppURLWithoutScheme(Configuration conf, Policy httpPolicy, String rmId)\n{\r\n    InetSocketAddress address = null;\r\n    if (httpPolicy == Policy.HTTPS_ONLY) {\r\n        address = conf.getSocketAddr(rmId == null ? YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS : HAUtil.addSuffix(YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS, rmId), YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_ADDRESS, YarnConfiguration.DEFAULT_RM_WEBAPP_HTTPS_PORT);\r\n    } else {\r\n        address = conf.getSocketAddr(rmId == null ? YarnConfiguration.RM_WEBAPP_ADDRESS : HAUtil.addSuffix(YarnConfiguration.RM_WEBAPP_ADDRESS, rmId), YarnConfiguration.DEFAULT_RM_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_RM_WEBAPP_PORT);\r\n    }\r\n    return getResolvedAddress(address);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getResolvedAddress",
  "errType" : [ "UnknownHostException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "String getResolvedAddress(InetSocketAddress address)\n{\r\n    address = NetUtils.getConnectAddress(address);\r\n    StringBuilder sb = new StringBuilder();\r\n    InetAddress resolved = address.getAddress();\r\n    if (resolved == null || resolved.isAnyLocalAddress() || resolved.isLoopbackAddress()) {\r\n        String lh = address.getHostName();\r\n        try {\r\n            lh = InetAddress.getLocalHost().getCanonicalHostName();\r\n        } catch (UnknownHostException e) {\r\n        }\r\n        sb.append(lh);\r\n    } else {\r\n        sb.append(address.getHostName());\r\n    }\r\n    sb.append(\":\").append(address.getPort());\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getWebAppBindURL",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getWebAppBindURL(Configuration conf, String hostProperty, String webAppURLWithoutScheme)\n{\r\n    String host = conf.getTrimmed(hostProperty);\r\n    if (host != null && !host.isEmpty()) {\r\n        if (webAppURLWithoutScheme.contains(\":\")) {\r\n            webAppURLWithoutScheme = host + \":\" + webAppURLWithoutScheme.split(\":\")[1];\r\n        } else {\r\n            throw new YarnRuntimeException(\"webAppURLWithoutScheme must include port specification but doesn't: \" + webAppURLWithoutScheme);\r\n        }\r\n    }\r\n    return webAppURLWithoutScheme;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getNMWebAppURLWithoutScheme",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getNMWebAppURLWithoutScheme(Configuration conf)\n{\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        return conf.get(YarnConfiguration.NM_WEBAPP_HTTPS_ADDRESS, YarnConfiguration.DEFAULT_NM_WEBAPP_HTTPS_ADDRESS);\r\n    } else {\r\n        return conf.get(YarnConfiguration.NM_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getAHSWebAppURLWithoutScheme",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getAHSWebAppURLWithoutScheme(Configuration conf)\n{\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        return conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);\r\n    } else {\r\n        return conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getTimelineReaderWebAppURLWithoutScheme",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getTimelineReaderWebAppURLWithoutScheme(Configuration conf)\n{\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        return conf.get(YarnConfiguration.TIMELINE_SERVICE_READER_WEBAPP_HTTPS_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_READER_WEBAPP_HTTPS_ADDRESS);\r\n    } else {\r\n        return conf.get(YarnConfiguration.TIMELINE_SERVICE_READER_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_READER_WEBAPP_ADDRESS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getTimelineCollectorWebAppURLWithoutScheme",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getTimelineCollectorWebAppURLWithoutScheme(Configuration conf)\n{\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        return conf.get(YarnConfiguration.TIMELINE_SERVICE_COLLECTOR_WEBAPP_HTTPS_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_COLLECTOR_WEBAPP_HTTPS_ADDRESS);\r\n    } else {\r\n        return conf.get(YarnConfiguration.TIMELINE_SERVICE_COLLECTOR_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_COLLECTOR_WEBAPP_ADDRESS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getURLWithScheme",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getURLWithScheme(String schemePrefix, String url)\n{\r\n    if (url.indexOf(\"://\") > 0) {\r\n        return url;\r\n    } else {\r\n        return schemePrefix + url;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getRunningLogURL",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getRunningLogURL(String nodeHttpAddress, String containerId, String user)\n{\r\n    if (nodeHttpAddress == null || nodeHttpAddress.isEmpty() || containerId == null || containerId.isEmpty() || user == null || user.isEmpty()) {\r\n        return null;\r\n    }\r\n    return PATH_JOINER.join(nodeHttpAddress, \"node\", \"containerlogs\", containerId, user);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getAggregatedLogURL",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String getAggregatedLogURL(String serverHttpAddress, String allocatedNode, String containerId, String entity, String user)\n{\r\n    if (serverHttpAddress == null || serverHttpAddress.isEmpty() || allocatedNode == null || allocatedNode.isEmpty() || containerId == null || containerId.isEmpty() || entity == null || entity.isEmpty() || user == null || user.isEmpty()) {\r\n        return null;\r\n    }\r\n    return PATH_JOINER.join(serverHttpAddress, \"applicationhistory\", \"logs\", allocatedNode, containerId, entity, user);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getHttpSchemePrefix",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getHttpSchemePrefix(Configuration conf)\n{\r\n    return YarnConfiguration.useHttps(conf) ? HTTPS_PREFIX : HTTP_PREFIX;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "loadSslConfiguration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HttpServer2.Builder loadSslConfiguration(HttpServer2.Builder builder)\n{\r\n    return loadSslConfiguration(builder, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "loadSslConfiguration",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "HttpServer2.Builder loadSslConfiguration(HttpServer2.Builder builder, Configuration conf)\n{\r\n    Configuration sslConf = new Configuration(false);\r\n    sslConf.addResource(YarnConfiguration.YARN_SSL_SERVER_RESOURCE_DEFAULT);\r\n    if (conf != null) {\r\n        sslConf.addResource(conf);\r\n    }\r\n    boolean needsClientAuth = YarnConfiguration.YARN_SSL_CLIENT_HTTPS_NEED_AUTH_DEFAULT;\r\n    return builder.needsClientAuth(needsClientAuth).keyPassword(getPassword(sslConf, WEB_APP_KEY_PASSWORD_KEY)).keyStore(sslConf.get(\"ssl.server.keystore.location\"), getPassword(sslConf, WEB_APP_KEYSTORE_PASSWORD_KEY), sslConf.get(\"ssl.server.keystore.type\", \"jks\")).trustStore(sslConf.get(\"ssl.server.truststore.location\"), getPassword(sslConf, WEB_APP_TRUSTSTORE_PASSWORD_KEY), sslConf.get(\"ssl.server.truststore.type\", \"jks\")).excludeCiphers(sslConf.get(\"ssl.server.exclude.cipher.list\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getPassword",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getPassword(Configuration conf, String alias)\n{\r\n    String password = null;\r\n    try {\r\n        char[] passchars = conf.getPassword(alias);\r\n        if (passchars != null) {\r\n            password = new String(passchars);\r\n        }\r\n    } catch (IOException ioe) {\r\n        password = null;\r\n    }\r\n    return password;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "parseApplicationId",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId parseApplicationId(RecordFactory recordFactory, String appId)\n{\r\n    if (appId == null || appId.isEmpty()) {\r\n        throw new NotFoundException(\"appId, \" + appId + \", is empty or null\");\r\n    }\r\n    ApplicationId aid = null;\r\n    try {\r\n        aid = ApplicationId.fromString(appId);\r\n    } catch (Exception e) {\r\n        throw new BadRequestException(e);\r\n    }\r\n    if (aid == null) {\r\n        throw new NotFoundException(\"app with id \" + appId + \" not found\");\r\n    }\r\n    return aid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getSupportedLogContentType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getSupportedLogContentType(String format)\n{\r\n    if (format.equalsIgnoreCase(\"text\")) {\r\n        return \"text/plain\";\r\n    } else if (format.equalsIgnoreCase(\"octet-stream\")) {\r\n        return \"application/octet-stream\";\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getDefaultLogContentType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDefaultLogContentType()\n{\r\n    return \"text/plain\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "listSupportedLogContentType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> listSupportedLogContentType()\n{\r\n    return Arrays.asList(\"text\", \"octet-stream\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getURLEncodedQueryString",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "String getURLEncodedQueryString(HttpServletRequest request, String parameterToRemove)\n{\r\n    String queryString = request.getQueryString();\r\n    if (queryString != null && !queryString.isEmpty()) {\r\n        String reqEncoding = request.getCharacterEncoding();\r\n        if (reqEncoding == null || reqEncoding.isEmpty()) {\r\n            reqEncoding = \"ISO-8859-1\";\r\n        }\r\n        Charset encoding = Charset.forName(reqEncoding);\r\n        List<NameValuePair> params = URLEncodedUtils.parse(queryString, encoding);\r\n        if (parameterToRemove != null && !parameterToRemove.isEmpty()) {\r\n            Iterator<NameValuePair> paramIterator = params.iterator();\r\n            while (paramIterator.hasNext()) {\r\n                NameValuePair current = paramIterator.next();\r\n                if (current.getName().equals(parameterToRemove)) {\r\n                    paramIterator.remove();\r\n                }\r\n            }\r\n        }\r\n        return URLEncodedUtils.format(params, encoding);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getURLEncodedQueryParam",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<NameValuePair> getURLEncodedQueryParam(HttpServletRequest request)\n{\r\n    String queryString = request.getQueryString();\r\n    if (queryString != null && !queryString.isEmpty()) {\r\n        String reqEncoding = request.getCharacterEncoding();\r\n        if (reqEncoding == null || reqEncoding.isEmpty()) {\r\n            reqEncoding = \"ISO-8859-1\";\r\n        }\r\n        Charset encoding = Charset.forName(reqEncoding);\r\n        List<NameValuePair> params = URLEncodedUtils.parse(queryString, encoding);\r\n        return params;\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "removeQueryParams",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String removeQueryParams(HttpServletRequest httpRequest, String parameterName)\n{\r\n    return getURLEncodedQueryString(httpRequest, parameterName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getHtmlEscapedURIWithQueryString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getHtmlEscapedURIWithQueryString(HttpServletRequest request)\n{\r\n    String urlEncodedQueryString = getURLEncodedQueryString(request, null);\r\n    if (urlEncodedQueryString != null) {\r\n        return HtmlQuoting.quoteHtmlChars(request.getRequestURI() + \"?\" + urlEncodedQueryString);\r\n    }\r\n    return HtmlQuoting.quoteHtmlChars(request.getRequestURI());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "appendQueryParams",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String appendQueryParams(HttpServletRequest request, String targetUri)\n{\r\n    String ret = targetUri;\r\n    String urlEncodedQueryString = getURLEncodedQueryString(request, null);\r\n    if (urlEncodedQueryString != null) {\r\n        ret += \"?\" + urlEncodedQueryString;\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "getException",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getException()\n{\r\n    return exception;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "getMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getMessage()\n{\r\n    return message;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "getJavaClassName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getJavaClassName()\n{\r\n    return javaClassName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CsiAdaptorProtos.NodePublishVolumeRequest getProto()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setVolumeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setVolumeId(String volumeId)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setVolumeId(volumeId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getVolumeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getVolumeId()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.getVolumeId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setReadonly",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReadonly(boolean readonly)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setReadonly(readonly);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getReadOnly",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean getReadOnly()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.getReadonly();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setSecrets",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setSecrets(Map<String, String> secrets)\n{\r\n    if (secrets != null) {\r\n        Preconditions.checkNotNull(builder);\r\n        for (Map.Entry<String, String> entry : secrets.entrySet()) {\r\n            YarnProtos.StringStringMapProto mapEntry = YarnProtos.StringStringMapProto.newBuilder().setKey(entry.getKey()).setValue(entry.getValue()).build();\r\n            builder.addSecrets(mapEntry);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getSecrets",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<String, String> getSecrets()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.getSecretsCount() > 0 ? ProtoUtils.convertStringStringMapProtoListToMap(builder.getSecretsList()) : ImmutableMap.of();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getTargetPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getTargetPath()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.getTargetPath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setStagingPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setStagingPath(String stagingPath)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setStagingTargetPath(stagingPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getStagingPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getStagingPath()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.getStagingTargetPath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setPublishContext",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setPublishContext(Map<String, String> publishContext)\n{\r\n    if (publishContext != null) {\r\n        Preconditions.checkNotNull(builder);\r\n        for (Map.Entry<String, String> entry : publishContext.entrySet()) {\r\n            YarnProtos.StringStringMapProto mapEntry = YarnProtos.StringStringMapProto.newBuilder().setKey(entry.getKey()).setValue(entry.getValue()).build();\r\n            builder.addPublishContext(mapEntry);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getPublishContext",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<String, String> getPublishContext()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.getPublishContextCount() > 0 ? ProtoUtils.convertStringStringMapProtoListToMap(builder.getPublishContextList()) : ImmutableMap.of();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setTargetPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTargetPath(String targetPath)\n{\r\n    if (targetPath != null) {\r\n        Preconditions.checkNotNull(builder);\r\n        builder.setTargetPath(targetPath);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setVolumeCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setVolumeCapability(VolumeCapability capability)\n{\r\n    if (capability != null) {\r\n        CsiAdaptorProtos.VolumeCapability vc = CsiAdaptorProtos.VolumeCapability.newBuilder().setAccessMode(CsiAdaptorProtos.VolumeCapability.AccessMode.forNumber(capability.getAccessMode().ordinal())).setVolumeType(CsiAdaptorProtos.VolumeCapability.VolumeType.forNumber(capability.getVolumeType().ordinal())).addAllMountFlags(capability.getMountFlags()).build();\r\n        builder.setVolumeCapability(vc);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getVolumeCapability",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "VolumeCapability getVolumeCapability()\n{\r\n    CsiAdaptorProtos.VolumeCapability cap0 = builder.getVolumeCapability();\r\n    if (builder.hasVolumeCapability()) {\r\n        return new VolumeCapability(ValidateVolumeCapabilitiesRequest.AccessMode.valueOf(cap0.getAccessMode().name()), ValidateVolumeCapabilitiesRequest.VolumeType.valueOf(cap0.getVolumeType().name()), cap0.getMountFlagsList());\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationReportRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (applicationId != null) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetApplicationReportRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    GetApplicationReportRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.applicationId != null) {\r\n        return this.applicationId;\r\n    }\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null)\r\n        builder.clearApplicationId();\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "dumpAContainersLogs",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int dumpAContainersLogs(String appId, String containerId, String nodeId, String jobOwner) throws IOException\n{\r\n    ContainerLogsRequest options = new ContainerLogsRequest();\r\n    options.setAppId(ApplicationId.fromString(appId));\r\n    options.setContainerId(containerId);\r\n    options.setNodeId(nodeId);\r\n    options.setAppOwner(jobOwner);\r\n    Set<String> logs = new HashSet<String>();\r\n    options.setLogTypes(logs);\r\n    options.setBytes(Long.MAX_VALUE);\r\n    return dumpAContainerLogsForLogType(options, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "guessOwnerWithFileFormat",
  "errType" : [ "AccessControlException|AccessDeniedException", "IOException", "IOException" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "String guessOwnerWithFileFormat(LogAggregationFileController fileFormat, ApplicationId appId, String bestGuess, Configuration conf) throws IOException\n{\r\n    boolean scanOldPath = LogAggregationUtils.isOlderPathEnabled(conf);\r\n    Path remoteRootLogDir = fileFormat.getRemoteRootLogDir();\r\n    String suffix = fileFormat.getRemoteRootLogDirSuffix();\r\n    Path fullPath = fileFormat.getRemoteAppLogDir(appId, bestGuess);\r\n    FileContext fc = FileContext.getFileContext(remoteRootLogDir.toUri(), conf);\r\n    String pathAccess = fullPath.toString();\r\n    try {\r\n        if (fc.util().exists(fullPath)) {\r\n            return bestGuess;\r\n        }\r\n        if (scanOldPath) {\r\n            Path olderAppPath = fileFormat.getOlderRemoteAppLogDir(appId, bestGuess);\r\n            pathAccess = olderAppPath.toString();\r\n            if (fc.util().exists(olderAppPath)) {\r\n                return bestGuess;\r\n            }\r\n        }\r\n    } catch (AccessControlException | AccessDeniedException ex) {\r\n        logDirNoAccessPermission(pathAccess, bestGuess, ex.getMessage());\r\n        throw ex;\r\n    }\r\n    try {\r\n        Path toMatch = fileFormat.getRemoteAppLogDir(appId, null);\r\n        FileStatus[] matching = fc.util().globStatus(toMatch);\r\n        if (matching != null && matching.length == 1) {\r\n            Path parent = matching[0].getPath().getParent();\r\n            if (suffix != null && !StringUtils.isEmpty(suffix)) {\r\n                parent = parent.getParent();\r\n            }\r\n            parent = parent.getParent();\r\n            return parent.getName();\r\n        }\r\n    } catch (IOException e) {\r\n    }\r\n    if (scanOldPath) {\r\n        try {\r\n            Path toMatch = fileFormat.getOlderRemoteAppLogDir(appId, null);\r\n            FileStatus[] matching = fc.util().globStatus(toMatch);\r\n            if (matching != null && matching.length == 1) {\r\n                Path parent = matching[0].getPath().getParent();\r\n                if (suffix != null && !StringUtils.isEmpty(suffix)) {\r\n                    parent = parent.getParent();\r\n                }\r\n                return parent.getName();\r\n            }\r\n        } catch (IOException e) {\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getOwnerForAppIdOrNull",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getOwnerForAppIdOrNull(ApplicationId appId, String bestGuess, Configuration conf)\n{\r\n    LogAggregationFileControllerFactory factory = new LogAggregationFileControllerFactory(conf);\r\n    List<LogAggregationFileController> fileControllers = factory.getConfiguredLogAggregationFileControllerList();\r\n    if (fileControllers != null && !fileControllers.isEmpty()) {\r\n        String owner = null;\r\n        for (LogAggregationFileController fileFormat : fileControllers) {\r\n            try {\r\n                owner = guessOwnerWithFileFormat(fileFormat, appId, bestGuess, conf);\r\n                if (owner != null) {\r\n                    return owner;\r\n                }\r\n            } catch (IOException e) {\r\n                return null;\r\n            }\r\n        }\r\n    } else {\r\n        System.err.println(\"Can not find any valid fileControllers. \" + \" The configurated fileControllers: \" + YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "dumpAContainerLogsForLogType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int dumpAContainerLogsForLogType(ContainerLogsRequest options) throws IOException\n{\r\n    return dumpAContainerLogsForLogType(options, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "dumpAContainerLogsForLogType",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int dumpAContainerLogsForLogType(ContainerLogsRequest options, boolean outputFailure) throws IOException\n{\r\n    LogAggregationFileController fc = null;\r\n    try {\r\n        fc = this.getFileController(options.getAppId(), options.getAppOwner());\r\n    } catch (IOException ex) {\r\n        System.err.println(ex);\r\n    }\r\n    boolean foundAnyLogs = false;\r\n    if (fc != null) {\r\n        foundAnyLogs = fc.readAggregatedLogs(options, null);\r\n    }\r\n    if (!foundAnyLogs) {\r\n        if (outputFailure) {\r\n            containerLogNotFound(options.getContainerId());\r\n        }\r\n        return -1;\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "dumpAContainerLogsForLogTypeWithoutNodeId",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int dumpAContainerLogsForLogTypeWithoutNodeId(ContainerLogsRequest options) throws IOException\n{\r\n    LogAggregationFileController fc = null;\r\n    try {\r\n        fc = this.getFileController(options.getAppId(), options.getAppOwner());\r\n    } catch (IOException ex) {\r\n        System.err.println(ex);\r\n    }\r\n    boolean foundAnyLogs = false;\r\n    if (fc != null) {\r\n        foundAnyLogs = fc.readAggregatedLogs(options, null);\r\n    }\r\n    if (!foundAnyLogs) {\r\n        containerLogNotFound(options.getContainerId());\r\n        return -1;\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "dumpAllContainersLogs",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int dumpAllContainersLogs(ContainerLogsRequest options) throws IOException\n{\r\n    LogAggregationFileController fc = null;\r\n    try {\r\n        fc = this.getFileController(options.getAppId(), options.getAppOwner());\r\n    } catch (IOException ex) {\r\n        System.err.println(ex);\r\n    }\r\n    boolean foundAnyLogs = false;\r\n    if (fc != null) {\r\n        foundAnyLogs = fc.readAggregatedLogs(options, null);\r\n    }\r\n    if (!foundAnyLogs) {\r\n        emptyLogDir(LogAggregationUtils.getRemoteAppLogDir(conf, options.getAppId(), options.getAppOwner(), fc.getRemoteRootLogDir(), fc.getRemoteRootLogDirSuffix()).toString());\r\n        return -1;\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "printAContainerLogMetadata",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "int printAContainerLogMetadata(ContainerLogsRequest options, PrintStream out, PrintStream err) throws IOException\n{\r\n    String nodeId = options.getNodeId();\r\n    String containerIdStr = options.getContainerId();\r\n    List<ContainerLogMeta> containersLogMeta;\r\n    try {\r\n        containersLogMeta = getFileController(options.getAppId(), options.getAppOwner()).readAggregatedLogsMeta(options);\r\n    } catch (Exception ex) {\r\n        err.println(ex.getMessage());\r\n        return -1;\r\n    }\r\n    if (containersLogMeta.isEmpty()) {\r\n        if (containerIdStr != null && nodeId != null) {\r\n            err.println(\"The container \" + containerIdStr + \" couldn't be found \" + \"on the node specified: \" + nodeId);\r\n        } else if (nodeId != null) {\r\n            err.println(\"Can not find log metadata for any containers on \" + nodeId);\r\n        } else if (containerIdStr != null) {\r\n            err.println(\"Can not find log metadata for container: \" + containerIdStr);\r\n        }\r\n        return -1;\r\n    }\r\n    for (ContainerLogMeta containerLogMeta : containersLogMeta) {\r\n        String containerString = String.format(CONTAINER_ON_NODE_PATTERN, containerLogMeta.getContainerId(), containerLogMeta.getNodeId());\r\n        out.println(containerString);\r\n        out.println(StringUtils.repeat(\"=\", containerString.length()));\r\n        out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogFile\", \"LogLength\", \"LastModificationTime\", \"LogAggregationType\");\r\n        out.println(StringUtils.repeat(\"=\", containerString.length() * 2));\r\n        for (ContainerLogFileInfo logMeta : containerLogMeta.getContainerLogMeta()) {\r\n            out.printf(PER_LOG_FILE_INFO_PATTERN, logMeta.getFileName(), logMeta.getFileSize(), logMeta.getLastModifiedTime(), \"AGGREGATED\");\r\n        }\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "printNodesList",
  "errType" : [ "Exception", "FileNotFoundException", "AccessControlException|AccessDeniedException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void printNodesList(ContainerLogsRequest options, PrintStream out, PrintStream err) throws IOException\n{\r\n    ApplicationId appId = options.getAppId();\r\n    String appOwner = options.getAppOwner();\r\n    LogAggregationFileController fileFormat = null;\r\n    try {\r\n        fileFormat = getFileController(appId, appOwner);\r\n    } catch (Exception ex) {\r\n        err.println(ex.getMessage());\r\n        return;\r\n    }\r\n    RemoteIterator<FileStatus> nodeFiles = null;\r\n    try {\r\n        nodeFiles = LogAggregationUtils.getRemoteNodeFileDir(conf, appId, appOwner, fileFormat.getRemoteRootLogDir(), fileFormat.getRemoteRootLogDirSuffix());\r\n    } catch (FileNotFoundException fnf) {\r\n        logDirNotExist(fileFormat.getRemoteAppLogDir(appId, appOwner).toString());\r\n    } catch (AccessControlException | AccessDeniedException ace) {\r\n        logDirNoAccessPermission(fileFormat.getRemoteAppLogDir(appId, appOwner).toString(), appOwner, ace.getMessage());\r\n    }\r\n    if (nodeFiles == null) {\r\n        return;\r\n    }\r\n    boolean foundNode = false;\r\n    StringBuilder sb = new StringBuilder();\r\n    while (nodeFiles.hasNext()) {\r\n        FileStatus thisNodeFile = nodeFiles.next();\r\n        sb.append(thisNodeFile.getPath().getName() + \"\\n\");\r\n        foundNode = true;\r\n    }\r\n    if (!foundNode) {\r\n        err.println(\"No nodes found that aggregated logs for \" + \"the application: \" + appId);\r\n    } else {\r\n        out.println(sb.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "printContainersList",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void printContainersList(ContainerLogsRequest options, PrintStream out, PrintStream err) throws IOException\n{\r\n    ApplicationId appId = options.getAppId();\r\n    String nodeId = options.getNodeId();\r\n    boolean foundAnyLogs = false;\r\n    List<ContainerLogMeta> containersLogMeta = new ArrayList<>();\r\n    try {\r\n        containersLogMeta = getFileController(options.getAppId(), options.getAppOwner()).readAggregatedLogsMeta(options);\r\n    } catch (Exception ex) {\r\n        err.println(ex.getMessage());\r\n    }\r\n    for (ContainerLogMeta logMeta : containersLogMeta) {\r\n        out.println(String.format(CONTAINER_ON_NODE_PATTERN, logMeta.getContainerId(), logMeta.getNodeId()));\r\n        foundAnyLogs = true;\r\n    }\r\n    if (!foundAnyLogs) {\r\n        if (nodeId != null) {\r\n            err.println(\"Can not find information for any containers on \" + nodeId);\r\n        } else {\r\n            err.println(\"Can not find any container information for \" + \"the application: \" + appId);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    this.conf = conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return this.conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "containerLogNotFound",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void containerLogNotFound(String containerId)\n{\r\n    System.err.println(\"Logs for container \" + containerId + \" are not present in this log-file.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "logDirNotExist",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void logDirNotExist(String remoteAppLogDir)\n{\r\n    System.err.println(remoteAppLogDir + \" does not exist.\");\r\n    System.err.println(\"Log aggregation has not completed or is not enabled.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "emptyLogDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void emptyLogDir(String remoteAppLogDir)\n{\r\n    System.err.println(remoteAppLogDir + \" does not have any log files.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "logDirNoAccessPermission",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void logDirNoAccessPermission(String remoteAppLogDir, String appOwner, String errorMessage) throws IOException\n{\r\n    System.err.println(\"Guessed logs' owner is \" + appOwner + \" and current user \" + UserGroupInformation.getCurrentUser().getUserName() + \" does not \" + \"have permission to access \" + remoteAppLogDir + \". Error message found: \" + errorMessage);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "closePrintStream",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void closePrintStream(PrintStream out)\n{\r\n    if (out != System.out) {\r\n        IOUtils.closeStream(out);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "listContainerLogs",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Set<ContainerLogFileInfo> listContainerLogs(ContainerLogsRequest options) throws IOException\n{\r\n    List<ContainerLogMeta> containersLogMeta;\r\n    Set<ContainerLogFileInfo> logTypes = new HashSet<ContainerLogFileInfo>();\r\n    try {\r\n        containersLogMeta = getFileController(options.getAppId(), options.getAppOwner()).readAggregatedLogsMeta(options);\r\n    } catch (Exception ex) {\r\n        System.err.println(ex.getMessage());\r\n        return logTypes;\r\n    }\r\n    for (ContainerLogMeta logMeta : containersLogMeta) {\r\n        for (ContainerLogFileInfo fileInfo : logMeta.getContainerLogMeta()) {\r\n            logTypes.add(fileInfo);\r\n        }\r\n    }\r\n    return logTypes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getFileController",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationFileController getFileController(ApplicationId appId, String appOwner) throws IOException\n{\r\n    if (factory == null) {\r\n        factory = new LogAggregationFileControllerFactory(conf);\r\n    }\r\n    return factory.getFileControllerForRead(appId, appOwner);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "selectToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token<AMRMTokenIdentifier> selectToken(Text service, Collection<Token<? extends TokenIdentifier>> tokens)\n{\r\n    if (service == null) {\r\n        return null;\r\n    }\r\n    LOG.debug(\"Looking for a token with service {}\", service);\r\n    for (Token<? extends TokenIdentifier> token : tokens) {\r\n        LOG.debug(\"Token kind is {} and the token's service name is {}\", token.getKind(), token.getService());\r\n        if (AMRMTokenIdentifier.KIND_NAME.equals(token.getKind()) && checkService(service, token)) {\r\n            return (Token<AMRMTokenIdentifier>) token;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "checkService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean checkService(Text service, Token<? extends TokenIdentifier> token)\n{\r\n    if (service == null || token.getService() == null) {\r\n        return false;\r\n    }\r\n    return token.getService().toString().contains(service.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "convert",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PlacementConstraint convert()\n{\r\n    return new PlacementConstraint(convert(constraintProto));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "convert",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "AbstractConstraint convert(PlacementConstraintProto proto)\n{\r\n    return proto.hasSimpleConstraint() ? convert(proto.getSimpleConstraint()) : convert(proto.getCompositeConstraint());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "convert",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "SingleConstraint convert(SimplePlacementConstraintProto proto)\n{\r\n    Set<TargetExpression> targets = new HashSet<>();\r\n    for (PlacementConstraintTargetProto tp : proto.getTargetExpressionsList()) {\r\n        targets.add(convert(tp));\r\n    }\r\n    return new SingleConstraint(proto.getScope(), proto.getMinCardinality(), proto.getMaxCardinality(), convertFromProtoFormat(proto.getAttributeOpCode()), targets);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "convert",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TargetExpression convert(PlacementConstraintTargetProto proto)\n{\r\n    return new TargetExpression(ProtoUtils.convertFromProtoFormat(proto.getTargetType()), proto.hasTargetKey() ? proto.getTargetKey() : null, new HashSet<>(proto.getTargetValuesList()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "convert",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "AbstractConstraint convert(CompositePlacementConstraintProto proto)\n{\r\n    switch(proto.getCompositeType()) {\r\n        case AND:\r\n        case OR:\r\n            List<AbstractConstraint> children = new ArrayList<>();\r\n            for (PlacementConstraintProto cp : proto.getChildConstraintsList()) {\r\n                children.add(convert(cp));\r\n            }\r\n            return (proto.getCompositeType() == AND) ? new And(children) : new Or(children);\r\n        case DELAYED_OR:\r\n            List<TimedPlacementConstraint> tChildren = new ArrayList<>();\r\n            for (TimedPlacementConstraintProto cp : proto.getTimedChildConstraintsList()) {\r\n                tChildren.add(convert(cp));\r\n            }\r\n            return new DelayedOr(tChildren);\r\n        default:\r\n            throw new YarnRuntimeException(\"Encountered unexpected type of composite constraint.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "convert",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimedPlacementConstraint convert(TimedPlacementConstraintProto proto)\n{\r\n    AbstractConstraint pConstraint = convert(proto.getPlacementConstraint());\r\n    return new TimedPlacementConstraint(pConstraint, proto.getSchedulingDelay(), ProtoUtils.convertFromProtoFormat(proto.getDelayUnit()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeOpCode convertFromProtoFormat(NodeAttributeOpCodeProto p)\n{\r\n    return NodeAttributeOpCode.valueOf(p.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceAllocationRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ResourceAllocationRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getCapability()\n{\r\n    ResourceAllocationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.capability != null) {\r\n        return this.capability;\r\n    }\r\n    if (!p.hasResource()) {\r\n        return null;\r\n    }\r\n    this.capability = convertFromProtoFormat(p.getResource());\r\n    return this.capability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCapability(Resource newCapability)\n{\r\n    maybeInitBuilder();\r\n    if (newCapability == null) {\r\n        builder.clearResource();\r\n        return;\r\n    }\r\n    capability = newCapability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getStartTime()\n{\r\n    ResourceAllocationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasStartTime()) {\r\n        return 0;\r\n    }\r\n    return (p.getStartTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setStartTime",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setStartTime(long startTime)\n{\r\n    maybeInitBuilder();\r\n    if (startTime <= 0) {\r\n        builder.clearStartTime();\r\n        return;\r\n    }\r\n    builder.setStartTime(startTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getEndTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getEndTime()\n{\r\n    ResourceAllocationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasEndTime()) {\r\n        return 0;\r\n    }\r\n    return (p.getEndTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setEndTime",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setEndTime(long endTime)\n{\r\n    maybeInitBuilder();\r\n    if (endTime <= 0) {\r\n        builder.clearEndTime();\r\n        return;\r\n    }\r\n    builder.setEndTime(endTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource p)\n{\r\n    return ProtoUtils.convertToProtoFormat(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.capability != null) {\r\n        builder.setResource(convertToProtoFormat(this.capability));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String toString()\n{\r\n    return \"{Resource: \" + getCapability() + \", # Start Time: \" + getStartTime() + \", End Time: \" + getEndTime() + \"}\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationAllocationStateProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReservationAllocationStateProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.resourceAllocations != null) {\r\n        int size = resourceAllocations.size();\r\n        builder.clearAllocationRequests();\r\n        for (int i = 0; i < size; i++) {\r\n            builder.addAllocationRequests(i, convertToProtoFormat(resourceAllocations.get(i)));\r\n        }\r\n    }\r\n    if (this.reservationId != null) {\r\n        builder.setReservationId(convertToProtoFormat(this.reservationId));\r\n    }\r\n    if (this.reservationDefinition != null) {\r\n        builder.setReservationDefinition(convertToProtoFormat(this.reservationDefinition));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAcceptanceTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getAcceptanceTime()\n{\r\n    ReservationAllocationStateProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAcceptanceTime()) {\r\n        return 0;\r\n    }\r\n    return (p.getAcceptanceTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAcceptanceTime",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAcceptanceTime(long acceptanceTime)\n{\r\n    maybeInitBuilder();\r\n    if (acceptanceTime <= 0) {\r\n        builder.clearAcceptanceTime();\r\n        return;\r\n    }\r\n    builder.setAcceptanceTime(acceptanceTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getUser()\n{\r\n    ReservationAllocationStateProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasUser()) {\r\n        return null;\r\n    }\r\n    return p.getUser();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setUser",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUser(String user)\n{\r\n    maybeInitBuilder();\r\n    if (user == null) {\r\n        builder.clearUser();\r\n        return;\r\n    }\r\n    builder.setUser(user);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResourceAllocationRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ResourceAllocationRequest> getResourceAllocationRequests()\n{\r\n    initResourceAllocations();\r\n    return this.resourceAllocations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResourceAllocationRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResourceAllocationRequests(List<ResourceAllocationRequest> newResourceAllocations)\n{\r\n    maybeInitBuilder();\r\n    if (newResourceAllocations == null) {\r\n        builder.clearAllocationRequests();\r\n    }\r\n    this.resourceAllocations = newResourceAllocations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getReservationId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationId getReservationId()\n{\r\n    ReservationAllocationStateProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.reservationId != null) {\r\n        return this.reservationId;\r\n    }\r\n    this.reservationId = convertFromProtoFormat(p.getReservationId());\r\n    return this.reservationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setReservationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservationId(ReservationId newReservationId)\n{\r\n    maybeInitBuilder();\r\n    if (newReservationId == null) {\r\n        builder.clearReservationId();\r\n    }\r\n    reservationId = newReservationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getReservationDefinition",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationDefinition getReservationDefinition()\n{\r\n    ReservationAllocationStateProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.reservationDefinition != null) {\r\n        return this.reservationDefinition;\r\n    }\r\n    this.reservationDefinition = convertFromProtoFormat(p.getReservationDefinition());\r\n    return this.reservationDefinition;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setReservationDefinition",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservationDefinition(ReservationDefinition newReservationDefinition)\n{\r\n    maybeInitBuilder();\r\n    if (newReservationDefinition == null) {\r\n        builder.clearReservationDefinition();\r\n    }\r\n    reservationDefinition = newReservationDefinition;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceAllocationRequestPBImpl convertFromProtoFormat(ResourceAllocationRequestProto p)\n{\r\n    return new ResourceAllocationRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationIdPBImpl convertFromProtoFormat(ReservationIdProto p)\n{\r\n    return new ReservationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationDefinitionPBImpl convertFromProtoFormat(ReservationDefinitionProto p)\n{\r\n    return new ReservationDefinitionPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceAllocationRequestProto convertToProtoFormat(ResourceAllocationRequest p)\n{\r\n    return ((ResourceAllocationRequestPBImpl) p).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationIdProto convertToProtoFormat(ReservationId p)\n{\r\n    return ((ReservationIdPBImpl) p).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationDefinitionProto convertToProtoFormat(ReservationDefinition p)\n{\r\n    return ((ReservationDefinitionPBImpl) p).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initResourceAllocations",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initResourceAllocations()\n{\r\n    if (this.resourceAllocations != null) {\r\n        return;\r\n    }\r\n    ReservationAllocationStateProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ResourceAllocationRequestProto> resourceAllocationProtos = p.getAllocationRequestsList();\r\n    resourceAllocations = new ArrayList<>();\r\n    for (ResourceAllocationRequestProto r : resourceAllocationProtos) {\r\n        resourceAllocations.add(convertFromProtoFormat(r));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String toString()\n{\r\n    return \"{Acceptance Time: \" + getAcceptanceTime() + \", User: \" + getUser() + \", Resource Allocations: \" + getResourceAllocationRequests() + \", Reservation Id: \" + getReservationId() + \", Reservation Definition: \" + getReservationDefinition() + \"}\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "compareForOperation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean compareForOperation(AttributeValue other, AttributeExpressionOperation op)\n{\r\n    if (other instanceof StringAttributeValue) {\r\n        StringAttributeValue otherString = (StringAttributeValue) other;\r\n        switch(op) {\r\n            case IN:\r\n                return value.equals(otherString.value);\r\n            case NOTIN:\r\n                return !value.equals(otherString.value);\r\n            default:\r\n                return false;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "validateAndInitializeValue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void validateAndInitializeValue(String valueStr) throws IOException\n{\r\n    NodeLabelUtil.checkAndThrowAttributeValue(valueStr);\r\n    this.value = valueStr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getValue()\n{\r\n    return value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return getValue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdProto getProto()\n{\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getId()\n{\r\n    if (proto == null) {\r\n        throw new NullPointerException(\"The argument object is NULL\");\r\n    }\r\n    return proto.getId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setId(int id)\n{\r\n    if (builder == null) {\r\n        throw new NullPointerException(\"The argument object is NULL\");\r\n    }\r\n    builder.setId(id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getClusterTimestamp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getClusterTimestamp()\n{\r\n    if (proto == null) {\r\n        throw new NullPointerException(\"The argument object is NULL\");\r\n    }\r\n    return proto.getClusterTimestamp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setClusterTimestamp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setClusterTimestamp(long clusterTimestamp)\n{\r\n    if (builder == null) {\r\n        throw new NullPointerException(\"The argument object is NULL\");\r\n    }\r\n    builder.setClusterTimestamp((clusterTimestamp));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "build",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void build()\n{\r\n    proto = builder.build();\r\n    builder = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetResourceProfileRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setProfileName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setProfileName(String profileName)\n{\r\n    this.profile = profileName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (profile != null) {\r\n        builder.setProfile(profile);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetResourceProfileRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProfileName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getProfileName()\n{\r\n    if (this.profile != null) {\r\n        return profile;\r\n    }\r\n    GetResourceProfileRequestProtoOrBuilder protoOrBuilder = viaProto ? proto : builder;\r\n    if (protoOrBuilder.hasProfile()) {\r\n        profile = protoOrBuilder.getProfile();\r\n    }\r\n    return profile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "compare",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int compare(Resource unused, Resource lhs, Resource rhs, boolean singleType)\n{\r\n    return Long.compare(lhs.getMemorySize(), rhs.getMemorySize());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "computeAvailableContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long computeAvailableContainers(Resource available, Resource required)\n{\r\n    return available.getMemorySize() / required.getMemorySize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divide",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float divide(Resource unused, Resource numerator, Resource denominator)\n{\r\n    return ratio(numerator, denominator);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isInvalidDivisor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isInvalidDivisor(Resource r)\n{\r\n    if (r.getMemorySize() == 0.0f) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "ratio",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float ratio(Resource a, Resource b)\n{\r\n    return divideSafelyAsFloat(a.getMemorySize(), b.getMemorySize());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource divideAndCeil(Resource numerator, int denominator)\n{\r\n    return Resources.createResource(divideAndCeil(numerator.getMemorySize(), denominator));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource divideAndCeil(Resource numerator, float denominator)\n{\r\n    return Resources.createResource(divideAndCeil(numerator.getMemorySize(), denominator));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "normalize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Resource normalize(Resource r, Resource minimumResource, Resource maximumResource, Resource stepFactor)\n{\r\n    if (stepFactor.getMemorySize() == 0) {\r\n        LOG.error(\"Memory cannot be allocated in increments of zero. Assuming \" + minimumResource.getMemorySize() + \"MB increment size. \" + \"Please ensure the scheduler configuration is correct.\");\r\n        stepFactor = minimumResource;\r\n    }\r\n    long normalizedMemory = Math.min(roundUp(Math.max(r.getMemorySize(), minimumResource.getMemorySize()), stepFactor.getMemorySize()), maximumResource.getMemorySize());\r\n    return Resources.createResource(normalizedMemory);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "roundUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource roundUp(Resource r, Resource stepFactor)\n{\r\n    return Resources.createResource(roundUp(r.getMemorySize(), stepFactor.getMemorySize()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "roundDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource roundDown(Resource r, Resource stepFactor)\n{\r\n    return Resources.createResource(roundDown(r.getMemorySize(), stepFactor.getMemorySize()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalizeUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource multiplyAndNormalizeUp(Resource r, double by, Resource stepFactor)\n{\r\n    return Resources.createResource(roundUp((long) (r.getMemorySize() * by + 0.5), stepFactor.getMemorySize()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalizeUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource multiplyAndNormalizeUp(Resource r, double[] by, Resource stepFactor)\n{\r\n    return Resources.createResource(roundUp((long) (r.getMemorySize() * by[0] + 0.5), stepFactor.getMemorySize()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalizeDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource multiplyAndNormalizeDown(Resource r, double by, Resource stepFactor)\n{\r\n    return Resources.createResource(roundDown((long) (r.getMemorySize() * by), stepFactor.getMemorySize()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "fitsIn",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean fitsIn(Resource smaller, Resource bigger)\n{\r\n    return smaller.getMemorySize() <= bigger.getMemorySize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "normalizeDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource normalizeDown(Resource r, Resource stepFactor)\n{\r\n    return Resources.createResource(roundDown((r.getMemorySize()), stepFactor.getMemorySize()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isAnyMajorResourceZeroOrNegative",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isAnyMajorResourceZeroOrNegative(Resource resource)\n{\r\n    return resource.getMemorySize() <= 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isAnyMajorResourceAboveZero",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isAnyMajorResourceAboveZero(Resource resource)\n{\r\n    return resource.getMemorySize() > 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "getInsufficientResourceNames",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Set<String> getInsufficientResourceNames(Resource required, Resource available)\n{\r\n    if (required.getMemorySize() > available.getMemorySize()) {\r\n        return INSUFFICIENT_RESOURCE_NAME;\r\n    } else {\r\n        return ImmutableSet.of();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isAllInvalidDivisor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isAllInvalidDivisor(Resource r)\n{\r\n    return isInvalidDivisor(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    this.eventProcessor.start();\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    this.stopped = true;\r\n    this.eventProcessor.interrupt();\r\n    try {\r\n        this.eventProcessor.join();\r\n    } catch (InterruptedException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "handle",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void handle(T event)\n{\r\n    try {\r\n        int qSize = eventQueue.size();\r\n        if (qSize != 0 && qSize % 1000 == 0) {\r\n            LOG.info(\"Size of \" + getName() + \" event-queue is \" + qSize);\r\n        }\r\n        int remCapacity = eventQueue.remainingCapacity();\r\n        if (remCapacity < 1000) {\r\n            LOG.info(\"Very low remaining capacity on \" + getName() + \"\" + \"event queue: \" + remCapacity);\r\n        }\r\n        this.eventQueue.put(event);\r\n    } catch (InterruptedException e) {\r\n        LOG.info(\"Interrupted. Trying to exit gracefully.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "disableExitOnError",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void disableExitOnError()\n{\r\n    shouldExitOnError = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "setMetrics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMetrics(EventTypeMetrics metrics)\n{\r\n    this.metrics = metrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "getEventProcessorId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getEventProcessorId()\n{\r\n    return this.eventProcessor.getId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "isStopped",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isStopped()\n{\r\n    return this.stopped;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "getEventQueueSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getEventQueueSize()\n{\r\n    return eventQueue.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getVersion()\n{\r\n    return YARN_VERSION_INFO._getVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getRevision",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getRevision()\n{\r\n    return YARN_VERSION_INFO._getRevision();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getBranch",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getBranch()\n{\r\n    return YARN_VERSION_INFO._getBranch();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getDate",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getDate()\n{\r\n    return YARN_VERSION_INFO._getDate();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getUser()\n{\r\n    return YARN_VERSION_INFO._getUser();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getUrl",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getUrl()\n{\r\n    return YARN_VERSION_INFO._getUrl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getSrcChecksum",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getSrcChecksum()\n{\r\n    return YARN_VERSION_INFO._getSrcChecksum();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getBuildVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getBuildVersion()\n{\r\n    return YARN_VERSION_INFO._getBuildVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    LOG.debug(\"version: {}\", getVersion());\r\n    System.out.println(\"YARN \" + getVersion());\r\n    System.out.println(\"Subversion \" + getUrl() + \" -r \" + getRevision());\r\n    System.out.println(\"Compiled by \" + getUser() + \" on \" + getDate());\r\n    System.out.println(\"From source with checksum \" + getSrcChecksum());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainersToUpdate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<Token> getContainersToUpdate()\n{\r\n    if (containersToUpdate != null) {\r\n        return containersToUpdate;\r\n    }\r\n    ContainerUpdateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<TokenProto> list = p.getUpdateContainerTokenList();\r\n    containersToUpdate = new ArrayList<>();\r\n    for (TokenProto c : list) {\r\n        containersToUpdate.add(convertFromProtoFormat(c));\r\n    }\r\n    return containersToUpdate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainersToUpdate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainersToUpdate(List<Token> containersToUpdate)\n{\r\n    maybeInitBuilder();\r\n    if (containersToUpdate == null) {\r\n        builder.clearUpdateContainerToken();\r\n    }\r\n    this.containersToUpdate = containersToUpdate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerUpdateRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Token convertFromProtoFormat(TokenProto p)\n{\r\n    return new TokenPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token t)\n{\r\n    return ((TokenPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ContainerUpdateRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containersToUpdate != null) {\r\n        addUpdateContainersToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addUpdateContainersToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addUpdateContainersToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearUpdateContainerToken();\r\n    if (this.containersToUpdate == null) {\r\n        return;\r\n    }\r\n    Iterable<TokenProto> iterable = new Iterable<TokenProto>() {\r\n\r\n        @Override\r\n        public Iterator<TokenProto> iterator() {\r\n            return new Iterator<TokenProto>() {\r\n\r\n                private Iterator<Token> iter = containersToUpdate.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public TokenProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllUpdateContainerToken(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getVirtualMemorySize()\n{\r\n    return sys.getVirtualMemorySize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getPhysicalMemorySize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getPhysicalMemorySize()\n{\r\n    return sys.getPhysicalMemorySize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getAvailableVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAvailableVirtualMemorySize()\n{\r\n    return sys.getAvailableVirtualMemorySize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getAvailablePhysicalMemorySize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAvailablePhysicalMemorySize()\n{\r\n    return sys.getAvailablePhysicalMemorySize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getNumProcessors",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumProcessors()\n{\r\n    return sys.getNumProcessors();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getNumCores",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumCores()\n{\r\n    return sys.getNumCores();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCpuFrequency",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCpuFrequency()\n{\r\n    return sys.getCpuFrequency();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCumulativeCpuTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCumulativeCpuTime()\n{\r\n    return sys.getCumulativeCpuTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCpuUsagePercentage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getCpuUsagePercentage()\n{\r\n    return sys.getCpuUsagePercentage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getNumVCoresUsed",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getNumVCoresUsed()\n{\r\n    return sys.getNumVCoresUsed();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getNetworkBytesRead",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNetworkBytesRead()\n{\r\n    return sys.getNetworkBytesRead();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getNetworkBytesWritten",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNetworkBytesWritten()\n{\r\n    return sys.getNetworkBytesWritten();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getStorageBytesRead",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getStorageBytesRead()\n{\r\n    return sys.getStorageBytesRead();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getStorageBytesWritten",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getStorageBytesWritten()\n{\r\n    return sys.getStorageBytesWritten();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getResourceCalculatorPlugin",
  "errType" : [ "UnsupportedOperationException", "Throwable" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ResourceCalculatorPlugin getResourceCalculatorPlugin(Class<? extends ResourceCalculatorPlugin> clazz, Configuration conf)\n{\r\n    if (clazz != null) {\r\n        return ReflectionUtils.newInstance(clazz, conf);\r\n    }\r\n    try {\r\n        return new ResourceCalculatorPlugin();\r\n    } catch (UnsupportedOperationException ue) {\r\n        LOG.warn(\"Failed to instantiate default resource calculator. \" + ue.getMessage());\r\n    } catch (Throwable t) {\r\n        LOG.warn(t + \": Failed to instantiate default resource calculator.\", t);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getContainersMonitorPlugin",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ResourceCalculatorPlugin getContainersMonitorPlugin(Configuration conf)\n{\r\n    Class<? extends ResourceCalculatorPlugin> clazzNM = conf.getClass(YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null, ResourceCalculatorPlugin.class);\r\n    Class<? extends ResourceCalculatorPlugin> clazz = conf.getClass(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, clazzNM, ResourceCalculatorPlugin.class);\r\n    return ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getNodeResourceMonitorPlugin",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceCalculatorPlugin getNodeResourceMonitorPlugin(Configuration conf)\n{\r\n    Class<? extends ResourceCalculatorPlugin> clazz = conf.getClass(YarnConfiguration.NM_MON_RESOURCE_CALCULATOR, null, ResourceCalculatorPlugin.class);\r\n    return ResourceCalculatorPlugin.getResourceCalculatorPlugin(clazz, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "getRemoteException",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnException getRemoteException(Throwable t)\n{\r\n    return new YarnException(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "getRemoteException",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnException getRemoteException(String message)\n{\r\n    return new YarnException(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "instantiateException",
  "errType" : [ "NoSuchMethodException", "IllegalArgumentException", "SecurityException", "InstantiationException", "IllegalAccessException", "InvocationTargetException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "T instantiateException(Class<? extends T> cls, RemoteException re) throws RemoteException\n{\r\n    try {\r\n        Constructor<? extends T> cn = cls.getConstructor(String.class);\r\n        cn.setAccessible(true);\r\n        T ex = cn.newInstance(re.getMessage());\r\n        ex.initCause(re);\r\n        return ex;\r\n    } catch (NoSuchMethodException e) {\r\n        throw re;\r\n    } catch (IllegalArgumentException e) {\r\n        throw re;\r\n    } catch (SecurityException e) {\r\n        throw re;\r\n    } catch (InstantiationException e) {\r\n        throw re;\r\n    } catch (IllegalAccessException e) {\r\n        throw re;\r\n    } catch (InvocationTargetException e) {\r\n        throw re;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "instantiateYarnException",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T instantiateYarnException(Class<? extends T> cls, RemoteException re) throws RemoteException\n{\r\n    return instantiateException(cls, re);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "instantiateIOException",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T instantiateIOException(Class<? extends T> cls, RemoteException re) throws RemoteException\n{\r\n    return instantiateException(cls, re);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "instantiateRuntimeException",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T instantiateRuntimeException(Class<? extends T> cls, RemoteException re) throws RemoteException\n{\r\n    return instantiateException(cls, re);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "unwrapAndThrowException",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Void unwrapAndThrowException(ServiceException se) throws IOException, YarnException\n{\r\n    Throwable cause = se.getCause();\r\n    if (cause == null) {\r\n        throw new IOException(se);\r\n    } else {\r\n        if (cause instanceof RemoteException) {\r\n            RemoteException re = (RemoteException) cause;\r\n            Class<?> realClass = null;\r\n            try {\r\n                realClass = Class.forName(re.getClassName());\r\n            } catch (ClassNotFoundException cnf) {\r\n                throw instantiateYarnException(YarnException.class, re);\r\n            }\r\n            if (YarnException.class.isAssignableFrom(realClass)) {\r\n                throw instantiateYarnException(realClass.asSubclass(YarnException.class), re);\r\n            } else if (IOException.class.isAssignableFrom(realClass)) {\r\n                throw instantiateIOException(realClass.asSubclass(IOException.class), re);\r\n            } else if (RuntimeException.class.isAssignableFrom(realClass)) {\r\n                throw instantiateRuntimeException(realClass.asSubclass(RuntimeException.class), re);\r\n            } else {\r\n                throw re;\r\n            }\r\n        } else if (cause instanceof IOException) {\r\n            throw (IOException) cause;\r\n        } else if (cause instanceof RuntimeException) {\r\n            throw (RuntimeException) cause;\r\n        } else {\r\n            throw new IOException(se);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptIdProto getProto()\n{\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getAttemptId()\n{\r\n    Preconditions.checkNotNull(proto);\r\n    return proto.getAttemptId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAttemptId(int attemptId)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setAttemptId(attemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId appId)\n{\r\n    if (appId != null) {\r\n        Preconditions.checkNotNull(builder);\r\n        builder.setApplicationId(convertToProtoFormat(appId));\r\n    }\r\n    this.applicationId = appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "build",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void build()\n{\r\n    proto = builder.build();\r\n    builder = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetAllResourceProfilesResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetAllResourceProfilesResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (profiles != null) {\r\n        addProfilesToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addProfilesToProto",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void addProfilesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearResourceProfiles();\r\n    if (profiles == null) {\r\n        return;\r\n    }\r\n    ResourceProfilesProto.Builder profilesBuilder = ResourceProfilesProto.newBuilder();\r\n    for (Map.Entry<String, Resource> entry : profiles.entrySet()) {\r\n        ResourceProfileEntry.Builder profileEntry = ResourceProfileEntry.newBuilder();\r\n        profileEntry.setName(entry.getKey());\r\n        profileEntry.setResources(convertToProtoFormat(entry.getValue()));\r\n        profilesBuilder.addResourceProfilesMap(profileEntry);\r\n    }\r\n    builder.setResourceProfiles(profilesBuilder.build());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResourceProfiles",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setResourceProfiles(Map<String, Resource> resourceProfiles)\n{\r\n    initResourceProfiles();\r\n    profiles.clear();\r\n    profiles.putAll(resourceProfiles);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResourceProfiles",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Resource> getResourceProfiles()\n{\r\n    initResourceProfiles();\r\n    return profiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initResourceProfiles",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initResourceProfiles()\n{\r\n    if (profiles != null) {\r\n        return;\r\n    }\r\n    profiles = new HashMap<>();\r\n    GetAllResourceProfilesResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ResourceProfileEntry> profilesList = p.getResourceProfiles().getResourceProfilesMapList();\r\n    for (ResourceProfileEntry entry : profilesList) {\r\n        profiles.put(entry.getName(), new ResourcePBImpl(entry.getResources()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource res)\n{\r\n    return ProtoUtils.convertToProtoFormat(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createAppAdminClient",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "AppAdminClient createAppAdminClient(String appType, Configuration conf)\n{\r\n    Map<String, String> clientClassMap = conf.getPropsWithPrefix(YARN_APP_ADMIN_CLIENT_PREFIX);\r\n    if (!clientClassMap.containsKey(DEFAULT_TYPE)) {\r\n        clientClassMap.put(DEFAULT_TYPE, DEFAULT_CLASS_NAME);\r\n    }\r\n    if (!clientClassMap.containsKey(UNIT_TEST_TYPE)) {\r\n        clientClassMap.put(UNIT_TEST_TYPE, UNIT_TEST_CLASS_NAME);\r\n    }\r\n    if (!clientClassMap.containsKey(appType)) {\r\n        throw new IllegalArgumentException(\"App admin client class name not \" + \"specified for type \" + appType + \". Please ensure \" + appType + \" framework has provided a client implementation to handle\" + \" this functionality.\");\r\n    }\r\n    String clientClassName = clientClassMap.get(appType);\r\n    Class<? extends AppAdminClient> clientClass;\r\n    try {\r\n        clientClass = (Class<? extends AppAdminClient>) Class.forName(clientClassName);\r\n    } catch (ClassNotFoundException e) {\r\n        throw new YarnRuntimeException(\"Invalid app admin client class\", e);\r\n    }\r\n    AppAdminClient appAdminClient = ReflectionUtils.newInstance(clientClass, conf);\r\n    appAdminClient.init(conf);\r\n    appAdminClient.start();\r\n    return appAdminClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "actionLaunch",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int actionLaunch(String fileName, String appName, Long lifetime, String queue) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "actionStop",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int actionStop(String appName) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "actionStart",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int actionStart(String appName) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "actionSave",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int actionSave(String fileName, String appName, Long lifetime, String queue) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "actionDestroy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int actionDestroy(String appName) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "actionFlex",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int actionFlex(String appName, Map<String, String> componentCounts) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "enableFastLaunch",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int enableFastLaunch(String destinationFolder) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getStatusString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getStatusString(String appIdOrName) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "initiateUpgrade",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int initiateUpgrade(String appName, String fileName, boolean autoFinalize) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "actionUpgradeInstances",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int actionUpgradeInstances(String appName, List<String> componentInstances) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "actionUpgradeComponents",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int actionUpgradeComponents(String appName, List<String> components) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "actionCleanUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int actionCleanUp(String appName, String userName) throws IOException, YarnException, InterruptedException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getInstances",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getInstances(String appName, List<String> components, String version, List<String> containerStates) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "actionUpgradeExpress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int actionUpgradeExpress(String appName, File fileName) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "actionCancelUpgrade",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int actionCancelUpgrade(String appName) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "actionDecommissionInstances",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int actionDecommissionInstances(String appName, List<String> componentInstances) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "opt",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "EnumSet<EOpt> opt(boolean endTag, boolean inline, boolean pre)\n{\r\n    EnumSet<EOpt> opts = of(ENDTAG);\r\n    if (!endTag)\r\n        opts.remove(ENDTAG);\r\n    if (inline)\r\n        opts.add(INLINE);\r\n    if (pre)\r\n        opts.add(PRE);\r\n    return opts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "head_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HEAD<T> head_(T e, boolean inline)\n{\r\n    return new HEAD<T>(\"head\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "body_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BODY<T> body_(T e, boolean inline)\n{\r\n    return new BODY<T>(\"body\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "base_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BASE<T> base_(T e, boolean inline)\n{\r\n    return new BASE<T>(\"base\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "title_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TITLE<T> title_(T e, boolean inline)\n{\r\n    return new TITLE<T>(\"title\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "th_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TH<T> th_(T e, boolean inline)\n{\r\n    return new TH<T>(\"th\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "td_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TD<T> td_(T e, boolean inline)\n{\r\n    return new TD<T>(\"td\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "caption_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CAPTION<T> caption_(T e, boolean inline)\n{\r\n    return new CAPTION<T>(\"caption\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "colgroup_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "COLGROUP<T> colgroup_(T e, boolean inline)\n{\r\n    return new COLGROUP<T>(\"colgroup\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "thead_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "THEAD<T> thead_(T e, boolean inline)\n{\r\n    return new THEAD<T>(\"thead\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "tfoot_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TFOOT<T> tfoot_(T e, boolean inline)\n{\r\n    return new TFOOT<T>(\"tfoot\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "tbody_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TBODY<T> tbody_(T e, boolean inline)\n{\r\n    return new TBODY<T>(\"tbody\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "col_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "COL<T> col_(T e, boolean inline)\n{\r\n    return new COL<T>(\"col\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "tr_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TR<T> tr_(T e, boolean inline)\n{\r\n    return new TR<T>(\"tr\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "legend_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LEGEND<T> legend_(T e, boolean inline)\n{\r\n    return new LEGEND<T>(\"legend\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "optgroup_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OPTGROUP<T> optgroup_(T e, boolean inline)\n{\r\n    return new OPTGROUP<T>(\"optgroup\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "option_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OPTION<T> option_(T e, boolean inline)\n{\r\n    return new OPTION<T>(\"option\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "li_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LI<T> li_(T e, boolean inline)\n{\r\n    return new LI<T>(\"li\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "dt_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DT<T> dt_(T e, boolean inline)\n{\r\n    return new DT<T>(\"dt\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "dd_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DD<T> dd_(T e, boolean inline)\n{\r\n    return new DD<T>(\"dd\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "param_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PARAM<T> param_(T e, boolean inline)\n{\r\n    return new PARAM<T>(\"param\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "area_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AREA<T> area_(T e, boolean inline)\n{\r\n    return new AREA<T>(\"area\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "table_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TABLE<T> table_(T e, boolean inline)\n{\r\n    return new TABLE<T>(\"table\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "address_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ADDRESS<T> address_(T e, boolean inline)\n{\r\n    return new ADDRESS<T>(\"address\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "p_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "P<T> p_(T e, boolean inline)\n{\r\n    return new P<T>(\"p\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "hr_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HR<T> hr_(T e, boolean inline)\n{\r\n    return new HR<T>(\"hr\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "dl_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DL<T> dl_(T e, boolean inline)\n{\r\n    return new DL<T>(\"dl\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "div_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DIV<T> div_(T e, boolean inline)\n{\r\n    return new DIV<T>(\"div\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "blockquote_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BLOCKQUOTE<T> blockquote_(T e, boolean inline)\n{\r\n    return new BLOCKQUOTE<T>(\"blockquote\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "bq_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BLOCKQUOTE<T> bq_(T e, boolean inline)\n{\r\n    return new BLOCKQUOTE<T>(\"blockquote\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "fieldset_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FIELDSET<T> fieldset_(T e, boolean inline)\n{\r\n    return new FIELDSET<T>(\"fieldset\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "form_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FORM<T> form_(T e, boolean inline)\n{\r\n    return new FORM<T>(\"form\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "input_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "INPUT<T> input_(T e, boolean inline)\n{\r\n    return new INPUT<T>(\"input\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "select_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SELECT<T> select_(T e, boolean inline)\n{\r\n    return new SELECT<T>(\"select\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "textarea_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TEXTAREA<T> textarea_(T e, boolean inline)\n{\r\n    return new TEXTAREA<T>(\"textarea\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "button_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BUTTON<T> button_(T e, boolean inline)\n{\r\n    return new BUTTON<T>(\"button\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "label_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LABEL<T> label_(T e, boolean inline)\n{\r\n    return new LABEL<T>(\"label\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "map_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MAP<T> map_(T e, boolean inline)\n{\r\n    return new MAP<T>(\"map\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "q_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Q<T> q_(T e, boolean inline)\n{\r\n    return new Q<T>(\"q\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "br_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BR<T> br_(T e, boolean inline)\n{\r\n    return new BR<T>(\"br\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "bdo_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BDO<T> bdo_(T e, boolean inline)\n{\r\n    return new BDO<T>(\"bdo\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "span_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SPAN<T> span_(T e, boolean inline)\n{\r\n    return new SPAN<T>(\"span\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "ins_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "INS<T> ins_(T e, boolean inline)\n{\r\n    return new INS<T>(\"ins\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "del_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DEL<T> del_(T e, boolean inline)\n{\r\n    return new DEL<T>(\"del\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "a_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "A<T> a_(T e, boolean inline)\n{\r\n    return new A<T>(\"a\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "sub_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SUB<T> sub_(T e, boolean inline)\n{\r\n    return new SUB<T>(\"sub\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "sup_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SUP<T> sup_(T e, boolean inline)\n{\r\n    return new SUP<T>(\"sup\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "img_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "IMG<T> img_(T e, boolean inline)\n{\r\n    return new IMG<T>(\"img\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "em_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "EM<T> em_(T e, boolean inline)\n{\r\n    return new EM<T>(\"em\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "strong_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "STRONG<T> strong_(T e, boolean inline)\n{\r\n    return new STRONG<T>(\"strong\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "dfn_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DFN<T> dfn_(T e, boolean inline)\n{\r\n    return new DFN<T>(\"dfn\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "code_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CODE<T> code_(T e, boolean inline)\n{\r\n    return new CODE<T>(\"code\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "samp_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SAMP<T> samp_(T e, boolean inline)\n{\r\n    return new SAMP<T>(\"samp\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "kbd_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "KBD<T> kbd_(T e, boolean inline)\n{\r\n    return new KBD<T>(\"kbd\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "var_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "VAR<T> var_(T e, boolean inline)\n{\r\n    return new VAR<T>(\"var\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "cite_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CITE<T> cite_(T e, boolean inline)\n{\r\n    return new CITE<T>(\"cite\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "abbr_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ABBR<T> abbr_(T e, boolean inline)\n{\r\n    return new ABBR<T>(\"abbr\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "b_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "B<T> b_(T e, boolean inline)\n{\r\n    return new B<T>(\"b\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "i_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "I<T> i_(T e, boolean inline)\n{\r\n    return new I<T>(\"i\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "small_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SMALL<T> small_(T e, boolean inline)\n{\r\n    return new SMALL<T>(\"small\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "pre_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PRE<T> pre_(T e, boolean inline)\n{\r\n    return new PRE<T>(\"pre\", e, opt(true, inline, true));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "ul_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UL<T> ul_(T e, boolean inline)\n{\r\n    return new UL<T>(\"ul\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "ol_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OL<T> ol_(T e, boolean inline)\n{\r\n    return new OL<T>(\"ol\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h1_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "H1<T> h1_(T e, boolean inline)\n{\r\n    return new H1<T>(\"h1\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h2_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "H2<T> h2_(T e, boolean inline)\n{\r\n    return new H2<T>(\"h2\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h3_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "H3<T> h3_(T e, boolean inline)\n{\r\n    return new H3<T>(\"h3\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h4_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "H4<T> h4_(T e, boolean inline)\n{\r\n    return new H4<T>(\"h4\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h5_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "H5<T> h5_(T e, boolean inline)\n{\r\n    return new H5<T>(\"h5\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h6_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "H6<T> h6_(T e, boolean inline)\n{\r\n    return new H6<T>(\"h6\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "style_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "STYLE<T> style_(T e, boolean inline)\n{\r\n    return new STYLE<T>(\"style\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "link_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LINK<T> link_(T e, boolean inline)\n{\r\n    return new LINK<T>(\"link\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "meta_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "META<T> meta_(T e, boolean inline)\n{\r\n    return new META<T>(\"meta\", e, opt(false, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "object_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OBJECT<T> object_(T e, boolean inline)\n{\r\n    return new OBJECT<T>(\"object\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "script_",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SCRIPT<T> script_(T e, boolean inline)\n{\r\n    return new SCRIPT<T>(\"script\", e, opt(true, inline, false));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "head",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HEAD<Hamlet> head()\n{\r\n    return head_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "body",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BODY<Hamlet> body()\n{\r\n    return body_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "body",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BODY<Hamlet> body(String selector)\n{\r\n    return setSelector(body(), selector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "base",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BASE<Hamlet> base()\n{\r\n    return base_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "base",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet base(String href)\n{\r\n    return base().$href(href).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "title",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TITLE<Hamlet> title()\n{\r\n    return title_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "title",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet title(String cdata)\n{\r\n    return title().__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "style",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "STYLE<Hamlet> style()\n{\r\n    return style_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "style",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet style(Object... lines)\n{\r\n    return style().$type(\"text/css\").__(lines).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "link",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LINK<Hamlet> link()\n{\r\n    return link_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "link",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet link(String href)\n{\r\n    return setLinkHref(link(), href).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "meta",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "META<Hamlet> meta()\n{\r\n    return meta_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "meta",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet meta(String name, String content)\n{\r\n    return meta().$name(name).$content(content).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "meta_http",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet meta_http(String header, String content)\n{\r\n    return meta().$http_equiv(header).$content(content).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "script",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SCRIPT<Hamlet> script()\n{\r\n    return script_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "script",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet script(String src)\n{\r\n    return setScriptSrc(script(), src).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "object",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OBJECT<Hamlet> object()\n{\r\n    return object_(this, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "object",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OBJECT<Hamlet> object(String selector)\n{\r\n    return setSelector(object(), selector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "table",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TABLE<Hamlet> table()\n{\r\n    return table_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "table",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TABLE<Hamlet> table(String selector)\n{\r\n    return setSelector(table(), selector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "address",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet address(String cdata)\n{\r\n    return address().__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "address",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ADDRESS<Hamlet> address()\n{\r\n    return address_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "p",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "P<Hamlet> p(String selector)\n{\r\n    return setSelector(p(), selector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "p",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "P<Hamlet> p()\n{\r\n    return p_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "__",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet __(Class<? extends SubView> cls)\n{\r\n    subView(cls);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "hr",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HR<Hamlet> hr()\n{\r\n    return hr_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "hr",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet hr(String selector)\n{\r\n    return setSelector(hr(), selector).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "dl",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DL<Hamlet> dl(String selector)\n{\r\n    return setSelector(dl(), selector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "dl",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DL<Hamlet> dl()\n{\r\n    return dl_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "div",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DIV<Hamlet> div(String selector)\n{\r\n    return setSelector(div(), selector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "div",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DIV<Hamlet> div()\n{\r\n    return div_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "blockquote",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BLOCKQUOTE<Hamlet> blockquote()\n{\r\n    return blockquote_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "bq",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BLOCKQUOTE<Hamlet> bq()\n{\r\n    return blockquote_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h1",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet h1(String cdata)\n{\r\n    return h1().__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h1",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "H1<Hamlet> h1()\n{\r\n    return h1_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h1",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet h1(String selector, String cdata)\n{\r\n    return setSelector(h1(), selector).__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h2",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet h2(String cdata)\n{\r\n    return h2().__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h2",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "H2<Hamlet> h2()\n{\r\n    return h2_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h2",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet h2(String selector, String cdata)\n{\r\n    return setSelector(h2(), selector).__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h3",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "H3<Hamlet> h3()\n{\r\n    return h3_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h3",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet h3(String cdata)\n{\r\n    return h3().__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h3",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet h3(String selector, String cdata)\n{\r\n    return setSelector(h3(), selector).__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h4",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "H4<Hamlet> h4()\n{\r\n    return h4_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h4",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet h4(String cdata)\n{\r\n    return h4().__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h4",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet h4(String selector, String cdata)\n{\r\n    return setSelector(h4(), selector).__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h5",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "H5<Hamlet> h5()\n{\r\n    return h5_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h5",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet h5(String cdata)\n{\r\n    return h5().__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h5",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet h5(String selector, String cdata)\n{\r\n    return setSelector(h5(), selector).__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h6",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "H6<Hamlet> h6()\n{\r\n    return h6_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h6",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet h6(String cdata)\n{\r\n    return h6().__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "h6",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet h6(String selector, String cdata)\n{\r\n    return setSelector(h6(), selector).__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "ul",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UL<Hamlet> ul()\n{\r\n    return ul_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "ul",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UL<Hamlet> ul(String selector)\n{\r\n    return setSelector(ul(), selector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "ol",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OL<Hamlet> ol()\n{\r\n    return ol_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "ol",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OL<Hamlet> ol(String selector)\n{\r\n    return setSelector(ol(), selector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "pre",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PRE<Hamlet> pre()\n{\r\n    return pre_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "pre",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PRE<Hamlet> pre(String selector)\n{\r\n    return setSelector(pre(), selector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "form",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FORM<Hamlet> form()\n{\r\n    return form_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "form",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FORM<Hamlet> form(String selector)\n{\r\n    return setSelector(form(), selector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "fieldset",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FIELDSET<Hamlet> fieldset()\n{\r\n    return fieldset_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "fieldset",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FIELDSET<Hamlet> fieldset(String selector)\n{\r\n    return setSelector(fieldset(), selector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "ins",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "INS<Hamlet> ins()\n{\r\n    return ins_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "ins",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet ins(String cdata)\n{\r\n    return ins().__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "del",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DEL<Hamlet> del()\n{\r\n    return del_(this, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "del",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Hamlet del(String cdata)\n{\r\n    return del().__(cdata).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetLocalizationStatusesResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.localizationStatuses != null) {\r\n        addLocalStatusesToProto();\r\n    }\r\n    if (this.failedRequests != null) {\r\n        addFailedRequestsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetLocalizationStatusesResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalStatusesToProto",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addLocalStatusesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearCntnLocalizationStatuses();\r\n    if (this.localizationStatuses == null) {\r\n        return;\r\n    }\r\n    List<ContainerLocalizationStatusesProto> protos = new ArrayList<ContainerLocalizationStatusesProto>();\r\n    this.localizationStatuses.forEach((containerId, statuses) -> {\r\n        if (statuses != null && !statuses.isEmpty()) {\r\n            ContainerLocalizationStatusesProto.Builder clProtoBuilder = ContainerLocalizationStatusesProto.newBuilder();\r\n            statuses.forEach(status -> {\r\n                clProtoBuilder.addLocalizationStatuses(convertToProtoFormat(status));\r\n            });\r\n            clProtoBuilder.setContainerId(convertToProtoFormat(containerId));\r\n            protos.add(clProtoBuilder.build());\r\n        }\r\n    });\r\n    builder.addAllCntnLocalizationStatuses(protos);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addFailedRequestsToProto",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void addFailedRequestsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearFailedRequests();\r\n    if (this.failedRequests == null) {\r\n        return;\r\n    }\r\n    List<ContainerExceptionMapProto> protoList = new ArrayList<ContainerExceptionMapProto>();\r\n    for (Map.Entry<ContainerId, SerializedException> entry : this.failedRequests.entrySet()) {\r\n        protoList.add(ContainerExceptionMapProto.newBuilder().setContainerId(convertToProtoFormat(entry.getKey())).setException(convertToProtoFormat(entry.getValue())).build());\r\n    }\r\n    builder.addAllFailedRequests(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalContainerStatuses",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initLocalContainerStatuses()\n{\r\n    if (localizationStatuses != null) {\r\n        return;\r\n    }\r\n    GetLocalizationStatusesResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerLocalizationStatusesProto> protoList = p.getCntnLocalizationStatusesList();\r\n    localizationStatuses = new HashMap<>();\r\n    for (ContainerLocalizationStatusesProto clProto : protoList) {\r\n        List<LocalizationStatusProto> lsProtos = clProto.getLocalizationStatusesList();\r\n        List<LocalizationStatus> statusesPerCntn = new ArrayList<>();\r\n        lsProtos.forEach(lsProto -> {\r\n            statusesPerCntn.add(convertFromProtoFormat(lsProto));\r\n        });\r\n        localizationStatuses.put(convertFromProtoFormat(clProto.getContainerId()), statusesPerCntn);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initFailedRequests()\n{\r\n    if (this.failedRequests != null) {\r\n        return;\r\n    }\r\n    GetLocalizationStatusesResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerExceptionMapProto> protoList = p.getFailedRequestsList();\r\n    this.failedRequests = new HashMap<>();\r\n    for (ContainerExceptionMapProto ce : protoList) {\r\n        this.failedRequests.put(convertFromProtoFormat(ce.getContainerId()), convertFromProtoFormat(ce.getException()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLocalizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ContainerId, List<LocalizationStatus>> getLocalizationStatuses()\n{\r\n    initLocalContainerStatuses();\r\n    return this.localizationStatuses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLocalizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLocalizationStatuses(Map<ContainerId, List<LocalizationStatus>> statuses)\n{\r\n    maybeInitBuilder();\r\n    if (statuses == null) {\r\n        builder.clearCntnLocalizationStatuses();\r\n    }\r\n    this.localizationStatuses = statuses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ContainerId, SerializedException> getFailedRequests()\n{\r\n    initFailedRequests();\r\n    return this.failedRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFailedRequests(Map<ContainerId, SerializedException> failedRequests)\n{\r\n    maybeInitBuilder();\r\n    if (failedRequests == null) {\r\n        builder.clearFailedRequests();\r\n    }\r\n    this.failedRequests = failedRequests;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalizationStatusPBImpl convertFromProtoFormat(LocalizationStatusProto p)\n{\r\n    return new LocalizationStatusPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalizationStatusProto convertToProtoFormat(LocalizationStatus t)\n{\r\n    return ((LocalizationStatusPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SerializedExceptionPBImpl convertFromProtoFormat(SerializedExceptionProto p)\n{\r\n    return new SerializedExceptionPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SerializedExceptionProto convertToProtoFormat(SerializedException t)\n{\r\n    return ((SerializedExceptionPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    if (!YarnConfiguration.timelineServiceV1Enabled(conf)) {\r\n        throw new IOException(\"Timeline V1 client is not properly configured. \" + \"Either timeline service is not enabled or version is not set to\" + \" 1.x\");\r\n    }\r\n    timelineServiceV15Enabled = YarnConfiguration.timelineServiceV15Enabled(conf);\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    UserGroupInformation realUgi = ugi.getRealUser();\r\n    if (realUgi != null) {\r\n        authUgi = realUgi;\r\n        doAsUser = ugi.getShortUserName();\r\n    } else {\r\n        authUgi = ugi;\r\n        doAsUser = null;\r\n    }\r\n    token = new DelegationTokenAuthenticatedURL.Token();\r\n    connector = createTimelineConnector();\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        timelineServiceAddress = conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS);\r\n    } else {\r\n        timelineServiceAddress = conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS);\r\n    }\r\n    String defaultAuth = UserGroupInformation.isSecurityEnabled() ? KerberosAuthenticationHandler.TYPE : PseudoAuthenticationHandler.TYPE;\r\n    authType = conf.get(YarnConfiguration.TIMELINE_HTTP_AUTH_TYPE, defaultAuth);\r\n    LOG.info(\"Timeline service address: \" + getTimelineServiceAddress());\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createTimelineConnector",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineConnector createTimelineConnector()\n{\r\n    TimelineConnector newConnector = new TimelineConnector(true, authUgi, doAsUser, token);\r\n    addIfService(newConnector);\r\n    return newConnector;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    timelineWriter = createTimelineWriter(getConfig(), authUgi, connector.getClient(), TimelineConnector.constructResURI(getConfig(), timelineServiceAddress, RESOURCE_URI_STR_V1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createTimelineWriter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineWriter createTimelineWriter(Configuration conf, UserGroupInformation ugi, Client webClient, URI uri) throws IOException\n{\r\n    if (timelineServiceV15Enabled) {\r\n        return new FileSystemTimelineWriter(conf, ugi, webClient, uri);\r\n    } else {\r\n        return new DirectTimelineWriter(ugi, webClient, uri);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (this.timelineWriter != null) {\r\n        this.timelineWriter.close();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void flush() throws IOException\n{\r\n    if (timelineWriter != null) {\r\n        timelineWriter.flush();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelinePutResponse putEntities(TimelineEntity... entities) throws IOException, YarnException\n{\r\n    return timelineWriter.putEntities(entities);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void putDomain(TimelineDomain domain) throws IOException, YarnException\n{\r\n    timelineWriter.putDomain(domain);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getTimelineServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTimelineServiceAddress()\n{\r\n    return this.timelineServiceAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Token<TimelineDelegationTokenIdentifier> getDelegationToken(final String renewer) throws IOException, YarnException\n{\r\n    if (authType.equals(PseudoAuthenticationHandler.TYPE)) {\r\n        LOG.info(\"Skipping get timeline delegation token since authType=\" + PseudoAuthenticationHandler.TYPE);\r\n        return null;\r\n    }\r\n    PrivilegedExceptionAction<Token<TimelineDelegationTokenIdentifier>> getDTAction = new PrivilegedExceptionAction<Token<TimelineDelegationTokenIdentifier>>() {\r\n\r\n        @Override\r\n        public Token<TimelineDelegationTokenIdentifier> run() throws Exception {\r\n            DelegationTokenAuthenticatedURL authUrl = connector.getDelegationTokenAuthenticatedURL();\r\n            return (Token) authUrl.getDelegationToken(TimelineConnector.constructResURI(getConfig(), getTimelineServiceAddress(), RESOURCE_URI_STR_V1).toURL(), token, renewer, doAsUser);\r\n        }\r\n    };\r\n    return (Token<TimelineDelegationTokenIdentifier>) connector.operateDelegationToken(getDTAction);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "renewDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "long renewDelegationToken(final Token<TimelineDelegationTokenIdentifier> timelineDT) throws IOException, YarnException\n{\r\n    if (authType.equals(PseudoAuthenticationHandler.TYPE)) {\r\n        LOG.info(\"Skipping renew timeline delegation token since authType=\" + PseudoAuthenticationHandler.TYPE);\r\n        return -1;\r\n    }\r\n    final boolean isTokenServiceAddrEmpty = timelineDT.getService().toString().isEmpty();\r\n    final String scheme = isTokenServiceAddrEmpty ? null : (YarnConfiguration.useHttps(this.getConfig()) ? \"https\" : \"http\");\r\n    final InetSocketAddress address = isTokenServiceAddrEmpty ? null : SecurityUtil.getTokenServiceAddr(timelineDT);\r\n    PrivilegedExceptionAction<Long> renewDTAction = new PrivilegedExceptionAction<Long>() {\r\n\r\n        @Override\r\n        public Long run() throws Exception {\r\n            if (!timelineDT.equals(token.getDelegationToken())) {\r\n                token.setDelegationToken((Token) timelineDT);\r\n            }\r\n            DelegationTokenAuthenticatedURL authUrl = connector.getDelegationTokenAuthenticatedURL();\r\n            final URI serviceURI = isTokenServiceAddrEmpty ? TimelineConnector.constructResURI(getConfig(), getTimelineServiceAddress(), RESOURCE_URI_STR_V1) : new URI(scheme, null, address.getHostName(), address.getPort(), RESOURCE_URI_STR_V1, null, null);\r\n            return authUrl.renewDelegationToken(serviceURI.toURL(), token, doAsUser);\r\n        }\r\n    };\r\n    return (Long) connector.operateDelegationToken(renewDTAction);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "cancelDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void cancelDelegationToken(final Token<TimelineDelegationTokenIdentifier> timelineDT) throws IOException, YarnException\n{\r\n    if (authType.equals(PseudoAuthenticationHandler.TYPE)) {\r\n        LOG.info(\"Skipping cancel timeline delegation token since authType=\" + PseudoAuthenticationHandler.TYPE);\r\n        return;\r\n    }\r\n    final boolean isTokenServiceAddrEmpty = timelineDT.getService().toString().isEmpty();\r\n    final String scheme = isTokenServiceAddrEmpty ? null : (YarnConfiguration.useHttps(this.getConfig()) ? \"https\" : \"http\");\r\n    final InetSocketAddress address = isTokenServiceAddrEmpty ? null : SecurityUtil.getTokenServiceAddr(timelineDT);\r\n    PrivilegedExceptionAction<Void> cancelDTAction = new PrivilegedExceptionAction<Void>() {\r\n\r\n        @Override\r\n        public Void run() throws Exception {\r\n            if (!timelineDT.equals(token.getDelegationToken())) {\r\n                token.setDelegationToken((Token) timelineDT);\r\n            }\r\n            DelegationTokenAuthenticatedURL authUrl = connector.getDelegationTokenAuthenticatedURL();\r\n            final URI serviceURI = isTokenServiceAddrEmpty ? TimelineConnector.constructResURI(getConfig(), getTimelineServiceAddress(), RESOURCE_URI_STR_V1) : new URI(scheme, null, address.getHostName(), address.getPort(), RESOURCE_URI_STR_V1, null, null);\r\n            authUrl.cancelDelegationToken(serviceURI.toURL(), token, doAsUser);\r\n            return null;\r\n        }\r\n    };\r\n    connector.operateDelegationToken(cancelDTAction);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    return super.toString() + \" with timeline server \" + TimelineConnector.constructResURI(getConfig(), getTimelineServiceAddress(), RESOURCE_URI_STR_V1) + \" and writer \" + timelineWriter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void main(String[] argv) throws Exception\n{\r\n    CommandLine cliParser = new GnuParser().parse(opts, argv);\r\n    if (cliParser.hasOption(\"put\")) {\r\n        String path = cliParser.getOptionValue(\"put\");\r\n        if (path != null && path.length() > 0) {\r\n            if (cliParser.hasOption(ENTITY_DATA_TYPE)) {\r\n                putTimelineDataInJSONFile(path, ENTITY_DATA_TYPE);\r\n                return;\r\n            } else if (cliParser.hasOption(DOMAIN_DATA_TYPE)) {\r\n                putTimelineDataInJSONFile(path, DOMAIN_DATA_TYPE);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    printUsage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putTimelineDataInJSONFile",
  "errType" : [ "Exception", "RuntimeException", "Exception", "Exception" ],
  "containingMethodsNum" : 31,
  "sourceCodeText" : "void putTimelineDataInJSONFile(String path, String type)\n{\r\n    File jsonFile = new File(path);\r\n    if (!jsonFile.exists()) {\r\n        LOG.error(\"File [\" + jsonFile.getAbsolutePath() + \"] doesn't exist\");\r\n        return;\r\n    }\r\n    YarnJacksonJaxbJsonProvider.configObjectMapper(MAPPER);\r\n    TimelineEntities entities = null;\r\n    TimelineDomains domains = null;\r\n    try {\r\n        if (type.equals(ENTITY_DATA_TYPE)) {\r\n            entities = MAPPER.readValue(jsonFile, TimelineEntities.class);\r\n        } else if (type.equals(DOMAIN_DATA_TYPE)) {\r\n            domains = MAPPER.readValue(jsonFile, TimelineDomains.class);\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.error(\"Error when reading  \" + e.getMessage());\r\n        e.printStackTrace(System.err);\r\n        return;\r\n    }\r\n    Configuration conf = new YarnConfiguration();\r\n    TimelineClient client = TimelineClient.createTimelineClient();\r\n    client.init(conf);\r\n    client.start();\r\n    try {\r\n        if (UserGroupInformation.isSecurityEnabled() && conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, false) && conf.get(YarnConfiguration.TIMELINE_HTTP_AUTH_TYPE).equals(KerberosAuthenticationHandler.TYPE)) {\r\n            Token<TimelineDelegationTokenIdentifier> token = client.getDelegationToken(UserGroupInformation.getCurrentUser().getUserName());\r\n            UserGroupInformation.getCurrentUser().addToken(token);\r\n        }\r\n        if (type.equals(ENTITY_DATA_TYPE)) {\r\n            TimelinePutResponse response = client.putEntities(entities.getEntities().toArray(new TimelineEntity[entities.getEntities().size()]));\r\n            if (response.getErrors().size() == 0) {\r\n                LOG.info(\"Timeline entities are successfully put\");\r\n            } else {\r\n                for (TimelinePutResponse.TimelinePutError error : response.getErrors()) {\r\n                    LOG.error(\"TimelineEntity [\" + error.getEntityType() + \":\" + error.getEntityId() + \"] is not successfully put. Error code: \" + error.getErrorCode());\r\n                }\r\n            }\r\n        } else if (type.equals(DOMAIN_DATA_TYPE) && domains != null) {\r\n            boolean hasError = false;\r\n            for (TimelineDomain domain : domains.getDomains()) {\r\n                try {\r\n                    client.putDomain(domain);\r\n                } catch (Exception e) {\r\n                    LOG.error(\"Error when putting domain \" + domain.getId(), e);\r\n                    hasError = true;\r\n                }\r\n            }\r\n            if (!hasError) {\r\n                LOG.info(\"Timeline domains are successfully put\");\r\n            }\r\n        }\r\n    } catch (RuntimeException e) {\r\n        LOG.error(\"Error when putting the timeline data\", e);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Error when putting the timeline data\", e);\r\n    } finally {\r\n        client.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void printUsage()\n{\r\n    new HelpFormatter().printHelp(\"TimelineClient\", opts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getUgi",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UserGroupInformation getUgi()\n{\r\n    return authUgi;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelinePutResponse putEntities(ApplicationAttemptId appAttemptId, TimelineEntityGroupId groupId, TimelineEntity... entities) throws IOException, YarnException\n{\r\n    if (!timelineServiceV15Enabled) {\r\n        throw new YarnException(\"This API is not supported under current Timeline Service Version:\");\r\n    }\r\n    return timelineWriter.putEntities(appAttemptId, groupId, entities);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void putDomain(ApplicationAttemptId appAttemptId, TimelineDomain domain) throws IOException, YarnException\n{\r\n    if (!timelineServiceV15Enabled) {\r\n        throw new YarnException(\"This API is not supported under current Timeline Service Version:\");\r\n    }\r\n    timelineWriter.putDomain(appAttemptId, domain);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setTimelineWriter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTimelineWriter(TimelineWriter writer)\n{\r\n    this.timelineWriter = writer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationDefinitionProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.reservationReqs != null) {\r\n        builder.setReservationRequests(convertToProtoFormat(this.reservationReqs));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReservationDefinitionProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getArrival",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getArrival()\n{\r\n    ReservationDefinitionProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasArrival()) {\r\n        return 0;\r\n    }\r\n    return (p.getArrival());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setArrival",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setArrival(long earliestStartTime)\n{\r\n    maybeInitBuilder();\r\n    if (earliestStartTime <= 0) {\r\n        builder.clearArrival();\r\n        return;\r\n    }\r\n    builder.setArrival(earliestStartTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getDeadline",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getDeadline()\n{\r\n    ReservationDefinitionProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDeadline()) {\r\n        return 0;\r\n    }\r\n    return (p.getDeadline());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setDeadline",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDeadline(long latestEndTime)\n{\r\n    maybeInitBuilder();\r\n    if (latestEndTime <= 0) {\r\n        builder.clearDeadline();\r\n        return;\r\n    }\r\n    builder.setDeadline(latestEndTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getReservationRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationRequests getReservationRequests()\n{\r\n    ReservationDefinitionProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (reservationReqs != null) {\r\n        return reservationReqs;\r\n    }\r\n    if (!p.hasReservationRequests()) {\r\n        return null;\r\n    }\r\n    reservationReqs = convertFromProtoFormat(p.getReservationRequests());\r\n    return reservationReqs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setReservationRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setReservationRequests(ReservationRequests reservationRequests)\n{\r\n    if (reservationRequests == null) {\r\n        builder.clearReservationRequests();\r\n        return;\r\n    }\r\n    this.reservationReqs = reservationRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getReservationName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getReservationName()\n{\r\n    ReservationDefinitionProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasReservationName()) {\r\n        return null;\r\n    }\r\n    return (p.getReservationName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setReservationName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setReservationName(String name)\n{\r\n    maybeInitBuilder();\r\n    if (name == null) {\r\n        builder.clearReservationName();\r\n        return;\r\n    }\r\n    builder.setReservationName(name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    ReservationDefinitionProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.priority != null) {\r\n        return this.priority;\r\n    }\r\n    if (!p.hasPriority()) {\r\n        return Priority.UNDEFINED;\r\n    }\r\n    this.priority = convertFromProtoFormat(p.getPriority());\r\n    return this.priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setPriority(Priority priority)\n{\r\n    maybeInitBuilder();\r\n    if (priority == null) {\r\n        this.priority = Priority.UNDEFINED;\r\n    }\r\n    this.priority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PriorityPBImpl convertFromProtoFormat(YarnProtos.PriorityProto p)\n{\r\n    return new PriorityPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationRequestsPBImpl convertFromProtoFormat(ReservationRequestsProto p)\n{\r\n    return new ReservationRequestsPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationRequestsProto convertToProtoFormat(ReservationRequests t)\n{\r\n    return ((ReservationRequestsPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String toString()\n{\r\n    return \"{Arrival: \" + getArrival() + \", Deadline: \" + getDeadline() + \", Reservation Name: \" + getReservationName() + \", Recurrence expression: \" + getRecurrenceExpression() + \", Priority: \" + getPriority().toString() + \", Resources: \" + getReservationRequests() + \"}\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRecurrenceExpression",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRecurrenceExpression()\n{\r\n    ReservationDefinitionProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (p.hasRecurrenceExpression()) {\r\n        String recurrenceExpression = p.getRecurrenceExpression();\r\n        return recurrenceExpression;\r\n    } else {\r\n        return \"0\";\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setRecurrenceExpression",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRecurrenceExpression(String recurrenceExpression)\n{\r\n    maybeInitBuilder();\r\n    if (recurrenceExpression == null) {\r\n        builder.clearRecurrenceExpression();\r\n        return;\r\n    }\r\n    builder.setRecurrenceExpression(recurrenceExpression);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    if (this.applicationId != null) {\r\n        return this.applicationId;\r\n    }\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationResourceUsageReport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationResourceUsageReport(ApplicationResourceUsageReport appInfo)\n{\r\n    maybeInitBuilder();\r\n    if (appInfo == null) {\r\n        builder.clearAppResourceUsage();\r\n        return;\r\n    }\r\n    builder.setAppResourceUsage(convertToProtoFormat(appInfo));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCurrentApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptId getCurrentApplicationAttemptId()\n{\r\n    if (this.currentApplicationAttemptId != null) {\r\n        return this.currentApplicationAttemptId;\r\n    }\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasCurrentApplicationAttemptId()) {\r\n        return null;\r\n    }\r\n    this.currentApplicationAttemptId = convertFromProtoFormat(p.getCurrentApplicationAttemptId());\r\n    return this.currentApplicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationResourceUsageReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationResourceUsageReport getApplicationResourceUsageReport()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAppResourceUsage()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getAppResourceUsage());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getTrackingUrl()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasTrackingUrl()) {\r\n        return null;\r\n    }\r\n    return p.getTrackingUrl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getOriginalTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getOriginalTrackingUrl()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasOriginalTrackingUrl()) {\r\n        return null;\r\n    }\r\n    return p.getOriginalTrackingUrl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getName()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasName()) {\r\n        return null;\r\n    }\r\n    return p.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getQueue()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasQueue()) {\r\n        return null;\r\n    }\r\n    return p.getQueue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getYarnApplicationState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnApplicationState getYarnApplicationState()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasYarnApplicationState()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getYarnApplicationState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getHost()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasHost()) {\r\n        return null;\r\n    }\r\n    return (p.getHost());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRpcPort",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getRpcPort()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getRpcPort());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getClientToAMToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token getClientToAMToken()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.clientToAMToken != null) {\r\n        return this.clientToAMToken;\r\n    }\r\n    if (!p.hasClientToAmToken()) {\r\n        return null;\r\n    }\r\n    this.clientToAMToken = convertFromProtoFormat(p.getClientToAmToken());\r\n    return this.clientToAMToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getUser()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasUser()) {\r\n        return null;\r\n    }\r\n    return p.getUser();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDiagnostics()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDiagnostics()) {\r\n        return null;\r\n    }\r\n    return p.getDiagnostics();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getStartTime()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getStartTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getSubmitTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getSubmitTime()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getSubmitTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getLaunchTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getLaunchTime()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getLaunchTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setLaunchTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLaunchTime(long launchTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setLaunchTime(launchTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getFinishTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFinishTime()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getFinishTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FinalApplicationStatus getFinalApplicationStatus()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasFinalApplicationStatus()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getFinalApplicationStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProgress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getProgress()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getProgress();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getApplicationType()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationType()) {\r\n        return null;\r\n    }\r\n    return p.getApplicationType();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token getAMRMToken()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (amRmToken != null) {\r\n        return amRmToken;\r\n    }\r\n    if (!p.hasAmRmToken()) {\r\n        return null;\r\n    }\r\n    amRmToken = convertFromProtoFormat(p.getAmRmToken());\r\n    return amRmToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initApplicationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initApplicationTags()\n{\r\n    if (this.applicationTags != null) {\r\n        return;\r\n    }\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.applicationTags = new HashSet<String>();\r\n    this.applicationTags.addAll(p.getApplicationTagsList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getApplicationTags()\n{\r\n    initApplicationTags();\r\n    return this.applicationTags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null)\r\n        builder.clearApplicationId();\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCurrentApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCurrentApplicationAttemptId(ApplicationAttemptId applicationAttemptId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationAttemptId == null)\r\n        builder.clearCurrentApplicationAttemptId();\r\n    this.currentApplicationAttemptId = applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setTrackingUrl(String url)\n{\r\n    maybeInitBuilder();\r\n    if (url == null) {\r\n        builder.clearTrackingUrl();\r\n        return;\r\n    }\r\n    builder.setTrackingUrl(url);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setOriginalTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setOriginalTrackingUrl(String url)\n{\r\n    maybeInitBuilder();\r\n    if (url == null) {\r\n        builder.clearOriginalTrackingUrl();\r\n        return;\r\n    }\r\n    builder.setOriginalTrackingUrl(url);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setName(String name)\n{\r\n    maybeInitBuilder();\r\n    if (name == null) {\r\n        builder.clearName();\r\n        return;\r\n    }\r\n    builder.setName(name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueue(String queue)\n{\r\n    maybeInitBuilder();\r\n    if (queue == null) {\r\n        builder.clearQueue();\r\n        return;\r\n    }\r\n    builder.setQueue(queue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setYarnApplicationState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setYarnApplicationState(YarnApplicationState state)\n{\r\n    maybeInitBuilder();\r\n    if (state == null) {\r\n        builder.clearYarnApplicationState();\r\n        return;\r\n    }\r\n    builder.setYarnApplicationState(convertToProtoFormat(state));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setHost",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHost(String host)\n{\r\n    maybeInitBuilder();\r\n    if (host == null) {\r\n        builder.clearHost();\r\n        return;\r\n    }\r\n    builder.setHost((host));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setRpcPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRpcPort(int rpcPort)\n{\r\n    maybeInitBuilder();\r\n    builder.setRpcPort((rpcPort));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setClientToAMToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setClientToAMToken(Token clientToAMToken)\n{\r\n    maybeInitBuilder();\r\n    if (clientToAMToken == null)\r\n        builder.clearClientToAmToken();\r\n    this.clientToAMToken = clientToAMToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setUser",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUser(String user)\n{\r\n    maybeInitBuilder();\r\n    if (user == null) {\r\n        builder.clearUser();\r\n        return;\r\n    }\r\n    builder.setUser((user));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationType(String applicationType)\n{\r\n    maybeInitBuilder();\r\n    if (applicationType == null) {\r\n        builder.clearApplicationType();\r\n        return;\r\n    }\r\n    builder.setApplicationType((applicationType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationTags",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationTags(Set<String> tags)\n{\r\n    maybeInitBuilder();\r\n    if (tags == null || tags.isEmpty()) {\r\n        builder.clearApplicationTags();\r\n    }\r\n    this.applicationTags = tags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDiagnostics(String diagnostics)\n{\r\n    maybeInitBuilder();\r\n    if (diagnostics == null) {\r\n        builder.clearDiagnostics();\r\n        return;\r\n    }\r\n    builder.setDiagnostics(diagnostics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setStartTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setStartTime(long startTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setStartTime(startTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setFinishTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFinishTime(long finishTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setFinishTime(finishTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setSubmitTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setSubmitTime(long submitTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setSubmitTime(submitTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setFinalApplicationStatus(FinalApplicationStatus finishState)\n{\r\n    maybeInitBuilder();\r\n    if (finishState == null) {\r\n        builder.clearFinalApplicationStatus();\r\n        return;\r\n    }\r\n    builder.setFinalApplicationStatus(convertToProtoFormat(finishState));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setProgress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setProgress(float progress)\n{\r\n    maybeInitBuilder();\r\n    builder.setProgress(progress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAMRMToken(Token amRmToken)\n{\r\n    maybeInitBuilder();\r\n    if (amRmToken == null) {\r\n        builder.clearAmRmToken();\r\n    }\r\n    this.amRmToken = amRmToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationReportProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationId != null && !((ApplicationIdPBImpl) this.applicationId).getProto().equals(builder.getApplicationId())) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n    if (this.currentApplicationAttemptId != null && !((ApplicationAttemptIdPBImpl) this.currentApplicationAttemptId).getProto().equals(builder.getCurrentApplicationAttemptId())) {\r\n        builder.setCurrentApplicationAttemptId(convertToProtoFormat(this.currentApplicationAttemptId));\r\n    }\r\n    if (this.clientToAMToken != null && !((TokenPBImpl) this.clientToAMToken).getProto().equals(builder.getClientToAmToken())) {\r\n        builder.setClientToAmToken(convertToProtoFormat(this.clientToAMToken));\r\n    }\r\n    if (this.amRmToken != null && !((TokenPBImpl) this.amRmToken).getProto().equals(builder.getAmRmToken())) {\r\n        builder.setAmRmToken(convertToProtoFormat(this.amRmToken));\r\n    }\r\n    if (this.applicationTags != null && !this.applicationTags.isEmpty()) {\r\n        builder.clearApplicationTags();\r\n        builder.addAllApplicationTags(this.applicationTags);\r\n    }\r\n    if (this.priority != null && !((PriorityPBImpl) this.priority).getProto().equals(builder.getPriority())) {\r\n        builder.setPriority(convertToProtoFormat(this.priority));\r\n    }\r\n    if (this.applicationTimeouts != null) {\r\n        addApplicationTimeouts();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ApplicationReportProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptIdProto convertToProtoFormat(ApplicationAttemptId t)\n{\r\n    return ((ApplicationAttemptIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationResourceUsageReport convertFromProtoFormat(ApplicationResourceUsageReportProto s)\n{\r\n    return ProtoUtils.convertFromProtoFormat(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationResourceUsageReportProto convertToProtoFormat(ApplicationResourceUsageReport s)\n{\r\n    return ProtoUtils.convertToProtoFormat(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto applicationId)\n{\r\n    return new ApplicationIdPBImpl(applicationId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptIdPBImpl convertFromProtoFormat(ApplicationAttemptIdProto applicationAttemptId)\n{\r\n    return new ApplicationAttemptIdPBImpl(applicationAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnApplicationState convertFromProtoFormat(YarnApplicationStateProto s)\n{\r\n    return ProtoUtils.convertFromProtoFormat(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnApplicationStateProto convertToProtoFormat(YarnApplicationState s)\n{\r\n    return ProtoUtils.convertToProtoFormat(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinalApplicationStatus convertFromProtoFormat(FinalApplicationStatusProto s)\n{\r\n    return ProtoUtils.convertFromProtoFormat(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinalApplicationStatusProto convertToProtoFormat(FinalApplicationStatus s)\n{\r\n    return ProtoUtils.convertToProtoFormat(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenPBImpl convertFromProtoFormat(TokenProto p)\n{\r\n    return new TokenPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token t)\n{\r\n    return ((TokenPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PriorityPBImpl convertFromProtoFormat(PriorityProto p)\n{\r\n    return new PriorityPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PriorityProto convertToProtoFormat(Priority t)\n{\r\n    return ((PriorityPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getLogAggregationStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LogAggregationStatus getLogAggregationStatus()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasLogAggregationStatus()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getLogAggregationStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setLogAggregationStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setLogAggregationStatus(LogAggregationStatus logAggregationStatus)\n{\r\n    maybeInitBuilder();\r\n    if (logAggregationStatus == null) {\r\n        builder.clearLogAggregationStatus();\r\n        return;\r\n    }\r\n    builder.setLogAggregationStatus(convertToProtoFormat(logAggregationStatus));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationStatus convertFromProtoFormat(LogAggregationStatusProto s)\n{\r\n    return ProtoUtils.convertFromProtoFormat(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationStatusProto convertToProtoFormat(LogAggregationStatus s)\n{\r\n    return ProtoUtils.convertToProtoFormat(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "isUnmanagedApp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isUnmanagedApp()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getUnmanagedApplication();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setUnmanagedApp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUnmanagedApp(boolean unmanagedApplication)\n{\r\n    maybeInitBuilder();\r\n    builder.setUnmanagedApplication(unmanagedApplication);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.priority != null) {\r\n        return this.priority;\r\n    }\r\n    if (!p.hasPriority()) {\r\n        return null;\r\n    }\r\n    this.priority = convertFromProtoFormat(p.getPriority());\r\n    return this.priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPriority(Priority priority)\n{\r\n    maybeInitBuilder();\r\n    if (priority == null)\r\n        builder.clearPriority();\r\n    this.priority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAppNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getAppNodeLabelExpression()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAppNodeLabelExpression()) {\r\n        return null;\r\n    }\r\n    return p.getAppNodeLabelExpression();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAppNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAppNodeLabelExpression(String appNodeLabelExpression)\n{\r\n    maybeInitBuilder();\r\n    if (appNodeLabelExpression == null) {\r\n        builder.clearAppNodeLabelExpression();\r\n        return;\r\n    }\r\n    builder.setAppNodeLabelExpression((appNodeLabelExpression));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAmNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getAmNodeLabelExpression()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAmNodeLabelExpression()) {\r\n        return null;\r\n    }\r\n    return p.getAmNodeLabelExpression();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAmNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAmNodeLabelExpression(String amNodeLabelExpression)\n{\r\n    maybeInitBuilder();\r\n    if (amNodeLabelExpression == null) {\r\n        builder.clearAmNodeLabelExpression();\r\n        return;\r\n    }\r\n    builder.setAmNodeLabelExpression((amNodeLabelExpression));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ApplicationTimeoutType, ApplicationTimeout> getApplicationTimeouts()\n{\r\n    initApplicationTimeout();\r\n    return this.applicationTimeouts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationTimeouts(Map<ApplicationTimeoutType, ApplicationTimeout> timeouts)\n{\r\n    if (timeouts == null) {\r\n        return;\r\n    }\r\n    initApplicationTimeout();\r\n    this.applicationTimeouts.clear();\r\n    this.applicationTimeouts.putAll(timeouts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initApplicationTimeout",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initApplicationTimeout()\n{\r\n    if (this.applicationTimeouts != null) {\r\n        return;\r\n    }\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<AppTimeoutsMapProto> lists = p.getAppTimeoutsList();\r\n    this.applicationTimeouts = new HashMap<ApplicationTimeoutType, ApplicationTimeout>(lists.size());\r\n    for (AppTimeoutsMapProto timeoutProto : lists) {\r\n        this.applicationTimeouts.put(ProtoUtils.convertFromProtoFormat(timeoutProto.getApplicationTimeoutType()), convertFromProtoFormat(timeoutProto.getApplicationTimeout()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationTimeoutPBImpl convertFromProtoFormat(ApplicationTimeoutProto p)\n{\r\n    return new ApplicationTimeoutPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationTimeoutProto convertToProtoFormat(ApplicationTimeout t)\n{\r\n    return ((ApplicationTimeoutPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addApplicationTimeouts()\n{\r\n    maybeInitBuilder();\r\n    builder.clearAppTimeouts();\r\n    if (applicationTimeouts == null) {\r\n        return;\r\n    }\r\n    Iterable<? extends AppTimeoutsMapProto> values = new Iterable<AppTimeoutsMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<AppTimeoutsMapProto> iterator() {\r\n            return new Iterator<AppTimeoutsMapProto>() {\r\n\r\n                private Iterator<ApplicationTimeoutType> iterator = applicationTimeouts.keySet().iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iterator.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public AppTimeoutsMapProto next() {\r\n                    ApplicationTimeoutType key = iterator.next();\r\n                    return AppTimeoutsMapProto.newBuilder().setApplicationTimeout(convertToProtoFormat(applicationTimeouts.get(key))).setApplicationTimeoutType(ProtoUtils.convertToProtoFormat(key)).build();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    this.builder.addAllAppTimeouts(values);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRMClusterId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRMClusterId()\n{\r\n    ApplicationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasRmClusterId()) {\r\n        return null;\r\n    }\r\n    return p.getRmClusterId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setRMClusterId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRMClusterId(String rmClusterId)\n{\r\n    maybeInitBuilder();\r\n    if (rmClusterId == null) {\r\n        builder.clearRmClusterId();\r\n        return;\r\n    }\r\n    builder.setRmClusterId((rmClusterId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getLogStartIndex",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getLogStartIndex(Block html, String startStr) throws NumberFormatException\n{\r\n    long start = -4096;\r\n    if (startStr != null && !startStr.isEmpty()) {\r\n        start = Long.parseLong(startStr);\r\n    }\r\n    return start;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getLogEndIndex",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getLogEndIndex(Block html, String endStr) throws NumberFormatException\n{\r\n    long end = Long.MAX_VALUE;\r\n    if (endStr != null && !endStr.isEmpty()) {\r\n        end = Long.parseLong(endStr);\r\n    }\r\n    return end;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "verifyAndGetContainerId",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ContainerId verifyAndGetContainerId(Block html, String containerIdStr)\n{\r\n    if (containerIdStr == null || containerIdStr.isEmpty()) {\r\n        html.h1().__(\"Cannot get container logs without a ContainerId\").__();\r\n        return null;\r\n    }\r\n    ContainerId containerId = null;\r\n    try {\r\n        containerId = ContainerId.fromString(containerIdStr);\r\n    } catch (IllegalArgumentException e) {\r\n        html.h1().__(\"Cannot get container logs for invalid containerId: \" + containerIdStr).__();\r\n        return null;\r\n    }\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "verifyAndGetNodeId",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "NodeId verifyAndGetNodeId(Block html, String nodeIdStr)\n{\r\n    if (nodeIdStr == null || nodeIdStr.isEmpty()) {\r\n        html.h1().__(\"Cannot get container logs without a NodeId\").__();\r\n        return null;\r\n    }\r\n    NodeId nodeId = null;\r\n    try {\r\n        nodeId = NodeId.fromString(nodeIdStr);\r\n    } catch (IllegalArgumentException e) {\r\n        html.h1().__(\"Cannot get container logs. Invalid nodeId: \" + nodeIdStr).__();\r\n        return null;\r\n    }\r\n    return nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "verifyAndGetAppOwner",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String verifyAndGetAppOwner(Block html, String appOwner)\n{\r\n    if (appOwner == null || appOwner.isEmpty()) {\r\n        html.h1().__(\"Cannot get container logs without an app owner\").__();\r\n    }\r\n    return appOwner;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getLogStartTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getLogStartTime(String startStr) throws NumberFormatException\n{\r\n    long start = 0;\r\n    if (startStr != null && !startStr.isEmpty()) {\r\n        start = Long.parseLong(startStr);\r\n    }\r\n    return start;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getLogEndTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getLogEndTime(String endStr) throws NumberFormatException\n{\r\n    long end = Long.MAX_VALUE;\r\n    if (endStr != null && !endStr.isEmpty()) {\r\n        end = Long.parseLong(endStr);\r\n    }\r\n    return end;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateApplicationPriorityResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = UpdateApplicationPriorityResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.updatedAppPriority != null) {\r\n        builder.setApplicationPriority(convertToProtoFormat(this.updatedAppPriority));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getApplicationPriority()\n{\r\n    UpdateApplicationPriorityResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.updatedAppPriority != null) {\r\n        return this.updatedAppPriority;\r\n    }\r\n    if (!p.hasApplicationPriority()) {\r\n        return null;\r\n    }\r\n    this.updatedAppPriority = convertFromProtoFormat(p.getApplicationPriority());\r\n    return this.updatedAppPriority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationPriority(Priority priority)\n{\r\n    maybeInitBuilder();\r\n    if (priority == null) {\r\n        builder.clearApplicationPriority();\r\n    }\r\n    this.updatedAppPriority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PriorityPBImpl convertFromProtoFormat(PriorityProto p)\n{\r\n    return new PriorityPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PriorityProto convertToProtoFormat(Priority t)\n{\r\n    return ((PriorityPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CheckForDecommissioningNodesRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "page",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Page page()\n{\r\n    if (page == null) {\r\n        page = new Page(writer());\r\n    }\r\n    return page;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void render()\n{\r\n    putWithoutEscapeHtml(DOCTYPE);\r\n    render(page().html().meta_http(\"X-UA-Compatible\", \"IE=8\").meta_http(\"Content-type\", MimeType.HTML));\r\n    if (page().nestLevel() != 0) {\r\n        throw new WebAppException(\"Error rendering page: nestLevel=\" + page().nestLevel());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void render(Page.HTML<__> html)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URLProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = URLProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getFile()\n{\r\n    URLProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasFile()) {\r\n        return null;\r\n    }\r\n    return (p.getFile());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setFile(String file)\n{\r\n    maybeInitBuilder();\r\n    if (file == null) {\r\n        builder.clearFile();\r\n        return;\r\n    }\r\n    builder.setFile((file));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getScheme",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getScheme()\n{\r\n    URLProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasScheme()) {\r\n        return null;\r\n    }\r\n    return (p.getScheme());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setScheme",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setScheme(String scheme)\n{\r\n    maybeInitBuilder();\r\n    if (scheme == null) {\r\n        builder.clearScheme();\r\n        return;\r\n    }\r\n    builder.setScheme((scheme));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getUserInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getUserInfo()\n{\r\n    URLProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasUserInfo()) {\r\n        return null;\r\n    }\r\n    return (p.getUserInfo());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setUserInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUserInfo(String userInfo)\n{\r\n    maybeInitBuilder();\r\n    if (userInfo == null) {\r\n        builder.clearUserInfo();\r\n        return;\r\n    }\r\n    builder.setUserInfo((userInfo));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getHost()\n{\r\n    URLProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasHost()) {\r\n        return null;\r\n    }\r\n    return (p.getHost());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setHost",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHost(String host)\n{\r\n    maybeInitBuilder();\r\n    if (host == null) {\r\n        builder.clearHost();\r\n        return;\r\n    }\r\n    builder.setHost((host));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPort",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getPort()\n{\r\n    URLProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getPort());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPort(int port)\n{\r\n    maybeInitBuilder();\r\n    builder.setPort((port));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshClusterMaxPriorityResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    assert !stopped : \"starting when already stopped\";\r\n    resetTimer();\r\n    checkerThread = new Thread(new PingChecker());\r\n    checkerThread.setName(\"Ping Checker for \" + getName());\r\n    checkerThread.start();\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    stopped = true;\r\n    if (checkerThread != null) {\r\n        checkerThread.interrupt();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "expire",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void expire(O ob)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setExpireInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setExpireInterval(int expireInterval)\n{\r\n    this.expireInterval = expireInterval;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getExpireInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getExpireInterval(O o)\n{\r\n    return this.expireInterval;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setMonitorInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMonitorInterval(long monitorInterval)\n{\r\n    this.monitorInterval = monitorInterval;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "receivedPing",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void receivedPing(O ob)\n{\r\n    if (running.containsKey(ob)) {\r\n        running.put(ob, clock.getTime());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "register",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void register(O ob)\n{\r\n    register(ob, clock.getTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "register",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void register(O ob, long expireTime)\n{\r\n    running.put(ob, expireTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "unregister",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void unregister(O ob)\n{\r\n    running.remove(ob);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "resetTimer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void resetTimer()\n{\r\n    if (resetTimerOnStart) {\r\n        long time = clock.getTime();\r\n        for (O ob : running.keySet()) {\r\n            running.put(ob, time);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setResetTimeOnStart",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResetTimeOnStart(boolean resetTimeOnStart)\n{\r\n    this.resetTimerOnStart = resetTimeOnStart;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "verifyAndParseParameters",
  "errType" : [ "NumberFormatException", "NumberFormatException", "NumberFormatException", "NumberFormatException" ],
  "containingMethodsNum" : 26,
  "sourceCodeText" : "BlockParameters verifyAndParseParameters(Block html)\n{\r\n    BlockParameters params = new BlockParameters();\r\n    ContainerId containerId = LogAggregationWebUtils.verifyAndGetContainerId(html, $(CONTAINER_ID));\r\n    params.setContainerId(containerId);\r\n    NodeId nodeId = LogAggregationWebUtils.verifyAndGetNodeId(html, $(NM_NODENAME));\r\n    params.setNodeId(nodeId);\r\n    String appOwner = LogAggregationWebUtils.verifyAndGetAppOwner(html, $(APP_OWNER));\r\n    params.setAppOwner(appOwner);\r\n    boolean isValid = true;\r\n    long start = -4096;\r\n    try {\r\n        start = LogAggregationWebUtils.getLogStartIndex(html, $(\"start\"));\r\n    } catch (NumberFormatException ne) {\r\n        html.h1().__(\"Invalid log start value: \" + $(\"start\")).__();\r\n        isValid = false;\r\n    }\r\n    params.setStartIndex(start);\r\n    long end = Long.MAX_VALUE;\r\n    try {\r\n        end = LogAggregationWebUtils.getLogEndIndex(html, $(\"end\"));\r\n    } catch (NumberFormatException ne) {\r\n        html.h1().__(\"Invalid log end value: \" + $(\"end\")).__();\r\n        isValid = false;\r\n    }\r\n    params.setEndIndex(end);\r\n    long startTime = 0;\r\n    try {\r\n        startTime = LogAggregationWebUtils.getLogStartTime($(\"start.time\"));\r\n    } catch (NumberFormatException ne) {\r\n        html.h1().__(\"Invalid log start time value: \" + $(\"start.time\")).__();\r\n        isValid = false;\r\n    }\r\n    params.setStartTime(startTime);\r\n    long endTime = Long.MAX_VALUE;\r\n    try {\r\n        endTime = LogAggregationWebUtils.getLogEndTime($(\"end.time\"));\r\n        if (endTime < startTime) {\r\n            html.h1().__(\"Invalid log end time value: \" + $(\"end.time\") + \". It should be larger than start time value:\" + startTime).__();\r\n            isValid = false;\r\n        }\r\n    } catch (NumberFormatException ne) {\r\n        html.h1().__(\"Invalid log end time value: \" + $(\"end.time\")).__();\r\n        isValid = false;\r\n    }\r\n    params.setEndTime(endTime);\r\n    if (containerId == null || nodeId == null || appOwner == null || appOwner.isEmpty() || !isValid) {\r\n        return null;\r\n    }\r\n    ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n    params.setAppId(appId);\r\n    String logEntity = $(ENTITY_STRING);\r\n    if (logEntity == null || logEntity.isEmpty()) {\r\n        logEntity = containerId.toString();\r\n    }\r\n    params.setLogEntity(logEntity);\r\n    return params;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 4,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "checkAcls",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean checkAcls(Configuration conf, ApplicationId appId, String owner, Map<ApplicationAccessType, String> appAcls, String remoteUser)\n{\r\n    ApplicationACLsManager aclsManager = new ApplicationACLsManager(conf);\r\n    aclsManager.addApplication(appId, appAcls);\r\n    UserGroupInformation callerUGI = null;\r\n    if (remoteUser != null) {\r\n        callerUGI = UserGroupInformation.createRemoteUser(remoteUser);\r\n    }\r\n    if (callerUGI != null && !aclsManager.checkAccess(callerUGI, ApplicationAccessType.VIEW_APP, owner, appId)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "checkParseRange",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long[] checkParseRange(Block html, long startIndex, long endIndex, long startTime, long endTime, long logLength, String logType)\n{\r\n    long start = startIndex < 0 ? logLength + startIndex : startIndex;\r\n    start = start < 0 ? 0 : start;\r\n    start = start > logLength ? logLength : start;\r\n    long end = endIndex < 0 ? logLength + endIndex : endIndex;\r\n    end = end < 0 ? 0 : end;\r\n    end = end > logLength ? logLength : end;\r\n    end = end < start ? start : end;\r\n    long toRead = end - start;\r\n    if (toRead < logLength) {\r\n        html.p().__(\"Showing \" + toRead + \" bytes of \" + logLength + \" total. Click \").a(url(\"logs\", $(NM_NODENAME), $(CONTAINER_ID), $(ENTITY_STRING), $(APP_OWNER), logType, \"?start=0&start.time=\" + startTime + \"&end.time=\" + endTime), \"here\").__(\" for the full log.\").__();\r\n    }\r\n    return new long[] { start, end };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "processContainerLog",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void processContainerLog(Block html, long[] range, InputStream in, int bufferSize, byte[] cbuf) throws IOException\n{\r\n    long totalSkipped = 0;\r\n    long start = range[0];\r\n    long toRead = range[1] - range[0];\r\n    while (totalSkipped < start) {\r\n        long ret = in.skip(start - totalSkipped);\r\n        if (ret == 0) {\r\n            int nextByte = in.read();\r\n            if (nextByte == -1) {\r\n                throw new IOException(\"Premature EOF from container log\");\r\n            }\r\n            ret = 1;\r\n        }\r\n        totalSkipped += ret;\r\n    }\r\n    int len = 0;\r\n    int currentToRead = toRead > bufferSize ? bufferSize : (int) toRead;\r\n    Hamlet.PRE<Hamlet> pre = html.pre();\r\n    while (toRead > 0 && (len = in.read(cbuf, 0, currentToRead)) > 0) {\r\n        pre.__(new String(cbuf, 0, len, Charset.forName(\"UTF-8\")));\r\n        toRead = toRead - len;\r\n        currentToRead = toRead > bufferSize ? bufferSize : (int) toRead;\r\n    }\r\n    pre.__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getIncludeApplications",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean getIncludeApplications()\n{\r\n    GetQueueInfoRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasIncludeApplications()) ? p.getIncludeApplications() : false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getIncludeChildQueues",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean getIncludeChildQueues()\n{\r\n    GetQueueInfoRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasIncludeChildQueues()) ? p.getIncludeChildQueues() : false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getQueueName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getQueueName()\n{\r\n    GetQueueInfoRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasQueueName()) ? p.getQueueName() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getRecursive",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean getRecursive()\n{\r\n    GetQueueInfoRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasRecursive()) ? p.getRecursive() : false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setIncludeApplications",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setIncludeApplications(boolean includeApplications)\n{\r\n    maybeInitBuilder();\r\n    builder.setIncludeApplications(includeApplications);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setIncludeChildQueues",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setIncludeChildQueues(boolean includeChildQueues)\n{\r\n    maybeInitBuilder();\r\n    builder.setIncludeChildQueues(includeChildQueues);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setQueueName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueueName(String queueName)\n{\r\n    maybeInitBuilder();\r\n    if (queueName == null) {\r\n        builder.clearQueueName();\r\n        return;\r\n    }\r\n    builder.setQueueName((queueName));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setRecursive",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRecursive(boolean recursive)\n{\r\n    maybeInitBuilder();\r\n    builder.setRecursive(recursive);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetQueueInfoRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetQueueInfoRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerStatusProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"ContainerStatus: [\").append(\"ContainerId: \").append(getContainerId()).append(\", \").append(\"ExecutionType: \").append(getExecutionType()).append(\", \").append(\"State: \").append(getState()).append(\", \").append(\"Capability: \").append(getCapability()).append(\", \").append(\"Diagnostics: \").append(getDiagnostics()).append(\", \").append(\"ExitStatus: \").append(getExitStatus()).append(\", \").append(\"IP: \").append(getIPs()).append(\", \").append(\"Host: \").append(getHost()).append(\", \").append(\"ExposedPorts: \").append(getExposedPorts()).append(\", \").append(\"ContainerSubState: \").append(getContainerSubState()).append(\"]\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (containerId != null) {\r\n        builder.setContainerId(convertToProtoFormat(this.containerId));\r\n    }\r\n    if (containerAttributes != null && !containerAttributes.isEmpty()) {\r\n        addContainerAttributesToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ContainerStatusProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addContainerAttributesToProto",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void addContainerAttributesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainerAttributes();\r\n    if (containerAttributes == null) {\r\n        return;\r\n    }\r\n    Iterable<YarnProtos.StringStringMapProto> iterable = new Iterable<YarnProtos.StringStringMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<YarnProtos.StringStringMapProto> iterator() {\r\n            return new Iterator<YarnProtos.StringStringMapProto>() {\r\n\r\n                private Iterator<String> keyIter = containerAttributes.keySet().iterator();\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n\r\n                @Override\r\n                public YarnProtos.StringStringMapProto next() {\r\n                    String key = keyIter.next();\r\n                    String value = containerAttributes.get(key);\r\n                    if (value == null) {\r\n                        value = \"\";\r\n                    }\r\n                    return YarnProtos.StringStringMapProto.newBuilder().setKey(key).setValue((value)).build();\r\n                }\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return keyIter.hasNext();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllContainerAttributes(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initContainerAttributes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initContainerAttributes()\n{\r\n    ContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<YarnProtos.StringStringMapProto> list = p.getContainerAttributesList();\r\n    for (YarnProtos.StringStringMapProto c : list) {\r\n        if (!containerAttributes.containsKey(c.getKey())) {\r\n            this.containerAttributes.put(c.getKey(), c.getValue());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExecutionType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ExecutionType getExecutionType()\n{\r\n    ContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasExecutionType()) {\r\n        return ExecutionType.GUARANTEED;\r\n    }\r\n    return convertFromProtoFormat(p.getExecutionType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExecutionType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setExecutionType(ExecutionType executionType)\n{\r\n    maybeInitBuilder();\r\n    if (executionType == null) {\r\n        builder.clearExecutionType();\r\n        return;\r\n    }\r\n    builder.setExecutionType(convertToProtoFormat(executionType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerState getState()\n{\r\n    ContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasState()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setState(ContainerState state)\n{\r\n    maybeInitBuilder();\r\n    if (state == null) {\r\n        builder.clearState();\r\n        return;\r\n    }\r\n    builder.setState(convertToProtoFormat(state));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainerSubState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerSubState getContainerSubState()\n{\r\n    ContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerSubState()) {\r\n        return null;\r\n    }\r\n    return ProtoUtils.convertFromProtoFormat(p.getContainerSubState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainerSubState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setContainerSubState(ContainerSubState subState)\n{\r\n    maybeInitBuilder();\r\n    if (subState == null) {\r\n        builder.clearContainerSubState();\r\n        return;\r\n    }\r\n    builder.setContainerSubState(ProtoUtils.convertToProtoFormat(subState));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    ContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerId != null) {\r\n        return this.containerId;\r\n    }\r\n    if (!p.hasContainerId()) {\r\n        return null;\r\n    }\r\n    this.containerId = convertFromProtoFormat(p.getContainerId());\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)\n{\r\n    maybeInitBuilder();\r\n    if (containerId == null)\r\n        builder.clearContainerId();\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExitStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getExitStatus()\n{\r\n    ContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getExitStatus();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExitStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setExitStatus(int exitStatus)\n{\r\n    maybeInitBuilder();\r\n    builder.setExitStatus(exitStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getDiagnostics()\n{\r\n    ContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getDiagnostics());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setDiagnostics(String diagnostics)\n{\r\n    maybeInitBuilder();\r\n    builder.setDiagnostics(diagnostics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getCapability()\n{\r\n    ContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasCapability()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getCapability());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCapability",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setCapability(Resource capability)\n{\r\n    maybeInitBuilder();\r\n    if (capability == null) {\r\n        builder.clearCapability();\r\n        return;\r\n    }\r\n    builder.setCapability(convertToProtoFormat(capability));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getIPs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<String> getIPs()\n{\r\n    if (!containerAttributes.containsKey(IPS)) {\r\n        initContainerAttributes();\r\n    }\r\n    String ips = containerAttributes.get((IPS));\r\n    return ips == null ? null : Arrays.asList(ips.split(\",\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setIPs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setIPs(List<String> ips)\n{\r\n    maybeInitBuilder();\r\n    if (ips == null) {\r\n        containerAttributes.remove(IPS);\r\n        addContainerAttributesToProto();\r\n        return;\r\n    }\r\n    containerAttributes.put(IPS, StringUtils.join(\",\", ips));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getExposedPorts()\n{\r\n    if (!containerAttributes.containsKey(PORTS)) {\r\n        initContainerAttributes();\r\n    }\r\n    String ports = containerAttributes.get((PORTS));\r\n    return ports == null ? \"\" : ports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setExposedPorts(String ports)\n{\r\n    maybeInitBuilder();\r\n    if (ports == null) {\r\n        containerAttributes.remove(PORTS);\r\n        return;\r\n    }\r\n    containerAttributes.put(PORTS, ports);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getHost()\n{\r\n    if (containerAttributes.get(HOST) == null) {\r\n        initContainerAttributes();\r\n    }\r\n    return containerAttributes.get(HOST);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setHost",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHost(String host)\n{\r\n    maybeInitBuilder();\r\n    if (host == null) {\r\n        containerAttributes.remove(HOST);\r\n        return;\r\n    }\r\n    containerAttributes.put(HOST, host);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerStateProto convertToProtoFormat(ContainerState e)\n{\r\n    return ProtoUtils.convertToProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerState convertFromProtoFormat(ContainerStateProto e)\n{\r\n    return ProtoUtils.convertFromProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionType convertFromProtoFormat(ExecutionTypeProto e)\n{\r\n    return ProtoUtils.convertFromProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionTypeProto convertToProtoFormat(ExecutionType e)\n{\r\n    return ProtoUtils.convertToProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource e)\n{\r\n    return ProtoUtils.convertToProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createTimelineClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineClient createTimelineClient()\n{\r\n    TimelineClient client = new TimelineClientImpl();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "putEntities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelinePutResponse putEntities(TimelineEntity... entities) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "putEntities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelinePutResponse putEntities(ApplicationAttemptId appAttemptId, TimelineEntityGroupId groupId, TimelineEntity... entities) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "putDomain",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void putDomain(TimelineDomain domain) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "putDomain",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void putDomain(ApplicationAttemptId appAttemptId, TimelineDomain domain) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Token<TimelineDelegationTokenIdentifier> getDelegationToken(String renewer) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "renewDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long renewDelegationToken(Token<TimelineDelegationTokenIdentifier> timelineDT) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "cancelDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cancelDelegationToken(Token<TimelineDelegationTokenIdentifier> timelineDT) throws IOException, YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\event",
  "methodName" : "getLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<NodeLabel> getLabels()\n{\r\n    return labels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "createThread",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Runnable createThread()\n{\r\n    return new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            while (!stopped && !Thread.currentThread().isInterrupted()) {\r\n                drained = eventQueue.isEmpty();\r\n                if (blockNewEvents) {\r\n                    synchronized (waitForDrained) {\r\n                        if (drained) {\r\n                            waitForDrained.notify();\r\n                        }\r\n                    }\r\n                }\r\n                Event event;\r\n                try {\r\n                    event = eventQueue.take();\r\n                } catch (InterruptedException ie) {\r\n                    if (!stopped) {\r\n                        LOG.warn(\"AsyncDispatcher thread interrupted\", ie);\r\n                    }\r\n                    return;\r\n                }\r\n                if (event != null) {\r\n                    if (eventTypeMetricsMap.get(event.getType().getDeclaringClass()) != null) {\r\n                        long startTime = clock.getTime();\r\n                        dispatch(event);\r\n                        eventTypeMetricsMap.get(event.getType().getDeclaringClass()).increment(event.getType(), clock.getTime() - startTime);\r\n                    } else {\r\n                        dispatch(event);\r\n                    }\r\n                    if (printTrigger) {\r\n                        LOG.info(\"Latest dispatch event type: \" + event.getType());\r\n                        printTrigger = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "disableExitOnDispatchException",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void disableExitOnDispatchException()\n{\r\n    exitOnDispatchException = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    super.serviceInit(conf);\r\n    this.detailsInterval = getConfig().getInt(YarnConfiguration.YARN_DISPATCHER_PRINT_EVENTS_INFO_THRESHOLD, YarnConfiguration.DEFAULT_YARN_DISPATCHER_PRINT_EVENTS_INFO_THRESHOLD);\r\n    ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\"PrintEventDetailsThread #%d\").build();\r\n    printEventDetailsExecutor = new ThreadPoolExecutor(1, 5, 10, TimeUnit.SECONDS, new LinkedBlockingQueue<>(), threadFactory);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n    eventHandlingThread = new Thread(createThread());\r\n    eventHandlingThread.setName(dispatcherThreadName);\r\n    eventHandlingThread.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "setDrainEventsOnStop",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDrainEventsOnStop()\n{\r\n    drainEventsOnStop = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (drainEventsOnStop) {\r\n        blockNewEvents = true;\r\n        LOG.info(\"AsyncDispatcher is draining to stop, ignoring any new events.\");\r\n        long endTime = System.currentTimeMillis() + getConfig().getLong(YarnConfiguration.DISPATCHER_DRAIN_EVENTS_TIMEOUT, YarnConfiguration.DEFAULT_DISPATCHER_DRAIN_EVENTS_TIMEOUT);\r\n        synchronized (waitForDrained) {\r\n            while (!isDrained() && eventHandlingThread != null && eventHandlingThread.isAlive() && System.currentTimeMillis() < endTime) {\r\n                waitForDrained.wait(100);\r\n                LOG.info(\"Waiting for AsyncDispatcher to drain. Thread state is :\" + eventHandlingThread.getState());\r\n            }\r\n        }\r\n    }\r\n    stopped = true;\r\n    if (eventHandlingThread != null) {\r\n        eventHandlingThread.interrupt();\r\n        try {\r\n            eventHandlingThread.join();\r\n        } catch (InterruptedException ie) {\r\n            LOG.warn(\"Interrupted Exception while stopping\", ie);\r\n        }\r\n    }\r\n    printEventDetailsExecutor.shutdownNow();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "dispatch",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void dispatch(Event event)\n{\r\n    LOG.debug(\"Dispatching the event {}.{}\", event.getClass().getName(), event);\r\n    Class<? extends Enum> type = event.getType().getDeclaringClass();\r\n    try {\r\n        EventHandler handler = eventDispatchers.get(type);\r\n        if (handler != null) {\r\n            handler.handle(event);\r\n        } else {\r\n            throw new Exception(\"No handler for registered for \" + type);\r\n        }\r\n    } catch (Throwable t) {\r\n        LOG.error(FATAL, \"Error in dispatcher thread\", t);\r\n        if (exitOnDispatchException && (ShutdownHookManager.get().isShutdownInProgress()) == false && stopped == false) {\r\n            stopped = true;\r\n            Thread shutDownThread = new Thread(createShutDownThread());\r\n            shutDownThread.setName(\"AsyncDispatcher ShutDown handler\");\r\n            shutDownThread.start();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "register",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void register(Class<? extends Enum> eventType, EventHandler handler)\n{\r\n    EventHandler<Event> registeredHandler = (EventHandler<Event>) eventDispatchers.get(eventType);\r\n    LOG.info(\"Registering \" + eventType + \" for \" + handler.getClass());\r\n    if (registeredHandler == null) {\r\n        eventDispatchers.put(eventType, handler);\r\n    } else if (!(registeredHandler instanceof MultiListenerHandler)) {\r\n        MultiListenerHandler multiHandler = new MultiListenerHandler();\r\n        multiHandler.addHandler(registeredHandler);\r\n        multiHandler.addHandler(handler);\r\n        eventDispatchers.put(eventType, multiHandler);\r\n    } else {\r\n        MultiListenerHandler multiHandler = (MultiListenerHandler) registeredHandler;\r\n        multiHandler.addHandler(handler);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "getEventHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "EventHandler<Event> getEventHandler()\n{\r\n    return handlerInstance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "createShutDownThread",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Runnable createShutDownThread()\n{\r\n    return new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            LOG.info(\"Exiting, bbye..\");\r\n            System.exit(-1);\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "isEventThreadWaiting",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isEventThreadWaiting()\n{\r\n    return eventHandlingThread.getState() == Thread.State.WAITING;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "isDrained",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isDrained()\n{\r\n    return drained;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "isStopped",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isStopped()\n{\r\n    return stopped;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "addMetrics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addMetrics(EventTypeMetrics metrics, Class<? extends Enum> eventClass)\n{\r\n    eventTypeMetricsMap.put(eventClass, metrics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\event",
  "methodName" : "getEventQueueSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getEventQueueSize()\n{\r\n    return eventQueue.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetClusterNodeAttributesResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.clusterNodeAttributes != null) {\r\n        addNodeAttributesToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addNodeAttributesToProto",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addNodeAttributesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeAttributes();\r\n    if (clusterNodeAttributes == null || clusterNodeAttributes.isEmpty()) {\r\n        return;\r\n    }\r\n    builder.addAllNodeAttributes(clusterNodeAttributes.stream().map(s -> convertToProtoFormat(s)).collect(Collectors.toSet()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    assert false : \"hashCode not designed\";\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetClusterNodeAttributesResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeAttributes(Set<NodeAttributeInfo> attributes)\n{\r\n    maybeInitBuilder();\r\n    this.clusterNodeAttributes = new HashSet<>();\r\n    if (attributes == null) {\r\n        builder.clearNodeAttributes();\r\n        return;\r\n    }\r\n    this.clusterNodeAttributes.addAll(attributes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<NodeAttributeInfo> getNodeAttributes()\n{\r\n    if (this.clusterNodeAttributes != null) {\r\n        return this.clusterNodeAttributes;\r\n    }\r\n    initLocalNodeAttributes();\r\n    return this.clusterNodeAttributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalNodeAttributes()\n{\r\n    YarnServiceProtos.GetClusterNodeAttributesResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeAttributeInfoProto> attributesProtoList = p.getNodeAttributesList();\r\n    this.clusterNodeAttributes = new HashSet<>();\r\n    clusterNodeAttributes.addAll(attributesProtoList.stream().map(attr -> convertFromProtoFormat(attr)).collect(Collectors.toSet()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeInfoProto convertToProtoFormat(NodeAttributeInfo attributeInfo)\n{\r\n    return ((NodeAttributeInfoPBImpl) attributeInfo).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeAttributeInfo convertFromProtoFormat(NodeAttributeInfoProto nodeAttributeInfoProto)\n{\r\n    return new NodeAttributeInfoPBImpl(nodeAttributeInfoProto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return getProto().toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetNewReservationRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReleaseSharedCacheResourceRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getAppId()\n{\r\n    ReleaseSharedCacheResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.applicationId != null) {\r\n        return this.applicationId;\r\n    }\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAppId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAppId(ApplicationId id)\n{\r\n    maybeInitBuilder();\r\n    if (id == null)\r\n        builder.clearApplicationId();\r\n    this.applicationId = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResourceKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getResourceKey()\n{\r\n    ReleaseSharedCacheResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasResourceKey()) ? p.getResourceKey() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResourceKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setResourceKey(String key)\n{\r\n    maybeInitBuilder();\r\n    if (key == null) {\r\n        builder.clearResourceKey();\r\n        return;\r\n    }\r\n    builder.setResourceKey(key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (applicationId != null) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReleaseSharedCacheResourceRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "generate",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void generate(Class<?> specClass, Class<?> implClass, String outputName, String outputPkg) throws IOException\n{\r\n    LOG.info(\"Generating {} using {} and {}\", new Object[] { outputName, specClass, implClass });\r\n    out = new PrintWriter(outputName + \".java\", \"UTF-8\");\r\n    hamlet = basename(outputName);\r\n    String pkg = pkgName(outputPkg, implClass.getPackage().getName());\r\n    puts(0, \"// Generated by HamletGen. Do NOT edit!\\n\", \"package \", pkg, \";\\n\", \"import java.io.PrintWriter;\\n\", \"import java.util.EnumSet;\\n\", \"import static java.util.EnumSet.*;\\n\", \"import static \", implClass.getName(), \".EOpt.*;\\n\", \"import org.apache.hadoop.yarn.webapp.SubView;\");\r\n    String implClassName = implClass.getSimpleName();\r\n    if (!implClass.getPackage().getName().equals(pkg)) {\r\n        puts(0, \"import \", implClass.getName(), ';');\r\n    }\r\n    puts(0, \"\\n\", \"public class \", hamlet, \" extends \", implClassName, \" implements \", specClass.getSimpleName(), \"._Html {\\n\", \"  public \", hamlet, \"(PrintWriter out, int nestLevel,\", \" boolean wasInline) {\\n\", \"    super(out, nestLevel, wasInline);\\n\", \"  }\\n\\n\", \"  static EnumSet<EOpt> opt(boolean endTag, boolean inline, \", \"boolean pre) {\\n\", \"    EnumSet<EOpt> opts = of(ENDTAG);\\n\", \"    if (!endTag) opts.remove(ENDTAG);\\n\", \"    if (inline) opts.add(INLINE);\\n\", \"    if (pre) opts.add(PRE);\\n\", \"    return opts;\\n\", \"  }\");\r\n    initLut(specClass);\r\n    genImpl(specClass, implClassName, 1);\r\n    LOG.info(\"Generating {} methods\", hamlet);\r\n    genMethods(hamlet, top, 1);\r\n    puts(0, \"}\");\r\n    out.close();\r\n    LOG.info(\"Wrote {} bytes to {}.java\", bytes, outputName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "basename",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String basename(String path)\n{\r\n    return path.substring(path.lastIndexOf('/') + 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "pkgName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String pkgName(String pkg, String defaultPkg)\n{\r\n    if (pkg == null || pkg.isEmpty())\r\n        return defaultPkg;\r\n    return pkg;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "initLut",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void initLut(Class<?> spec)\n{\r\n    endTagOptional.clear();\r\n    inlineElements.clear();\r\n    for (Class<?> cls : spec.getClasses()) {\r\n        Annotation a = cls.getAnnotation(HamletSpec.Element.class);\r\n        if (a != null && !((HamletSpec.Element) a).endTag()) {\r\n            endTagOptional.add(cls.getSimpleName());\r\n        }\r\n        if (cls.getSimpleName().equals(\"Inline\")) {\r\n            for (Method method : cls.getMethods()) {\r\n                String retName = method.getReturnType().getSimpleName();\r\n                if (isElement(retName)) {\r\n                    inlineElements.add(retName);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "genImpl",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void genImpl(Class<?> spec, String implClassName, int indent)\n{\r\n    String specName = spec.getSimpleName();\r\n    for (Class<?> cls : spec.getClasses()) {\r\n        String className = cls.getSimpleName();\r\n        if (cls.isInterface()) {\r\n            genFactoryMethods(cls, indent);\r\n        }\r\n        if (isElement(className)) {\r\n            LOG.info(\"Generating class {}<T>\", className);\r\n            puts(indent, \"\\n\", \"public class \", className, \"<T extends __>\", \" extends EImp<T> implements \", specName, \".\", className, \" {\\n\", \"  public \", className, \"(String name, T parent,\", \" EnumSet<EOpt> opts) {\\n\", \"    super(name, parent, opts);\\n\", \"  }\");\r\n            genMethods(className, cls, indent + 1);\r\n            puts(indent, \"}\");\r\n        } else if (className.equals(\"_Html\")) {\r\n            top = cls;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "genFactoryMethods",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void genFactoryMethods(Class<?> cls, int indent)\n{\r\n    for (Method method : cls.getDeclaredMethods()) {\r\n        String retName = method.getReturnType().getSimpleName();\r\n        String methodName = method.getName();\r\n        if (methodName.charAt(0) == '$')\r\n            continue;\r\n        if (isElement(retName) && method.getParameterTypes().length == 0) {\r\n            genFactoryMethod(retName, methodName, indent);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "genMethods",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void genMethods(String className, Class<?> cls, int indent)\n{\r\n    topMode = (top != null && cls.equals(top));\r\n    for (Method method : cls.getMethods()) {\r\n        String retName = method.getReturnType().getSimpleName();\r\n        if (method.getName().charAt(0) == '$') {\r\n            genAttributeMethod(className, method, indent);\r\n        } else if (isElement(retName)) {\r\n            genNewElementMethod(className, method, indent);\r\n        } else {\r\n            genCurElementMethod(className, method, indent);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "genAttributeMethod",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void genAttributeMethod(String className, Method method, int indent)\n{\r\n    String methodName = method.getName();\r\n    String attrName = methodName.substring(1).replace(\"__\", \"-\");\r\n    Type[] params = method.getGenericParameterTypes();\r\n    echo(indent, \"\\n\", \"@Override\\n\", \"public \", className, topMode ? \" \" : \"<T> \", methodName, \"(\");\r\n    if (params.length == 0) {\r\n        puts(0, \") {\");\r\n        puts(indent, \"  addAttr(\\\"\", attrName, \"\\\", null);\\n\", \"  return this;\\n\", \"}\");\r\n    } else if (params.length == 1) {\r\n        String typeName = getTypeName(params[0]);\r\n        puts(0, typeName, \" value) {\");\r\n        if (typeName.equals(\"EnumSet<LinkType>\")) {\r\n            puts(indent, \"  addRelAttr(\\\"\", attrName, \"\\\", value);\\n\", \"  return this;\\n\", \"}\");\r\n        } else if (typeName.equals(\"EnumSet<Media>\")) {\r\n            puts(indent, \"  addMediaAttr(\\\"\", attrName, \"\\\", value);\\n\", \"  return this;\\n\", \"}\");\r\n        } else {\r\n            puts(indent, \"  addAttr(\\\"\", attrName, \"\\\", value);\\n\", \"  return this;\\n\", \"}\");\r\n        }\r\n    } else {\r\n        throwUnhandled(className, method);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "getTypeName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getTypeName(Type type)\n{\r\n    if (type instanceof Class<?>) {\r\n        return ((Class<?>) type).getSimpleName();\r\n    }\r\n    ParameterizedType pt = (ParameterizedType) type;\r\n    return ((Class<?>) pt.getRawType()).getSimpleName() + \"<\" + ((Class<?>) pt.getActualTypeArguments()[0]).getSimpleName() + \">\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "genFactoryMethod",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void genFactoryMethod(String retName, String methodName, int indent)\n{\r\n    puts(indent, \"\\n\", \"private <T extends __> \", retName, \"<T> \", methodName, \"__(T e, boolean inline) {\\n\", \"  return new \", retName, \"<T>(\\\"\", StringUtils.toLowerCase(retName), \"\\\", e, opt(\", !endTagOptional.contains(retName), \", inline, \", retName.equals(\"PRE\"), \")); }\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "genNewElementMethod",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void genNewElementMethod(String className, Method method, int indent)\n{\r\n    String methodName = method.getName();\r\n    String retName = method.getReturnType().getSimpleName();\r\n    Class<?>[] params = method.getParameterTypes();\r\n    echo(indent, \"\\n\", \"@Override\\n\", \"public \", retName, \"<\", className, topMode ? \"> \" : \"<T>> \", methodName, \"(\");\r\n    if (params.length == 0) {\r\n        puts(0, \") {\");\r\n        puts(indent, topMode ? \"\" : \"  closeAttrs();\\n\", \"  return \", StringUtils.toLowerCase(retName), \"__\" + \"(this, \", isInline(className, retName), \");\\n\", \"}\");\r\n    } else if (params.length == 1) {\r\n        puts(0, \"String selector) {\");\r\n        puts(indent, \"  return setSelector(\", methodName, \"(), selector);\\n\", \"}\");\r\n    } else {\r\n        throwUnhandled(className, method);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "isInline",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "boolean isInline(String container, String className)\n{\r\n    if ((container.equals(\"BODY\") || container.equals(hamlet) || container.equals(\"HEAD\") || container.equals(\"HTML\")) && (className.equals(\"INS\") || className.equals(\"DEL\") || className.equals(\"SCRIPT\"))) {\r\n        return false;\r\n    }\r\n    return inlineElements.contains(className);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "genCurElementMethod",
  "errType" : null,
  "containingMethodsNum" : 60,
  "sourceCodeText" : "void genCurElementMethod(String className, Method method, int indent)\n{\r\n    String methodName = method.getName();\r\n    Class<?>[] params = method.getParameterTypes();\r\n    if (topMode || params.length > 0) {\r\n        echo(indent, \"\\n\", \"@Override\\n\", \"public \", className, topMode ? \" \" : \"<T> \", methodName, \"(\");\r\n    }\r\n    if (params.length == 0) {\r\n        if (topMode) {\r\n            puts(0, \") {\");\r\n            puts(indent, \"  return this;\\n\", \"}\");\r\n        }\r\n    } else if (params.length == 1) {\r\n        if (methodName.equals(\"base\")) {\r\n            puts(0, \"String href) {\");\r\n            puts(indent, \"  return base().$href(href).__();\\n\", \"}\");\r\n        } else if (methodName.equals(\"script\")) {\r\n            puts(0, \"String src) {\");\r\n            puts(indent, \"  return setScriptSrc(script(), src).__();\\n\", \"}\");\r\n        } else if (methodName.equals(\"style\")) {\r\n            puts(0, \"Object... lines) {\");\r\n            puts(indent, \"  return style().$type(\\\"text/css\\\").__(lines).__();\\n\", \"}\");\r\n        } else if (methodName.equals(\"img\")) {\r\n            puts(0, \"String src) {\");\r\n            puts(indent, \"  return \", methodName, \"().$src(src).__();\\n\", \"}\");\r\n        } else if (methodName.equals(\"br\") || methodName.equals(\"hr\") || methodName.equals(\"col\")) {\r\n            puts(0, \"String selector) {\");\r\n            puts(indent, \"  return setSelector(\", methodName, \"(), selector).__();\\n\", \"}\");\r\n        } else if (methodName.equals(\"link\")) {\r\n            puts(0, \"String href) {\");\r\n            puts(indent, \"  return setLinkHref(\", methodName, \"(), href).__();\\n\", \"}\");\r\n        } else if (methodName.equals(\"__\")) {\r\n            if (params[0].getSimpleName().equals(\"Class\")) {\r\n                puts(0, \"Class<? extends SubView> cls) {\");\r\n                puts(indent, \"  \", topMode ? \"subView\" : \"_v\", \"(cls);\\n\", \"  return this;\\n\", \"}\");\r\n            } else {\r\n                puts(0, \"Object... lines) {\");\r\n                puts(indent, \"  _p(\", needsEscaping(className), \", lines);\\n\", \"  return this;\\n\", \"}\");\r\n            }\r\n        } else if (methodName.equals(\"_r\")) {\r\n            puts(0, \"Object... lines) {\");\r\n            puts(indent, \"  _p(false, lines);\\n\", \"  return this;\\n\", \"}\");\r\n        } else {\r\n            puts(0, \"String cdata) {\");\r\n            puts(indent, \"  return \", methodName, \"().__(cdata).__();\\n\", \"}\");\r\n        }\r\n    } else if (params.length == 2) {\r\n        if (methodName.equals(\"meta\")) {\r\n            puts(0, \"String name, String content) {\");\r\n            puts(indent, \"  return meta().$name(name).$content(content).__();\\n\", \"}\");\r\n        } else if (methodName.equals(\"meta_http\")) {\r\n            puts(0, \"String header, String content) {\");\r\n            puts(indent, \"  return meta().$http_equiv(header).$content(content).__();\\n\", \"}\");\r\n        } else if (methodName.equals(\"a\")) {\r\n            puts(0, \"String href, String anchorText) {\");\r\n            puts(indent, \"  return a().$href(href).__(anchorText).__();\\n\", \"}\");\r\n        } else if (methodName.equals(\"bdo\")) {\r\n            puts(0, \"Dir dir, String cdata) {\");\r\n            puts(indent, \"  return bdo().$dir(dir).__(cdata).__();\\n\", \"}\");\r\n        } else if (methodName.equals(\"label\")) {\r\n            puts(0, \"String forId, String cdata) {\");\r\n            puts(indent, \"  return label().$for(forId).__(cdata).__();\\n\", \"}\");\r\n        } else if (methodName.equals(\"param\")) {\r\n            puts(0, \"String name, String value) {\");\r\n            puts(indent, \"  return param().$name(name).$value(value).__();\\n\", \"}\");\r\n        } else {\r\n            puts(0, \"String selector, String cdata) {\");\r\n            puts(indent, \"  return setSelector(\", methodName, \"(), selector).__(cdata).__();\\n\", \"}\");\r\n        }\r\n    } else if (params.length == 3) {\r\n        if (methodName.equals(\"a\")) {\r\n            puts(0, \"String selector, String href, String anchorText) {\");\r\n            puts(indent, \"  return setSelector(a(), selector)\", \".$href(href).__(anchorText).__();\\n\", \"}\");\r\n        }\r\n    } else {\r\n        throwUnhandled(className, method);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "needsEscaping",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean needsEscaping(String eleName)\n{\r\n    return !eleName.equals(\"SCRIPT\") && !eleName.equals(\"STYLE\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "throwUnhandled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void throwUnhandled(String className, Method method)\n{\r\n    throw new WebAppException(\"Unhandled \" + className + \"#\" + method);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "echo",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void echo(int indent, Object... args)\n{\r\n    String prev = null;\r\n    for (Object o : args) {\r\n        String s = String.valueOf(o);\r\n        if (!s.isEmpty() && !s.equals(\"\\n\") && (prev == null || prev.endsWith(\"\\n\"))) {\r\n            indent(indent);\r\n        }\r\n        prev = s;\r\n        out.print(s);\r\n        bytes += s.length();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "indent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void indent(int indent)\n{\r\n    for (int i = 0; i < indent; ++i) {\r\n        out.print(\"  \");\r\n        bytes += 2;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "puts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void puts(int indent, Object... args)\n{\r\n    echo(indent, args);\r\n    out.println();\r\n    ++bytes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "isElement",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isElement(String s)\n{\r\n    return elementRegex.matcher(s).matches();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\hamlet2",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    CommandLine cmd = new GnuParser().parse(opts, args);\r\n    if (cmd.hasOption(\"help\")) {\r\n        new HelpFormatter().printHelp(\"Usage: hbgen [OPTIONS]\", opts);\r\n        return;\r\n    }\r\n    Class<?> specClass = HamletSpec.class;\r\n    Class<?> implClass = HamletImpl.class;\r\n    String outputClass = \"HamletTmp\";\r\n    String outputPackage = implClass.getPackage().getName();\r\n    if (cmd.hasOption(\"spec-class\")) {\r\n        specClass = Class.forName(cmd.getOptionValue(\"spec-class\"));\r\n    }\r\n    if (cmd.hasOption(\"impl-class\")) {\r\n        implClass = Class.forName(cmd.getOptionValue(\"impl-class\"));\r\n    }\r\n    if (cmd.hasOption(\"output-class\")) {\r\n        outputClass = cmd.getOptionValue(\"output-class\");\r\n    }\r\n    if (cmd.hasOption(\"output-package\")) {\r\n        outputPackage = cmd.getOptionValue(\"output-package\");\r\n    }\r\n    new HamletGen().generate(specClass, implClass, outputClass, outputPackage);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppId()\n{\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerId()\n{\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MatchExpression getNodeId()\n{\r\n    return nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getFileName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MatchExpression getFileName()\n{\r\n    return fileName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getFileSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComparisonCollection getFileSize()\n{\r\n    return fileSize;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getModificationTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComparisonCollection getModificationTime()\n{\r\n    return modificationTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SchedulingRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.priority != null) {\r\n        builder.setPriority(convertToProtoFormat(this.priority));\r\n    }\r\n    if (this.executionType != null) {\r\n        builder.setExecutionType(convertToProtoFormat(this.executionType));\r\n    }\r\n    if (this.allocationTags != null) {\r\n        builder.clearAllocationTags();\r\n        builder.addAllAllocationTags(this.allocationTags);\r\n    }\r\n    if (this.resourceSizing != null) {\r\n        builder.setResourceSizing(convertToProtoFormat(this.resourceSizing));\r\n    }\r\n    if (this.placementConstraint != null) {\r\n        builder.setPlacementConstraint(convertToProtoFormat(this.placementConstraint));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SchedulingRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAllocationRequestId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAllocationRequestId()\n{\r\n    SchedulingRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getAllocationRequestId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAllocationRequestId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocationRequestId(long allocationRequestId)\n{\r\n    maybeInitBuilder();\r\n    builder.setAllocationRequestId(allocationRequestId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    SchedulingRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.priority != null) {\r\n        return this.priority;\r\n    }\r\n    if (!p.hasPriority()) {\r\n        return null;\r\n    }\r\n    this.priority = convertFromProtoFormat(p.getPriority());\r\n    return this.priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPriority(Priority priority)\n{\r\n    maybeInitBuilder();\r\n    if (priority == null) {\r\n        builder.clearPriority();\r\n    }\r\n    this.priority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExecutionType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ExecutionTypeRequest getExecutionType()\n{\r\n    SchedulingRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.executionType != null) {\r\n        return this.executionType;\r\n    }\r\n    if (!p.hasExecutionType()) {\r\n        return null;\r\n    }\r\n    this.executionType = convertFromProtoFormat(p.getExecutionType());\r\n    return this.executionType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExecutionType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setExecutionType(ExecutionTypeRequest executionType)\n{\r\n    maybeInitBuilder();\r\n    if (executionType == null) {\r\n        builder.clearExecutionType();\r\n    }\r\n    this.executionType = executionType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAllocationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getAllocationTags()\n{\r\n    initAllocationTags();\r\n    return this.allocationTags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAllocationTags",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocationTags(Set<String> allocationTags)\n{\r\n    maybeInitBuilder();\r\n    builder.clearAllocationTags();\r\n    this.allocationTags = allocationTags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResourceSizing",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceSizing getResourceSizing()\n{\r\n    SchedulingRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.resourceSizing != null) {\r\n        return this.resourceSizing;\r\n    }\r\n    if (!p.hasResourceSizing()) {\r\n        return null;\r\n    }\r\n    this.resourceSizing = convertFromProtoFormat(p.getResourceSizing());\r\n    return this.resourceSizing;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResourceSizing",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResourceSizing(ResourceSizing resourceSizing)\n{\r\n    maybeInitBuilder();\r\n    if (resourceSizing == null) {\r\n        builder.clearResourceSizing();\r\n    }\r\n    this.resourceSizing = resourceSizing;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPlacementConstraint",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "PlacementConstraint getPlacementConstraint()\n{\r\n    SchedulingRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.placementConstraint != null) {\r\n        return this.placementConstraint;\r\n    }\r\n    if (!p.hasPlacementConstraint()) {\r\n        return null;\r\n    }\r\n    this.placementConstraint = convertFromProtoFormat(p.getPlacementConstraint());\r\n    return this.placementConstraint;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPlacementConstraint",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPlacementConstraint(PlacementConstraint placementConstraint)\n{\r\n    maybeInitBuilder();\r\n    if (placementConstraint == null) {\r\n        builder.clearPlacementConstraint();\r\n    }\r\n    this.placementConstraint = placementConstraint;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PriorityPBImpl convertFromProtoFormat(PriorityProto p)\n{\r\n    return new PriorityPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PriorityProto convertToProtoFormat(Priority p)\n{\r\n    return ((PriorityPBImpl) p).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ExecutionTypeRequestPBImpl convertFromProtoFormat(ExecutionTypeRequestProto p)\n{\r\n    return new ExecutionTypeRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionTypeRequestProto convertToProtoFormat(ExecutionTypeRequest p)\n{\r\n    return ((ExecutionTypeRequestPBImpl) p).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceSizingPBImpl convertFromProtoFormat(ResourceSizingProto p)\n{\r\n    return new ResourceSizingPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceSizingProto convertToProtoFormat(ResourceSizing p)\n{\r\n    return ((ResourceSizingPBImpl) p).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PlacementConstraint convertFromProtoFormat(PlacementConstraintProto c)\n{\r\n    PlacementConstraintFromProtoConverter fromProtoConverter = new PlacementConstraintFromProtoConverter(c);\r\n    return fromProtoConverter.convert();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PlacementConstraintProto convertToProtoFormat(PlacementConstraint c)\n{\r\n    PlacementConstraintToProtoConverter toProtoConverter = new PlacementConstraintToProtoConverter(c);\r\n    return toProtoConverter.convert();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initAllocationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initAllocationTags()\n{\r\n    if (this.allocationTags != null) {\r\n        return;\r\n    }\r\n    SchedulingRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.allocationTags = new HashSet<>();\r\n    this.allocationTags.addAll(p.getAllocationTagsList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other instanceof SchedulingRequest) {\r\n        if (this == other) {\r\n            return true;\r\n        }\r\n        SchedulingRequest that = (SchedulingRequest) other;\r\n        if (getAllocationRequestId() != that.getAllocationRequestId()) {\r\n            return false;\r\n        }\r\n        if (!getAllocationTags().equals(that.getAllocationTags())) {\r\n            return false;\r\n        }\r\n        if (!getPriority().equals(that.getPriority())) {\r\n            return false;\r\n        }\r\n        if (!getExecutionType().equals(that.getExecutionType())) {\r\n            return false;\r\n        }\r\n        if (!getResourceSizing().equals(that.getResourceSizing())) {\r\n            return false;\r\n        }\r\n        return getPlacementConstraint().equals(that.getPlacementConstraint());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String toString()\n{\r\n    return \"SchedulingRequestPBImpl{\" + \"priority=\" + getPriority() + \", allocationReqId=\" + getAllocationRequestId() + \", executionType=\" + getExecutionType() + \", allocationTags=\" + getAllocationTags() + \", resourceSizing=\" + getResourceSizing() + \", placementConstraint=\" + getPlacementConstraint() + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createTimelineReaderClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineReaderClient createTimelineReaderClient()\n{\r\n    return new TimelineReaderClientImpl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplicationEntity",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineEntity getApplicationEntity(ApplicationId appId, String fields, Map<String, String> filters) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplicationAttemptEntity",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineEntity getApplicationAttemptEntity(ApplicationAttemptId appAttemptId, String fields, Map<String, String> filters) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplicationAttemptEntities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<TimelineEntity> getApplicationAttemptEntities(ApplicationId appId, String fields, Map<String, String> filters, long limit, String fromId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getContainerEntity",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineEntity getContainerEntity(ContainerId containerId, String fields, Map<String, String> filters) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getContainerEntities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<TimelineEntity> getContainerEntities(ApplicationId appId, String fields, Map<String, String> filters, long limit, String fromId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "StrictPreemptionContractProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containers != null) {\r\n        addContainersToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = StrictPreemptionContractProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<PreemptionContainer> getContainers()\n{\r\n    initIds();\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setContainers(final Set<PreemptionContainer> containers)\n{\r\n    if (null == containers) {\r\n        builder.clearContainer();\r\n    }\r\n    this.containers = containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initIds",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initIds()\n{\r\n    if (containers != null) {\r\n        return;\r\n    }\r\n    StrictPreemptionContractProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<PreemptionContainerProto> list = p.getContainerList();\r\n    containers = new HashSet<PreemptionContainer>();\r\n    for (PreemptionContainerProto c : list) {\r\n        containers.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addContainersToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addContainersToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainer();\r\n    if (containers == null) {\r\n        return;\r\n    }\r\n    Iterable<PreemptionContainerProto> iterable = new Iterable<PreemptionContainerProto>() {\r\n\r\n        @Override\r\n        public Iterator<PreemptionContainerProto> iterator() {\r\n            return new Iterator<PreemptionContainerProto>() {\r\n\r\n                Iterator<PreemptionContainer> iter = containers.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public PreemptionContainerProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllContainer(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PreemptionContainerPBImpl convertFromProtoFormat(PreemptionContainerProto p)\n{\r\n    return new PreemptionContainerPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PreemptionContainerProto convertToProtoFormat(PreemptionContainer t)\n{\r\n    return ((PreemptionContainerPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "T getProto()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteBuffer convertFromProtoFormat(ByteString byteString)\n{\r\n    return ProtoUtils.convertFromProtoFormat(byteString);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteString convertToProtoFormat(ByteBuffer byteBuffer)\n{\r\n    return ProtoUtils.convertToProtoFormat(byteBuffer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Token getDelegationToken()\n{\r\n    CancelDelegationTokenRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.token != null) {\r\n        return this.token;\r\n    }\r\n    this.token = convertFromProtoFormat(p.getToken());\r\n    return this.token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setDelegationToken(Token token)\n{\r\n    maybeInitBuilder();\r\n    if (token == null)\r\n        builder.clearToken();\r\n    this.token = token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CancelDelegationTokenRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (token != null) {\r\n        builder.setToken(convertToProtoFormat(this.token));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = CancelDelegationTokenRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenPBImpl convertFromProtoFormat(TokenProto p)\n{\r\n    return new TokenPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token t)\n{\r\n    return ((TokenPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getKerberosInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "KerberosInfo getKerberosInfo(Class<?> protocol, Configuration conf)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getTokenInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenInfo getTokenInfo(Class<?> protocol, Configuration conf)\n{\r\n    if (!protocol.equals(ContainerManagementProtocolPB.class)) {\r\n        return null;\r\n    }\r\n    return new TokenInfo() {\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends TokenSelector<? extends TokenIdentifier>> value() {\r\n            return NMTokenSelector.class;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getRemoteNodeLogFileForApp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getRemoteNodeLogFileForApp(Path remoteRootLogDir, ApplicationId appId, String user, NodeId nodeId, String suffix)\n{\r\n    return new Path(getRemoteAppLogDir(remoteRootLogDir, appId, user, suffix), getNodeString(nodeId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getRemoteAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getRemoteAppLogDir(Path remoteRootLogDir, ApplicationId appId, String user, String suffix)\n{\r\n    return new Path(getRemoteBucketDir(remoteRootLogDir, user, suffix, appId), appId.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getOlderRemoteAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getOlderRemoteAppLogDir(ApplicationId appId, String user, Path remoteRootLogDir, String suffix)\n{\r\n    return new Path(getOlderRemoteLogSuffixedDir(remoteRootLogDir, user, suffix), appId.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getOlderRemoteAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Path getOlderRemoteAppLogDir(Configuration conf, ApplicationId appId, String user, Path remoteRootLogDir, String suffix) throws IOException\n{\r\n    org.apache.hadoop.fs.Path remoteAppDir = null;\r\n    if (user == null) {\r\n        org.apache.hadoop.fs.Path qualifiedRemoteRootLogDir = FileContext.getFileContext(conf).makeQualified(remoteRootLogDir);\r\n        FileContext fc = FileContext.getFileContext(qualifiedRemoteRootLogDir.toUri(), conf);\r\n        org.apache.hadoop.fs.Path toMatch = LogAggregationUtils.getOlderRemoteAppLogDir(appId, \"*\", remoteRootLogDir, suffix);\r\n        FileStatus[] matching = fc.util().globStatus(toMatch);\r\n        if (matching == null || matching.length != 1) {\r\n            throw new IOException(\"Can not find remote application directory for \" + \"the application:\" + appId);\r\n        }\r\n        remoteAppDir = matching[0].getPath();\r\n    } else {\r\n        remoteAppDir = LogAggregationUtils.getOlderRemoteAppLogDir(appId, user, remoteRootLogDir, suffix);\r\n    }\r\n    return remoteAppDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getRemoteLogSuffixedDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getRemoteLogSuffixedDir(Path remoteRootLogDir, String user, String suffix)\n{\r\n    suffix = getBucketSuffix() + suffix;\r\n    return new Path(getRemoteLogUserDir(remoteRootLogDir, user), suffix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getOlderRemoteLogSuffixedDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Path getOlderRemoteLogSuffixedDir(Path remoteRootLogDir, String user, String suffix)\n{\r\n    if (suffix == null || suffix.isEmpty()) {\r\n        return getRemoteLogUserDir(remoteRootLogDir, user);\r\n    }\r\n    return new Path(getRemoteLogUserDir(remoteRootLogDir, user), suffix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getRemoteLogUserDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getRemoteLogUserDir(Path remoteRootLogDir, String user)\n{\r\n    return new Path(remoteRootLogDir, user);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getRemoteBucketDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Path getRemoteBucketDir(Path remoteRootLogDir, String user, String suffix, ApplicationId appId)\n{\r\n    int bucket = appId.getId() % 10000;\r\n    String bucketDir = String.format(\"%04d\", bucket);\r\n    return new Path(getRemoteLogSuffixedDir(remoteRootLogDir, user, suffix), bucketDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "isOlderPathEnabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isOlderPathEnabled(Configuration conf)\n{\r\n    return conf.getBoolean(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_INCLUDE_OLDER, YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_INCLUDE_OLDER);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getBucketSuffix",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getBucketSuffix()\n{\r\n    return BUCKET_SUFFIX;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getNodeString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getNodeString(NodeId nodeId)\n{\r\n    return nodeId.toString().replace(\":\", \"_\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getNodeString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getNodeString(String nodeId)\n{\r\n    return nodeId.toString().replace(\":\", \"_\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getRemoteAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "org.apache.hadoop.fs.Path getRemoteAppLogDir(Configuration conf, ApplicationId appId, String appOwner, org.apache.hadoop.fs.Path remoteRootLogDir, String suffix) throws IOException\n{\r\n    org.apache.hadoop.fs.Path remoteAppDir = null;\r\n    if (appOwner == null) {\r\n        org.apache.hadoop.fs.Path qualifiedRemoteRootLogDir = FileContext.getFileContext(conf).makeQualified(remoteRootLogDir);\r\n        FileContext fc = FileContext.getFileContext(qualifiedRemoteRootLogDir.toUri(), conf);\r\n        org.apache.hadoop.fs.Path toMatch = LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir, appId, \"*\", suffix);\r\n        FileStatus[] matching = fc.util().globStatus(toMatch);\r\n        if (matching == null || matching.length != 1) {\r\n            throw new IOException(\"Can not find remote application directory for \" + \"the application:\" + appId);\r\n        }\r\n        remoteAppDir = matching[0].getPath();\r\n    } else {\r\n        remoteAppDir = LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir, appId, appOwner, suffix);\r\n    }\r\n    return remoteAppDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getNodeFiles",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RemoteIterator<FileStatus> getNodeFiles(Configuration conf, Path remoteAppLogDir, ApplicationId appId, String appOwner) throws IOException\n{\r\n    Path qualifiedLogDir = FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\r\n    return FileContext.getFileContext(qualifiedLogDir.toUri(), conf).listStatus(remoteAppLogDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getRemoteNodeFileDir",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "RemoteIterator<FileStatus> getRemoteNodeFileDir(Configuration conf, ApplicationId appId, String appOwner, org.apache.hadoop.fs.Path remoteRootLogDir, String suffix) throws IOException\n{\r\n    RemoteIterator<FileStatus> nodeFilesCur = null;\r\n    RemoteIterator<FileStatus> nodeFilesPrev = null;\r\n    StringBuilder diagnosticsMsg = new StringBuilder();\r\n    try {\r\n        Path remoteAppLogDir = getRemoteAppLogDir(conf, appId, appOwner, remoteRootLogDir, suffix);\r\n        nodeFilesCur = getNodeFiles(conf, remoteAppLogDir, appId, appOwner);\r\n    } catch (IOException ex) {\r\n        diagnosticsMsg.append(ex.getMessage() + \"\\n\");\r\n    }\r\n    if (isOlderPathEnabled(conf)) {\r\n        try {\r\n            Path remoteAppLogDir = getOlderRemoteAppLogDir(conf, appId, appOwner, remoteRootLogDir, suffix);\r\n            nodeFilesPrev = getNodeFiles(conf, remoteAppLogDir, appId, appOwner);\r\n        } catch (IOException ex) {\r\n            diagnosticsMsg.append(ex.getMessage() + \"\\n\");\r\n        }\r\n        if (nodeFilesCur == null) {\r\n            return nodeFilesPrev;\r\n        } else if (nodeFilesPrev != null) {\r\n            RemoteIterator<FileStatus> curDir = nodeFilesCur;\r\n            RemoteIterator<FileStatus> prevDir = nodeFilesPrev;\r\n            return combineIterators(prevDir, curDir);\r\n        }\r\n    }\r\n    if (nodeFilesCur == null) {\r\n        throw new IOException(diagnosticsMsg.toString());\r\n    }\r\n    return nodeFilesCur;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getRemoteNodeFileList",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "List<FileStatus> getRemoteNodeFileList(Configuration conf, ApplicationId appId, String appOwner, org.apache.hadoop.fs.Path remoteRootLogDir, String suffix) throws IOException\n{\r\n    StringBuilder diagnosticsMsg = new StringBuilder();\r\n    List<FileStatus> nodeFiles = new ArrayList<>();\r\n    try {\r\n        Path remoteAppLogDir = getRemoteAppLogDir(conf, appId, appOwner, remoteRootLogDir, suffix);\r\n        Path qualifiedLogDir = FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\r\n        nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\r\n    } catch (IOException ex) {\r\n        diagnosticsMsg.append(ex.getMessage() + \"\\n\");\r\n    }\r\n    if (isOlderPathEnabled(conf)) {\r\n        try {\r\n            Path remoteAppLogDir = getOlderRemoteAppLogDir(conf, appId, appOwner, remoteRootLogDir, suffix);\r\n            Path qualifiedLogDir = FileContext.getFileContext(conf).makeQualified(remoteAppLogDir);\r\n            nodeFiles.addAll(Arrays.asList(FileContext.getFileContext(qualifiedLogDir.toUri(), conf).util().listStatus(remoteAppLogDir)));\r\n        } catch (IOException ex) {\r\n            diagnosticsMsg.append(ex.getMessage() + \"\\n\");\r\n        }\r\n    }\r\n    if (nodeFiles.isEmpty()) {\r\n        throw new IOException(diagnosticsMsg.toString());\r\n    }\r\n    return nodeFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getRemoteFiles",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RemoteIterator<FileStatus> getRemoteFiles(Configuration conf, Path appPath) throws IOException\n{\r\n    Path qualifiedLogDir = FileContext.getFileContext(conf).makeQualified(appPath);\r\n    return FileContext.getFileContext(qualifiedLogDir.toUri(), conf).listStatus(appPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getUserRemoteLogDir",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "RemoteIterator<FileStatus> getUserRemoteLogDir(Configuration conf, String user, Path remoteRootLogDir, String remoteRootLogDirSuffix) throws IOException\n{\r\n    Path userPath = LogAggregationUtils.getRemoteLogSuffixedDir(remoteRootLogDir, user, remoteRootLogDirSuffix);\r\n    final RemoteIterator<FileStatus> userRootDirFiles = getRemoteFiles(conf, userPath);\r\n    RemoteIterator<FileStatus> newDirs = new RemoteIterator<FileStatus>() {\r\n\r\n        private RemoteIterator<FileStatus> currentBucketDir = LogAggregationUtils.getSubDir(conf, userRootDirFiles);\r\n\r\n        @Override\r\n        public boolean hasNext() throws IOException {\r\n            return currentBucketDir != null && currentBucketDir.hasNext() || userRootDirFiles.hasNext();\r\n        }\r\n\r\n        @Override\r\n        public FileStatus next() throws IOException {\r\n            FileStatus next = null;\r\n            while (next == null) {\r\n                if (currentBucketDir != null && currentBucketDir.hasNext()) {\r\n                    next = currentBucketDir.next();\r\n                } else if (userRootDirFiles.hasNext()) {\r\n                    currentBucketDir = LogAggregationUtils.getSubDir(conf, userRootDirFiles);\r\n                } else {\r\n                    throw new NoSuchElementException();\r\n                }\r\n            }\r\n            return next;\r\n        }\r\n    };\r\n    RemoteIterator<FileStatus> allDir = newDirs;\r\n    if (LogAggregationUtils.isOlderPathEnabled(conf)) {\r\n        try {\r\n            Path oldPath = LogAggregationUtils.getOlderRemoteLogSuffixedDir(remoteRootLogDir, user, remoteRootLogDirSuffix);\r\n            final RemoteIterator<FileStatus> oldUserRootDirFiles = getRemoteFiles(conf, oldPath);\r\n            allDir = combineIterators(oldUserRootDirFiles, newDirs);\r\n        } catch (FileNotFoundException e) {\r\n            return newDirs;\r\n        }\r\n    }\r\n    return allDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getSubDir",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "RemoteIterator<FileStatus> getSubDir(Configuration conf, RemoteIterator<FileStatus> rootDir) throws IOException\n{\r\n    if (rootDir.hasNext()) {\r\n        Path userPath = rootDir.next().getPath();\r\n        Path qualifiedLogDir = FileContext.getFileContext(conf).makeQualified(userPath);\r\n        return FileContext.getFileContext(qualifiedLogDir.toUri(), conf).listStatus(userPath);\r\n    } else {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "combineIterators",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "RemoteIterator<FileStatus> combineIterators(RemoteIterator<FileStatus> first, RemoteIterator<FileStatus> second)\n{\r\n    return new RemoteIterator<FileStatus>() {\r\n\r\n        @Override\r\n        public boolean hasNext() throws IOException {\r\n            return first.hasNext() || second.hasNext();\r\n        }\r\n\r\n        @Override\r\n        public FileStatus next() throws IOException {\r\n            return first.hasNext() ? first.next() : second.next();\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FailApplicationAttemptRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationAttemptId != null) {\r\n        builder.setApplicationAttemptId(convertToProtoFormat(this.applicationAttemptId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = FailApplicationAttemptRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    FailApplicationAttemptRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.applicationAttemptId != null) {\r\n        return this.applicationAttemptId;\r\n    }\r\n    if (!p.hasApplicationAttemptId()) {\r\n        return null;\r\n    }\r\n    this.applicationAttemptId = convertFromProtoFormat(p.getApplicationAttemptId());\r\n    return this.applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationAttemptId(ApplicationAttemptId applicationAttemptId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationAttemptId == null)\r\n        builder.clearApplicationAttemptId();\r\n    this.applicationAttemptId = applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptIdPBImpl convertFromProtoFormat(ApplicationAttemptIdProto p)\n{\r\n    return new ApplicationAttemptIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptIdProto convertToProtoFormat(ApplicationAttemptId t)\n{\r\n    return ((ApplicationAttemptIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationReport> getApplicationList()\n{\r\n    initLocalApplicationsList();\r\n    return this.applicationList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationList(List<ApplicationReport> applications)\n{\r\n    maybeInitBuilder();\r\n    if (applications == null)\r\n        builder.clearApplications();\r\n    this.applicationList = applications;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationsResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationList != null) {\r\n        addLocalApplicationsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetApplicationsResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalApplicationsList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalApplicationsList()\n{\r\n    if (this.applicationList != null) {\r\n        return;\r\n    }\r\n    GetApplicationsResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ApplicationReportProto> list = p.getApplicationsList();\r\n    applicationList = new ArrayList<ApplicationReport>();\r\n    for (ApplicationReportProto a : list) {\r\n        applicationList.add(convertFromProtoFormat(a));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalApplicationsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addLocalApplicationsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearApplications();\r\n    if (applicationList == null)\r\n        return;\r\n    Iterable<ApplicationReportProto> iterable = new Iterable<ApplicationReportProto>() {\r\n\r\n        @Override\r\n        public Iterator<ApplicationReportProto> iterator() {\r\n            return new Iterator<ApplicationReportProto>() {\r\n\r\n                Iterator<ApplicationReport> iter = applicationList.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ApplicationReportProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllApplications(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationReportPBImpl convertFromProtoFormat(ApplicationReportProto p)\n{\r\n    return new ApplicationReportPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationReportProto convertToProtoFormat(ApplicationReport t)\n{\r\n    return ((ApplicationReportPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationUpdateResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RemoveFromClusterNodeLabelsResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getCapability()\n{\r\n    if (this.capability != null) {\r\n        return this.capability;\r\n    }\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasCapability()) {\r\n        return null;\r\n    }\r\n    this.capability = convertFromProtoFormat(p.getCapability());\r\n    return this.capability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getHealthReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getHealthReport()\n{\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getHealthReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setHealthReport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHealthReport(String healthReport)\n{\r\n    maybeInitBuilder();\r\n    if (healthReport == null) {\r\n        builder.clearHealthReport();\r\n        return;\r\n    }\r\n    builder.setHealthReport(healthReport);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getLastHealthReportTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getLastHealthReportTime()\n{\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getLastHealthReportTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setLastHealthReportTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLastHealthReportTime(long lastHealthReportTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setLastHealthReportTime(lastHealthReportTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getHttpAddress()\n{\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasHttpAddress()) ? p.getHttpAddress() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getNumContainers()\n{\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasNumContainers()) ? p.getNumContainers() : 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRackName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRackName()\n{\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasRackName()) ? p.getRackName() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getUsed",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getUsed()\n{\r\n    if (this.used != null) {\r\n        return this.used;\r\n    }\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasUsed()) {\r\n        return null;\r\n    }\r\n    this.used = convertFromProtoFormat(p.getUsed());\r\n    return this.used;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    if (this.nodeId != null) {\r\n        return this.nodeId;\r\n    }\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeId()) {\r\n        return null;\r\n    }\r\n    this.nodeId = convertFromProtoFormat(p.getNodeId());\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeId(NodeId nodeId)\n{\r\n    maybeInitBuilder();\r\n    if (nodeId == null) {\r\n        builder.clearNodeId();\r\n    }\r\n    this.nodeId = nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNodeState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeState getNodeState()\n{\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeState()) {\r\n        return null;\r\n    }\r\n    return ProtoUtils.convertFromProtoFormat(p.getNodeState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNodeState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeState(NodeState nodeState)\n{\r\n    maybeInitBuilder();\r\n    if (nodeState == null) {\r\n        builder.clearNodeState();\r\n        return;\r\n    }\r\n    builder.setNodeState(ProtoUtils.convertToProtoFormat(nodeState));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCapability(Resource capability)\n{\r\n    maybeInitBuilder();\r\n    if (capability == null) {\r\n        builder.clearCapability();\r\n    }\r\n    this.capability = capability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHttpAddress(String httpAddress)\n{\r\n    maybeInitBuilder();\r\n    if (httpAddress == null) {\r\n        builder.clearHttpAddress();\r\n        return;\r\n    }\r\n    builder.setHttpAddress(httpAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumContainers",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNumContainers(int numContainers)\n{\r\n    maybeInitBuilder();\r\n    if (numContainers == 0) {\r\n        builder.clearNumContainers();\r\n        return;\r\n    }\r\n    builder.setNumContainers(numContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setRackName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRackName(String rackName)\n{\r\n    maybeInitBuilder();\r\n    if (rackName == null) {\r\n        builder.clearRackName();\r\n        return;\r\n    }\r\n    builder.setRackName(rackName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setUsed",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUsed(Resource used)\n{\r\n    maybeInitBuilder();\r\n    if (used == null) {\r\n        builder.clearUsed();\r\n    }\r\n    this.used = used;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeReportProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodeId != null && !((NodeIdPBImpl) this.nodeId).getProto().equals(builder.getNodeId())) {\r\n        builder.setNodeId(convertToProtoFormat(this.nodeId));\r\n    }\r\n    if (this.used != null) {\r\n        builder.setUsed(convertToProtoFormat(this.used));\r\n    }\r\n    if (this.capability != null) {\r\n        builder.setCapability(convertToProtoFormat(this.capability));\r\n    }\r\n    if (this.labels != null) {\r\n        builder.clearNodeLabels();\r\n        builder.addAllNodeLabels(this.labels);\r\n    }\r\n    if (this.nodeAttributes != null) {\r\n        builder.clearNodeAttributes();\r\n        List<NodeAttributeProto> attrList = new ArrayList<>();\r\n        for (NodeAttribute attr : this.nodeAttributes) {\r\n            attrList.add(convertToProtoFormat(attr));\r\n        }\r\n        builder.addAllNodeAttributes(attrList);\r\n    }\r\n    if (this.nodeUtilization != null && !((ResourceUtilizationPBImpl) this.nodeUtilization).getProto().equals(builder.getNodeUtilization())) {\r\n        builder.setNodeUtilization(convertToProtoFormat(this.nodeUtilization));\r\n    }\r\n    if (this.containersUtilization != null && !((ResourceUtilizationPBImpl) this.containersUtilization).getProto().equals(builder.getContainersUtilization())) {\r\n        builder.setContainersUtilization(convertToProtoFormat(this.containersUtilization));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NodeReportProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeIdPBImpl convertFromProtoFormat(NodeIdProto p)\n{\r\n    return new NodeIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId nodeId)\n{\r\n    return ((NodeIdPBImpl) nodeId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeProto convertToProtoFormat(NodeAttribute nodeAttr)\n{\r\n    return ((NodeAttributePBImpl) nodeAttr).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeAttributePBImpl convertFromProtoFormat(NodeAttributeProto nodeAttr)\n{\r\n    return new NodeAttributePBImpl(nodeAttr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource r)\n{\r\n    return ProtoUtils.convertToProtoFormat(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceUtilizationPBImpl convertFromProtoFormat(ResourceUtilizationProto p)\n{\r\n    return new ResourceUtilizationPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceUtilizationProto convertToProtoFormat(ResourceUtilization r)\n{\r\n    return ((ResourceUtilizationPBImpl) r).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getNodeLabels()\n{\r\n    initNodeLabels();\r\n    return this.labels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeLabels(Set<String> nodeLabels)\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeLabels();\r\n    this.labels = nodeLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initNodeLabels()\n{\r\n    if (this.labels != null) {\r\n        return;\r\n    }\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.labels = new HashSet<String>();\r\n    this.labels.addAll(p.getNodeLabelsList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAggregatedContainersUtilization",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceUtilization getAggregatedContainersUtilization()\n{\r\n    if (this.containersUtilization != null) {\r\n        return this.containersUtilization;\r\n    }\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainersUtilization()) {\r\n        return null;\r\n    }\r\n    this.containersUtilization = convertFromProtoFormat(p.getContainersUtilization());\r\n    return this.containersUtilization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAggregatedContainersUtilization",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAggregatedContainersUtilization(ResourceUtilization containersResourceUtilization)\n{\r\n    maybeInitBuilder();\r\n    if (containersResourceUtilization == null) {\r\n        builder.clearContainersUtilization();\r\n    }\r\n    this.containersUtilization = containersResourceUtilization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNodeUtilization",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceUtilization getNodeUtilization()\n{\r\n    if (this.nodeUtilization != null) {\r\n        return this.nodeUtilization;\r\n    }\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeUtilization()) {\r\n        return null;\r\n    }\r\n    this.nodeUtilization = convertFromProtoFormat(p.getNodeUtilization());\r\n    return this.nodeUtilization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNodeUtilization",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeUtilization(ResourceUtilization nodeResourceUtilization)\n{\r\n    maybeInitBuilder();\r\n    if (nodeResourceUtilization == null) {\r\n        builder.clearNodeUtilization();\r\n    }\r\n    this.nodeUtilization = nodeResourceUtilization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getDecommissioningTimeout",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Integer getDecommissioningTimeout()\n{\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasDecommissioningTimeout()) ? p.getDecommissioningTimeout() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setDecommissioningTimeout",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDecommissioningTimeout(Integer decommissioningTimeout)\n{\r\n    maybeInitBuilder();\r\n    if (decommissioningTimeout == null || decommissioningTimeout < 0) {\r\n        builder.clearDecommissioningTimeout();\r\n        return;\r\n    }\r\n    builder.setDecommissioningTimeout(decommissioningTimeout);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNodeUpdateType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeUpdateType getNodeUpdateType()\n{\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasNodeUpdateType()) ? ProtoUtils.convertFromProtoFormat(p.getNodeUpdateType()) : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNodeUpdateType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeUpdateType(NodeUpdateType nodeUpdateType)\n{\r\n    maybeInitBuilder();\r\n    if (nodeUpdateType == null) {\r\n        builder.clearNodeUpdateType();\r\n        return;\r\n    }\r\n    builder.setNodeUpdateType(ProtoUtils.convertToProtoFormat(nodeUpdateType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeAttributes(Set<NodeAttribute> nodeAttrs)\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeAttributes();\r\n    this.nodeAttributes = nodeAttrs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<NodeAttribute> getNodeAttributes()\n{\r\n    if (nodeAttributes != null) {\r\n        return nodeAttributes;\r\n    }\r\n    NodeReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.nodeAttributes = new HashSet<>();\r\n    for (NodeAttributeProto nattrProto : p.getNodeAttributesList()) {\r\n        nodeAttributes.add(convertFromProtoFormat(nattrProto));\r\n    }\r\n    return nodeAttributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceUtilizationProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ResourceUtilizationProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPhysicalMemory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getPhysicalMemory()\n{\r\n    ResourceUtilizationProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getPmem());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPhysicalMemory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPhysicalMemory(int pmem)\n{\r\n    maybeInitBuilder();\r\n    builder.setPmem(pmem);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getVirtualMemory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getVirtualMemory()\n{\r\n    ResourceUtilizationProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getVmem();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setVirtualMemory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setVirtualMemory(int vmem)\n{\r\n    maybeInitBuilder();\r\n    builder.setVmem(vmem);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCPU",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getCPU()\n{\r\n    ResourceUtilizationProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getCpu();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCPU",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCPU(float cpu)\n{\r\n    maybeInitBuilder();\r\n    builder.setCpu(cpu);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCustomResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getCustomResource(String resourceName)\n{\r\n    return getCustomResources().get(resourceName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCustomResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Float> getCustomResources()\n{\r\n    ResourceUtilizationProtoOrBuilder p = viaProto ? proto : builder;\r\n    return ProtoUtils.convertStringFloatMapProtoListToMap(p.getCustomResourcesList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCustomResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCustomResources(Map<String, Float> customResources)\n{\r\n    if (customResources != null) {\r\n        maybeInitBuilder();\r\n        builder.addAllCustomResources(ProtoUtils.convertMapToStringFloatMapProtoList(customResources));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int compareTo(ResourceUtilization other)\n{\r\n    int diff = this.getPhysicalMemory() - other.getPhysicalMemory();\r\n    if (diff == 0) {\r\n        diff = this.getVirtualMemory() - other.getVirtualMemory();\r\n        if (diff == 0) {\r\n            diff = Float.compare(this.getCPU(), other.getCPU());\r\n            if (diff == 0) {\r\n                diff = this.getCustomResources().size() - other.getCustomResources().size();\r\n            }\r\n        }\r\n    }\r\n    return diff;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getAttribute",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeAttribute getAttribute()\n{\r\n    return attribute;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "setAttribute",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAttribute(NodeAttribute attribute)\n{\r\n    this.attribute = attribute;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getAttributeType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeType getAttributeType()\n{\r\n    return attribute.getAttributeType();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "addNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addNode(String node, AttributeValue attributeValue)\n{\r\n    nodes.put(node, attributeValue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "removeNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeNode(String node)\n{\r\n    nodes.remove(node);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getAssociatedNodeIds",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, AttributeValue> getAssociatedNodeIds()\n{\r\n    return new HashMap<String, AttributeValue>(nodes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return attribute.hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    RMNodeAttribute other = (RMNodeAttribute) obj;\r\n    if (attribute == null) {\r\n        if (other.attribute != null) {\r\n            return false;\r\n        }\r\n    } else if (!attribute.equals(other.attribute)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetAllResourceTypeInfoRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetClusterMetricsRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLowerCaseConfig",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initLowerCaseConfig()\n{\r\n    if (forceLowerCaseTags == null) {\r\n        Configuration conf = new Configuration();\r\n        forceLowerCaseTags = conf.getBoolean(APPLICATION_TAG_FORCE_LOWERCASE_CONVERSION, DEFAULT_APPLICATION_TAG_FORCE_LOWERCASE_CONVERSION);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationsRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (applicationTypes != null && !applicationTypes.isEmpty()) {\r\n        builder.clearApplicationTypes();\r\n        builder.addAllApplicationTypes(applicationTypes);\r\n    }\r\n    if (applicationStates != null && !applicationStates.isEmpty()) {\r\n        builder.clearApplicationStates();\r\n        applicationStates.forEach(input -> builder.addApplicationStates(ProtoUtils.convertToProtoFormat(input)));\r\n    }\r\n    if (applicationTags != null && !applicationTags.isEmpty()) {\r\n        builder.clearApplicationTags();\r\n        builder.addAllApplicationTags(this.applicationTags);\r\n    }\r\n    if (scope != null) {\r\n        builder.setScope(ProtoUtils.convertToProtoFormat(scope));\r\n    }\r\n    if (start != null) {\r\n        builder.setStartBegin(start.getMinimum());\r\n        builder.setStartEnd(start.getMaximum());\r\n    }\r\n    if (finish != null) {\r\n        builder.setFinishBegin(finish.getMinimum());\r\n        builder.setFinishEnd(finish.getMaximum());\r\n    }\r\n    if (limit != Long.MAX_VALUE) {\r\n        builder.setLimit(limit);\r\n    }\r\n    if (users != null && !users.isEmpty()) {\r\n        builder.clearUsers();\r\n        builder.addAllUsers(users);\r\n    }\r\n    if (queues != null && !queues.isEmpty()) {\r\n        builder.clearQueues();\r\n        builder.addAllQueues(queues);\r\n    }\r\n    if (name != null) {\r\n        builder.setName(name);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetApplicationsRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initApplicationTypes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initApplicationTypes()\n{\r\n    if (this.applicationTypes != null) {\r\n        return;\r\n    }\r\n    GetApplicationsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<String> appTypeList = p.getApplicationTypesList();\r\n    this.applicationTypes = new HashSet<String>();\r\n    this.applicationTypes.addAll(appTypeList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initApplicationStates",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initApplicationStates()\n{\r\n    if (this.applicationStates != null) {\r\n        return;\r\n    }\r\n    GetApplicationsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<YarnApplicationStateProto> appStatesList = p.getApplicationStatesList();\r\n    this.applicationStates = EnumSet.noneOf(YarnApplicationState.class);\r\n    for (YarnApplicationStateProto c : appStatesList) {\r\n        this.applicationStates.add(ProtoUtils.convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initUsers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initUsers()\n{\r\n    if (this.users != null) {\r\n        return;\r\n    }\r\n    GetApplicationsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<String> usersList = p.getUsersList();\r\n    this.users = new HashSet<String>();\r\n    this.users.addAll(usersList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initQueues",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initQueues()\n{\r\n    if (this.queues != null) {\r\n        return;\r\n    }\r\n    GetApplicationsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<String> queuesList = p.getQueuesList();\r\n    this.queues = new HashSet<String>();\r\n    this.queues.addAll(queuesList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationTypes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getApplicationTypes()\n{\r\n    initApplicationTypes();\r\n    return this.applicationTypes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationTypes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationTypes(Set<String> applicationTypes)\n{\r\n    maybeInitBuilder();\r\n    if (applicationTypes == null)\r\n        builder.clearApplicationTypes();\r\n    this.applicationTypes = applicationTypes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initApplicationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initApplicationTags()\n{\r\n    if (this.applicationTags != null) {\r\n        return;\r\n    }\r\n    GetApplicationsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.applicationTags = new HashSet<String>();\r\n    this.applicationTags.addAll(p.getApplicationTagsList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getApplicationTags()\n{\r\n    initApplicationTags();\r\n    return this.applicationTags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationTags",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setApplicationTags(Set<String> tags)\n{\r\n    maybeInitBuilder();\r\n    if (tags == null || tags.isEmpty()) {\r\n        builder.clearApplicationTags();\r\n        this.applicationTags = null;\r\n        return;\r\n    }\r\n    this.applicationTags = new HashSet<String>();\r\n    for (String tag : tags) {\r\n        this.applicationTags.add(forceLowerCaseTags ? StringUtils.toLowerCase(tag) : tag);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationStates",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "EnumSet<YarnApplicationState> getApplicationStates()\n{\r\n    initApplicationStates();\r\n    return this.applicationStates;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initScope",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initScope()\n{\r\n    if (this.scope != null) {\r\n        return;\r\n    }\r\n    GetApplicationsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.scope = ProtoUtils.convertFromProtoFormat(p.getScope());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getScope",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationsRequestScope getScope()\n{\r\n    initScope();\r\n    return this.scope;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setScope",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setScope(ApplicationsRequestScope scope)\n{\r\n    maybeInitBuilder();\r\n    if (scope == null) {\r\n        builder.clearScope();\r\n    }\r\n    this.scope = scope;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationStates",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationStates(EnumSet<YarnApplicationState> applicationStates)\n{\r\n    maybeInitBuilder();\r\n    if (applicationStates == null) {\r\n        builder.clearApplicationStates();\r\n    }\r\n    this.applicationStates = applicationStates;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationStates",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setApplicationStates(Set<String> applicationStates)\n{\r\n    EnumSet<YarnApplicationState> appStates = null;\r\n    for (YarnApplicationState state : YarnApplicationState.values()) {\r\n        if (applicationStates.contains(StringUtils.toLowerCase(state.name()))) {\r\n            if (appStates == null) {\r\n                appStates = EnumSet.of(state);\r\n            } else {\r\n                appStates.add(state);\r\n            }\r\n        }\r\n    }\r\n    setApplicationStates(appStates);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getUsers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getUsers()\n{\r\n    initUsers();\r\n    return this.users;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setUsers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUsers(Set<String> users)\n{\r\n    maybeInitBuilder();\r\n    if (users == null) {\r\n        builder.clearUsers();\r\n    }\r\n    this.users = users;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getQueues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getQueues()\n{\r\n    initQueues();\r\n    return this.queues;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setQueues",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setQueues(Set<String> queues)\n{\r\n    maybeInitBuilder();\r\n    if (queues == null) {\r\n        builder.clearQueues();\r\n    }\r\n    this.queues = queues;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLimit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getLimit()\n{\r\n    if (this.limit == Long.MAX_VALUE) {\r\n        GetApplicationsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n        this.limit = p.hasLimit() ? p.getLimit() : Long.MAX_VALUE;\r\n    }\r\n    return this.limit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLimit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setLimit(long limit)\n{\r\n    maybeInitBuilder();\r\n    this.limit = limit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getStartRange",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Range<Long> getStartRange()\n{\r\n    if (this.start == null) {\r\n        GetApplicationsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n        if (p.hasStartBegin() || p.hasStartEnd()) {\r\n            long begin = p.hasStartBegin() ? p.getStartBegin() : 0L;\r\n            long end = p.hasStartEnd() ? p.getStartEnd() : Long.MAX_VALUE;\r\n            this.start = Range.between(begin, end);\r\n        }\r\n    }\r\n    return this.start;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setStartRange",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setStartRange(Range<Long> range)\n{\r\n    this.start = range;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setStartRange",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setStartRange(long begin, long end) throws IllegalArgumentException\n{\r\n    if (begin > end) {\r\n        throw new IllegalArgumentException(\"begin > end in range (begin, \" + \"end): (\" + begin + \", \" + end + \")\");\r\n    }\r\n    this.start = Range.between(begin, end);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFinishRange",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Range<Long> getFinishRange()\n{\r\n    if (this.finish == null) {\r\n        GetApplicationsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n        if (p.hasFinishBegin() || p.hasFinishEnd()) {\r\n            long begin = p.hasFinishBegin() ? p.getFinishBegin() : 0L;\r\n            long end = p.hasFinishEnd() ? p.getFinishEnd() : Long.MAX_VALUE;\r\n            this.finish = Range.between(begin, end);\r\n        }\r\n    }\r\n    return this.finish;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFinishRange",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFinishRange(Range<Long> range)\n{\r\n    this.finish = range;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFinishRange",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setFinishRange(long begin, long end)\n{\r\n    if (begin > end) {\r\n        throw new IllegalArgumentException(\"begin > end in range (begin, \" + \"end): (\" + begin + \", \" + end + \")\");\r\n    }\r\n    this.finish = Range.between(begin, end);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getName()\n{\r\n    GetApplicationsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.name != null) {\r\n        return this.name;\r\n    }\r\n    if (p.hasName()) {\r\n        this.name = p.getName();\r\n    }\r\n    return this.name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setName(String name)\n{\r\n    maybeInitBuilder();\r\n    if (name == null) {\r\n        builder.clearName();\r\n    }\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setForceLowerCaseTags",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setForceLowerCaseTags(boolean convert)\n{\r\n    GetApplicationsRequestPBImpl.forceLowerCaseTags = convert;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "KillApplicationResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = KillApplicationResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getIsKillCompleted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getIsKillCompleted()\n{\r\n    KillApplicationResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getIsKillCompleted();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setIsKillCompleted",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setIsKillCompleted(boolean isKillCompleted)\n{\r\n    maybeInitBuilder();\r\n    builder.setIsKillCompleted(isKillCompleted);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UseSharedCacheResourceResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getPath()\n{\r\n    UseSharedCacheResourceResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasPath()) ? p.getPath() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setPath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setPath(String path)\n{\r\n    maybeInitBuilder();\r\n    if (path == null) {\r\n        builder.clearPath();\r\n        return;\r\n    }\r\n    builder.setPath(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = UseSharedCacheResourceResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getApplicationReport",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationReportResponseProto getApplicationReport(RpcController arg0, GetApplicationReportRequestProto proto) throws ServiceException\n{\r\n    GetApplicationReportRequestPBImpl request = new GetApplicationReportRequestPBImpl(proto);\r\n    try {\r\n        GetApplicationReportResponse response = real.getApplicationReport(request);\r\n        return ((GetApplicationReportResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getApplications",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationsResponseProto getApplications(RpcController controller, GetApplicationsRequestProto proto) throws ServiceException\n{\r\n    GetApplicationsRequestPBImpl request = new GetApplicationsRequestPBImpl(proto);\r\n    try {\r\n        GetApplicationsResponse response = real.getApplications(request);\r\n        return ((GetApplicationsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getApplicationAttemptReport",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationAttemptReportResponseProto getApplicationAttemptReport(RpcController controller, GetApplicationAttemptReportRequestProto proto) throws ServiceException\n{\r\n    GetApplicationAttemptReportRequestPBImpl request = new GetApplicationAttemptReportRequestPBImpl(proto);\r\n    try {\r\n        GetApplicationAttemptReportResponse response = real.getApplicationAttemptReport(request);\r\n        return ((GetApplicationAttemptReportResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getApplicationAttempts",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationAttemptsResponseProto getApplicationAttempts(RpcController controller, GetApplicationAttemptsRequestProto proto) throws ServiceException\n{\r\n    GetApplicationAttemptsRequestPBImpl request = new GetApplicationAttemptsRequestPBImpl(proto);\r\n    try {\r\n        GetApplicationAttemptsResponse response = real.getApplicationAttempts(request);\r\n        return ((GetApplicationAttemptsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getContainerReport",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetContainerReportResponseProto getContainerReport(RpcController controller, GetContainerReportRequestProto proto) throws ServiceException\n{\r\n    GetContainerReportRequestPBImpl request = new GetContainerReportRequestPBImpl(proto);\r\n    try {\r\n        GetContainerReportResponse response = real.getContainerReport(request);\r\n        return ((GetContainerReportResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getContainers",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetContainersResponseProto getContainers(RpcController controller, GetContainersRequestProto proto) throws ServiceException\n{\r\n    GetContainersRequestPBImpl request = new GetContainersRequestPBImpl(proto);\r\n    try {\r\n        GetContainersResponse response = real.getContainers(request);\r\n        return ((GetContainersResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getDelegationToken",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetDelegationTokenResponseProto getDelegationToken(RpcController controller, GetDelegationTokenRequestProto proto) throws ServiceException\n{\r\n    GetDelegationTokenRequestPBImpl request = new GetDelegationTokenRequestPBImpl(proto);\r\n    try {\r\n        GetDelegationTokenResponse response = real.getDelegationToken(request);\r\n        return ((GetDelegationTokenResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "renewDelegationToken",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RenewDelegationTokenResponseProto renewDelegationToken(RpcController controller, RenewDelegationTokenRequestProto proto) throws ServiceException\n{\r\n    RenewDelegationTokenRequestPBImpl request = new RenewDelegationTokenRequestPBImpl(proto);\r\n    try {\r\n        RenewDelegationTokenResponse response = real.renewDelegationToken(request);\r\n        return ((RenewDelegationTokenResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "cancelDelegationToken",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CancelDelegationTokenResponseProto cancelDelegationToken(RpcController controller, CancelDelegationTokenRequestProto proto) throws ServiceException\n{\r\n    CancelDelegationTokenRequestPBImpl request = new CancelDelegationTokenRequestPBImpl(proto);\r\n    try {\r\n        CancelDelegationTokenResponse response = real.cancelDelegationToken(request);\r\n        return ((CancelDelegationTokenResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initialize(Configuration conf, String controllerName)\n{\r\n    this.conf = conf;\r\n    int configuredRetentionSize = conf.getInt(YarnConfiguration.NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP, YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP);\r\n    if (configuredRetentionSize <= 0) {\r\n        this.retentionSize = YarnConfiguration.DEFAULT_NM_LOG_AGGREGATION_NUM_LOG_FILES_SIZE_PER_APP;\r\n    } else {\r\n        this.retentionSize = configuredRetentionSize;\r\n    }\r\n    this.fileControllerName = controllerName;\r\n    extractRemoteRootLogDir();\r\n    extractRemoteRootLogDirSuffix();\r\n    initInternal(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "initInternal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initInternal(Configuration conf)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getRemoteRootLogDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getRemoteRootLogDir()\n{\r\n    return this.remoteRootLogDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getRemoteRootLogDirSuffix",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRemoteRootLogDirSuffix()\n{\r\n    return this.remoteRootLogDirSuffix;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getFileControllerName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFileControllerName()\n{\r\n    return this.fileControllerName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "initializeWriter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initializeWriter(LogAggregationFileControllerContext context) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "closeWriter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void closeWriter() throws LogAggregationDFSException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void write(LogKey logKey, LogValue logValue) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "postWrite",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void postWrite(LogAggregationFileControllerContext record) throws Exception",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "closePrintStream",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void closePrintStream(OutputStream out)\n{\r\n    if (out != System.out) {\r\n        IOUtils.cleanupWithLogger(LOG, out);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "readAggregatedLogs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean readAggregatedLogs(ContainerLogsRequest logRequest, OutputStream os) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "readAggregatedLogsMeta",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ContainerLogMeta> readAggregatedLogsMeta(ContainerLogsRequest logRequest) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getLogMetaFilesOfNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, List<ContainerLogFileInfo>> getLogMetaFilesOfNode(ExtendedLogMetaRequest logRequest, FileStatus currentNodeFile, ApplicationId appId) throws IOException\n{\r\n    LOG.info(\"User aggregated complex log queries \" + \"are not implemented for this file controller\");\r\n    return Collections.emptyMap();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getApplicationDirectoriesOfUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RemoteIterator<FileStatus> getApplicationDirectoriesOfUser(String user) throws IOException\n{\r\n    return LogAggregationUtils.getUserRemoteLogDir(conf, user, getRemoteRootLogDir(), getRemoteRootLogDirSuffix());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getNodeFilesOfApplicationDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RemoteIterator<FileStatus> getNodeFilesOfApplicationDirectory(FileStatus appDir) throws IOException\n{\r\n    return LogAggregationUtils.getRemoteFiles(conf, appDir.getPath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "renderAggregatedLogsBlock",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void renderAggregatedLogsBlock(Block html, ViewContext context)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getApplicationOwner",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getApplicationOwner(Path aggregatedLogPath, ApplicationId appId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getApplicationAcls",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<ApplicationAccessType, String> getApplicationAcls(Path aggregatedLogPath, ApplicationId appId) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "extractRemoteRootLogDirSuffix",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void extractRemoteRootLogDirSuffix()\n{\r\n    String suffix = String.format(YarnConfiguration.LOG_AGGREGATION_REMOTE_APP_LOG_DIR_SUFFIX_FMT, fileControllerName);\r\n    remoteRootLogDirSuffix = conf.get(suffix);\r\n    if (remoteRootLogDirSuffix == null || remoteRootLogDirSuffix.isEmpty()) {\r\n        remoteRootLogDirSuffix = conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_SUFFIX, YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR_SUFFIX) + \"-\" + fileControllerName.toLowerCase();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "extractRemoteRootLogDir",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void extractRemoteRootLogDir()\n{\r\n    String remoteDirStr = String.format(YarnConfiguration.LOG_AGGREGATION_REMOTE_APP_LOG_DIR_FMT, fileControllerName);\r\n    String remoteDir = conf.get(remoteDirStr);\r\n    if (remoteDir == null || remoteDir.isEmpty()) {\r\n        remoteDir = conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR, YarnConfiguration.DEFAULT_NM_REMOTE_APP_LOG_DIR);\r\n    }\r\n    remoteRootLogDir = new Path(remoteDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "verifyAndCreateRemoteLogDir",
  "errType" : [ "IOException", "FileNotFoundException", "IOException", "UnsupportedOperationException", "IOException", "IOException", "IOException", "UnsupportedOperationException", "IOException", "UnsupportedOperationException" ],
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void verifyAndCreateRemoteLogDir()\n{\r\n    FileSystem remoteFS = null;\r\n    try {\r\n        remoteFS = getFileSystem(conf);\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(\"Unable to get Remote FileSystem instance\", e);\r\n    }\r\n    boolean remoteExists = true;\r\n    Path remoteRootLogDir = getRemoteRootLogDir();\r\n    try {\r\n        FsPermission perms = remoteFS.getFileStatus(remoteRootLogDir).getPermission();\r\n        if (!perms.equals(TLDIR_PERMISSIONS)) {\r\n            LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir + \"] already exist, but with incorrect permissions. \" + \"Expected: [\" + TLDIR_PERMISSIONS + \"], Found: [\" + perms + \"].\" + \" The cluster may have problems with multiple users.\");\r\n        }\r\n    } catch (FileNotFoundException e) {\r\n        remoteExists = false;\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(\"Failed to check permissions for dir [\" + remoteRootLogDir + \"]\", e);\r\n    }\r\n    Path qualified = remoteRootLogDir.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory());\r\n    if (!remoteExists) {\r\n        LOG.warn(\"Remote Root Log Dir [\" + remoteRootLogDir + \"] does not exist. Attempting to create it.\");\r\n        try {\r\n            remoteFS.mkdirs(qualified, new FsPermission(TLDIR_PERMISSIONS));\r\n            try {\r\n                remoteFS.setPermission(qualified, new FsPermission(TLDIR_PERMISSIONS));\r\n            } catch (UnsupportedOperationException use) {\r\n                LOG.info(\"Unable to set permissions for configured filesystem since\" + \" it does not support this {}\", remoteFS.getScheme());\r\n                fsSupportsChmod = false;\r\n            }\r\n            UserGroupInformation loginUser = UserGroupInformation.getLoginUser();\r\n            String primaryGroupName = conf.get(YarnConfiguration.NM_REMOTE_APP_LOG_DIR_GROUPNAME);\r\n            if (primaryGroupName == null || primaryGroupName.isEmpty()) {\r\n                try {\r\n                    primaryGroupName = loginUser.getPrimaryGroupName();\r\n                } catch (IOException e) {\r\n                    LOG.warn(\"No primary group found. The remote root log directory\" + \" will be created with the HDFS superuser being its \" + \"group owner. JobHistoryServer may be unable to read \" + \"the directory.\");\r\n                }\r\n            } else {\r\n                if (LOG.isDebugEnabled()) {\r\n                    LOG.debug(\"The group of remote root log directory has been \" + \"determined by the configuration and set to \" + primaryGroupName);\r\n                }\r\n            }\r\n            if (primaryGroupName != null) {\r\n                try {\r\n                    remoteFS.setOwner(qualified, loginUser.getShortUserName(), primaryGroupName);\r\n                } catch (UnsupportedOperationException use) {\r\n                    LOG.info(\"File System does not support setting user/group\" + remoteFS.getScheme(), use);\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            throw new YarnRuntimeException(\"Failed to create remoteLogDir [\" + remoteRootLogDir + \"]\", e);\r\n        }\r\n    } else {\r\n        Path permissionCheckFile = new Path(qualified, String.format(\"%s.permission_check\", RandomStringUtils.randomAlphanumeric(8)));\r\n        try {\r\n            remoteFS.createNewFile(permissionCheckFile);\r\n            remoteFS.setPermission(permissionCheckFile, new FsPermission(TLDIR_PERMISSIONS));\r\n        } catch (UnsupportedOperationException use) {\r\n            LOG.info(\"Unable to set permissions for configured filesystem since\" + \" it does not support this {}\", remoteFS.getScheme());\r\n            fsSupportsChmod = false;\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Failed to check if FileSystem supports permissions on \" + \"remoteLogDir [\" + remoteRootLogDir + \"]\", e);\r\n        } finally {\r\n            try {\r\n                remoteFS.delete(permissionCheckFile, false);\r\n            } catch (IOException ignored) {\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 8,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "createAppDir",
  "errType" : [ "Exception", "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void createAppDir(final String user, final ApplicationId appId, UserGroupInformation userUgi)\n{\r\n    final Path remoteRootLogDir = getRemoteRootLogDir();\r\n    final String remoteRootLogDirSuffix = getRemoteRootLogDirSuffix();\r\n    try {\r\n        userUgi.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n            @Override\r\n            public Object run() throws Exception {\r\n                try {\r\n                    FileSystem remoteFS = getFileSystem(conf);\r\n                    Path appDir = LogAggregationUtils.getRemoteAppLogDir(remoteRootLogDir, appId, user, remoteRootLogDirSuffix);\r\n                    Path curDir = appDir.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory());\r\n                    Path rootLogDir = remoteRootLogDir.makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory());\r\n                    LinkedList<Path> pathsToCreate = new LinkedList<>();\r\n                    while (!curDir.equals(rootLogDir)) {\r\n                        if (!checkExists(remoteFS, curDir, APP_DIR_PERMISSIONS)) {\r\n                            pathsToCreate.addFirst(curDir);\r\n                            curDir = curDir.getParent();\r\n                        } else {\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (Path path : pathsToCreate) {\r\n                        createDir(remoteFS, path, APP_DIR_PERMISSIONS);\r\n                    }\r\n                } catch (IOException e) {\r\n                    LOG.error(\"Failed to setup application log directory for \" + appId, e);\r\n                    throw e;\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    } catch (Exception e) {\r\n        if (e instanceof RemoteException) {\r\n            throw new YarnRuntimeException(((RemoteException) e).unwrapRemoteException(SecretManager.InvalidToken.class));\r\n        }\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getFileSystem",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileSystem getFileSystem(Configuration conf) throws IOException\n{\r\n    return getRemoteRootLogDir().getFileSystem(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "createDir",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void createDir(FileSystem fs, Path path, FsPermission fsPerm) throws IOException\n{\r\n    if (fsSupportsChmod) {\r\n        FsPermission dirPerm = new FsPermission(fsPerm);\r\n        fs.mkdirs(path, dirPerm);\r\n        FsPermission umask = FsPermission.getUMask(fs.getConf());\r\n        if (!dirPerm.equals(dirPerm.applyUMask(umask))) {\r\n            fs.setPermission(path, new FsPermission(fsPerm));\r\n        }\r\n    } else {\r\n        fs.mkdirs(path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "checkExists",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean checkExists(FileSystem fs, Path path, FsPermission fsPerm) throws IOException\n{\r\n    boolean exists = true;\r\n    try {\r\n        FileStatus appDirStatus = fs.getFileStatus(path);\r\n        if (fsSupportsChmod) {\r\n            if (!APP_DIR_PERMISSIONS.equals(appDirStatus.getPermission())) {\r\n                fs.setPermission(path, APP_DIR_PERMISSIONS);\r\n            }\r\n        }\r\n    } catch (FileNotFoundException fnfe) {\r\n        exists = false;\r\n    }\r\n    return exists;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getRemoteNodeLogFileForApp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getRemoteNodeLogFileForApp(ApplicationId appId, String user, NodeId nodeId)\n{\r\n    return LogAggregationUtils.getRemoteNodeLogFileForApp(getRemoteRootLogDir(), appId, user, nodeId, getRemoteRootLogDirSuffix());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getRemoteAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getRemoteAppLogDir(ApplicationId appId, String appOwner) throws IOException\n{\r\n    return LogAggregationUtils.getRemoteAppLogDir(conf, appId, appOwner, this.remoteRootLogDir, this.remoteRootLogDirSuffix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getOlderRemoteAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getOlderRemoteAppLogDir(ApplicationId appId, String appOwner) throws IOException\n{\r\n    return LogAggregationUtils.getOlderRemoteAppLogDir(conf, appId, appOwner, this.remoteRootLogDir, this.remoteRootLogDirSuffix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "cleanOldLogs",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void cleanOldLogs(Path remoteNodeLogFileForApp, final NodeId nodeId, UserGroupInformation userUgi)\n{\r\n    try {\r\n        final FileSystem remoteFS = remoteNodeLogFileForApp.getFileSystem(conf);\r\n        Path appDir = remoteNodeLogFileForApp.getParent().makeQualified(remoteFS.getUri(), remoteFS.getWorkingDirectory());\r\n        Set<FileStatus> status = new HashSet<FileStatus>(Arrays.asList(remoteFS.listStatus(appDir)));\r\n        status = status.stream().filter(next -> next.getPath().getName().contains(LogAggregationUtils.getNodeString(nodeId)) && !next.getPath().getName().endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)).collect(Collectors.toSet());\r\n        if (status.size() >= this.retentionSize) {\r\n            List<FileStatus> statusList = new ArrayList<FileStatus>(status);\r\n            Collections.sort(statusList, new Comparator<FileStatus>() {\r\n\r\n                public int compare(FileStatus s1, FileStatus s2) {\r\n                    return s1.getModificationTime() < s2.getModificationTime() ? -1 : s1.getModificationTime() > s2.getModificationTime() ? 1 : 0;\r\n                }\r\n            });\r\n            for (int i = 0; i <= statusList.size() - this.retentionSize; i++) {\r\n                final FileStatus remove = statusList.get(i);\r\n                try {\r\n                    userUgi.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n                        @Override\r\n                        public Object run() throws Exception {\r\n                            remoteFS.delete(remove.getPath(), false);\r\n                            return null;\r\n                        }\r\n                    });\r\n                } catch (Exception e) {\r\n                    LOG.error(\"Failed to delete \" + remove.getPath(), e);\r\n                }\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.error(\"Failed to clean old logs\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "aggregatedLogSuffix",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String aggregatedLogSuffix(String fileName)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    String endOfFile = \"End of LogType:\" + fileName;\r\n    sb.append(\"\\n\" + endOfFile + \"\\n\").append(StringUtils.repeat(\"*\", endOfFile.length() + 50) + \"\\n\\n\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "isFsSupportsChmod",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isFsSupportsChmod()\n{\r\n    return fsSupportsChmod;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "belongsToAppAttempt",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean belongsToAppAttempt(ApplicationAttemptId appAttemptId, String containerIdStr)\n{\r\n    ContainerId containerId = null;\r\n    try {\r\n        containerId = ContainerId.fromString(containerIdStr);\r\n    } catch (IllegalArgumentException exc) {\r\n        LOG.warn(\"Could not parse container id from aggregated log.\", exc);\r\n    }\r\n    if (containerId != null && containerId.getApplicationAttemptId() != null) {\r\n        return containerId.getApplicationAttemptId().equals(appAttemptId);\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "activateOptions",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void activateOptions()\n{\r\n    synchronized (this) {\r\n        setFile(new File(this.containerLogDir, containerLogFile).toString());\r\n        setAppend(true);\r\n        super.activateOptions();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void flush()\n{\r\n    if (qw != null) {\r\n        qw.flush();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getContainerLogDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerLogDir()\n{\r\n    return this.containerLogDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "setContainerLogDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerLogDir(String containerLogDir)\n{\r\n    this.containerLogDir = containerLogDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getContainerLogFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerLogFile()\n{\r\n    return containerLogFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "setContainerLogFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerLogFile(String containerLogFile)\n{\r\n    this.containerLogFile = containerLogFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceBlacklistRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ResourceBlacklistRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.blacklistAdditions != null) {\r\n        addBlacklistAdditionsToProto();\r\n    }\r\n    if (this.blacklistRemovals != null) {\r\n        addBlacklistRemovalsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addBlacklistAdditionsToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addBlacklistAdditionsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearBlacklistAdditions();\r\n    if (this.blacklistAdditions == null) {\r\n        return;\r\n    }\r\n    builder.addAllBlacklistAdditions(this.blacklistAdditions);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addBlacklistRemovalsToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addBlacklistRemovalsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearBlacklistRemovals();\r\n    if (this.blacklistRemovals == null) {\r\n        return;\r\n    }\r\n    builder.addAllBlacklistRemovals(this.blacklistRemovals);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initBlacklistAdditions",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initBlacklistAdditions()\n{\r\n    if (this.blacklistAdditions != null) {\r\n        return;\r\n    }\r\n    ResourceBlacklistRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<String> list = p.getBlacklistAdditionsList();\r\n    this.blacklistAdditions = new ArrayList<String>();\r\n    this.blacklistAdditions.addAll(list);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initBlacklistRemovals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initBlacklistRemovals()\n{\r\n    if (this.blacklistRemovals != null) {\r\n        return;\r\n    }\r\n    ResourceBlacklistRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<String> list = p.getBlacklistRemovalsList();\r\n    this.blacklistRemovals = new ArrayList<String>();\r\n    this.blacklistRemovals.addAll(list);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getBlacklistAdditions",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getBlacklistAdditions()\n{\r\n    initBlacklistAdditions();\r\n    return this.blacklistAdditions;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setBlacklistAdditions",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setBlacklistAdditions(List<String> resourceNames)\n{\r\n    if (resourceNames == null || resourceNames.isEmpty()) {\r\n        if (this.blacklistAdditions != null) {\r\n            this.blacklistAdditions.clear();\r\n        }\r\n        return;\r\n    }\r\n    initBlacklistAdditions();\r\n    this.blacklistAdditions.clear();\r\n    this.blacklistAdditions.addAll(resourceNames);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getBlacklistRemovals",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getBlacklistRemovals()\n{\r\n    initBlacklistRemovals();\r\n    return this.blacklistRemovals;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setBlacklistRemovals",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setBlacklistRemovals(List<String> resourceNames)\n{\r\n    if (resourceNames == null || resourceNames.isEmpty()) {\r\n        if (this.blacklistRemovals != null) {\r\n            this.blacklistRemovals.clear();\r\n        }\r\n        return;\r\n    }\r\n    initBlacklistRemovals();\r\n    this.blacklistRemovals.clear();\r\n    this.blacklistRemovals.addAll(resourceNames);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getRMDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token getRMDelegationToken()\n{\r\n    GetDelegationTokenResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.appToken != null) {\r\n        return this.appToken;\r\n    }\r\n    if (!p.hasToken()) {\r\n        return null;\r\n    }\r\n    this.appToken = convertFromProtoFormat(p.getToken());\r\n    return this.appToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setRMDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRMDelegationToken(Token appToken)\n{\r\n    maybeInitBuilder();\r\n    if (appToken == null)\r\n        builder.clearToken();\r\n    this.appToken = appToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetDelegationTokenResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (appToken != null) {\r\n        builder.setToken(convertToProtoFormat(this.appToken));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetDelegationTokenResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenPBImpl convertFromProtoFormat(TokenProto p)\n{\r\n    return new TokenPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token t)\n{\r\n    return ((TokenPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    if (this.ApplicationAttemptId != null) {\r\n        return this.ApplicationAttemptId;\r\n    }\r\n    ApplicationAttemptReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationAttemptId()) {\r\n        return null;\r\n    }\r\n    this.ApplicationAttemptId = convertFromProtoFormat(p.getApplicationAttemptId());\r\n    return this.ApplicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getHost()\n{\r\n    ApplicationAttemptReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasHost()) {\r\n        return null;\r\n    }\r\n    return p.getHost();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRpcPort",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getRpcPort()\n{\r\n    ApplicationAttemptReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getRpcPort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getTrackingUrl()\n{\r\n    ApplicationAttemptReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasTrackingUrl()) {\r\n        return null;\r\n    }\r\n    return p.getTrackingUrl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getOriginalTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getOriginalTrackingUrl()\n{\r\n    ApplicationAttemptReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasOriginalTrackingUrl()) {\r\n        return null;\r\n    }\r\n    return p.getOriginalTrackingUrl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDiagnostics()\n{\r\n    ApplicationAttemptReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDiagnostics()) {\r\n        return null;\r\n    }\r\n    return p.getDiagnostics();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getYarnApplicationAttemptState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnApplicationAttemptState getYarnApplicationAttemptState()\n{\r\n    ApplicationAttemptReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasYarnApplicationAttemptState()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getYarnApplicationAttemptState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setYarnApplicationAttemptState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setYarnApplicationAttemptState(YarnApplicationAttemptState state)\n{\r\n    maybeInitBuilder();\r\n    if (state == null) {\r\n        builder.clearYarnApplicationAttemptState();\r\n        return;\r\n    }\r\n    builder.setYarnApplicationAttemptState(convertToProtoFormat(state));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnApplicationAttemptStateProto convertToProtoFormat(YarnApplicationAttemptState state)\n{\r\n    return ProtoUtils.convertToProtoFormat(state);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnApplicationAttemptState convertFromProtoFormat(YarnApplicationAttemptStateProto yarnApplicationAttemptState)\n{\r\n    return ProtoUtils.convertFromProtoFormat(yarnApplicationAttemptState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationAttemptId(ApplicationAttemptId applicationAttemptId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationAttemptId == null)\r\n        builder.clearApplicationAttemptId();\r\n    this.ApplicationAttemptId = applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setHost",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHost(String host)\n{\r\n    maybeInitBuilder();\r\n    if (host == null) {\r\n        builder.clearHost();\r\n        return;\r\n    }\r\n    builder.setHost(host);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setRpcPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRpcPort(int rpcPort)\n{\r\n    maybeInitBuilder();\r\n    builder.setRpcPort(rpcPort);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setTrackingUrl(String url)\n{\r\n    maybeInitBuilder();\r\n    if (url == null) {\r\n        builder.clearTrackingUrl();\r\n        return;\r\n    }\r\n    builder.setTrackingUrl(url);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setOriginalTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setOriginalTrackingUrl(String oUrl)\n{\r\n    maybeInitBuilder();\r\n    if (oUrl == null) {\r\n        builder.clearOriginalTrackingUrl();\r\n        return;\r\n    }\r\n    builder.setOriginalTrackingUrl(oUrl);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDiagnostics(String diagnostics)\n{\r\n    maybeInitBuilder();\r\n    if (diagnostics == null) {\r\n        builder.clearDiagnostics();\r\n        return;\r\n    }\r\n    builder.setDiagnostics(diagnostics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptReportProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ApplicationAttemptReportProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.ApplicationAttemptId != null && !((ApplicationAttemptIdPBImpl) this.ApplicationAttemptId).getProto().equals(builder.getApplicationAttemptId())) {\r\n        builder.setApplicationAttemptId(convertToProtoFormat(this.ApplicationAttemptId));\r\n    }\r\n    if (this.amContainerId != null && !((ContainerIdPBImpl) this.amContainerId).getProto().equals(builder.getAmContainerId())) {\r\n        builder.setAmContainerId(convertToProtoFormat(this.amContainerId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId amContainerId)\n{\r\n    return ((ContainerIdPBImpl) amContainerId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto amContainerId)\n{\r\n    return new ContainerIdPBImpl(amContainerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptIdProto convertToProtoFormat(ApplicationAttemptId t)\n{\r\n    return ((ApplicationAttemptIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptIdPBImpl convertFromProtoFormat(ApplicationAttemptIdProto applicationAttemptId)\n{\r\n    return new ApplicationAttemptIdPBImpl(applicationAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAMContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getAMContainerId()\n{\r\n    if (this.amContainerId != null) {\r\n        return this.amContainerId;\r\n    }\r\n    ApplicationAttemptReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAmContainerId()) {\r\n        return null;\r\n    }\r\n    this.amContainerId = convertFromProtoFormat(p.getAmContainerId());\r\n    return this.amContainerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAMContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAMContainerId(ContainerId amContainerId)\n{\r\n    maybeInitBuilder();\r\n    if (amContainerId == null)\r\n        builder.clearAmContainerId();\r\n    this.amContainerId = amContainerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setStartTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setStartTime(long startTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setStartTime(startTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setFinishTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFinishTime(long finishTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setFinishTime(finishTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getStartTime()\n{\r\n    ApplicationAttemptReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getStartTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getFinishTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFinishTime()\n{\r\n    ApplicationAttemptReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getFinishTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TokenProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteBuffer convertFromProtoFormat(ByteString byteString)\n{\r\n    return ProtoUtils.convertFromProtoFormat(byteString);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteString convertToProtoFormat(ByteBuffer byteBuffer)\n{\r\n    return ProtoUtils.convertToProtoFormat(byteBuffer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.identifier != null) {\r\n        builder.setIdentifier(convertToProtoFormat(this.identifier));\r\n    }\r\n    if (this.password != null) {\r\n        builder.setPassword(convertToProtoFormat(this.password));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = TokenProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getIdentifier",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ByteBuffer getIdentifier()\n{\r\n    TokenProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.identifier != null) {\r\n        return this.identifier;\r\n    }\r\n    if (!p.hasIdentifier()) {\r\n        return null;\r\n    }\r\n    this.identifier = convertFromProtoFormat(p.getIdentifier());\r\n    return this.identifier;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setIdentifier",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setIdentifier(ByteBuffer identifier)\n{\r\n    maybeInitBuilder();\r\n    if (identifier == null)\r\n        builder.clearIdentifier();\r\n    this.identifier = identifier;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPassword",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ByteBuffer getPassword()\n{\r\n    TokenProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.password != null) {\r\n        return this.password;\r\n    }\r\n    if (!p.hasPassword()) {\r\n        return null;\r\n    }\r\n    this.password = convertFromProtoFormat(p.getPassword());\r\n    return this.password;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPassword",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPassword(ByteBuffer password)\n{\r\n    maybeInitBuilder();\r\n    if (password == null)\r\n        builder.clearPassword();\r\n    this.password = password;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getKind",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getKind()\n{\r\n    TokenProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasKind()) {\r\n        return null;\r\n    }\r\n    return (p.getKind());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setKind",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setKind(String kind)\n{\r\n    maybeInitBuilder();\r\n    if (kind == null) {\r\n        builder.clearKind();\r\n        return;\r\n    }\r\n    builder.setKind((kind));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getService()\n{\r\n    TokenProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasService()) {\r\n        return null;\r\n    }\r\n    return (p.getService());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setService",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setService(String service)\n{\r\n    maybeInitBuilder();\r\n    if (service == null) {\r\n        builder.clearService();\r\n        return;\r\n    }\r\n    builder.setService((service));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"Token { \").append(\"kind: \").append(getKind()).append(\", \").append(\"service: \").append(getService()).append(\" }\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(OutputStream os, NodeAttributesManager mgr) throws IOException\n{\r\n    ((NodesToAttributesMappingRequestPBImpl) NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.REPLACE, attributes, false)).getProto().writeDelimitedTo(os);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void recover(InputStream is, NodeAttributesManager mgr) throws IOException\n{\r\n    NodesToAttributesMappingRequest request = new NodesToAttributesMappingRequestPBImpl(YarnServerResourceManagerServiceProtos.NodesToAttributesMappingRequestProto.parseDelimitedFrom(is));\r\n    mgr.replaceNodeAttributes(NodeAttribute.PREFIX_CENTRALIZED, getNodeToAttributesMap(request));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "setAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReplaceNodeToAttributeLogOp setAttributes(List<NodeToAttributes> attrs)\n{\r\n    this.attributes = attrs;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getOpCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getOpCode()\n{\r\n    return OPCODE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "context",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RequestContext context()\n{\r\n    if (context == null) {\r\n        if (injector == null) {\r\n            throw new WebAppException(join(\"Error accessing RequestContext from\\n\", \"a child constructor, either move the usage of the Controller\\n\", \"methods out of the constructor or inject the RequestContext\\n\", \"into the constructor\"));\r\n        }\r\n        context = injector.getInstance(RequestContext.class);\r\n    }\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "error",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Throwable error()\n{\r\n    return context().error;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "status",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int status()\n{\r\n    return context().status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setStatus(int status)\n{\r\n    context().setStatus(status);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "inDevMode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean inDevMode()\n{\r\n    return context().devMode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "injector",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Injector injector()\n{\r\n    return context().injector;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T getInstance(Class<T> cls)\n{\r\n    return injector.getInstance(cls);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "request",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HttpServletRequest request()\n{\r\n    return context().request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "response",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HttpServletResponse response()\n{\r\n    return context().response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "set",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void set(String key, String value)\n{\r\n    context().set(key, value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String get(String key, String defaultValue)\n{\r\n    return context().get(key, defaultValue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "$",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String $(String key)\n{\r\n    return get(key, \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setTitle",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setTitle(String title)\n{\r\n    set(TITLE, title);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setTitle",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTitle(String title, String url)\n{\r\n    setTitle(title);\r\n    set(TITLE_LINK, url);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "info",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResponseInfo info(String about)\n{\r\n    return getInstance(ResponseInfo.class).about(about);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "cookies",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Cookie> cookies()\n{\r\n    return context().cookies();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "url",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String url(String... parts)\n{\r\n    return ujoin(context().prefix, parts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "index",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void index()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "echo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void echo()\n{\r\n    render(DefaultPage.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void render(Class<? extends View> cls)\n{\r\n    context().rendered = true;\r\n    getInstance(cls).render();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "renderJSON",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void renderJSON(Object object)\n{\r\n    LOG.debug(\"{}: {}\", MimeType.JSON, object);\r\n    context().rendered = true;\r\n    context().response.setContentType(MimeType.JSON);\r\n    try {\r\n        jsonMapper.writeValue(writer(), object);\r\n    } catch (Exception e) {\r\n        throw new WebAppException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "renderJSON",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void renderJSON(Class<? extends ToJSON> cls)\n{\r\n    context().rendered = true;\r\n    response().setContentType(MimeType.JSON);\r\n    getInstance(cls).toJSON(writer());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "renderText",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void renderText(String s)\n{\r\n    LOG.debug(\"{}: {}\", MimeType.TEXT, s);\r\n    context().rendered = true;\r\n    response().setContentType(MimeType.TEXT);\r\n    writer().print(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "writer",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PrintWriter writer()\n{\r\n    try {\r\n        return response().getWriter();\r\n    } catch (Exception e) {\r\n        throw new WebAppException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "removeEldestEntry",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean removeEldestEntry(Map.Entry<K, V> eldest)\n{\r\n    return size() > maxSize;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetClusterMetricsResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.yarnClusterMetrics != null) {\r\n        builder.setClusterMetrics(convertToProtoFormat(this.yarnClusterMetrics));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetClusterMetricsResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getClusterMetrics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnClusterMetrics getClusterMetrics()\n{\r\n    GetClusterMetricsResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.yarnClusterMetrics != null) {\r\n        return this.yarnClusterMetrics;\r\n    }\r\n    if (!p.hasClusterMetrics()) {\r\n        return null;\r\n    }\r\n    this.yarnClusterMetrics = convertFromProtoFormat(p.getClusterMetrics());\r\n    return this.yarnClusterMetrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setClusterMetrics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setClusterMetrics(YarnClusterMetrics clusterMetrics)\n{\r\n    maybeInitBuilder();\r\n    if (clusterMetrics == null)\r\n        builder.clearClusterMetrics();\r\n    this.yarnClusterMetrics = clusterMetrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnClusterMetricsPBImpl convertFromProtoFormat(YarnClusterMetricsProto p)\n{\r\n    return new YarnClusterMetricsPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnClusterMetricsProto convertToProtoFormat(YarnClusterMetrics t)\n{\r\n    return ((YarnClusterMetricsPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTime()\n{\r\n    return Time.monotonicNow();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "sjoin",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String sjoin(Object... args)\n{\r\n    return SSV_JOINER.join(args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "cjoin",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String cjoin(Object... args)\n{\r\n    return CSV_JOINER.join(args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "djoin",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String djoin(Object... args)\n{\r\n    return DOT_JOINER.join(args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "_join",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String _join(Object... args)\n{\r\n    return _JOINER.join(args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "pjoin",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String pjoin(Object... args)\n{\r\n    return PATH_JOINER.join(args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "pajoin",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String pajoin(Object... args)\n{\r\n    return PATH_ARG_JOINER.join(args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "join",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String join(Object... args)\n{\r\n    return JOINER.join(args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "joins",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String joins(String sep, Object... args)\n{\r\n    return Joiner.on(sep).join(args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "split",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Iterable<String> split(CharSequence s)\n{\r\n    return SSV_SPLITTER.split(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "_split",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Iterable<String> _split(CharSequence s)\n{\r\n    return _SPLITTER.split(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "isAbsUrl",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isAbsUrl(CharSequence url)\n{\r\n    return ABS_URL_RE.matcher(url).find();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "ujoin",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "String ujoin(String pathPrefix, String... args)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    boolean first = true;\r\n    for (String part : args) {\r\n        if (first) {\r\n            first = false;\r\n            if (part.startsWith(\"#\") || isAbsUrl(part)) {\r\n                sb.append(part);\r\n            } else {\r\n                uappend(sb, pathPrefix);\r\n                uappend(sb, part);\r\n            }\r\n        } else {\r\n            uappend(sb, part);\r\n        }\r\n    }\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "uappend",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void uappend(StringBuilder sb, String part)\n{\r\n    if ((sb.length() <= 0 || sb.charAt(sb.length() - 1) != '/') && !part.startsWith(\"/\")) {\r\n        sb.append('/');\r\n    }\r\n    sb.append(part);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getResourceSecondsString",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "String getResourceSecondsString(Map<String, Long> targetMap)\n{\r\n    List<String> strings = new ArrayList<>(targetMap.size());\r\n    Long memorySeconds = 0L;\r\n    Long vcoreSeconds = 0L;\r\n    if (targetMap.containsKey(ResourceInformation.MEMORY_MB.getName())) {\r\n        memorySeconds = targetMap.get(ResourceInformation.MEMORY_MB.getName());\r\n    }\r\n    if (targetMap.containsKey(ResourceInformation.VCORES.getName())) {\r\n        vcoreSeconds = targetMap.get(ResourceInformation.VCORES.getName());\r\n    }\r\n    strings.add(memorySeconds + \" MB-seconds\");\r\n    strings.add(vcoreSeconds + \" vcore-seconds\");\r\n    Map<String, ResourceInformation> tmp = ResourceUtils.getResourceTypes();\r\n    if (targetMap.size() > 2) {\r\n        for (Map.Entry<String, Long> entry : targetMap.entrySet()) {\r\n            if (!entry.getKey().equals(ResourceInformation.MEMORY_MB.getName()) && !entry.getKey().equals(ResourceInformation.VCORES.getName())) {\r\n                String units = \"\";\r\n                if (tmp.containsKey(entry.getKey())) {\r\n                    units = tmp.get(entry.getKey()).getUnits();\r\n                }\r\n                strings.add(entry.getValue() + \" \" + entry.getKey() + \"-\" + units + \"seconds\");\r\n            }\r\n        }\r\n    }\r\n    return String.join(\", \", strings);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "failApplicationAttempt",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "FailApplicationAttemptResponse failApplicationAttempt(FailApplicationAttemptRequest request) throws YarnException, IOException\n{\r\n    FailApplicationAttemptRequestProto requestProto = ((FailApplicationAttemptRequestPBImpl) request).getProto();\r\n    try {\r\n        return new FailApplicationAttemptResponsePBImpl(proxy.failApplicationAttempt(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "forceKillApplication",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "KillApplicationResponse forceKillApplication(KillApplicationRequest request) throws YarnException, IOException\n{\r\n    KillApplicationRequestProto requestProto = ((KillApplicationRequestPBImpl) request).getProto();\r\n    try {\r\n        return new KillApplicationResponsePBImpl(proxy.forceKillApplication(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getApplicationReport",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetApplicationReportResponse getApplicationReport(GetApplicationReportRequest request) throws YarnException, IOException\n{\r\n    GetApplicationReportRequestProto requestProto = ((GetApplicationReportRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetApplicationReportResponsePBImpl(proxy.getApplicationReport(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getClusterMetrics",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetClusterMetricsResponse getClusterMetrics(GetClusterMetricsRequest request) throws YarnException, IOException\n{\r\n    GetClusterMetricsRequestProto requestProto = ((GetClusterMetricsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetClusterMetricsResponsePBImpl(proxy.getClusterMetrics(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getNewApplication",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetNewApplicationResponse getNewApplication(GetNewApplicationRequest request) throws YarnException, IOException\n{\r\n    GetNewApplicationRequestProto requestProto = ((GetNewApplicationRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetNewApplicationResponsePBImpl(proxy.getNewApplication(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "submitApplication",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SubmitApplicationResponse submitApplication(SubmitApplicationRequest request) throws YarnException, IOException\n{\r\n    SubmitApplicationRequestProto requestProto = ((SubmitApplicationRequestPBImpl) request).getProto();\r\n    try {\r\n        return new SubmitApplicationResponsePBImpl(proxy.submitApplication(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getApplications",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetApplicationsResponse getApplications(GetApplicationsRequest request) throws YarnException, IOException\n{\r\n    GetApplicationsRequestProto requestProto = ((GetApplicationsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetApplicationsResponsePBImpl(proxy.getApplications(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getClusterNodes",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetClusterNodesResponse getClusterNodes(GetClusterNodesRequest request) throws YarnException, IOException\n{\r\n    GetClusterNodesRequestProto requestProto = ((GetClusterNodesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetClusterNodesResponsePBImpl(proxy.getClusterNodes(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getQueueInfo",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request) throws YarnException, IOException\n{\r\n    GetQueueInfoRequestProto requestProto = ((GetQueueInfoRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetQueueInfoResponsePBImpl(proxy.getQueueInfo(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getQueueUserAcls",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetQueueUserAclsInfoResponse getQueueUserAcls(GetQueueUserAclsInfoRequest request) throws YarnException, IOException\n{\r\n    GetQueueUserAclsInfoRequestProto requestProto = ((GetQueueUserAclsInfoRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetQueueUserAclsInfoResponsePBImpl(proxy.getQueueUserAcls(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getDelegationToken",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetDelegationTokenResponse getDelegationToken(GetDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    GetDelegationTokenRequestProto requestProto = ((GetDelegationTokenRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetDelegationTokenResponsePBImpl(proxy.getDelegationToken(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "renewDelegationToken",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RenewDelegationTokenResponse renewDelegationToken(RenewDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    RenewDelegationTokenRequestProto requestProto = ((RenewDelegationTokenRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RenewDelegationTokenResponsePBImpl(proxy.renewDelegationToken(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "cancelDelegationToken",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "CancelDelegationTokenResponse cancelDelegationToken(CancelDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    CancelDelegationTokenRequestProto requestProto = ((CancelDelegationTokenRequestPBImpl) request).getProto();\r\n    try {\r\n        return new CancelDelegationTokenResponsePBImpl(proxy.cancelDelegationToken(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "moveApplicationAcrossQueues",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MoveApplicationAcrossQueuesResponse moveApplicationAcrossQueues(MoveApplicationAcrossQueuesRequest request) throws YarnException, IOException\n{\r\n    MoveApplicationAcrossQueuesRequestProto requestProto = ((MoveApplicationAcrossQueuesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new MoveApplicationAcrossQueuesResponsePBImpl(proxy.moveApplicationAcrossQueues(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getApplicationAttemptReport",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetApplicationAttemptReportResponse getApplicationAttemptReport(GetApplicationAttemptReportRequest request) throws YarnException, IOException\n{\r\n    GetApplicationAttemptReportRequestProto requestProto = ((GetApplicationAttemptReportRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetApplicationAttemptReportResponsePBImpl(proxy.getApplicationAttemptReport(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getApplicationAttempts",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetApplicationAttemptsResponse getApplicationAttempts(GetApplicationAttemptsRequest request) throws YarnException, IOException\n{\r\n    GetApplicationAttemptsRequestProto requestProto = ((GetApplicationAttemptsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetApplicationAttemptsResponsePBImpl(proxy.getApplicationAttempts(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getContainerReport",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetContainerReportResponse getContainerReport(GetContainerReportRequest request) throws YarnException, IOException\n{\r\n    GetContainerReportRequestProto requestProto = ((GetContainerReportRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetContainerReportResponsePBImpl(proxy.getContainerReport(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getContainers",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetContainersResponse getContainers(GetContainersRequest request) throws YarnException, IOException\n{\r\n    GetContainersRequestProto requestProto = ((GetContainersRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetContainersResponsePBImpl(proxy.getContainers(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getNewReservation",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetNewReservationResponse getNewReservation(GetNewReservationRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.GetNewReservationRequestProto requestProto = ((GetNewReservationRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetNewReservationResponsePBImpl(proxy.getNewReservation(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "submitReservation",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ReservationSubmissionResponse submitReservation(ReservationSubmissionRequest request) throws YarnException, IOException\n{\r\n    ReservationSubmissionRequestProto requestProto = ((ReservationSubmissionRequestPBImpl) request).getProto();\r\n    try {\r\n        return new ReservationSubmissionResponsePBImpl(proxy.submitReservation(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "updateReservation",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ReservationUpdateResponse updateReservation(ReservationUpdateRequest request) throws YarnException, IOException\n{\r\n    ReservationUpdateRequestProto requestProto = ((ReservationUpdateRequestPBImpl) request).getProto();\r\n    try {\r\n        return new ReservationUpdateResponsePBImpl(proxy.updateReservation(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "deleteReservation",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ReservationDeleteResponse deleteReservation(ReservationDeleteRequest request) throws YarnException, IOException\n{\r\n    ReservationDeleteRequestProto requestProto = ((ReservationDeleteRequestPBImpl) request).getProto();\r\n    try {\r\n        return new ReservationDeleteResponsePBImpl(proxy.deleteReservation(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "listReservations",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ReservationListResponse listReservations(ReservationListRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.ReservationListRequestProto requestProto = ((ReservationListRequestPBImpl) request).getProto();\r\n    try {\r\n        return new ReservationListResponsePBImpl(proxy.listReservations(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getNodeToLabels",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetNodesToLabelsResponse getNodeToLabels(GetNodesToLabelsRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.GetNodesToLabelsRequestProto requestProto = ((GetNodesToLabelsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetNodesToLabelsResponsePBImpl(proxy.getNodeToLabels(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getLabelsToNodes",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetLabelsToNodesResponse getLabelsToNodes(GetLabelsToNodesRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.GetLabelsToNodesRequestProto requestProto = ((GetLabelsToNodesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetLabelsToNodesResponsePBImpl(proxy.getLabelsToNodes(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getClusterNodeLabels",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetClusterNodeLabelsResponse getClusterNodeLabels(GetClusterNodeLabelsRequest request) throws YarnException, IOException\n{\r\n    GetClusterNodeLabelsRequestProto requestProto = ((GetClusterNodeLabelsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetClusterNodeLabelsResponsePBImpl(proxy.getClusterNodeLabels(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "updateApplicationPriority",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "UpdateApplicationPriorityResponse updateApplicationPriority(UpdateApplicationPriorityRequest request) throws YarnException, IOException\n{\r\n    UpdateApplicationPriorityRequestProto requestProto = ((UpdateApplicationPriorityRequestPBImpl) request).getProto();\r\n    try {\r\n        return new UpdateApplicationPriorityResponsePBImpl(proxy.updateApplicationPriority(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "signalToContainer",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SignalContainerResponse signalToContainer(SignalContainerRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.SignalContainerRequestProto requestProto = ((SignalContainerRequestPBImpl) request).getProto();\r\n    try {\r\n        return new SignalContainerResponsePBImpl(proxy.signalToContainer(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "updateApplicationTimeouts",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "UpdateApplicationTimeoutsResponse updateApplicationTimeouts(UpdateApplicationTimeoutsRequest request) throws YarnException, IOException\n{\r\n    UpdateApplicationTimeoutsRequestProto requestProto = ((UpdateApplicationTimeoutsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new UpdateApplicationTimeoutsResponsePBImpl(proxy.updateApplicationTimeouts(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getResourceProfiles",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetAllResourceProfilesResponse getResourceProfiles(GetAllResourceProfilesRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.GetAllResourceProfilesRequestProto requestProto = ((GetAllResourceProfilesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetAllResourceProfilesResponsePBImpl(proxy.getResourceProfiles(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getResourceProfile",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetResourceProfileResponse getResourceProfile(GetResourceProfileRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.GetResourceProfileRequestProto requestProto = ((GetResourceProfileRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetResourceProfileResponsePBImpl(proxy.getResourceProfile(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getResourceTypeInfo",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetAllResourceTypeInfoResponse getResourceTypeInfo(GetAllResourceTypeInfoRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.GetAllResourceTypeInfoRequestProto requestProto = ((GetAllResourceTypeInfoRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetAllResourceTypeInfoResponsePBImpl(proxy.getResourceTypeInfo(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getAttributesToNodes",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetAttributesToNodesResponse getAttributesToNodes(GetAttributesToNodesRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.GetAttributesToNodesRequestProto requestProto = ((GetAttributesToNodesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetAttributesToNodesResponsePBImpl(proxy.getAttributesToNodes(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getClusterNodeAttributes",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetClusterNodeAttributesResponse getClusterNodeAttributes(GetClusterNodeAttributesRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.GetClusterNodeAttributesRequestProto requestProto = ((GetClusterNodeAttributesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetClusterNodeAttributesResponsePBImpl(proxy.getClusterNodeAttributes(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getNodesToAttributes",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetNodesToAttributesResponse getNodesToAttributes(GetNodesToAttributesRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.GetNodesToAttributesRequestProto requestProto = ((GetNodesToAttributesRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetNodesToAttributesResponsePBImpl(proxy.getNodesToAttributes(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    if (!proto.hasAppAttemptId()) {\r\n        return null;\r\n    }\r\n    return new ApplicationAttemptIdPBImpl(proto.getAppAttemptId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    out.write(proto.toByteArray());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "readFields",
  "errType" : [ "InvalidProtocolBufferException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    byte[] data = IOUtils.readFullyToByteArray(in);\r\n    try {\r\n        proto = AMRMTokenIdentifierProto.parseFrom(data);\r\n    } catch (InvalidProtocolBufferException e) {\r\n        LOG.warn(\"Recovering old formatted token\");\r\n        readFieldsInOldFormat(new DataInputStream(new ByteArrayInputStream(data)));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "readFieldsInOldFormat",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void readFieldsInOldFormat(DataInputStream in) throws IOException\n{\r\n    AMRMTokenIdentifierProto.Builder builder = AMRMTokenIdentifierProto.newBuilder();\r\n    long clusterTimeStamp = in.readLong();\r\n    int appId = in.readInt();\r\n    int attemptId = in.readInt();\r\n    ApplicationId applicationId = ApplicationId.newInstance(clusterTimeStamp, appId);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(applicationId, attemptId);\r\n    builder.setAppAttemptId(((ApplicationAttemptIdPBImpl) appAttemptId).getProto());\r\n    builder.setKeyId(in.readInt());\r\n    proto = builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getKind",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Text getKind()\n{\r\n    return KIND_NAME;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "UserGroupInformation getUser()\n{\r\n    String appAttemptId = null;\r\n    if (proto.hasAppAttemptId()) {\r\n        appAttemptId = new ApplicationAttemptIdPBImpl(proto.getAppAttemptId()).toString();\r\n    }\r\n    return UserGroupInformation.createRemoteUser(appAttemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getKeyId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getKeyId()\n{\r\n    return proto.getKeyId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMTokenIdentifierProto getProto()\n{\r\n    return this.proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReplaceLabelsOnNodeResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void render(Block html)\n{\r\n    html.div(\"#nav\").h3(\"Heading1\").ul().li(\"Item 1\").li(\"Item 2\").li(\"...\").__().h3(\"Tools\").ul().li().a(\"/conf\", \"Configuration\").__().li().a(\"/stacks\", \"Thread dump\").__().li().a(\"/logs\", \"Logs\").__().li().a(\"/jmx?qry=Hadoop:*\", \"Metrics\").__().__().__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeInfoProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NodeAttributeInfoProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAttributeKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeAttributeKey getAttributeKey()\n{\r\n    NodeAttributeInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAttributeKey()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getAttributeKey());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAttributeKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAttributeKey(NodeAttributeKey attributeKey)\n{\r\n    maybeInitBuilder();\r\n    if (attributeKey == null) {\r\n        builder.clearAttributeKey();\r\n        return;\r\n    }\r\n    builder.setAttributeKey(convertToProtoFormat(attributeKey));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAttributeType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeAttributeType getAttributeType()\n{\r\n    NodeAttributeInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAttributeType()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getAttributeType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAttributeType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAttributeType(NodeAttributeType attributeType)\n{\r\n    maybeInitBuilder();\r\n    if (attributeType == null) {\r\n        builder.clearAttributeType();\r\n        return;\r\n    }\r\n    builder.setAttributeType(convertToProtoFormat(attributeType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeTypeProto convertToProtoFormat(NodeAttributeType attributeType)\n{\r\n    return NodeAttributeTypeProto.valueOf(attributeType.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeType convertFromProtoFormat(NodeAttributeTypeProto containerState)\n{\r\n    return NodeAttributeType.valueOf(containerState.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeAttributeKeyPBImpl convertFromProtoFormat(NodeAttributeKeyProto attributeKeyProto)\n{\r\n    return new NodeAttributeKeyPBImpl(attributeKeyProto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeKeyProto convertToProtoFormat(NodeAttributeKey attributeKey)\n{\r\n    return ((NodeAttributeKeyPBImpl) attributeKey).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getAttributeKey().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (obj instanceof NodeAttributeInfo) {\r\n        NodeAttributeInfo other = (NodeAttributeInfo) obj;\r\n        return getAttributeKey().equals(other.getAttributeKey());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder strBuilder = new StringBuilder();\r\n    NodeAttributeKey key = this.getAttributeKey();\r\n    strBuilder.append(key.getAttributePrefix()).append(\"/\").append(key.getAttributeName()).append(\"(\").append(this.getAttributeType()).append(\")\");\r\n    return strBuilder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    super.serviceInit(conf);\r\n    ClientConfig cc = new DefaultClientConfig();\r\n    cc.getClasses().add(YarnJacksonJaxbJsonProvider.class);\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        sslFactory = getSSLFactory(conf);\r\n        connConfigurator = getConnConfigurator(sslFactory);\r\n    } else {\r\n        connConfigurator = DEFAULT_TIMEOUT_CONN_CONFIGURATOR;\r\n    }\r\n    String defaultAuth = UserGroupInformation.isSecurityEnabled() ? KerberosAuthenticationHandler.TYPE : PseudoAuthenticationHandler.TYPE;\r\n    String authType = conf.get(YarnConfiguration.TIMELINE_HTTP_AUTH_TYPE, defaultAuth);\r\n    if (authType.equals(KerberosAuthenticationHandler.TYPE)) {\r\n        authenticator = new KerberosDelegationTokenAuthenticator();\r\n    } else {\r\n        authenticator = new PseudoDelegationTokenAuthenticator();\r\n    }\r\n    authenticator.setConnectionConfigurator(connConfigurator);\r\n    connectionRetry = new TimelineClientConnectionRetry(conf);\r\n    client = new Client(new URLConnectionClientHandler(new TimelineURLConnectionFactory(authUgi, authenticator, connConfigurator, token, doAsUser)), cc);\r\n    if (requireConnectionRetry) {\r\n        TimelineJerseyRetryFilter retryFilter = new TimelineJerseyRetryFilter(connectionRetry);\r\n        client.addFilter(retryFilter);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getConnConfigurator",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ConnectionConfigurator getConnConfigurator(SSLFactory sslFactoryObj)\n{\r\n    try {\r\n        return initSslConnConfigurator(DEFAULT_SOCKET_TIMEOUT, sslFactoryObj);\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Cannot load customized ssl related configuration. \" + \"Fallback to system-generic settings.\", e);\r\n        return DEFAULT_TIMEOUT_CONN_CONFIGURATOR;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "initSslConnConfigurator",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ConnectionConfigurator initSslConnConfigurator(final int timeout, SSLFactory sslFactory) throws IOException, GeneralSecurityException\n{\r\n    final SSLSocketFactory sf;\r\n    final HostnameVerifier hv;\r\n    sf = sslFactory.createSSLSocketFactory();\r\n    hv = sslFactory.getHostnameVerifier();\r\n    return new ConnectionConfigurator() {\r\n\r\n        @Override\r\n        public HttpURLConnection configure(HttpURLConnection conn) throws IOException {\r\n            if (conn instanceof HttpsURLConnection) {\r\n                HttpsURLConnection c = (HttpsURLConnection) conn;\r\n                c.setSSLSocketFactory(sf);\r\n                c.setHostnameVerifier(hv);\r\n            }\r\n            setTimeouts(conn, timeout);\r\n            return conn;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getSSLFactory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SSLFactory getSSLFactory(Configuration conf) throws GeneralSecurityException, IOException\n{\r\n    SSLFactory newSSLFactory = new SSLFactory(SSLFactory.Mode.CLIENT, conf);\r\n    newSSLFactory.init();\r\n    return newSSLFactory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setTimeouts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTimeouts(URLConnection connection, int socketTimeout)\n{\r\n    connection.setConnectTimeout(socketTimeout);\r\n    connection.setReadTimeout(socketTimeout);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "constructResURI",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URI constructResURI(Configuration conf, String address, String uri)\n{\r\n    return URI.create(JOINER.join(YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\", address, uri));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getDelegationTokenAuthenticatedURL",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DelegationTokenAuthenticatedURL getDelegationTokenAuthenticatedURL()\n{\r\n    return new DelegationTokenAuthenticatedURL(authenticator, connConfigurator);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop()\n{\r\n    if (this.client != null) {\r\n        this.client.destroy();\r\n    }\r\n    if (this.sslFactory != null) {\r\n        this.sslFactory.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Client getClient()\n{\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "operateDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Object operateDelegationToken(final PrivilegedExceptionAction<?> action) throws IOException, YarnException\n{\r\n    TimelineClientRetryOp tokenRetryOp = createRetryOpForOperateDelegationToken(action);\r\n    return connectionRetry.retryOn(tokenRetryOp);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createRetryOpForOperateDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineClientRetryOp createRetryOpForOperateDelegationToken(final PrivilegedExceptionAction<?> action) throws IOException\n{\r\n    return new TimelineClientRetryOpForOperateDelegationToken(this.authUgi, action);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getKerberosInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "KerberosInfo getKerberosInfo(Class<?> protocol, Configuration conf)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getTokenInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenInfo getTokenInfo(Class<?> protocol, Configuration conf)\n{\r\n    if (!ApplicationMasterProtocolPB.class.isAssignableFrom(protocol)) {\r\n        return null;\r\n    }\r\n    return new TokenInfo() {\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends TokenSelector<? extends TokenIdentifier>> value() {\r\n            return AMRMTokenSelector.class;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "retrievePassword",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] retrievePassword(ClientToAMTokenIdentifier identifier) throws InvalidToken\n{\r\n    if (this.masterKey == null) {\r\n        synchronized (this) {\r\n            while (masterKey == null) {\r\n                try {\r\n                    wait(MASTER_KEY_WAIT_MSEC);\r\n                    break;\r\n                } catch (InterruptedException e) {\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return super.retrievePassword(identifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SecretKey getMasterKey(ApplicationAttemptId applicationAttemptID)\n{\r\n    return this.masterKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "setMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMasterKey(byte[] key)\n{\r\n    synchronized (this) {\r\n        this.masterKey = SecretManager.createSecretKey(key);\r\n        notifyAll();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodesToAttributes",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initNodesToAttributes()\n{\r\n    if (this.nodesToAttributes != null) {\r\n        return;\r\n    }\r\n    YarnServiceProtos.GetNodesToAttributesResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<YarnProtos.NodeToAttributesProto> list = p.getNodesToAttributesList();\r\n    this.nodesToAttributes = new HashMap<>();\r\n    for (YarnProtos.NodeToAttributesProto c : list) {\r\n        HashSet<NodeAttribute> attributes = new HashSet<>();\r\n        for (YarnProtos.NodeAttributeProto nodeAttrProto : c.getNodeAttributesList()) {\r\n            attributes.add(new NodeAttributePBImpl(nodeAttrProto));\r\n        }\r\n        nodesToAttributes.put(c.getNode(), attributes);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = YarnServiceProtos.GetNodesToAttributesResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addNodesToAttributesToProto",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void addNodesToAttributesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodesToAttributes();\r\n    if (nodesToAttributes == null) {\r\n        return;\r\n    }\r\n    Iterable<YarnProtos.NodeToAttributesProto> iterable = () -> new Iterator<YarnProtos.NodeToAttributesProto>() {\r\n\r\n        private Iterator<Map.Entry<String, Set<NodeAttribute>>> iter = nodesToAttributes.entrySet().iterator();\r\n\r\n        @Override\r\n        public void remove() {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public YarnProtos.NodeToAttributesProto next() {\r\n            Map.Entry<String, Set<NodeAttribute>> now = iter.next();\r\n            Set<YarnProtos.NodeAttributeProto> protoSet = new HashSet<>();\r\n            for (NodeAttribute nodeAttribute : now.getValue()) {\r\n                protoSet.add(convertToProtoFormat(nodeAttribute));\r\n            }\r\n            return YarnProtos.NodeToAttributesProto.newBuilder().setNode(now.getKey()).addAllNodeAttributes(protoSet).build();\r\n        }\r\n\r\n        @Override\r\n        public boolean hasNext() {\r\n            return iter.hasNext();\r\n        }\r\n    };\r\n    builder.addAllNodesToAttributes(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeAttributePBImpl convertFromProtoFormat(YarnProtos.NodeAttributeProto p)\n{\r\n    return new NodeAttributePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnProtos.NodeAttributeProto convertToProtoFormat(NodeAttribute t)\n{\r\n    return ((NodeAttributePBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodesToAttributes != null) {\r\n        addNodesToAttributesToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnServiceProtos.GetNodesToAttributesResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    assert false : \"hashCode not designed\";\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeToAttributes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeToAttributes(Map<String, Set<NodeAttribute>> map)\n{\r\n    initNodesToAttributes();\r\n    nodesToAttributes.clear();\r\n    nodesToAttributes.putAll(map);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeToAttributes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Set<NodeAttribute>> getNodeToAttributes()\n{\r\n    initNodesToAttributes();\r\n    return nodesToAttributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnServiceProtos.GetNodesToLabelsRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getResource()\n{\r\n    if (resource != null) {\r\n        return resource;\r\n    }\r\n    GetResourceProfileResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (p.hasResources()) {\r\n        resource = Resource.newInstance(p.getResources().getMemory(), p.getResources().getVirtualCores());\r\n    }\r\n    return resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setResource(Resource r)\n{\r\n    resource = Resources.clone(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetResourceProfileResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (resource != null) {\r\n        builder.setResources(convertToProtoFormat(resource));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource res)\n{\r\n    return ProtoUtils.convertToProtoFormat(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetResourceProfileResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.priority != null) {\r\n        builder.setPriority(convertToProtoFormat(this.priority));\r\n    }\r\n    if (this.capability != null) {\r\n        builder.setCapability(convertToProtoFormat(this.capability));\r\n    }\r\n    if (this.executionTypeRequest != null) {\r\n        builder.setExecutionTypeRequest(ProtoUtils.convertToProtoFormat(this.executionTypeRequest));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ResourceRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    ResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.priority != null) {\r\n        return this.priority;\r\n    }\r\n    if (!p.hasPriority()) {\r\n        return null;\r\n    }\r\n    this.priority = convertFromProtoFormat(p.getPriority());\r\n    return this.priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPriority(Priority priority)\n{\r\n    maybeInitBuilder();\r\n    if (priority == null)\r\n        builder.clearPriority();\r\n    this.priority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExecutionTypeRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ExecutionTypeRequest getExecutionTypeRequest()\n{\r\n    ResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.executionTypeRequest != null) {\r\n        return this.executionTypeRequest;\r\n    }\r\n    if (!p.hasExecutionTypeRequest()) {\r\n        return null;\r\n    }\r\n    this.executionTypeRequest = ProtoUtils.convertFromProtoFormat(p.getExecutionTypeRequest());\r\n    return this.executionTypeRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExecutionTypeRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setExecutionTypeRequest(ExecutionTypeRequest execSpec)\n{\r\n    maybeInitBuilder();\r\n    if (execSpec == null) {\r\n        builder.clearExecutionTypeRequest();\r\n    }\r\n    this.executionTypeRequest = execSpec;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResourceName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getResourceName()\n{\r\n    ResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasResourceName()) {\r\n        return null;\r\n    }\r\n    return (p.getResourceName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResourceName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setResourceName(String resourceName)\n{\r\n    maybeInitBuilder();\r\n    if (resourceName == null) {\r\n        builder.clearResourceName();\r\n        return;\r\n    }\r\n    builder.setResourceName((resourceName));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getCapability()\n{\r\n    ResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.capability != null) {\r\n        return this.capability;\r\n    }\r\n    if (!p.hasCapability()) {\r\n        return null;\r\n    }\r\n    this.capability = convertFromProtoFormat(p.getCapability());\r\n    return this.capability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCapability(Resource capability)\n{\r\n    maybeInitBuilder();\r\n    if (capability == null)\r\n        builder.clearCapability();\r\n    this.capability = capability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNumContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumContainers()\n{\r\n    ResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getNumContainers());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNumContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumContainers(int numContainers)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumContainers((numContainers));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRelaxLocality",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getRelaxLocality()\n{\r\n    ResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getRelaxLocality();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setRelaxLocality",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRelaxLocality(boolean relaxLocality)\n{\r\n    maybeInitBuilder();\r\n    builder.setRelaxLocality(relaxLocality);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAllocationRequestId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAllocationRequestId()\n{\r\n    ResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getAllocationRequestId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAllocationRequestId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocationRequestId(long allocationRequestID)\n{\r\n    maybeInitBuilder();\r\n    builder.setAllocationRequestId(allocationRequestID);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PriorityPBImpl convertFromProtoFormat(PriorityProto p)\n{\r\n    return new PriorityPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PriorityProto convertToProtoFormat(Priority t)\n{\r\n    return ((PriorityPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource t)\n{\r\n    return ProtoUtils.convertToProtoFormat(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String toString()\n{\r\n    return \"{AllocationRequestId: \" + getAllocationRequestId() + \", Priority: \" + getPriority() + \", Capability: \" + getCapability() + \", # Containers: \" + getNumContainers() + \", Location: \" + getResourceName() + \", Relax Locality: \" + getRelaxLocality() + \", Execution Type Request: \" + getExecutionTypeRequest() + \", Node Label Expression: \" + getNodeLabelExpression() + \"}\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getNodeLabelExpression()\n{\r\n    ResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeLabelExpression()) {\r\n        return null;\r\n    }\r\n    return (p.getNodeLabelExpression().trim());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeLabelExpression(String nodeLabelExpression)\n{\r\n    maybeInitBuilder();\r\n    if (nodeLabelExpression == null) {\r\n        builder.clearNodeLabelExpression();\r\n        return;\r\n    }\r\n    builder.setNodeLabelExpression(nodeLabelExpression);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getConfigurationInputStream",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "InputStream getConfigurationInputStream(Configuration bootstrapConf, String name) throws IOException, YarnException\n{\r\n    if (name == null || name.isEmpty()) {\r\n        throw new YarnException(\"Illegal argument! The parameter should not be null or empty\");\r\n    } else if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name) || YarnConfiguration.NM_CONFIGURATION_FILES.contains(name)) {\r\n        return bootstrapConf.getConfResourceAsInputStream(name);\r\n    }\r\n    return new FileInputStream(name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "initInternal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initInternal(Configuration bootstrapConf) throws Exception\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "closeInternal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void closeInternal() throws Exception\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initialize() throws YarnException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "updateProcessTree",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateProcessTree()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getProcessTreeDump",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getProcessTreeDump()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getVirtualMemorySize()\n{\r\n    return getVirtualMemorySize(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getRssMemorySize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getRssMemorySize()\n{\r\n    return getRssMemorySize(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getVirtualMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVirtualMemorySize(int olderThanAge)\n{\r\n    return UNAVAILABLE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getRssMemorySize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRssMemorySize(int olderThanAge)\n{\r\n    return UNAVAILABLE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCumulativeCpuTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCumulativeCpuTime()\n{\r\n    return UNAVAILABLE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCpuUsagePercent",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getCpuUsagePercent()\n{\r\n    return UNAVAILABLE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "checkPidPgrpidForMatch",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean checkPidPgrpidForMatch()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getResourceCalculatorProcessTree",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ResourceCalculatorProcessTree getResourceCalculatorProcessTree(String pid, Class<? extends ResourceCalculatorProcessTree> clazz, Configuration conf)\n{\r\n    if (clazz != null) {\r\n        try {\r\n            Constructor<? extends ResourceCalculatorProcessTree> c = clazz.getConstructor(String.class);\r\n            ResourceCalculatorProcessTree rctree = c.newInstance(pid);\r\n            rctree.setConf(conf);\r\n            rctree.initialize();\r\n            return rctree;\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n    if (ProcfsBasedProcessTree.isAvailable()) {\r\n        return new ProcfsBasedProcessTree(pid);\r\n    }\r\n    if (WindowsBasedProcessTree.isAvailable()) {\r\n        return new WindowsBasedProcessTree(pid);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "replaceNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void replaceNodeAttributes(String prefix, Map<String, Set<NodeAttribute>> nodeAttributeMapping) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "addNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void addNodeAttributes(Map<String, Set<NodeAttribute>> nodeAttributeMapping) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "removeNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeNodeAttributes(Map<String, Set<NodeAttribute>> nodeAttributeMapping) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getClusterNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<NodeAttribute> getClusterNodeAttributes(Set<String> prefix)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getAttributesToNodes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<NodeAttributeKey, Map<String, AttributeValue>> getAttributesToNodes(Set<NodeAttributeKey> attributes)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getAttributesForNode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<NodeAttribute, AttributeValue> getAttributesForNode(String hostName)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getNodeToAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<NodeToAttributes> getNodeToAttributes(Set<String> prefix)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getNodesToAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Set<NodeAttribute>> getNodesToAttributes(Set<String> hostNames)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "refreshNodeAttributesToScheduler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void refreshNodeAttributesToScheduler(NodeId nodeId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "isUploadedLogsInThisCycle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isUploadedLogsInThisCycle()\n{\r\n    return uploadedLogsInThisCycle;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "setUploadedLogsInThisCycle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUploadedLogsInThisCycle(boolean uploadedLogsInThisCycle)\n{\r\n    this.uploadedLogsInThisCycle = uploadedLogsInThisCycle;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getRemoteNodeLogFileForApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getRemoteNodeLogFileForApp()\n{\r\n    return remoteNodeLogFileForApp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getRollingMonitorInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRollingMonitorInterval()\n{\r\n    return rollingMonitorInterval;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "isLogAggregationInRolling",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isLogAggregationInRolling()\n{\r\n    return logAggregationInRolling;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getLogUploadTimeStamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLogUploadTimeStamp()\n{\r\n    return logUploadedTimeStamp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "setLogUploadTimeStamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLogUploadTimeStamp(long uploadTimeStamp)\n{\r\n    this.logUploadedTimeStamp = uploadTimeStamp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    return nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getUserUgi",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UserGroupInformation getUserUgi()\n{\r\n    return userUgi;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getAppId()\n{\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getRemoteNodeTmpLogFileForApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getRemoteNodeTmpLogFileForApp()\n{\r\n    return remoteNodeTmpLogFileForApp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "increLogAggregationTimes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void increLogAggregationTimes()\n{\r\n    this.logAggregationTimes++;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "increcleanupOldLogTimes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void increcleanupOldLogTimes()\n{\r\n    this.cleanOldLogsTimes++;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getLogAggregationTimes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getLogAggregationTimes()\n{\r\n    return logAggregationTimes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getCleanOldLogsTimes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getCleanOldLogsTimes()\n{\r\n    return cleanOldLogsTimes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getAppAcls",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<ApplicationAccessType, String> getAppAcls()\n{\r\n    return appAcls;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshQueuesResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setSupported",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setSupported(boolean supported)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    this.builder.setSupported(supported);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "isSupported",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isSupported()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.getSupported();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResponseMessage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResponseMessage(String message)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    this.builder.setMessage(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResponseMessage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getResponseMessage()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return this.builder.getMessage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CsiAdaptorProtos.ValidateVolumeCapabilitiesResponse getProto()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getFileName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFileName()\n{\r\n    return fileName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setFileName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFileName(String fileName)\n{\r\n    this.fileName = fileName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getFileSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFileSize()\n{\r\n    return fileSize;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setFileSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFileSize(String fileSize)\n{\r\n    this.fileSize = fileSize;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getLastModifiedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getLastModifiedTime()\n{\r\n    return lastModifiedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setLastModifiedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLastModifiedTime(String lastModifiedTime)\n{\r\n    this.lastModifiedTime = lastModifiedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((fileName == null) ? 0 : fileName.hashCode());\r\n    result = prime * result + ((fileSize == null) ? 0 : fileSize.hashCode());\r\n    result = prime * result + ((lastModifiedTime == null) ? 0 : lastModifiedTime.hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object otherObj)\n{\r\n    if (otherObj == this) {\r\n        return true;\r\n    }\r\n    if (!(otherObj instanceof ContainerLogFileInfo)) {\r\n        return false;\r\n    }\r\n    ContainerLogFileInfo other = (ContainerLogFileInfo) otherObj;\r\n    return other.fileName.equals(fileName) && other.fileSize.equals(fileSize) && other.lastModifiedTime.equals(lastModifiedTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    builder.mergeFrom((DataInputStream) in);\r\n    if (builder.getOwner() != null) {\r\n        setOwner(new Text(builder.getOwner()));\r\n    }\r\n    if (builder.getRenewer() != null) {\r\n        setRenewer(new Text(builder.getRenewer()));\r\n    }\r\n    if (builder.getRealUser() != null) {\r\n        setRealUser(new Text(builder.getRealUser()));\r\n    }\r\n    setIssueDate(builder.getIssueDate());\r\n    setMaxDate(builder.getMaxDate());\r\n    setSequenceNumber(builder.getSequenceNumber());\r\n    setMasterKeyId(builder.getMasterKeyId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "readFieldsInOldFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void readFieldsInOldFormat(DataInput in) throws IOException\n{\r\n    super.readFields(in);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "setBuilderFields",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void setBuilderFields()\n{\r\n    if (builder.getOwner() != null && !builder.getOwner().equals(getOwner().toString())) {\r\n        builder.setOwner(getOwner().toString());\r\n    }\r\n    if (builder.getRenewer() != null && !builder.getRenewer().equals(getRenewer().toString())) {\r\n        builder.setRenewer(getRenewer().toString());\r\n    }\r\n    if (builder.getRealUser() != null && !builder.getRealUser().equals(getRealUser().toString())) {\r\n        builder.setRealUser(getRealUser().toString());\r\n    }\r\n    if (builder.getIssueDate() != getIssueDate()) {\r\n        builder.setIssueDate(getIssueDate());\r\n    }\r\n    if (builder.getMaxDate() != getMaxDate()) {\r\n        builder.setMaxDate(getMaxDate());\r\n    }\r\n    if (builder.getSequenceNumber() != getSequenceNumber()) {\r\n        builder.setSequenceNumber(getSequenceNumber());\r\n    }\r\n    if (builder.getMasterKeyId() != getMasterKeyId()) {\r\n        builder.setMasterKeyId(getMasterKeyId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    setBuilderFields();\r\n    builder.build().writeTo((DataOutputStream) out);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "writeInOldFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeInOldFormat(DataOutput out) throws IOException\n{\r\n    super.write(out);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YARNDelegationTokenIdentifierProto getProto()\n{\r\n    setBuilderFields();\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshNodesResourcesResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\dao",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getQueue()\n{\r\n    return this.queue;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\dao",
  "methodName" : "getParams",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "HashMap<String, String> getParams()\n{\r\n    return this.params;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\dao",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void add(ConfItem confItem)\n{\r\n    property.add(confItem);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\dao",
  "methodName" : "getItems",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ArrayList<ConfItem> getItems()\n{\r\n    return property;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    if (this.nodeAttributes != null) {\r\n        for (NodeAttribute nodeAttribute : nodeAttributes) {\r\n            builder.addNodeAttributes(((NodeAttributePBImpl) nodeAttribute).getProto());\r\n        }\r\n    }\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeToAttributesProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NodeToAttributesProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getNode()\n{\r\n    NodeToAttributesProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNode()) {\r\n        return null;\r\n    }\r\n    return p.getNode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNode(String node)\n{\r\n    maybeInitBuilder();\r\n    builder.setNode(node);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initNodeAttributes()\n{\r\n    if (this.nodeAttributes != null) {\r\n        return;\r\n    }\r\n    NodeToAttributesProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeAttributeProto> nodeAttributesProtoList = p.getNodeAttributesList();\r\n    List<NodeAttribute> attributes = new ArrayList<>();\r\n    if (nodeAttributesProtoList == null || nodeAttributesProtoList.size() == 0) {\r\n        this.nodeAttributes = attributes;\r\n        return;\r\n    }\r\n    for (NodeAttributeProto nodeAttributeProto : nodeAttributesProtoList) {\r\n        attributes.add(new NodeAttributePBImpl(nodeAttributeProto));\r\n    }\r\n    this.nodeAttributes = attributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<NodeAttribute> getNodeAttributes()\n{\r\n    initNodeAttributes();\r\n    return this.nodeAttributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeAttributes(List<NodeAttribute> attributes)\n{\r\n    if (nodeAttributes == null) {\r\n        nodeAttributes = new ArrayList<>();\r\n    }\r\n    nodeAttributes.clear();\r\n    nodeAttributes.addAll(attributes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (obj instanceof NodeToAttributes) {\r\n        NodeToAttributes other = (NodeToAttributes) obj;\r\n        if (getNodeAttributes() == null) {\r\n            if (other.getNodeAttributes() != null) {\r\n                return false;\r\n            }\r\n        } else if (!getNodeAttributes().containsAll(other.getNodeAttributes())) {\r\n            return false;\r\n        }\r\n        if (getNode() == null) {\r\n            if (other.getNode() != null) {\r\n                return false;\r\n            }\r\n        } else if (!getNode().equals(other.getNode())) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "selectToken",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Token<NMTokenIdentifier> selectToken(Text service, Collection<Token<? extends TokenIdentifier>> tokens)\n{\r\n    if (service == null) {\r\n        return null;\r\n    }\r\n    for (Token<? extends TokenIdentifier> token : tokens) {\r\n        LOG.debug(\"Looking for service: {}. Current token is {}\", service, token);\r\n        if (NMTokenIdentifier.KIND.equals(token.getKind()) && service.equals(token.getService())) {\r\n            return (Token<NMTokenIdentifier>) token;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getDefaultFSNodeLabelsRootDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getDefaultFSNodeLabelsRootDir() throws IOException\n{\r\n    return \"file:///tmp/hadoop-yarn-\" + UserGroupInformation.getCurrentUser().getShortUserName() + \"/\" + DEFAULT_DIR_NAME;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init(Configuration conf, CommonNodeLabelsManager mgr) throws Exception\n{\r\n    StoreSchema schema = new StoreSchema(EDITLOG_FILENAME, MIRROR_FILENAME);\r\n    initStore(conf, new Path(conf.get(YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR, getDefaultFSNodeLabelsRootDir())), schema, mgr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    super.closeFSStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "updateNodeToLabelsMappings",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void updateNodeToLabelsMappings(Map<NodeId, Set<String>> nodeToLabels) throws IOException\n{\r\n    NodeToLabelOp op = new NodeToLabelOp();\r\n    writeToLog(op.setNodeToLabels(nodeToLabels));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "storeNewClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeNewClusterNodeLabels(List<NodeLabel> labels) throws IOException\n{\r\n    AddClusterLabelOp op = new AddClusterLabelOp();\r\n    writeToLog(op.setLabels(labels));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "removeClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeClusterNodeLabels(Collection<String> labels) throws IOException\n{\r\n    RemoveClusterLabelOp op = new RemoveClusterLabelOp();\r\n    writeToLog(op.setLabels(labels));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void recover() throws YarnException, IOException\n{\r\n    super.recoverFromStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\sharedcache",
  "methodName" : "computeChecksum",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String computeChecksum(InputStream in) throws IOException\n{\r\n    return DigestUtils.sha256Hex(in);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "$for",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Builder<T> $for(String prefix, Class<T> api, T app, String wsPrefix)\n{\r\n    return new Builder<T>(prefix, api, app, wsPrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "$for",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Builder<T> $for(String prefix, Class<T> api, T app)\n{\r\n    return new Builder<T>(prefix, api, app);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "$for",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Builder<T> $for(String prefix, T app)\n{\r\n    return $for(prefix, (Class<T>) app.getClass(), app);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "$for",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Builder<T> $for(T app)\n{\r\n    return $for(\"\", app);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "$for",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Builder<T> $for(String prefix)\n{\r\n    return $for(prefix, null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setDriverName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setDriverName(String driverName)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setName(driverName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getDriverName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDriverName()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setVersion(String version)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setVendorVersion(version);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getVersion()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.getVendorVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CsiAdaptorProtos.GetPluginInfoResponse getProto()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void render()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "context",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ViewContext context()\n{\r\n    if (vc == null) {\r\n        if (injector == null) {\r\n            throw new WebAppException(join(\"Error accessing ViewContext from a\\n\", \"child constructor, either move the usage of the View methods\\n\", \"out of the constructor or inject the ViewContext into the\\n\", \"constructor\"));\r\n        }\r\n        vc = injector.getInstance(ViewContext.class);\r\n    }\r\n    return vc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "error",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Throwable error()\n{\r\n    return context().requestContext().error;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "status",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int status()\n{\r\n    return context().requestContext().status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "inDevMode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean inDevMode()\n{\r\n    return context().requestContext().devMode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "injector",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Injector injector()\n{\r\n    return context().requestContext().injector;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T getInstance(Class<T> cls)\n{\r\n    return injector().getInstance(cls);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "request",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HttpServletRequest request()\n{\r\n    return context().requestContext().getRequest();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "response",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HttpServletResponse response()\n{\r\n    return context().requestContext().response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "moreParams",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, String> moreParams()\n{\r\n    return context().requestContext().moreParams();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "cookies",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Cookie> cookies()\n{\r\n    return context().requestContext().cookies();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "outputStream",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ServletOutputStream outputStream()\n{\r\n    try {\r\n        return response().getOutputStream();\r\n    } catch (IOException e) {\r\n        throw new WebAppException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "writer",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PrintWriter writer()\n{\r\n    try {\r\n        return response().getWriter();\r\n    } catch (IOException e) {\r\n        throw new WebAppException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "$",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String $(String key, String defaultValue)\n{\r\n    String value = moreParams().get(key);\r\n    if (value == null) {\r\n        value = request().getParameter(key);\r\n    }\r\n    return value == null ? defaultValue : value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "$",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String $(String key)\n{\r\n    return $(key, \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "set",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void set(String key, String value)\n{\r\n    moreParams().put(key, value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "root",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String root()\n{\r\n    String root = System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV);\r\n    if (root == null || root.isEmpty()) {\r\n        root = \"/\";\r\n    }\r\n    return root;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "prefix",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String prefix()\n{\r\n    if (context().rc.prefix == null) {\r\n        return root();\r\n    } else {\r\n        return ujoin(root(), context().rc.prefix);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setTitle",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setTitle(String title)\n{\r\n    set(TITLE, title);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setTitle",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTitle(String title, String url)\n{\r\n    setTitle(title);\r\n    set(TITLE_LINK, url);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "root_url",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String root_url(String... parts)\n{\r\n    return ujoin(root(), parts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "url",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String url(String... parts)\n{\r\n    return ujoin(prefix(), parts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "info",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResponseInfo info(String about)\n{\r\n    return getInstance(ResponseInfo.class).about(about);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void render(Class<? extends SubView> cls)\n{\r\n    int saved = context().nestLevel;\r\n    getInstance(cls).renderPartial();\r\n    if (context().nestLevel != saved) {\r\n        throw new WebAppException(\"View \" + cls.getSimpleName() + \" not complete\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubmitApplicationRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationSubmissionContext != null) {\r\n        builder.setApplicationSubmissionContext(convertToProtoFormat(this.applicationSubmissionContext));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SubmitApplicationRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationSubmissionContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationSubmissionContext getApplicationSubmissionContext()\n{\r\n    SubmitApplicationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.applicationSubmissionContext != null) {\r\n        return this.applicationSubmissionContext;\r\n    }\r\n    if (!p.hasApplicationSubmissionContext()) {\r\n        return null;\r\n    }\r\n    this.applicationSubmissionContext = convertFromProtoFormat(p.getApplicationSubmissionContext());\r\n    return this.applicationSubmissionContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationSubmissionContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationSubmissionContext(ApplicationSubmissionContext applicationSubmissionContext)\n{\r\n    maybeInitBuilder();\r\n    if (applicationSubmissionContext == null)\r\n        builder.clearApplicationSubmissionContext();\r\n    this.applicationSubmissionContext = applicationSubmissionContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationSubmissionContextPBImpl convertFromProtoFormat(ApplicationSubmissionContextProto p)\n{\r\n    return new ApplicationSubmissionContextPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationSubmissionContextProto convertToProtoFormat(ApplicationSubmissionContext t)\n{\r\n    return ((ApplicationSubmissionContextPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AddToClusterNodeLabelsResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createRMProxy",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "T createRMProxy(final Configuration configuration, final Class<T> protocol, UserGroupInformation user, final Token<? extends TokenIdentifier> token) throws IOException\n{\r\n    try {\r\n        String rmClusterId = configuration.get(YarnConfiguration.RM_CLUSTER_ID, YarnConfiguration.DEFAULT_RM_CLUSTER_ID);\r\n        LOG.info(\"Creating RMProxy to RM {} for protocol {} for user {}\", rmClusterId, protocol.getSimpleName(), user);\r\n        if (token != null) {\r\n            user.addToken(token);\r\n            token.setService(ClientRMProxy.getAMRMTokenService(configuration));\r\n            setAuthModeInConf(configuration);\r\n        }\r\n        final T proxyConnection = user.doAs(new PrivilegedExceptionAction<T>() {\r\n\r\n            @Override\r\n            public T run() throws Exception {\r\n                return ClientRMProxy.createRMProxy(configuration, protocol);\r\n            }\r\n        });\r\n        return proxyConnection;\r\n    } catch (InterruptedException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "setAuthModeInConf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setAuthModeInConf(Configuration conf)\n{\r\n    conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION, SaslRpcServer.AuthMethod.TOKEN.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "assembleInvalidResponseIdExceptionMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String assembleInvalidResponseIdExceptionMessage(ApplicationAttemptId appAttemptId, int expected, int received)\n{\r\n    return \"Invalid responseId in AllocateRequest from application attempt: \" + appAttemptId + EXPECTED_HB_RESPONSEID_MESSAGE + expected + RECEIVED_HB_RESPONSEID_MESSAGE + received;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "parseExpectedResponseIdFromException",
  "errType" : [ "NumberFormatException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int parseExpectedResponseIdFromException(String exceptionMessage)\n{\r\n    if (exceptionMessage == null) {\r\n        return -1;\r\n    }\r\n    int start = exceptionMessage.indexOf(EXPECTED_HB_RESPONSEID_MESSAGE);\r\n    int end = exceptionMessage.indexOf(RECEIVED_HB_RESPONSEID_MESSAGE);\r\n    if (start == -1 || end == -1) {\r\n        return -1;\r\n    }\r\n    start += EXPECTED_HB_RESPONSEID_MESSAGE.length();\r\n    try {\r\n        return Integer.parseInt(exceptionMessage.substring(start, end));\r\n    } catch (NumberFormatException ex) {\r\n        return -1;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getNextResponseId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getNextResponseId(int responseId)\n{\r\n    return (responseId + 1) & Integer.MAX_VALUE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "addToOutstandingSchedulingRequests",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addToOutstandingSchedulingRequests(Collection<SchedulingRequest> requests, Map<Set<String>, List<SchedulingRequest>> outstandingSchedRequests)\n{\r\n    for (SchedulingRequest req : requests) {\r\n        List<SchedulingRequest> schedulingRequests = outstandingSchedRequests.computeIfAbsent(req.getAllocationTags(), x -> new LinkedList<>());\r\n        SchedulingRequest matchingReq = null;\r\n        for (SchedulingRequest schedReq : schedulingRequests) {\r\n            if (isMatchingSchedulingRequests(req, schedReq)) {\r\n                matchingReq = schedReq;\r\n                break;\r\n            }\r\n        }\r\n        if (matchingReq != null) {\r\n            matchingReq.getResourceSizing().setNumAllocations(req.getResourceSizing().getNumAllocations());\r\n        } else {\r\n            schedulingRequests.add(req);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "isMatchingSchedulingRequests",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean isMatchingSchedulingRequests(SchedulingRequest schedReq1, SchedulingRequest schedReq2)\n{\r\n    return schedReq1.getPriority().equals(schedReq2.getPriority()) && schedReq1.getExecutionType().getExecutionType().equals(schedReq1.getExecutionType().getExecutionType()) && schedReq1.getAllocationRequestId() == schedReq2.getAllocationRequestId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "removeFromOutstandingSchedulingRequests",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void removeFromOutstandingSchedulingRequests(Collection<Container> containers, Map<Set<String>, List<SchedulingRequest>> outstandingSchedRequests)\n{\r\n    if (containers == null || containers.isEmpty()) {\r\n        return;\r\n    }\r\n    for (Container container : containers) {\r\n        if (container.getAllocationTags() != null) {\r\n            List<SchedulingRequest> schedReqs = outstandingSchedRequests.get(container.getAllocationTags());\r\n            if (schedReqs != null && !schedReqs.isEmpty()) {\r\n                Iterator<SchedulingRequest> iter = schedReqs.iterator();\r\n                while (iter.hasNext()) {\r\n                    SchedulingRequest schedReq = iter.next();\r\n                    if (schedReq.getPriority().equals(container.getPriority()) && schedReq.getAllocationRequestId() == container.getAllocationRequestId()) {\r\n                        int numAllocations = schedReq.getResourceSizing().getNumAllocations();\r\n                        numAllocations--;\r\n                        if (numAllocations == 0) {\r\n                            iter.remove();\r\n                        } else {\r\n                            schedReq.getResourceSizing().setNumAllocations(numAllocations);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "registerMetrics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GenericEventTypeMetrics registerMetrics()\n{\r\n    if (!isInitialized) {\r\n        if (this.ms != null) {\r\n            LOG.info(\"Registering GenericEventTypeMetrics\");\r\n            ms.register(info.name(), info.description(), this);\r\n            isInitialized = true;\r\n        }\r\n    }\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "increment",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void increment(T type, long processingTimeUs)\n{\r\n    if (eventCountMetrics.get(type) != null) {\r\n        eventCountMetrics.get(type).incr();\r\n        processingTimeMetrics.get(type).incr(processingTimeUs);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long get(T type)\n{\r\n    return eventCountMetrics.get(type).value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "getTotalProcessingTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTotalProcessingTime(T type)\n{\r\n    return processingTimeMetrics.get(type).value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "getEventCountMetrics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "EnumMap<T, MutableGaugeLong> getEventCountMetrics()\n{\r\n    return eventCountMetrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "getProcessingTimeMetrics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "EnumMap<T, MutableGaugeLong> getProcessingTimeMetrics()\n{\r\n    return processingTimeMetrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "getRegistry",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MetricsRegistry getRegistry()\n{\r\n    return registry;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "getInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MetricsInfo getInfo()\n{\r\n    return info;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "getMetrics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void getMetrics(MetricsCollector collector, boolean all)\n{\r\n    registry.snapshot(collector.addRecord(registry.info()), all);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "getEnumClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<T> getEnumClass()\n{\r\n    return enumClass;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetClusterNodeLabelsRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "IncreaseContainersResourceResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.succeededRequests != null) {\r\n        addSucceededRequestsToProto();\r\n    }\r\n    if (this.failedRequests != null) {\r\n        addFailedRequestsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = IncreaseContainersResourceResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getSuccessfullyIncreasedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerId> getSuccessfullyIncreasedContainers()\n{\r\n    initSucceededRequests();\r\n    return this.succeededRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setSuccessfullyIncreasedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setSuccessfullyIncreasedContainers(List<ContainerId> succeededRequests)\n{\r\n    maybeInitBuilder();\r\n    if (succeededRequests == null) {\r\n        builder.clearSucceededRequests();\r\n    }\r\n    this.succeededRequests = succeededRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initSucceededRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initSucceededRequests()\n{\r\n    if (this.succeededRequests != null) {\r\n        return;\r\n    }\r\n    IncreaseContainersResourceResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerIdProto> list = p.getSucceededRequestsList();\r\n    this.succeededRequests = new ArrayList<ContainerId>();\r\n    for (ContainerIdProto c : list) {\r\n        this.succeededRequests.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addSucceededRequestsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addSucceededRequestsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearSucceededRequests();\r\n    if (this.succeededRequests == null) {\r\n        return;\r\n    }\r\n    Iterable<ContainerIdProto> iterable = new Iterable<ContainerIdProto>() {\r\n\r\n        @Override\r\n        public Iterator<ContainerIdProto> iterator() {\r\n            return new Iterator<ContainerIdProto>() {\r\n\r\n                Iterator<ContainerId> iter = succeededRequests.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ContainerIdProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllSucceededRequests(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ContainerId, SerializedException> getFailedRequests()\n{\r\n    initFailedRequests();\r\n    return this.failedRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFailedRequests(Map<ContainerId, SerializedException> failedRequests)\n{\r\n    maybeInitBuilder();\r\n    if (failedRequests == null) {\r\n        builder.clearFailedRequests();\r\n    }\r\n    this.failedRequests = failedRequests;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initFailedRequests()\n{\r\n    if (this.failedRequests != null) {\r\n        return;\r\n    }\r\n    IncreaseContainersResourceResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerExceptionMapProto> protoList = p.getFailedRequestsList();\r\n    this.failedRequests = new HashMap<ContainerId, SerializedException>();\r\n    for (ContainerExceptionMapProto ce : protoList) {\r\n        this.failedRequests.put(convertFromProtoFormat(ce.getContainerId()), convertFromProtoFormat(ce.getException()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addFailedRequestsToProto",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void addFailedRequestsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearFailedRequests();\r\n    if (this.failedRequests == null) {\r\n        return;\r\n    }\r\n    List<ContainerExceptionMapProto> protoList = new ArrayList<ContainerExceptionMapProto>();\r\n    for (Map.Entry<ContainerId, SerializedException> entry : this.failedRequests.entrySet()) {\r\n        protoList.add(ContainerExceptionMapProto.newBuilder().setContainerId(convertToProtoFormat(entry.getKey())).setException(convertToProtoFormat(entry.getValue())).build());\r\n    }\r\n    builder.addAllFailedRequests(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SerializedExceptionPBImpl convertFromProtoFormat(SerializedExceptionProto p)\n{\r\n    return new SerializedExceptionPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SerializedExceptionProto convertToProtoFormat(SerializedException t)\n{\r\n    return ((SerializedExceptionPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationAttemptsRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (applicationId != null) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetApplicationAttemptsRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    if (this.applicationId != null) {\r\n        return this.applicationId;\r\n    }\r\n    GetApplicationAttemptsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null) {\r\n        builder.clearApplicationId();\r\n    }\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CheckForDecommissioningNodesResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = CheckForDecommissioningNodesResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.decommissioningNodes != null) {\r\n        addDecommissioningNodesToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addDecommissioningNodesToProto",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addDecommissioningNodesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearDecommissioningNodes();\r\n    if (this.decommissioningNodes == null)\r\n        return;\r\n    Set<NodeIdProto> nodeIdProtos = new HashSet<NodeIdProto>();\r\n    for (NodeId nodeId : decommissioningNodes) {\r\n        nodeIdProtos.add(convertToProtoFormat(nodeId));\r\n    }\r\n    builder.addAllDecommissioningNodes(nodeIdProtos);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId nodeId)\n{\r\n    return ((NodeIdPBImpl) nodeId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setDecommissioningNodes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setDecommissioningNodes(Set<NodeId> decommissioningNodes)\n{\r\n    maybeInitBuilder();\r\n    if (decommissioningNodes == null)\r\n        builder.clearDecommissioningNodes();\r\n    this.decommissioningNodes = decommissioningNodes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getDecommissioningNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<NodeId> getDecommissioningNodes()\n{\r\n    initNodesDecommissioning();\r\n    return this.decommissioningNodes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodesDecommissioning",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initNodesDecommissioning()\n{\r\n    if (this.decommissioningNodes != null) {\r\n        return;\r\n    }\r\n    CheckForDecommissioningNodesResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeIdProto> nodeIds = p.getDecommissioningNodesList();\r\n    this.decommissioningNodes = new HashSet<NodeId>();\r\n    for (NodeIdProto nodeIdProto : nodeIds) {\r\n        this.decommissioningNodes.add(convertFromProtoFormat(nodeIdProto));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId convertFromProtoFormat(NodeIdProto nodeIdProto)\n{\r\n    return new NodeIdPBImpl(nodeIdProto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RegisterApplicationMasterRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.placementConstraints != null) {\r\n        addPlacementConstraintMap();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addPlacementConstraintMap",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void addPlacementConstraintMap()\n{\r\n    maybeInitBuilder();\r\n    builder.clearPlacementConstraints();\r\n    if (this.placementConstraints == null) {\r\n        return;\r\n    }\r\n    List<YarnProtos.PlacementConstraintMapEntryProto> protoList = new ArrayList<>();\r\n    for (Map.Entry<Set<String>, PlacementConstraint> entry : this.placementConstraints.entrySet()) {\r\n        protoList.add(YarnProtos.PlacementConstraintMapEntryProto.newBuilder().addAllAllocationTags(entry.getKey()).setPlacementConstraint(new PlacementConstraintToProtoConverter(entry.getValue()).convert()).build());\r\n    }\r\n    builder.addAllPlacementConstraints(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = RegisterApplicationMasterRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getHost()\n{\r\n    RegisterApplicationMasterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getHost();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setHost",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHost(String host)\n{\r\n    maybeInitBuilder();\r\n    if (host == null) {\r\n        builder.clearHost();\r\n        return;\r\n    }\r\n    builder.setHost(host);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getRpcPort",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getRpcPort()\n{\r\n    RegisterApplicationMasterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getRpcPort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setRpcPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRpcPort(int port)\n{\r\n    maybeInitBuilder();\r\n    builder.setRpcPort(port);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getTrackingUrl()\n{\r\n    RegisterApplicationMasterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getTrackingUrl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setTrackingUrl(String url)\n{\r\n    maybeInitBuilder();\r\n    if (url == null) {\r\n        builder.clearTrackingUrl();\r\n        return;\r\n    }\r\n    builder.setTrackingUrl(url);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initPlacementConstraintMap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initPlacementConstraintMap()\n{\r\n    if (this.placementConstraints != null) {\r\n        return;\r\n    }\r\n    RegisterApplicationMasterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<YarnProtos.PlacementConstraintMapEntryProto> pcmList = p.getPlacementConstraintsList();\r\n    this.placementConstraints = new HashMap<>();\r\n    for (YarnProtos.PlacementConstraintMapEntryProto e : pcmList) {\r\n        this.placementConstraints.put(new HashSet<>(e.getAllocationTagsList()), new PlacementConstraintFromProtoConverter(e.getPlacementConstraint()).convert());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getPlacementConstraints",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<Set<String>, PlacementConstraint> getPlacementConstraints()\n{\r\n    initPlacementConstraintMap();\r\n    return this.placementConstraints;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setPlacementConstraints",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setPlacementConstraints(Map<Set<String>, PlacementConstraint> constraints)\n{\r\n    maybeInitBuilder();\r\n    if (constraints == null) {\r\n        builder.clearPlacementConstraints();\r\n    } else {\r\n        removeEmptyKeys(constraints);\r\n    }\r\n    this.placementConstraints = constraints;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "removeEmptyKeys",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void removeEmptyKeys(Map<Set<String>, PlacementConstraint> constraintMap)\n{\r\n    Iterator<Set<String>> iter = constraintMap.keySet().iterator();\r\n    while (iter.hasNext()) {\r\n        Set<String> aTags = iter.next();\r\n        if (aTags.size() == 0) {\r\n            iter.remove();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void render()\n{\r\n    puts(\"Request URI: \", request().getRequestURI());\r\n    puts(\"Query parameters:\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    Map<String, String[]> params = request().getParameterMap();\r\n    for (Map.Entry<String, String[]> e : params.entrySet()) {\r\n        puts(\"  \", e.getKey(), \"=\", valJoiner.join(e.getValue()));\r\n    }\r\n    puts(\"More parameters:\");\r\n    for (Map.Entry<String, String> e : moreParams().entrySet()) {\r\n        puts(\"  \", e.getKey(), \"=\", e.getValue());\r\n    }\r\n    puts(\"Path info: \", request().getPathInfo());\r\n    puts(\"Path translated: \", request().getPathTranslated());\r\n    puts(\"Auth type: \", request().getAuthType());\r\n    puts(\"Remote address: \" + request().getRemoteAddr());\r\n    puts(\"Remote user: \", request().getRemoteUser());\r\n    puts(\"Servlet attributes:\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    Enumeration<String> attrNames = request().getAttributeNames();\r\n    while (attrNames.hasMoreElements()) {\r\n        String key = attrNames.nextElement();\r\n        puts(\"  \", key, \"=\", request().getAttribute(key));\r\n    }\r\n    puts(\"Headers:\");\r\n    @SuppressWarnings(\"unchecked\")\r\n    Enumeration<String> headerNames = request().getHeaderNames();\r\n    while (headerNames.hasMoreElements()) {\r\n        String key = headerNames.nextElement();\r\n        puts(\"  \", key, \"=\", request().getHeader(key));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void write(OutputStream os, CommonNodeLabelsManager mgr) throws IOException\n{\r\n    ((AddToClusterNodeLabelsRequestPBImpl) AddToClusterNodeLabelsRequestPBImpl.newInstance(mgr.getClusterNodeLabels())).getProto().writeDelimitedTo(os);\r\n    if (mgr.isCentralizedConfiguration()) {\r\n        ((ReplaceLabelsOnNodeRequestPBImpl) ReplaceLabelsOnNodeRequest.newInstance(mgr.getNodeLabels())).getProto().writeDelimitedTo(os);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void recover(InputStream is, CommonNodeLabelsManager mgr) throws IOException\n{\r\n    List<NodeLabel> labels = new AddToClusterNodeLabelsRequestPBImpl(YarnServerResourceManagerServiceProtos.AddToClusterNodeLabelsRequestProto.parseDelimitedFrom(is)).getNodeLabels();\r\n    mgr.addToCluserNodeLabels(labels);\r\n    if (mgr.isCentralizedConfiguration()) {\r\n        Map<NodeId, Set<String>> nodeToLabels = new ReplaceLabelsOnNodeRequestPBImpl(YarnServerResourceManagerServiceProtos.ReplaceLabelsOnNodeRequestProto.parseDelimitedFrom(is)).getNodeToLabels();\r\n        mgr.replaceLabelsOnNode(nodeToLabels);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getOpCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getOpCode()\n{\r\n    return -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "toAppID",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId toAppID(String aid)\n{\r\n    Iterator<String> it = _split(aid).iterator();\r\n    return toAppID(APP, aid, it);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "toAppID",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ApplicationId toAppID(String prefix, String s, Iterator<String> it)\n{\r\n    if (!it.hasNext() || !it.next().equals(prefix)) {\r\n        throwParseException(sjoin(prefix, ID), s);\r\n    }\r\n    shouldHaveNext(prefix, s, it);\r\n    ApplicationId appId = ApplicationId.newInstance(Long.parseLong(it.next()), Integer.parseInt(it.next()));\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "shouldHaveNext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void shouldHaveNext(String prefix, String s, Iterator<String> it)\n{\r\n    if (!it.hasNext()) {\r\n        throwParseException(sjoin(prefix, ID), s);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "throwParseException",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void throwParseException(String name, String s)\n{\r\n    throw new YarnRuntimeException(join(\"Error parsing \", name, \": \", s));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setEnvFromString",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setEnvFromString(Map<String, String> env, String envVar, String varString, String classPathSeparator)\n{\r\n    Matcher m = VAR_SUBBER.matcher(varString);\r\n    StringBuffer sb = new StringBuffer();\r\n    while (m.find()) {\r\n        String var = m.group(1);\r\n        String replace = env.get(var);\r\n        if (replace == null) {\r\n            replace = System.getenv(var);\r\n        }\r\n        if (replace == null) {\r\n            replace = \"\";\r\n        }\r\n        m.appendReplacement(sb, Matcher.quoteReplacement(replace));\r\n    }\r\n    m.appendTail(sb);\r\n    addToEnvironment(env, envVar, sb.toString(), classPathSeparator);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setEnvFromInputString",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setEnvFromInputString(Map<String, String> env, String envString, String classPathSeparator)\n{\r\n    if (envString != null && envString.length() > 0) {\r\n        Matcher varValMatcher = VARVAL_SPLITTER.matcher(envString);\r\n        while (varValMatcher.find()) {\r\n            String envVar = varValMatcher.group(1);\r\n            String varString = varValMatcher.group(2);\r\n            setEnvFromString(env, envVar, varString, classPathSeparator);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setEnvFromInputStringNoExpand",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setEnvFromInputStringNoExpand(Map<String, String> env, String envString, String classPathSeparator)\n{\r\n    if (envString != null && envString.length() > 0) {\r\n        Matcher varValMatcher = VARVAL_SPLITTER.matcher(envString);\r\n        while (varValMatcher.find()) {\r\n            String envVar = varValMatcher.group(1);\r\n            String varString = varValMatcher.group(2);\r\n            addToEnvironment(env, envVar, varString, classPathSeparator);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setEnvFromInputStringMap",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setEnvFromInputStringMap(Map<String, String> env, Map<String, String> inputMap, String classPathSeparator)\n{\r\n    for (Map.Entry<String, String> inputVar : inputMap.entrySet()) {\r\n        String envVar = inputVar.getKey();\r\n        String varString = inputVar.getValue();\r\n        setEnvFromString(env, envVar, varString, classPathSeparator);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setEnvFromInputProperty",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setEnvFromInputProperty(Map<String, String> env, String propName, String defaultPropValue, Configuration conf, String classPathSeparator)\n{\r\n    String envString = conf.get(propName, defaultPropValue);\r\n    Map<String, String> tmpEnv = new HashMap<String, String>();\r\n    Apps.setEnvFromInputStringNoExpand(tmpEnv, envString, classPathSeparator);\r\n    Map<String, String> inputMap = conf.getPropsWithPrefix(propName + \".\");\r\n    tmpEnv.putAll(inputMap);\r\n    setEnvFromInputStringMap(env, tmpEnv, classPathSeparator);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getEnvVarsFromInputString",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Set<String> getEnvVarsFromInputString(String envString)\n{\r\n    Set<String> envSet = new HashSet<>();\r\n    if (envString != null && envString.length() > 0) {\r\n        Matcher varValMatcher = VARVAL_SPLITTER.matcher(envString);\r\n        while (varValMatcher.find()) {\r\n            String envVar = varValMatcher.group(1);\r\n            envSet.add(envVar);\r\n        }\r\n    }\r\n    return envSet;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getEnvVarsFromInputProperty",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Set<String> getEnvVarsFromInputProperty(String propName, String defaultPropValue, Configuration conf)\n{\r\n    String envString = conf.get(propName, defaultPropValue);\r\n    Set<String> varSet = getEnvVarsFromInputString(envString);\r\n    Map<String, String> propMap = conf.getPropsWithPrefix(propName + \".\");\r\n    varSet.addAll(propMap.keySet());\r\n    return varSet;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "setEnvFromInputString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setEnvFromInputString(Map<String, String> env, String envString)\n{\r\n    setEnvFromInputString(env, envString, File.pathSeparator);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "addToEnvironment",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addToEnvironment(Map<String, String> environment, String variable, String value, String classPathSeparator)\n{\r\n    String val = environment.get(variable);\r\n    if (val == null) {\r\n        val = value;\r\n    } else {\r\n        val = val + classPathSeparator + value;\r\n    }\r\n    environment.put(StringInterner.weakIntern(variable), StringInterner.weakIntern(val));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "addToEnvironment",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addToEnvironment(Map<String, String> environment, String variable, String value)\n{\r\n    addToEnvironment(environment, variable, value, File.pathSeparator);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "crossPlatformify",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String crossPlatformify(String var)\n{\r\n    return ApplicationConstants.PARAMETER_EXPANSION_LEFT + var + ApplicationConstants.PARAMETER_EXPANSION_RIGHT;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "shouldCountTowardsNodeBlacklisting",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean shouldCountTowardsNodeBlacklisting(int exitStatus)\n{\r\n    switch(exitStatus) {\r\n        case ContainerExitStatus.PREEMPTED:\r\n        case ContainerExitStatus.KILLED_BY_RESOURCEMANAGER:\r\n        case ContainerExitStatus.KILLED_BY_APPMASTER:\r\n        case ContainerExitStatus.KILLED_AFTER_APP_COMPLETION:\r\n        case ContainerExitStatus.ABORTED:\r\n            return false;\r\n        case ContainerExitStatus.DISKS_FAILED:\r\n            return false;\r\n        case ContainerExitStatus.KILLED_EXCEEDED_VMEM:\r\n        case ContainerExitStatus.KILLED_EXCEEDED_PMEM:\r\n            return false;\r\n        case ContainerExitStatus.SUCCESS:\r\n            return false;\r\n        case ContainerExitStatus.INVALID:\r\n            return true;\r\n        default:\r\n            return true;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "isApplicationFinalState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isApplicationFinalState(YarnApplicationState appState)\n{\r\n    return appState == YarnApplicationState.FINISHED || appState == YarnApplicationState.FAILED || appState == YarnApplicationState.KILLED;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "locateMapper",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ObjectMapper locateMapper(Class<?> type, MediaType mediaType)\n{\r\n    ObjectMapper mapper = super.locateMapper(type, mediaType);\r\n    configObjectMapper(mapper);\r\n    return mapper;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "configObjectMapper",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void configObjectMapper(ObjectMapper mapper)\n{\r\n    AnnotationIntrospector introspector = new JaxbAnnotationIntrospector(TypeFactory.defaultInstance());\r\n    mapper.setAnnotationIntrospector(introspector);\r\n    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnServiceProtos.RestartContainerResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "formatContainerLogHeader",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "byte[] formatContainerLogHeader(String containerId, String nodeId, ContainerLogAggregationType logType, String fileName, String lastModifiedTime, long fileLength)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    String containerStr = String.format(LogToolUtils.CONTAINER_ON_NODE_PATTERN, containerId, nodeId);\r\n    sb.append(containerStr + \"\\n\").append(\"LogAggregationType: \" + logType + \"\\n\").append(StringUtils.repeat(\"=\", containerStr.length()) + \"\\n\").append(\"LogType:\" + fileName + \"\\n\").append(\"LogLastModifiedTime:\" + lastModifiedTime + \"\\n\").append(\"LogLength:\" + fileLength + \"\\n\").append(\"LogContents:\\n\");\r\n    return sb.toString().getBytes(Charset.forName(\"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "outputContainerLog",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void outputContainerLog(String containerId, String nodeId, String fileName, long fileLength, long outputSize, String lastModifiedTime, InputStream fis, OutputStream os, byte[] buf, ContainerLogAggregationType logType) throws IOException\n{\r\n    long toSkip = 0;\r\n    long totalBytesToRead = fileLength;\r\n    long skipAfterRead = 0;\r\n    if (outputSize < 0) {\r\n        long absBytes = Math.abs(outputSize);\r\n        if (absBytes < fileLength) {\r\n            toSkip = fileLength - absBytes;\r\n            totalBytesToRead = absBytes;\r\n        }\r\n        org.apache.hadoop.io.IOUtils.skipFully(fis, toSkip);\r\n    } else {\r\n        if (outputSize < fileLength) {\r\n            totalBytesToRead = outputSize;\r\n            skipAfterRead = fileLength - outputSize;\r\n        }\r\n    }\r\n    long curRead = 0;\r\n    long pendingRead = totalBytesToRead - curRead;\r\n    int toRead = pendingRead > buf.length ? buf.length : (int) pendingRead;\r\n    int len = fis.read(buf, 0, toRead);\r\n    boolean keepGoing = (len != -1 && curRead < totalBytesToRead);\r\n    byte[] b = formatContainerLogHeader(containerId, nodeId, logType, fileName, lastModifiedTime, fileLength);\r\n    os.write(b, 0, b.length);\r\n    while (keepGoing) {\r\n        os.write(buf, 0, len);\r\n        curRead += len;\r\n        pendingRead = totalBytesToRead - curRead;\r\n        toRead = pendingRead > buf.length ? buf.length : (int) pendingRead;\r\n        len = fis.read(buf, 0, toRead);\r\n        keepGoing = (len != -1 && curRead < totalBytesToRead);\r\n    }\r\n    org.apache.hadoop.io.IOUtils.skipFully(fis, skipAfterRead);\r\n    os.flush();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "outputContainerLogThroughZeroCopy",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void outputContainerLogThroughZeroCopy(String containerId, String nodeId, String fileName, long fileLength, long outputSize, String lastModifiedTime, FileInputStream fis, OutputStream os, ContainerLogAggregationType logType) throws IOException\n{\r\n    long toSkip = 0;\r\n    long totalBytesToRead = fileLength;\r\n    if (outputSize < 0) {\r\n        long absBytes = Math.abs(outputSize);\r\n        if (absBytes < fileLength) {\r\n            toSkip = fileLength - absBytes;\r\n            totalBytesToRead = absBytes;\r\n        }\r\n    } else {\r\n        if (outputSize < fileLength) {\r\n            totalBytesToRead = outputSize;\r\n        }\r\n    }\r\n    byte[] b = formatContainerLogHeader(containerId, nodeId, logType, fileName, lastModifiedTime, fileLength);\r\n    os.write(b, 0, b.length);\r\n    if (totalBytesToRead > 0) {\r\n        FileChannel inputChannel = fis.getChannel();\r\n        WritableByteChannel outputChannel = Channels.newChannel(os);\r\n        long position = toSkip;\r\n        while (totalBytesToRead > 0) {\r\n            long transferred = inputChannel.transferTo(position, totalBytesToRead, outputChannel);\r\n            totalBytesToRead -= transferred;\r\n            position += transferred;\r\n        }\r\n        os.flush();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "createPrintStream",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "PrintStream createPrintStream(String localDir, String nodeId, String containerId) throws IOException\n{\r\n    PrintStream out = System.out;\r\n    if (localDir != null && !localDir.isEmpty()) {\r\n        Path nodePath = new Path(localDir, LogAggregationUtils.getNodeString(nodeId));\r\n        Files.createDirectories(Paths.get(nodePath.toString()));\r\n        Path containerLogPath = new Path(nodePath, containerId);\r\n        out = new PrintStream(containerLogPath.toString(), \"UTF-8\");\r\n    }\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getResponseFromNMWebService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ClientResponse getResponseFromNMWebService(Configuration conf, Client webServiceClient, ContainerLogsRequest request, String logFile)\n{\r\n    WebResource webResource = webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf) + request.getNodeHttpAddress());\r\n    return webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(request.getContainerId()).path(\"logs\").path(logFile).queryParam(\"size\", Long.toString(request.getBytes())).accept(MediaType.TEXT_PLAIN).get(ClientResponse.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"FileSystemTimelineWriter writing to \" + activePath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putEntities",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "TimelinePutResponse putEntities(ApplicationAttemptId appAttemptId, TimelineEntityGroupId groupId, TimelineEntity... entities) throws IOException, YarnException\n{\r\n    if (appAttemptId == null) {\r\n        return putEntities(entities);\r\n    }\r\n    List<TimelineEntity> entitiesToDBStore = new ArrayList<TimelineEntity>();\r\n    List<TimelineEntity> entitiesToSummaryCache = new ArrayList<TimelineEntity>();\r\n    List<TimelineEntity> entitiesToEntityCache = new ArrayList<TimelineEntity>();\r\n    Path attemptDir = attemptDirCache.getAppAttemptDir(appAttemptId);\r\n    for (TimelineEntity entity : entities) {\r\n        if (summaryEntityTypes.contains(entity.getEntityType())) {\r\n            entitiesToSummaryCache.add(entity);\r\n        } else {\r\n            if (groupId != null) {\r\n                entitiesToEntityCache.add(entity);\r\n            } else {\r\n                entitiesToDBStore.add(entity);\r\n            }\r\n        }\r\n    }\r\n    if (!entitiesToSummaryCache.isEmpty()) {\r\n        Path summaryLogPath = new Path(attemptDir, SUMMARY_LOG_PREFIX + appAttemptId.toString());\r\n        LOG.debug(\"Writing summary log for {} to {}\", appAttemptId, summaryLogPath);\r\n        this.logFDsCache.writeSummaryEntityLogs(fs, summaryLogPath, objMapper, appAttemptId, entitiesToSummaryCache, isAppendSupported);\r\n    }\r\n    if (!entitiesToEntityCache.isEmpty()) {\r\n        Path entityLogPath = new Path(attemptDir, ENTITY_LOG_PREFIX + groupId.toString());\r\n        LOG.debug(\"Writing entity log for {} to {}\", groupId, entityLogPath);\r\n        this.logFDsCache.writeEntityLogs(fs, entityLogPath, objMapper, appAttemptId, groupId, entitiesToEntityCache, isAppendSupported);\r\n    }\r\n    if (!entitiesToDBStore.isEmpty()) {\r\n        putEntities(entitiesToDBStore.toArray(new TimelineEntity[entitiesToDBStore.size()]));\r\n    }\r\n    return new TimelinePutResponse();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putDomain",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void putDomain(ApplicationAttemptId appAttemptId, TimelineDomain domain) throws IOException, YarnException\n{\r\n    if (appAttemptId == null) {\r\n        putDomain(domain);\r\n    } else {\r\n        writeDomain(appAttemptId, domain);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void close() throws Exception\n{\r\n    if (logFDsCache != null) {\r\n        LOG.debug(\"Closing cache\");\r\n        logFDsCache.flush();\r\n    }\r\n    IOUtils.cleanupWithLogger(LOG, logFDsCache, fs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void flush() throws IOException\n{\r\n    if (logFDsCache != null) {\r\n        LOG.debug(\"Flushing cache\");\r\n        logFDsCache.flush();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createObjectMapper",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ObjectMapper createObjectMapper()\n{\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(TypeFactory.defaultInstance()));\r\n    mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);\r\n    mapper.configure(SerializationFeature.FLUSH_AFTER_WRITE_VALUE, false);\r\n    return mapper;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "writeDomain",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void writeDomain(ApplicationAttemptId appAttemptId, TimelineDomain domain) throws IOException\n{\r\n    Path domainLogPath = new Path(attemptDirCache.getAppAttemptDir(appAttemptId), DOMAIN_LOG_PREFIX + appAttemptId.toString());\r\n    LOG.debug(\"Writing domains for {} to {}\", appAttemptId, domainLogPath);\r\n    this.logFDsCache.writeDomainLog(fs, domainLogPath, objMapper, domain, isAppendSupported);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeReports",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<NodeReport> getNodeReports()\n{\r\n    initLocalNodeManagerInfosList();\r\n    return this.nodeManagerInfoList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeReports",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setNodeReports(List<NodeReport> nodeManagers)\n{\r\n    if (nodeManagers == null) {\r\n        builder.clearNodeReports();\r\n    }\r\n    this.nodeManagerInfoList = nodeManagers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetClusterNodesResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodeManagerInfoList != null) {\r\n        addLocalNodeManagerInfosToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetClusterNodesResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalNodeManagerInfosList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalNodeManagerInfosList()\n{\r\n    if (this.nodeManagerInfoList != null) {\r\n        return;\r\n    }\r\n    GetClusterNodesResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeReportProto> list = p.getNodeReportsList();\r\n    nodeManagerInfoList = new ArrayList<NodeReport>();\r\n    for (NodeReportProto a : list) {\r\n        nodeManagerInfoList.add(convertFromProtoFormat(a));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalNodeManagerInfosToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addLocalNodeManagerInfosToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeReports();\r\n    if (nodeManagerInfoList == null)\r\n        return;\r\n    Iterable<NodeReportProto> iterable = new Iterable<NodeReportProto>() {\r\n\r\n        @Override\r\n        public Iterator<NodeReportProto> iterator() {\r\n            return new Iterator<NodeReportProto>() {\r\n\r\n                Iterator<NodeReport> iter = nodeManagerInfoList.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public NodeReportProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllNodeReports(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeReportPBImpl convertFromProtoFormat(NodeReportProto p)\n{\r\n    return new NodeReportPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeReportProto convertToProtoFormat(NodeReport t)\n{\r\n    return ((NodeReportPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    out.write(proto.toByteArray());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    proto = DockerCredentialTokenIdentifierProto.parseFrom((DataInputStream) in);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DockerCredentialTokenIdentifierProto getProto()\n{\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getKind",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Text getKind()\n{\r\n    return KIND;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UserGroupInformation getUser()\n{\r\n    return UserGroupInformation.createRemoteUser(getRegistryUrl() + \"-\" + getApplicationId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getRegistryUrl",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRegistryUrl()\n{\r\n    String registryUrl = null;\r\n    if (proto.hasRegistryUrl()) {\r\n        registryUrl = proto.getRegistryUrl();\r\n    }\r\n    return registryUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getApplicationId()\n{\r\n    String applicationId = null;\r\n    if (proto.hasApplicationId()) {\r\n        applicationId = proto.getApplicationId();\r\n    }\r\n    return applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodesToAttributesMappingResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "getGraphFromClasses",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Graph getGraphFromClasses(String graphName, List<String> classes) throws Exception\n{\r\n    Graph ret = null;\r\n    if (classes.size() != 1) {\r\n        ret = new Graph(graphName);\r\n    }\r\n    for (String className : classes) {\r\n        Class clz = Class.forName(className);\r\n        Field factoryField = clz.getDeclaredField(\"stateMachineFactory\");\r\n        factoryField.setAccessible(true);\r\n        StateMachineFactory factory = (StateMachineFactory) factoryField.get(null);\r\n        if (classes.size() == 1) {\r\n            return factory.generateStateGraph(graphName);\r\n        }\r\n        String gname = clz.getSimpleName();\r\n        if (gname.endsWith(\"Impl\")) {\r\n            gname = gname.substring(0, gname.length() - 4);\r\n        }\r\n        if (ret != null) {\r\n            ret.addSubGraph(factory.generateStateGraph(gname));\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    if (args.length < 3) {\r\n        System.err.printf(\"Usage: %s <GraphName> <class[,class[,...]]> <OutputFile>%n\", VisualizeStateMachine.class.getName());\r\n        System.exit(1);\r\n    }\r\n    String[] classes = args[1].split(\",\");\r\n    ArrayList<String> validClasses = new ArrayList<String>();\r\n    for (String c : classes) {\r\n        String vc = c.trim();\r\n        if (vc.length() > 0) {\r\n            validClasses.add(vc);\r\n        }\r\n    }\r\n    Graph g = getGraphFromClasses(args[0], validClasses);\r\n    g.save(args[2]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationTimeoutProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ApplicationTimeoutProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getTimeoutType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationTimeoutType getTimeoutType()\n{\r\n    ApplicationTimeoutProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationTimeoutType()) {\r\n        return null;\r\n    }\r\n    return ProtoUtils.convertFromProtoFormat(p.getApplicationTimeoutType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setTimeoutType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setTimeoutType(ApplicationTimeoutType type)\n{\r\n    maybeInitBuilder();\r\n    if (type == null) {\r\n        builder.clearApplicationTimeoutType();\r\n        return;\r\n    }\r\n    builder.setApplicationTimeoutType(ProtoUtils.convertToProtoFormat(type));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExpiryTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getExpiryTime()\n{\r\n    ApplicationTimeoutProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasExpireTime()) {\r\n        return null;\r\n    }\r\n    return p.getExpireTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExpiryTime",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setExpiryTime(String expiryTime)\n{\r\n    maybeInitBuilder();\r\n    if (expiryTime == null) {\r\n        builder.clearExpireTime();\r\n        return;\r\n    }\r\n    builder.setExpireTime(expiryTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRemainingTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getRemainingTime()\n{\r\n    ApplicationTimeoutProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getRemainingTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setRemainingTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRemainingTime(long remainingTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setRemainingTime(remainingTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshAdminAclsRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    if (!YarnConfiguration.timelineServiceV2Enabled(conf)) {\r\n        throw new IOException(\"Timeline V2 client is not properly configured. \" + \"Either timeline service is not enabled or version is not set to\" + \" 2\");\r\n    }\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    UserGroupInformation realUgi = ugi.getRealUser();\r\n    String doAsUser;\r\n    UserGroupInformation authUgi;\r\n    if (realUgi != null) {\r\n        authUgi = realUgi;\r\n        doAsUser = ugi.getShortUserName();\r\n    } else {\r\n        authUgi = ugi;\r\n        doAsUser = null;\r\n    }\r\n    DelegationTokenAuthenticatedURL.Token token = new DelegationTokenAuthenticatedURL.Token();\r\n    connector = new TimelineConnector(false, authUgi, doAsUser, token);\r\n    addIfService(connector);\r\n    String timelineReaderWebAppAddress = WebAppUtils.getTimelineReaderWebAppURLWithoutScheme(conf);\r\n    baseUri = TimelineConnector.constructResURI(conf, timelineReaderWebAppAddress, RESOURCE_URI_STR_V2);\r\n    clusterId = conf.get(YarnConfiguration.RM_CLUSTER_ID, YarnConfiguration.DEFAULT_RM_CLUSTER_ID);\r\n    LOG.info(\"Initialized TimelineReader URI=\" + baseUri + \", clusterId=\" + clusterId);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationEntity",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "TimelineEntity getApplicationEntity(ApplicationId appId, String fields, Map<String, String> filters) throws IOException\n{\r\n    String path = PATH_JOINER.join(\"clusters\", clusterId, \"apps\", appId);\r\n    if (fields == null || fields.isEmpty()) {\r\n        fields = \"INFO\";\r\n    }\r\n    MultivaluedMap<String, String> params = new MultivaluedMapImpl();\r\n    params.add(\"fields\", fields);\r\n    mergeFilters(params, filters);\r\n    ClientResponse response = doGetUri(baseUri, path, params);\r\n    TimelineEntity entity = response.getEntity(TimelineEntity.class);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationAttemptEntity",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "TimelineEntity getApplicationAttemptEntity(ApplicationAttemptId appAttemptId, String fields, Map<String, String> filters) throws IOException\n{\r\n    ApplicationId appId = appAttemptId.getApplicationId();\r\n    String path = PATH_JOINER.join(\"clusters\", clusterId, \"apps\", appId, \"entities\", YARN_APPLICATION_ATTEMPT, appAttemptId);\r\n    if (fields == null || fields.isEmpty()) {\r\n        fields = \"INFO\";\r\n    }\r\n    MultivaluedMap<String, String> params = new MultivaluedMapImpl();\r\n    params.add(\"fields\", fields);\r\n    mergeFilters(params, filters);\r\n    ClientResponse response = doGetUri(baseUri, path, params);\r\n    TimelineEntity entity = response.getEntity(TimelineEntity.class);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationAttemptEntities",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "List<TimelineEntity> getApplicationAttemptEntities(ApplicationId appId, String fields, Map<String, String> filters, long limit, String fromId) throws IOException\n{\r\n    String path = PATH_JOINER.join(\"clusters\", clusterId, \"apps\", appId, \"entities\", YARN_APPLICATION_ATTEMPT);\r\n    if (fields == null || fields.isEmpty()) {\r\n        fields = \"INFO\";\r\n    }\r\n    MultivaluedMap<String, String> params = new MultivaluedMapImpl();\r\n    params.add(\"fields\", fields);\r\n    if (limit > 0) {\r\n        params.add(\"limit\", Long.toString(limit));\r\n    }\r\n    if (fromId != null && !fromId.isEmpty()) {\r\n        params.add(\"fromid\", fromId);\r\n    }\r\n    mergeFilters(params, filters);\r\n    ClientResponse response = doGetUri(baseUri, path, params);\r\n    TimelineEntity[] entities = response.getEntity(TimelineEntity[].class);\r\n    return Arrays.asList(entities);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getContainerEntity",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "TimelineEntity getContainerEntity(ContainerId containerId, String fields, Map<String, String> filters) throws IOException\n{\r\n    ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n    String path = PATH_JOINER.join(\"clusters\", clusterId, \"apps\", appId, \"entities\", YARN_CONTAINER, containerId);\r\n    if (fields == null || fields.isEmpty()) {\r\n        fields = \"INFO\";\r\n    }\r\n    MultivaluedMap<String, String> params = new MultivaluedMapImpl();\r\n    params.add(\"fields\", fields);\r\n    mergeFilters(params, filters);\r\n    ClientResponse response = doGetUri(baseUri, path, params);\r\n    TimelineEntity entity = response.getEntity(TimelineEntity.class);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getContainerEntities",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "List<TimelineEntity> getContainerEntities(ApplicationId appId, String fields, Map<String, String> filters, long limit, String fromId) throws IOException\n{\r\n    String path = PATH_JOINER.join(\"clusters\", clusterId, \"apps\", appId, \"entities\", YARN_CONTAINER);\r\n    if (fields == null || fields.isEmpty()) {\r\n        fields = \"INFO\";\r\n    }\r\n    MultivaluedMap<String, String> params = new MultivaluedMapImpl();\r\n    params.add(\"fields\", fields);\r\n    if (limit > 0) {\r\n        params.add(\"limit\", Long.toString(limit));\r\n    }\r\n    if (fromId != null && !fromId.isEmpty()) {\r\n        params.add(\"fromid\", fromId);\r\n    }\r\n    mergeFilters(params, filters);\r\n    ClientResponse response = doGetUri(baseUri, path, params);\r\n    TimelineEntity[] entity = response.getEntity(TimelineEntity[].class);\r\n    return Arrays.asList(entity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "mergeFilters",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void mergeFilters(MultivaluedMap<String, String> defaults, Map<String, String> filters)\n{\r\n    if (filters != null && !filters.isEmpty()) {\r\n        for (Map.Entry<String, String> entry : filters.entrySet()) {\r\n            if (!defaults.containsKey(entry.getKey())) {\r\n                defaults.add(entry.getKey(), filters.get(entry.getValue()));\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "doGetUri",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ClientResponse doGetUri(URI base, String path, MultivaluedMap<String, String> params) throws IOException\n{\r\n    ClientResponse resp = connector.getClient().resource(base).path(path).queryParams(params).accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    if (resp == null || resp.getStatusInfo().getStatusCode() != ClientResponse.Status.OK.getStatusCode()) {\r\n        String msg = \"Response from the timeline reader server is \" + ((resp == null) ? \"null\" : \"not successful,\" + \" HTTP error code: \" + resp.getStatus() + \", Server response:\\n\" + resp.getEntity(String.class));\r\n        LOG.error(msg);\r\n        throw new IOException(msg);\r\n    }\r\n    return resp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "readCredentialsFromConfigFile",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "Credentials readCredentialsFromConfigFile(Path configFile, Configuration conf, String applicationId) throws IOException\n{\r\n    String contents = null;\r\n    configFile = new Path(configFile.toUri());\r\n    FileSystem fs = configFile.getFileSystem(conf);\r\n    if (fs != null) {\r\n        FSDataInputStream fileHandle = fs.open(configFile);\r\n        if (fileHandle != null) {\r\n            contents = IOUtils.toString(fileHandle, StandardCharsets.UTF_8);\r\n        }\r\n    }\r\n    if (contents == null) {\r\n        throw new IOException(\"Failed to read Docker client configuration: \" + configFile);\r\n    }\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    JsonFactory factory = mapper.getFactory();\r\n    JsonParser parser = factory.createParser(contents);\r\n    JsonNode rootNode = mapper.readTree(parser);\r\n    Credentials credentials = new Credentials();\r\n    if (rootNode.has(CONFIG_AUTHS_KEY)) {\r\n        Iterator<String> iter = rootNode.get(CONFIG_AUTHS_KEY).fieldNames();\r\n        for (; iter.hasNext(); ) {\r\n            String registryUrl = iter.next();\r\n            String registryCred = rootNode.get(CONFIG_AUTHS_KEY).get(registryUrl).get(CONFIG_AUTH_KEY).asText();\r\n            TokenIdentifier tokenId = new DockerCredentialTokenIdentifier(registryUrl, applicationId);\r\n            Token<DockerCredentialTokenIdentifier> token = new Token<>(tokenId.getBytes(), registryCred.getBytes(Charset.forName(\"UTF-8\")), tokenId.getKind(), new Text(registryUrl));\r\n            credentials.addToken(new Text(registryUrl + \"-\" + applicationId), token);\r\n            LOG.info(\"Token read from Docker client configuration file: \" + token.toString());\r\n        }\r\n    }\r\n    return credentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getCredentialsFromTokensByteBuffer",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Credentials getCredentialsFromTokensByteBuffer(ByteBuffer tokens) throws IOException\n{\r\n    Credentials credentials = new Credentials();\r\n    DataInputByteBuffer dibb = new DataInputByteBuffer();\r\n    tokens.rewind();\r\n    dibb.reset(tokens);\r\n    credentials.readTokenStorageStream(dibb);\r\n    tokens.rewind();\r\n    if (LOG.isDebugEnabled()) {\r\n        for (Token token : credentials.getAllTokens()) {\r\n            LOG.debug(\"Token read from token storage: {}\", token);\r\n        }\r\n    }\r\n    return credentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "writeDockerCredentialsToPath",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "boolean writeDockerCredentialsToPath(File outConfigFile, Credentials credentials) throws IOException\n{\r\n    boolean foundDockerCred = false;\r\n    if (credentials.numberOfTokens() > 0) {\r\n        ObjectMapper mapper = new ObjectMapper();\r\n        ObjectNode rootNode = mapper.createObjectNode();\r\n        ObjectNode registryUrlNode = mapper.createObjectNode();\r\n        for (Token<? extends TokenIdentifier> tk : credentials.getAllTokens()) {\r\n            if (tk.getKind().equals(DockerCredentialTokenIdentifier.KIND)) {\r\n                foundDockerCred = true;\r\n                DockerCredentialTokenIdentifier ti = (DockerCredentialTokenIdentifier) tk.decodeIdentifier();\r\n                ObjectNode registryCredNode = mapper.createObjectNode();\r\n                registryUrlNode.set(ti.getRegistryUrl(), registryCredNode);\r\n                registryCredNode.put(CONFIG_AUTH_KEY, new String(tk.getPassword(), Charset.forName(\"UTF-8\")));\r\n                LOG.debug(\"Prepared token for write: {}\", tk);\r\n            }\r\n        }\r\n        if (foundDockerCred) {\r\n            rootNode.set(CONFIG_AUTHS_KEY, registryUrlNode);\r\n            String json = mapper.writerWithDefaultPrettyPrinter().writeValueAsString(rootNode);\r\n            FileUtils.writeStringToFile(outConfigFile, json, StandardCharsets.UTF_8);\r\n        }\r\n    }\r\n    return foundDockerCred;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "$about",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResponseInfo $about(String about)\n{\r\n    ResponseInfo info = new ResponseInfo();\r\n    info.about = about;\r\n    return info;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "about",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResponseInfo about(String about)\n{\r\n    this.about = about;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "about",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String about()\n{\r\n    return about;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "__",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResponseInfo __(String key, Object value)\n{\r\n    items.add(Item.of(key, value, false));\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "__",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResponseInfo __(String key, String url, Object anchor)\n{\r\n    if (url == null) {\r\n        items.add(Item.of(key, anchor, false));\r\n    } else {\r\n        items.add(Item.of(key, url, anchor));\r\n    }\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "_r",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResponseInfo _r(String key, Object value)\n{\r\n    items.add(Item.of(key, value, true));\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "clear",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void clear()\n{\r\n    items.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "iterator",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Iterator<Item> iterator()\n{\r\n    return items.iterator();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerRetryContextProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.errorCodes != null) {\r\n        builder.clearErrorCodes();\r\n        builder.addAllErrorCodes(this.errorCodes);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ContainerRetryContextProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRetryPolicy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerRetryPolicy getRetryPolicy()\n{\r\n    ContainerRetryContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasRetryPolicy()) {\r\n        return ContainerRetryPolicy.NEVER_RETRY;\r\n    }\r\n    return convertFromProtoFormat(p.getRetryPolicy());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setRetryPolicy",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRetryPolicy(ContainerRetryPolicy containerRetryPolicy)\n{\r\n    maybeInitBuilder();\r\n    if (containerRetryPolicy == null) {\r\n        builder.clearRetryPolicy();\r\n        return;\r\n    }\r\n    builder.setRetryPolicy(convertToProtoFormat(containerRetryPolicy));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initErrorCodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initErrorCodes()\n{\r\n    if (this.errorCodes != null) {\r\n        return;\r\n    }\r\n    ContainerRetryContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.errorCodes = new HashSet<>();\r\n    this.errorCodes.addAll(p.getErrorCodesList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getErrorCodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<Integer> getErrorCodes()\n{\r\n    initErrorCodes();\r\n    return this.errorCodes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setErrorCodes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setErrorCodes(Set<Integer> errCodes)\n{\r\n    maybeInitBuilder();\r\n    if (errCodes == null || errCodes.isEmpty()) {\r\n        builder.clearErrorCodes();\r\n    }\r\n    this.errorCodes = errCodes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getMaxRetries",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getMaxRetries()\n{\r\n    ContainerRetryContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasMaxRetries()) {\r\n        return 0;\r\n    }\r\n    return p.getMaxRetries();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setMaxRetries",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMaxRetries(int maxRetries)\n{\r\n    maybeInitBuilder();\r\n    builder.setMaxRetries(maxRetries);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRetryInterval",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getRetryInterval()\n{\r\n    ContainerRetryContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasRetryInterval()) {\r\n        return 0;\r\n    }\r\n    return p.getRetryInterval();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setRetryInterval",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRetryInterval(int retryInterval)\n{\r\n    maybeInitBuilder();\r\n    builder.setRetryInterval(retryInterval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getFailuresValidityInterval",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getFailuresValidityInterval()\n{\r\n    ContainerRetryContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasFailuresValidityInterval()) {\r\n        return -1;\r\n    }\r\n    return p.getFailuresValidityInterval();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setFailuresValidityInterval",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFailuresValidityInterval(long failuresValidityInterval)\n{\r\n    maybeInitBuilder();\r\n    builder.setFailuresValidityInterval(failuresValidityInterval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerRetryPolicyProto convertToProtoFormat(ContainerRetryPolicy containerRetryPolicy)\n{\r\n    return ProtoUtils.convertToProtoFormat(containerRetryPolicy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerRetryPolicy convertFromProtoFormat(ContainerRetryPolicyProto containerRetryPolicyProto)\n{\r\n    return ProtoUtils.convertFromProtoFormat(containerRetryPolicyProto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putEntities",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelinePutResponse putEntities(ApplicationAttemptId appAttemptId, TimelineEntityGroupId groupId, TimelineEntity... entities) throws IOException, YarnException\n{\r\n    throw new IOException(\"Not supported\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putDomain",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void putDomain(ApplicationAttemptId appAttemptId, TimelineDomain domain) throws IOException, YarnException\n{\r\n    throw new IOException(\"Not supported\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createRetryPolicy",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "RetryPolicy createRetryPolicy(Configuration conf, String maxWaitTimeStr, long defMaxWaitTime, String connectRetryIntervalStr, long defRetryInterval)\n{\r\n    long maxWaitTime = conf.getLong(maxWaitTimeStr, defMaxWaitTime);\r\n    long retryIntervalMS = conf.getLong(connectRetryIntervalStr, defRetryInterval);\r\n    Preconditions.checkArgument((maxWaitTime == -1 || maxWaitTime > 0), \"Invalid Configuration. \" + maxWaitTimeStr + \" should be either\" + \" positive value or -1.\");\r\n    Preconditions.checkArgument(retryIntervalMS > 0, \"Invalid Configuration. \" + connectRetryIntervalStr + \"should be a positive value.\");\r\n    RetryPolicy retryPolicy = null;\r\n    if (maxWaitTime == -1) {\r\n        retryPolicy = RetryPolicies.retryForeverWithFixedSleep(retryIntervalMS, TimeUnit.MILLISECONDS);\r\n    } else {\r\n        retryPolicy = RetryPolicies.retryUpToMaximumTimeWithFixedSleep(maxWaitTime, retryIntervalMS, TimeUnit.MILLISECONDS);\r\n    }\r\n    Map<Class<? extends Exception>, RetryPolicy> exceptionToPolicyMap = new HashMap<Class<? extends Exception>, RetryPolicy>();\r\n    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\r\n    exceptionToPolicyMap.put(NMNotYetReadyException.class, retryPolicy);\r\n    return RetryPolicies.retryByException(RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createRetriableProxy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "T createRetriableProxy(final Configuration conf, final Class<T> protocol, final UserGroupInformation user, final YarnRPC rpc, final InetSocketAddress serverAddress, RetryPolicy retryPolicy)\n{\r\n    T proxy = user.doAs(new PrivilegedAction<T>() {\r\n\r\n        @Override\r\n        public T run() {\r\n            return (T) rpc.getProxy(protocol, serverAddress, conf);\r\n        }\r\n    });\r\n    return (T) RetryProxy.create(protocol, proxy, retryPolicy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNodeId()\n{\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerId()\n{\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "addLogMeta",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addLogMeta(String fileName, String fileSize, String lastModificationTime)\n{\r\n    logMeta.add(new ContainerLogFileInfo(fileName, fileSize, lastModificationTime));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getContainerLogMeta",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ContainerLogFileInfo> getContainerLogMeta()\n{\r\n    return this.logMeta;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnServiceProtos.UpdateContainerRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainerVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getContainerVersion()\n{\r\n    YarnServiceProtos.UpdateContainerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerVersion()) {\r\n        return 0;\r\n    }\r\n    return p.getContainerVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainerVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerVersion(int containerVersion)\n{\r\n    maybeInitBuilder();\r\n    builder.setContainerVersion(containerVersion);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    YarnServiceProtos.UpdateContainerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.existingContainerId != null) {\r\n        return this.existingContainerId;\r\n    }\r\n    if (p.hasContainerId()) {\r\n        this.existingContainerId = ProtoUtils.convertFromProtoFormat(p.getContainerId());\r\n    }\r\n    return this.existingContainerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)\n{\r\n    maybeInitBuilder();\r\n    if (containerId == null) {\r\n        builder.clearContainerId();\r\n    }\r\n    this.existingContainerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getCapability()\n{\r\n    YarnServiceProtos.UpdateContainerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.targetCapability != null) {\r\n        return this.targetCapability;\r\n    }\r\n    if (p.hasCapability()) {\r\n        this.targetCapability = ProtoUtils.convertFromProtoFormat(p.getCapability());\r\n    }\r\n    return this.targetCapability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCapability(Resource capability)\n{\r\n    maybeInitBuilder();\r\n    if (capability == null) {\r\n        builder.clearCapability();\r\n    }\r\n    this.targetCapability = capability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExecutionType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ExecutionType getExecutionType()\n{\r\n    YarnServiceProtos.UpdateContainerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasExecutionType()) {\r\n        return null;\r\n    }\r\n    return ProtoUtils.convertFromProtoFormat(p.getExecutionType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExecutionType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setExecutionType(ExecutionType execType)\n{\r\n    maybeInitBuilder();\r\n    if (execType == null) {\r\n        builder.clearExecutionType();\r\n        return;\r\n    }\r\n    builder.setExecutionType(ProtoUtils.convertToProtoFormat(execType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainerUpdateType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerUpdateType getContainerUpdateType()\n{\r\n    YarnServiceProtos.UpdateContainerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasUpdateType()) {\r\n        return null;\r\n    }\r\n    return ProtoUtils.convertFromProtoFormat(p.getUpdateType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainerUpdateType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setContainerUpdateType(ContainerUpdateType updateType)\n{\r\n    maybeInitBuilder();\r\n    if (updateType == null) {\r\n        builder.clearUpdateType();\r\n        return;\r\n    }\r\n    builder.setUpdateType(ProtoUtils.convertToProtoFormat(updateType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = YarnServiceProtos.UpdateContainerRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.existingContainerId != null) {\r\n        builder.setContainerId(ProtoUtils.convertToProtoFormat(this.existingContainerId));\r\n    }\r\n    if (this.targetCapability != null) {\r\n        builder.setCapability(ProtoUtils.convertToProtoFormat(this.targetCapability));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void render()\n{\r\n    putWithoutEscapeHtml(USER_AGENT_LINE);\r\n    putWithoutEscapeHtml(DISALLOW_LINE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "logException",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void logException(String comment, Throwable t)\n{\r\n    if (t instanceof AccessControlException) {\r\n        String message = t.getMessage();\r\n        message = message.split(\"\\n\")[0];\r\n        LOG.warn(comment + \" \" + message);\r\n    } else {\r\n        LOG.error(comment, t);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    scheduleLogDeletionTask();\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    stopRMClient();\r\n    stopTimer();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "setLogAggCheckIntervalMsecs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLogAggCheckIntervalMsecs(long retentionSecs)\n{\r\n    Configuration conf = getConfig();\r\n    checkIntervalMsecs = 1000 * conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS, YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_CHECK_INTERVAL_SECONDS);\r\n    if (checkIntervalMsecs <= 0) {\r\n        checkIntervalMsecs = (retentionSecs * 1000) / 10;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "refreshLogRetentionSettings",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void refreshLogRetentionSettings() throws IOException\n{\r\n    if (getServiceState() == STATE.STARTED) {\r\n        Configuration conf = createConf();\r\n        setConfig(conf);\r\n        stopRMClient();\r\n        stopTimer();\r\n        scheduleLogDeletionTask();\r\n    } else {\r\n        LOG.warn(\"Failed to execute refreshLogRetentionSettings : Aggregated Log Deletion Service is not started\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "scheduleLogDeletionTask",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void scheduleLogDeletionTask() throws IOException\n{\r\n    Configuration conf = getConfig();\r\n    if (!conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED, YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)) {\r\n        return;\r\n    }\r\n    long retentionSecs = conf.getLong(YarnConfiguration.LOG_AGGREGATION_RETAIN_SECONDS, YarnConfiguration.DEFAULT_LOG_AGGREGATION_RETAIN_SECONDS);\r\n    if (retentionSecs < 0) {\r\n        LOG.info(\"Log Aggregation deletion is disabled because retention is\" + \" too small (\" + retentionSecs + \")\");\r\n        return;\r\n    }\r\n    setLogAggCheckIntervalMsecs(retentionSecs);\r\n    task = new LogDeletionTask(conf, retentionSecs, createRMClient());\r\n    timer = new Timer();\r\n    timer.scheduleAtFixedRate(task, 0, checkIntervalMsecs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "stopTimer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stopTimer()\n{\r\n    if (timer != null) {\r\n        timer.cancel();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "getCheckIntervalMsecs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCheckIntervalMsecs()\n{\r\n    return checkIntervalMsecs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "createConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration createConf()\n{\r\n    return new Configuration();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "createRMClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationClientProtocol createRMClient() throws IOException\n{\r\n    return ClientRMProxy.createRMProxy(getConfig(), ApplicationClientProtocol.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation",
  "methodName" : "stopRMClient",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void stopRMClient()\n{\r\n    if (task != null && task.getRMClient() != null) {\r\n        RPC.stopProxy(task.getRMClient());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "doOptions",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void doOptions(HttpServletRequest req, HttpServletResponse res)\n{\r\n    res.setHeader(\"Allow\", \"GET, POST\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "service",
  "errType" : [ "WebAppException", "Exception" ],
  "containingMethodsNum" : 46,
  "sourceCodeText" : "void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException\n{\r\n    res.setCharacterEncoding(\"UTF-8\");\r\n    String uri = HtmlQuoting.quoteHtmlChars(req.getRequestURI());\r\n    if (uri == null) {\r\n        uri = \"/\";\r\n    }\r\n    if (devMode && uri.equals(\"/__stop\")) {\r\n        res.setStatus(res.SC_NO_CONTENT);\r\n        LOG.info(\"dev mode restart requested\");\r\n        prepareToExit();\r\n        return;\r\n    }\r\n    if (uri.equals(\"/\")) {\r\n        String redirectPath = webApp.getRedirectPath();\r\n        if (redirectPath != null && !redirectPath.isEmpty()) {\r\n            if (req.getQueryString() != null) {\r\n                StringBuilder query = new StringBuilder();\r\n                query.append(redirectPath);\r\n                query.append(\"?\");\r\n                query.append(req.getQueryString().replaceAll(\"\\r\", \"\").replaceAll(\"\\n\", \"\"));\r\n                redirectPath = query.toString();\r\n            }\r\n            res.sendRedirect(redirectPath);\r\n            return;\r\n        }\r\n    }\r\n    String method = req.getMethod();\r\n    if (method.equals(\"OPTIONS\")) {\r\n        doOptions(req, res);\r\n        return;\r\n    }\r\n    if (method.equals(\"TRACE\")) {\r\n        doTrace(req, res);\r\n        return;\r\n    }\r\n    if (method.equals(\"HEAD\")) {\r\n        doGet(req, res);\r\n        return;\r\n    }\r\n    String pathInfo = req.getPathInfo();\r\n    if (pathInfo == null) {\r\n        pathInfo = \"/\";\r\n    }\r\n    Controller.RequestContext rc = injector.getInstance(Controller.RequestContext.class);\r\n    if (uri.equals(RobotsTextPage.ROBOTS_TXT_PATH)) {\r\n        rc.setStatus(HttpServletResponse.SC_FOUND);\r\n        render(RobotsTextPage.class);\r\n        return;\r\n    }\r\n    if (setCookieParams(rc, req) > 0) {\r\n        Cookie ec = rc.cookies().get(ERROR_COOKIE);\r\n        if (ec != null) {\r\n            rc.setStatus(Integer.parseInt(rc.cookies().get(STATUS_COOKIE).getValue()));\r\n            removeErrorCookies(res, uri);\r\n            rc.set(Params.ERROR_DETAILS, ec.getValue());\r\n            render(ErrorPage.class);\r\n            return;\r\n        }\r\n    }\r\n    rc.prefix = webApp.name();\r\n    Router.Dest dest = null;\r\n    try {\r\n        dest = router.resolve(method, pathInfo);\r\n    } catch (WebAppException e) {\r\n        rc.error = e;\r\n        if (!e.getMessage().contains(\"not found\")) {\r\n            rc.setStatus(res.SC_INTERNAL_SERVER_ERROR);\r\n            render(ErrorPage.class);\r\n            return;\r\n        }\r\n    }\r\n    if (dest == null) {\r\n        rc.setStatus(res.SC_NOT_FOUND);\r\n        render(ErrorPage.class);\r\n        return;\r\n    }\r\n    rc.devMode = devMode;\r\n    setMoreParams(rc, pathInfo, dest);\r\n    Controller controller = injector.getInstance(dest.controllerClass);\r\n    try {\r\n        dest.action.invoke(controller, (Object[]) null);\r\n        if (!rc.rendered) {\r\n            if (dest.defaultViewClass != null) {\r\n                render(dest.defaultViewClass);\r\n            } else if (rc.status == 200) {\r\n                throw new IllegalStateException(\"No view rendered for 200\");\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.error(\"error handling URI: \" + uri, e);\r\n        redirectToErrorPage(res, e, uri, devMode);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "redirectToErrorPage",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void redirectToErrorPage(HttpServletResponse res, Throwable e, String path, boolean devMode)\n{\r\n    String st = devMode ? ErrorPage.toStackTrace(e, 1024 * 3) : \"See logs for stack trace\";\r\n    res.setStatus(res.SC_FOUND);\r\n    Cookie cookie = createCookie(STATUS_COOKIE, String.valueOf(500));\r\n    cookie.setPath(path);\r\n    res.addCookie(cookie);\r\n    cookie = createCookie(ERROR_COOKIE, st);\r\n    cookie.setPath(path);\r\n    res.addCookie(cookie);\r\n    res.setHeader(\"Location\", path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "removeErrorCookies",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void removeErrorCookies(HttpServletResponse res, String path)\n{\r\n    removeCookie(res, ERROR_COOKIE, path);\r\n    removeCookie(res, STATUS_COOKIE, path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "removeCookie",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void removeCookie(HttpServletResponse res, String name, String path)\n{\r\n    LOG.debug(\"removing cookie {} on {}\", name, path);\r\n    Cookie c = createCookie(name, \"\");\r\n    c.setMaxAge(0);\r\n    c.setPath(path);\r\n    res.addCookie(c);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void render(Class<? extends View> cls)\n{\r\n    injector.getInstance(cls).render();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setMoreParams",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setMoreParams(RequestContext rc, String pathInfo, Dest dest)\n{\r\n    checkState(pathInfo.startsWith(dest.prefix), \"prefix should match\");\r\n    if (dest.pathParams.size() == 0 || dest.prefix.length() == pathInfo.length()) {\r\n        return;\r\n    }\r\n    String[] parts = Iterables.toArray(WebApp.pathSplitter.split(pathInfo.substring(dest.prefix.length())), String.class);\r\n    LOG.debug(\"parts={}, params={}\", parts, dest.pathParams);\r\n    for (int i = 0; i < dest.pathParams.size() && i < parts.length; ++i) {\r\n        String key = dest.pathParams.get(i);\r\n        if (key.charAt(0) == ':') {\r\n            rc.moreParams().put(key.substring(1), parts[i]);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setCookieParams",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int setCookieParams(RequestContext rc, HttpServletRequest req)\n{\r\n    Cookie[] cookies = req.getCookies();\r\n    if (cookies != null) {\r\n        for (Cookie cookie : cookies) {\r\n            rc.cookies().put(cookie.getName(), cookie);\r\n        }\r\n        return cookies.length;\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setDevMode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDevMode(boolean choice)\n{\r\n    devMode = choice;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "prepareToExit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void prepareToExit()\n{\r\n    checkState(devMode, \"only in dev mode\");\r\n    new Timer(\"webapp exit\", true).schedule(new TimerTask() {\r\n\r\n        @Override\r\n        public void run() {\r\n            LOG.info(\"WebAppp /{} exiting...\", webApp.name());\r\n            webApp.stop();\r\n            System.exit(0);\r\n        }\r\n    }, 18);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "createCookie",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Cookie createCookie(String name, String val)\n{\r\n    Cookie cookie = new Cookie(name, val);\r\n    cookie.setHttpOnly(true);\r\n    return cookie;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshQueuesRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationIdProto getProto()\n{\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getId()\n{\r\n    Preconditions.checkNotNull(proto);\r\n    return proto.getId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setId(long id)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setId(id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getClusterTimestamp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getClusterTimestamp()\n{\r\n    Preconditions.checkNotNull(proto);\r\n    return proto.getClusterTimestamp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setClusterTimestamp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setClusterTimestamp(long clusterTimestamp)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setClusterTimestamp((clusterTimestamp));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "build",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void build()\n{\r\n    proto = builder.build();\r\n    builder = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getConfigurationInputStream",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "InputStream getConfigurationInputStream(Configuration bootstrapConf, String name) throws IOException, YarnException\n{\r\n    if (name == null || name.isEmpty()) {\r\n        throw new YarnException(\"Illegal argument! The parameter should not be null or empty\");\r\n    }\r\n    Path filePath;\r\n    if (YarnConfiguration.RM_CONFIGURATION_FILES.contains(name) || YarnConfiguration.NM_CONFIGURATION_FILES.contains(name)) {\r\n        filePath = new Path(this.configDir, name);\r\n        if (!fs.exists(filePath)) {\r\n            LOG.info(filePath + \" not found\");\r\n            return null;\r\n        }\r\n    } else {\r\n        filePath = new Path(name);\r\n        if (!fs.exists(filePath)) {\r\n            LOG.info(filePath + \" not found\");\r\n            return null;\r\n        }\r\n    }\r\n    return fs.open(filePath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "initInternal",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void initInternal(Configuration bootstrapConf) throws Exception\n{\r\n    Configuration conf = new Configuration(bootstrapConf);\r\n    configDir = new Path(conf.get(YarnConfiguration.FS_BASED_RM_CONF_STORE, YarnConfiguration.DEFAULT_FS_BASED_RM_CONF_STORE));\r\n    String scheme = configDir.toUri().getScheme();\r\n    if (scheme == null) {\r\n        scheme = FileSystem.getDefaultUri(conf).getScheme();\r\n    }\r\n    if (scheme != null) {\r\n        String disableCacheName = String.format(\"fs.%s.impl.disable.cache\", scheme);\r\n        conf.setBoolean(disableCacheName, true);\r\n    }\r\n    fs = configDir.getFileSystem(conf);\r\n    fs.mkdirs(configDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "closeInternal",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void closeInternal() throws Exception\n{\r\n    fs.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getFs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileSystem getFs()\n{\r\n    return fs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getConfigDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getConfigDir()\n{\r\n    return configDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshServiceAclsRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\example",
  "methodName" : "anyAPI",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String anyAPI()\n{\r\n    return \"anything, really!\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\example",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    WebApps.$for(new MyApp()).at(8888).inDevMode().start().joinThread();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAccepted",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean getAccepted()\n{\r\n    RunSharedCacheCleanerTaskResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasAccepted()) ? p.getAccepted() : false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAccepted",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAccepted(boolean b)\n{\r\n    maybeInitBuilder();\r\n    builder.setAccepted(b);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RunSharedCacheCleanerTaskResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = RunSharedCacheCleanerTaskResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetQueueUserAclsInfoRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "uncaughtException",
  "errType" : [ "Throwable", "Throwable" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void uncaughtException(Thread t, Throwable e)\n{\r\n    if (ShutdownHookManager.get().isShutdownInProgress()) {\r\n        LOG.error(\"Thread \" + t + \" threw an Throwable, but we are shutting \" + \"down, so ignoring this\", e);\r\n    } else if (e instanceof Error) {\r\n        try {\r\n            LOG.error(FATAL, \"Thread \" + t + \" threw an Error.  Shutting down now...\", e);\r\n        } catch (Throwable err) {\r\n        }\r\n        if (e instanceof OutOfMemoryError) {\r\n            try {\r\n                System.err.println(\"Halting due to Out Of Memory Error...\");\r\n            } catch (Throwable err) {\r\n            }\r\n            ExitUtil.halt(-1);\r\n        } else {\r\n            ExitUtil.terminate(-1);\r\n        }\r\n    } else {\r\n        LOG.error(\"Thread \" + t + \" threw an Exception.\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AllocateResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.allocatedContainers != null) {\r\n        builder.clearAllocatedContainers();\r\n        Iterable<ContainerProto> iterable = getContainerProtoIterable(this.allocatedContainers);\r\n        builder.addAllAllocatedContainers(iterable);\r\n    }\r\n    if (nmTokens != null) {\r\n        builder.clearNmTokens();\r\n        Iterable<NMTokenProto> iterable = getTokenProtoIterable(nmTokens);\r\n        builder.addAllNmTokens(iterable);\r\n    }\r\n    if (this.completedContainersStatuses != null) {\r\n        builder.clearCompletedContainerStatuses();\r\n        Iterable<ContainerStatusProto> iterable = getContainerStatusProtoIterable(this.completedContainersStatuses);\r\n        builder.addAllCompletedContainerStatuses(iterable);\r\n    }\r\n    if (this.rejectedRequests != null) {\r\n        builder.clearRejectedSchedulingRequests();\r\n        Iterable<YarnProtos.RejectedSchedulingRequestProto> iterable = getRejectedSchedulingRequestsProtoIterable(this.rejectedRequests);\r\n        builder.addAllRejectedSchedulingRequests(iterable);\r\n    }\r\n    if (this.updatedNodes != null) {\r\n        builder.clearUpdatedNodes();\r\n        Iterable<NodeReportProto> iterable = getNodeReportProtoIterable(this.updatedNodes);\r\n        builder.addAllUpdatedNodes(iterable);\r\n    }\r\n    if (this.limit != null) {\r\n        builder.setLimit(convertToProtoFormat(this.limit));\r\n    }\r\n    if (this.preempt != null) {\r\n        builder.setPreempt(convertToProtoFormat(this.preempt));\r\n    }\r\n    if (this.updatedContainers != null) {\r\n        builder.clearUpdatedContainers();\r\n        Iterable<YarnServiceProtos.UpdatedContainerProto> iterable = getUpdatedContainerProtoIterable(this.updatedContainers);\r\n        builder.addAllUpdatedContainers(iterable);\r\n    }\r\n    if (this.updateErrors != null) {\r\n        builder.clearUpdateErrors();\r\n        Iterable<YarnServiceProtos.UpdateContainerErrorProto> iterable = getUpdateErrorsIterable(this.updateErrors);\r\n        builder.addAllUpdateErrors(iterable);\r\n    }\r\n    if (this.amrmToken != null) {\r\n        builder.setAmRmToken(convertToProtoFormat(this.amrmToken));\r\n    }\r\n    if (this.collectorInfo != null) {\r\n        builder.setCollectorInfo(convertToProtoFormat(this.collectorInfo));\r\n    }\r\n    if (this.appPriority != null) {\r\n        builder.setApplicationPriority(convertToProtoFormat(this.appPriority));\r\n    }\r\n    if (this.containersFromPreviousAttempts != null) {\r\n        builder.clearContainersFromPreviousAttempts();\r\n        Iterable<ContainerProto> iterable = getContainerProtoIterable(this.containersFromPreviousAttempts);\r\n        builder.addAllContainersFromPreviousAttempts(iterable);\r\n    }\r\n    if (this.enhancedHeadroom != null) {\r\n        builder.setEnhancedHeadroom(convertToProtoFormat(this.enhancedHeadroom));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = AllocateResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAMCommand",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AMCommand getAMCommand()\n{\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAMCommand()) {\r\n        return null;\r\n    }\r\n    return ProtoUtils.convertFromProtoFormat(p.getAMCommand());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAMCommand",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAMCommand(AMCommand command)\n{\r\n    maybeInitBuilder();\r\n    if (command == null) {\r\n        builder.clearAMCommand();\r\n        return;\r\n    }\r\n    builder.setAMCommand(ProtoUtils.convertToProtoFormat(command));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResponseId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getResponseId()\n{\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getResponseId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResponseId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResponseId(int responseId)\n{\r\n    maybeInitBuilder();\r\n    builder.setResponseId((responseId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAvailableResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getAvailableResources()\n{\r\n    if (this.limit != null) {\r\n        return this.limit;\r\n    }\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasLimit()) {\r\n        return null;\r\n    }\r\n    this.limit = convertFromProtoFormat(p.getLimit());\r\n    return this.limit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAvailableResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAvailableResources(Resource limit)\n{\r\n    maybeInitBuilder();\r\n    if (limit == null)\r\n        builder.clearLimit();\r\n    this.limit = limit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getUpdatedNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<NodeReport> getUpdatedNodes()\n{\r\n    initLocalNewNodeReportList();\r\n    return this.updatedNodes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setUpdatedNodes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUpdatedNodes(final List<NodeReport> updatedNodes)\n{\r\n    if (updatedNodes == null) {\r\n        this.updatedNodes.clear();\r\n        return;\r\n    }\r\n    this.updatedNodes = new ArrayList<NodeReport>(updatedNodes.size());\r\n    this.updatedNodes.addAll(updatedNodes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getUpdateErrors",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<UpdateContainerError> getUpdateErrors()\n{\r\n    initLocalUpdateErrorsList();\r\n    return this.updateErrors;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setUpdateErrors",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUpdateErrors(List<UpdateContainerError> updateErrors)\n{\r\n    if (updateErrors == null) {\r\n        if (this.updateErrors != null) {\r\n            this.updateErrors.clear();\r\n        }\r\n        return;\r\n    }\r\n    this.updateErrors = new ArrayList<>(updateErrors.size());\r\n    this.updateErrors.addAll(updateErrors);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAllocatedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Container> getAllocatedContainers()\n{\r\n    initLocalNewContainerList();\r\n    return this.allocatedContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAllocatedContainers",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAllocatedContainers(final List<Container> containers)\n{\r\n    if (containers == null)\r\n        return;\r\n    initLocalNewContainerList();\r\n    allocatedContainers.clear();\r\n    allocatedContainers.addAll(containers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getUpdatedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<UpdatedContainer> getUpdatedContainers()\n{\r\n    initLocalUpdatedContainerList();\r\n    return this.updatedContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setUpdatedContainers",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUpdatedContainers(final List<UpdatedContainer> containers)\n{\r\n    if (containers == null)\r\n        return;\r\n    initLocalUpdatedContainerList();\r\n    updatedContainers.clear();\r\n    updatedContainers.addAll(containers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getCompletedContainersStatuses",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerStatus> getCompletedContainersStatuses()\n{\r\n    initLocalFinishedContainerList();\r\n    return this.completedContainersStatuses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setCompletedContainersStatuses",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setCompletedContainersStatuses(final List<ContainerStatus> containers)\n{\r\n    if (containers == null)\r\n        return;\r\n    initLocalFinishedContainerList();\r\n    completedContainersStatuses.clear();\r\n    completedContainersStatuses.addAll(containers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNMTokens",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setNMTokens(List<NMToken> nmTokens)\n{\r\n    maybeInitBuilder();\r\n    if (nmTokens == null || nmTokens.isEmpty()) {\r\n        if (this.nmTokens != null) {\r\n            this.nmTokens.clear();\r\n        }\r\n        builder.clearNmTokens();\r\n        return;\r\n    }\r\n    initLocalNewNMTokenList();\r\n    this.nmTokens.addAll(nmTokens);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNMTokens",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<NMToken> getNMTokens()\n{\r\n    initLocalNewNMTokenList();\r\n    return nmTokens;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNumClusterNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumClusterNodes()\n{\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getNumClusterNodes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNumClusterNodes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNumClusterNodes(int numNodes)\n{\r\n    maybeInitBuilder();\r\n    builder.setNumClusterNodes(numNodes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getPreemptionMessage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "PreemptionMessage getPreemptionMessage()\n{\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.preempt != null) {\r\n        return this.preempt;\r\n    }\r\n    if (!p.hasPreempt()) {\r\n        return null;\r\n    }\r\n    this.preempt = convertFromProtoFormat(p.getPreempt());\r\n    return this.preempt;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setPreemptionMessage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPreemptionMessage(PreemptionMessage preempt)\n{\r\n    maybeInitBuilder();\r\n    if (null == preempt) {\r\n        builder.clearPreempt();\r\n    }\r\n    this.preempt = preempt;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token getAMRMToken()\n{\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (amrmToken != null) {\r\n        return amrmToken;\r\n    }\r\n    if (!p.hasAmRmToken()) {\r\n        return null;\r\n    }\r\n    this.amrmToken = convertFromProtoFormat(p.getAmRmToken());\r\n    return amrmToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAMRMToken(Token amRMToken)\n{\r\n    maybeInitBuilder();\r\n    if (amRMToken == null) {\r\n        builder.clearAmRmToken();\r\n    }\r\n    this.amrmToken = amRMToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getEnhancedHeadroom",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "EnhancedHeadroom getEnhancedHeadroom()\n{\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (enhancedHeadroom != null) {\r\n        return enhancedHeadroom;\r\n    }\r\n    if (!p.hasEnhancedHeadroom()) {\r\n        return null;\r\n    }\r\n    this.enhancedHeadroom = convertFromProtoFormat(p.getEnhancedHeadroom());\r\n    return enhancedHeadroom;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setEnhancedHeadroom",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setEnhancedHeadroom(EnhancedHeadroom enhancedHeadroom)\n{\r\n    maybeInitBuilder();\r\n    if (enhancedHeadroom == null) {\r\n        builder.clearEnhancedHeadroom();\r\n    }\r\n    this.enhancedHeadroom = enhancedHeadroom;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getCollectorInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CollectorInfo getCollectorInfo()\n{\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.collectorInfo != null) {\r\n        return this.collectorInfo;\r\n    }\r\n    if (!p.hasCollectorInfo()) {\r\n        return null;\r\n    }\r\n    this.collectorInfo = convertFromProtoFormat(p.getCollectorInfo());\r\n    return this.collectorInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setCollectorInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCollectorInfo(CollectorInfo info)\n{\r\n    maybeInitBuilder();\r\n    if (info == null) {\r\n        builder.clearCollectorInfo();\r\n    }\r\n    this.collectorInfo = info;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getApplicationPriority()\n{\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.appPriority != null) {\r\n        return this.appPriority;\r\n    }\r\n    if (!p.hasApplicationPriority()) {\r\n        return null;\r\n    }\r\n    this.appPriority = convertFromProtoFormat(p.getApplicationPriority());\r\n    return this.appPriority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationPriority(Priority priority)\n{\r\n    maybeInitBuilder();\r\n    if (priority == null)\r\n        builder.clearApplicationPriority();\r\n    this.appPriority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainersFromPreviousAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Container> getContainersFromPreviousAttempts()\n{\r\n    initContainersFromPreviousAttemptsList();\r\n    return this.containersFromPreviousAttempts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainersFromPreviousAttempts",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setContainersFromPreviousAttempts(final List<Container> containers)\n{\r\n    if (containers == null) {\r\n        return;\r\n    }\r\n    initContainersFromPreviousAttemptsList();\r\n    containersFromPreviousAttempts.clear();\r\n    containersFromPreviousAttempts.addAll(containers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getRejectedSchedulingRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<RejectedSchedulingRequest> getRejectedSchedulingRequests()\n{\r\n    initRejectedRequestsList();\r\n    return this.rejectedRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setRejectedSchedulingRequests",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRejectedSchedulingRequests(List<RejectedSchedulingRequest> rejectedReqs)\n{\r\n    if (rejectedReqs == null) {\r\n        return;\r\n    }\r\n    initRejectedRequestsList();\r\n    this.rejectedRequests.clear();\r\n    this.rejectedRequests.addAll(rejectedReqs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalUpdatedContainerList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalUpdatedContainerList()\n{\r\n    if (this.updatedContainers != null) {\r\n        return;\r\n    }\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<YarnServiceProtos.UpdatedContainerProto> list = p.getUpdatedContainersList();\r\n    updatedContainers = new ArrayList<>();\r\n    for (YarnServiceProtos.UpdatedContainerProto c : list) {\r\n        updatedContainers.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalNewNodeReportList",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initLocalNewNodeReportList()\n{\r\n    if (this.updatedNodes != null) {\r\n        return;\r\n    }\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeReportProto> list = p.getUpdatedNodesList();\r\n    updatedNodes = new ArrayList<NodeReport>(list.size());\r\n    for (NodeReportProto n : list) {\r\n        updatedNodes.add(convertFromProtoFormat(n));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalNewContainerList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalNewContainerList()\n{\r\n    if (this.allocatedContainers != null) {\r\n        return;\r\n    }\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerProto> list = p.getAllocatedContainersList();\r\n    allocatedContainers = new ArrayList<Container>();\r\n    for (ContainerProto c : list) {\r\n        allocatedContainers.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initContainersFromPreviousAttemptsList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initContainersFromPreviousAttemptsList()\n{\r\n    if (this.containersFromPreviousAttempts != null) {\r\n        return;\r\n    }\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerProto> list = p.getContainersFromPreviousAttemptsList();\r\n    containersFromPreviousAttempts = new ArrayList<>();\r\n    for (ContainerProto c : list) {\r\n        containersFromPreviousAttempts.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initRejectedRequestsList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initRejectedRequestsList()\n{\r\n    if (this.rejectedRequests != null) {\r\n        return;\r\n    }\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<YarnProtos.RejectedSchedulingRequestProto> list = p.getRejectedSchedulingRequestsList();\r\n    rejectedRequests = new ArrayList<>();\r\n    for (YarnProtos.RejectedSchedulingRequestProto c : list) {\r\n        rejectedRequests.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalNewNMTokenList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalNewNMTokenList()\n{\r\n    if (nmTokens != null) {\r\n        return;\r\n    }\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NMTokenProto> list = p.getNmTokensList();\r\n    nmTokens = new ArrayList<NMToken>();\r\n    for (NMTokenProto t : list) {\r\n        nmTokens.add(convertFromProtoFormat(t));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalUpdateErrorsList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalUpdateErrorsList()\n{\r\n    if (updateErrors != null) {\r\n        return;\r\n    }\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<YarnServiceProtos.UpdateContainerErrorProto> list = p.getUpdateErrorsList();\r\n    this.updateErrors = new ArrayList<UpdateContainerError>();\r\n    for (YarnServiceProtos.UpdateContainerErrorProto t : list) {\r\n        updateErrors.add(ProtoUtils.convertFromProtoFormat(t));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getUpdateErrorsIterable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Iterable<YarnServiceProtos.UpdateContainerErrorProto> getUpdateErrorsIterable(final List<UpdateContainerError> updateErrorsList)\n{\r\n    maybeInitBuilder();\r\n    return new Iterable<YarnServiceProtos.UpdateContainerErrorProto>() {\r\n\r\n        @Override\r\n        public synchronized Iterator<YarnServiceProtos.UpdateContainerErrorProto> iterator() {\r\n            return new Iterator<YarnServiceProtos.UpdateContainerErrorProto>() {\r\n\r\n                private Iterator<UpdateContainerError> iter = updateErrorsList.iterator();\r\n\r\n                @Override\r\n                public synchronized boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public synchronized YarnServiceProtos.UpdateContainerErrorProto next() {\r\n                    return ProtoUtils.convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public synchronized void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerProtoIterable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Iterable<ContainerProto> getContainerProtoIterable(final List<Container> newContainersList)\n{\r\n    maybeInitBuilder();\r\n    return new Iterable<ContainerProto>() {\r\n\r\n        @Override\r\n        public synchronized Iterator<ContainerProto> iterator() {\r\n            return new Iterator<ContainerProto>() {\r\n\r\n                Iterator<Container> iter = newContainersList.iterator();\r\n\r\n                @Override\r\n                public synchronized boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public synchronized ContainerProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public synchronized void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getUpdatedContainerProtoIterable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Iterable<YarnServiceProtos.UpdatedContainerProto> getUpdatedContainerProtoIterable(final List<UpdatedContainer> newUpdatedContainersList)\n{\r\n    maybeInitBuilder();\r\n    return new Iterable<YarnServiceProtos.UpdatedContainerProto>() {\r\n\r\n        @Override\r\n        public synchronized Iterator<YarnServiceProtos.UpdatedContainerProto> iterator() {\r\n            return new Iterator<YarnServiceProtos.UpdatedContainerProto>() {\r\n\r\n                private Iterator<UpdatedContainer> iter = newUpdatedContainersList.iterator();\r\n\r\n                @Override\r\n                public synchronized boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public synchronized YarnServiceProtos.UpdatedContainerProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public synchronized void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getTokenProtoIterable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Iterable<NMTokenProto> getTokenProtoIterable(final List<NMToken> nmTokenList)\n{\r\n    maybeInitBuilder();\r\n    return new Iterable<NMTokenProto>() {\r\n\r\n        @Override\r\n        public synchronized Iterator<NMTokenProto> iterator() {\r\n            return new Iterator<NMTokenProto>() {\r\n\r\n                Iterator<NMToken> iter = nmTokenList.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public NMTokenProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerStatusProtoIterable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Iterable<ContainerStatusProto> getContainerStatusProtoIterable(final List<ContainerStatus> newContainersList)\n{\r\n    maybeInitBuilder();\r\n    return new Iterable<ContainerStatusProto>() {\r\n\r\n        @Override\r\n        public synchronized Iterator<ContainerStatusProto> iterator() {\r\n            return new Iterator<ContainerStatusProto>() {\r\n\r\n                Iterator<ContainerStatus> iter = newContainersList.iterator();\r\n\r\n                @Override\r\n                public synchronized boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public synchronized ContainerStatusProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public synchronized void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getRejectedSchedulingRequestsProtoIterable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Iterable<YarnProtos.RejectedSchedulingRequestProto> getRejectedSchedulingRequestsProtoIterable(final List<RejectedSchedulingRequest> rejectedReqsList)\n{\r\n    maybeInitBuilder();\r\n    return new Iterable<YarnProtos.RejectedSchedulingRequestProto>() {\r\n\r\n        @Override\r\n        public Iterator<YarnProtos.RejectedSchedulingRequestProto> iterator() {\r\n            return new Iterator<YarnProtos.RejectedSchedulingRequestProto>() {\r\n\r\n                private Iterator<RejectedSchedulingRequest> iter = rejectedReqsList.iterator();\r\n\r\n                @Override\r\n                public synchronized boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public synchronized YarnProtos.RejectedSchedulingRequestProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public synchronized void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeReportProtoIterable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Iterable<NodeReportProto> getNodeReportProtoIterable(final List<NodeReport> newNodeReportsList)\n{\r\n    maybeInitBuilder();\r\n    return new Iterable<NodeReportProto>() {\r\n\r\n        @Override\r\n        public synchronized Iterator<NodeReportProto> iterator() {\r\n            return new Iterator<NodeReportProto>() {\r\n\r\n                Iterator<NodeReport> iter = newNodeReportsList.iterator();\r\n\r\n                @Override\r\n                public synchronized boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public synchronized NodeReportProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public synchronized void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalFinishedContainerList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalFinishedContainerList()\n{\r\n    if (this.completedContainersStatuses != null) {\r\n        return;\r\n    }\r\n    AllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerStatusProto> list = p.getCompletedContainerStatusesList();\r\n    completedContainersStatuses = new ArrayList<ContainerStatus>();\r\n    for (ContainerStatusProto c : list) {\r\n        completedContainersStatuses.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeReportPBImpl convertFromProtoFormat(NodeReportProto p)\n{\r\n    return new NodeReportPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeReportProto convertToProtoFormat(NodeReport t)\n{\r\n    return ((NodeReportPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CollectorInfoPBImpl convertFromProtoFormat(CollectorInfoProto p)\n{\r\n    return new CollectorInfoPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CollectorInfoProto convertToProtoFormat(CollectorInfo t)\n{\r\n    return ((CollectorInfoPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerPBImpl convertFromProtoFormat(ContainerProto p)\n{\r\n    return new ContainerPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerProto convertToProtoFormat(Container t)\n{\r\n    return ((ContainerPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UpdatedContainerPBImpl convertFromProtoFormat(YarnServiceProtos.UpdatedContainerProto p)\n{\r\n    return new UpdatedContainerPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnServiceProtos.UpdatedContainerProto convertToProtoFormat(UpdatedContainer t)\n{\r\n    return ((UpdatedContainerPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerStatusPBImpl convertFromProtoFormat(ContainerStatusProto p)\n{\r\n    return new ContainerStatusPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerStatusProto convertToProtoFormat(ContainerStatus t)\n{\r\n    return ((ContainerStatusPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RejectedSchedulingRequestPBImpl convertFromProtoFormat(YarnProtos.RejectedSchedulingRequestProto p)\n{\r\n    return new RejectedSchedulingRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnProtos.RejectedSchedulingRequestProto convertToProtoFormat(RejectedSchedulingRequest t)\n{\r\n    return ((RejectedSchedulingRequestPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource r)\n{\r\n    return ProtoUtils.convertToProtoFormat(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PreemptionMessagePBImpl convertFromProtoFormat(PreemptionMessageProto p)\n{\r\n    return new PreemptionMessagePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PreemptionMessageProto convertToProtoFormat(PreemptionMessage r)\n{\r\n    return ((PreemptionMessagePBImpl) r).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NMTokenProto convertToProtoFormat(NMToken token)\n{\r\n    return ((NMTokenPBImpl) token).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMToken convertFromProtoFormat(NMTokenProto proto)\n{\r\n    return new NMTokenPBImpl(proto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenPBImpl convertFromProtoFormat(TokenProto p)\n{\r\n    return new TokenPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token t)\n{\r\n    return ((TokenPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PriorityPBImpl convertFromProtoFormat(PriorityProto p)\n{\r\n    return new PriorityPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PriorityProto convertToProtoFormat(Priority t)\n{\r\n    return ((PriorityPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "EnhancedHeadroomPBImpl convertFromProtoFormat(YarnServiceProtos.EnhancedHeadroomProto p)\n{\r\n    return new EnhancedHeadroomPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnServiceProtos.EnhancedHeadroomProto convertToProtoFormat(EnhancedHeadroom t)\n{\r\n    return ((EnhancedHeadroomPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getKerberosInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "KerberosInfo getKerberosInfo(Class<?> protocol, Configuration conf)\n{\r\n    if (!protocol.equals(ApplicationHistoryProtocolPB.class)) {\r\n        return null;\r\n    }\r\n    return new KerberosInfo() {\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public String serverPrincipal() {\r\n            return YarnConfiguration.TIMELINE_SERVICE_PRINCIPAL;\r\n        }\r\n\r\n        @Override\r\n        public String clientPrincipal() {\r\n            return null;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getTokenInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenInfo getTokenInfo(Class<?> protocol, Configuration conf)\n{\r\n    if (!protocol.equals(ApplicationHistoryProtocolPB.class)) {\r\n        return null;\r\n    }\r\n    return new TokenInfo() {\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public Class<? extends TokenSelector<? extends TokenIdentifier>> value() {\r\n            return TimelineDelegationTokenSelector.class;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeToAttributeValueProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NodeToAttributeValueProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAttributeValue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getAttributeValue()\n{\r\n    NodeToAttributeValueProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getAttributeValue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAttributeValue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAttributeValue(String attributeValue)\n{\r\n    maybeInitBuilder();\r\n    if (attributeValue == null) {\r\n        builder.clearAttributeValue();\r\n        return;\r\n    }\r\n    builder.setAttributeValue(attributeValue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getHostname",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getHostname()\n{\r\n    NodeToAttributeValueProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasHostname()) {\r\n        return null;\r\n    }\r\n    return p.getHostname();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setHostname",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHostname(String hostname)\n{\r\n    maybeInitBuilder();\r\n    if (hostname == null) {\r\n        builder.clearHostname();\r\n        return;\r\n    }\r\n    builder.setHostname(hostname);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((getAttributeValue() == null) ? 0 : getAttributeValue().hashCode());\r\n    result = prime * result + ((getHostname() == null) ? 0 : getHostname().hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (obj instanceof NodeToAttributeValue) {\r\n        NodeToAttributeValue other = (NodeToAttributeValue) obj;\r\n        if (!compare(getAttributeValue(), other.getAttributeValue())) {\r\n            return false;\r\n        }\r\n        if (!compare(getHostname(), other.getHostname())) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "compare",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean compare(Object left, Object right)\n{\r\n    if (left == null) {\r\n        return right == null;\r\n    } else {\r\n        return left.equals(right);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    return \"Name-\" + getHostname() + \" : Attribute Value-\" + getAttributeValue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CancelDelegationTokenResponseProto getProto()\n{\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ResourceProto getProto(Resource r)\n{\r\n    final ResourcePBImpl pb;\r\n    if (r instanceof ResourcePBImpl) {\r\n        pb = (ResourcePBImpl) r;\r\n    } else {\r\n        pb = new ResourcePBImpl();\r\n        pb.setMemorySize(r.getMemorySize());\r\n        pb.setVirtualCores(r.getVirtualCores());\r\n        for (ResourceInformation res : r.getResources()) {\r\n            pb.setResourceInformation(res.getName(), res);\r\n        }\r\n    }\r\n    return pb.getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ResourceProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getMemory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getMemory()\n{\r\n    return castToIntSafely(this.getMemorySize());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getMemorySize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getMemorySize()\n{\r\n    ResourceInformation ri = resources[MEMORY_INDEX];\r\n    if (ri.getUnits().isEmpty()) {\r\n        return ri.getValue();\r\n    }\r\n    return UnitsConversionUtil.convert(ri.getUnits(), ResourceInformation.MEMORY_MB.getUnits(), ri.getValue());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setMemory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setMemory(int memory)\n{\r\n    setMemorySize(memory);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setMemorySize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMemorySize(long memory)\n{\r\n    maybeInitBuilder();\r\n    resources[MEMORY_INDEX].setValue(memory);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getVirtualCores",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getVirtualCores()\n{\r\n    return castToIntSafely(resources[VCORES_INDEX].getValue());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setVirtualCores",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setVirtualCores(int vCores)\n{\r\n    maybeInitBuilder();\r\n    resources[VCORES_INDEX].setValue(vCores);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initResources",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void initResources()\n{\r\n    if (this.resources != null) {\r\n        return;\r\n    }\r\n    ResourceProtoOrBuilder p = viaProto ? proto : builder;\r\n    ResourceInformation[] types = ResourceUtils.getResourceTypesArray();\r\n    Map<String, Integer> indexMap = ResourceUtils.getResourceTypeIndex();\r\n    resources = new ResourceInformation[types.length];\r\n    for (ResourceInformationProto entry : p.getResourceValueMapList()) {\r\n        Integer index = indexMap.get(entry.getKey());\r\n        if (index == null) {\r\n            LOG.warn(\"Got unknown resource type: \" + entry.getKey() + \"; skipping\");\r\n        } else {\r\n            resources[index] = newDefaultInformation(types[index], entry);\r\n        }\r\n    }\r\n    resources[MEMORY_INDEX] = ResourceInformation.newInstance(ResourceInformation.MEMORY_MB);\r\n    resources[VCORES_INDEX] = ResourceInformation.newInstance(ResourceInformation.VCORES);\r\n    this.setMemorySize(p.getMemory());\r\n    this.setVirtualCores(p.getVirtualCores());\r\n    updateResourceInformationMap(types);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "updateResourceInformationMap",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void updateResourceInformationMap(ResourceInformation[] types)\n{\r\n    for (int i = 0; i < types.length; i++) {\r\n        if (resources[i] == null) {\r\n            resources[i] = ResourceInformation.newInstance(types[i]);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "newDefaultInformation",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "ResourceInformation newDefaultInformation(ResourceInformation resourceInformation, ResourceInformationProto entry)\n{\r\n    ResourceInformation ri = new ResourceInformation();\r\n    ri.setName(resourceInformation.getName());\r\n    ri.setMinimumAllocation(resourceInformation.getMinimumAllocation());\r\n    ri.setMaximumAllocation(resourceInformation.getMaximumAllocation());\r\n    ri.setResourceType(entry.hasType() ? ProtoUtils.convertFromProtoFormat(entry.getType()) : ResourceTypes.COUNTABLE);\r\n    String units = entry.hasUnits() ? entry.getUnits() : ResourceUtils.getDefaultUnit(entry.getKey());\r\n    long value = entry.hasValue() ? entry.getValue() : 0L;\r\n    String destUnit = ResourceUtils.getDefaultUnit(entry.getKey());\r\n    if (!units.equals(destUnit)) {\r\n        ri.setValue(UnitsConversionUtil.convert(units, destUnit, value));\r\n        ri.setUnits(destUnit);\r\n    } else {\r\n        ri.setUnits(units);\r\n        ri.setValue(value);\r\n    }\r\n    if (entry.getTagsCount() > 0) {\r\n        ri.setTags(new HashSet<>(entry.getTagsList()));\r\n    } else {\r\n        ri.setTags(ImmutableSet.of());\r\n    }\r\n    if (entry.getAttributesCount() > 0) {\r\n        ri.setAttributes(ProtoUtils.convertStringStringMapProtoListToMap(entry.getAttributesList()));\r\n    } else {\r\n        ri.setAttributes(ImmutableMap.of());\r\n    }\r\n    return ri;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResourceInformation",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setResourceInformation(String resource, ResourceInformation resourceInformation)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null || resourceInformation == null) {\r\n        throw new IllegalArgumentException(\"resource and/or resourceInformation cannot be null\");\r\n    }\r\n    ResourceInformation storedResourceInfo = super.getResourceInformation(resource);\r\n    ResourceInformation.copy(resourceInformation, storedResourceInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResourceValue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResourceValue(String resource, long value)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null) {\r\n        throw new IllegalArgumentException(\"resource type object cannot be null\");\r\n    }\r\n    getResourceInformation(resource).setValue(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResourceInformation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceInformation getResourceInformation(String resource)\n{\r\n    initResources();\r\n    return super.getResourceInformation(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResourceValue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getResourceValue(String resource)\n{\r\n    return super.getResourceValue(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    builder.clearResourceValueMap();\r\n    if (resources != null && resources.length != 0) {\r\n        for (ResourceInformation resInfo : resources) {\r\n            ResourceInformationProto.Builder e = ResourceInformationProto.newBuilder();\r\n            e.setKey(resInfo.getName());\r\n            e.setUnits(resInfo.getUnits());\r\n            e.setType(ProtoUtils.converToProtoFormat(resInfo.getResourceType()));\r\n            e.setValue(resInfo.getValue());\r\n            if (resInfo.getAttributes() != null && !resInfo.getAttributes().isEmpty()) {\r\n                e.addAllAttributes(ProtoUtils.convertToProtoFormat(resInfo.getAttributes()));\r\n            }\r\n            if (resInfo.getTags() != null && !resInfo.getTags().isEmpty()) {\r\n                e.addAllTags(resInfo.getTags());\r\n            }\r\n            builder.addResourceValueMap(e);\r\n        }\r\n    }\r\n    builder.setMemory(this.getMemorySize());\r\n    builder.setVirtualCores(this.getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "QueueConfigurationsProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.effMinResource != null) {\r\n        builder.setEffectiveMinCapacity(convertToProtoFormat(this.effMinResource));\r\n    }\r\n    if (this.effMaxResource != null) {\r\n        builder.setEffectiveMaxCapacity(convertToProtoFormat(this.effMaxResource));\r\n    }\r\n    if (this.configuredMinResource != null) {\r\n        builder.setEffectiveMinCapacity(convertToProtoFormat(this.configuredMinResource));\r\n    }\r\n    if (this.configuredMaxResource != null) {\r\n        builder.setEffectiveMaxCapacity(convertToProtoFormat(this.configuredMaxResource));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getCapacity()\n{\r\n    QueueConfigurationsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasCapacity()) ? p.getCapacity() : 0f;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCapacity(float capacity)\n{\r\n    maybeInitBuilder();\r\n    builder.setCapacity(capacity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAbsoluteCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getAbsoluteCapacity()\n{\r\n    QueueConfigurationsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasAbsoluteCapacity()) ? p.getAbsoluteCapacity() : 0f;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAbsoluteCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAbsoluteCapacity(float absoluteCapacity)\n{\r\n    maybeInitBuilder();\r\n    builder.setAbsoluteCapacity(absoluteCapacity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getMaxCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getMaxCapacity()\n{\r\n    QueueConfigurationsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasMaxCapacity()) ? p.getMaxCapacity() : 0f;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setMaxCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMaxCapacity(float maxCapacity)\n{\r\n    maybeInitBuilder();\r\n    builder.setMaxCapacity(maxCapacity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAbsoluteMaxCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getAbsoluteMaxCapacity()\n{\r\n    QueueConfigurationsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasAbsoluteMaxCapacity()) ? p.getAbsoluteMaxCapacity() : 0f;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAbsoluteMaxCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAbsoluteMaxCapacity(float absoluteMaxCapacity)\n{\r\n    maybeInitBuilder();\r\n    builder.setAbsoluteMaxCapacity(absoluteMaxCapacity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getMaxAMPercentage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getMaxAMPercentage()\n{\r\n    QueueConfigurationsProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasMaxAMPercentage()) ? p.getMaxAMPercentage() : 0f;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setMaxAMPercentage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMaxAMPercentage(float maxAMPercentage)\n{\r\n    maybeInitBuilder();\r\n    builder.setMaxAMPercentage(maxAMPercentage);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getEffectiveMinCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getEffectiveMinCapacity()\n{\r\n    QueueConfigurationsProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.effMinResource != null) {\r\n        return this.effMinResource;\r\n    }\r\n    if (!p.hasEffectiveMinCapacity()) {\r\n        return null;\r\n    }\r\n    this.effMinResource = convertFromProtoFormat(p.getEffectiveMinCapacity());\r\n    return this.effMinResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setEffectiveMinCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setEffectiveMinCapacity(Resource capacity)\n{\r\n    maybeInitBuilder();\r\n    if (capacity == null) {\r\n        builder.clearEffectiveMinCapacity();\r\n    }\r\n    this.effMinResource = capacity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getEffectiveMaxCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getEffectiveMaxCapacity()\n{\r\n    QueueConfigurationsProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.effMaxResource != null) {\r\n        return this.effMaxResource;\r\n    }\r\n    if (!p.hasEffectiveMaxCapacity()) {\r\n        return null;\r\n    }\r\n    this.effMaxResource = convertFromProtoFormat(p.getEffectiveMaxCapacity());\r\n    return this.effMaxResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setEffectiveMaxCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setEffectiveMaxCapacity(Resource capacity)\n{\r\n    maybeInitBuilder();\r\n    if (capacity == null) {\r\n        builder.clearEffectiveMaxCapacity();\r\n    }\r\n    this.effMaxResource = capacity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource t)\n{\r\n    return ProtoUtils.convertToProtoFormat(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = QueueConfigurationsProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getConfiguredMinCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getConfiguredMinCapacity()\n{\r\n    QueueConfigurationsProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.configuredMinResource != null) {\r\n        return this.configuredMinResource;\r\n    }\r\n    if (!p.hasConfiguredMinCapacity()) {\r\n        return null;\r\n    }\r\n    this.configuredMinResource = convertFromProtoFormat(p.getConfiguredMinCapacity());\r\n    return this.configuredMinResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setConfiguredMinCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setConfiguredMinCapacity(Resource minResource)\n{\r\n    maybeInitBuilder();\r\n    if (minResource == null) {\r\n        builder.clearConfiguredMinCapacity();\r\n    }\r\n    this.configuredMinResource = minResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getConfiguredMaxCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getConfiguredMaxCapacity()\n{\r\n    QueueConfigurationsProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.configuredMaxResource != null) {\r\n        return this.configuredMaxResource;\r\n    }\r\n    if (!p.hasConfiguredMaxCapacity()) {\r\n        return null;\r\n    }\r\n    this.configuredMaxResource = convertFromProtoFormat(p.getConfiguredMaxCapacity());\r\n    return this.configuredMaxResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setConfiguredMaxCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setConfiguredMaxCapacity(Resource maxResource)\n{\r\n    maybeInitBuilder();\r\n    if (configuredMaxResource == null) {\r\n        builder.clearConfiguredMaxCapacity();\r\n    }\r\n    this.configuredMaxResource = maxResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SignalContainerResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getPathFromYarnURL",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getPathFromYarnURL(URL url) throws URISyntaxException\n{\r\n    return url.toPath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getYarnUrlFromPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URL getYarnUrlFromPath(Path path)\n{\r\n    return URL.fromPath(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "getYarnUrlFromURI",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URL getYarnUrlFromURI(URI uri)\n{\r\n    return URL.fromURI(uri);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString(ApplicationId appId)\n{\r\n    return appId.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "toApplicationId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationId toApplicationId(RecordFactory recordFactory, String applicationIdStr)\n{\r\n    return ApplicationId.fromString(applicationIdStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString(ContainerId cId)\n{\r\n    return cId == null ? null : cId.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "toNodeIdWithDefaultPort",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "NodeId toNodeIdWithDefaultPort(String nodeIdStr)\n{\r\n    if (nodeIdStr.indexOf(\":\") < 0) {\r\n        return NodeId.fromString(nodeIdStr + \":0\");\r\n    }\r\n    return NodeId.fromString(nodeIdStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "toNodeId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeId toNodeId(String nodeIdStr)\n{\r\n    return NodeId.fromString(nodeIdStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "toContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId toContainerId(String containerIdStr)\n{\r\n    return ContainerId.fromString(containerIdStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "toApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptId toApplicationAttemptId(String applicationAttemptIdStr)\n{\r\n    return ApplicationAttemptId.fromString(applicationAttemptIdStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "toApplicationId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationId toApplicationId(String appIdStr)\n{\r\n    return ApplicationId.fromString(appIdStr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "convertFromYarn",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Token<T> convertFromYarn(org.apache.hadoop.yarn.api.records.Token protoToken, InetSocketAddress serviceAddr)\n{\r\n    Token<T> token = new Token<T>(protoToken.getIdentifier().array(), protoToken.getPassword().array(), new Text(protoToken.getKind()), new Text(protoToken.getService()));\r\n    if (serviceAddr != null) {\r\n        SecurityUtil.setTokenService(token, serviceAddr);\r\n    }\r\n    return token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "convertFromYarn",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Token<T> convertFromYarn(org.apache.hadoop.yarn.api.records.Token protoToken, Text service)\n{\r\n    Token<T> token = new Token<T>(protoToken.getIdentifier().array(), protoToken.getPassword().array(), new Text(protoToken.getKind()), new Text(protoToken.getService()));\r\n    if (service != null) {\r\n        token.setService(service);\r\n    }\r\n    return token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "render",
  "errType" : [ "RuntimeException", "Exception", "IOException", "IOException", "IOException" ],
  "containingMethodsNum" : 37,
  "sourceCodeText" : "void render(Block html)\n{\r\n    BlockParameters params = verifyAndParseParameters(html);\r\n    if (params == null) {\r\n        return;\r\n    }\r\n    RemoteIterator<FileStatus> nodeFiles;\r\n    try {\r\n        nodeFiles = LogAggregationUtils.getRemoteNodeFileDir(conf, params.getAppId(), params.getAppOwner(), remoteRootLogDir, remoteRootLogDirSuffix);\r\n    } catch (RuntimeException e) {\r\n        throw e;\r\n    } catch (Exception ex) {\r\n        html.h1(\"No logs available for container \" + params.getContainerId().toString());\r\n        return;\r\n    }\r\n    NodeId nodeId = params.getNodeId();\r\n    String logEntity = params.getLogEntity();\r\n    ApplicationId appId = params.getAppId();\r\n    ContainerId containerId = params.getContainerId();\r\n    long start = params.getStartIndex();\r\n    long end = params.getEndIndex();\r\n    long startTime = params.getStartTime();\r\n    long endTime = params.getEndTime();\r\n    boolean foundLog = false;\r\n    String desiredLogType = $(CONTAINER_LOG_TYPE);\r\n    try {\r\n        while (nodeFiles.hasNext()) {\r\n            AggregatedLogFormat.LogReader reader = null;\r\n            try {\r\n                FileStatus thisNodeFile = nodeFiles.next();\r\n                if (thisNodeFile.getPath().getName().equals(params.getAppId() + \".har\")) {\r\n                    Path p = new Path(\"har:///\" + thisNodeFile.getPath().toUri().getRawPath());\r\n                    nodeFiles = HarFs.get(p.toUri(), conf).listStatusIterator(p);\r\n                    continue;\r\n                }\r\n                if (!thisNodeFile.getPath().getName().contains(LogAggregationUtils.getNodeString(nodeId)) || thisNodeFile.getPath().getName().endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\r\n                    continue;\r\n                }\r\n                long logUploadedTime = thisNodeFile.getModificationTime();\r\n                if (logUploadedTime < startTime || logUploadedTime > endTime) {\r\n                    continue;\r\n                }\r\n                reader = new AggregatedLogFormat.LogReader(conf, thisNodeFile.getPath());\r\n                String owner = null;\r\n                Map<ApplicationAccessType, String> appAcls = null;\r\n                try {\r\n                    owner = reader.getApplicationOwner();\r\n                    appAcls = reader.getApplicationAcls();\r\n                } catch (IOException e) {\r\n                    LOG.error(\"Error getting logs for \" + logEntity, e);\r\n                    continue;\r\n                }\r\n                String remoteUser = request().getRemoteUser();\r\n                if (!checkAcls(conf, appId, owner, appAcls, remoteUser)) {\r\n                    html.h1().__(\"User [\" + remoteUser + \"] is not authorized to view the logs for \" + logEntity + \" in log file [\" + thisNodeFile.getPath().getName() + \"]\").__();\r\n                    LOG.error(\"User [\" + remoteUser + \"] is not authorized to view the logs for \" + logEntity);\r\n                    continue;\r\n                }\r\n                AggregatedLogFormat.ContainerLogsReader logReader = reader.getContainerLogsReader(containerId);\r\n                if (logReader == null) {\r\n                    continue;\r\n                }\r\n                foundLog = readContainerLogs(html, logReader, start, end, desiredLogType, logUploadedTime, startTime, endTime);\r\n            } catch (IOException ex) {\r\n                LOG.error(\"Error getting logs for \" + logEntity, ex);\r\n                continue;\r\n            } finally {\r\n                if (reader != null) {\r\n                    reader.close();\r\n                }\r\n            }\r\n        }\r\n        if (!foundLog) {\r\n            if (desiredLogType.isEmpty()) {\r\n                html.h1(\"No logs available for container \" + containerId.toString());\r\n            } else {\r\n                html.h1(\"Unable to locate '\" + desiredLogType + \"' log for container \" + containerId.toString());\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        html.h1().__(\"Error getting logs for \" + logEntity).__();\r\n        LOG.error(\"Error getting logs for \" + logEntity, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "readContainerLogs",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "boolean readContainerLogs(Block html, AggregatedLogFormat.ContainerLogsReader logReader, long startIndex, long endIndex, String desiredLogType, long logUpLoadTime, long startTime, long endTime) throws IOException\n{\r\n    int bufferSize = 65536;\r\n    byte[] cbuf = new byte[bufferSize];\r\n    boolean foundLog = false;\r\n    String logType = logReader.nextLog();\r\n    while (logType != null) {\r\n        if (desiredLogType == null || desiredLogType.isEmpty() || desiredLogType.equals(logType)) {\r\n            long logLength = logReader.getCurrentLogLength();\r\n            if (foundLog) {\r\n                html.pre().__(\"\\n\\n\").__();\r\n            }\r\n            html.p().__(\"Log Type: \" + logType).__();\r\n            html.p().__(\"Log Upload Time: \" + Times.format(logUpLoadTime)).__();\r\n            html.p().__(\"Log Length: \" + Long.toString(logLength)).__();\r\n            long[] range = checkParseRange(html, startIndex, endIndex, startTime, endTime, logLength, logType);\r\n            processContainerLog(html, range, logReader, bufferSize, cbuf);\r\n            foundLog = true;\r\n        }\r\n        logType = logReader.nextLog();\r\n    }\r\n    return foundLog;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void init(Configuration configuration, RMProxy<T> rmProxy, Class<T> protocol)\n{\r\n    this.rmProxy = rmProxy;\r\n    this.protocol = protocol;\r\n    this.rmProxy.checkAllowedProtocols(this.protocol);\r\n    this.conf = new YarnConfiguration(configuration);\r\n    Collection<String> rmIds = HAUtil.getRMHAIds(conf);\r\n    this.rmServiceIds = rmIds.toArray(new String[rmIds.size()]);\r\n    conf.set(YarnConfiguration.RM_HA_ID, rmServiceIds[currentProxyIndex]);\r\n    conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES, YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\r\n    conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY, conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS, YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getProxyInternal",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "T getProxyInternal()\n{\r\n    try {\r\n        final InetSocketAddress rmAddress = rmProxy.getRMAddress(conf, protocol);\r\n        return rmProxy.getProxy(conf, protocol, rmAddress);\r\n    } catch (IOException ioe) {\r\n        LOG.error(\"Unable to create proxy to the ResourceManager \" + rmServiceIds[currentProxyIndex], ioe);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getProxy",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ProxyInfo<T> getProxy()\n{\r\n    String rmId = rmServiceIds[currentProxyIndex];\r\n    T current = proxies.get(rmId);\r\n    if (current == null) {\r\n        current = getProxyInternal();\r\n        proxies.put(rmId, current);\r\n    }\r\n    return new ProxyInfo<T>(current, rmId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "performFailover",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void performFailover(T currentProxy)\n{\r\n    currentProxyIndex = (currentProxyIndex + 1) % rmServiceIds.length;\r\n    conf.set(YarnConfiguration.RM_HA_ID, rmServiceIds[currentProxyIndex]);\r\n    LOG.info(\"Failing over to \" + rmServiceIds[currentProxyIndex]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getInterface",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<T> getInterface()\n{\r\n    return protocol;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    for (T proxy : proxies.values()) {\r\n        if (proxy instanceof Closeable) {\r\n            ((Closeable) proxy).close();\r\n        } else {\r\n            RPC.stopProxy(proxy);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "checkService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean checkService(Text service, Token<? extends TokenIdentifier> token)\n{\r\n    if (service == null || token.getService() == null) {\r\n        return false;\r\n    }\r\n    return token.getService().toString().contains(service.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "selectToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token<RMDelegationTokenIdentifier> selectToken(Text service, Collection<Token<? extends TokenIdentifier>> tokens)\n{\r\n    if (service == null) {\r\n        return null;\r\n    }\r\n    LOG.debug(\"Looking for a token with service {}\", service);\r\n    for (Token<? extends TokenIdentifier> token : tokens) {\r\n        LOG.debug(\"Token kind is {} and the token's service name is {}\", token.getKind(), token.getService());\r\n        if (RMDelegationTokenIdentifier.KIND_NAME.equals(token.getKind()) && checkService(service, token)) {\r\n            return (Token<RMDelegationTokenIdentifier>) token;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationAttemptList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationAttemptReport> getApplicationAttemptList()\n{\r\n    initLocalApplicationAttemptsList();\r\n    return this.applicationAttemptList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationAttemptList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationAttemptList(List<ApplicationAttemptReport> applicationAttempts)\n{\r\n    maybeInitBuilder();\r\n    if (applicationAttempts == null) {\r\n        builder.clearApplicationAttempts();\r\n    }\r\n    this.applicationAttemptList = applicationAttempts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationAttemptsResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationAttemptList != null) {\r\n        addLocalApplicationAttemptsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetApplicationAttemptsResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalApplicationAttemptsList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalApplicationAttemptsList()\n{\r\n    if (this.applicationAttemptList != null) {\r\n        return;\r\n    }\r\n    GetApplicationAttemptsResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ApplicationAttemptReportProto> list = p.getApplicationAttemptsList();\r\n    applicationAttemptList = new ArrayList<ApplicationAttemptReport>();\r\n    for (ApplicationAttemptReportProto a : list) {\r\n        applicationAttemptList.add(convertFromProtoFormat(a));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalApplicationAttemptsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addLocalApplicationAttemptsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearApplicationAttempts();\r\n    if (applicationAttemptList == null) {\r\n        return;\r\n    }\r\n    Iterable<ApplicationAttemptReportProto> iterable = new Iterable<ApplicationAttemptReportProto>() {\r\n\r\n        @Override\r\n        public Iterator<ApplicationAttemptReportProto> iterator() {\r\n            return new Iterator<ApplicationAttemptReportProto>() {\r\n\r\n                Iterator<ApplicationAttemptReport> iter = applicationAttemptList.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ApplicationAttemptReportProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllApplicationAttempts(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptReportPBImpl convertFromProtoFormat(ApplicationAttemptReportProto p)\n{\r\n    return new ApplicationAttemptReportPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptReportProto convertToProtoFormat(ApplicationAttemptReport t)\n{\r\n    return ((ApplicationAttemptReportPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshUserToGroupsMappingsResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "dumpTimelineRecordtoJSON",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String dumpTimelineRecordtoJSON(Object o) throws JsonGenerationException, JsonMappingException, IOException\n{\r\n    return dumpTimelineRecordtoJSON(o, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "dumpTimelineRecordtoJSON",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String dumpTimelineRecordtoJSON(Object o, boolean pretty) throws JsonGenerationException, JsonMappingException, IOException\n{\r\n    if (pretty) {\r\n        return mapper.writerWithDefaultPrettyPrinter().writeValueAsString(o);\r\n    } else {\r\n        return mapper.writeValueAsString(o);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "timelineServiceEnabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean timelineServiceEnabled(Configuration conf)\n{\r\n    return conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "getTimelineServiceVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getTimelineServiceVersion(Configuration conf)\n{\r\n    return conf.getFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_VERSION);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "timelineServiceV1_5Enabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean timelineServiceV1_5Enabled(Configuration conf)\n{\r\n    return YarnConfiguration.timelineServiceV15Enabled(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "createTimelineAbout",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "TimelineAbout createTimelineAbout(String about)\n{\r\n    TimelineAbout tsInfo = new TimelineAbout(about);\r\n    tsInfo.setHadoopBuildVersion(VersionInfo.getBuildVersion());\r\n    tsInfo.setHadoopVersion(VersionInfo.getVersion());\r\n    tsInfo.setHadoopVersionBuiltOn(VersionInfo.getDate());\r\n    tsInfo.setTimelineServiceBuildVersion(YarnVersionInfo.getBuildVersion());\r\n    tsInfo.setTimelineServiceVersion(YarnVersionInfo.getVersion());\r\n    tsInfo.setTimelineServiceVersionBuiltOn(YarnVersionInfo.getDate());\r\n    return tsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "getTimelineTokenServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "InetSocketAddress getTimelineTokenServiceAddress(Configuration conf)\n{\r\n    InetSocketAddress timelineServiceAddr = null;\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        timelineServiceAddr = conf.getSocketAddr(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_HTTPS_PORT);\r\n    } else {\r\n        timelineServiceAddr = conf.getSocketAddr(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_PORT);\r\n    }\r\n    return timelineServiceAddr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "buildTimelineTokenService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Text buildTimelineTokenService(Configuration conf)\n{\r\n    InetSocketAddress timelineServiceAddr = getTimelineTokenServiceAddress(conf);\r\n    return SecurityUtil.buildTokenService(timelineServiceAddr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "generateDefaultFlowName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String generateDefaultFlowName(String appName, ApplicationId appId)\n{\r\n    return (appName != null && !appName.equals(YarnConfiguration.DEFAULT_APPLICATION_NAME)) ? appName : \"flow_\" + appId.getClusterTimestamp() + \"_\" + appId.getId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "generateFlowNameTag",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String generateFlowNameTag(String flowName)\n{\r\n    return FLOW_NAME_TAG_PREFIX + \":\" + flowName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "shortenFlowName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String shortenFlowName(String flowName, Configuration conf)\n{\r\n    if (flowName == null) {\r\n        return null;\r\n    }\r\n    flowName = removeUUID(flowName);\r\n    int length = conf.getInt(YarnConfiguration.FLOW_NAME_MAX_SIZE, YarnConfiguration.FLOW_NAME_DEFAULT_MAX_SIZE);\r\n    if (length <= 0) {\r\n        return flowName;\r\n    }\r\n    return StringUtils.substring(flowName, 0, length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "removeUUID",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String removeUUID(String flowName)\n{\r\n    flowName = StringUtils.replaceAll(flowName, \"-?([a-fA-F0-9]{8}-[a-fA-F0-9]{4}-\" + \"[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}){1}\", \"\");\r\n    return flowName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "generateFlowVersionTag",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String generateFlowVersionTag(String flowVersion)\n{\r\n    return FLOW_VERSION_TAG_PREFIX + \":\" + flowVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\timeline",
  "methodName" : "generateFlowRunIdTag",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String generateFlowRunIdTag(long flowRunId)\n{\r\n    return FLOW_RUN_ID_TAG_PREFIX + \":\" + flowRunId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceOptionProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource getResource()\n{\r\n    ResourceOptionProtoOrBuilder p = viaProto ? proto : builder;\r\n    return convertFromProtoFormat(p.getResource());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResource(Resource resource)\n{\r\n    maybeInitBuilder();\r\n    builder.setResource(convertToProtoFormat(resource));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getOverCommitTimeout",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getOverCommitTimeout()\n{\r\n    ResourceOptionProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getOverCommitTimeout();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setOverCommitTimeout",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setOverCommitTimeout(int overCommitTimeout)\n{\r\n    maybeInitBuilder();\r\n    builder.setOverCommitTimeout(overCommitTimeout);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ResourceOptionProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource resource)\n{\r\n    return ProtoUtils.convertToProtoFormat(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "build",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void build()\n{\r\n    proto = builder.build();\r\n    viaProto = true;\r\n    builder = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.container != null) {\r\n        builder.setContainer(ProtoUtils.convertToProtoFormat(this.container));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = YarnServiceProtos.UpdatedContainerProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnServiceProtos.UpdatedContainerProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getUpdateType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerUpdateType getUpdateType()\n{\r\n    YarnServiceProtos.UpdatedContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasUpdateType()) {\r\n        return null;\r\n    }\r\n    return ProtoUtils.convertFromProtoFormat(p.getUpdateType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setUpdateType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUpdateType(ContainerUpdateType updateType)\n{\r\n    maybeInitBuilder();\r\n    if (updateType == null) {\r\n        builder.clearUpdateType();\r\n        return;\r\n    }\r\n    builder.setUpdateType(ProtoUtils.convertToProtoFormat(updateType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Container getContainer()\n{\r\n    YarnServiceProtos.UpdatedContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.container != null) {\r\n        return this.container;\r\n    }\r\n    if (!p.hasContainer()) {\r\n        return null;\r\n    }\r\n    this.container = ProtoUtils.convertFromProtoFormat(p.getContainer());\r\n    return this.container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainer(Container container)\n{\r\n    maybeInitBuilder();\r\n    if (container == null) {\r\n        builder.clearContainer();\r\n    }\r\n    this.container = container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RegisterApplicationMasterResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.maximumResourceCapability != null) {\r\n        builder.setMaximumCapability(convertToProtoFormat(this.maximumResourceCapability));\r\n    }\r\n    if (this.applicationACLS != null) {\r\n        addApplicationACLs();\r\n    }\r\n    if (this.containersFromPreviousAttempts != null) {\r\n        addContainersFromPreviousAttemptToProto();\r\n    }\r\n    if (nmTokens != null) {\r\n        builder.clearNmTokensFromPreviousAttempts();\r\n        Iterable<NMTokenProto> iterable = getTokenProtoIterable(nmTokens);\r\n        builder.addAllNmTokensFromPreviousAttempts(iterable);\r\n    }\r\n    if (schedulerResourceTypes != null) {\r\n        addSchedulerResourceTypes();\r\n    }\r\n    if (profiles != null) {\r\n        addResourceProfiles();\r\n    }\r\n    if (resourceTypeInfo != null) {\r\n        addResourceTypeInfosToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = RegisterApplicationMasterResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getMaximumResourceCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getMaximumResourceCapability()\n{\r\n    if (this.maximumResourceCapability != null) {\r\n        return this.maximumResourceCapability;\r\n    }\r\n    RegisterApplicationMasterResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasMaximumCapability()) {\r\n        return null;\r\n    }\r\n    this.maximumResourceCapability = convertFromProtoFormat(p.getMaximumCapability());\r\n    return this.maximumResourceCapability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setMaximumResourceCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMaximumResourceCapability(Resource capability)\n{\r\n    maybeInitBuilder();\r\n    if (maximumResourceCapability == null) {\r\n        builder.clearMaximumCapability();\r\n    }\r\n    this.maximumResourceCapability = capability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationACLs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ApplicationAccessType, String> getApplicationACLs()\n{\r\n    initApplicationACLs();\r\n    return this.applicationACLS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initApplicationACLs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initApplicationACLs()\n{\r\n    if (this.applicationACLS != null) {\r\n        return;\r\n    }\r\n    RegisterApplicationMasterResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ApplicationACLMapProto> list = p.getApplicationACLsList();\r\n    this.applicationACLS = new HashMap<ApplicationAccessType, String>(list.size());\r\n    for (ApplicationACLMapProto aclProto : list) {\r\n        this.applicationACLS.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()), aclProto.getAcl());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addApplicationACLs",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addApplicationACLs()\n{\r\n    maybeInitBuilder();\r\n    builder.clearApplicationACLs();\r\n    if (applicationACLS == null) {\r\n        return;\r\n    }\r\n    Iterable<? extends ApplicationACLMapProto> values = new Iterable<ApplicationACLMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<ApplicationACLMapProto> iterator() {\r\n            return new Iterator<ApplicationACLMapProto>() {\r\n\r\n                Iterator<ApplicationAccessType> aclsIterator = applicationACLS.keySet().iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return aclsIterator.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ApplicationACLMapProto next() {\r\n                    ApplicationAccessType key = aclsIterator.next();\r\n                    return ApplicationACLMapProto.newBuilder().setAcl(applicationACLS.get(key)).setAccessType(ProtoUtils.convertToProtoFormat(key)).build();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    this.builder.addAllApplicationACLs(values);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationACLs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationACLs(final Map<ApplicationAccessType, String> appACLs)\n{\r\n    if (appACLs == null)\r\n        return;\r\n    initApplicationACLs();\r\n    this.applicationACLS.clear();\r\n    this.applicationACLS.putAll(appACLs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setClientToAMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setClientToAMTokenMasterKey(ByteBuffer key)\n{\r\n    maybeInitBuilder();\r\n    if (key == null) {\r\n        builder.clearClientToAmTokenMasterKey();\r\n        return;\r\n    }\r\n    builder.setClientToAmTokenMasterKey(ByteString.copyFrom(key));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getClientToAMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ByteBuffer getClientToAMTokenMasterKey()\n{\r\n    maybeInitBuilder();\r\n    ByteBuffer key = ByteBuffer.wrap(builder.getClientToAmTokenMasterKey().toByteArray());\r\n    return key;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainersFromPreviousAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Container> getContainersFromPreviousAttempts()\n{\r\n    if (this.containersFromPreviousAttempts != null) {\r\n        return this.containersFromPreviousAttempts;\r\n    }\r\n    initContainersPreviousAttemptList();\r\n    return this.containersFromPreviousAttempts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainersFromPreviousAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setContainersFromPreviousAttempts(final List<Container> containers)\n{\r\n    if (containers == null) {\r\n        return;\r\n    }\r\n    this.containersFromPreviousAttempts = new ArrayList<Container>();\r\n    this.containersFromPreviousAttempts.addAll(containers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getQueue()\n{\r\n    RegisterApplicationMasterResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasQueue()) {\r\n        return null;\r\n    }\r\n    return p.getQueue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueue(String queue)\n{\r\n    maybeInitBuilder();\r\n    if (queue == null) {\r\n        builder.clearQueue();\r\n    } else {\r\n        builder.setQueue(queue);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initContainersPreviousAttemptList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initContainersPreviousAttemptList()\n{\r\n    RegisterApplicationMasterResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerProto> list = p.getContainersFromPreviousAttemptsList();\r\n    containersFromPreviousAttempts = new ArrayList<Container>();\r\n    for (ContainerProto c : list) {\r\n        containersFromPreviousAttempts.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addContainersFromPreviousAttemptToProto",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addContainersFromPreviousAttemptToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainersFromPreviousAttempts();\r\n    List<ContainerProto> list = new ArrayList<ContainerProto>();\r\n    for (Container c : containersFromPreviousAttempts) {\r\n        list.add(convertToProtoFormat(c));\r\n    }\r\n    builder.addAllContainersFromPreviousAttempts(list);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNMTokensFromPreviousAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<NMToken> getNMTokensFromPreviousAttempts()\n{\r\n    if (nmTokens != null) {\r\n        return nmTokens;\r\n    }\r\n    initLocalNewNMTokenList();\r\n    return nmTokens;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNMTokensFromPreviousAttempts",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setNMTokensFromPreviousAttempts(final List<NMToken> nmTokens)\n{\r\n    maybeInitBuilder();\r\n    if (nmTokens == null || nmTokens.isEmpty()) {\r\n        if (this.nmTokens != null) {\r\n            this.nmTokens.clear();\r\n        }\r\n        builder.clearNmTokensFromPreviousAttempts();\r\n        return;\r\n    }\r\n    this.nmTokens = new ArrayList<NMToken>();\r\n    this.nmTokens.addAll(nmTokens);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalNewNMTokenList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalNewNMTokenList()\n{\r\n    RegisterApplicationMasterResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NMTokenProto> list = p.getNmTokensFromPreviousAttemptsList();\r\n    nmTokens = new ArrayList<NMToken>();\r\n    for (NMTokenProto t : list) {\r\n        nmTokens.add(convertFromProtoFormat(t));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getTokenProtoIterable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Iterable<NMTokenProto> getTokenProtoIterable(final List<NMToken> nmTokenList)\n{\r\n    maybeInitBuilder();\r\n    return new Iterable<NMTokenProto>() {\r\n\r\n        @Override\r\n        public synchronized Iterator<NMTokenProto> iterator() {\r\n            return new Iterator<NMTokenProto>() {\r\n\r\n                Iterator<NMToken> iter = nmTokenList.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public NMTokenProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getSchedulerResourceTypes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "EnumSet<SchedulerResourceTypes> getSchedulerResourceTypes()\n{\r\n    initSchedulerResourceTypes();\r\n    return this.schedulerResourceTypes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initSchedulerResourceTypes",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initSchedulerResourceTypes()\n{\r\n    if (this.schedulerResourceTypes != null) {\r\n        return;\r\n    }\r\n    RegisterApplicationMasterResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<SchedulerResourceTypes> list = p.getSchedulerResourceTypesList();\r\n    if (list.isEmpty()) {\r\n        this.schedulerResourceTypes = EnumSet.noneOf(SchedulerResourceTypes.class);\r\n    } else {\r\n        this.schedulerResourceTypes = EnumSet.copyOf(list);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addSchedulerResourceTypes",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addSchedulerResourceTypes()\n{\r\n    maybeInitBuilder();\r\n    builder.clearSchedulerResourceTypes();\r\n    if (schedulerResourceTypes == null) {\r\n        return;\r\n    }\r\n    Iterable<? extends SchedulerResourceTypes> values = new Iterable<SchedulerResourceTypes>() {\r\n\r\n        @Override\r\n        public Iterator<SchedulerResourceTypes> iterator() {\r\n            return new Iterator<SchedulerResourceTypes>() {\r\n\r\n                Iterator<SchedulerResourceTypes> settingsIterator = schedulerResourceTypes.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return settingsIterator.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public SchedulerResourceTypes next() {\r\n                    return settingsIterator.next();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    this.builder.addAllSchedulerResourceTypes(values);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setSchedulerResourceTypes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setSchedulerResourceTypes(EnumSet<SchedulerResourceTypes> types)\n{\r\n    if (types == null) {\r\n        return;\r\n    }\r\n    initSchedulerResourceTypes();\r\n    this.schedulerResourceTypes.clear();\r\n    this.schedulerResourceTypes.addAll(types);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addResourceProfiles",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void addResourceProfiles()\n{\r\n    maybeInitBuilder();\r\n    builder.clearResourceProfiles();\r\n    if (profiles == null) {\r\n        return;\r\n    }\r\n    ResourceProfilesProto.Builder profilesBuilder = ResourceProfilesProto.newBuilder();\r\n    for (Map.Entry<String, Resource> entry : profiles.entrySet()) {\r\n        ResourceProfileEntry.Builder entryBuilder = ResourceProfileEntry.newBuilder();\r\n        entryBuilder.setName(entry.getKey());\r\n        entryBuilder.setResources(convertToProtoFormat(entry.getValue()));\r\n        profilesBuilder.addResourceProfilesMap(entryBuilder.build());\r\n    }\r\n    builder.setResourceProfiles(profilesBuilder.build());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initResourceProfiles",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initResourceProfiles()\n{\r\n    if (this.profiles != null) {\r\n        return;\r\n    }\r\n    this.profiles = new HashMap<>();\r\n    RegisterApplicationMasterResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (p.hasResourceProfiles()) {\r\n        ResourceProfilesProto profilesProto = p.getResourceProfiles();\r\n        for (ResourceProfileEntry entry : profilesProto.getResourceProfilesMapList()) {\r\n            this.profiles.put(entry.getName(), convertFromProtoFormat(entry.getResources()));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResourceProfiles",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Resource> getResourceProfiles()\n{\r\n    initResourceProfiles();\r\n    return this.profiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResourceProfiles",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setResourceProfiles(Map<String, Resource> profilesMap)\n{\r\n    if (profilesMap == null) {\r\n        return;\r\n    }\r\n    initResourceProfiles();\r\n    this.profiles.clear();\r\n    this.profiles.putAll(profilesMap);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource convertFromProtoFormat(ResourceProto resource)\n{\r\n    return new ResourcePBImpl(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource resource)\n{\r\n    return ProtoUtils.convertToProtoFormat(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerPBImpl convertFromProtoFormat(ContainerProto p)\n{\r\n    return new ContainerPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerProto convertToProtoFormat(Container t)\n{\r\n    return ((ContainerPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NMTokenProto convertToProtoFormat(NMToken token)\n{\r\n    return ((NMTokenPBImpl) token).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMToken convertFromProtoFormat(NMTokenProto proto)\n{\r\n    return new NMTokenPBImpl(proto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceTypeInfoPBImpl convertFromProtoFormat(ResourceTypeInfoProto p)\n{\r\n    return new ResourceTypeInfoPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceTypeInfoProto convertToProtoFormat(ResourceTypeInfo t)\n{\r\n    return ((ResourceTypeInfoPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResourceTypes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ResourceTypeInfo> getResourceTypes()\n{\r\n    initResourceTypeInfosList();\r\n    return this.resourceTypeInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResourceTypes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setResourceTypes(List<ResourceTypeInfo> types)\n{\r\n    if (resourceTypeInfo == null) {\r\n        builder.clearResourceTypes();\r\n    }\r\n    this.resourceTypeInfo = types;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addResourceTypeInfosToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addResourceTypeInfosToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearResourceTypes();\r\n    if (resourceTypeInfo == null) {\r\n        return;\r\n    }\r\n    Iterable<ResourceTypeInfoProto> iterable = new Iterable<ResourceTypeInfoProto>() {\r\n\r\n        @Override\r\n        public Iterator<ResourceTypeInfoProto> iterator() {\r\n            return new Iterator<ResourceTypeInfoProto>() {\r\n\r\n                Iterator<ResourceTypeInfo> iter = resourceTypeInfo.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ResourceTypeInfoProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllResourceTypes(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initResourceTypeInfosList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initResourceTypeInfosList()\n{\r\n    if (this.resourceTypeInfo != null) {\r\n        return;\r\n    }\r\n    RegisterApplicationMasterResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ResourceTypeInfoProto> list = p.getResourceTypesList();\r\n    resourceTypeInfo = new ArrayList<ResourceTypeInfo>();\r\n    for (ResourceTypeInfoProto a : list) {\r\n        resourceTypeInfo.add(convertFromProtoFormat(a));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "StartContainersRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (requests != null) {\r\n        addLocalRequestsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = StartContainersRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalRequestsToProto",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addLocalRequestsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearStartContainerRequest();\r\n    List<StartContainerRequestProto> protoList = new ArrayList<StartContainerRequestProto>();\r\n    for (StartContainerRequest r : this.requests) {\r\n        protoList.add(convertToProtoFormat(r));\r\n    }\r\n    builder.addAllStartContainerRequest(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalRequests()\n{\r\n    StartContainersRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<StartContainerRequestProto> requestList = p.getStartContainerRequestList();\r\n    this.requests = new ArrayList<StartContainerRequest>();\r\n    for (StartContainerRequestProto r : requestList) {\r\n        this.requests.add(convertFromProtoFormat(r));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setStartContainerRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setStartContainerRequests(List<StartContainerRequest> requests)\n{\r\n    maybeInitBuilder();\r\n    if (requests == null) {\r\n        builder.clearStartContainerRequest();\r\n    }\r\n    this.requests = requests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getStartContainerRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<StartContainerRequest> getStartContainerRequests()\n{\r\n    if (this.requests != null) {\r\n        return this.requests;\r\n    }\r\n    initLocalRequests();\r\n    return this.requests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "StartContainerRequestPBImpl convertFromProtoFormat(StartContainerRequestProto p)\n{\r\n    return new StartContainerRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "StartContainerRequestProto convertToProtoFormat(StartContainerRequest t)\n{\r\n    return ((StartContainerRequestPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RunSharedCacheCleanerTaskRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = RunSharedCacheCleanerTaskRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RpcClientFactoryPBImpl get()\n{\r\n    return RpcClientFactoryPBImpl.self;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getClient",
  "errType" : [ "ClassNotFoundException", "NoSuchMethodException", "InvocationTargetException", "IllegalAccessException", "InstantiationException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Object getClient(Class<?> protocol, long clientVersion, InetSocketAddress addr, Configuration conf)\n{\r\n    Constructor<?> constructor = cache.get(protocol);\r\n    if (constructor == null) {\r\n        Class<?> pbClazz = null;\r\n        try {\r\n            pbClazz = conf.getClassByName(getPBImplClassName(protocol));\r\n        } catch (ClassNotFoundException e) {\r\n            throw new YarnRuntimeException(\"Failed to load class: [\" + getPBImplClassName(protocol) + \"]\", e);\r\n        }\r\n        try {\r\n            constructor = pbClazz.getConstructor(Long.TYPE, InetSocketAddress.class, Configuration.class);\r\n            constructor.setAccessible(true);\r\n            cache.putIfAbsent(protocol, constructor);\r\n        } catch (NoSuchMethodException e) {\r\n            throw new YarnRuntimeException(\"Could not find constructor with params: \" + Long.TYPE + \", \" + InetSocketAddress.class + \", \" + Configuration.class, e);\r\n        }\r\n    }\r\n    try {\r\n        Object retObject = constructor.newInstance(clientVersion, addr, conf);\r\n        return retObject;\r\n    } catch (InvocationTargetException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (IllegalAccessException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (InstantiationException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "stopClient",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void stopClient(Object proxy)\n{\r\n    try {\r\n        if (proxy instanceof Closeable) {\r\n            ((Closeable) proxy).close();\r\n            return;\r\n        } else {\r\n            InvocationHandler handler = Proxy.getInvocationHandler(proxy);\r\n            if (handler instanceof Closeable) {\r\n                ((Closeable) handler).close();\r\n                return;\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.error(\"Cannot call close method due to Exception. \" + \"Ignoring.\", e);\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n    throw new HadoopIllegalArgumentException(\"Cannot close proxy - is not Closeable or \" + \"does not provide closeable invocation handler \" + proxy.getClass());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getPBImplClassName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getPBImplClassName(Class<?> clazz)\n{\r\n    String srcPackagePart = getPackageName(clazz);\r\n    String srcClassName = getClassName(clazz);\r\n    String destPackagePart = srcPackagePart + \".\" + PB_IMPL_PACKAGE_SUFFIX;\r\n    String destClassPart = srcClassName + PB_IMPL_CLASS_SUFFIX;\r\n    return destPackagePart + \".\" + destClassPart;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getClassName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getClassName(Class<?> clazz)\n{\r\n    String fqName = clazz.getName();\r\n    return (fqName.substring(fqName.lastIndexOf(\".\") + 1, fqName.length()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\factories\\impl\\pb",
  "methodName" : "getPackageName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getPackageName(Class<?> clazz)\n{\r\n    return clazz.getPackage().getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "handleStoreEvent",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void handleStoreEvent(NodeLabelsStoreEvent event)\n{\r\n    try {\r\n        switch(event.getType()) {\r\n            case ADD_LABELS:\r\n                StoreNewClusterNodeLabels storeNewClusterNodeLabelsEvent = (StoreNewClusterNodeLabels) event;\r\n                store.storeNewClusterNodeLabels(storeNewClusterNodeLabelsEvent.getLabels());\r\n                break;\r\n            case REMOVE_LABELS:\r\n                RemoveClusterNodeLabels removeClusterNodeLabelsEvent = (RemoveClusterNodeLabels) event;\r\n                store.removeClusterNodeLabels(removeClusterNodeLabelsEvent.getLabels());\r\n                break;\r\n            case STORE_NODE_TO_LABELS:\r\n                UpdateNodeToLabelsMappingsEvent updateNodeToLabelsMappingsEvent = (UpdateNodeToLabelsMappingsEvent) event;\r\n                store.updateNodeToLabelsMappings(updateNodeToLabelsMappingsEvent.getNodeToLabels());\r\n                break;\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.error(\"Failed to store label modification to storage\");\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "initDispatcher",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initDispatcher(Configuration conf)\n{\r\n    dispatcher = new AsyncDispatcher(\"NodeLabelManager dispatcher\");\r\n    AsyncDispatcher asyncDispatcher = (AsyncDispatcher) dispatcher;\r\n    asyncDispatcher.init(conf);\r\n    asyncDispatcher.setDrainEventsOnStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    nodeLabelsEnabled = YarnConfiguration.areNodeLabelsEnabled(conf);\r\n    isCentralizedNodeLabelConfiguration = YarnConfiguration.isCentralizedNodeLabelConfiguration(conf);\r\n    noNodeLabel = new RMNodeLabel(NO_LABEL);\r\n    labelCollections.put(NO_LABEL, noNodeLabel);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "isInitNodeLabelStoreInProgress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isInitNodeLabelStoreInProgress()\n{\r\n    return initNodeLabelStoreInProgress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "isCentralizedConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isCentralizedConfiguration()\n{\r\n    return isCentralizedNodeLabelConfiguration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "initNodeLabelStore",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initNodeLabelStore(Configuration conf) throws Exception\n{\r\n    this.store = ReflectionUtils.newInstance(conf.getClass(YarnConfiguration.FS_NODE_LABELS_STORE_IMPL_CLASS, FileSystemNodeLabelsStore.class, NodeLabelsStore.class), conf);\r\n    this.store.init(conf, this);\r\n    this.store.recover();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "startDispatcher",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void startDispatcher()\n{\r\n    AsyncDispatcher asyncDispatcher = (AsyncDispatcher) dispatcher;\r\n    asyncDispatcher.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    if (nodeLabelsEnabled) {\r\n        setInitNodeLabelStoreInProgress(true);\r\n        initNodeLabelStore(getConfig());\r\n        setInitNodeLabelStoreInProgress(false);\r\n    }\r\n    initDispatcher(getConfig());\r\n    if (null != dispatcher) {\r\n        dispatcher.register(NodeLabelsStoreEventType.class, new ForwardingEventHandler());\r\n    }\r\n    startDispatcher();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "stopDispatcher",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stopDispatcher()\n{\r\n    AsyncDispatcher asyncDispatcher = (AsyncDispatcher) dispatcher;\r\n    if (null != asyncDispatcher) {\r\n        asyncDispatcher.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    stopDispatcher();\r\n    if (null != store) {\r\n        store.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "addToCluserNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void addToCluserNodeLabels(Collection<NodeLabel> labels) throws IOException\n{\r\n    if (!nodeLabelsEnabled) {\r\n        LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\r\n        throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\r\n    }\r\n    if (null == labels || labels.isEmpty()) {\r\n        return;\r\n    }\r\n    List<NodeLabel> newLabels = new ArrayList<NodeLabel>();\r\n    normalizeNodeLabels(labels);\r\n    checkExclusivityMatch(labels);\r\n    for (NodeLabel label : labels) {\r\n        NodeLabelUtil.checkAndThrowLabelName(label.getName());\r\n    }\r\n    for (NodeLabel label : labels) {\r\n        if (this.labelCollections.get(label.getName()) == null) {\r\n            this.labelCollections.put(label.getName(), new RMNodeLabel(label));\r\n            newLabels.add(label);\r\n        }\r\n    }\r\n    if (null != dispatcher && !newLabels.isEmpty()) {\r\n        dispatcher.getEventHandler().handle(new StoreNewClusterNodeLabels(newLabels));\r\n    }\r\n    LOG.info(\"Add labels: [\" + StringUtils.join(labels.iterator(), \",\") + \"]\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "addToCluserNodeLabelsWithDefaultExclusivity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addToCluserNodeLabelsWithDefaultExclusivity(Set<String> labels) throws IOException\n{\r\n    Set<NodeLabel> nodeLabels = new HashSet<NodeLabel>();\r\n    for (String label : labels) {\r\n        nodeLabels.add(NodeLabel.newInstance(label));\r\n    }\r\n    addToCluserNodeLabels(nodeLabels);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "checkAddLabelsToNode",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void checkAddLabelsToNode(Map<NodeId, Set<String>> addedLabelsToNode) throws IOException\n{\r\n    if (null == addedLabelsToNode || addedLabelsToNode.isEmpty()) {\r\n        return;\r\n    }\r\n    Set<String> knownLabels = labelCollections.keySet();\r\n    for (Entry<NodeId, Set<String>> entry : addedLabelsToNode.entrySet()) {\r\n        NodeId nodeId = entry.getKey();\r\n        Set<String> labels = entry.getValue();\r\n        if (!knownLabels.containsAll(labels)) {\r\n            String msg = \"Not all labels being added contained by known \" + \"label collections, please check\" + \", added labels=[\" + StringUtils.join(labels, \",\") + \"]\";\r\n            LOG.error(msg);\r\n            throw new IOException(msg);\r\n        }\r\n        if (!labels.isEmpty()) {\r\n            Set<String> newLabels = new HashSet<String>(getLabelsByNode(nodeId));\r\n            newLabels.addAll(labels);\r\n            if (newLabels.size() > 1) {\r\n                String msg = String.format(\"%d labels specified on host=%s after add labels to node\" + \", please note that we do not support specifying multiple\" + \" labels on a single host for now.\", newLabels.size(), nodeId.getHost());\r\n                LOG.error(msg);\r\n                throw new IOException(msg);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "addLabelsToNode",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addLabelsToNode(Map<NodeId, Set<String>> addedLabelsToNode) throws IOException\n{\r\n    if (!nodeLabelsEnabled) {\r\n        LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\r\n        throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\r\n    }\r\n    addedLabelsToNode = normalizeNodeIdToLabels(addedLabelsToNode);\r\n    checkAddLabelsToNode(addedLabelsToNode);\r\n    internalUpdateLabelsOnNodes(addedLabelsToNode, NodeLabelUpdateOperation.ADD);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "checkRemoveFromClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkRemoveFromClusterNodeLabels(Collection<String> labelsToRemove) throws IOException\n{\r\n    if (null == labelsToRemove || labelsToRemove.isEmpty()) {\r\n        return;\r\n    }\r\n    for (String label : labelsToRemove) {\r\n        label = normalizeLabel(label);\r\n        if (label == null || label.isEmpty()) {\r\n            throw new IOException(\"Label to be removed is null or empty\");\r\n        }\r\n        if (!labelCollections.containsKey(label)) {\r\n            throw new IOException(\"Node label=\" + label + \" to be removed doesn't existed in cluster \" + \"node labels collection.\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "internalRemoveFromClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void internalRemoveFromClusterNodeLabels(Collection<String> labelsToRemove)\n{\r\n    for (Map.Entry<String, Host> nodeEntry : nodeCollections.entrySet()) {\r\n        Host host = nodeEntry.getValue();\r\n        if (null != host) {\r\n            host.labels.removeAll(labelsToRemove);\r\n            for (Node nm : host.nms.values()) {\r\n                if (nm.labels != null) {\r\n                    nm.labels.removeAll(labelsToRemove);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    for (String label : labelsToRemove) {\r\n        labelCollections.remove(label);\r\n    }\r\n    if (null != dispatcher) {\r\n        dispatcher.getEventHandler().handle(new RemoveClusterNodeLabels(labelsToRemove));\r\n    }\r\n    LOG.info(\"Remove labels: [\" + StringUtils.join(labelsToRemove.iterator(), \",\") + \"]\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "removeFromClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void removeFromClusterNodeLabels(Collection<String> labelsToRemove) throws IOException\n{\r\n    if (!nodeLabelsEnabled) {\r\n        LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\r\n        throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\r\n    }\r\n    labelsToRemove = normalizeLabels(labelsToRemove);\r\n    checkRemoveFromClusterNodeLabels(labelsToRemove);\r\n    internalRemoveFromClusterNodeLabels(labelsToRemove);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "checkRemoveLabelsFromNode",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void checkRemoveLabelsFromNode(Map<NodeId, Set<String>> removeLabelsFromNode) throws IOException\n{\r\n    Set<String> knownLabels = labelCollections.keySet();\r\n    for (Entry<NodeId, Set<String>> entry : removeLabelsFromNode.entrySet()) {\r\n        NodeId nodeId = entry.getKey();\r\n        Set<String> labels = entry.getValue();\r\n        if (!knownLabels.containsAll(labels)) {\r\n            String msg = \"Not all labels being removed contained by known \" + \"label collections, please check\" + \", removed labels=[\" + StringUtils.join(labels, \",\") + \"]\";\r\n            LOG.error(msg);\r\n            throw new IOException(msg);\r\n        }\r\n        Set<String> originalLabels = null;\r\n        boolean nodeExisted = false;\r\n        if (WILDCARD_PORT != nodeId.getPort()) {\r\n            Node nm = getNMInNodeSet(nodeId);\r\n            if (nm != null) {\r\n                originalLabels = nm.labels;\r\n                nodeExisted = true;\r\n            }\r\n        } else {\r\n            Host host = nodeCollections.get(nodeId.getHost());\r\n            if (null != host) {\r\n                originalLabels = host.labels;\r\n                nodeExisted = true;\r\n            }\r\n        }\r\n        if (!nodeExisted) {\r\n            String msg = \"Try to remove labels from NM=\" + nodeId + \", but the NM doesn't existed\";\r\n            LOG.error(msg);\r\n            throw new IOException(msg);\r\n        }\r\n        if (labels.isEmpty()) {\r\n            continue;\r\n        }\r\n        if (originalLabels == null || !originalLabels.containsAll(labels)) {\r\n            String msg = \"Try to remove labels = [\" + StringUtils.join(labels, \",\") + \"], but not all labels contained by NM=\" + nodeId;\r\n            LOG.error(msg);\r\n            throw new IOException(msg);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "addNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addNodeToLabels(NodeId node, Set<String> labels)\n{\r\n    for (String l : labels) {\r\n        labelCollections.get(l).addNodeId(node);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "removeNodeFromLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeNodeFromLabels(NodeId node, Set<String> labels)\n{\r\n    for (String l : labels) {\r\n        labelCollections.get(l).removeNodeId(node);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "replaceNodeForLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void replaceNodeForLabels(NodeId node, Set<String> oldLabels, Set<String> newLabels)\n{\r\n    if (oldLabels != null) {\r\n        removeNodeFromLabels(node, oldLabels);\r\n    }\r\n    addNodeToLabels(node, newLabels);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "addLabelsToNodeInHost",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addLabelsToNodeInHost(NodeId node, Set<String> labels) throws IOException\n{\r\n    Host host = nodeCollections.get(node.getHost());\r\n    if (null == host) {\r\n        throw new IOException(\"Cannot add labels to a host that \" + \"does not exist. Create the host before adding labels to it.\");\r\n    }\r\n    Node nm = host.nms.get(node);\r\n    if (nm != null) {\r\n        Node newNm = nm.copy();\r\n        if (newNm.labels == null) {\r\n            newNm.labels = Collections.newSetFromMap(new ConcurrentHashMap<String, Boolean>());\r\n        }\r\n        newNm.labels.addAll(labels);\r\n        host.nms.put(node, newNm);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "removeLabelsFromNodeInHost",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void removeLabelsFromNodeInHost(NodeId node, Set<String> labels) throws IOException\n{\r\n    Host host = nodeCollections.get(node.getHost());\r\n    if (null == host) {\r\n        throw new IOException(\"Cannot remove labels from a host that \" + \"does not exist. Create the host before adding labels to it.\");\r\n    }\r\n    Node nm = host.nms.get(node);\r\n    if (nm != null) {\r\n        if (nm.labels == null) {\r\n            nm.labels = new HashSet<String>();\r\n        } else {\r\n            nm.labels.removeAll(labels);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "replaceLabelsForNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void replaceLabelsForNode(NodeId node, Set<String> oldLabels, Set<String> newLabels) throws IOException\n{\r\n    if (oldLabels != null) {\r\n        removeLabelsFromNodeInHost(node, oldLabels);\r\n    }\r\n    addLabelsToNodeInHost(node, newLabels);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "isNodeLabelExplicit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isNodeLabelExplicit(NodeId nodeId)\n{\r\n    return !isNodeLabelFromHost.containsKey(nodeId) || isNodeLabelFromHost.get(nodeId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "internalUpdateLabelsOnNodes",
  "errType" : null,
  "containingMethodsNum" : 47,
  "sourceCodeText" : "void internalUpdateLabelsOnNodes(Map<NodeId, Set<String>> nodeToLabels, NodeLabelUpdateOperation op) throws IOException\n{\r\n    Map<NodeId, Set<String>> newNMToLabels = new HashMap<NodeId, Set<String>>();\r\n    Set<String> oldLabels;\r\n    for (Entry<NodeId, Set<String>> entry : nodeToLabels.entrySet()) {\r\n        NodeId nodeId = entry.getKey();\r\n        Set<String> labels = entry.getValue();\r\n        createHostIfNonExisted(nodeId.getHost());\r\n        if (nodeId.getPort() == WILDCARD_PORT) {\r\n            Host host = nodeCollections.get(nodeId.getHost());\r\n            switch(op) {\r\n                case REMOVE:\r\n                    removeNodeFromLabels(nodeId, labels);\r\n                    host.labels.removeAll(labels);\r\n                    for (Node node : host.nms.values()) {\r\n                        if (node.labels != null) {\r\n                            node.labels.removeAll(labels);\r\n                        }\r\n                        removeNodeFromLabels(node.nodeId, labels);\r\n                    }\r\n                    break;\r\n                case ADD:\r\n                    addNodeToLabels(nodeId, labels);\r\n                    host.labels.addAll(labels);\r\n                    for (Node node : host.nms.values()) {\r\n                        if (node.labels != null) {\r\n                            node.labels.addAll(labels);\r\n                        }\r\n                        addNodeToLabels(node.nodeId, labels);\r\n                        isNodeLabelFromHost.put(node.nodeId, true);\r\n                    }\r\n                    break;\r\n                case REPLACE:\r\n                    replaceNodeForLabels(nodeId, host.labels, labels);\r\n                    replaceLabelsForNode(nodeId, host.labels, labels);\r\n                    host.labels.clear();\r\n                    host.labels.addAll(labels);\r\n                    for (Node node : host.nms.values()) {\r\n                        replaceNodeForLabels(node.nodeId, node.labels, labels);\r\n                        replaceLabelsForNode(node.nodeId, node.labels, labels);\r\n                        node.labels = null;\r\n                        isNodeLabelFromHost.put(node.nodeId, true);\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            newNMToLabels.put(nodeId, host.labels);\r\n        } else {\r\n            if (EnumSet.of(NodeLabelUpdateOperation.ADD, NodeLabelUpdateOperation.REPLACE).contains(op)) {\r\n                createNodeIfNonExisted(nodeId);\r\n                Node nm = getNMInNodeSet(nodeId);\r\n                switch(op) {\r\n                    case ADD:\r\n                        addNodeToLabels(nodeId, labels);\r\n                        if (nm.labels == null) {\r\n                            nm.labels = new HashSet<String>();\r\n                        }\r\n                        nm.labels.addAll(labels);\r\n                        isNodeLabelFromHost.put(nm.nodeId, false);\r\n                        break;\r\n                    case REPLACE:\r\n                        oldLabels = getLabelsByNode(nodeId);\r\n                        replaceNodeForLabels(nodeId, oldLabels, labels);\r\n                        replaceLabelsForNode(nodeId, oldLabels, labels);\r\n                        if (nm.labels == null) {\r\n                            nm.labels = new HashSet<String>();\r\n                        }\r\n                        nm.labels.clear();\r\n                        nm.labels.addAll(labels);\r\n                        isNodeLabelFromHost.put(nm.nodeId, false);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n                newNMToLabels.put(nodeId, nm.labels);\r\n            } else {\r\n                removeNodeFromLabels(nodeId, labels);\r\n                Node nm = getNMInNodeSet(nodeId);\r\n                if (nm.labels != null) {\r\n                    nm.labels.removeAll(labels);\r\n                    newNMToLabels.put(nodeId, nm.labels);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (null != dispatcher && isCentralizedNodeLabelConfiguration) {\r\n        dispatcher.getEventHandler().handle(new UpdateNodeToLabelsMappingsEvent(newNMToLabels));\r\n    }\r\n    LOG.info(op.name() + \" labels on nodes:\");\r\n    for (Entry<NodeId, Set<String>> entry : newNMToLabels.entrySet()) {\r\n        LOG.info(\"  NM=\" + entry.getKey() + \", labels=[\" + StringUtils.join(entry.getValue().iterator(), \",\") + \"]\");\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "removeLabelsFromNode",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void removeLabelsFromNode(Map<NodeId, Set<String>> removeLabelsFromNode) throws IOException\n{\r\n    if (!nodeLabelsEnabled) {\r\n        LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\r\n        throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\r\n    }\r\n    removeLabelsFromNode = normalizeNodeIdToLabels(removeLabelsFromNode);\r\n    checkRemoveLabelsFromNode(removeLabelsFromNode);\r\n    internalUpdateLabelsOnNodes(removeLabelsFromNode, NodeLabelUpdateOperation.REMOVE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "checkReplaceLabelsOnNode",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void checkReplaceLabelsOnNode(Map<NodeId, Set<String>> replaceLabelsToNode) throws IOException\n{\r\n    if (null == replaceLabelsToNode || replaceLabelsToNode.isEmpty()) {\r\n        return;\r\n    }\r\n    Set<String> knownLabels = labelCollections.keySet();\r\n    for (Entry<NodeId, Set<String>> entry : replaceLabelsToNode.entrySet()) {\r\n        NodeId nodeId = entry.getKey();\r\n        Set<String> labels = entry.getValue();\r\n        if (labels.size() > 1) {\r\n            String msg = String.format(\"%d labels specified on host=%s\" + \", please note that we do not support specifying multiple\" + \" labels on a single host for now.\", labels.size(), nodeId.getHost());\r\n            LOG.error(msg);\r\n            throw new IOException(msg);\r\n        }\r\n        if (!knownLabels.containsAll(labels)) {\r\n            String msg = \"Not all labels being replaced contained by known \" + \"label collections, please check\" + \", new labels=[\" + StringUtils.join(labels, \",\") + \"]\";\r\n            LOG.error(msg);\r\n            throw new IOException(msg);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "replaceLabelsOnNode",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void replaceLabelsOnNode(Map<NodeId, Set<String>> replaceLabelsToNode) throws IOException\n{\r\n    if (!nodeLabelsEnabled) {\r\n        LOG.error(NODE_LABELS_NOT_ENABLED_ERR);\r\n        throw new IOException(NODE_LABELS_NOT_ENABLED_ERR);\r\n    }\r\n    replaceLabelsToNode = normalizeNodeIdToLabels(replaceLabelsToNode);\r\n    checkReplaceLabelsOnNode(replaceLabelsToNode);\r\n    internalUpdateLabelsOnNodes(replaceLabelsToNode, NodeLabelUpdateOperation.REPLACE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<NodeId, Set<String>> getNodeLabels()\n{\r\n    Map<NodeId, Set<String>> nodeToLabels = generateNodeLabelsInfoPerNode(String.class);\r\n    return nodeToLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getNodeLabelsInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<NodeId, Set<NodeLabel>> getNodeLabelsInfo()\n{\r\n    Map<NodeId, Set<NodeLabel>> nodeToLabels = generateNodeLabelsInfoPerNode(NodeLabel.class);\r\n    return nodeToLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "generateNodeLabelsInfoPerNode",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "Map<NodeId, Set<T>> generateNodeLabelsInfoPerNode(Class<T> type)\n{\r\n    readLock.lock();\r\n    try {\r\n        Map<NodeId, Set<T>> nodeToLabels = new HashMap<>();\r\n        for (Entry<String, Host> entry : nodeCollections.entrySet()) {\r\n            String hostName = entry.getKey();\r\n            Host host = entry.getValue();\r\n            for (NodeId nodeId : host.nms.keySet()) {\r\n                if (type.isAssignableFrom(String.class)) {\r\n                    Set<String> nodeLabels = getLabelsByNode(nodeId);\r\n                    if (nodeLabels == null || nodeLabels.isEmpty()) {\r\n                        continue;\r\n                    }\r\n                    nodeToLabels.put(nodeId, (Set<T>) nodeLabels);\r\n                } else {\r\n                    Set<NodeLabel> nodeLabels = getLabelsInfoByNode(nodeId);\r\n                    if (nodeLabels == null || nodeLabels.isEmpty()) {\r\n                        continue;\r\n                    }\r\n                    nodeToLabels.put(nodeId, (Set<T>) nodeLabels);\r\n                }\r\n            }\r\n            if (!host.labels.isEmpty()) {\r\n                if (type.isAssignableFrom(String.class)) {\r\n                    nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT), (Set<T>) host.labels);\r\n                } else {\r\n                    nodeToLabels.put(NodeId.newInstance(hostName, WILDCARD_PORT), (Set<T>) createNodeLabelFromLabelNames(host.labels));\r\n                }\r\n            }\r\n        }\r\n        return Collections.unmodifiableMap(nodeToLabels);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getNodesWithoutALabel",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Set<NodeId> getNodesWithoutALabel()\n{\r\n    readLock.lock();\r\n    try {\r\n        Set<NodeId> nodes = new HashSet<>();\r\n        for (Host host : nodeCollections.values()) {\r\n            for (NodeId nodeId : host.nms.keySet()) {\r\n                if (getLabelsByNode(nodeId).isEmpty()) {\r\n                    nodes.add(nodeId);\r\n                }\r\n            }\r\n        }\r\n        return Collections.unmodifiableSet(nodes);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<String, Set<NodeId>> getLabelsToNodes()\n{\r\n    readLock.lock();\r\n    try {\r\n        return getLabelsToNodes(labelCollections.keySet());\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<String, Set<NodeId>> getLabelsToNodes(Set<String> labels)\n{\r\n    readLock.lock();\r\n    try {\r\n        Map<String, Set<NodeId>> labelsToNodes = getLabelsToNodesMapping(labels, String.class);\r\n        return Collections.unmodifiableMap(labelsToNodes);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getLabelsInfoToNodes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<NodeLabel, Set<NodeId>> getLabelsInfoToNodes()\n{\r\n    readLock.lock();\r\n    try {\r\n        return getLabelsInfoToNodes(labelCollections.keySet());\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getLabelsInfoToNodes",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<NodeLabel, Set<NodeId>> getLabelsInfoToNodes(Set<String> labels)\n{\r\n    readLock.lock();\r\n    try {\r\n        Map<NodeLabel, Set<NodeId>> labelsToNodes = getLabelsToNodesMapping(labels, NodeLabel.class);\r\n        return Collections.unmodifiableMap(labelsToNodes);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getLabelsToNodesMapping",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Map<T, Set<NodeId>> getLabelsToNodesMapping(Set<String> labels, Class<T> type)\n{\r\n    Map<T, Set<NodeId>> labelsToNodes = new HashMap<T, Set<NodeId>>();\r\n    for (String label : labels) {\r\n        if (label.equals(NO_LABEL)) {\r\n            continue;\r\n        }\r\n        RMNodeLabel nodeLabelInfo = labelCollections.get(label);\r\n        if (nodeLabelInfo != null) {\r\n            Set<NodeId> nodeIds = nodeLabelInfo.getAssociatedNodeIds();\r\n            if (!nodeIds.isEmpty()) {\r\n                if (type.isAssignableFrom(String.class)) {\r\n                    labelsToNodes.put(type.cast(label), nodeIds);\r\n                } else {\r\n                    labelsToNodes.put(type.cast(nodeLabelInfo.getNodeLabel()), nodeIds);\r\n                }\r\n            }\r\n        } else {\r\n            LOG.warn(\"getLabelsToNodes : Label [\" + label + \"] cannot be found\");\r\n        }\r\n    }\r\n    return labelsToNodes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getClusterNodeLabelNames",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Set<String> getClusterNodeLabelNames()\n{\r\n    readLock.lock();\r\n    try {\r\n        Set<String> labels = new HashSet<String>(labelCollections.keySet());\r\n        labels.remove(NO_LABEL);\r\n        return Collections.unmodifiableSet(labels);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<NodeLabel> getClusterNodeLabels()\n{\r\n    readLock.lock();\r\n    try {\r\n        List<NodeLabel> nodeLabels = new ArrayList<>();\r\n        for (RMNodeLabel label : labelCollections.values()) {\r\n            if (!label.getLabelName().equals(NO_LABEL)) {\r\n                nodeLabels.add(NodeLabel.newInstance(label.getLabelName(), label.getIsExclusive()));\r\n            }\r\n        }\r\n        return nodeLabels;\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "isExclusiveNodeLabel",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean isExclusiveNodeLabel(String nodeLabel) throws IOException\n{\r\n    if (nodeLabel.equals(NO_LABEL)) {\r\n        return noNodeLabel.getIsExclusive();\r\n    }\r\n    readLock.lock();\r\n    try {\r\n        RMNodeLabel label = labelCollections.get(nodeLabel);\r\n        if (label == null) {\r\n            String message = \"Getting is-exclusive-node-label, node-label = \" + nodeLabel + \", is not existed.\";\r\n            LOG.error(message);\r\n            throw new IOException(message);\r\n        }\r\n        return label.getIsExclusive();\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "checkExclusivityMatch",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void checkExclusivityMatch(Collection<NodeLabel> labels) throws IOException\n{\r\n    ArrayList<NodeLabel> mismatchlabels = new ArrayList<NodeLabel>();\r\n    for (NodeLabel label : labels) {\r\n        RMNodeLabel rmNodeLabel = this.labelCollections.get(label.getName());\r\n        if (rmNodeLabel != null && rmNodeLabel.getIsExclusive() != label.isExclusive()) {\r\n            mismatchlabels.add(label);\r\n        }\r\n    }\r\n    if (mismatchlabels.size() > 0) {\r\n        throw new IOException(\"Exclusivity cannot be modified for an existing label with : \" + StringUtils.join(mismatchlabels.iterator(), \",\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "normalizeLabel",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String normalizeLabel(String label)\n{\r\n    if (label != null) {\r\n        return label.trim();\r\n    }\r\n    return NO_LABEL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "normalizeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> normalizeLabels(Collection<String> labels)\n{\r\n    Set<String> newLabels = new HashSet<String>();\r\n    for (String label : labels) {\r\n        newLabels.add(normalizeLabel(label));\r\n    }\r\n    return newLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "normalizeNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void normalizeNodeLabels(Collection<NodeLabel> labels)\n{\r\n    for (NodeLabel label : labels) {\r\n        label.setName(normalizeLabel(label.getName()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getNMInNodeSet",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Node getNMInNodeSet(NodeId nodeId)\n{\r\n    return getNMInNodeSet(nodeId, nodeCollections);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getNMInNodeSet",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Node getNMInNodeSet(NodeId nodeId, Map<String, Host> map)\n{\r\n    return getNMInNodeSet(nodeId, map, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getNMInNodeSet",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Node getNMInNodeSet(NodeId nodeId, Map<String, Host> map, boolean checkRunning)\n{\r\n    Host host = map.get(nodeId.getHost());\r\n    if (null == host) {\r\n        return null;\r\n    }\r\n    Node nm = host.nms.get(nodeId);\r\n    if (null == nm) {\r\n        return null;\r\n    }\r\n    if (checkRunning) {\r\n        return nm.running ? nm : null;\r\n    }\r\n    return nm;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getLabelsByNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getLabelsByNode(NodeId nodeId)\n{\r\n    return getLabelsByNode(nodeId, nodeCollections);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getLabelsByNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<String> getLabelsByNode(NodeId nodeId, Map<String, Host> map)\n{\r\n    Host host = map.get(nodeId.getHost());\r\n    if (null == host) {\r\n        return EMPTY_STRING_SET;\r\n    }\r\n    Node nm = host.nms.get(nodeId);\r\n    if (null != nm && null != nm.labels) {\r\n        return nm.labels;\r\n    } else {\r\n        return host.labels;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "getLabelsInfoByNode",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Set<NodeLabel> getLabelsInfoByNode(NodeId nodeId)\n{\r\n    readLock.lock();\r\n    try {\r\n        Set<String> labels = getLabelsByNode(nodeId, nodeCollections);\r\n        if (labels.isEmpty()) {\r\n            return EMPTY_NODELABEL_SET;\r\n        }\r\n        Set<NodeLabel> nodeLabels = createNodeLabelFromLabelNames(labels);\r\n        return nodeLabels;\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "createNodeLabelFromLabelNames",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Set<NodeLabel> createNodeLabelFromLabelNames(Set<String> labels)\n{\r\n    Set<NodeLabel> nodeLabels = new HashSet<NodeLabel>();\r\n    for (String label : labels) {\r\n        if (label.equals(NO_LABEL)) {\r\n            continue;\r\n        }\r\n        RMNodeLabel rmLabel = labelCollections.get(label);\r\n        if (rmLabel == null) {\r\n            continue;\r\n        }\r\n        nodeLabels.add(rmLabel.getNodeLabel());\r\n    }\r\n    return nodeLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "createNodeIfNonExisted",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createNodeIfNonExisted(NodeId nodeId) throws IOException\n{\r\n    Host host = nodeCollections.get(nodeId.getHost());\r\n    if (null == host) {\r\n        throw new IOException(\"Should create host before creating node.\");\r\n    }\r\n    Node nm = host.nms.get(nodeId);\r\n    if (null == nm) {\r\n        host.nms.put(nodeId, new Node(nodeId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "createHostIfNonExisted",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void createHostIfNonExisted(String hostName)\n{\r\n    Host host = nodeCollections.get(hostName);\r\n    if (null == host) {\r\n        host = new Host();\r\n        nodeCollections.put(hostName, host);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "normalizeNodeIdToLabels",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<NodeId, Set<String>> normalizeNodeIdToLabels(Map<NodeId, Set<String>> nodeIdToLabels)\n{\r\n    Map<NodeId, Set<String>> newMap = new TreeMap<NodeId, Set<String>>();\r\n    for (Entry<NodeId, Set<String>> entry : nodeIdToLabels.entrySet()) {\r\n        NodeId id = entry.getKey();\r\n        Set<String> labels = entry.getValue();\r\n        newMap.put(id, normalizeLabels(labels));\r\n    }\r\n    return newMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "setInitNodeLabelStoreInProgress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setInitNodeLabelStoreInProgress(boolean initNodeLabelStoreInProgress)\n{\r\n    this.initNodeLabelStoreInProgress = initNodeLabelStoreInProgress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\log",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void render(Block html)\n{\r\n    html.div(\"#nav\").h3().__(\"Logs\").__().__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "createResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource createResource(int memory)\n{\r\n    return createResource(memory, (memory > 0) ? 1 : 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "createResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource createResource(int memory, int cores)\n{\r\n    return Resource.newInstance(memory, cores);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "createResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource createResource(long memory)\n{\r\n    return createResource(memory, (memory > 0) ? 1 : 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "createResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource createResource(long memory, int cores)\n{\r\n    return Resource.newInstance(memory, cores);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "none",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource none()\n{\r\n    return NONE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isNone",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isNone(Resource other)\n{\r\n    return NONE.equals(other);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "unbounded",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource unbounded()\n{\r\n    return UNBOUNDED;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "clone",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource clone(Resource res)\n{\r\n    return Resource.newInstance(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "addTo",
  "errType" : [ "ResourceNotFoundException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Resource addTo(Resource lhs, Resource rhs)\n{\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        try {\r\n            ResourceInformation rhsValue = rhs.getResourceInformation(i);\r\n            ResourceInformation lhsValue = lhs.getResourceInformation(i);\r\n            lhs.setResourceValue(i, lhsValue.getValue() + rhsValue.getValue());\r\n        } catch (ResourceNotFoundException ye) {\r\n            LOG.warn(\"Resource is missing:\" + ye.getMessage());\r\n            continue;\r\n        }\r\n    }\r\n    return lhs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource add(Resource lhs, Resource rhs)\n{\r\n    return addTo(clone(lhs), rhs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "subtractFrom",
  "errType" : [ "ResourceNotFoundException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Resource subtractFrom(Resource lhs, Resource rhs)\n{\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        try {\r\n            ResourceInformation rhsValue = rhs.getResourceInformation(i);\r\n            ResourceInformation lhsValue = lhs.getResourceInformation(i);\r\n            lhs.setResourceValue(i, lhsValue.getValue() - rhsValue.getValue());\r\n        } catch (ResourceNotFoundException ye) {\r\n            LOG.warn(\"Resource is missing:\" + ye.getMessage());\r\n            continue;\r\n        }\r\n    }\r\n    return lhs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "subtract",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource subtract(Resource lhs, Resource rhs)\n{\r\n    return subtractFrom(clone(lhs), rhs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "subtractFromNonNegative",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Resource subtractFromNonNegative(Resource lhs, Resource rhs)\n{\r\n    subtractFrom(lhs, rhs);\r\n    if (lhs.getMemorySize() < 0) {\r\n        lhs.setMemorySize(0);\r\n    }\r\n    if (lhs.getVirtualCores() < 0) {\r\n        lhs.setVirtualCores(0);\r\n    }\r\n    return lhs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "subtractNonNegative",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource subtractNonNegative(Resource lhs, Resource rhs)\n{\r\n    return subtractFromNonNegative(clone(lhs), rhs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "negate",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource negate(Resource resource)\n{\r\n    return subtract(NONE, resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyTo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource multiplyTo(Resource lhs, double by)\n{\r\n    return multiplyAndRound(lhs, by, RoundingDirection.DOWN);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiply",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource multiply(Resource lhs, double by)\n{\r\n    return multiplyTo(clone(lhs), by);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndAddTo",
  "errType" : [ "ResourceNotFoundException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Resource multiplyAndAddTo(Resource lhs, Resource rhs, double by)\n{\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        try {\r\n            ResourceInformation rhsValue = rhs.getResourceInformation(i);\r\n            ResourceInformation lhsValue = lhs.getResourceInformation(i);\r\n            long convertedRhs = (long) (rhsValue.getValue() * by);\r\n            lhs.setResourceValue(i, lhsValue.getValue() + convertedRhs);\r\n        } catch (ResourceNotFoundException ye) {\r\n            LOG.warn(\"Resource is missing:\" + ye.getMessage());\r\n        }\r\n    }\r\n    return lhs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalizeUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource multiplyAndNormalizeUp(ResourceCalculator calculator, Resource lhs, double[] by, Resource factor)\n{\r\n    return calculator.multiplyAndNormalizeUp(lhs, by, factor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalizeUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource multiplyAndNormalizeUp(ResourceCalculator calculator, Resource lhs, double by, Resource factor)\n{\r\n    return calculator.multiplyAndNormalizeUp(lhs, by, factor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndNormalizeDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource multiplyAndNormalizeDown(ResourceCalculator calculator, Resource lhs, double by, Resource factor)\n{\r\n    return calculator.multiplyAndNormalizeDown(lhs, by, factor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndRoundDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource multiplyAndRoundDown(Resource lhs, double by)\n{\r\n    return multiplyAndRound(clone(lhs), by, RoundingDirection.DOWN);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndRoundUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource multiplyAndRoundUp(Resource lhs, double by)\n{\r\n    return multiplyAndRound(clone(lhs), by, RoundingDirection.UP);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "multiplyAndRound",
  "errType" : [ "ResourceNotFoundException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Resource multiplyAndRound(Resource lhs, double by, RoundingDirection roundingDirection)\n{\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        try {\r\n            ResourceInformation lhsValue = lhs.getResourceInformation(i);\r\n            final long value;\r\n            if (roundingDirection == RoundingDirection.DOWN) {\r\n                value = (long) (lhsValue.getValue() * by);\r\n            } else {\r\n                value = (long) Math.ceil(lhsValue.getValue() * by);\r\n            }\r\n            lhs.setResourceValue(i, value);\r\n        } catch (ResourceNotFoundException ye) {\r\n            LOG.warn(\"Resource is missing:\" + ye.getMessage());\r\n        }\r\n    }\r\n    return lhs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "normalize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource normalize(ResourceCalculator calculator, Resource lhs, Resource min, Resource max, Resource increment)\n{\r\n    return calculator.normalize(lhs, min, max, increment);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "roundUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource roundUp(ResourceCalculator calculator, Resource lhs, Resource factor)\n{\r\n    return calculator.roundUp(lhs, factor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "roundDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource roundDown(ResourceCalculator calculator, Resource lhs, Resource factor)\n{\r\n    return calculator.roundDown(lhs, factor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "isInvalidDivisor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isInvalidDivisor(ResourceCalculator resourceCalculator, Resource divisor)\n{\r\n    return resourceCalculator.isInvalidDivisor(divisor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "ratio",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float ratio(ResourceCalculator resourceCalculator, Resource lhs, Resource rhs)\n{\r\n    return resourceCalculator.ratio(lhs, rhs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divide",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float divide(ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)\n{\r\n    return resourceCalculator.divide(clusterResource, lhs, rhs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource divideAndCeil(ResourceCalculator resourceCalculator, Resource lhs, int rhs)\n{\r\n    return resourceCalculator.divideAndCeil(lhs, rhs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "divideAndCeil",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource divideAndCeil(ResourceCalculator resourceCalculator, Resource lhs, float rhs)\n{\r\n    return resourceCalculator.divideAndCeil(lhs, rhs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean equals(Resource lhs, Resource rhs)\n{\r\n    return lhs.equals(rhs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "lessThan",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean lessThan(ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)\n{\r\n    return (resourceCalculator.compare(clusterResource, lhs, rhs) < 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "lessThanOrEqual",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean lessThanOrEqual(ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)\n{\r\n    return (resourceCalculator.compare(clusterResource, lhs, rhs) <= 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "greaterThan",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean greaterThan(ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)\n{\r\n    return resourceCalculator.compare(clusterResource, lhs, rhs) > 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "greaterThanOrEqual",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean greaterThanOrEqual(ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)\n{\r\n    return resourceCalculator.compare(clusterResource, lhs, rhs) >= 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "min",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource min(ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)\n{\r\n    return resourceCalculator.compare(clusterResource, lhs, rhs) <= 0 ? lhs : rhs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "max",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource max(ResourceCalculator resourceCalculator, Resource clusterResource, Resource lhs, Resource rhs)\n{\r\n    return resourceCalculator.compare(clusterResource, lhs, rhs) >= 0 ? lhs : rhs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "fitsIn",
  "errType" : [ "ResourceNotFoundException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean fitsIn(Resource smaller, Resource bigger)\n{\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        try {\r\n            ResourceInformation rhsValue = bigger.getResourceInformation(i);\r\n            ResourceInformation lhsValue = smaller.getResourceInformation(i);\r\n            if (lhsValue.getValue() > rhsValue.getValue()) {\r\n                return false;\r\n            }\r\n        } catch (ResourceNotFoundException ye) {\r\n            LOG.warn(\"Resource is missing:\" + ye.getMessage());\r\n            continue;\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "fitsIn",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean fitsIn(ResourceCalculator rc, Resource smaller, Resource bigger)\n{\r\n    return rc.fitsIn(smaller, bigger);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "componentwiseMin",
  "errType" : [ "ResourceNotFoundException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Resource componentwiseMin(Resource lhs, Resource rhs)\n{\r\n    Resource ret = createResource(0);\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        try {\r\n            ResourceInformation rhsValue = rhs.getResourceInformation(i);\r\n            ResourceInformation lhsValue = lhs.getResourceInformation(i);\r\n            ResourceInformation outInfo = lhsValue.getValue() < rhsValue.getValue() ? lhsValue : rhsValue;\r\n            ret.setResourceInformation(i, outInfo);\r\n        } catch (ResourceNotFoundException ye) {\r\n            LOG.warn(\"Resource is missing:\" + ye.getMessage());\r\n            continue;\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "componentwiseMax",
  "errType" : [ "ResourceNotFoundException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Resource componentwiseMax(Resource lhs, Resource rhs)\n{\r\n    Resource ret = createResource(0);\r\n    int maxLength = ResourceUtils.getNumberOfCountableResourceTypes();\r\n    for (int i = 0; i < maxLength; i++) {\r\n        try {\r\n            ResourceInformation rhsValue = rhs.getResourceInformation(i);\r\n            ResourceInformation lhsValue = lhs.getResourceInformation(i);\r\n            ResourceInformation outInfo = lhsValue.getValue() > rhsValue.getValue() ? lhsValue : rhsValue;\r\n            ret.setResourceInformation(i, outInfo);\r\n        } catch (ResourceNotFoundException ye) {\r\n            LOG.warn(\"Resource is missing:\" + ye.getMessage());\r\n            continue;\r\n        }\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\util\\resource",
  "methodName" : "normalizeDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource normalizeDown(ResourceCalculator calculator, Resource resource, Resource factor)\n{\r\n    return calculator.normalizeDown(resource, factor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getOwner",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UserGroupInformation getOwner()\n{\r\n    return owner;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "areACLsEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean areACLsEnabled()\n{\r\n    return aclsEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "isAdmin",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isAdmin(UserGroupInformation callerUGI)\n{\r\n    return adminAcl.isUserAllowed(callerUGI);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinishApplicationMasterResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = FinishApplicationMasterResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getIsUnregistered",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getIsUnregistered()\n{\r\n    FinishApplicationMasterResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getIsUnregistered();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setIsUnregistered",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setIsUnregistered(boolean isUnregistered)\n{\r\n    maybeInitBuilder();\r\n    builder.setIsUnregistered(isUnregistered);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init(Configuration conf)\n{\r\n    adminAcl = new AccessControlList(conf.get(YarnConfiguration.YARN_ADMIN_ACL, YarnConfiguration.DEFAULT_YARN_ADMIN_ACL));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "setPermission",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setPermission(List<Permission> permissions, UserGroupInformation user)\n{\r\n    writeLock.lock();\r\n    try {\r\n        for (Permission perm : permissions) {\r\n            allAcls.put(perm.getTarget(), perm.getAcls());\r\n        }\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "checkPermissionInternal",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "boolean checkPermissionInternal(AccessType accessType, PrivilegedEntity target, UserGroupInformation user)\n{\r\n    boolean ret = false;\r\n    Map<AccessType, AccessControlList> acls = allAcls.get(target);\r\n    if (acls != null) {\r\n        AccessControlList list = acls.get(accessType);\r\n        if (list != null) {\r\n            ret = list.isUserAllowed(user);\r\n        }\r\n    }\r\n    if (target.getType() == EntityType.QUEUE && !ret) {\r\n        String queueName = target.getName();\r\n        if (!queueName.contains(\".\")) {\r\n            return ret;\r\n        }\r\n        String parentQueueName = queueName.substring(0, queueName.lastIndexOf(\".\"));\r\n        return checkPermissionInternal(accessType, new PrivilegedEntity(target.getType(), parentQueueName), user);\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "checkPermission",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean checkPermission(AccessRequest accessRequest)\n{\r\n    readLock.lock();\r\n    try {\r\n        return checkPermissionInternal(accessRequest.getAccessType(), accessRequest.getEntity(), accessRequest.getUser());\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "setAdmins",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAdmins(AccessControlList acls, UserGroupInformation ugi)\n{\r\n    adminAcl = acls;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "isAdmin",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isAdmin(UserGroupInformation ugi)\n{\r\n    return adminAcl.isUserAllowed(ugi);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getAdminAcls",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AccessControlList getAdminAcls()\n{\r\n    return this.adminAcl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getApplicationReport",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetApplicationReportResponse getApplicationReport(GetApplicationReportRequest request) throws YarnException, IOException\n{\r\n    GetApplicationReportRequestProto requestProto = ((GetApplicationReportRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetApplicationReportResponsePBImpl(proxy.getApplicationReport(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getApplications",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetApplicationsResponse getApplications(GetApplicationsRequest request) throws YarnException, IOException\n{\r\n    GetApplicationsRequestProto requestProto = ((GetApplicationsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetApplicationsResponsePBImpl(proxy.getApplications(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getApplicationAttemptReport",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetApplicationAttemptReportResponse getApplicationAttemptReport(GetApplicationAttemptReportRequest request) throws YarnException, IOException\n{\r\n    GetApplicationAttemptReportRequestProto requestProto = ((GetApplicationAttemptReportRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetApplicationAttemptReportResponsePBImpl(proxy.getApplicationAttemptReport(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getApplicationAttempts",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetApplicationAttemptsResponse getApplicationAttempts(GetApplicationAttemptsRequest request) throws YarnException, IOException\n{\r\n    GetApplicationAttemptsRequestProto requestProto = ((GetApplicationAttemptsRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetApplicationAttemptsResponsePBImpl(proxy.getApplicationAttempts(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getContainerReport",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetContainerReportResponse getContainerReport(GetContainerReportRequest request) throws YarnException, IOException\n{\r\n    GetContainerReportRequestProto requestProto = ((GetContainerReportRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetContainerReportResponsePBImpl(proxy.getContainerReport(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getContainers",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetContainersResponse getContainers(GetContainersRequest request) throws YarnException, IOException\n{\r\n    GetContainersRequestProto requestProto = ((GetContainersRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetContainersResponsePBImpl(proxy.getContainers(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "getDelegationToken",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetDelegationTokenResponse getDelegationToken(GetDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    GetDelegationTokenRequestProto requestProto = ((GetDelegationTokenRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetDelegationTokenResponsePBImpl(proxy.getDelegationToken(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "renewDelegationToken",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RenewDelegationTokenResponse renewDelegationToken(RenewDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    RenewDelegationTokenRequestProto requestProto = ((RenewDelegationTokenRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RenewDelegationTokenResponsePBImpl(proxy.renewDelegationToken(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "cancelDelegationToken",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "CancelDelegationTokenResponse cancelDelegationToken(CancelDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    CancelDelegationTokenRequestProto requestProto = ((CancelDelegationTokenRequestPBImpl) request).getProto();\r\n    try {\r\n        return new CancelDelegationTokenResponsePBImpl(proxy.cancelDelegationToken(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initAttributesToNodes",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void initAttributesToNodes()\n{\r\n    if (this.attributesToNodes != null) {\r\n        return;\r\n    }\r\n    YarnServiceProtos.GetAttributesToNodesResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<AttributeToNodesProto> list = p.getAttributesToNodesList();\r\n    this.attributesToNodes = new HashMap<>();\r\n    for (AttributeToNodesProto c : list) {\r\n        List<NodeToAttributeValueProto> nodeValueMapList = c.getNodeValueMapList();\r\n        List<NodeToAttributeValue> nodeToAttributeValue = new ArrayList<>();\r\n        for (NodeToAttributeValueProto valueProto : nodeValueMapList) {\r\n            nodeToAttributeValue.add(convertFromProtoFormat(valueProto));\r\n        }\r\n        if (!nodeToAttributeValue.isEmpty()) {\r\n            this.attributesToNodes.put(convertFromProtoFormat(c.getNodeAttribute()), nodeToAttributeValue);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetAttributesToNodesResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addAttributesToNodesToProto",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void addAttributesToNodesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearAttributesToNodes();\r\n    if (attributesToNodes == null) {\r\n        return;\r\n    }\r\n    Iterable<AttributeToNodesProto> iterable = () -> new Iterator<AttributeToNodesProto>() {\r\n\r\n        private Iterator<Map.Entry<NodeAttributeKey, List<NodeToAttributeValue>>> iter = attributesToNodes.entrySet().iterator();\r\n\r\n        @Override\r\n        public void remove() {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public AttributeToNodesProto next() {\r\n            Map.Entry<NodeAttributeKey, List<NodeToAttributeValue>> attrToNodes = iter.next();\r\n            AttributeToNodesProto.Builder attrToNodesBuilder = AttributeToNodesProto.newBuilder().setNodeAttribute(convertToProtoFormat(attrToNodes.getKey()));\r\n            for (NodeToAttributeValue hostToAttrVal : attrToNodes.getValue()) {\r\n                attrToNodesBuilder.addNodeValueMap(convertToProtoFormat(hostToAttrVal));\r\n            }\r\n            return attrToNodesBuilder.build();\r\n        }\r\n\r\n        @Override\r\n        public boolean hasNext() {\r\n            return iter.hasNext();\r\n        }\r\n    };\r\n    builder.addAllAttributesToNodes(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeAttributeKey convertFromProtoFormat(NodeAttributeKeyProto p)\n{\r\n    return new NodeAttributeKeyPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeKeyProto convertToProtoFormat(NodeAttributeKey t)\n{\r\n    return ((NodeAttributeKeyPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeToAttributeValue convertFromProtoFormat(NodeToAttributeValueProto p)\n{\r\n    return new NodeToAttributeValuePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeToAttributeValueProto convertToProtoFormat(NodeToAttributeValue t)\n{\r\n    return ((NodeToAttributeValuePBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.attributesToNodes != null) {\r\n        addAttributesToNodesToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetAttributesToNodesResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    assert false : \"hashCode not designed\";\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAttributeToNodes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAttributeToNodes(Map<NodeAttributeKey, List<NodeToAttributeValue>> map)\n{\r\n    initAttributesToNodes();\r\n    attributesToNodes.clear();\r\n    attributesToNodes.putAll(map);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAttributesToNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<NodeAttributeKey, List<NodeToAttributeValue>> getAttributesToNodes()\n{\r\n    initAttributesToNodes();\r\n    return this.attributesToNodes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "PreemptionResourceRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (rr != null) {\r\n        builder.setResource(convertToProtoFormat(rr));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = PreemptionResourceRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceRequest getResourceRequest()\n{\r\n    PreemptionResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (rr != null) {\r\n        return rr;\r\n    }\r\n    if (!p.hasResource()) {\r\n        return null;\r\n    }\r\n    rr = convertFromProtoFormat(p.getResource());\r\n    return rr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResourceRequest(final ResourceRequest rr)\n{\r\n    maybeInitBuilder();\r\n    if (null == rr) {\r\n        builder.clearResource();\r\n    }\r\n    this.rr = rr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceRequestPBImpl convertFromProtoFormat(ResourceRequestProto p)\n{\r\n    return new ResourceRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceRequestProto convertToProtoFormat(ResourceRequest t)\n{\r\n    return ((ResourceRequestPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(OutputStream os, NodeAttributesManager mgr) throws IOException\n{\r\n    ((NodesToAttributesMappingRequestPBImpl) NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.REPLACE, mgr.getNodeToAttributes(ImmutableSet.of(NodeAttribute.PREFIX_CENTRALIZED)), false)).getProto().writeDelimitedTo(os);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void recover(InputStream is, NodeAttributesManager mgr) throws IOException\n{\r\n    NodesToAttributesMappingRequest request = new NodesToAttributesMappingRequestPBImpl(YarnServerResourceManagerServiceProtos.NodesToAttributesMappingRequestProto.parseDelimitedFrom(is));\r\n    mgr.replaceNodeAttributes(NodeAttribute.PREFIX_CENTRALIZED, getNodeToAttributesMap(request));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getOpCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getOpCode()\n{\r\n    return -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ExecutionTypeRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionTypeRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExecutionType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ExecutionType getExecutionType()\n{\r\n    ExecutionTypeRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasExecutionType()) {\r\n        return null;\r\n    }\r\n    return ProtoUtils.convertFromProtoFormat(p.getExecutionType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExecutionType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setExecutionType(ExecutionType execType)\n{\r\n    maybeInitBuilder();\r\n    if (execType == null) {\r\n        builder.clearExecutionType();\r\n        return;\r\n    }\r\n    builder.setExecutionType(ProtoUtils.convertToProtoFormat(execType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setEnforceExecutionType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setEnforceExecutionType(boolean enforceExecutionType)\n{\r\n    maybeInitBuilder();\r\n    builder.setEnforceExecutionType(enforceExecutionType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getEnforceExecutionType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getEnforceExecutionType()\n{\r\n    ExecutionTypeRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getEnforceExecutionType();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int compareTo(ExecutionTypeRequest other)\n{\r\n    return this.getExecutionType().compareTo(other.getExecutionType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    return \"{Execution Type: \" + getExecutionType() + \", Enforce Execution Type: \" + getEnforceExecutionType() + \"}\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "PreemptionMessageProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (strict != null) {\r\n        builder.setStrictContract(convertToProtoFormat(strict));\r\n    }\r\n    if (contract != null) {\r\n        builder.setContract(convertToProtoFormat(contract));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = PreemptionMessageProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getStrictContract",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "StrictPreemptionContract getStrictContract()\n{\r\n    PreemptionMessageProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (strict != null) {\r\n        return strict;\r\n    }\r\n    if (!p.hasStrictContract()) {\r\n        return null;\r\n    }\r\n    strict = convertFromProtoFormat(p.getStrictContract());\r\n    return strict;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setStrictContract",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setStrictContract(StrictPreemptionContract strict)\n{\r\n    maybeInitBuilder();\r\n    if (null == strict) {\r\n        builder.clearStrictContract();\r\n    }\r\n    this.strict = strict;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContract",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "PreemptionContract getContract()\n{\r\n    PreemptionMessageProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (contract != null) {\r\n        return contract;\r\n    }\r\n    if (!p.hasContract()) {\r\n        return null;\r\n    }\r\n    contract = convertFromProtoFormat(p.getContract());\r\n    return contract;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContract",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContract(final PreemptionContract c)\n{\r\n    maybeInitBuilder();\r\n    if (null == c) {\r\n        builder.clearContract();\r\n    }\r\n    this.contract = c;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "StrictPreemptionContractPBImpl convertFromProtoFormat(StrictPreemptionContractProto p)\n{\r\n    return new StrictPreemptionContractPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "StrictPreemptionContractProto convertToProtoFormat(StrictPreemptionContract t)\n{\r\n    return ((StrictPreemptionContractPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PreemptionContractPBImpl convertFromProtoFormat(PreemptionContractProto p)\n{\r\n    return new PreemptionContractPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PreemptionContractProto convertToProtoFormat(PreemptionContract t)\n{\r\n    return ((PreemptionContractPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "areACLsEnabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean areACLsEnabled()\n{\r\n    return adminAclsManager.areACLsEnabled();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "addApplication",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addApplication(ApplicationId appId, Map<ApplicationAccessType, String> acls)\n{\r\n    Map<ApplicationAccessType, AccessControlList> finalMap = new HashMap<ApplicationAccessType, AccessControlList>(acls.size());\r\n    for (Entry<ApplicationAccessType, String> acl : acls.entrySet()) {\r\n        finalMap.put(acl.getKey(), new AccessControlList(acl.getValue()));\r\n    }\r\n    this.applicationACLS.put(appId, finalMap);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "removeApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeApplication(ApplicationId appId)\n{\r\n    this.applicationACLS.remove(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "checkAccess",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "boolean checkAccess(UserGroupInformation callerUGI, ApplicationAccessType applicationAccessType, String applicationOwner, ApplicationId applicationId)\n{\r\n    LOG.debug(\"Verifying access-type {} for {} on application {} owned by {}\", applicationAccessType, callerUGI, applicationId, applicationOwner);\r\n    String user = callerUGI.getShortUserName();\r\n    if (!areACLsEnabled()) {\r\n        return true;\r\n    }\r\n    AccessControlList applicationACL = DEFAULT_YARN_APP_ACL;\r\n    Map<ApplicationAccessType, AccessControlList> acls = this.applicationACLS.get(applicationId);\r\n    if (acls == null) {\r\n        LOG.debug(\"ACL not found for application {} owned by {}.\" + \" Using default [{}]\", applicationId, applicationOwner, YarnConfiguration.DEFAULT_YARN_APP_ACL);\r\n    } else {\r\n        AccessControlList applicationACLInMap = acls.get(applicationAccessType);\r\n        if (applicationACLInMap != null) {\r\n            applicationACL = applicationACLInMap;\r\n        } else {\r\n            LOG.debug(\"ACL not found for access-type {} for application {}\" + \" owned by {}. Using default [{}]\", applicationAccessType, applicationId, applicationOwner, YarnConfiguration.DEFAULT_YARN_APP_ACL);\r\n        }\r\n    }\r\n    if (this.adminAclsManager.isAdmin(callerUGI) || user.equals(applicationOwner) || applicationACL.isUserAllowed(callerUGI)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "isAdmin",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isAdmin(final UserGroupInformation calledUGI)\n{\r\n    return this.adminAclsManager.isAdmin(calledUGI);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "registerCustomResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void registerCustomResources(Map<String, Long> customResources, MetricsRegistry registry)\n{\r\n    registerCustomResources(customResources, registry, ALLOCATED_RESOURCE_METRIC_PREFIX, ALLOCATED_RESOURCE_METRIC_DESC);\r\n    registerCustomResources(customResources, registry, AVAILABLE_RESOURCE_METRIC_PREFIX, AVAILABLE_RESOURCE_METRIC_DESC);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "initAndGetCustomResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, Long> initAndGetCustomResources()\n{\r\n    Map<String, Long> customResources = new HashMap<String, Long>();\r\n    ResourceInformation[] resources = ResourceUtils.getResourceTypesArray();\r\n    for (int i = 2; i < resources.length; i++) {\r\n        ResourceInformation resource = resources[i];\r\n        customResources.put(resource.getName(), Long.valueOf(0));\r\n    }\r\n    return customResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "registerCustomResources",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void registerCustomResources(Map<String, Long> customResources, MetricsRegistry registry, String metricPrefix, String metricDesc)\n{\r\n    for (Map.Entry<String, Long> entry : customResources.entrySet()) {\r\n        String resourceName = entry.getKey();\r\n        Long resourceValue = entry.getValue();\r\n        MutableGaugeLong resourceMetric = (MutableGaugeLong) registry.get(metricPrefix + resourceName);\r\n        if (resourceMetric == null) {\r\n            resourceMetric = registry.newGauge(metricPrefix + resourceName, metricDesc.replace(\"NAME\", resourceName), 0L);\r\n        }\r\n        resourceMetric.set(resourceValue);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "setAvailable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setAvailable(Resource res)\n{\r\n    available.set(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "increaseAllocated",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void increaseAllocated(Resource res)\n{\r\n    allocated.increase(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "increaseAllocated",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void increaseAllocated(Resource res, int containers)\n{\r\n    allocated.increaseWithMultiplier(res, containers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "decreaseAllocated",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void decreaseAllocated(Resource res)\n{\r\n    allocated.decrease(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "decreaseAllocated",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void decreaseAllocated(Resource res, int containers)\n{\r\n    allocated.decreaseWithMultiplier(res, containers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "getAllocatedValues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Long> getAllocatedValues()\n{\r\n    return allocated.getValues();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "getAvailableValues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Long> getAvailableValues()\n{\r\n    return available.getValues();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\metrics",
  "methodName" : "getAvailable",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CustomResourceMetricValue getAvailable()\n{\r\n    return available;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeKeyProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NodeAttributeKeyProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAttributePrefix",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getAttributePrefix()\n{\r\n    NodeAttributeKeyProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getAttributePrefix();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAttributePrefix",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAttributePrefix(String attributePrefix)\n{\r\n    maybeInitBuilder();\r\n    if (attributePrefix == null) {\r\n        builder.clearAttributePrefix();\r\n        return;\r\n    }\r\n    builder.setAttributePrefix(attributePrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAttributeName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getAttributeName()\n{\r\n    NodeAttributeKeyProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAttributeName()) {\r\n        return null;\r\n    }\r\n    return p.getAttributeName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAttributeName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAttributeName(String attributeName)\n{\r\n    maybeInitBuilder();\r\n    if (attributeName == null) {\r\n        builder.clearAttributeName();\r\n        return;\r\n    }\r\n    builder.setAttributeName(attributeName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((getAttributePrefix() == null) ? 0 : getAttributePrefix().hashCode());\r\n    result = prime * result + ((getAttributeName() == null) ? 0 : getAttributeName().hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (obj instanceof NodeAttributeKey) {\r\n        NodeAttributeKey other = (NodeAttributeKey) obj;\r\n        if (!compare(getAttributePrefix(), other.getAttributePrefix())) {\r\n            return false;\r\n        }\r\n        if (!compare(getAttributeName(), other.getAttributeName())) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "compare",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean compare(Object left, Object right)\n{\r\n    if (left == null) {\r\n        return right == null;\r\n    } else {\r\n        return left.equals(right);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    return \"Prefix-\" + getAttributePrefix() + \" :Name-\" + getAttributeName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnServiceProtos.ResourceLocalizationResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetAllResourceProfilesRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshNodesRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.decommissionType != null) {\r\n        builder.setDecommissionType(convertToProtoFormat(this.decommissionType));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = RefreshNodesRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setDecommissionType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setDecommissionType(DecommissionType decommissionType)\n{\r\n    maybeInitBuilder();\r\n    this.decommissionType = decommissionType;\r\n    mergeLocalToBuilder();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getDecommissionType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DecommissionType getDecommissionType()\n{\r\n    RefreshNodesRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return convertFromProtoFormat(p.getDecommissionType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setDecommissionTimeout",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDecommissionTimeout(Integer timeout)\n{\r\n    maybeInitBuilder();\r\n    if (timeout != null) {\r\n        builder.setDecommissionTimeout(timeout);\r\n    } else {\r\n        builder.clearDecommissionTimeout();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getDecommissionTimeout",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Integer getDecommissionTimeout()\n{\r\n    RefreshNodesRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.hasDecommissionTimeout() ? p.getDecommissionTimeout() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DecommissionType convertFromProtoFormat(DecommissionTypeProto p)\n{\r\n    return DecommissionType.valueOf(p.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DecommissionTypeProto convertToProtoFormat(DecommissionType t)\n{\r\n    return DecommissionTypeProto.valueOf(t.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetClusterNodeAttributesRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MoveApplicationAcrossQueuesRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    if (this.applicationId != null) {\r\n        return this.applicationId;\r\n    }\r\n    MoveApplicationAcrossQueuesRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId appId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null) {\r\n        builder.clearApplicationId();\r\n    }\r\n    applicationId = appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getTargetQueue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getTargetQueue()\n{\r\n    if (this.targetQueue != null) {\r\n        return this.targetQueue;\r\n    }\r\n    MoveApplicationAcrossQueuesRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.targetQueue = p.getTargetQueue();\r\n    return this.targetQueue;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setTargetQueue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTargetQueue(String queue)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null) {\r\n        builder.clearTargetQueue();\r\n    }\r\n    targetQueue = queue;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (applicationId != null) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n    if (targetQueue != null) {\r\n        builder.setTargetQueue(this.targetQueue);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = MoveApplicationAcrossQueuesRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getAcls",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<AccessType, AccessControlList> getAcls()\n{\r\n    return acls;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security",
  "methodName" : "getTarget",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PrivilegedEntity getTarget()\n{\r\n    return target;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetContainerReportResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerReport != null) {\r\n        builder.setContainerReport(convertToProtoFormat(this.containerReport));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetContainerReportResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerReport getContainerReport()\n{\r\n    if (this.containerReport != null) {\r\n        return this.containerReport;\r\n    }\r\n    GetContainerReportResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerReport()) {\r\n        return null;\r\n    }\r\n    this.containerReport = convertFromProtoFormat(p.getContainerReport());\r\n    return this.containerReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerReport(ContainerReport containerReport)\n{\r\n    maybeInitBuilder();\r\n    if (containerReport == null) {\r\n        builder.clearContainerReport();\r\n    }\r\n    this.containerReport = containerReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerReportPBImpl convertFromProtoFormat(ContainerReportProto p)\n{\r\n    return new ContainerReportPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerReportProto convertToProtoFormat(ContainerReport t)\n{\r\n    return ((ContainerReportPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "addTransition",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "StateMachineFactory<OPERAND, STATE, EVENTTYPE, EVENT> addTransition(STATE preState, STATE postState, EVENTTYPE eventType)\n{\r\n    return addTransition(preState, postState, eventType, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "addTransition",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "StateMachineFactory<OPERAND, STATE, EVENTTYPE, EVENT> addTransition(STATE preState, STATE postState, Set<EVENTTYPE> eventTypes)\n{\r\n    return addTransition(preState, postState, eventTypes, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "addTransition",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "StateMachineFactory<OPERAND, STATE, EVENTTYPE, EVENT> addTransition(STATE preState, STATE postState, Set<EVENTTYPE> eventTypes, SingleArcTransition<OPERAND, EVENT> hook)\n{\r\n    StateMachineFactory<OPERAND, STATE, EVENTTYPE, EVENT> factory = null;\r\n    for (EVENTTYPE event : eventTypes) {\r\n        if (factory == null) {\r\n            factory = addTransition(preState, postState, event, hook);\r\n        } else {\r\n            factory = factory.addTransition(preState, postState, event, hook);\r\n        }\r\n    }\r\n    return factory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "addTransition",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "StateMachineFactory<OPERAND, STATE, EVENTTYPE, EVENT> addTransition(STATE preState, STATE postState, EVENTTYPE eventType, SingleArcTransition<OPERAND, EVENT> hook)\n{\r\n    return new StateMachineFactory<OPERAND, STATE, EVENTTYPE, EVENT>(this, new ApplicableSingleOrMultipleTransition<OPERAND, STATE, EVENTTYPE, EVENT>(preState, eventType, new SingleInternalArc(postState, hook)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "addTransition",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "StateMachineFactory<OPERAND, STATE, EVENTTYPE, EVENT> addTransition(STATE preState, Set<STATE> postStates, EVENTTYPE eventType, MultipleArcTransition<OPERAND, EVENT, STATE> hook)\n{\r\n    return new StateMachineFactory<OPERAND, STATE, EVENTTYPE, EVENT>(this, new ApplicableSingleOrMultipleTransition<OPERAND, STATE, EVENTTYPE, EVENT>(preState, eventType, new MultipleInternalArc(postStates, hook)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "installTopology",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "StateMachineFactory<OPERAND, STATE, EVENTTYPE, EVENT> installTopology()\n{\r\n    return new StateMachineFactory<OPERAND, STATE, EVENTTYPE, EVENT>(this, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "doTransition",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "STATE doTransition(OPERAND operand, STATE oldState, EVENTTYPE eventType, EVENT event) throws InvalidStateTransitionException\n{\r\n    Map<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>> transitionMap = stateMachineTable.get(oldState);\r\n    if (transitionMap != null) {\r\n        Transition<OPERAND, STATE, EVENTTYPE, EVENT> transition = transitionMap.get(eventType);\r\n        if (transition != null) {\r\n            return transition.doTransition(operand, oldState, event, eventType);\r\n        }\r\n    }\r\n    throw new InvalidStateTransitionException(oldState, eventType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "maybeMakeStateMachineTable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeMakeStateMachineTable()\n{\r\n    if (stateMachineTable == null) {\r\n        makeStateMachineTable();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "makeStateMachineTable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void makeStateMachineTable()\n{\r\n    Stack<ApplicableTransition<OPERAND, STATE, EVENTTYPE, EVENT>> stack = new Stack<ApplicableTransition<OPERAND, STATE, EVENTTYPE, EVENT>>();\r\n    Map<STATE, Map<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>>> prototype = new HashMap<STATE, Map<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>>>();\r\n    prototype.put(defaultInitialState, null);\r\n    stateMachineTable = new EnumMap<STATE, Map<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>>>(prototype);\r\n    for (TransitionsListNode cursor = transitionsListNode; cursor != null; cursor = cursor.next) {\r\n        stack.push(cursor.transition);\r\n    }\r\n    while (!stack.isEmpty()) {\r\n        stack.pop().apply(this);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "make",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "StateMachine<STATE, EVENTTYPE, EVENT> make(OPERAND operand, STATE initialState, StateTransitionListener<OPERAND, EVENT, STATE> listener)\n{\r\n    return new InternalStateMachine(operand, initialState, listener);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "make",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "StateMachine<STATE, EVENTTYPE, EVENT> make(OPERAND operand, STATE initialState)\n{\r\n    return new InternalStateMachine(operand, initialState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "make",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "StateMachine<STATE, EVENTTYPE, EVENT> make(OPERAND operand)\n{\r\n    return new InternalStateMachine(operand, defaultInitialState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\state",
  "methodName" : "generateStateGraph",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "Graph generateStateGraph(String name)\n{\r\n    maybeMakeStateMachineTable();\r\n    Graph g = new Graph(name);\r\n    for (STATE startState : stateMachineTable.keySet()) {\r\n        Map<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>> transitions = stateMachineTable.get(startState);\r\n        for (Entry<EVENTTYPE, Transition<OPERAND, STATE, EVENTTYPE, EVENT>> entry : transitions.entrySet()) {\r\n            Transition<OPERAND, STATE, EVENTTYPE, EVENT> transition = entry.getValue();\r\n            if (transition instanceof StateMachineFactory.SingleInternalArc) {\r\n                StateMachineFactory.SingleInternalArc sa = (StateMachineFactory.SingleInternalArc) transition;\r\n                Graph.Node fromNode = g.getNode(startState.toString());\r\n                Graph.Node toNode = g.getNode(sa.postState.toString());\r\n                fromNode.addEdge(toNode, entry.getKey().toString());\r\n            } else if (transition instanceof StateMachineFactory.MultipleInternalArc) {\r\n                StateMachineFactory.MultipleInternalArc ma = (StateMachineFactory.MultipleInternalArc) transition;\r\n                Iterator iter = ma.validPostStates.iterator();\r\n                while (iter.hasNext()) {\r\n                    Graph.Node fromNode = g.getNode(startState.toString());\r\n                    Graph.Node toNode = g.getNode(iter.next().toString());\r\n                    fromNode.addEdge(toNode, entry.getKey().toString());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return g;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerLaunchContextProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteBuffer convertFromProtoFormat(ByteString byteString)\n{\r\n    return ProtoUtils.convertFromProtoFormat(byteString);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteString convertToProtoFormat(ByteBuffer byteBuffer)\n{\r\n    return ProtoUtils.convertToProtoFormat(byteBuffer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.localResources != null) {\r\n        addLocalResourcesToProto();\r\n    }\r\n    if (this.tokens != null) {\r\n        builder.setTokens(convertToProtoFormat(this.tokens));\r\n    }\r\n    if (this.tokensConf != null) {\r\n        builder.setTokensConf(convertToProtoFormat(this.tokensConf));\r\n    }\r\n    if (this.serviceData != null) {\r\n        addServiceDataToProto();\r\n    }\r\n    if (this.environment != null) {\r\n        addEnvToProto();\r\n    }\r\n    if (this.commands != null) {\r\n        addCommandsToProto();\r\n    }\r\n    if (this.applicationACLS != null) {\r\n        addApplicationACLs();\r\n    }\r\n    if (this.containerRetryContext != null) {\r\n        builder.setContainerRetryContext(convertToProtoFormat(this.containerRetryContext));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ContainerLaunchContextProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCommands",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getCommands()\n{\r\n    initCommands();\r\n    return this.commands;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initCommands",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initCommands()\n{\r\n    if (this.commands != null) {\r\n        return;\r\n    }\r\n    ContainerLaunchContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<String> list = p.getCommandList();\r\n    this.commands = new ArrayList<String>();\r\n    for (String c : list) {\r\n        this.commands.add(c);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCommands",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setCommands(final List<String> commands)\n{\r\n    if (commands == null)\r\n        return;\r\n    initCommands();\r\n    this.commands.clear();\r\n    this.commands.addAll(commands);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addCommandsToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addCommandsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearCommand();\r\n    if (this.commands == null)\r\n        return;\r\n    builder.addAllCommand(this.commands);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getLocalResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, LocalResource> getLocalResources()\n{\r\n    initLocalResources();\r\n    return this.localResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initLocalResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalResources()\n{\r\n    if (this.localResources != null) {\r\n        return;\r\n    }\r\n    ContainerLaunchContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<StringLocalResourceMapProto> list = p.getLocalResourcesList();\r\n    this.localResources = new HashMap<String, LocalResource>();\r\n    for (StringLocalResourceMapProto c : list) {\r\n        this.localResources.put(c.getKey(), convertFromProtoFormat(c.getValue()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setLocalResources",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setLocalResources(final Map<String, LocalResource> localResources)\n{\r\n    if (localResources == null)\r\n        return;\r\n    checkLocalResources(localResources);\r\n    initLocalResources();\r\n    this.localResources.clear();\r\n    this.localResources.putAll(localResources);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "checkLocalResources",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void checkLocalResources(Map<String, LocalResource> localResources)\n{\r\n    for (Map.Entry<String, LocalResource> rsrcEntry : localResources.entrySet()) {\r\n        if (rsrcEntry.getValue() == null || rsrcEntry.getValue().getResource() == null) {\r\n            throw new NullPointerException(\"Null resource URL for local resource \" + rsrcEntry.getKey() + \" : \" + rsrcEntry.getValue());\r\n        } else if (rsrcEntry.getValue().getType() == null) {\r\n            throw new NullPointerException(\"Null resource type for local resource \" + rsrcEntry.getKey() + \" : \" + rsrcEntry.getValue());\r\n        } else if (rsrcEntry.getValue().getVisibility() == null) {\r\n            throw new NullPointerException(\"Null resource visibility for local resource \" + rsrcEntry.getKey() + \" : \" + rsrcEntry.getValue());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addLocalResourcesToProto",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addLocalResourcesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearLocalResources();\r\n    if (localResources == null)\r\n        return;\r\n    Iterable<StringLocalResourceMapProto> iterable = new Iterable<StringLocalResourceMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<StringLocalResourceMapProto> iterator() {\r\n            return new Iterator<StringLocalResourceMapProto>() {\r\n\r\n                Iterator<String> keyIter = localResources.keySet().iterator();\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n\r\n                @Override\r\n                public StringLocalResourceMapProto next() {\r\n                    String key = keyIter.next();\r\n                    return StringLocalResourceMapProto.newBuilder().setKey(key).setValue(convertToProtoFormat(localResources.get(key))).build();\r\n                }\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return keyIter.hasNext();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllLocalResources(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getTokens",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ByteBuffer getTokens()\n{\r\n    ContainerLaunchContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.tokens != null) {\r\n        return this.tokens;\r\n    }\r\n    if (!p.hasTokens()) {\r\n        return null;\r\n    }\r\n    this.tokens = convertFromProtoFormat(p.getTokens());\r\n    return this.tokens;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setTokens",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTokens(ByteBuffer tokens)\n{\r\n    maybeInitBuilder();\r\n    if (tokens == null) {\r\n        builder.clearTokens();\r\n    }\r\n    this.tokens = tokens;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getTokensConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ByteBuffer getTokensConf()\n{\r\n    ContainerLaunchContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.tokensConf != null) {\r\n        return this.tokensConf;\r\n    }\r\n    if (!p.hasTokensConf()) {\r\n        return null;\r\n    }\r\n    this.tokensConf = convertFromProtoFormat(p.getTokensConf());\r\n    return this.tokensConf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setTokensConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTokensConf(ByteBuffer tokensConf)\n{\r\n    maybeInitBuilder();\r\n    if (tokensConf == null) {\r\n        builder.clearTokensConf();\r\n    }\r\n    this.tokensConf = tokensConf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getServiceData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, ByteBuffer> getServiceData()\n{\r\n    initServiceData();\r\n    return this.serviceData;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initServiceData",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initServiceData()\n{\r\n    if (this.serviceData != null) {\r\n        return;\r\n    }\r\n    ContainerLaunchContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<StringBytesMapProto> list = p.getServiceDataList();\r\n    this.serviceData = new HashMap<String, ByteBuffer>();\r\n    for (StringBytesMapProto c : list) {\r\n        this.serviceData.put(c.getKey(), convertFromProtoFormat(c.getValue()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setServiceData",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setServiceData(final Map<String, ByteBuffer> serviceData)\n{\r\n    if (serviceData == null)\r\n        return;\r\n    initServiceData();\r\n    this.serviceData.putAll(serviceData);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addServiceDataToProto",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addServiceDataToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearServiceData();\r\n    if (serviceData == null)\r\n        return;\r\n    Iterable<StringBytesMapProto> iterable = new Iterable<StringBytesMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<StringBytesMapProto> iterator() {\r\n            return new Iterator<StringBytesMapProto>() {\r\n\r\n                Iterator<String> keyIter = serviceData.keySet().iterator();\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n\r\n                @Override\r\n                public StringBytesMapProto next() {\r\n                    String key = keyIter.next();\r\n                    return StringBytesMapProto.newBuilder().setKey(key).setValue(convertToProtoFormat(serviceData.get(key))).build();\r\n                }\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return keyIter.hasNext();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllServiceData(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getEnvironment",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, String> getEnvironment()\n{\r\n    initEnv();\r\n    return this.environment;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initEnv",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initEnv()\n{\r\n    if (this.environment != null) {\r\n        return;\r\n    }\r\n    ContainerLaunchContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<StringStringMapProto> list = p.getEnvironmentList();\r\n    this.environment = new HashMap<String, String>();\r\n    for (StringStringMapProto c : list) {\r\n        this.environment.put(StringInterner.weakIntern(c.getKey()), StringInterner.weakIntern(c.getValue()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setEnvironment",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setEnvironment(final Map<String, String> env)\n{\r\n    if (env == null)\r\n        return;\r\n    initEnv();\r\n    this.environment.clear();\r\n    for (Map.Entry<String, String> e : env.entrySet()) {\r\n        this.environment.put(StringInterner.weakIntern(e.getKey()), StringInterner.weakIntern(e.getValue()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addEnvToProto",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void addEnvToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearEnvironment();\r\n    if (environment == null)\r\n        return;\r\n    Iterable<StringStringMapProto> iterable = new Iterable<StringStringMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<StringStringMapProto> iterator() {\r\n            return new Iterator<StringStringMapProto>() {\r\n\r\n                Iterator<String> keyIter = environment.keySet().iterator();\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n\r\n                @Override\r\n                public StringStringMapProto next() {\r\n                    String key = keyIter.next();\r\n                    String value = environment.get(key);\r\n                    if (value == null) {\r\n                        value = \"\";\r\n                    }\r\n                    return StringStringMapProto.newBuilder().setKey(key).setValue((value)).build();\r\n                }\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return keyIter.hasNext();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllEnvironment(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getApplicationACLs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ApplicationAccessType, String> getApplicationACLs()\n{\r\n    initApplicationACLs();\r\n    return this.applicationACLS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initApplicationACLs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initApplicationACLs()\n{\r\n    if (this.applicationACLS != null) {\r\n        return;\r\n    }\r\n    ContainerLaunchContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ApplicationACLMapProto> list = p.getApplicationACLsList();\r\n    this.applicationACLS = new HashMap<ApplicationAccessType, String>(list.size());\r\n    for (ApplicationACLMapProto aclProto : list) {\r\n        this.applicationACLS.put(ProtoUtils.convertFromProtoFormat(aclProto.getAccessType()), StringInterner.weakIntern(aclProto.getAcl()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "addApplicationACLs",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addApplicationACLs()\n{\r\n    maybeInitBuilder();\r\n    builder.clearApplicationACLs();\r\n    if (applicationACLS == null) {\r\n        return;\r\n    }\r\n    Iterable<? extends ApplicationACLMapProto> values = new Iterable<ApplicationACLMapProto>() {\r\n\r\n        @Override\r\n        public Iterator<ApplicationACLMapProto> iterator() {\r\n            return new Iterator<ApplicationACLMapProto>() {\r\n\r\n                Iterator<ApplicationAccessType> aclsIterator = applicationACLS.keySet().iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return aclsIterator.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ApplicationACLMapProto next() {\r\n                    ApplicationAccessType key = aclsIterator.next();\r\n                    return ApplicationACLMapProto.newBuilder().setAcl(applicationACLS.get(key)).setAccessType(ProtoUtils.convertToProtoFormat(key)).build();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    this.builder.addAllApplicationACLs(values);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setApplicationACLs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setApplicationACLs(final Map<ApplicationAccessType, String> appACLs)\n{\r\n    if (appACLs == null)\r\n        return;\r\n    initApplicationACLs();\r\n    this.applicationACLS.clear();\r\n    for (Map.Entry<ApplicationAccessType, String> e : appACLs.entrySet()) {\r\n        this.applicationACLS.put(e.getKey(), StringInterner.weakIntern(e.getValue()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainerRetryContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerRetryContext getContainerRetryContext()\n{\r\n    ContainerLaunchContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerRetryContext != null) {\r\n        return this.containerRetryContext;\r\n    }\r\n    if (!p.hasContainerRetryContext()) {\r\n        return null;\r\n    }\r\n    this.containerRetryContext = convertFromProtoFormat(p.getContainerRetryContext());\r\n    return this.containerRetryContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainerRetryContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerRetryContext(ContainerRetryContext retryContext)\n{\r\n    maybeInitBuilder();\r\n    if (retryContext == null) {\r\n        builder.clearContainerRetryContext();\r\n    }\r\n    this.containerRetryContext = retryContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourcePBImpl convertFromProtoFormat(LocalResourceProto p)\n{\r\n    return new LocalResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResourceProto convertToProtoFormat(LocalResource t)\n{\r\n    return ((LocalResourcePBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerRetryContextPBImpl convertFromProtoFormat(ContainerRetryContextProto p)\n{\r\n    return new ContainerRetryContextPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerRetryContextProto convertToProtoFormat(ContainerRetryContext t)\n{\r\n    return ((ContainerRetryContextPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Dest add(WebApp.HTTP httpMethod, String path, Class<? extends Controller> cls, String action, List<String> names)\n{\r\n    return addWithOptionalDefaultView(httpMethod, path, cls, action, names, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "addWithoutDefaultView",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Dest addWithoutDefaultView(WebApp.HTTP httpMethod, String path, Class<? extends Controller> cls, String action, List<String> names)\n{\r\n    return addWithOptionalDefaultView(httpMethod, path, cls, action, names, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "addWithOptionalDefaultView",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Dest addWithOptionalDefaultView(WebApp.HTTP httpMethod, String path, Class<? extends Controller> cls, String action, List<String> names, boolean defaultViewNeeded)\n{\r\n    LOG.debug(\"adding {}({})->{}#{}\", new Object[] { path, names, cls, action });\r\n    Dest dest = addController(httpMethod, path, cls, action, names);\r\n    if (defaultViewNeeded) {\r\n        addDefaultView(dest);\r\n    }\r\n    return dest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "addController",
  "errType" : [ "NoSuchMethodException", "SecurityException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Dest addController(WebApp.HTTP httpMethod, String path, Class<? extends Controller> cls, String action, List<String> names)\n{\r\n    try {\r\n        Method method = cls.getMethod(action);\r\n        Dest dest = routes.get(path);\r\n        if (dest == null) {\r\n            method.setAccessible(true);\r\n            dest = new Dest(path, method, cls, names, httpMethod);\r\n            routes.put(path, dest);\r\n            return dest;\r\n        }\r\n        dest.methods.add(httpMethod);\r\n        return dest;\r\n    } catch (NoSuchMethodException nsme) {\r\n        throw new WebAppException(action + \"() not found in \" + cls);\r\n    } catch (SecurityException se) {\r\n        throw new WebAppException(\"Security exception thrown for \" + action + \"() in \" + cls);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "addDefaultView",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addDefaultView(Dest dest)\n{\r\n    String controllerName = dest.controllerClass.getSimpleName();\r\n    if (controllerName.endsWith(\"Controller\")) {\r\n        controllerName = controllerName.substring(0, controllerName.length() - 10);\r\n    }\r\n    dest.defaultViewClass = find(View.class, dest.controllerClass.getPackage().getName(), join(controllerName + \"View\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "setHostClass",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHostClass(Class<?> cls)\n{\r\n    hostClass = cls;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "resolve",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Dest resolve(String httpMethod, String path)\n{\r\n    WebApp.HTTP method = WebApp.HTTP.valueOf(httpMethod);\r\n    Dest dest = lookupRoute(method, path);\r\n    if (dest == null) {\r\n        return resolveDefault(method, path);\r\n    }\r\n    return dest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "lookupRoute",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "Dest lookupRoute(WebApp.HTTP method, String path)\n{\r\n    String key = path;\r\n    do {\r\n        Dest dest = routes.get(key);\r\n        if (dest != null && methodAllowed(method, dest)) {\r\n            if ((Object) key == path) {\r\n                LOG.debug(\"exact match for {}: {}\", key, dest.action);\r\n                return dest;\r\n            } else if (isGoodMatch(dest, path)) {\r\n                LOG.debug(\"prefix match2 for {}: {}\", key, dest.action);\r\n                return dest;\r\n            }\r\n            return resolveAction(method, dest, path);\r\n        }\r\n        Map.Entry<String, Dest> lower = routes.lowerEntry(key);\r\n        if (lower == null) {\r\n            return null;\r\n        }\r\n        dest = lower.getValue();\r\n        if (prefixMatches(dest, path)) {\r\n            if (methodAllowed(method, dest)) {\r\n                if (isGoodMatch(dest, path)) {\r\n                    LOG.debug(\"prefix match for {}: {}\", lower.getKey(), dest.action);\r\n                    return dest;\r\n                }\r\n                return resolveAction(method, dest, path);\r\n            }\r\n            int slashPos = key.lastIndexOf('/');\r\n            key = slashPos > 0 ? path.substring(0, slashPos) : \"/\";\r\n        } else {\r\n            key = \"/\";\r\n        }\r\n    } while (true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "methodAllowed",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean methodAllowed(WebApp.HTTP method, Dest dest)\n{\r\n    return dest.methods.contains(method) || (dest.methods.size() == 1 && dest.methods.contains(WebApp.HTTP.GET));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "prefixMatches",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean prefixMatches(Dest dest, String path)\n{\r\n    LOG.debug(\"checking prefix {}{} for path: {}\", new Object[] { dest.prefix, dest.pathParams, path });\r\n    if (!path.startsWith(dest.prefix)) {\r\n        return false;\r\n    }\r\n    int prefixLen = dest.prefix.length();\r\n    if (prefixLen > 1 && path.length() > prefixLen && path.charAt(prefixLen) != '/') {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "isGoodMatch",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean isGoodMatch(Dest dest, String path)\n{\r\n    if (SLASH.countIn(dest.prefix) > 1) {\r\n        return true;\r\n    }\r\n    if (dest.prefix.length() == 1) {\r\n        return dest.pathParams.size() > 0 && !maybeController(path);\r\n    }\r\n    return dest.pathParams.size() > 0 || (path.endsWith(\"/\") && SLASH.countIn(path) == 2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "maybeController",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean maybeController(String path)\n{\r\n    return controllerRe.matcher(path).matches();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "resolveDefault",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Dest resolveDefault(WebApp.HTTP method, String path)\n{\r\n    List<String> parts = WebApp.parseRoute(path);\r\n    String controller = parts.get(WebApp.R_CONTROLLER);\r\n    String action = parts.get(WebApp.R_ACTION);\r\n    Class<? extends Controller> cls = find(Controller.class, join(controller, \"Controller\"));\r\n    if (cls == null) {\r\n        cls = find(Controller.class, controller);\r\n    }\r\n    if (cls == null) {\r\n        throw new WebAppException(join(path, \": controller for \", controller, \" not found\"));\r\n    }\r\n    return add(method, defaultPrefix(controller, action), cls, action, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "defaultPrefix",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String defaultPrefix(String controller, String action)\n{\r\n    if (controller.equals(\"default\") && action.equals(\"index\")) {\r\n        return \"/\";\r\n    }\r\n    if (action.equals(\"index\")) {\r\n        return join('/', controller);\r\n    }\r\n    return pjoin(\"\", controller, action);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "find",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Class<? extends T> find(Class<T> cls, String cname)\n{\r\n    String pkg = hostClass.getPackage().getName();\r\n    return find(cls, pkg, cname);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "find",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Class<? extends T> find(Class<T> cls, String pkg, String cname)\n{\r\n    String name = StringUtils.capitalize(cname);\r\n    Class<? extends T> found = load(cls, djoin(pkg, name));\r\n    if (found == null) {\r\n        found = load(cls, djoin(pkg, \"webapp\", name));\r\n    }\r\n    if (found == null) {\r\n        found = load(cls, join(hostClass.getName(), '$', name));\r\n    }\r\n    return found;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "load",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Class<? extends T> load(Class<T> cls, String className)\n{\r\n    LOG.debug(\"trying: {}\", className);\r\n    try {\r\n        Class<?> found = Class.forName(className);\r\n        if (cls.isAssignableFrom(found)) {\r\n            LOG.debug(\"found {}\", className);\r\n            return (Class<? extends T>) found;\r\n        }\r\n        LOG.warn(\"found a {} but it's not a {}\", className, cls.getName());\r\n    } catch (ClassNotFoundException e) {\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "resolveAction",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Dest resolveAction(WebApp.HTTP method, Dest dest, String path)\n{\r\n    if (dest.prefix.length() == 1) {\r\n        return null;\r\n    }\r\n    checkState(!isGoodMatch(dest, path), dest.prefix);\r\n    checkState(SLASH.countIn(path) > 1, path);\r\n    List<String> parts = WebApp.parseRoute(path);\r\n    String controller = parts.get(WebApp.R_CONTROLLER);\r\n    String action = parts.get(WebApp.R_ACTION);\r\n    return add(method, pjoin(\"\", controller, action), dest.controllerClass, action, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "activateOptions",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void activateOptions()\n{\r\n    if (maxEvents > 0) {\r\n        this.eventBuffer = new ArrayDeque<>();\r\n    }\r\n    setFile(new File(this.containerLogDir, containerLogFile).toString());\r\n    setAppend(true);\r\n    super.activateOptions();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "append",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void append(LoggingEvent event)\n{\r\n    if (closed) {\r\n        return;\r\n    }\r\n    if (eventBuffer != null) {\r\n        if (eventBuffer.size() == maxEvents) {\r\n            eventBuffer.removeFirst();\r\n        }\r\n        eventBuffer.addLast(event);\r\n    } else {\r\n        super.append(event);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void flush()\n{\r\n    if (qw != null) {\r\n        qw.flush();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void close()\n{\r\n    if (!closed) {\r\n        closed = true;\r\n        if (eventBuffer != null) {\r\n            for (LoggingEvent event : eventBuffer) {\r\n                super.append(event);\r\n            }\r\n            eventBuffer = null;\r\n        }\r\n        super.close();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getContainerLogDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerLogDir()\n{\r\n    return this.containerLogDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "setContainerLogDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerLogDir(String containerLogDir)\n{\r\n    this.containerLogDir = containerLogDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getContainerLogFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerLogFile()\n{\r\n    return containerLogFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "setContainerLogFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerLogFile(String containerLogFile)\n{\r\n    this.containerLogFile = containerLogFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getTotalLogFileSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTotalLogFileSize()\n{\r\n    return maxEvents * EVENT_SIZE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "setTotalLogFileSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTotalLogFileSize(long logSize)\n{\r\n    maxEvents = (int) (logSize / EVENT_SIZE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getOpCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getOpCode()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getNodeToAttributesMap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, Set<NodeAttribute>> getNodeToAttributesMap(NodesToAttributesMappingRequest request)\n{\r\n    List<NodeToAttributes> attributes = request.getNodesToAttributes();\r\n    Map<String, Set<NodeAttribute>> nodeToAttrMap = new HashMap<>();\r\n    attributes.forEach((v) -> nodeToAttrMap.put(v.getNode(), new HashSet<>(v.getNodeAttributes())));\r\n    return nodeToAttrMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RefreshSuperUserGroupsConfigurationResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubmitApplicationResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FinishApplicationMasterRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = FinishApplicationMasterRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getDiagnostics()\n{\r\n    FinishApplicationMasterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getDiagnostics();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDiagnostics(String diagnostics)\n{\r\n    maybeInitBuilder();\r\n    if (diagnostics == null) {\r\n        builder.clearDiagnostics();\r\n        return;\r\n    }\r\n    builder.setDiagnostics(diagnostics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getTrackingUrl()\n{\r\n    FinishApplicationMasterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getTrackingUrl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setTrackingUrl(String url)\n{\r\n    maybeInitBuilder();\r\n    if (url == null) {\r\n        builder.clearTrackingUrl();\r\n        return;\r\n    }\r\n    builder.setTrackingUrl(url);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FinalApplicationStatus getFinalApplicationStatus()\n{\r\n    FinishApplicationMasterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasFinalApplicationStatus()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getFinalApplicationStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFinalApplicationStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setFinalApplicationStatus(FinalApplicationStatus finalState)\n{\r\n    maybeInitBuilder();\r\n    if (finalState == null) {\r\n        builder.clearFinalApplicationStatus();\r\n        return;\r\n    }\r\n    builder.setFinalApplicationStatus(convertToProtoFormat(finalState));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinalApplicationStatus convertFromProtoFormat(FinalApplicationStatusProto s)\n{\r\n    return ProtoUtils.convertFromProtoFormat(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinalApplicationStatusProto convertToProtoFormat(FinalApplicationStatus s)\n{\r\n    return ProtoUtils.convertToProtoFormat(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CsiAdaptorProtos.NodeUnpublishVolumeResponse getProto()\n{\r\n    Preconditions.checkNotNull(builder);\r\n    return builder.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "getProxy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Object getProxy(Class protocol, InetSocketAddress addr, Configuration conf)\n{\r\n    LOG.debug(\"Creating a HadoopYarnProtoRpc proxy for protocol {}\", protocol);\r\n    return RpcFactoryProvider.getClientFactory(conf).getClient(protocol, 1, addr, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "stopProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stopProxy(Object proxy, Configuration conf)\n{\r\n    RpcFactoryProvider.getClientFactory(conf).stopClient(proxy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "getServer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Server getServer(Class protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig)\n{\r\n    LOG.debug(\"Creating a HadoopYarnProtoRpc server for protocol {} with {}\" + \" handlers\", protocol, numHandlers);\r\n    return RpcFactoryProvider.getServerFactory(conf).getServer(protocol, instance, addr, conf, secretManager, numHandlers, portRangeConfig);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerId != null && !((ContainerIdPBImpl) containerId).getProto().equals(builder.getId())) {\r\n        builder.setId(convertToProtoFormat(this.containerId));\r\n    }\r\n    if (this.nodeId != null && !((NodeIdPBImpl) nodeId).getProto().equals(builder.getNodeId())) {\r\n        builder.setNodeId(convertToProtoFormat(this.nodeId));\r\n    }\r\n    if (this.resource != null) {\r\n        builder.setResource(convertToProtoFormat(this.resource));\r\n    }\r\n    if (this.priority != null && !((PriorityPBImpl) this.priority).getProto().equals(builder.getPriority())) {\r\n        builder.setPriority(convertToProtoFormat(this.priority));\r\n    }\r\n    if (this.containerToken != null && !((TokenPBImpl) this.containerToken).getProto().equals(builder.getContainerToken())) {\r\n        builder.setContainerToken(convertToProtoFormat(this.containerToken));\r\n    }\r\n    if (this.allocationTags != null) {\r\n        builder.clearAllocationTags();\r\n        builder.addAllAllocationTags(this.allocationTags);\r\n    }\r\n    if (this.exposedPorts != null) {\r\n        Gson gson = new Gson();\r\n        String strExposedPorts = gson.toJson(this.exposedPorts);\r\n        builder.setExposedPorts(strExposedPorts);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ContainerProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getId()\n{\r\n    ContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerId != null) {\r\n        return this.containerId;\r\n    }\r\n    if (!p.hasId()) {\r\n        return null;\r\n    }\r\n    this.containerId = convertFromProtoFormat(p.getId());\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeId(NodeId nodeId)\n{\r\n    maybeInitBuilder();\r\n    if (nodeId == null)\r\n        builder.clearNodeId();\r\n    this.nodeId = nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    ContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.nodeId != null) {\r\n        return this.nodeId;\r\n    }\r\n    if (!p.hasNodeId()) {\r\n        return null;\r\n    }\r\n    this.nodeId = convertFromProtoFormat(p.getNodeId());\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setId(ContainerId id)\n{\r\n    maybeInitBuilder();\r\n    if (id == null)\r\n        builder.clearId();\r\n    this.containerId = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getNodeHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getNodeHttpAddress()\n{\r\n    ContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeHttpAddress()) {\r\n        return null;\r\n    }\r\n    return (p.getNodeHttpAddress());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setNodeHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeHttpAddress(String nodeHttpAddress)\n{\r\n    maybeInitBuilder();\r\n    if (nodeHttpAddress == null) {\r\n        builder.clearNodeHttpAddress();\r\n        return;\r\n    }\r\n    builder.setNodeHttpAddress(nodeHttpAddress.intern());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getResource()\n{\r\n    ContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.resource != null) {\r\n        return this.resource;\r\n    }\r\n    if (!p.hasResource()) {\r\n        return null;\r\n    }\r\n    this.resource = convertFromProtoFormat(p.getResource());\r\n    return this.resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResource(Resource resource)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null) {\r\n        builder.clearResource();\r\n    }\r\n    this.resource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<String, List<Map<String, String>>> getExposedPorts()\n{\r\n    ContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.exposedPorts != null) {\r\n        return this.exposedPorts;\r\n    }\r\n    if (!p.hasExposedPorts()) {\r\n        return null;\r\n    }\r\n    String ports = p.getExposedPorts();\r\n    Gson gson = new Gson();\r\n    this.exposedPorts = gson.fromJson(ports, new TypeToken<Map<String, List<Map<String, String>>>>() {\r\n    }.getType());\r\n    return this.exposedPorts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setExposedPorts(Map<String, List<Map<String, String>>> ports)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null) {\r\n        builder.clearExposedPorts();\r\n    }\r\n    this.exposedPorts = ports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    ContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.priority != null) {\r\n        return this.priority;\r\n    }\r\n    if (!p.hasPriority()) {\r\n        return null;\r\n    }\r\n    this.priority = convertFromProtoFormat(p.getPriority());\r\n    return this.priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPriority(Priority priority)\n{\r\n    maybeInitBuilder();\r\n    if (priority == null) {\r\n        builder.clearPriority();\r\n    }\r\n    this.priority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getContainerToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token getContainerToken()\n{\r\n    ContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerToken != null) {\r\n        return this.containerToken;\r\n    }\r\n    if (!p.hasContainerToken()) {\r\n        return null;\r\n    }\r\n    this.containerToken = convertFromProtoFormat(p.getContainerToken());\r\n    return this.containerToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setContainerToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerToken(Token containerToken)\n{\r\n    maybeInitBuilder();\r\n    if (containerToken == null) {\r\n        builder.clearContainerToken();\r\n    }\r\n    this.containerToken = containerToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExecutionType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionType getExecutionType()\n{\r\n    ContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    return convertFromProtoFormat(p.getExecutionType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExecutionType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setExecutionType(ExecutionType executionType)\n{\r\n    maybeInitBuilder();\r\n    builder.setExecutionType(convertToProtoFormat(executionType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAllocationRequestId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAllocationRequestId()\n{\r\n    ContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getAllocationRequestId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAllocationRequestId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocationRequestId(long allocationRequestID)\n{\r\n    maybeInitBuilder();\r\n    builder.setAllocationRequestId(allocationRequestID);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getVersion()\n{\r\n    ContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setVersion(int version)\n{\r\n    maybeInitBuilder();\r\n    builder.setVersion(version);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "initAllocationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initAllocationTags()\n{\r\n    if (this.allocationTags != null) {\r\n        return;\r\n    }\r\n    ContainerProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.allocationTags = new HashSet<>();\r\n    this.allocationTags.addAll(p.getAllocationTagsList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getAllocationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getAllocationTags()\n{\r\n    initAllocationTags();\r\n    return this.allocationTags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setAllocationTags",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocationTags(Set<String> allocationTags)\n{\r\n    maybeInitBuilder();\r\n    builder.clearAllocationTags();\r\n    this.allocationTags = allocationTags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeIdPBImpl convertFromProtoFormat(NodeIdProto p)\n{\r\n    return new NodeIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId t)\n{\r\n    return ((NodeIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource t)\n{\r\n    return ProtoUtils.convertToProtoFormat(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PriorityPBImpl convertFromProtoFormat(PriorityProto p)\n{\r\n    return new PriorityPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PriorityProto convertToProtoFormat(Priority p)\n{\r\n    return ((PriorityPBImpl) p).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenPBImpl convertFromProtoFormat(TokenProto p)\n{\r\n    return new TokenPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token t)\n{\r\n    return ((TokenPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionType convertFromProtoFormat(ExecutionTypeProto e)\n{\r\n    return ProtoUtils.convertFromProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionTypeProto convertToProtoFormat(ExecutionType e)\n{\r\n    return ProtoUtils.convertToProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"Container: [\").append(\"ContainerId: \").append(getId()).append(\", \").append(\"AllocationRequestId: \").append(getAllocationRequestId()).append(\", \").append(\"Version: \").append(getVersion()).append(\", \").append(\"NodeId: \").append(getNodeId()).append(\", \").append(\"NodeHttpAddress: \").append(getNodeHttpAddress()).append(\", \").append(\"Resource: \").append(getResource()).append(\", \").append(\"Priority: \").append(getPriority()).append(\", \").append(\"Token: \").append(getContainerToken()).append(\", \").append(\"ExecutionType: \").append(getExecutionType()).append(\", \").append(\"]\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int compareTo(Container other)\n{\r\n    if (this.getId().compareTo(other.getId()) == 0) {\r\n        if (this.getNodeId().compareTo(other.getNodeId()) == 0) {\r\n            return this.getResource().compareTo(other.getResource());\r\n        } else {\r\n            return this.getNodeId().compareTo(other.getNodeId());\r\n        }\r\n    } else {\r\n        return this.getId().compareTo(other.getId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "initInternal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initInternal(Configuration conf)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "initializeWriter",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void initializeWriter(LogAggregationFileControllerContext context) throws IOException\n{\r\n    this.writer = new LogWriter();\r\n    writer.initialize(this.conf, context.getRemoteNodeTmpLogFileForApp(), context.getUserUgi());\r\n    writer.writeApplicationACLs(context.getAppAcls());\r\n    writer.writeApplicationOwner(context.getUserUgi().getShortUserName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "closeWriter",
  "errType" : [ "DSQuotaExceededException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void closeWriter() throws LogAggregationDFSException\n{\r\n    if (this.writer != null) {\r\n        try {\r\n            this.writer.close();\r\n        } catch (DSQuotaExceededException e) {\r\n            throw new LogAggregationDFSException(e);\r\n        } finally {\r\n            this.writer = null;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(LogKey logKey, LogValue logValue) throws IOException\n{\r\n    this.writer.append(logKey, logValue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "postWrite",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void postWrite(final LogAggregationFileControllerContext record) throws Exception\n{\r\n    if (record.isUploadedLogsInThisCycle() && record.isLogAggregationInRolling()) {\r\n        cleanOldLogs(record.getRemoteNodeLogFileForApp(), record.getNodeId(), record.getUserUgi());\r\n        record.increcleanupOldLogTimes();\r\n    }\r\n    closeWriter();\r\n    final Path renamedPath = record.getRollingMonitorInterval() <= 0 ? record.getRemoteNodeLogFileForApp() : new Path(record.getRemoteNodeLogFileForApp().getParent(), record.getRemoteNodeLogFileForApp().getName() + \"_\" + record.getLogUploadTimeStamp());\r\n    final boolean rename = record.isUploadedLogsInThisCycle();\r\n    try {\r\n        record.getUserUgi().doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n            @Override\r\n            public Object run() throws Exception {\r\n                FileSystem remoteFS = record.getRemoteNodeLogFileForApp().getFileSystem(conf);\r\n                if (rename) {\r\n                    remoteFS.rename(record.getRemoteNodeTmpLogFileForApp(), renamedPath);\r\n                } else {\r\n                    remoteFS.delete(record.getRemoteNodeTmpLogFileForApp(), false);\r\n                }\r\n                return null;\r\n            }\r\n        });\r\n    } catch (Exception e) {\r\n        LOG.error(\"Failed to move temporary log file to final location: [\" + record.getRemoteNodeTmpLogFileForApp() + \"] to [\" + renamedPath + \"]\", e);\r\n        throw new Exception(\"Log uploaded failed for Application: \" + record.getAppId() + \" in NodeManager: \" + LogAggregationUtils.getNodeString(record.getNodeId()) + \" at \" + Times.format(record.getLogUploadTimeStamp()) + \"\\n\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "readAggregatedLogs",
  "errType" : [ "IOException", "EOFException" ],
  "containingMethodsNum" : 34,
  "sourceCodeText" : "boolean readAggregatedLogs(ContainerLogsRequest logRequest, OutputStream os) throws IOException\n{\r\n    boolean findLogs = false;\r\n    boolean createPrintStream = (os == null);\r\n    ApplicationId appId = logRequest.getAppId();\r\n    String nodeId = logRequest.getNodeId();\r\n    List<String> logTypes = new ArrayList<>();\r\n    if (logRequest.getLogTypes() != null && !logRequest.getLogTypes().isEmpty()) {\r\n        logTypes.addAll(logRequest.getLogTypes());\r\n    }\r\n    String containerIdStr = logRequest.getContainerId();\r\n    boolean getAllContainers = (containerIdStr == null || containerIdStr.isEmpty());\r\n    long size = logRequest.getBytes();\r\n    RemoteIterator<FileStatus> nodeFiles = LogAggregationUtils.getRemoteNodeFileDir(conf, appId, logRequest.getAppOwner(), remoteRootLogDir, remoteRootLogDirSuffix);\r\n    byte[] buf = new byte[65535];\r\n    while (nodeFiles != null && nodeFiles.hasNext()) {\r\n        final FileStatus thisNodeFile = nodeFiles.next();\r\n        String nodeName = thisNodeFile.getPath().getName();\r\n        if (nodeName.equals(appId + \".har\")) {\r\n            Path p = new Path(\"har:///\" + thisNodeFile.getPath().toUri().getRawPath());\r\n            nodeFiles = HarFs.get(p.toUri(), conf).listStatusIterator(p);\r\n            continue;\r\n        }\r\n        if ((nodeId == null || nodeName.contains(LogAggregationUtils.getNodeString(nodeId))) && !nodeName.endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\r\n            try (LogReader reader = new LogReader(conf, thisNodeFile.getPath())) {\r\n                DataInputStream valueStream;\r\n                LogKey key = new LogKey();\r\n                valueStream = reader.next(key);\r\n                while (valueStream != null) {\r\n                    if (getAllContainers || (key.toString().equals(containerIdStr))) {\r\n                        if (createPrintStream) {\r\n                            os = LogToolUtils.createPrintStream(logRequest.getOutputLocalDir(), thisNodeFile.getPath().getName(), key.toString());\r\n                        }\r\n                        try {\r\n                            while (true) {\r\n                                try {\r\n                                    String fileType = valueStream.readUTF();\r\n                                    String fileLengthStr = valueStream.readUTF();\r\n                                    long fileLength = Long.parseLong(fileLengthStr);\r\n                                    if (logTypes == null || logTypes.isEmpty() || logTypes.contains(fileType)) {\r\n                                        LogToolUtils.outputContainerLog(key.toString(), nodeName, fileType, fileLength, size, Times.format(thisNodeFile.getModificationTime()), valueStream, os, buf, ContainerLogAggregationType.AGGREGATED);\r\n                                        byte[] b = aggregatedLogSuffix(fileType).getBytes(Charset.forName(\"UTF-8\"));\r\n                                        os.write(b, 0, b.length);\r\n                                        findLogs = true;\r\n                                    } else {\r\n                                        long totalSkipped = 0;\r\n                                        long currSkipped = 0;\r\n                                        while (currSkipped != -1 && totalSkipped < fileLength) {\r\n                                            currSkipped = valueStream.skip(fileLength - totalSkipped);\r\n                                            totalSkipped += currSkipped;\r\n                                        }\r\n                                    }\r\n                                } catch (EOFException eof) {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        } finally {\r\n                            os.flush();\r\n                            if (createPrintStream) {\r\n                                closePrintStream(os);\r\n                            }\r\n                        }\r\n                        if (!getAllContainers) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    key = new LogKey();\r\n                    valueStream = reader.next(key);\r\n                }\r\n            } catch (IOException ex) {\r\n                LOG.error(\"Skipping empty or corrupt file \" + thisNodeFile.getPath(), ex);\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n    return findLogs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "getLogMetaFilesOfNode",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Map<String, List<ContainerLogFileInfo>> getLogMetaFilesOfNode(ExtendedLogMetaRequest logRequest, FileStatus currentNodeFile, ApplicationId appId) throws IOException\n{\r\n    Map<String, List<ContainerLogFileInfo>> logMetaFiles = new HashMap<>();\r\n    Path nodePath = currentNodeFile.getPath();\r\n    try (LogReader reader = new LogReader(conf, nodePath)) {\r\n        DataInputStream valueStream;\r\n        LogKey key = new LogKey();\r\n        valueStream = reader.next(key);\r\n        while (valueStream != null) {\r\n            if (logRequest.getContainerId() == null || logRequest.getContainerId().equals(key.toString())) {\r\n                logMetaFiles.put(key.toString(), new ArrayList<>());\r\n                fillMetaFiles(currentNodeFile, valueStream, logMetaFiles.get(key.toString()));\r\n            }\r\n            key = new LogKey();\r\n            valueStream = reader.next(key);\r\n        }\r\n    }\r\n    return logMetaFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "fillMetaFiles",
  "errType" : [ "EOFException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void fillMetaFiles(FileStatus currentNodeFile, DataInputStream valueStream, List<ContainerLogFileInfo> logMetaFiles) throws IOException\n{\r\n    while (true) {\r\n        try {\r\n            Pair<String, String> logMeta = LogReader.readContainerMetaDataAndSkipData(valueStream);\r\n            ContainerLogFileInfo logMetaFile = new ContainerLogFileInfo();\r\n            logMetaFile.setLastModifiedTime(Long.toString(currentNodeFile.getModificationTime()));\r\n            logMetaFile.setFileName(logMeta.getFirst());\r\n            logMetaFile.setFileSize(logMeta.getSecond());\r\n            logMetaFiles.add(logMetaFile);\r\n        } catch (EOFException eof) {\r\n            break;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "readAggregatedLogsMeta",
  "errType" : [ "IOException", "EOFException" ],
  "containingMethodsNum" : 25,
  "sourceCodeText" : "List<ContainerLogMeta> readAggregatedLogsMeta(ContainerLogsRequest logRequest) throws IOException\n{\r\n    List<ContainerLogMeta> containersLogMeta = new ArrayList<>();\r\n    String containerIdStr = logRequest.getContainerId();\r\n    String nodeId = logRequest.getNodeId();\r\n    ApplicationId appId = logRequest.getAppId();\r\n    String appOwner = logRequest.getAppOwner();\r\n    ApplicationAttemptId appAttemptId = logRequest.getAppAttemptId();\r\n    boolean getAllContainers = (containerIdStr == null && appAttemptId == null);\r\n    boolean getOnlyOneContainer = containerIdStr != null;\r\n    String nodeIdStr = (nodeId == null) ? null : LogAggregationUtils.getNodeString(nodeId);\r\n    RemoteIterator<FileStatus> nodeFiles = LogAggregationUtils.getRemoteNodeFileDir(conf, appId, appOwner, remoteRootLogDir, remoteRootLogDirSuffix);\r\n    if (nodeFiles == null) {\r\n        throw new IOException(\"There is no available log file for \" + \"application:\" + appId);\r\n    }\r\n    while (nodeFiles.hasNext()) {\r\n        FileStatus thisNodeFile = nodeFiles.next();\r\n        if (thisNodeFile.getPath().getName().equals(appId + \".har\")) {\r\n            Path p = new Path(\"har:///\" + thisNodeFile.getPath().toUri().getRawPath());\r\n            nodeFiles = HarFs.get(p.toUri(), conf).listStatusIterator(p);\r\n            continue;\r\n        }\r\n        if (nodeIdStr != null) {\r\n            if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\r\n                continue;\r\n            }\r\n        }\r\n        if (!thisNodeFile.getPath().getName().endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\r\n            try (LogReader reader = new LogReader(conf, thisNodeFile.getPath())) {\r\n                DataInputStream valueStream;\r\n                LogKey key = new LogKey();\r\n                valueStream = reader.next(key);\r\n                while (valueStream != null) {\r\n                    if (getAllContainers || (key.toString().equals(containerIdStr)) || belongsToAppAttempt(appAttemptId, key.toString())) {\r\n                        ContainerLogMeta containerLogMeta = new ContainerLogMeta(key.toString(), thisNodeFile.getPath().getName());\r\n                        while (true) {\r\n                            try {\r\n                                Pair<String, String> logMeta = LogReader.readContainerMetaDataAndSkipData(valueStream);\r\n                                containerLogMeta.addLogMeta(logMeta.getFirst(), logMeta.getSecond(), Times.format(thisNodeFile.getModificationTime()));\r\n                            } catch (EOFException eof) {\r\n                                break;\r\n                            }\r\n                        }\r\n                        containersLogMeta.add(containerLogMeta);\r\n                        if (getOnlyOneContainer) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    key = new LogKey();\r\n                    valueStream = reader.next(key);\r\n                }\r\n            } catch (IOException ex) {\r\n                LOG.error(\"Skipping empty or corrupt file \" + thisNodeFile.getPath(), ex);\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n    return containersLogMeta;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "renderAggregatedLogsBlock",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void renderAggregatedLogsBlock(Block html, ViewContext context)\n{\r\n    TFileAggregatedLogsBlock block = new TFileAggregatedLogsBlock(context, conf, remoteRootLogDir, remoteRootLogDirSuffix);\r\n    block.render(html);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "getApplicationOwner",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getApplicationOwner(Path aggregatedLog, ApplicationId appId) throws IOException\n{\r\n    createTFileLogReader(aggregatedLog);\r\n    return this.tfReader.getLogReader().getApplicationOwner();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "getApplicationAcls",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<ApplicationAccessType, String> getApplicationAcls(Path aggregatedLog, ApplicationId appId) throws IOException\n{\r\n    createTFileLogReader(aggregatedLog);\r\n    return this.tfReader.getLogReader().getApplicationAcls();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller\\tfile",
  "methodName" : "createTFileLogReader",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createTFileLogReader(Path aggregatedLog) throws IOException\n{\r\n    if (this.tfReader == null || !this.tfReader.getAggregatedLogPath().equals(aggregatedLog)) {\r\n        LogReader logReader = new LogReader(conf, aggregatedLog);\r\n        this.tfReader = new TFileLogReader(logReader, aggregatedLog);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void render(Page.HTML<__> html)\n{\r\n    set(JQueryUI.ACCORDION_ID, \"msg\");\r\n    String title = \"Sorry, got error \" + status();\r\n    html.title(title).link(root_url(\"static\", \"yarn.css\")).__(JQueryUI.class).style(\"#msg { margin: 1em auto; width: 88%; }\", \"#msg h1 { padding: 0.2em 1.5em; font: bold 1.3em serif; }\").div(\"#msg\").h1(title).div().__(\"Please consult\").a(\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\", \"RFC 2616\").__(\" for meanings of the error code.\").__().h1(\"Error Details\").pre().__(errorDetails()).__().__().__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "errorDetails",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String errorDetails()\n{\r\n    if (!$(ERROR_DETAILS).isEmpty()) {\r\n        return $(ERROR_DETAILS);\r\n    }\r\n    if (error() != null) {\r\n        return toStackTrace(error(), 1024 * 64);\r\n    }\r\n    return \"No exception was thrown.\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "toStackTrace",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String toStackTrace(Throwable error, int cutoff)\n{\r\n    CharArrayWriter buffer = new CharArrayWriter(8 * 1024);\r\n    error.printStackTrace(new PrintWriter(buffer));\r\n    return buffer.size() < cutoff ? buffer.toString() : buffer.toString().substring(0, cutoff);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationSubmissionResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationListRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getQueue()\n{\r\n    ReservationListRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasQueue()) {\r\n        return null;\r\n    }\r\n    return (p.getQueue());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueue(String queue)\n{\r\n    maybeInitBuilder();\r\n    if (queue == null) {\r\n        builder.clearQueue();\r\n        return;\r\n    }\r\n    builder.setQueue(queue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getReservationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getReservationId()\n{\r\n    ReservationListRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasReservationId()) {\r\n        return null;\r\n    }\r\n    return (p.getReservationId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setReservationId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setReservationId(String reservationId)\n{\r\n    maybeInitBuilder();\r\n    if (reservationId == null) {\r\n        builder.clearReservationId();\r\n        return;\r\n    }\r\n    builder.setReservationId(reservationId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getStartTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getStartTime()\n{\r\n    ReservationListRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasStartTime()) {\r\n        return 0;\r\n    }\r\n    return (p.getStartTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setStartTime",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setStartTime(long startTime)\n{\r\n    maybeInitBuilder();\r\n    if (startTime <= 0) {\r\n        builder.clearStartTime();\r\n        return;\r\n    }\r\n    builder.setStartTime(startTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getEndTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getEndTime()\n{\r\n    ReservationListRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasEndTime()) {\r\n        return Long.MAX_VALUE;\r\n    }\r\n    return (p.getEndTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setEndTime",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setEndTime(long endTime)\n{\r\n    maybeInitBuilder();\r\n    if (endTime < 0) {\r\n        builder.setEndTime(Long.MAX_VALUE);\r\n        return;\r\n    }\r\n    builder.setEndTime(endTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getIncludeResourceAllocations",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean getIncludeResourceAllocations()\n{\r\n    ReservationListRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasIncludeResourceAllocations()) {\r\n        return false;\r\n    }\r\n    return (p.getIncludeResourceAllocations());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setIncludeResourceAllocations",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setIncludeResourceAllocations(boolean includeReservationAllocations)\n{\r\n    maybeInitBuilder();\r\n    builder.setIncludeResourceAllocations(includeReservationAllocations);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReservationListRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationListResponseProto getProto()\n{\r\n    if (viaProto) {\r\n        mergeLocalToProto();\r\n    } else {\r\n        proto = builder.build();\r\n    }\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReservationListResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getReservationAllocationState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<ReservationAllocationState> getReservationAllocationState()\n{\r\n    initReservations();\r\n    mergeLocalToProto();\r\n    return this.reservations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setReservationAllocationState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservationAllocationState(List<ReservationAllocationState> newReservations)\n{\r\n    if (newReservations == null) {\r\n        builder.clearReservations();\r\n        return;\r\n    }\r\n    reservations = newReservations;\r\n    mergeLocalToProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.reservations != null) {\r\n        int size = reservations.size();\r\n        builder.clearReservations();\r\n        for (int i = 0; i < size; i++) {\r\n            builder.addReservations(i, convertToProtoFormat(reservations.get(i)));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationAllocationStatePBImpl convertFromProtoFormat(ReservationAllocationStateProto p)\n{\r\n    return new ReservationAllocationStatePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationAllocationStateProto convertToProtoFormat(ReservationAllocationState r)\n{\r\n    return ((ReservationAllocationStatePBImpl) r).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initReservations",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initReservations()\n{\r\n    if (this.reservations != null) {\r\n        return;\r\n    }\r\n    ReservationListResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ReservationAllocationStateProto> reservationProtos = p.getReservationsList();\r\n    reservations = new ArrayList<>();\r\n    for (ReservationAllocationStateProto r : reservationProtos) {\r\n        reservations.add(convertFromProtoFormat(r));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SecretKey getMasterKey(ApplicationAttemptId applicationAttemptId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "createPassword",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] createPassword(ClientToAMTokenIdentifier identifier)\n{\r\n    return createPassword(identifier.getBytes(), getMasterKey(identifier.getApplicationAttemptID()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "retrievePassword",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] retrievePassword(ClientToAMTokenIdentifier identifier) throws SecretManager.InvalidToken\n{\r\n    SecretKey masterKey = getMasterKey(identifier.getApplicationAttemptID());\r\n    if (masterKey == null) {\r\n        throw new SecretManager.InvalidToken(\"Illegal client-token!\");\r\n    }\r\n    return createPassword(identifier.getBytes(), masterKey);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "createIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ClientToAMTokenIdentifier createIdentifier()\n{\r\n    return new ClientToAMTokenIdentifier();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationDeleteRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.reservationId != null) {\r\n        builder.setReservationId(convertToProtoFormat(this.reservationId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReservationDeleteRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getReservationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationId getReservationId()\n{\r\n    ReservationDeleteRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (reservationId != null) {\r\n        return reservationId;\r\n    }\r\n    if (!p.hasReservationId()) {\r\n        return null;\r\n    }\r\n    reservationId = convertFromProtoFormat(p.getReservationId());\r\n    return reservationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setReservationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setReservationId(ReservationId reservationId)\n{\r\n    maybeInitBuilder();\r\n    if (reservationId == null) {\r\n        builder.clearReservationId();\r\n        return;\r\n    }\r\n    this.reservationId = reservationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationIdPBImpl convertFromProtoFormat(ReservationIdProto p)\n{\r\n    return new ReservationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationIdProto convertToProtoFormat(ReservationId t)\n{\r\n    return ((ReservationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n        this.proxy = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "use",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "UseSharedCacheResourceResponse use(UseSharedCacheResourceRequest request) throws YarnException, IOException\n{\r\n    UseSharedCacheResourceRequestProto requestProto = ((UseSharedCacheResourceRequestPBImpl) request).getProto();\r\n    try {\r\n        return new UseSharedCacheResourceResponsePBImpl(proxy.use(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\client",
  "methodName" : "release",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ReleaseSharedCacheResourceResponse release(ReleaseSharedCacheResourceRequest request) throws YarnException, IOException\n{\r\n    ReleaseSharedCacheResourceRequestProto requestProto = ((ReleaseSharedCacheResourceRequestPBImpl) request).getProto();\r\n    try {\r\n        return new ReleaseSharedCacheResourceResponsePBImpl(proxy.release(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "use",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UseSharedCacheResourceResponseProto use(RpcController controller, UseSharedCacheResourceRequestProto proto) throws ServiceException\n{\r\n    UseSharedCacheResourceRequestPBImpl request = new UseSharedCacheResourceRequestPBImpl(proto);\r\n    try {\r\n        UseSharedCacheResourceResponse response = real.use(request);\r\n        return ((UseSharedCacheResourceResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "release",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReleaseSharedCacheResourceResponseProto release(RpcController controller, ReleaseSharedCacheResourceRequestProto proto) throws ServiceException\n{\r\n    ReleaseSharedCacheResourceRequestPBImpl request = new ReleaseSharedCacheResourceRequestPBImpl(proto);\r\n    try {\r\n        ReleaseSharedCacheResourceResponse response = real.release(request);\r\n        return ((ReleaseSharedCacheResourceResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createRMProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T createRMProxy(final Configuration configuration, final Class<T> protocol) throws IOException\n{\r\n    ClientRMProxy<T> clientRMProxy = new ClientRMProxy<>();\r\n    return createRMProxy(configuration, protocol, clientRMProxy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "setAMRMTokenService",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAMRMTokenService(final Configuration conf) throws IOException\n{\r\n    for (Token<? extends TokenIdentifier> token : UserGroupInformation.getCurrentUser().getTokens()) {\r\n        if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\r\n            token.setService(getAMRMTokenService(conf));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getRMAddress",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "InetSocketAddress getRMAddress(YarnConfiguration conf, Class<?> protocol) throws IOException\n{\r\n    if (protocol == ApplicationClientProtocol.class) {\r\n        return conf.getSocketAddr(YarnConfiguration.RM_ADDRESS, YarnConfiguration.DEFAULT_RM_ADDRESS, YarnConfiguration.DEFAULT_RM_PORT);\r\n    } else if (protocol == ResourceManagerAdministrationProtocol.class) {\r\n        return conf.getSocketAddr(YarnConfiguration.RM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_RM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_RM_ADMIN_PORT);\r\n    } else if (protocol == ApplicationMasterProtocol.class) {\r\n        setAMRMTokenService(conf);\r\n        return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\r\n    } else {\r\n        String message = \"Unsupported protocol found when creating the proxy \" + \"connection to ResourceManager: \" + ((protocol != null) ? protocol.getName() : \"null\");\r\n        LOG.error(message);\r\n        throw new IllegalStateException(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "checkAllowedProtocols",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void checkAllowedProtocols(Class<?> protocol)\n{\r\n    Preconditions.checkArgument(protocol.isAssignableFrom(ClientRMProtocols.class), \"RM does not support this client protocol\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getRMDelegationTokenService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Text getRMDelegationTokenService(Configuration conf)\n{\r\n    return getTokenService(conf, YarnConfiguration.RM_ADDRESS, YarnConfiguration.DEFAULT_RM_ADDRESS, YarnConfiguration.DEFAULT_RM_PORT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getAMRMTokenService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Text getAMRMTokenService(Configuration conf)\n{\r\n    return getTokenService(conf, YarnConfiguration.RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getTokenService",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Text getTokenService(Configuration conf, String address, String defaultAddr, int defaultPort)\n{\r\n    if (HAUtil.isHAEnabled(conf)) {\r\n        ArrayList<String> services = new ArrayList<String>();\r\n        YarnConfiguration yarnConf = new YarnConfiguration(conf);\r\n        for (String rmId : HAUtil.getRMHAIds(conf)) {\r\n            yarnConf.set(YarnConfiguration.RM_HA_ID, rmId);\r\n            services.add(SecurityUtil.buildTokenService(yarnConf.getSocketAddr(address, defaultAddr, defaultPort)).toString());\r\n        }\r\n        return new Text(Joiner.on(',').join(services));\r\n    }\r\n    return SecurityUtil.buildTokenService(conf.getSocketAddr(address, defaultAddr, defaultPort));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CollectorInfoProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = CollectorInfoProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCollectorAddr",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getCollectorAddr()\n{\r\n    CollectorInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.collectorAddr == null && p.hasCollectorAddr()) {\r\n        this.collectorAddr = p.getCollectorAddr();\r\n    }\r\n    return this.collectorAddr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCollectorAddr",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCollectorAddr(String addr)\n{\r\n    maybeInitBuilder();\r\n    if (collectorAddr == null) {\r\n        builder.clearCollectorAddr();\r\n    }\r\n    this.collectorAddr = addr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCollectorToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token getCollectorToken()\n{\r\n    CollectorInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.collectorToken != null) {\r\n        return this.collectorToken;\r\n    }\r\n    if (!p.hasCollectorToken()) {\r\n        return null;\r\n    }\r\n    this.collectorToken = convertFromProtoFormat(p.getCollectorToken());\r\n    return this.collectorToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setCollectorToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCollectorToken(Token token)\n{\r\n    maybeInitBuilder();\r\n    if (token == null) {\r\n        builder.clearCollectorToken();\r\n    }\r\n    this.collectorToken = token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenPBImpl convertFromProtoFormat(TokenProto p)\n{\r\n    return new TokenPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token t)\n{\r\n    return ((TokenPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.collectorAddr != null) {\r\n        builder.setCollectorAddr(this.collectorAddr);\r\n    }\r\n    if (this.collectorToken != null) {\r\n        builder.setCollectorToken(convertToProtoFormat(this.collectorToken));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(OutputStream os, CommonNodeLabelsManager mgr) throws IOException\n{\r\n    ((AddToClusterNodeLabelsRequestPBImpl) AddToClusterNodeLabelsRequest.newInstance(labels)).getProto().writeDelimitedTo(os);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void recover(InputStream is, CommonNodeLabelsManager mgr) throws IOException\n{\r\n    labels = new AddToClusterNodeLabelsRequestPBImpl(YarnServerResourceManagerServiceProtos.AddToClusterNodeLabelsRequestProto.parseDelimitedFrom(is)).getNodeLabels();\r\n    mgr.addToCluserNodeLabels(labels);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "setLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AddClusterLabelOp setLabels(List<NodeLabel> nodeLabels)\n{\r\n    this.labels = nodeLabels;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<NodeLabel> getLabels()\n{\r\n    return labels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getOpCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getOpCode()\n{\r\n    return OPCODE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "allocate",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AllocateResponseProto allocate(RpcController arg0, AllocateRequestProto proto) throws ServiceException\n{\r\n    AllocateRequestPBImpl request = new AllocateRequestPBImpl(proto);\r\n    try {\r\n        AllocateResponse response = real.allocate(request);\r\n        return ((AllocateResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "finishApplicationMaster",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FinishApplicationMasterResponseProto finishApplicationMaster(RpcController arg0, FinishApplicationMasterRequestProto proto) throws ServiceException\n{\r\n    FinishApplicationMasterRequestPBImpl request = new FinishApplicationMasterRequestPBImpl(proto);\r\n    try {\r\n        FinishApplicationMasterResponse response = real.finishApplicationMaster(request);\r\n        return ((FinishApplicationMasterResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "registerApplicationMaster",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RegisterApplicationMasterResponseProto registerApplicationMaster(RpcController arg0, RegisterApplicationMasterRequestProto proto) throws ServiceException\n{\r\n    RegisterApplicationMasterRequestPBImpl request = new RegisterApplicationMasterRequestPBImpl(proto);\r\n    try {\r\n        RegisterApplicationMasterResponse response = real.registerApplicationMaster(request);\r\n        return ((RegisterApplicationMasterResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "getProxy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Object getProxy(Class protocol, InetSocketAddress addr, Configuration conf)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "stopProxy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void stopProxy(Object proxy, Configuration conf)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "getServer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Server getServer(Class protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers, String portRangeConfig)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "getServer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Server getServer(Class protocol, Object instance, InetSocketAddress addr, Configuration conf, SecretManager<? extends TokenIdentifier> secretManager, int numHandlers)\n{\r\n    return getServer(protocol, instance, addr, conf, secretManager, numHandlers, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\ipc",
  "methodName" : "create",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "YarnRPC create(Configuration conf)\n{\r\n    LOG.debug(\"Creating YarnRPC for {}\", conf.get(YarnConfiguration.IPC_RPC_IMPL));\r\n    String clazzName = conf.get(YarnConfiguration.IPC_RPC_IMPL);\r\n    if (clazzName == null) {\r\n        clazzName = YarnConfiguration.DEFAULT_IPC_RPC_IMPL;\r\n    }\r\n    try {\r\n        return (YarnRPC) Class.forName(clazzName).newInstance();\r\n    } catch (Exception e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getApplicationAttemptID",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptID()\n{\r\n    if (!proto.hasAppAttemptId()) {\r\n        return null;\r\n    }\r\n    return new ApplicationAttemptIdPBImpl(proto.getAppAttemptId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getClientName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getClientName()\n{\r\n    return proto.getClientName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ClientToAMTokenIdentifierProto getProto()\n{\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    out.write(proto.toByteArray());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    proto = ClientToAMTokenIdentifierProto.parseFrom((DataInputStream) in);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getKind",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Text getKind()\n{\r\n    return KIND_NAME;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UserGroupInformation getUser()\n{\r\n    String clientName = getClientName();\r\n    if (clientName == null) {\r\n        return null;\r\n    }\r\n    return UserGroupInformation.createRemoteUser(clientName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\security\\client",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "init",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void init(Configuration conf, RMProxy<T> proxy, Class<T> protocol)\n{\r\n    this.protocol = protocol;\r\n    try {\r\n        YarnConfiguration yarnConf = new YarnConfiguration(conf);\r\n        InetSocketAddress rmAddress = proxy.getRMAddress(yarnConf, protocol);\r\n        LOG.info(\"Connecting to ResourceManager at {}\", rmAddress);\r\n        this.proxy = proxy.getProxy(yarnConf, protocol, rmAddress);\r\n    } catch (IOException ioe) {\r\n        LOG.error(\"Unable to create proxy to the ResourceManager \", ioe);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getInterface",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<T> getInterface()\n{\r\n    return protocol;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "getProxy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ProxyInfo<T> getProxy()\n{\r\n    return new ProxyInfo<T>(proxy, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "performFailover",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void performFailover(T currentProxy)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    RPC.stopProxy(proxy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void init(String message)\n{\r\n    maybeInitBuilder();\r\n    builder.setMessage(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void init(Throwable t)\n{\r\n    maybeInitBuilder();\r\n    if (t == null) {\r\n        return;\r\n    }\r\n    if (t.getCause() == null) {\r\n    } else {\r\n        builder.setCause(new SerializedExceptionPBImpl(t.getCause()).getProto());\r\n    }\r\n    StringWriter sw = new StringWriter();\r\n    PrintWriter pw = new PrintWriter(sw);\r\n    t.printStackTrace(pw);\r\n    pw.close();\r\n    if (sw.toString() != null)\r\n        builder.setTrace(sw.toString());\r\n    if (t.getMessage() != null)\r\n        builder.setMessage(t.getMessage());\r\n    builder.setClassName(t.getClass().getCanonicalName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void init(String message, Throwable t)\n{\r\n    init(t);\r\n    if (message != null)\r\n        builder.setMessage(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "deSerialize",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Throwable deSerialize()\n{\r\n    SerializedException cause = getCause();\r\n    SerializedExceptionProtoOrBuilder p = viaProto ? proto : builder;\r\n    Class<?> realClass = null;\r\n    try {\r\n        realClass = Class.forName(p.getClassName());\r\n    } catch (ClassNotFoundException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n    Class classType = null;\r\n    if (YarnException.class.isAssignableFrom(realClass)) {\r\n        classType = YarnException.class;\r\n    } else if (IOException.class.isAssignableFrom(realClass)) {\r\n        classType = IOException.class;\r\n    } else if (RuntimeException.class.isAssignableFrom(realClass)) {\r\n        classType = RuntimeException.class;\r\n    } else {\r\n        classType = Throwable.class;\r\n    }\r\n    return instantiateException(realClass.asSubclass(classType), getMessage(), cause == null ? null : cause.deSerialize());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getMessage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getMessage()\n{\r\n    SerializedExceptionProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getMessage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRemoteTrace",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getRemoteTrace()\n{\r\n    SerializedExceptionProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getTrace();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getCause",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SerializedException getCause()\n{\r\n    SerializedExceptionProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (p.hasCause()) {\r\n        return new SerializedExceptionPBImpl(p.getCause());\r\n    } else {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SerializedExceptionProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SerializedExceptionProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "instantiateExceptionImpl",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "T instantiateExceptionImpl(String message, Class<? extends T> cls, Throwable cause) throws NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException\n{\r\n    Constructor<? extends T> cn;\r\n    T ex = null;\r\n    cn = cls.getConstructor(message == null ? new Class[0] : new Class[] { String.class });\r\n    cn.setAccessible(true);\r\n    ex = message == null ? cn.newInstance() : cn.newInstance(message);\r\n    ex.initCause(cause);\r\n    return ex;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "instantiateException",
  "errType" : [ "SecurityException", "NoSuchMethodException", "IllegalArgumentException", "InstantiationException", "IllegalAccessException", "InvocationTargetException", "NoSuchMethodException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "T instantiateException(Class<? extends T> cls, String message, Throwable cause)\n{\r\n    T ex = null;\r\n    try {\r\n        try {\r\n            ex = instantiateExceptionImpl(message, cls, cause);\r\n        } catch (NoSuchMethodException e) {\r\n            ex = instantiateExceptionImpl(null, cls, cause);\r\n        }\r\n    } catch (SecurityException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (NoSuchMethodException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (IllegalArgumentException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (InstantiationException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (IllegalAccessException e) {\r\n        throw new YarnRuntimeException(e);\r\n    } catch (InvocationTargetException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n    return ex;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetContainersRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (applicationAttemptId != null) {\r\n        builder.setApplicationAttemptId(convertToProtoFormat(this.applicationAttemptId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetContainersRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    if (this.applicationAttemptId != null) {\r\n        return this.applicationAttemptId;\r\n    }\r\n    GetContainersRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationAttemptId()) {\r\n        return null;\r\n    }\r\n    this.applicationAttemptId = convertFromProtoFormat(p.getApplicationAttemptId());\r\n    return this.applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationAttemptId(ApplicationAttemptId applicationAttemptId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationAttemptId == null) {\r\n        builder.clearApplicationAttemptId();\r\n    }\r\n    this.applicationAttemptId = applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptIdPBImpl convertFromProtoFormat(ApplicationAttemptIdProto p)\n{\r\n    return new ApplicationAttemptIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptIdProto convertToProtoFormat(ApplicationAttemptId t)\n{\r\n    return ((ApplicationAttemptIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getFileControllerForWrite",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationFileController getFileControllerForWrite()\n{\r\n    return controllers.getFirst();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getFileControllerForRead",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "LogAggregationFileController getFileControllerForRead(ApplicationId appId, String appOwner) throws IOException\n{\r\n    StringBuilder diagnosticsMsg = new StringBuilder();\r\n    if (LogAggregationUtils.isOlderPathEnabled(conf)) {\r\n        for (LogAggregationFileController fileController : controllers) {\r\n            try {\r\n                Path remoteAppLogDir = fileController.getOlderRemoteAppLogDir(appId, appOwner);\r\n                if (LogAggregationUtils.getNodeFiles(conf, remoteAppLogDir, appId, appOwner).hasNext()) {\r\n                    return fileController;\r\n                }\r\n            } catch (Exception ex) {\r\n                diagnosticsMsg.append(ex.getMessage() + \"\\n\");\r\n                continue;\r\n            }\r\n        }\r\n    }\r\n    for (LogAggregationFileController fileController : controllers) {\r\n        try {\r\n            Path remoteAppLogDir = fileController.getRemoteAppLogDir(appId, appOwner);\r\n            if (LogAggregationUtils.getNodeFiles(conf, remoteAppLogDir, appId, appOwner).hasNext()) {\r\n                return fileController;\r\n            }\r\n        } catch (Exception ex) {\r\n            diagnosticsMsg.append(ex.getMessage() + \"\\n\");\r\n            continue;\r\n        }\r\n    }\r\n    throw new IOException(diagnosticsMsg.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "validateAggregatedFileControllerName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean validateAggregatedFileControllerName(String name)\n{\r\n    if (name == null || name.trim().isEmpty()) {\r\n        return false;\r\n    }\r\n    return p.matcher(name).matches();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\logaggregation\\filecontroller",
  "methodName" : "getConfiguredLogAggregationFileControllerList",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LinkedList<LogAggregationFileController> getConfiguredLogAggregationFileControllerList()\n{\r\n    return this.controllers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(OutputStream os, NodeAttributesManager mgr) throws IOException\n{\r\n    ((NodesToAttributesMappingRequestPBImpl) NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.ADD, attributes, false)).getProto().writeDelimitedTo(os);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void recover(InputStream is, NodeAttributesManager mgr) throws IOException\n{\r\n    NodesToAttributesMappingRequest request = new NodesToAttributesMappingRequestPBImpl(YarnServerResourceManagerServiceProtos.NodesToAttributesMappingRequestProto.parseDelimitedFrom(is));\r\n    mgr.addNodeAttributes(getNodeToAttributesMap(request));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "setAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AddNodeToAttributeLogOp setAttributes(List<NodeToAttributes> attributesList)\n{\r\n    this.attributes = attributesList;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getOpCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getOpCode()\n{\r\n    return OPCODE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "EnhancedHeadroomProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = EnhancedHeadroomProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setTotalPendingCount",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setTotalPendingCount(int totalPendingCount)\n{\r\n    maybeInitBuilder();\r\n    if (totalPendingCount == 0) {\r\n        builder.clearTotalPendingCount();\r\n        return;\r\n    }\r\n    builder.setTotalPendingCount(totalPendingCount);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getTotalPendingCount",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getTotalPendingCount()\n{\r\n    EnhancedHeadroomProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasTotalPendingCount()) ? p.getTotalPendingCount() : 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setTotalActiveCores",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setTotalActiveCores(int totalActiveCores)\n{\r\n    maybeInitBuilder();\r\n    if (totalActiveCores == 0) {\r\n        builder.clearTotalActiveCores();\r\n        return;\r\n    }\r\n    builder.setTotalActiveCores(totalActiveCores);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getTotalActiveCores",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getTotalActiveCores()\n{\r\n    EnhancedHeadroomProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasTotalActiveCores()) ? p.getTotalActiveCores() : 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(OutputStream os, CommonNodeLabelsManager mgr) throws IOException\n{\r\n    ((ReplaceLabelsOnNodeRequestPBImpl) ReplaceLabelsOnNodeRequest.newInstance(nodeToLabels)).getProto().writeDelimitedTo(os);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void recover(InputStream is, CommonNodeLabelsManager mgr) throws IOException\n{\r\n    nodeToLabels = new ReplaceLabelsOnNodeRequestPBImpl(YarnServerResourceManagerServiceProtos.ReplaceLabelsOnNodeRequestProto.parseDelimitedFrom(is)).getNodeToLabels();\r\n    if (mgr.isCentralizedConfiguration()) {\r\n        mgr.replaceLabelsOnNode(nodeToLabels);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "setNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeToLabelOp setNodeToLabels(Map<NodeId, Set<String>> nodeToLabelsList)\n{\r\n    this.nodeToLabels = nodeToLabelsList;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<NodeId, Set<String>> getNodeToLabels()\n{\r\n    return nodeToLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getOpCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getOpCode()\n{\r\n    return OPCODE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "failApplicationAttempt",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FailApplicationAttemptResponseProto failApplicationAttempt(RpcController arg0, FailApplicationAttemptRequestProto proto) throws ServiceException\n{\r\n    FailApplicationAttemptRequestPBImpl request = new FailApplicationAttemptRequestPBImpl(proto);\r\n    try {\r\n        FailApplicationAttemptResponse response = real.failApplicationAttempt(request);\r\n        return ((FailApplicationAttemptResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "forceKillApplication",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "KillApplicationResponseProto forceKillApplication(RpcController arg0, KillApplicationRequestProto proto) throws ServiceException\n{\r\n    KillApplicationRequestPBImpl request = new KillApplicationRequestPBImpl(proto);\r\n    try {\r\n        KillApplicationResponse response = real.forceKillApplication(request);\r\n        return ((KillApplicationResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getApplicationReport",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationReportResponseProto getApplicationReport(RpcController arg0, GetApplicationReportRequestProto proto) throws ServiceException\n{\r\n    GetApplicationReportRequestPBImpl request = new GetApplicationReportRequestPBImpl(proto);\r\n    try {\r\n        GetApplicationReportResponse response = real.getApplicationReport(request);\r\n        return ((GetApplicationReportResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getClusterMetrics",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetClusterMetricsResponseProto getClusterMetrics(RpcController arg0, GetClusterMetricsRequestProto proto) throws ServiceException\n{\r\n    GetClusterMetricsRequestPBImpl request = new GetClusterMetricsRequestPBImpl(proto);\r\n    try {\r\n        GetClusterMetricsResponse response = real.getClusterMetrics(request);\r\n        return ((GetClusterMetricsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getNewApplication",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNewApplicationResponseProto getNewApplication(RpcController arg0, GetNewApplicationRequestProto proto) throws ServiceException\n{\r\n    GetNewApplicationRequestPBImpl request = new GetNewApplicationRequestPBImpl(proto);\r\n    try {\r\n        GetNewApplicationResponse response = real.getNewApplication(request);\r\n        return ((GetNewApplicationResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "submitApplication",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubmitApplicationResponseProto submitApplication(RpcController arg0, SubmitApplicationRequestProto proto) throws ServiceException\n{\r\n    SubmitApplicationRequestPBImpl request = new SubmitApplicationRequestPBImpl(proto);\r\n    try {\r\n        SubmitApplicationResponse response = real.submitApplication(request);\r\n        return ((SubmitApplicationResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getApplications",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationsResponseProto getApplications(RpcController controller, GetApplicationsRequestProto proto) throws ServiceException\n{\r\n    GetApplicationsRequestPBImpl request = new GetApplicationsRequestPBImpl(proto);\r\n    try {\r\n        GetApplicationsResponse response = real.getApplications(request);\r\n        return ((GetApplicationsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getClusterNodes",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetClusterNodesResponseProto getClusterNodes(RpcController controller, GetClusterNodesRequestProto proto) throws ServiceException\n{\r\n    GetClusterNodesRequestPBImpl request = new GetClusterNodesRequestPBImpl(proto);\r\n    try {\r\n        GetClusterNodesResponse response = real.getClusterNodes(request);\r\n        return ((GetClusterNodesResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getQueueInfo",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetQueueInfoResponseProto getQueueInfo(RpcController controller, GetQueueInfoRequestProto proto) throws ServiceException\n{\r\n    GetQueueInfoRequestPBImpl request = new GetQueueInfoRequestPBImpl(proto);\r\n    try {\r\n        GetQueueInfoResponse response = real.getQueueInfo(request);\r\n        return ((GetQueueInfoResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getQueueUserAcls",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetQueueUserAclsInfoResponseProto getQueueUserAcls(RpcController controller, GetQueueUserAclsInfoRequestProto proto) throws ServiceException\n{\r\n    GetQueueUserAclsInfoRequestPBImpl request = new GetQueueUserAclsInfoRequestPBImpl(proto);\r\n    try {\r\n        GetQueueUserAclsInfoResponse response = real.getQueueUserAcls(request);\r\n        return ((GetQueueUserAclsInfoResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getDelegationToken",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetDelegationTokenResponseProto getDelegationToken(RpcController controller, GetDelegationTokenRequestProto proto) throws ServiceException\n{\r\n    GetDelegationTokenRequestPBImpl request = new GetDelegationTokenRequestPBImpl(proto);\r\n    try {\r\n        GetDelegationTokenResponse response = real.getDelegationToken(request);\r\n        return ((GetDelegationTokenResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "renewDelegationToken",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RenewDelegationTokenResponseProto renewDelegationToken(RpcController controller, RenewDelegationTokenRequestProto proto) throws ServiceException\n{\r\n    RenewDelegationTokenRequestPBImpl request = new RenewDelegationTokenRequestPBImpl(proto);\r\n    try {\r\n        RenewDelegationTokenResponse response = real.renewDelegationToken(request);\r\n        return ((RenewDelegationTokenResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "cancelDelegationToken",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CancelDelegationTokenResponseProto cancelDelegationToken(RpcController controller, CancelDelegationTokenRequestProto proto) throws ServiceException\n{\r\n    CancelDelegationTokenRequestPBImpl request = new CancelDelegationTokenRequestPBImpl(proto);\r\n    try {\r\n        CancelDelegationTokenResponse response = real.cancelDelegationToken(request);\r\n        return ((CancelDelegationTokenResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "moveApplicationAcrossQueues",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MoveApplicationAcrossQueuesResponseProto moveApplicationAcrossQueues(RpcController controller, MoveApplicationAcrossQueuesRequestProto proto) throws ServiceException\n{\r\n    MoveApplicationAcrossQueuesRequestPBImpl request = new MoveApplicationAcrossQueuesRequestPBImpl(proto);\r\n    try {\r\n        MoveApplicationAcrossQueuesResponse response = real.moveApplicationAcrossQueues(request);\r\n        return ((MoveApplicationAcrossQueuesResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getApplicationAttemptReport",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationAttemptReportResponseProto getApplicationAttemptReport(RpcController controller, GetApplicationAttemptReportRequestProto proto) throws ServiceException\n{\r\n    GetApplicationAttemptReportRequestPBImpl request = new GetApplicationAttemptReportRequestPBImpl(proto);\r\n    try {\r\n        GetApplicationAttemptReportResponse response = real.getApplicationAttemptReport(request);\r\n        return ((GetApplicationAttemptReportResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getApplicationAttempts",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationAttemptsResponseProto getApplicationAttempts(RpcController controller, GetApplicationAttemptsRequestProto proto) throws ServiceException\n{\r\n    GetApplicationAttemptsRequestPBImpl request = new GetApplicationAttemptsRequestPBImpl(proto);\r\n    try {\r\n        GetApplicationAttemptsResponse response = real.getApplicationAttempts(request);\r\n        return ((GetApplicationAttemptsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getContainerReport",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetContainerReportResponseProto getContainerReport(RpcController controller, GetContainerReportRequestProto proto) throws ServiceException\n{\r\n    GetContainerReportRequestPBImpl request = new GetContainerReportRequestPBImpl(proto);\r\n    try {\r\n        GetContainerReportResponse response = real.getContainerReport(request);\r\n        return ((GetContainerReportResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getContainers",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetContainersResponseProto getContainers(RpcController controller, GetContainersRequestProto proto) throws ServiceException\n{\r\n    GetContainersRequestPBImpl request = new GetContainersRequestPBImpl(proto);\r\n    try {\r\n        GetContainersResponse response = real.getContainers(request);\r\n        return ((GetContainersResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getNewReservation",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNewReservationResponseProto getNewReservation(RpcController arg0, GetNewReservationRequestProto proto) throws ServiceException\n{\r\n    GetNewReservationRequestPBImpl request = new GetNewReservationRequestPBImpl(proto);\r\n    try {\r\n        GetNewReservationResponse response = real.getNewReservation(request);\r\n        return ((GetNewReservationResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "submitReservation",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationSubmissionResponseProto submitReservation(RpcController controller, ReservationSubmissionRequestProto requestProto) throws ServiceException\n{\r\n    ReservationSubmissionRequestPBImpl request = new ReservationSubmissionRequestPBImpl(requestProto);\r\n    try {\r\n        ReservationSubmissionResponse response = real.submitReservation(request);\r\n        return ((ReservationSubmissionResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "updateReservation",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationUpdateResponseProto updateReservation(RpcController controller, ReservationUpdateRequestProto requestProto) throws ServiceException\n{\r\n    ReservationUpdateRequestPBImpl request = new ReservationUpdateRequestPBImpl(requestProto);\r\n    try {\r\n        ReservationUpdateResponse response = real.updateReservation(request);\r\n        return ((ReservationUpdateResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "deleteReservation",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationDeleteResponseProto deleteReservation(RpcController controller, ReservationDeleteRequestProto requestProto) throws ServiceException\n{\r\n    ReservationDeleteRequestPBImpl request = new ReservationDeleteRequestPBImpl(requestProto);\r\n    try {\r\n        ReservationDeleteResponse response = real.deleteReservation(request);\r\n        return ((ReservationDeleteResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "listReservations",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationListResponseProto listReservations(RpcController controller, ReservationListRequestProto requestProto) throws ServiceException\n{\r\n    ReservationListRequestPBImpl request = new ReservationListRequestPBImpl(requestProto);\r\n    try {\r\n        ReservationListResponse response = real.listReservations(request);\r\n        return ((ReservationListResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getNodeToLabels",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNodesToLabelsResponseProto getNodeToLabels(RpcController controller, GetNodesToLabelsRequestProto proto) throws ServiceException\n{\r\n    GetNodesToLabelsRequestPBImpl request = new GetNodesToLabelsRequestPBImpl(proto);\r\n    try {\r\n        GetNodesToLabelsResponse response = real.getNodeToLabels(request);\r\n        return ((GetNodesToLabelsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getLabelsToNodes",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetLabelsToNodesResponseProto getLabelsToNodes(RpcController controller, GetLabelsToNodesRequestProto proto) throws ServiceException\n{\r\n    GetLabelsToNodesRequestPBImpl request = new GetLabelsToNodesRequestPBImpl(proto);\r\n    try {\r\n        GetLabelsToNodesResponse response = real.getLabelsToNodes(request);\r\n        return ((GetLabelsToNodesResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getClusterNodeLabels",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetClusterNodeLabelsResponseProto getClusterNodeLabels(RpcController controller, GetClusterNodeLabelsRequestProto proto) throws ServiceException\n{\r\n    GetClusterNodeLabelsRequestPBImpl request = new GetClusterNodeLabelsRequestPBImpl(proto);\r\n    try {\r\n        GetClusterNodeLabelsResponse response = real.getClusterNodeLabels(request);\r\n        return ((GetClusterNodeLabelsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "updateApplicationPriority",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateApplicationPriorityResponseProto updateApplicationPriority(RpcController controller, UpdateApplicationPriorityRequestProto proto) throws ServiceException\n{\r\n    UpdateApplicationPriorityRequestPBImpl request = new UpdateApplicationPriorityRequestPBImpl(proto);\r\n    try {\r\n        UpdateApplicationPriorityResponse response = real.updateApplicationPriority(request);\r\n        return ((UpdateApplicationPriorityResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "signalToContainer",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SignalContainerResponseProto signalToContainer(RpcController controller, YarnServiceProtos.SignalContainerRequestProto proto) throws ServiceException\n{\r\n    SignalContainerRequestPBImpl request = new SignalContainerRequestPBImpl(proto);\r\n    try {\r\n        SignalContainerResponse response = real.signalToContainer(request);\r\n        return ((SignalContainerResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "updateApplicationTimeouts",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateApplicationTimeoutsResponseProto updateApplicationTimeouts(RpcController controller, UpdateApplicationTimeoutsRequestProto proto) throws ServiceException\n{\r\n    UpdateApplicationTimeoutsRequestPBImpl request = new UpdateApplicationTimeoutsRequestPBImpl(proto);\r\n    try {\r\n        UpdateApplicationTimeoutsResponse response = real.updateApplicationTimeouts(request);\r\n        return ((UpdateApplicationTimeoutsResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getResourceProfiles",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetAllResourceProfilesResponseProto getResourceProfiles(RpcController controller, GetAllResourceProfilesRequestProto proto) throws ServiceException\n{\r\n    GetAllResourceProfilesRequestPBImpl req = new GetAllResourceProfilesRequestPBImpl(proto);\r\n    try {\r\n        GetAllResourceProfilesResponse resp = real.getResourceProfiles(req);\r\n        return ((GetAllResourceProfilesResponsePBImpl) resp).getProto();\r\n    } catch (YarnException ye) {\r\n        throw new ServiceException(ye);\r\n    } catch (IOException ie) {\r\n        throw new ServiceException(ie);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getResourceProfile",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetResourceProfileResponseProto getResourceProfile(RpcController controller, GetResourceProfileRequestProto proto) throws ServiceException\n{\r\n    GetResourceProfileRequestPBImpl req = new GetResourceProfileRequestPBImpl(proto);\r\n    try {\r\n        GetResourceProfileResponse resp = real.getResourceProfile(req);\r\n        return ((GetResourceProfileResponsePBImpl) resp).getProto();\r\n    } catch (YarnException ye) {\r\n        throw new ServiceException(ye);\r\n    } catch (IOException ie) {\r\n        throw new ServiceException(ie);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getResourceTypeInfo",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetAllResourceTypeInfoResponseProto getResourceTypeInfo(RpcController controller, GetAllResourceTypeInfoRequestProto proto) throws ServiceException\n{\r\n    GetAllResourceTypeInfoRequestPBImpl req = new GetAllResourceTypeInfoRequestPBImpl(proto);\r\n    try {\r\n        GetAllResourceTypeInfoResponse resp = real.getResourceTypeInfo(req);\r\n        return ((GetAllResourceTypeInfoResponsePBImpl) resp).getProto();\r\n    } catch (YarnException ye) {\r\n        throw new ServiceException(ye);\r\n    } catch (IOException ie) {\r\n        throw new ServiceException(ie);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getClusterNodeAttributes",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetClusterNodeAttributesResponseProto getClusterNodeAttributes(RpcController controller, YarnServiceProtos.GetClusterNodeAttributesRequestProto proto) throws ServiceException\n{\r\n    GetClusterNodeAttributesRequest req = new GetClusterNodeAttributesRequestPBImpl(proto);\r\n    try {\r\n        GetClusterNodeAttributesResponse resp = real.getClusterNodeAttributes(req);\r\n        return ((GetClusterNodeAttributesResponsePBImpl) resp).getProto();\r\n    } catch (YarnException ye) {\r\n        throw new ServiceException(ye);\r\n    } catch (IOException ie) {\r\n        throw new ServiceException(ie);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getAttributesToNodes",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetAttributesToNodesResponseProto getAttributesToNodes(RpcController controller, YarnServiceProtos.GetAttributesToNodesRequestProto proto) throws ServiceException\n{\r\n    GetAttributesToNodesRequestPBImpl req = new GetAttributesToNodesRequestPBImpl(proto);\r\n    try {\r\n        GetAttributesToNodesResponse resp = real.getAttributesToNodes(req);\r\n        return ((GetAttributesToNodesResponsePBImpl) resp).getProto();\r\n    } catch (YarnException ye) {\r\n        throw new ServiceException(ye);\r\n    } catch (IOException ie) {\r\n        throw new ServiceException(ie);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\impl\\pb\\service",
  "methodName" : "getNodesToAttributes",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNodesToAttributesResponseProto getNodesToAttributes(RpcController controller, YarnServiceProtos.GetNodesToAttributesRequestProto proto) throws ServiceException\n{\r\n    GetNodesToAttributesRequestPBImpl req = new GetNodesToAttributesRequestPBImpl(proto);\r\n    try {\r\n        GetNodesToAttributesResponse resp = real.getNodesToAttributes(req);\r\n        return ((GetNodesToAttributesResponsePBImpl) resp).getProto();\r\n    } catch (YarnException ye) {\r\n        throw new ServiceException(ye);\r\n    } catch (IOException ie) {\r\n        throw new ServiceException(ie);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UseSharedCacheResourceRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getAppId()\n{\r\n    UseSharedCacheResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.applicationId != null) {\r\n        return this.applicationId;\r\n    }\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAppId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAppId(ApplicationId id)\n{\r\n    maybeInitBuilder();\r\n    if (id == null)\r\n        builder.clearApplicationId();\r\n    this.applicationId = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResourceKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getResourceKey()\n{\r\n    UseSharedCacheResourceRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasResourceKey()) ? p.getResourceKey() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResourceKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setResourceKey(String key)\n{\r\n    maybeInitBuilder();\r\n    if (key == null) {\r\n        builder.clearResourceKey();\r\n        return;\r\n    }\r\n    builder.setResourceKey(key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (applicationId != null) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = UseSharedCacheResourceRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\view",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void render(Block html)\n{\r\n    html.div(\"#footer.ui-widget\").__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetAllResourceTypeInfoResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResourceTypeInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setResourceTypeInfo(List<ResourceTypeInfo> resourceTypes)\n{\r\n    if (resourceTypeInfo == null) {\r\n        builder.clearResourceTypeInfo();\r\n    }\r\n    this.resourceTypeInfo = resourceTypes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResourceTypeInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ResourceTypeInfo> getResourceTypeInfo()\n{\r\n    initResourceTypeInfosList();\r\n    return this.resourceTypeInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.resourceTypeInfo != null) {\r\n        addResourceTypeInfosToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetAllResourceTypeInfoResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initResourceTypeInfosList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initResourceTypeInfosList()\n{\r\n    if (this.resourceTypeInfo != null) {\r\n        return;\r\n    }\r\n    GetAllResourceTypeInfoResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ResourceTypeInfoProto> list = p.getResourceTypeInfoList();\r\n    resourceTypeInfo = new ArrayList<ResourceTypeInfo>();\r\n    for (ResourceTypeInfoProto a : list) {\r\n        resourceTypeInfo.add(convertFromProtoFormat(a));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addResourceTypeInfosToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addResourceTypeInfosToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearResourceTypeInfo();\r\n    if (resourceTypeInfo == null) {\r\n        return;\r\n    }\r\n    Iterable<ResourceTypeInfoProto> iterable = new Iterable<ResourceTypeInfoProto>() {\r\n\r\n        @Override\r\n        public Iterator<ResourceTypeInfoProto> iterator() {\r\n            return new Iterator<ResourceTypeInfoProto>() {\r\n\r\n                Iterator<ResourceTypeInfo> iter = resourceTypeInfo.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ResourceTypeInfoProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllResourceTypeInfo(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceTypeInfoPBImpl convertFromProtoFormat(ResourceTypeInfoProto p)\n{\r\n    return new ResourceTypeInfoPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceTypeInfoProto convertToProtoFormat(ResourceTypeInfo t)\n{\r\n    return ((ResourceTypeInfoPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationAttemptReportRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (applicationAttemptId != null) {\r\n        builder.setApplicationAttemptId(convertToProtoFormat(this.applicationAttemptId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetApplicationAttemptReportRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId()\n{\r\n    if (this.applicationAttemptId != null) {\r\n        return this.applicationAttemptId;\r\n    }\r\n    GetApplicationAttemptReportRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationAttemptId()) {\r\n        return null;\r\n    }\r\n    this.applicationAttemptId = convertFromProtoFormat(p.getApplicationAttemptId());\r\n    return this.applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationAttemptId(ApplicationAttemptId applicationAttemptId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationAttemptId == null) {\r\n        builder.clearApplicationAttemptId();\r\n    }\r\n    this.applicationAttemptId = applicationAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptIdPBImpl convertFromProtoFormat(ApplicationAttemptIdProto p)\n{\r\n    return new ApplicationAttemptIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptIdProto convertToProtoFormat(ApplicationAttemptId t)\n{\r\n    return ((ApplicationAttemptIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initNodeToLabels()\n{\r\n    if (this.nodeToLabels != null) {\r\n        return;\r\n    }\r\n    GetNodesToLabelsResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeIdToLabelsProto> list = p.getNodeToLabelsList();\r\n    this.nodeToLabels = new HashMap<NodeId, Set<String>>();\r\n    for (NodeIdToLabelsProto c : list) {\r\n        this.nodeToLabels.put(new NodeIdPBImpl(c.getNodeId()), Sets.newHashSet(c.getNodeLabelsList()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetNodesToLabelsResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addNodeToLabelsToProto",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addNodeToLabelsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeToLabels();\r\n    if (nodeToLabels == null) {\r\n        return;\r\n    }\r\n    Iterable<NodeIdToLabelsProto> iterable = new Iterable<NodeIdToLabelsProto>() {\r\n\r\n        @Override\r\n        public Iterator<NodeIdToLabelsProto> iterator() {\r\n            return new Iterator<NodeIdToLabelsProto>() {\r\n\r\n                Iterator<Entry<NodeId, Set<String>>> iter = nodeToLabels.entrySet().iterator();\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n\r\n                @Override\r\n                public NodeIdToLabelsProto next() {\r\n                    Entry<NodeId, Set<String>> now = iter.next();\r\n                    return NodeIdToLabelsProto.newBuilder().setNodeId(convertToProtoFormat(now.getKey())).addAllNodeLabels(now.getValue()).build();\r\n                }\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllNodeToLabels(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodeToLabels != null) {\r\n        addNodeToLabelsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNodesToLabelsResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<NodeId, Set<String>> getNodeToLabels()\n{\r\n    initNodeToLabels();\r\n    return this.nodeToLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeToLabels(Map<NodeId, Set<String>> map)\n{\r\n    initNodeToLabels();\r\n    nodeToLabels.clear();\r\n    nodeToLabels.putAll(map);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId t)\n{\r\n    return ((NodeIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    assert false : \"hashCode not designed\";\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LogAggregationContextProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = LogAggregationContextProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getIncludePattern",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getIncludePattern()\n{\r\n    LogAggregationContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasIncludePattern()) {\r\n        return null;\r\n    }\r\n    return p.getIncludePattern();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setIncludePattern",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setIncludePattern(String includePattern)\n{\r\n    maybeInitBuilder();\r\n    if (includePattern == null) {\r\n        builder.clearIncludePattern();\r\n        return;\r\n    }\r\n    builder.setIncludePattern(includePattern);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getExcludePattern",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getExcludePattern()\n{\r\n    LogAggregationContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasExcludePattern()) {\r\n        return null;\r\n    }\r\n    return p.getExcludePattern();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExcludePattern",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setExcludePattern(String excludePattern)\n{\r\n    maybeInitBuilder();\r\n    if (excludePattern == null) {\r\n        builder.clearExcludePattern();\r\n        return;\r\n    }\r\n    builder.setExcludePattern(excludePattern);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRolledLogsIncludePattern",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRolledLogsIncludePattern()\n{\r\n    LogAggregationContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasRolledLogsIncludePattern()) {\r\n        return null;\r\n    }\r\n    return p.getRolledLogsIncludePattern();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setRolledLogsIncludePattern",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRolledLogsIncludePattern(String rolledLogsIncludePattern)\n{\r\n    maybeInitBuilder();\r\n    if (rolledLogsIncludePattern == null) {\r\n        builder.clearRolledLogsIncludePattern();\r\n        return;\r\n    }\r\n    builder.setRolledLogsIncludePattern(rolledLogsIncludePattern);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getRolledLogsExcludePattern",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRolledLogsExcludePattern()\n{\r\n    LogAggregationContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasRolledLogsExcludePattern()) {\r\n        return null;\r\n    }\r\n    return p.getRolledLogsExcludePattern();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setRolledLogsExcludePattern",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRolledLogsExcludePattern(String rolledLogsExcludePattern)\n{\r\n    maybeInitBuilder();\r\n    if (rolledLogsExcludePattern == null) {\r\n        builder.clearRolledLogsExcludePattern();\r\n        return;\r\n    }\r\n    builder.setRolledLogsExcludePattern(rolledLogsExcludePattern);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getLogAggregationPolicyClassName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getLogAggregationPolicyClassName()\n{\r\n    LogAggregationContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasLogAggregationPolicyClassName()) {\r\n        return null;\r\n    }\r\n    return p.getLogAggregationPolicyClassName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setLogAggregationPolicyClassName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setLogAggregationPolicyClassName(String className)\n{\r\n    maybeInitBuilder();\r\n    if (className == null) {\r\n        builder.clearLogAggregationPolicyClassName();\r\n        return;\r\n    }\r\n    builder.setLogAggregationPolicyClassName(className);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getLogAggregationPolicyParameters",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getLogAggregationPolicyParameters()\n{\r\n    LogAggregationContextProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasLogAggregationPolicyParameters()) {\r\n        return null;\r\n    }\r\n    return p.getLogAggregationPolicyParameters();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setLogAggregationPolicyParameters",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setLogAggregationPolicyParameters(String config)\n{\r\n    maybeInitBuilder();\r\n    if (config == null) {\r\n        builder.clearLogAggregationPolicyParameters();\r\n        return;\r\n    }\r\n    builder.setLogAggregationPolicyParameters(config);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AddToClusterNodeLabelsRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.updatedNodeLabels != null) {\r\n        addNodeLabelsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addNodeLabelsToProto",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addNodeLabelsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeLabels();\r\n    builder.clearDeprecatedNodeLabels();\r\n    List<NodeLabelProto> protoList = new ArrayList<NodeLabelProto>();\r\n    List<String> protoListString = new ArrayList<String>();\r\n    for (NodeLabel r : this.updatedNodeLabels) {\r\n        protoList.add(convertToProtoFormat(r));\r\n        protoListString.add(r.getName());\r\n    }\r\n    builder.addAllNodeLabels(protoList);\r\n    builder.addAllDeprecatedNodeLabels(protoListString);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    assert false : \"hashCode not designed\";\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = AddToClusterNodeLabelsRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void initLocalNodeLabels()\n{\r\n    AddToClusterNodeLabelsRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NodeLabelProto> attributesProtoList = p.getNodeLabelsList();\r\n    this.updatedNodeLabels = new ArrayList<NodeLabel>();\r\n    for (NodeLabelProto r : attributesProtoList) {\r\n        this.updatedNodeLabels.add(convertFromProtoFormat(r));\r\n    }\r\n    if (this.updatedNodeLabels.isEmpty()) {\r\n        List<String> deprecatedLabelsList = p.getDeprecatedNodeLabelsList();\r\n        for (String l : deprecatedLabelsList) {\r\n            this.updatedNodeLabels.add(NodeLabel.newInstance(l));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeLabel convertFromProtoFormat(NodeLabelProto p)\n{\r\n    return new NodeLabelPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeLabelProto convertToProtoFormat(NodeLabel t)\n{\r\n    return ((NodeLabelPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return getProto().toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeLabels(List<NodeLabel> nodeLabels)\n{\r\n    maybeInitBuilder();\r\n    this.updatedNodeLabels = new ArrayList<>();\r\n    if (nodeLabels == null) {\r\n        builder.clearNodeLabels();\r\n        return;\r\n    }\r\n    this.updatedNodeLabels.addAll(nodeLabels);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<NodeLabel> getNodeLabels()\n{\r\n    if (this.updatedNodeLabels != null) {\r\n        return this.updatedNodeLabels;\r\n    }\r\n    initLocalNodeLabels();\r\n    return this.updatedNodeLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "StartContainerRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerLaunchContext != null) {\r\n        builder.setContainerLaunchContext(convertToProtoFormat(this.containerLaunchContext));\r\n    }\r\n    if (this.containerToken != null) {\r\n        builder.setContainerToken(convertToProtoFormat(this.containerToken));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = StartContainerRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerLaunchContext getContainerLaunchContext()\n{\r\n    StartContainerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerLaunchContext != null) {\r\n        return this.containerLaunchContext;\r\n    }\r\n    if (!p.hasContainerLaunchContext()) {\r\n        return null;\r\n    }\r\n    this.containerLaunchContext = convertFromProtoFormat(p.getContainerLaunchContext());\r\n    return this.containerLaunchContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerLaunchContext(ContainerLaunchContext containerLaunchContext)\n{\r\n    maybeInitBuilder();\r\n    if (containerLaunchContext == null)\r\n        builder.clearContainerLaunchContext();\r\n    this.containerLaunchContext = containerLaunchContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token getContainerToken()\n{\r\n    StartContainerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerToken != null) {\r\n        return this.containerToken;\r\n    }\r\n    if (!p.hasContainerToken()) {\r\n        return null;\r\n    }\r\n    this.containerToken = convertFromProtoFormat(p.getContainerToken());\r\n    return this.containerToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerToken(Token containerToken)\n{\r\n    maybeInitBuilder();\r\n    if (containerToken == null) {\r\n        builder.clearContainerToken();\r\n    }\r\n    this.containerToken = containerToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerLaunchContextPBImpl convertFromProtoFormat(ContainerLaunchContextProto p)\n{\r\n    return new ContainerLaunchContextPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerLaunchContextProto convertToProtoFormat(ContainerLaunchContext t)\n{\r\n    return ((ContainerLaunchContextPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenPBImpl convertFromProtoFormat(TokenProto containerProto)\n{\r\n    return new TokenPBImpl(containerProto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token container)\n{\r\n    return ((TokenPBImpl) container).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getNodeInfoFromRMWebService",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "JSONObject getNodeInfoFromRMWebService(Configuration conf, String nodeId) throws ClientHandlerException, UniformInterfaceException\n{\r\n    try {\r\n        return WebAppUtils.execOnActiveRM(conf, YarnWebServiceUtils::getNodeInfoFromRM, nodeId);\r\n    } catch (Exception e) {\r\n        if (e instanceof ClientHandlerException) {\r\n            throw ((ClientHandlerException) e);\r\n        } else if (e instanceof UniformInterfaceException) {\r\n            throw ((UniformInterfaceException) e);\r\n        } else {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "getNodeInfoFromRM",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "JSONObject getNodeInfoFromRM(String webAppAddress, String nodeId) throws ClientHandlerException, UniformInterfaceException\n{\r\n    Client webServiceClient = Client.create();\r\n    ClientResponse response = null;\r\n    try {\r\n        Builder builder = webServiceClient.resource(webAppAddress).path(\"ws\").path(\"v1\").path(\"cluster\").path(\"nodes\").path(nodeId).accept(MediaType.APPLICATION_JSON);\r\n        response = builder.get(ClientResponse.class);\r\n        return response.getEntity(JSONObject.class);\r\n    } finally {\r\n        if (response != null) {\r\n            response.close();\r\n        }\r\n        webServiceClient.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp\\util",
  "methodName" : "toJson",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String toJson(Object nsli, Class klass) throws Exception\n{\r\n    StringWriter sw = new StringWriter();\r\n    JSONJAXBContext ctx = new JSONJAXBContext(klass);\r\n    JSONMarshaller jm = ctx.createJSONMarshaller();\r\n    jm.marshallToJSON(nsli, sw);\r\n    return sw.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetContainerStatusesResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerStatuses != null) {\r\n        addLocalContainerStatusesToProto();\r\n    }\r\n    if (this.failedRequests != null) {\r\n        addFailedRequestsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetContainerStatusesResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalContainerStatusesToProto",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addLocalContainerStatusesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearStatus();\r\n    if (this.containerStatuses == null)\r\n        return;\r\n    List<ContainerStatusProto> protoList = new ArrayList<ContainerStatusProto>();\r\n    for (ContainerStatus status : containerStatuses) {\r\n        protoList.add(convertToProtoFormat(status));\r\n    }\r\n    builder.addAllStatus(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addFailedRequestsToProto",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void addFailedRequestsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearFailedRequests();\r\n    if (this.failedRequests == null)\r\n        return;\r\n    List<ContainerExceptionMapProto> protoList = new ArrayList<ContainerExceptionMapProto>();\r\n    for (Map.Entry<ContainerId, SerializedException> entry : this.failedRequests.entrySet()) {\r\n        protoList.add(ContainerExceptionMapProto.newBuilder().setContainerId(convertToProtoFormat(entry.getKey())).setException(convertToProtoFormat(entry.getValue())).build());\r\n    }\r\n    builder.addAllFailedRequests(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalContainerStatuses",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalContainerStatuses()\n{\r\n    if (this.containerStatuses != null) {\r\n        return;\r\n    }\r\n    GetContainerStatusesResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerStatusProto> statuses = p.getStatusList();\r\n    this.containerStatuses = new ArrayList<ContainerStatus>();\r\n    for (ContainerStatusProto status : statuses) {\r\n        this.containerStatuses.add(convertFromProtoFormat(status));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initFailedRequests()\n{\r\n    if (this.failedRequests != null) {\r\n        return;\r\n    }\r\n    GetContainerStatusesResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerExceptionMapProto> protoList = p.getFailedRequestsList();\r\n    this.failedRequests = new HashMap<ContainerId, SerializedException>();\r\n    for (ContainerExceptionMapProto ce : protoList) {\r\n        this.failedRequests.put(convertFromProtoFormat(ce.getContainerId()), convertFromProtoFormat(ce.getException()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerStatuses",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerStatus> getContainerStatuses()\n{\r\n    initLocalContainerStatuses();\r\n    return this.containerStatuses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerStatuses",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerStatuses(List<ContainerStatus> statuses)\n{\r\n    maybeInitBuilder();\r\n    if (statuses == null)\r\n        builder.clearStatus();\r\n    this.containerStatuses = statuses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ContainerId, SerializedException> getFailedRequests()\n{\r\n    initFailedRequests();\r\n    return this.failedRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFailedRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFailedRequests(Map<ContainerId, SerializedException> failedRequests)\n{\r\n    maybeInitBuilder();\r\n    if (failedRequests == null)\r\n        builder.clearFailedRequests();\r\n    this.failedRequests = failedRequests;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerStatusPBImpl convertFromProtoFormat(ContainerStatusProto p)\n{\r\n    return new ContainerStatusPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerStatusProto convertToProtoFormat(ContainerStatus t)\n{\r\n    return ((ContainerStatusPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SerializedExceptionPBImpl convertFromProtoFormat(SerializedExceptionProto p)\n{\r\n    return new SerializedExceptionPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SerializedExceptionProto convertToProtoFormat(SerializedException t)\n{\r\n    return ((SerializedExceptionPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetLocalizationStatusesRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerIds != null) {\r\n        addLocalContainerIdsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetLocalizationStatusesRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalContainerIdsToProto",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addLocalContainerIdsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainerId();\r\n    if (this.containerIds == null) {\r\n        return;\r\n    }\r\n    List<ContainerIdProto> protoList = new ArrayList<ContainerIdProto>();\r\n    for (ContainerId id : containerIds) {\r\n        protoList.add(convertToProtoFormat(id));\r\n    }\r\n    builder.addAllContainerId(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalContainerIds",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalContainerIds()\n{\r\n    if (this.containerIds != null) {\r\n        return;\r\n    }\r\n    GetLocalizationStatusesRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerIdProto> toAdd = p.getContainerIdList();\r\n    this.containerIds = new ArrayList<>();\r\n    for (ContainerIdProto id : toAdd) {\r\n        this.containerIds.add(convertFromProtoFormat(id));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerIds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerId> getContainerIds()\n{\r\n    initLocalContainerIds();\r\n    return this.containerIds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerIds",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerIds(List<ContainerId> containerIds)\n{\r\n    maybeInitBuilder();\r\n    if (containerIds == null) {\r\n        builder.clearContainerId();\r\n    }\r\n    this.containerIds = containerIds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\webapp",
  "methodName" : "doGet",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n{\r\n    RequestDispatcher rd = getServletContext().getNamedDispatcher(\"default\");\r\n    HttpServletRequest wrapped = new HttpServletRequestWrapper(req) {\r\n\r\n        public String getServletPath() {\r\n            return \"\";\r\n        }\r\n    };\r\n    rd.forward(wrapped, resp);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(OutputStream os, NodeAttributesManager mgr) throws IOException\n{\r\n    ((NodesToAttributesMappingRequestPBImpl) NodesToAttributesMappingRequest.newInstance(AttributeMappingOperationType.REMOVE, attributes, false)).getProto().writeDelimitedTo(os);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "recover",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void recover(InputStream is, NodeAttributesManager mgr) throws IOException\n{\r\n    NodesToAttributesMappingRequest request = new NodesToAttributesMappingRequestPBImpl(YarnServerResourceManagerServiceProtos.NodesToAttributesMappingRequestProto.parseDelimitedFrom(is));\r\n    mgr.removeNodeAttributes(getNodeToAttributesMap(request));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "setAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RemoveNodeToAttributeLogOp setAttributes(List<NodeToAttributes> attrs)\n{\r\n    this.attributes = attrs;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels\\store\\op",
  "methodName" : "getOpCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getOpCode()\n{\r\n    return OPCODE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeLabelProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NodeLabelProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getName()\n{\r\n    NodeLabelProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasName()) {\r\n        return null;\r\n    }\r\n    return (p.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setName(String name)\n{\r\n    maybeInitBuilder();\r\n    if (name == null) {\r\n        builder.clearName();\r\n        return;\r\n    }\r\n    builder.setName(name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "isExclusive",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isExclusive()\n{\r\n    NodeLabelProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getIsExclusive();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\api\\records\\impl\\pb",
  "methodName" : "setExclusivity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setExclusivity(boolean isExclusive)\n{\r\n    maybeInitBuilder();\r\n    builder.setIsExclusive(isExclusive);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void close() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "recover",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void recover() throws YarnException, IOException\n{\r\n    Path newMirrorPath = new Path(fsWorkingPath, MIRROR_FILENAME + \".new\");\r\n    Path oldMirrorPath = new Path(fsWorkingPath, MIRROR_FILENAME);\r\n    loadFromMirror(newMirrorPath, oldMirrorPath);\r\n    if (fs.exists(newMirrorPath)) {\r\n        try {\r\n            fs.delete(oldMirrorPath, false);\r\n        } catch (IOException e) {\r\n            LOG.debug(\"Exception while removing old mirror\", e);\r\n        }\r\n        fs.rename(newMirrorPath, oldMirrorPath);\r\n    }\r\n    LOG.info(\"Node label store recover is completed\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "updateNodeToLabelsMappings",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void updateNodeToLabelsMappings(Map<NodeId, Set<String>> nodeToLabels) throws IOException\n{\r\n    writeNewMirror();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "storeNewClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void storeNewClusterNodeLabels(List<NodeLabel> labels) throws IOException\n{\r\n    writeNewMirror();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "removeClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeClusterNodeLabels(Collection<String> labels) throws IOException\n{\r\n    writeNewMirror();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\nodelabels",
  "methodName" : "writeNewMirror",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void writeNewMirror() throws IOException\n{\r\n    ReentrantReadWriteLock.ReadLock readLock = manager.readLock;\r\n    readLock.lock();\r\n    try {\r\n        Path newTmpPath = new Path(fsWorkingPath, MIRROR_FILENAME + \".new.tmp\");\r\n        try (FSDataOutputStream os = fs.create(newTmpPath, true)) {\r\n            StoreOp op = FSStoreOpHandler.getMirrorOp(getStoreType());\r\n            op.write(os, manager);\r\n        }\r\n        Path newPath = new Path(fsWorkingPath, MIRROR_FILENAME + \".new\");\r\n        fs.delete(newPath, false);\r\n        fs.rename(newTmpPath, newPath);\r\n        Path mirrorPath = new Path(fsWorkingPath, MIRROR_FILENAME);\r\n        fs.delete(mirrorPath, false);\r\n        fs.rename(newPath, mirrorPath);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
} ]