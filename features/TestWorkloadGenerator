[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    conf = new Configuration();\r\n    conf.setClass(HADOOP_SECURITY_IMPERSONATION_PROVIDER_CLASS, AllowUserImpersonationProvider.class, ImpersonationProvider.class);\r\n    miniCluster = new MiniDFSCluster.Builder(conf).build();\r\n    miniCluster.waitClusterUp();\r\n    dfs = miniCluster.getFileSystem();\r\n    dfs.mkdirs(new Path(\"/tmp\"), new FsPermission(FsAction.ALL, FsAction.ALL, FsAction.ALL));\r\n    dfs.setOwner(new Path(\"/tmp\"), \"hdfs\", \"hdfs\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (miniCluster != null) {\r\n        miniCluster.shutdown();\r\n        miniCluster = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator",
  "methodName" : "testAuditWorkloadDirectParserWithOutput",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAuditWorkloadDirectParserWithOutput() throws Exception\n{\r\n    String workloadInputPath = TestWorkloadGenerator.class.getClassLoader().getResource(\"audit_trace_direct\").toString();\r\n    String auditOutputPath = \"/tmp/trace_output_direct\";\r\n    conf.set(AuditReplayMapper.INPUT_PATH_KEY, workloadInputPath);\r\n    conf.set(AuditReplayMapper.OUTPUT_PATH_KEY, auditOutputPath);\r\n    conf.setLong(AuditLogDirectParser.AUDIT_START_TIMESTAMP_KEY, 60 * 1000);\r\n    testAuditWorkloadWithOutput(auditOutputPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator",
  "methodName" : "testAuditWorkloadHiveParserWithOutput",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testAuditWorkloadHiveParserWithOutput() throws Exception\n{\r\n    String workloadInputPath = TestWorkloadGenerator.class.getClassLoader().getResource(\"audit_trace_hive\").toString();\r\n    String auditOutputPath = \"/tmp/trace_output_hive\";\r\n    conf.set(AuditReplayMapper.INPUT_PATH_KEY, workloadInputPath);\r\n    conf.set(AuditReplayMapper.OUTPUT_PATH_KEY, auditOutputPath);\r\n    conf.setClass(AuditReplayMapper.COMMAND_PARSER_KEY, AuditLogHiveTableParser.class, AuditCommandParser.class);\r\n    testAuditWorkloadWithOutput(auditOutputPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator",
  "methodName" : "testAuditWorkloadWithOutput",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testAuditWorkloadWithOutput(String auditOutputPath) throws Exception\n{\r\n    long workloadStartTime = System.currentTimeMillis() + 10000;\r\n    Job workloadJob = WorkloadDriver.getJobForSubmission(conf, dfs.getUri().toString(), workloadStartTime, AuditReplayMapper.class);\r\n    boolean success = workloadJob.waitForCompletion(true);\r\n    assertTrue(\"workload job should succeed\", success);\r\n    Counters counters = workloadJob.getCounters();\r\n    assertEquals(6, counters.findCounter(AuditReplayMapper.REPLAYCOUNTERS.TOTALCOMMANDS).getValue());\r\n    assertEquals(1, counters.findCounter(AuditReplayMapper.REPLAYCOUNTERS.TOTALINVALIDCOMMANDS).getValue());\r\n    assertTrue(dfs.getFileStatus(new Path(\"/tmp/test1\")).isFile());\r\n    assertTrue(dfs.getFileStatus(new Path(\"/tmp/testDirRenamed\")).isDirectory());\r\n    assertFalse(dfs.exists(new Path(\"/denied\")));\r\n    assertTrue(dfs.exists(new Path(auditOutputPath)));\r\n    try (FSDataInputStream auditOutputFile = dfs.open(new Path(auditOutputPath, \"part-r-00000\"))) {\r\n        String auditOutput = IOUtils.toString(auditOutputFile, StandardCharsets.UTF_8);\r\n        Log.info(auditOutput);\r\n        assertTrue(auditOutput.matches(\".*(hdfs,WRITE,[A-Z]+,[13]+,[0-9]+\\\\n){3}.*\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator\\audit",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    parser = new AuditLogDirectParser();\r\n    Configuration conf = new Configuration();\r\n    conf.setLong(AuditLogDirectParser.AUDIT_START_TIMESTAMP_KEY, START_TIMESTAMP);\r\n    parser.initialize(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator\\audit",
  "methodName" : "getAuditString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Text getAuditString(String timestamp, String ugi, String cmd, String src, String dst)\n{\r\n    return new Text(String.format(\"%s INFO FSNamesystem.audit: \" + \"allowed=true\\tugi=%s\\tip=0.0.0.0\\tcmd=%s\\tsrc=%s\\t\" + \"dst=%s\\tperm=null\\tproto=rpc\", timestamp, ugi, cmd, src, dst));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator\\audit",
  "methodName" : "testSimpleInput",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testSimpleInput() throws Exception\n{\r\n    Text in = getAuditString(\"1970-01-01 00:00:11,000\", \"fakeUser\", \"listStatus\", \"sourcePath\", \"null\");\r\n    AuditReplayCommand expected = new AuditReplayCommand(1000, \"fakeUser\", \"listStatus\", \"sourcePath\", \"null\", \"0.0.0.0\");\r\n    assertEquals(expected, parser.parse(in, Function.identity()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator\\audit",
  "methodName" : "testInputWithEquals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testInputWithEquals() throws Exception\n{\r\n    Text in = getAuditString(\"1970-01-01 00:00:11,000\", \"fakeUser\", \"listStatus\", \"day=1970\", \"null\");\r\n    AuditReplayCommand expected = new AuditReplayCommand(1000, \"fakeUser\", \"listStatus\", \"day=1970\", \"null\", \"0.0.0.0\");\r\n    assertEquals(expected, parser.parse(in, Function.identity()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator\\audit",
  "methodName" : "testInputWithRenameOptions",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testInputWithRenameOptions() throws Exception\n{\r\n    Text in = getAuditString(\"1970-01-01 00:00:11,000\", \"fakeUser\", \"rename (options=[TO_TRASH])\", \"sourcePath\", \"destPath\");\r\n    AuditReplayCommand expected = new AuditReplayCommand(1000, \"fakeUser\", \"rename (options=[TO_TRASH])\", \"sourcePath\", \"destPath\", \"0.0.0.0\");\r\n    assertEquals(expected, parser.parse(in, Function.identity()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator\\audit",
  "methodName" : "testInputWithTokenAuth",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testInputWithTokenAuth() throws Exception\n{\r\n    Text in = getAuditString(\"1970-01-01 00:00:11,000\", \"fakeUser (auth:TOKEN)\", \"create\", \"sourcePath\", \"null\");\r\n    AuditReplayCommand expected = new AuditReplayCommand(1000, \"fakeUser\", \"create\", \"sourcePath\", \"null\", \"0.0.0.0\");\r\n    assertEquals(expected, parser.parse(in, Function.identity()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator\\audit",
  "methodName" : "testInputWithProxyUser",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testInputWithProxyUser() throws Exception\n{\r\n    Text in = getAuditString(\"1970-01-01 00:00:11,000\", \"proxyUser (auth:TOKEN) via fakeUser\", \"create\", \"sourcePath\", \"null\");\r\n    AuditReplayCommand expected = new AuditReplayCommand(1000, \"proxyUser\", \"create\", \"sourcePath\", \"null\", \"0.0.0.0\");\r\n    assertEquals(expected, parser.parse(in, Function.identity()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator\\audit",
  "methodName" : "testParseDefaultDateFormat",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testParseDefaultDateFormat() throws Exception\n{\r\n    Text in = getAuditString(\"1970-01-01 13:00:00,000\", \"ignored\", \"ignored\", \"ignored\", \"ignored\");\r\n    AuditReplayCommand expected = new AuditReplayCommand(13 * 60 * 60 * 1000 - START_TIMESTAMP, \"ignored\", \"ignored\", \"ignored\", \"ignored\", \"0.0.0.0\");\r\n    assertEquals(expected, parser.parse(in, Function.identity()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator\\audit",
  "methodName" : "testParseCustomDateFormat",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testParseCustomDateFormat() throws Exception\n{\r\n    parser = new AuditLogDirectParser();\r\n    Configuration conf = new Configuration();\r\n    conf.setLong(AuditLogDirectParser.AUDIT_START_TIMESTAMP_KEY, 0);\r\n    conf.set(AuditLogDirectParser.AUDIT_LOG_DATE_FORMAT_KEY, \"yyyy-MM-dd hh:mm:ss,SSS a\");\r\n    parser.initialize(conf);\r\n    Text in = getAuditString(\"1970-01-01 01:00:00,000 PM\", \"ignored\", \"ignored\", \"ignored\", \"ignored\");\r\n    AuditReplayCommand expected = new AuditReplayCommand(13 * 60 * 60 * 1000, \"ignored\", \"ignored\", \"ignored\", \"ignored\", \"0.0.0.0\");\r\n    assertEquals(expected, parser.parse(in, Function.identity()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator\\audit",
  "methodName" : "testParseCustomTimeZone",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testParseCustomTimeZone() throws Exception\n{\r\n    parser = new AuditLogDirectParser();\r\n    Configuration conf = new Configuration();\r\n    conf.setLong(AuditLogDirectParser.AUDIT_START_TIMESTAMP_KEY, 0);\r\n    conf.set(AuditLogDirectParser.AUDIT_LOG_DATE_TIME_ZONE_KEY, \"Etc/GMT-1\");\r\n    parser.initialize(conf);\r\n    Text in = getAuditString(\"1970-01-01 01:00:00,000\", \"ignored\", \"ignored\", \"ignored\", \"ignored\");\r\n    AuditReplayCommand expected = new AuditReplayCommand(0, \"ignored\", \"ignored\", \"ignored\", \"ignored\", \"0.0.0.0\");\r\n    assertEquals(expected, parser.parse(in, Function.identity()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-dynamometer\\hadoop-dynamometer-workload\\src\\test\\java\\org\\apache\\hadoop\\tools\\dynamometer\\workloadgenerator\\audit",
  "methodName" : "testParseCustomAuditLineFormat",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testParseCustomAuditLineFormat() throws Exception\n{\r\n    Text auditLine = new Text(\"CUSTOM FORMAT (1970-01-01 00:00:00,000) \" + \"allowed=true\\tugi=fakeUser\\tip=0.0.0.0\\tcmd=fakeCommand\\tsrc=src\\t\" + \"dst=null\\tperm=null\\tproto=rpc\");\r\n    parser = new AuditLogDirectParser();\r\n    Configuration conf = new Configuration();\r\n    conf.setLong(AuditLogDirectParser.AUDIT_START_TIMESTAMP_KEY, 0);\r\n    conf.set(AuditLogDirectParser.AUDIT_LOG_PARSE_REGEX_KEY, \"CUSTOM FORMAT \\\\((?<timestamp>.+?)\\\\) (?<message>.+)\");\r\n    parser.initialize(conf);\r\n    AuditReplayCommand expected = new AuditReplayCommand(0, \"fakeUser\", \"fakeCommand\", \"src\", \"null\", \"0.0.0.0\");\r\n    assertEquals(expected, parser.parse(auditLine, Function.identity()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]