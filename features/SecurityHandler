[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "shouldSilentlyDrop",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean shouldSilentlyDrop(RpcCall request)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getVerifer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Verifier getVerifer(RpcCall request) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "isUnwrapRequired",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isUnwrapRequired()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "isWrapRequired",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isWrapRequired()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "unwrap",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "XDR unwrap(RpcCall request, byte[] data) throws IOException\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "wrap",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "byte[] wrap(RpcCall request, XDR response) throws IOException\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getUid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getUid()\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getGid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getGid()\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getAuxGids",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int[] getAuxGids()\n{\r\n    throw new UnsupportedOperationException();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "READ3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    long offset = xdr.readHyper();\r\n    int count = xdr.readInt();\r\n    return new READ3Request(handle, offset, count);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getOffset",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getOffset()\n{\r\n    return this.offset;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getCount()\n{\r\n    return this.count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    xdr.writeLongAsHyper(offset);\r\n    xdr.writeInt(count);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SETATTR3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    SetAttr3 attr = new SetAttr3();\r\n    attr.deserialize(xdr);\r\n    boolean check = xdr.readBoolean();\r\n    NfsTime ctime;\r\n    if (check) {\r\n        ctime = NfsTime.deserialize(xdr);\r\n    } else {\r\n        ctime = null;\r\n    }\r\n    return new SETATTR3Request(handle, attr, check, ctime);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SetAttr3 getAttr()\n{\r\n    return attr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "isCheck",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isCheck()\n{\r\n    return check;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getCtime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NfsTime getCtime()\n{\r\n    return ctime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    attr.serialize(xdr);\r\n    xdr.writeBoolean(check);\r\n    if (check) {\r\n        ctime.serialize(xdr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MKDIR3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    String name = xdr.readString();\r\n    SetAttr3 objAttr = new SetAttr3();\r\n    objAttr.deserialize(xdr);\r\n    return new MKDIR3Request(handle, name, objAttr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getObjAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SetAttr3 getObjAttr()\n{\r\n    return objAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    xdr.writeInt(name.getBytes(StandardCharsets.UTF_8).length);\r\n    xdr.writeFixedOpaque(name.getBytes(StandardCharsets.UTF_8));\r\n    objAttr.serialize(xdr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "RENAME3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle fromDirHandle = readHandle(xdr);\r\n    String fromName = xdr.readString();\r\n    FileHandle toDirHandle = readHandle(xdr);\r\n    String toName = xdr.readString();\r\n    return new RENAME3Request(fromDirHandle, fromName, toDirHandle, toName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getFromDirHandle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileHandle getFromDirHandle()\n{\r\n    return fromDirHandle;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getFromName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFromName()\n{\r\n    return fromName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getToDirHandle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileHandle getToDirHandle()\n{\r\n    return toDirHandle;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getToName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getToName()\n{\r\n    return toName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    fromDirHandle.serialize(xdr);\r\n    xdr.writeInt(fromName.getBytes(StandardCharsets.UTF_8).length);\r\n    xdr.writeFixedOpaque(fromName.getBytes(StandardCharsets.UTF_8));\r\n    toDirHandle.serialize(xdr);\r\n    xdr.writeInt(toName.getBytes(StandardCharsets.UTF_8).length);\r\n    xdr.writeFixedOpaque(toName.getBytes(StandardCharsets.UTF_8));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "REMOVE3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    String name = xdr.readString();\r\n    return new REMOVE3Request(handle, name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return this.name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    xdr.writeInt(name.getBytes(StandardCharsets.UTF_8).length);\r\n    xdr.writeFixedOpaque(name.getBytes(StandardCharsets.UTF_8));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "WRITE3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    long offset = xdr.readHyper();\r\n    int count = xdr.readInt();\r\n    WriteStableHow stableHow = WriteStableHow.fromValue(xdr.readInt());\r\n    ByteBuffer data = ByteBuffer.wrap(xdr.readFixedOpaque(xdr.readInt()));\r\n    return new WRITE3Request(handle, offset, count, stableHow, data);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getOffset",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getOffset()\n{\r\n    return this.offset;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "setOffset",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOffset(long offset)\n{\r\n    this.offset = offset;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getCount()\n{\r\n    return this.count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "setCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCount(int count)\n{\r\n    this.count = count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getStableHow",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WriteStableHow getStableHow()\n{\r\n    return this.stableHow;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getData",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ByteBuffer getData()\n{\r\n    return this.data;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    xdr.writeLongAsHyper(offset);\r\n    xdr.writeInt(count);\r\n    xdr.writeInt(stableHow.getValue());\r\n    xdr.writeInt(count);\r\n    xdr.writeFixedOpaque(data.array(), count);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return String.format(\"fileHandle: %s offset: %d count: %d stableHow: %s\", handle.dumpFileHandle(), offset, count, stableHow.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getFromDirWcc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccData getFromDirWcc()\n{\r\n    return fromDirWcc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getToDirWcc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccData getToDirWcc()\n{\r\n    return toDirWcc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RENAME3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    WccData fromDirWcc = WccData.deserialize(xdr);\r\n    WccData toDirWcc = WccData.deserialize(xdr);\r\n    return new RENAME3Response(status, fromDirWcc, toDirWcc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    fromDirWcc.serialize(out);\r\n    toDirWcc.serialize(out);\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getStatus()\n{\r\n    return this.status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "setStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setStatus(int status)\n{\r\n    this.status = status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    RpcAcceptedReply reply = RpcAcceptedReply.getAcceptInstance(xid, verifier);\r\n    reply.write(out);\r\n    out.writeInt(this.getStatus());\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getHandle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileHandle getHandle()\n{\r\n    return this.handle;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getFromDirWcc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccData getFromDirWcc()\n{\r\n    return fromDirWcc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getLinkDirWcc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccData getLinkDirWcc()\n{\r\n    return linkDirWcc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "LINK3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    WccData fromDirWcc = WccData.deserialize(xdr);\r\n    WccData linkDirWcc = WccData.deserialize(xdr);\r\n    return new LINK3Response(status, fromDirWcc, linkDirWcc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    fromDirWcc.serialize(out);\r\n    linkDirWcc.serialize(out);\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RMDIR3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    String name = xdr.readString();\r\n    return new RMDIR3Request(handle, name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return this.name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    xdr.writeInt(name.getBytes(StandardCharsets.UTF_8).length);\r\n    xdr.writeFixedOpaque(name.getBytes(StandardCharsets.UTF_8));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getRpcProgram",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RpcProgram getRpcProgram()\n{\r\n    return rpcProgram;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "start",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void start(boolean register)\n{\r\n    startTCPServer();\r\n    if (register) {\r\n        ShutdownHookManager.get().addShutdownHook(new NfsShutdownHook(), SHUTDOWN_HOOK_PRIORITY);\r\n        try {\r\n            rpcProgram.register(PortmapMapping.TRANSPORT_TCP, nfsBoundPort);\r\n        } catch (Throwable e) {\r\n            LOG.error(\"Failed to register the NFSv3 service.\", e);\r\n            terminate(1, e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "startTCPServer",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void startTCPServer()\n{\r\n    tcpServer = new SimpleTcpServer(rpcProgram.getPort(), rpcProgram, 0);\r\n    rpcProgram.startDaemons();\r\n    try {\r\n        tcpServer.run();\r\n    } catch (Throwable e) {\r\n        LOG.error(\"Failed to start the TCP server.\", e);\r\n        if (tcpServer.getBoundPort() > 0) {\r\n            rpcProgram.unregister(PortmapMapping.TRANSPORT_TCP, tcpServer.getBoundPort());\r\n        }\r\n        tcpServer.shutdown();\r\n        terminate(1, e);\r\n    }\r\n    nfsBoundPort = tcpServer.getBoundPort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void stop()\n{\r\n    if (nfsBoundPort > 0) {\r\n        rpcProgram.unregister(PortmapMapping.TRANSPORT_TCP, nfsBoundPort);\r\n        nfsBoundPort = 0;\r\n    }\r\n    rpcProgram.stopDaemons();\r\n    if (tcpServer != null) {\r\n        tcpServer.shutdown();\r\n        tcpServer = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean serialize(XDR out)\n{\r\n    out.writeInt(handle.length);\r\n    out.writeFixedOpaque(handle);\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "bytesToLong",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "long bytesToLong(byte[] data, int offset)\n{\r\n    ByteBuffer buffer = ByteBuffer.allocate(8);\r\n    for (int i = 0; i < 8; i++) {\r\n        buffer.put(data[i + offset]);\r\n    }\r\n    buffer.flip();\r\n    return buffer.getLong();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "bytesToInt",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int bytesToInt(byte[] data, int offset)\n{\r\n    ByteBuffer buffer = ByteBuffer.allocate(4);\r\n    for (int i = 0; i < 4; i++) {\r\n        buffer.put(data[i + offset]);\r\n    }\r\n    buffer.flip();\r\n    return buffer.getInt();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean deserialize(XDR xdr)\n{\r\n    if (!XDR.verifyLength(xdr, 32)) {\r\n        return false;\r\n    }\r\n    int size = xdr.readInt();\r\n    handle = xdr.readFixedOpaque(size);\r\n    fileId = bytesToLong(handle, 0);\r\n    namenodeId = bytesToInt(handle, 8);\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "hex",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String hex(byte b)\n{\r\n    StringBuilder strBuilder = new StringBuilder();\r\n    strBuilder.append(HEXES.charAt((b & 0xF0) >> 4)).append(HEXES.charAt((b & 0x0F)));\r\n    return strBuilder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getFileId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFileId()\n{\r\n    return fileId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getNamenodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getNamenodeId()\n{\r\n    return namenodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getContent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] getContent()\n{\r\n    return handle.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder s = new StringBuilder();\r\n    for (int i = 0; i < handle.length; i++) {\r\n        s.append(hex(handle[i]));\r\n    }\r\n    return s.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof FileHandle)) {\r\n        return false;\r\n    }\r\n    FileHandle h = (FileHandle) o;\r\n    return Arrays.equals(handle, h.handle);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Arrays.hashCode(handle);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "dumpFileHandle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String dumpFileHandle()\n{\r\n    return \"fileId: \" + fileId + \" namenodeId: \" + namenodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void read(XDR xdr)\n{\r\n    int length = xdr.readInt();\r\n    Preconditions.checkState(length == 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(XDR xdr)\n{\r\n    xdr.writeInt(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "XDR serialize(XDR xdr)\n{\r\n    xdr.writeInt(program);\r\n    xdr.writeInt(version);\r\n    xdr.writeInt(transport);\r\n    xdr.writeInt(port);\r\n    return xdr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "PortmapMapping deserialize(XDR xdr)\n{\r\n    return new PortmapMapping(xdr.readInt(), xdr.readInt(), xdr.readInt(), xdr.readInt());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "getPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getPort()\n{\r\n    return port;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "key",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String key(PortmapMapping mapping)\n{\r\n    return mapping.program + \" \" + mapping.version + \" \" + mapping.transport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return String.format(\"(PortmapMapping-%d:%d:%d:%d)\", program, version, transport, port);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "data",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteBuf data()\n{\r\n    return this.content();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "remoteAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SocketAddress remoteAddress()\n{\r\n    return this.recipient();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "run",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void run() throws InterruptedException\n{\r\n    bossGroup = new NioEventLoopGroup();\r\n    workerGroup = new NioEventLoopGroup(workerCount, Executors.newCachedThreadPool());\r\n    server = new ServerBootstrap();\r\n    server.group(bossGroup, workerGroup).channel(NioServerSocketChannel.class).childHandler(new ChannelInitializer<SocketChannel>() {\r\n\r\n        @Override\r\n        protected void initChannel(SocketChannel ch) throws Exception {\r\n            ChannelPipeline p = ch.pipeline();\r\n            p.addLast(RpcUtil.constructRpcFrameDecoder(), RpcUtil.STAGE_RPC_MESSAGE_PARSER, rpcProgram, RpcUtil.STAGE_RPC_TCP_RESPONSE);\r\n        }\r\n    }).childOption(ChannelOption.TCP_NODELAY, true).childOption(ChannelOption.SO_KEEPALIVE, true).childOption(ChannelOption.SO_REUSEADDR, true).option(ChannelOption.SO_REUSEADDR, true);\r\n    ChannelFuture f = server.bind(new InetSocketAddress(port)).sync();\r\n    ch = f.channel();\r\n    InetSocketAddress socketAddr = (InetSocketAddress) ch.localAddress();\r\n    boundPort = socketAddr.getPort();\r\n    LOG.info(\"Started listening to TCP requests at port \" + boundPort + \" for \" + rpcProgram + \" with workerCount \" + workerCount);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getBoundPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getBoundPort()\n{\r\n    return this.boundPort;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "shutdown",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void shutdown()\n{\r\n    if (ch != null) {\r\n        ch.close().awaitUninterruptibly();\r\n        ch = null;\r\n    }\r\n    if (workerGroup != null) {\r\n        workerGroup.shutdownGracefully();\r\n        workerGroup = null;\r\n    }\r\n    if (bossGroup != null) {\r\n        bossGroup.shutdownGracefully();\r\n        bossGroup = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSize()\n{\r\n    return size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getMtime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NfsTime getMtime()\n{\r\n    return mtime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getCtime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NfsTime getCtime()\n{\r\n    return ctime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "WccAttr deserialize(XDR xdr)\n{\r\n    long size = xdr.readHyper();\r\n    NfsTime mtime = NfsTime.deserialize(xdr);\r\n    NfsTime ctime = NfsTime.deserialize(xdr);\r\n    return new WccAttr(size, mtime, ctime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serialize(XDR out)\n{\r\n    out.writeLongAsHyper(size);\r\n    if (mtime == null) {\r\n        mtime = new NfsTime(0);\r\n    }\r\n    mtime.serialize(out);\r\n    if (ctime == null) {\r\n        ctime = new NfsTime(0);\r\n    }\r\n    ctime.serialize(out);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "READDIR3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    long cookie = xdr.readHyper();\r\n    long cookieVerf = xdr.readHyper();\r\n    int count = xdr.readInt();\r\n    return new READDIR3Request(handle, cookie, cookieVerf, count);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getCookie",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCookie()\n{\r\n    return this.cookie;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getCookieVerf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCookieVerf()\n{\r\n    return this.cookieVerf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCount()\n{\r\n    return this.count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    xdr.writeLongAsHyper(cookie);\r\n    xdr.writeLongAsHyper(cookieVerf);\r\n    xdr.writeInt(count);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "LINK3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    FileHandle fromDirHandle = readHandle(xdr);\r\n    String fromName = xdr.readString();\r\n    return new LINK3Request(handle, fromDirHandle, fromName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getFromDirHandle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileHandle getFromDirHandle()\n{\r\n    return fromDirHandle;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getFromName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFromName()\n{\r\n    return fromName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    fromDirHandle.serialize(xdr);\r\n    xdr.writeInt(fromName.length());\r\n    xdr.writeFixedOpaque(fromName.getBytes(StandardCharsets.UTF_8), fromName.length());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "readHandle",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileHandle readHandle(XDR xdr) throws IOException\n{\r\n    FileHandle handle = new FileHandle();\r\n    if (!handle.deserialize(xdr)) {\r\n        throw new IOException(\"can't deserialize file handle\");\r\n    }\r\n    return handle;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void serialize(XDR xdr)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "getInstance",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "NfsExports getInstance(Configuration conf)\n{\r\n    if (exports == null) {\r\n        String matchHosts = conf.get(CommonConfigurationKeys.NFS_EXPORTS_ALLOWED_HOSTS_KEY, CommonConfigurationKeys.NFS_EXPORTS_ALLOWED_HOSTS_KEY_DEFAULT);\r\n        int cacheSize = conf.getInt(Nfs3Constant.NFS_EXPORTS_CACHE_SIZE_KEY, Nfs3Constant.NFS_EXPORTS_CACHE_SIZE_DEFAULT);\r\n        long expirationPeriodNano = conf.getLong(Nfs3Constant.NFS_EXPORTS_CACHE_EXPIRYTIME_MILLIS_KEY, Nfs3Constant.NFS_EXPORTS_CACHE_EXPIRYTIME_MILLIS_DEFAULT) * 1000 * 1000;\r\n        try {\r\n            exports = new NfsExports(cacheSize, expirationPeriodNano, matchHosts);\r\n        } catch (IllegalArgumentException e) {\r\n            LOG.error(\"Invalid NFS Exports provided: \", e);\r\n            return exports;\r\n        }\r\n    }\r\n    return exports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "getHostGroupList",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String[] getHostGroupList()\n{\r\n    int listSize = mMatches.size();\r\n    String[] hostGroups = new String[listSize];\r\n    for (int i = 0; i < mMatches.size(); i++) {\r\n        hostGroups[i] = mMatches.get(i).getHostGroup();\r\n    }\r\n    return hostGroups;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "getAccessPrivilege",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AccessPrivilege getAccessPrivilege(InetAddress addr)\n{\r\n    return getAccessPrivilege(addr.getHostAddress(), addr.getCanonicalHostName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "getAccessPrivilege",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "AccessPrivilege getAccessPrivilege(String address, String hostname)\n{\r\n    long now = System.nanoTime();\r\n    AccessCacheEntry newEntry = new AccessCacheEntry(address, AccessPrivilege.NONE, now + this.cacheExpirationPeriod);\r\n    AccessCacheEntry cachedEntry = accessCache.get(newEntry);\r\n    if (cachedEntry != null && now < cachedEntry.expirationTime) {\r\n        return cachedEntry.access;\r\n    } else {\r\n        for (Match match : mMatches) {\r\n            if (match.isIncluded(address, hostname)) {\r\n                if (match.accessPrivilege == AccessPrivilege.READ_ONLY) {\r\n                    newEntry.access = AccessPrivilege.READ_ONLY;\r\n                    break;\r\n                } else if (match.accessPrivilege == AccessPrivilege.READ_WRITE) {\r\n                    newEntry.access = AccessPrivilege.READ_WRITE;\r\n                }\r\n            }\r\n        }\r\n        accessCache.put(newEntry);\r\n        return newEntry.access;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "getMatch",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "Match getMatch(String line)\n{\r\n    String[] parts = line.split(\"\\\\s+\");\r\n    final String host;\r\n    AccessPrivilege privilege = AccessPrivilege.READ_ONLY;\r\n    switch(parts.length) {\r\n        case 1:\r\n            host = StringUtils.toLowerCase(parts[0]).trim();\r\n            break;\r\n        case 2:\r\n            host = StringUtils.toLowerCase(parts[0]).trim();\r\n            String option = parts[1].trim();\r\n            if (\"rw\".equalsIgnoreCase(option)) {\r\n                privilege = AccessPrivilege.READ_WRITE;\r\n            }\r\n            break;\r\n        default:\r\n            throw new IllegalArgumentException(\"Incorrectly formatted line '\" + line + \"'\");\r\n    }\r\n    if (host.equals(\"*\")) {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Using match all for '\" + host + \"' and \" + privilege);\r\n        }\r\n        return new AnonymousMatch(privilege);\r\n    } else if (CIDR_FORMAT_SHORT.matcher(host).matches()) {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Using CIDR match for '\" + host + \"' and \" + privilege);\r\n        }\r\n        return new CIDRMatch(privilege, new SubnetUtils(host).getInfo());\r\n    } else if (CIDR_FORMAT_LONG.matcher(host).matches()) {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Using CIDR match for '\" + host + \"' and \" + privilege);\r\n        }\r\n        String[] pair = host.split(\"/\");\r\n        return new CIDRMatch(privilege, new SubnetUtils(pair[0], pair[1]).getInfo());\r\n    } else if (host.contains(\"*\") || host.contains(\"?\") || host.contains(\"[\") || host.contains(\"]\") || host.contains(\"(\") || host.contains(\")\")) {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Using Regex match for '\" + host + \"' and \" + privilege);\r\n        }\r\n        return new RegexMatch(privilege, host);\r\n    } else if (HOSTNAME_FORMAT.matcher(host).matches()) {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Using exact match for '\" + host + \"' and \" + privilege);\r\n        }\r\n        return new ExactMatch(privilege, host);\r\n    } else {\r\n        throw new IllegalArgumentException(\"Invalid hostname provided '\" + host + \"'\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    if (this.status == Nfs3Status.NFS3_OK) {\r\n        fileHandle.serialize(out);\r\n        out.writeBoolean(true);\r\n        postOpObjAttr.serialize(out);\r\n    }\r\n    out.writeBoolean(true);\r\n    postOpDirAttr.serialize(out);\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getMode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMode()\n{\r\n    return mode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getUid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getUid()\n{\r\n    return uid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getGid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getGid()\n{\r\n    return gid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "setGid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setGid(int gid)\n{\r\n    this.gid = gid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSize()\n{\r\n    return size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getAtime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NfsTime getAtime()\n{\r\n    return atime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getMtime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NfsTime getMtime()\n{\r\n    return mtime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getUpdateFields",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "EnumSet<SetAttrField> getUpdateFields()\n{\r\n    return updateFields;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "setUpdateFields",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUpdateFields(EnumSet<SetAttrField> updateFields)\n{\r\n    this.updateFields = updateFields;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    if (!updateFields.contains(SetAttrField.MODE)) {\r\n        xdr.writeBoolean(false);\r\n    } else {\r\n        xdr.writeBoolean(true);\r\n        xdr.writeInt(mode);\r\n    }\r\n    if (!updateFields.contains(SetAttrField.UID)) {\r\n        xdr.writeBoolean(false);\r\n    } else {\r\n        xdr.writeBoolean(true);\r\n        xdr.writeInt(uid);\r\n    }\r\n    if (!updateFields.contains(SetAttrField.GID)) {\r\n        xdr.writeBoolean(false);\r\n    } else {\r\n        xdr.writeBoolean(true);\r\n        xdr.writeInt(gid);\r\n    }\r\n    if (!updateFields.contains(SetAttrField.SIZE)) {\r\n        xdr.writeBoolean(false);\r\n    } else {\r\n        xdr.writeBoolean(true);\r\n        xdr.writeLongAsHyper(size);\r\n    }\r\n    if (!updateFields.contains(SetAttrField.ATIME)) {\r\n        xdr.writeBoolean(false);\r\n    } else {\r\n        xdr.writeBoolean(true);\r\n        atime.serialize(xdr);\r\n    }\r\n    if (!updateFields.contains(SetAttrField.MTIME)) {\r\n        xdr.writeBoolean(false);\r\n    } else {\r\n        xdr.writeBoolean(true);\r\n        mtime.serialize(xdr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void deserialize(XDR xdr)\n{\r\n    if (xdr.readBoolean()) {\r\n        mode = xdr.readInt();\r\n        updateFields.add(SetAttrField.MODE);\r\n    }\r\n    if (xdr.readBoolean()) {\r\n        uid = xdr.readInt();\r\n        updateFields.add(SetAttrField.UID);\r\n    }\r\n    if (xdr.readBoolean()) {\r\n        gid = xdr.readInt();\r\n        updateFields.add(SetAttrField.GID);\r\n    }\r\n    if (xdr.readBoolean()) {\r\n        size = xdr.readHyper();\r\n        updateFields.add(SetAttrField.SIZE);\r\n    }\r\n    int timeSetHow = xdr.readInt();\r\n    if (timeSetHow == TIME_SET_TO_CLIENT_TIME) {\r\n        atime = NfsTime.deserialize(xdr);\r\n        updateFields.add(SetAttrField.ATIME);\r\n    } else if (timeSetHow == TIME_SET_TO_SERVER_TIME) {\r\n        atime = new NfsTime(System.currentTimeMillis());\r\n        updateFields.add(SetAttrField.ATIME);\r\n    }\r\n    timeSetHow = xdr.readInt();\r\n    if (timeSetHow == TIME_SET_TO_CLIENT_TIME) {\r\n        mtime = NfsTime.deserialize(xdr);\r\n        updateFields.add(SetAttrField.MTIME);\r\n    } else if (timeSetHow == TIME_SET_TO_SERVER_TIME) {\r\n        mtime = new NfsTime(System.currentTimeMillis());\r\n        updateFields.add(SetAttrField.MTIME);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "voidReply",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "XDR voidReply(XDR xdr, int xid)\n{\r\n    RpcAcceptedReply.getAcceptInstance(xid, new VerifierNone()).write(xdr);\r\n    return xdr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "intReply",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "XDR intReply(XDR xdr, int xid, int value)\n{\r\n    RpcAcceptedReply.getAcceptInstance(xid, new VerifierNone()).write(xdr);\r\n    xdr.writeInt(value);\r\n    return xdr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "booleanReply",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "XDR booleanReply(XDR xdr, int xid, boolean value)\n{\r\n    RpcAcceptedReply.getAcceptInstance(xid, new VerifierNone()).write(xdr);\r\n    xdr.writeBoolean(value);\r\n    return xdr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "pmapList",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "XDR pmapList(XDR xdr, int xid, PortmapMapping[] list)\n{\r\n    RpcAcceptedReply.getAcceptInstance(xid, new VerifierNone()).write(xdr);\r\n    for (PortmapMapping mapping : list) {\r\n        xdr.writeBoolean(true);\r\n        mapping.serialize(xdr);\r\n    }\r\n    xdr.writeBoolean(false);\r\n    return xdr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\mount",
  "methodName" : "writeMNTResponse",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "XDR writeMNTResponse(int status, XDR xdr, int xid, byte[] handle)\n{\r\n    RpcAcceptedReply.getAcceptInstance(xid, new VerifierNone()).write(xdr);\r\n    xdr.writeInt(status);\r\n    if (status == MNT_OK) {\r\n        xdr.writeVariableOpaque(handle);\r\n        xdr.writeInt(1);\r\n        xdr.writeInt(AuthFlavor.AUTH_SYS.getValue());\r\n    }\r\n    return xdr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\mount",
  "methodName" : "writeMountList",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "XDR writeMountList(XDR xdr, int xid, List<MountEntry> mounts)\n{\r\n    RpcAcceptedReply.getAcceptInstance(xid, new VerifierNone()).write(xdr);\r\n    for (MountEntry mountEntry : mounts) {\r\n        xdr.writeBoolean(true);\r\n        xdr.writeString(mountEntry.getHost());\r\n        xdr.writeString(mountEntry.getPath());\r\n    }\r\n    xdr.writeBoolean(false);\r\n    return xdr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\mount",
  "methodName" : "writeExportList",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "XDR writeExportList(XDR xdr, int xid, List<String> exports, List<NfsExports> hostMatcher)\n{\r\n    assert (exports.size() == hostMatcher.size());\r\n    RpcAcceptedReply.getAcceptInstance(xid, new VerifierNone()).write(xdr);\r\n    for (int i = 0; i < exports.size(); i++) {\r\n        xdr.writeBoolean(true);\r\n        xdr.writeString(exports.get(i));\r\n        String[] hostGroups = hostMatcher.get(i).getHostGroupList();\r\n        if (hostGroups.length > 0) {\r\n            for (int j = 0; j < hostGroups.length; j++) {\r\n                xdr.writeBoolean(true);\r\n                xdr.writeVariableOpaque(hostGroups[j].getBytes(StandardCharsets.UTF_8));\r\n            }\r\n        }\r\n        xdr.writeBoolean(false);\r\n    }\r\n    xdr.writeBoolean(false);\r\n    return xdr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "XDR write(XDR xdr)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getXid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getXid()\n{\r\n    return xid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getMessageType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Type getMessageType()\n{\r\n    return messageType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "validateMessageType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void validateMessageType(Type expected)\n{\r\n    if (expected != messageType) {\r\n        throw new IllegalArgumentException(\"Message type is expected to be \" + expected + \" but got \" + messageType);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ACCESS3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    Nfs3FileAttributes postOpAttr = null;\r\n    int access = 0;\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        postOpAttr = Nfs3FileAttributes.deserialize(xdr);\r\n        access = xdr.readInt();\r\n    }\r\n    return new ACCESS3Response(status, postOpAttr, access);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    if (this.getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeBoolean(true);\r\n        postOpAttr.serialize(out);\r\n        out.writeInt(access);\r\n    } else {\r\n        out.writeBoolean(false);\r\n    }\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ACCESS3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    return new ACCESS3Request(handle);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getVerifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RpcAuthInfo getVerifier()\n{\r\n    return verifier;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "RpcReply read(XDR xdr)\n{\r\n    int xid = xdr.readInt();\r\n    final Type messageType = Type.fromValue(xdr.readInt());\r\n    Preconditions.checkState(messageType == RpcMessage.Type.RPC_REPLY);\r\n    ReplyState stat = ReplyState.fromValue(xdr.readInt());\r\n    switch(stat) {\r\n        case MSG_ACCEPTED:\r\n            return RpcAcceptedReply.read(xid, stat, xdr);\r\n        case MSG_DENIED:\r\n            return RpcDeniedReply.read(xid, stat, xdr);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReplyState getState()\n{\r\n    return replyState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getPostOpAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Nfs3FileAttributes getPostOpAttr()\n{\r\n    return postOpAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getCount()\n{\r\n    return count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "isEof",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isEof()\n{\r\n    return eof;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getData",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ByteBuffer getData()\n{\r\n    return data;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "READ3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    xdr.readBoolean();\r\n    Nfs3FileAttributes postOpAttr = Nfs3FileAttributes.deserialize(xdr);\r\n    int count = 0;\r\n    boolean eof = false;\r\n    byte[] data = new byte[0];\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        count = xdr.readInt();\r\n        eof = xdr.readBoolean();\r\n        int len = xdr.readInt();\r\n        assert (len == count);\r\n        data = xdr.readFixedOpaque(count);\r\n    }\r\n    return new READ3Response(status, postOpAttr, count, eof, ByteBuffer.wrap(data));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    out.writeBoolean(true);\r\n    postOpAttr.serialize(out);\r\n    if (getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeInt(count);\r\n        out.writeBoolean(eof);\r\n        out.writeInt(count);\r\n        out.writeFixedOpaque(data.array(), count);\r\n    }\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "readFlavorAndCredentials",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Credentials readFlavorAndCredentials(XDR xdr)\n{\r\n    AuthFlavor flavor = AuthFlavor.fromValue(xdr.readInt());\r\n    final Credentials credentials;\r\n    if (flavor == AuthFlavor.AUTH_NONE) {\r\n        credentials = new CredentialsNone();\r\n    } else if (flavor == AuthFlavor.AUTH_SYS) {\r\n        credentials = new CredentialsSys();\r\n    } else if (flavor == AuthFlavor.RPCSEC_GSS) {\r\n        credentials = new CredentialsGSS();\r\n    } else {\r\n        throw new UnsupportedOperationException(\"Unsupported Credentials Flavor \" + flavor);\r\n    }\r\n    credentials.read(xdr);\r\n    return credentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "writeFlavorAndCredentials",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void writeFlavorAndCredentials(Credentials cred, XDR xdr)\n{\r\n    if (cred instanceof CredentialsNone) {\r\n        xdr.writeInt(AuthFlavor.AUTH_NONE.getValue());\r\n    } else if (cred instanceof CredentialsSys) {\r\n        xdr.writeInt(AuthFlavor.AUTH_SYS.getValue());\r\n    } else if (cred instanceof CredentialsGSS) {\r\n        xdr.writeInt(AuthFlavor.RPCSEC_GSS.getValue());\r\n    } else {\r\n        throw new UnsupportedOperationException(\"Cannot recognize the verifier\");\r\n    }\r\n    cred.write(xdr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getCredentialLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getCredentialLength()\n{\r\n    return mCredentialsLength;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getFileWcc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccData getFileWcc()\n{\r\n    return fileWcc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getVerf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVerf()\n{\r\n    return verf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "COMMIT3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    long verf = 0;\r\n    WccData fileWcc = WccData.deserialize(xdr);\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        verf = xdr.readHyper();\r\n    }\r\n    return new COMMIT3Response(status, fileWcc, verf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    fileWcc.serialize(out);\r\n    if (getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeLongAsHyper(verf);\r\n    }\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getObjHandle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileHandle getObjHandle()\n{\r\n    return objHandle;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getPostOpObjAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Nfs3FileAttributes getPostOpObjAttr()\n{\r\n    return postOpObjAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getDirWcc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccData getDirWcc()\n{\r\n    return dirWcc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "CREATE3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    FileHandle objHandle = new FileHandle();\r\n    Nfs3FileAttributes postOpObjAttr = null;\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        xdr.readBoolean();\r\n        objHandle.deserialize(xdr);\r\n        xdr.readBoolean();\r\n        postOpObjAttr = Nfs3FileAttributes.deserialize(xdr);\r\n    }\r\n    WccData dirWcc = WccData.deserialize(xdr);\r\n    return new CREATE3Response(status, objHandle, postOpObjAttr, dirWcc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    if (getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeBoolean(true);\r\n        objHandle.serialize(out);\r\n        out.writeBoolean(true);\r\n        postOpObjAttr.serialize(out);\r\n    }\r\n    if (dirWcc == null) {\r\n        dirWcc = new WccData(null, null);\r\n    }\r\n    dirWcc.serialize(out);\r\n    return out;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "setChannelHandler",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ChannelInitializer<SocketChannel> setChannelHandler()\n{\r\n    return new ChannelInitializer<SocketChannel>() {\r\n\r\n        @Override\r\n        protected void initChannel(SocketChannel ch) throws Exception {\r\n            ChannelPipeline p = ch.pipeline();\r\n            p.addLast(RpcUtil.constructRpcFrameDecoder(), new SimpleTcpClientHandler(request));\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "run",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void run()\n{\r\n    workerGroup = new NioEventLoopGroup();\r\n    Bootstrap bootstrap = new Bootstrap().group(workerGroup).channel(NioSocketChannel.class);\r\n    try {\r\n        future = bootstrap.handler(setChannelHandler()).option(ChannelOption.TCP_NODELAY, true).option(ChannelOption.SO_KEEPALIVE, true).connect(new InetSocketAddress(host, port)).sync();\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    } finally {\r\n        if (oneShot) {\r\n            stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "stop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void stop()\n{\r\n    try {\r\n        if (future != null) {\r\n            future.channel().closeFuture().sync();\r\n        }\r\n    } catch (InterruptedException e) {\r\n        e.printStackTrace();\r\n    } finally {\r\n        workerGroup.shutdownGracefully();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "run",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void run() throws IOException\n{\r\n    InetAddress IPAddress = InetAddress.getByName(host);\r\n    byte[] sendData = request.getBytes();\r\n    byte[] receiveData = new byte[65535];\r\n    DatagramSocket socket = this.clientSocket == null ? new DatagramSocket() : this.clientSocket;\r\n    try {\r\n        DatagramPacket sendPacket = new DatagramPacket(sendData, sendData.length, IPAddress, port);\r\n        socket.send(sendPacket);\r\n        socket.setSoTimeout(udpTimeoutMillis);\r\n        DatagramPacket receivePacket = new DatagramPacket(receiveData, receiveData.length);\r\n        socket.receive(receivePacket);\r\n        XDR xdr = new XDR(Arrays.copyOfRange(receiveData, 0, receivePacket.getLength()));\r\n        RpcReply reply = RpcReply.read(xdr);\r\n        if (reply.getState() != RpcReply.ReplyState.MSG_ACCEPTED) {\r\n            throw new IOException(\"Request failed: \" + reply.getState());\r\n        }\r\n    } finally {\r\n        if (this.clientSocket == null) {\r\n            socket.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\mount",
  "methodName" : "getRpcProgram",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RpcProgram getRpcProgram()\n{\r\n    return rpcProgram;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\mount",
  "methodName" : "startUDPServer",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void startUDPServer()\n{\r\n    udpServer = new SimpleUdpServer(rpcProgram.getPort(), rpcProgram, 1);\r\n    rpcProgram.startDaemons();\r\n    try {\r\n        udpServer.run();\r\n    } catch (Throwable e) {\r\n        LOG.error(\"Failed to start the UDP server.\", e);\r\n        if (udpServer.getBoundPort() > 0) {\r\n            rpcProgram.unregister(PortmapMapping.TRANSPORT_UDP, udpServer.getBoundPort());\r\n        }\r\n        udpServer.shutdown();\r\n        terminate(1, e);\r\n    }\r\n    udpBoundPort = udpServer.getBoundPort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\mount",
  "methodName" : "startTCPServer",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void startTCPServer()\n{\r\n    tcpServer = new SimpleTcpServer(rpcProgram.getPort(), rpcProgram, 1);\r\n    rpcProgram.startDaemons();\r\n    try {\r\n        tcpServer.run();\r\n    } catch (Throwable e) {\r\n        LOG.error(\"Failed to start the TCP server.\", e);\r\n        if (tcpServer.getBoundPort() > 0) {\r\n            rpcProgram.unregister(PortmapMapping.TRANSPORT_TCP, tcpServer.getBoundPort());\r\n        }\r\n        tcpServer.shutdown();\r\n        terminate(1, e);\r\n    }\r\n    tcpBoundPort = tcpServer.getBoundPort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\mount",
  "methodName" : "start",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void start(boolean register)\n{\r\n    startUDPServer();\r\n    startTCPServer();\r\n    if (register) {\r\n        ShutdownHookManager.get().addShutdownHook(new Unregister(), SHUTDOWN_HOOK_PRIORITY);\r\n        try {\r\n            rpcProgram.register(PortmapMapping.TRANSPORT_UDP, udpBoundPort);\r\n            rpcProgram.register(PortmapMapping.TRANSPORT_TCP, tcpBoundPort);\r\n        } catch (Throwable e) {\r\n            LOG.error(\"Failed to register the MOUNT service.\", e);\r\n            terminate(1, e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\mount",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void stop()\n{\r\n    if (udpBoundPort > 0) {\r\n        rpcProgram.unregister(PortmapMapping.TRANSPORT_UDP, udpBoundPort);\r\n        udpBoundPort = 0;\r\n    }\r\n    if (tcpBoundPort > 0) {\r\n        rpcProgram.unregister(PortmapMapping.TRANSPORT_TCP, tcpBoundPort);\r\n        tcpBoundPort = 0;\r\n    }\r\n    if (udpServer != null) {\r\n        udpServer.shutdown();\r\n        udpServer = null;\r\n    }\r\n    if (tcpServer != null) {\r\n        tcpServer.shutdown();\r\n        tcpServer = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getProgram",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getProgram()\n{\r\n    return program;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "callCompleted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void callCompleted(InetAddress clientId, int xid, RpcResponse response)\n{\r\n    ClientRequest req = new ClientRequest(clientId, xid);\r\n    CacheEntry e;\r\n    synchronized (map) {\r\n        e = map.get(req);\r\n    }\r\n    e.response = response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "checkOrAddToCache",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CacheEntry checkOrAddToCache(InetAddress clientId, int xid)\n{\r\n    ClientRequest req = new ClientRequest(clientId, xid);\r\n    CacheEntry e;\r\n    synchronized (map) {\r\n        e = map.get(req);\r\n        if (e == null) {\r\n            map.put(req, new CacheEntry());\r\n        }\r\n    }\r\n    return e;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "size",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int size()\n{\r\n    return map.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "iterator",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Iterator<Entry<ClientRequest, CacheEntry>> iterator()\n{\r\n    return map.entrySet().iterator();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "FSSTAT3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    xdr.readBoolean();\r\n    Nfs3FileAttributes postOpAttr = Nfs3FileAttributes.deserialize(xdr);\r\n    long tbytes = 0;\r\n    long fbytes = 0;\r\n    long abytes = 0;\r\n    long tfiles = 0;\r\n    long ffiles = 0;\r\n    long afiles = 0;\r\n    int invarsec = 0;\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        tbytes = xdr.readHyper();\r\n        fbytes = xdr.readHyper();\r\n        abytes = xdr.readHyper();\r\n        tfiles = xdr.readHyper();\r\n        ffiles = xdr.readHyper();\r\n        afiles = xdr.readHyper();\r\n        invarsec = xdr.readInt();\r\n    }\r\n    return new FSSTAT3Response(status, postOpAttr, tbytes, fbytes, abytes, tfiles, ffiles, afiles, invarsec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    out.writeBoolean(true);\r\n    if (postOpAttr == null) {\r\n        postOpAttr = new Nfs3FileAttributes();\r\n    }\r\n    postOpAttr.serialize(out);\r\n    if (getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeLongAsHyper(tbytes);\r\n        out.writeLongAsHyper(fbytes);\r\n        out.writeLongAsHyper(abytes);\r\n        out.writeLongAsHyper(tfiles);\r\n        out.writeLongAsHyper(ffiles);\r\n        out.writeLongAsHyper(afiles);\r\n        out.writeInt(invarsec);\r\n    }\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "header",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RpcMessage header()\n{\r\n    return header;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "data",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ByteBuf data()\n{\r\n    return data;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "channel",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Channel channel()\n{\r\n    return channel;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "remoteAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SocketAddress remoteAddress()\n{\r\n    return remoteAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "CREATE3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    String name = xdr.readString();\r\n    int mode = xdr.readInt();\r\n    SetAttr3 objAttr = new SetAttr3();\r\n    long verf = 0;\r\n    if ((mode == Nfs3Constant.CREATE_UNCHECKED) || (mode == Nfs3Constant.CREATE_GUARDED)) {\r\n        objAttr.deserialize(xdr);\r\n    } else if (mode == Nfs3Constant.CREATE_EXCLUSIVE) {\r\n        verf = xdr.readHyper();\r\n    } else {\r\n        throw new IOException(\"Wrong create mode:\" + mode);\r\n    }\r\n    return new CREATE3Request(handle, name, mode, objAttr, verf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getMode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMode()\n{\r\n    return mode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getObjAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SetAttr3 getObjAttr()\n{\r\n    return objAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getVerf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVerf()\n{\r\n    return verf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    xdr.writeInt(name.length());\r\n    xdr.writeFixedOpaque(name.getBytes(StandardCharsets.UTF_8), name.length());\r\n    xdr.writeInt(mode);\r\n    objAttr.serialize(xdr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "PATHCONF3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    xdr.readBoolean();\r\n    Nfs3FileAttributes objPostOpAttr = Nfs3FileAttributes.deserialize(xdr);\r\n    int linkMax = 0;\r\n    int nameMax = 0;\r\n    boolean noTrunc = false;\r\n    boolean chownRestricted = false;\r\n    boolean caseInsensitive = false;\r\n    boolean casePreserving = false;\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        linkMax = xdr.readInt();\r\n        nameMax = xdr.readInt();\r\n        noTrunc = xdr.readBoolean();\r\n        chownRestricted = xdr.readBoolean();\r\n        caseInsensitive = xdr.readBoolean();\r\n        casePreserving = xdr.readBoolean();\r\n    }\r\n    return new PATHCONF3Response(status, objPostOpAttr, linkMax, nameMax, noTrunc, chownRestricted, caseInsensitive, casePreserving);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    out.writeBoolean(true);\r\n    postOpAttr.serialize(out);\r\n    if (getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeInt(linkMax);\r\n        out.writeInt(nameMax);\r\n        out.writeBoolean(noTrunc);\r\n        out.writeBoolean(chownRestricted);\r\n        out.writeBoolean(caseInsensitive);\r\n        out.writeBoolean(casePreserving);\r\n    }\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "getSeconds",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getSeconds()\n{\r\n    return seconds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "getNseconds",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getNseconds()\n{\r\n    return nseconds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "getMilliSeconds",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getMilliSeconds()\n{\r\n    return (long) (seconds) * 1000 + (long) (nseconds) / 1000000;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    xdr.writeInt(getSeconds());\r\n    xdr.writeInt(getNseconds());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NfsTime deserialize(XDR xdr)\n{\r\n    return new NfsTime(xdr.readInt(), xdr.readInt());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int hashCode()\n{\r\n    return seconds ^ nseconds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (!(o instanceof NfsTime)) {\r\n        return false;\r\n    }\r\n    return ((NfsTime) o).getMilliSeconds() == this.getMilliSeconds();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"(NfsTime-\" + seconds + \"s, \" + nseconds + \"ns)\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getGID",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getGID()\n{\r\n    return mGID;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getUID",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getUID()\n{\r\n    return mUID;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getAuxGIDs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int[] getAuxGIDs()\n{\r\n    return mAuxGIDs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getStamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getStamp()\n{\r\n    return mStamp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "setGID",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setGID(int gid)\n{\r\n    this.mGID = gid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "setUID",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUID(int uid)\n{\r\n    this.mUID = uid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "setStamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setStamp(int stamp)\n{\r\n    this.mStamp = stamp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "setHostName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHostName(String hostname)\n{\r\n    this.mHostName = hostname;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void read(XDR xdr)\n{\r\n    mCredentialsLength = xdr.readInt();\r\n    mStamp = xdr.readInt();\r\n    mHostName = xdr.readString();\r\n    mUID = xdr.readInt();\r\n    mGID = xdr.readInt();\r\n    int length = xdr.readInt();\r\n    mAuxGIDs = new int[length];\r\n    for (int i = 0; i < length; i++) {\r\n        mAuxGIDs[i] = xdr.readInt();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void write(XDR xdr)\n{\r\n    int padding = 0;\r\n    padding = 4 - (mHostName.getBytes(StandardCharsets.UTF_8).length % 4);\r\n    padding = padding % 4;\r\n    mCredentialsLength = 20 + mHostName.getBytes(StandardCharsets.UTF_8).length;\r\n    mCredentialsLength = mCredentialsLength + padding;\r\n    if (mAuxGIDs != null && mAuxGIDs.length > 0) {\r\n        mCredentialsLength += mAuxGIDs.length * 4;\r\n    }\r\n    xdr.writeInt(mCredentialsLength);\r\n    xdr.writeInt(mStamp);\r\n    xdr.writeString(mHostName);\r\n    xdr.writeInt(mUID);\r\n    xdr.writeInt(mGID);\r\n    if ((mAuxGIDs == null) || (mAuxGIDs.length == 0)) {\r\n        xdr.writeInt(0);\r\n    } else {\r\n        xdr.writeInt(mAuxGIDs.length);\r\n        for (int i = 0; i < mAuxGIDs.length; i++) {\r\n            xdr.writeInt(mAuxGIDs[i]);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getDirWcc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccData getDirWcc()\n{\r\n    return dirWcc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RMDIR3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    WccData dirWcc = WccData.deserialize(xdr);\r\n    return new RMDIR3Response(status, dirWcc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    dirWcc.serialize(out);\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void read(XDR xdr)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void write(XDR xdr)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getFlavor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AuthFlavor getFlavor()\n{\r\n    return flavor;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"(AuthFlavor:\" + flavor + \")\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void read(XDR xdr)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void write(XDR xdr)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "setPostOpAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPostOpAttr(Nfs3FileAttributes postOpAttr)\n{\r\n    this.postOpAttr = postOpAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GETATTR3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    Nfs3FileAttributes attr = (status == Nfs3Status.NFS3_OK) ? Nfs3FileAttributes.deserialize(xdr) : new Nfs3FileAttributes();\r\n    return new GETATTR3Response(status, attr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    if (getStatus() == Nfs3Status.NFS3_OK) {\r\n        postOpAttr.serialize(out);\r\n    }\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getObjFileHandle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileHandle getObjFileHandle()\n{\r\n    return objFileHandle;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getObjAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Nfs3FileAttributes getObjAttr()\n{\r\n    return objAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getDirWcc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccData getDirWcc()\n{\r\n    return dirWcc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "MKDIR3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    FileHandle objFileHandle = new FileHandle();\r\n    Nfs3FileAttributes objAttr = null;\r\n    WccData dirWcc;\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        xdr.readBoolean();\r\n        objFileHandle.deserialize(xdr);\r\n        xdr.readBoolean();\r\n        objAttr = Nfs3FileAttributes.deserialize(xdr);\r\n    }\r\n    dirWcc = WccData.deserialize(xdr);\r\n    return new MKDIR3Response(status, objFileHandle, objAttr, dirWcc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    if (getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeBoolean(true);\r\n        objFileHandle.serialize(out);\r\n        out.writeBoolean(true);\r\n        objAttr.serialize(out);\r\n    }\r\n    dirWcc.serialize(out);\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getAcceptInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RpcAcceptedReply getAcceptInstance(int xid, Verifier verifier)\n{\r\n    return getInstance(xid, AcceptState.SUCCESS, verifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RpcAcceptedReply getInstance(int xid, AcceptState state, Verifier verifier)\n{\r\n    return new RpcAcceptedReply(xid, ReplyState.MSG_ACCEPTED, verifier, state);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RpcAcceptedReply read(int xid, ReplyState replyState, XDR xdr)\n{\r\n    Verifier verifier = Verifier.readFlavorAndVerifier(xdr);\r\n    AcceptState acceptState = AcceptState.fromValue(xdr.readInt());\r\n    return new RpcAcceptedReply(xid, replyState, verifier, acceptState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getAcceptState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AcceptState getAcceptState()\n{\r\n    return acceptState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "XDR write(XDR xdr)\n{\r\n    xdr.writeInt(xid);\r\n    xdr.writeInt(messageType.getValue());\r\n    xdr.writeInt(replyState.getValue());\r\n    Verifier.writeFlavorAndVerifier(verifier, xdr);\r\n    xdr.writeInt(acceptState.getValue());\r\n    return xdr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void read(XDR xdr)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void write(XDR xdr)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "RpcCall read(XDR xdr)\n{\r\n    return new RpcCall(xdr.readInt(), RpcMessage.Type.fromValue(xdr.readInt()), xdr.readInt(), xdr.readInt(), xdr.readInt(), xdr.readInt(), Credentials.readFlavorAndCredentials(xdr), Verifier.readFlavorAndVerifier(xdr));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RpcCall getInstance(int xid, int program, int version, int procedure, Credentials cred, Verifier verifier)\n{\r\n    return new RpcCall(xid, RpcMessage.Type.RPC_CALL, 2, program, version, procedure, cred, verifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "validateRpcVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void validateRpcVersion()\n{\r\n    if (rpcVersion != RPC_VERSION) {\r\n        throw new IllegalArgumentException(\"RPC version is expected to be \" + RPC_VERSION + \" but got \" + rpcVersion);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validate()\n{\r\n    validateMessageType(RpcMessage.Type.RPC_CALL);\r\n    validateRpcVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getRpcVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getRpcVersion()\n{\r\n    return rpcVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getProgram",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getProgram()\n{\r\n    return program;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getVersion()\n{\r\n    return version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getProcedure",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getProcedure()\n{\r\n    return procedure;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getCredential",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Credentials getCredential()\n{\r\n    return credentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getVerifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Verifier getVerifier()\n{\r\n    return verifier;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "XDR write(XDR xdr)\n{\r\n    xdr.writeInt(xid);\r\n    xdr.writeInt(RpcMessage.Type.RPC_CALL.getValue());\r\n    xdr.writeInt(2);\r\n    xdr.writeInt(program);\r\n    xdr.writeInt(version);\r\n    xdr.writeInt(procedure);\r\n    Credentials.writeFlavorAndCredentials(credentials, xdr);\r\n    Verifier.writeFlavorAndVerifier(verifier, xdr);\r\n    return xdr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return String.format(\"Xid:%d, messageType:%s, rpcVersion:%d, program:%d,\" + \" version:%d, procedure:%d, credential:%s, verifier:%s\", xid, messageType, rpcVersion, program, version, procedure, credentials.toString(), verifier.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "readFlavorAndVerifier",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Verifier readFlavorAndVerifier(XDR xdr)\n{\r\n    AuthFlavor flavor = AuthFlavor.fromValue(xdr.readInt());\r\n    final Verifier verifer;\r\n    if (flavor == AuthFlavor.AUTH_NONE) {\r\n        verifer = new VerifierNone();\r\n    } else if (flavor == AuthFlavor.AUTH_SYS) {\r\n        verifer = new VerifierNone();\r\n    } else if (flavor == AuthFlavor.RPCSEC_GSS) {\r\n        verifer = new VerifierGSS();\r\n    } else {\r\n        throw new UnsupportedOperationException(\"Unsupported verifier flavor: \" + flavor);\r\n    }\r\n    verifer.read(xdr);\r\n    return verifer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "writeFlavorAndVerifier",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void writeFlavorAndVerifier(Verifier verifier, XDR xdr)\n{\r\n    if (verifier instanceof VerifierNone) {\r\n        xdr.writeInt(AuthFlavor.AUTH_NONE.getValue());\r\n    } else if (verifier instanceof VerifierGSS) {\r\n        xdr.writeInt(AuthFlavor.RPCSEC_GSS.getValue());\r\n    } else {\r\n        throw new UnsupportedOperationException(\"Cannot recognize the verifier\");\r\n    }\r\n    verifier.write(xdr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PATHCONF3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    return new PATHCONF3Request(handle);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    xdr.writeInt(type);\r\n    xdr.writeInt(mode);\r\n    xdr.writeInt(nlink);\r\n    xdr.writeInt(uid);\r\n    xdr.writeInt(gid);\r\n    xdr.writeLongAsHyper(size);\r\n    xdr.writeLongAsHyper(used);\r\n    xdr.writeInt(rdev.getSpecdata1());\r\n    xdr.writeInt(rdev.getSpecdata2());\r\n    xdr.writeLongAsHyper(fsid);\r\n    xdr.writeLongAsHyper(fileId);\r\n    atime.serialize(xdr);\r\n    mtime.serialize(xdr);\r\n    ctime.serialize(xdr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "Nfs3FileAttributes deserialize(XDR xdr)\n{\r\n    Nfs3FileAttributes attr = new Nfs3FileAttributes();\r\n    attr.type = xdr.readInt();\r\n    attr.mode = xdr.readInt();\r\n    attr.nlink = xdr.readInt();\r\n    attr.uid = xdr.readInt();\r\n    attr.gid = xdr.readInt();\r\n    attr.size = xdr.readHyper();\r\n    attr.used = xdr.readHyper();\r\n    attr.rdev = new Specdata3(xdr.readInt(), xdr.readInt());\r\n    attr.fsid = xdr.readHyper();\r\n    attr.fileId = xdr.readHyper();\r\n    attr.atime = NfsTime.deserialize(xdr);\r\n    attr.mtime = NfsTime.deserialize(xdr);\r\n    attr.ctime = NfsTime.deserialize(xdr);\r\n    return attr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return String.format(\"type:%d, mode:%d, nlink:%d, uid:%d, gid:%d, \" + \"size:%d, used:%d, rdev:%s, fsid:%d, fileid:%d, atime:%s, \" + \"mtime:%s, ctime:%s\", type, mode, nlink, uid, gid, size, used, rdev, fsid, fileId, atime, mtime, ctime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getNlink",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getNlink()\n{\r\n    return nlink;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getUsed",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getUsed()\n{\r\n    return used;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getFsid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFsid()\n{\r\n    return fsid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getFileId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFileId()\n{\r\n    return fileId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getAtime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NfsTime getAtime()\n{\r\n    return atime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getMtime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NfsTime getMtime()\n{\r\n    return mtime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getCtime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NfsTime getCtime()\n{\r\n    return ctime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getWccAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccAttr getWccAttr()\n{\r\n    return new WccAttr(size, mtime, ctime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSize()\n{\r\n    return size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "setSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSize(long size)\n{\r\n    this.size = size;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "setUsed",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUsed(long used)\n{\r\n    this.used = used;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getMode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMode()\n{\r\n    return this.mode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getUid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getUid()\n{\r\n    return this.uid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getGid",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getGid()\n{\r\n    return this.gid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "getRdev",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Specdata3 getRdev()\n{\r\n    return rdev;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3",
  "methodName" : "setRdev",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRdev(Specdata3 rdev)\n{\r\n    this.rdev = rdev;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "run",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void run() throws InterruptedException\n{\r\n    workerGroup = new NioEventLoopGroup(workerCount, Executors.newCachedThreadPool());\r\n    server = new Bootstrap();\r\n    server.group(workerGroup).channel(NioDatagramChannel.class).option(ChannelOption.SO_BROADCAST, true).option(ChannelOption.SO_SNDBUF, SEND_BUFFER_SIZE).option(ChannelOption.SO_RCVBUF, RECEIVE_BUFFER_SIZE).option(ChannelOption.SO_REUSEADDR, true).handler(new ChannelInitializer<NioDatagramChannel>() {\r\n\r\n        @Override\r\n        protected void initChannel(NioDatagramChannel ch) throws Exception {\r\n            ChannelPipeline p = ch.pipeline();\r\n            p.addLast(RpcUtil.STAGE_RPC_MESSAGE_PARSER, rpcProgram, RpcUtil.STAGE_RPC_UDP_RESPONSE);\r\n        }\r\n    });\r\n    ChannelFuture f = server.bind(new InetSocketAddress(port)).sync();\r\n    ch = f.channel();\r\n    InetSocketAddress socketAddr = (InetSocketAddress) ch.localAddress();\r\n    boundPort = socketAddr.getPort();\r\n    LOG.info(\"Started listening to UDP requests at port \" + boundPort + \" for \" + rpcProgram + \" with workerCount \" + workerCount);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getBoundPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getBoundPort()\n{\r\n    return this.boundPort;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "shutdown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void shutdown()\n{\r\n    if (ch != null) {\r\n        ch.close().awaitUninterruptibly();\r\n        ch = null;\r\n    }\r\n    if (workerGroup != null) {\r\n        workerGroup.shutdownGracefully();\r\n        workerGroup = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "channelActive",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void channelActive(ChannelHandlerContext ctx) throws Exception\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"sending PRC request\");\r\n    }\r\n    ByteBuf outBuf = XDR.writeMessageTcp(request, true);\r\n    ctx.channel().writeAndFlush(outBuf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "channelRead",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void channelRead(ChannelHandlerContext ctx, Object msg)\n{\r\n    ctx.channel().close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "exceptionCaught",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void exceptionCaught(ChannelHandlerContext ctx, Throwable cause)\n{\r\n    LOG.warn(\"Unexpected exception from downstream: \", cause.getCause());\r\n    ctx.channel().close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RpcDeniedReply read(int xid, ReplyState replyState, XDR xdr)\n{\r\n    Verifier verifier = Verifier.readFlavorAndVerifier(xdr);\r\n    RejectState rejectState = RejectState.fromValue(xdr.readInt());\r\n    return new RpcDeniedReply(xid, replyState, rejectState, verifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getRejectState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RejectState getRejectState()\n{\r\n    return rejectState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return new StringBuffer().append(\"xid:\").append(xid).append(\",messageType:\").append(messageType).append(\"verifier_flavor:\").append(verifier.getFlavor()).append(\"rejectState:\").append(rejectState).toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "XDR write(XDR xdr)\n{\r\n    xdr.writeInt(xid);\r\n    xdr.writeInt(messageType.getValue());\r\n    xdr.writeInt(replyState.getValue());\r\n    Verifier.writeFlavorAndVerifier(verifier, xdr);\r\n    xdr.writeInt(rejectState.getValue());\r\n    return xdr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SYMLINK3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    String name = xdr.readString();\r\n    SetAttr3 symAttr = new SetAttr3();\r\n    symAttr.deserialize(xdr);\r\n    String symData = xdr.readString();\r\n    return new SYMLINK3Request(handle, name, symAttr, symData);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getSymAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SetAttr3 getSymAttr()\n{\r\n    return symAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getSymData",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getSymData()\n{\r\n    return symData;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    xdr.writeInt(name.getBytes(StandardCharsets.UTF_8).length);\r\n    xdr.writeFixedOpaque(name.getBytes(StandardCharsets.UTF_8));\r\n    symAttr.serialize(xdr);\r\n    xdr.writeInt(symData.getBytes(StandardCharsets.UTF_8).length);\r\n    xdr.writeFixedOpaque(symData.getBytes(StandardCharsets.UTF_8));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "COMMIT3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    long offset = xdr.readHyper();\r\n    int count = xdr.readInt();\r\n    return new COMMIT3Request(handle, offset, count);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getOffset",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getOffset()\n{\r\n    return this.offset;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getCount()\n{\r\n    return this.count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    xdr.writeLongAsHyper(offset);\r\n    xdr.writeInt(count);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "MKNOD3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    String name = xdr.readString();\r\n    int type = xdr.readInt();\r\n    SetAttr3 objAttr = new SetAttr3();\r\n    Specdata3 spec = null;\r\n    if (type == NfsFileType.NFSCHR.toValue() || type == NfsFileType.NFSBLK.toValue()) {\r\n        objAttr.deserialize(xdr);\r\n        spec = new Specdata3(xdr.readInt(), xdr.readInt());\r\n    } else if (type == NfsFileType.NFSSOCK.toValue() || type == NfsFileType.NFSFIFO.toValue()) {\r\n        objAttr.deserialize(xdr);\r\n    }\r\n    return new MKNOD3Request(handle, name, type, objAttr, spec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getObjAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SetAttr3 getObjAttr()\n{\r\n    return objAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getSpec",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Specdata3 getSpec()\n{\r\n    return spec;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    xdr.writeInt(name.length());\r\n    xdr.writeFixedOpaque(name.getBytes(StandardCharsets.UTF_8), name.length());\r\n    objAttr.serialize(xdr);\r\n    if (spec != null) {\r\n        xdr.writeInt(spec.getSpecdata1());\r\n        xdr.writeInt(spec.getSpecdata2());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "asReadOnlyWrap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "XDR asReadOnlyWrap()\n{\r\n    ByteBuffer b = buf.asReadOnlyBuffer();\r\n    if (state == State.WRITING) {\r\n        b.flip();\r\n    }\r\n    XDR n = new XDR(b, State.READING);\r\n    return n;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "buffer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteBuffer buffer()\n{\r\n    return buf.duplicate();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "size",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int size()\n{\r\n    return state == State.READING ? buf.limit() : buf.position();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "readInt",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int readInt()\n{\r\n    Preconditions.checkState(state == State.READING);\r\n    return buf.getInt();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "writeInt",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeInt(int v)\n{\r\n    ensureFreeSpace(SIZEOF_INT);\r\n    buf.putInt(v);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "readBoolean",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean readBoolean()\n{\r\n    Preconditions.checkState(state == State.READING);\r\n    return buf.getInt() != 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "writeBoolean",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeBoolean(boolean v)\n{\r\n    ensureFreeSpace(SIZEOF_INT);\r\n    buf.putInt(v ? 1 : 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "readHyper",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long readHyper()\n{\r\n    Preconditions.checkState(state == State.READING);\r\n    return buf.getLong();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "writeLongAsHyper",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeLongAsHyper(long v)\n{\r\n    ensureFreeSpace(SIZEOF_LONG);\r\n    buf.putLong(v);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "readFixedOpaque",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "byte[] readFixedOpaque(int size)\n{\r\n    Preconditions.checkState(state == State.READING);\r\n    byte[] r = new byte[size];\r\n    buf.get(r);\r\n    alignPosition();\r\n    return r;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "writeFixedOpaque",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void writeFixedOpaque(byte[] src, int length)\n{\r\n    ensureFreeSpace(alignUp(length));\r\n    buf.put(src, 0, length);\r\n    writePadding();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "writeFixedOpaque",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeFixedOpaque(byte[] src)\n{\r\n    writeFixedOpaque(src, src.length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "readVariableOpaque",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "byte[] readVariableOpaque()\n{\r\n    Preconditions.checkState(state == State.READING);\r\n    int size = readInt();\r\n    return readFixedOpaque(size);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "writeVariableOpaque",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void writeVariableOpaque(byte[] src)\n{\r\n    ensureFreeSpace(SIZEOF_INT + alignUp(src.length));\r\n    buf.putInt(src.length);\r\n    writeFixedOpaque(src);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "readString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String readString()\n{\r\n    return new String(readVariableOpaque(), StandardCharsets.UTF_8);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "writeString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeString(String s)\n{\r\n    writeVariableOpaque(s.getBytes(StandardCharsets.UTF_8));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "writePadding",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void writePadding()\n{\r\n    Preconditions.checkState(state == State.WRITING);\r\n    int p = pad(buf.position());\r\n    ensureFreeSpace(p);\r\n    buf.put(PADDING_BYTES, 0, p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "alignUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int alignUp(int length)\n{\r\n    return length + pad(length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "pad",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int pad(int length)\n{\r\n    switch(length % 4) {\r\n        case 1:\r\n            return 3;\r\n        case 2:\r\n            return 2;\r\n        case 3:\r\n            return 1;\r\n        default:\r\n            return 0;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "alignPosition",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void alignPosition()\n{\r\n    buf.position(alignUp(buf.position()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "ensureFreeSpace",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void ensureFreeSpace(int size)\n{\r\n    Preconditions.checkState(state == State.WRITING);\r\n    if (buf.remaining() < size) {\r\n        int newCapacity = buf.capacity() * 2;\r\n        int newRemaining = buf.capacity() + buf.remaining();\r\n        while (newRemaining < size) {\r\n            newRemaining += newCapacity;\r\n            newCapacity *= 2;\r\n        }\r\n        ByteBuffer newbuf = ByteBuffer.allocate(newCapacity);\r\n        buf.flip();\r\n        newbuf.put(buf);\r\n        buf = newbuf;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "verifyLength",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean verifyLength(XDR xdr, int len)\n{\r\n    return xdr.buf.remaining() >= len;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "recordMark",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] recordMark(int size, boolean last)\n{\r\n    byte[] b = new byte[SIZEOF_INT];\r\n    ByteBuffer buf = ByteBuffer.wrap(b);\r\n    buf.putInt(!last ? size : size | 0x80000000);\r\n    return b;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "writeMessageTcp",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ByteBuf writeMessageTcp(XDR request, boolean last)\n{\r\n    Preconditions.checkState(request.state == XDR.State.WRITING);\r\n    ByteBuffer b = request.buf.duplicate();\r\n    b.flip();\r\n    byte[] fragmentHeader = XDR.recordMark(b.limit(), last);\r\n    ByteBuffer headerBuf = ByteBuffer.wrap(fragmentHeader);\r\n    return Unpooled.wrappedBuffer(headerBuf, b);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "writeMessageUdp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ByteBuf writeMessageUdp(XDR response)\n{\r\n    Preconditions.checkState(response.state == XDR.State.READING);\r\n    return Unpooled.copiedBuffer(response.buf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "fragmentSize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int fragmentSize(byte[] mark)\n{\r\n    ByteBuffer b = ByteBuffer.wrap(mark);\r\n    int n = b.getInt();\r\n    return n & 0x7fffffff;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "isLastFragment",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isLastFragment(byte[] mark)\n{\r\n    ByteBuffer b = ByteBuffer.wrap(mark);\r\n    int n = b.getInt();\r\n    return (n & 0x80000000) != 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getBytes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "byte[] getBytes()\n{\r\n    ByteBuffer d = asReadOnlyWrap().buffer();\r\n    byte[] b = new byte[d.remaining()];\r\n    d.get(b);\r\n    return b;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getPreOpAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccAttr getPreOpAttr()\n{\r\n    return preOpAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "setPreOpAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPreOpAttr(WccAttr preOpAttr)\n{\r\n    this.preOpAttr = preOpAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getPostOpAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Nfs3FileAttributes getPostOpAttr()\n{\r\n    return postOpAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "setPostOpAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPostOpAttr(Nfs3FileAttributes postOpAttr)\n{\r\n    this.postOpAttr = postOpAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "WccData deserialize(XDR xdr)\n{\r\n    xdr.readBoolean();\r\n    WccAttr preOpAttr = WccAttr.deserialize(xdr);\r\n    xdr.readBoolean();\r\n    Nfs3FileAttributes postOpAttr = Nfs3FileAttributes.deserialize(xdr);\r\n    return new WccData(preOpAttr, postOpAttr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serialize(XDR out)\n{\r\n    out.writeBoolean(true);\r\n    preOpAttr.serialize(out);\r\n    out.writeBoolean(true);\r\n    postOpAttr.serialize(out);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FSSTAT3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    return new FSSTAT3Request(handle);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "read",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void read(XDR xdr)\n{\r\n    mCredentialsLength = xdr.readInt();\r\n    Preconditions.checkState(mCredentialsLength == 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void write(XDR xdr)\n{\r\n    Preconditions.checkState(mCredentialsLength == 0);\r\n    xdr.writeInt(mCredentialsLength);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GETATTR3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    return new GETATTR3Request(handle);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "FSINFO3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    xdr.readBoolean();\r\n    Nfs3FileAttributes postOpObjAttr = Nfs3FileAttributes.deserialize(xdr);\r\n    int rtmax = 0;\r\n    int rtpref = 0;\r\n    int rtmult = 0;\r\n    int wtmax = 0;\r\n    int wtpref = 0;\r\n    int wtmult = 0;\r\n    int dtpref = 0;\r\n    long maxFileSize = 0;\r\n    NfsTime timeDelta = null;\r\n    int properties = 0;\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        rtmax = xdr.readInt();\r\n        rtpref = xdr.readInt();\r\n        rtmult = xdr.readInt();\r\n        wtmax = xdr.readInt();\r\n        wtpref = xdr.readInt();\r\n        wtmult = xdr.readInt();\r\n        dtpref = xdr.readInt();\r\n        maxFileSize = xdr.readHyper();\r\n        timeDelta = NfsTime.deserialize(xdr);\r\n        properties = xdr.readInt();\r\n    }\r\n    return new FSINFO3Response(status, postOpObjAttr, rtmax, rtpref, rtmult, wtmax, wtpref, wtmult, dtpref, maxFileSize, timeDelta, properties);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    out.writeBoolean(true);\r\n    postOpAttr.serialize(out);\r\n    if (getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeInt(rtmax);\r\n        out.writeInt(rtpref);\r\n        out.writeInt(rtmult);\r\n        out.writeInt(wtmax);\r\n        out.writeInt(wtpref);\r\n        out.writeInt(wtmult);\r\n        out.writeInt(dtpref);\r\n        out.writeLongAsHyper(maxFileSize);\r\n        timeDelta.serialize(out);\r\n        out.writeInt(properties);\r\n    }\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getDirListPlus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DirListPlus3 getDirListPlus()\n{\r\n    return dirListPlus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "READDIRPLUS3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    xdr.readBoolean();\r\n    Nfs3FileAttributes postOpDirAttr = Nfs3FileAttributes.deserialize(xdr);\r\n    long cookieVerf = 0;\r\n    ArrayList<EntryPlus3> entries = new ArrayList<EntryPlus3>();\r\n    DirListPlus3 dirList = null;\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        cookieVerf = xdr.readHyper();\r\n        while (xdr.readBoolean()) {\r\n            EntryPlus3 e = EntryPlus3.deseralize(xdr);\r\n            entries.add(e);\r\n        }\r\n        boolean eof = xdr.readBoolean();\r\n        EntryPlus3[] allEntries = new EntryPlus3[entries.size()];\r\n        entries.toArray(allEntries);\r\n        dirList = new DirListPlus3(allEntries, eof);\r\n    }\r\n    return new READDIRPLUS3Response(status, postOpDirAttr, cookieVerf, dirList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    out.writeBoolean(true);\r\n    if (postOpDirAttr == null) {\r\n        postOpDirAttr = new Nfs3FileAttributes();\r\n    }\r\n    postOpDirAttr.serialize(out);\r\n    if (getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeLongAsHyper(cookieVerf);\r\n        for (EntryPlus3 f : dirListPlus.getEntries()) {\r\n            out.writeBoolean(true);\r\n            f.seralize(out);\r\n        }\r\n        out.writeBoolean(false);\r\n        out.writeBoolean(dirListPlus.getEof());\r\n    }\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "READDIRPLUS3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    long cookie = xdr.readHyper();\r\n    long cookieVerf = xdr.readHyper();\r\n    int dirCount = xdr.readInt();\r\n    int maxCount = xdr.readInt();\r\n    return new READDIRPLUS3Request(handle, cookie, cookieVerf, dirCount, maxCount);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getCookie",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCookie()\n{\r\n    return this.cookie;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getCookieVerf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCookieVerf()\n{\r\n    return this.cookieVerf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getDirCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getDirCount()\n{\r\n    return dirCount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getMaxCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMaxCount()\n{\r\n    return maxCount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    xdr.writeLongAsHyper(cookie);\r\n    xdr.writeLongAsHyper(cookieVerf);\r\n    xdr.writeInt(dirCount);\r\n    xdr.writeInt(maxCount);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\mount",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHost()\n{\r\n    return this.host;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\mount",
  "methodName" : "getPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPath()\n{\r\n    return this.path;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\mount",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o)\r\n        return true;\r\n    if (!(o instanceof MountEntry)) {\r\n        return false;\r\n    }\r\n    MountEntry m = (MountEntry) o;\r\n    return getHost().equals(m.getHost()) && getPath().equals(m.getPath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\mount",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    return host.hashCode() * 31 + path.hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "main",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    StringUtils.startupShutdownMessage(Portmap.class, args, LOG);\r\n    final int port = RpcProgram.RPCB_PORT;\r\n    Portmap pm = new Portmap();\r\n    try {\r\n        pm.start(DEFAULT_IDLE_TIME_MILLISECONDS, new InetSocketAddress(port), new InetSocketAddress(port));\r\n    } catch (Throwable e) {\r\n        LOG.error(\"Failed to start the server. Cause:\", e);\r\n        pm.shutdown();\r\n        System.exit(-1);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "shutdown",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void shutdown()\n{\r\n    allChannels.close().awaitUninterruptibly();\r\n    bossGroup.shutdownGracefully();\r\n    workerGroup.shutdownGracefully();\r\n    udpGroup.shutdownGracefully();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "getTcpServerLocalAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SocketAddress getTcpServerLocalAddress()\n{\r\n    return tcpChannel.localAddress();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "getUdpServerLoAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SocketAddress getUdpServerLoAddress()\n{\r\n    return udpChannel.localAddress();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "getHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RpcProgramPortmap getHandler()\n{\r\n    return handler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "start",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void start(final int idleTimeMilliSeconds, final SocketAddress tcpAddress, final SocketAddress udpAddress) throws InterruptedException\n{\r\n    bossGroup = new NioEventLoopGroup();\r\n    workerGroup = new NioEventLoopGroup(0, Executors.newCachedThreadPool());\r\n    tcpServer = new ServerBootstrap();\r\n    tcpServer.group(bossGroup, workerGroup).option(ChannelOption.SO_REUSEADDR, true).childOption(ChannelOption.SO_REUSEADDR, true).channel(NioServerSocketChannel.class).childHandler(new ChannelInitializer<SocketChannel>() {\r\n\r\n        private final IdleStateHandler idleStateHandler = new IdleStateHandler(0, 0, idleTimeMilliSeconds, TimeUnit.MILLISECONDS);\r\n\r\n        @Override\r\n        protected void initChannel(SocketChannel ch) throws Exception {\r\n            ChannelPipeline p = ch.pipeline();\r\n            p.addLast(RpcUtil.constructRpcFrameDecoder(), RpcUtil.STAGE_RPC_MESSAGE_PARSER, idleStateHandler, handler, RpcUtil.STAGE_RPC_TCP_RESPONSE);\r\n        }\r\n    });\r\n    udpGroup = new NioEventLoopGroup(0, Executors.newCachedThreadPool());\r\n    udpServer = new Bootstrap();\r\n    udpServer.group(udpGroup).channel(NioDatagramChannel.class).handler(new ChannelInitializer<NioDatagramChannel>() {\r\n\r\n        @Override\r\n        protected void initChannel(NioDatagramChannel ch) throws Exception {\r\n            ChannelPipeline p = ch.pipeline();\r\n            p.addLast(new LoggingHandler(LogLevel.DEBUG), RpcUtil.STAGE_RPC_MESSAGE_PARSER, handler, RpcUtil.STAGE_RPC_UDP_RESPONSE);\r\n        }\r\n    }).option(ChannelOption.SO_REUSEADDR, true);\r\n    ChannelFuture tcpChannelFuture = null;\r\n    tcpChannelFuture = tcpServer.bind(tcpAddress);\r\n    ChannelFuture udpChannelFuture = udpServer.bind(udpAddress);\r\n    tcpChannel = tcpChannelFuture.sync().channel();\r\n    udpChannel = udpChannelFuture.sync().channel();\r\n    allChannels.add(tcpChannel);\r\n    allChannels.add(udpChannel);\r\n    LOG.info(\"Portmap server started at tcp://\" + tcpChannel.localAddress() + \", udp://\" + udpChannel.localAddress());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FSINFO3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    return new FSINFO3Request(handle);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "REMOVE3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    WccData dirWcc = WccData.deserialize(xdr);\r\n    return new REMOVE3Response(status, dirWcc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    if (dirWcc == null) {\r\n        dirWcc = new WccData(null, null);\r\n    }\r\n    dirWcc.serialize(out);\r\n    return out;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "mapping",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PortmapMapping mapping(XDR xdr)\n{\r\n    return PortmapMapping.deserialize(xdr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "XDR create(PortmapMapping mapping, boolean set)\n{\r\n    XDR request = new XDR();\r\n    int procedure = set ? RpcProgramPortmap.PMAPPROC_SET : RpcProgramPortmap.PMAPPROC_UNSET;\r\n    RpcCall call = RpcCall.getInstance(RpcUtil.getNewXid(String.valueOf(RpcProgramPortmap.PROGRAM)), RpcProgramPortmap.PROGRAM, RpcProgramPortmap.VERSION, procedure, new CredentialsNone(), new VerifierNone());\r\n    call.write(request);\r\n    return mapping.serialize(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getCount()\n{\r\n    return count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getStableHow",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WriteStableHow getStableHow()\n{\r\n    return stableHow;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getVerifer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVerifer()\n{\r\n    return verifer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "WRITE3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    WccData fileWcc = WccData.deserialize(xdr);\r\n    int count = 0;\r\n    WriteStableHow stableHow = null;\r\n    long verifier = 0;\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        count = xdr.readInt();\r\n        int how = xdr.readInt();\r\n        stableHow = WriteStableHow.values()[how];\r\n        verifier = xdr.readHyper();\r\n    }\r\n    return new WRITE3Response(status, fileWcc, count, stableHow, verifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    fileWcc.serialize(out);\r\n    if (getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeInt(count);\r\n        out.writeInt(stableHow.getValue());\r\n        out.writeLongAsHyper(verifer);\r\n    }\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getObjFileHandle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileHandle getObjFileHandle()\n{\r\n    return objFileHandle;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getObjPostOpAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Nfs3FileAttributes getObjPostOpAttr()\n{\r\n    return objPostOpAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getDirWcc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccData getDirWcc()\n{\r\n    return dirWcc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "MKNOD3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    FileHandle objFileHandle = new FileHandle();\r\n    Nfs3FileAttributes objPostOpAttr = null;\r\n    WccData dirWcc;\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        xdr.readBoolean();\r\n        objFileHandle.deserialize(xdr);\r\n        xdr.readBoolean();\r\n        objPostOpAttr = Nfs3FileAttributes.deserialize(xdr);\r\n    }\r\n    dirWcc = WccData.deserialize(xdr);\r\n    return new MKNOD3Response(status, objFileHandle, objPostOpAttr, dirWcc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    if (this.getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeBoolean(true);\r\n        objFileHandle.serialize(out);\r\n        out.writeBoolean(true);\r\n        objPostOpAttr.serialize(out);\r\n    }\r\n    dirWcc.serialize(out);\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getUser()\n{\r\n    return iug.getUserName(mCredentialsSys.getUID(), IdMappingConstant.UNKNOWN_USER);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "shouldSilentlyDrop",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean shouldSilentlyDrop(RpcCall request)\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getVerifer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "VerifierNone getVerifer(RpcCall request)\n{\r\n    return new VerifierNone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getUid",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getUid()\n{\r\n    return mCredentialsSys.getUID();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getGid",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getGid()\n{\r\n    return mCredentialsSys.getGID();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc\\security",
  "methodName" : "getAuxGids",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int[] getAuxGids()\n{\r\n    return mCredentialsSys.getAuxGIDs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "register",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void register(int transport, int boundPort)\n{\r\n    if (boundPort != port) {\r\n        LOG.info(\"The bound port is \" + boundPort + \", different with configured port \" + port);\r\n        port = boundPort;\r\n    }\r\n    for (int vers = lowProgVersion; vers <= highProgVersion; vers++) {\r\n        PortmapMapping mapEntry = new PortmapMapping(progNumber, vers, transport, port);\r\n        register(mapEntry, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "unregister",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void unregister(int transport, int boundPort)\n{\r\n    if (boundPort != port) {\r\n        LOG.info(\"The bound port is \" + boundPort + \", different with configured port \" + port);\r\n        port = boundPort;\r\n    }\r\n    for (int vers = lowProgVersion; vers <= highProgVersion; vers++) {\r\n        PortmapMapping mapEntry = new PortmapMapping(progNumber, vers, transport, port);\r\n        register(mapEntry, false);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "register",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void register(PortmapMapping mapEntry, boolean set)\n{\r\n    XDR mappingRequest = PortmapRequest.create(mapEntry, set);\r\n    SimpleUdpClient registrationClient = new SimpleUdpClient(host, RPCB_PORT, mappingRequest, true, registrationSocket, portmapUdpTimeoutMillis);\r\n    try {\r\n        registrationClient.run();\r\n    } catch (IOException e) {\r\n        String request = set ? \"Registration\" : \"Unregistration\";\r\n        LOG.error(request + \" failure with \" + host + \":\" + port + \", portmap entry: \" + mapEntry);\r\n        throw new RuntimeException(request + \" failure\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "startDaemons",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void startDaemons()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "stopDaemons",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void stopDaemons()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "channelRead",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception\n{\r\n    RpcInfo info = (RpcInfo) msg;\r\n    RpcCall call = (RpcCall) info.header();\r\n    SocketAddress remoteAddress = info.remoteAddress();\r\n    if (LOG.isTraceEnabled()) {\r\n        LOG.trace(program + \" procedure #\" + call.getProcedure());\r\n    }\r\n    if (this.progNumber != call.getProgram()) {\r\n        LOG.warn(\"Invalid RPC call program \" + call.getProgram());\r\n        sendAcceptedReply(call, remoteAddress, AcceptState.PROG_UNAVAIL, ctx);\r\n        return;\r\n    }\r\n    int ver = call.getVersion();\r\n    if (ver < lowProgVersion || ver > highProgVersion) {\r\n        LOG.warn(\"Invalid RPC call version \" + ver);\r\n        sendAcceptedReply(call, remoteAddress, AcceptState.PROG_MISMATCH, ctx);\r\n        return;\r\n    }\r\n    handleInternal(ctx, info);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "doPortMonitoring",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean doPortMonitoring(SocketAddress remoteAddress)\n{\r\n    if (!allowInsecurePorts) {\r\n        if (LOG.isTraceEnabled()) {\r\n            LOG.trace(\"Will not allow connections from unprivileged ports. \" + \"Checking for valid client port...\");\r\n        }\r\n        if (remoteAddress instanceof InetSocketAddress) {\r\n            InetSocketAddress inetRemoteAddress = (InetSocketAddress) remoteAddress;\r\n            if (inetRemoteAddress.getPort() > 1023) {\r\n                LOG.warn(\"Connection attempted from '\" + inetRemoteAddress + \"' \" + \"which is an unprivileged port. Rejecting connection.\");\r\n                return false;\r\n            }\r\n        } else {\r\n            LOG.warn(\"Could not determine remote port of socket address '\" + remoteAddress + \"'. Rejecting connection.\");\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "sendAcceptedReply",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void sendAcceptedReply(RpcCall call, SocketAddress remoteAddress, AcceptState acceptState, ChannelHandlerContext ctx)\n{\r\n    RpcAcceptedReply reply = RpcAcceptedReply.getInstance(call.getXid(), acceptState, VerifierNone.INSTANCE);\r\n    XDR out = new XDR();\r\n    reply.write(out);\r\n    if (acceptState == AcceptState.PROG_MISMATCH) {\r\n        out.writeInt(lowProgVersion);\r\n        out.writeInt(highProgVersion);\r\n    }\r\n    ByteBuf b = Unpooled.wrappedBuffer(out.asReadOnlyWrap().buffer());\r\n    RpcResponse rsp = new RpcResponse(b, remoteAddress);\r\n    RpcUtil.sendRpcResponse(ctx, rsp);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "sendRejectedReply",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void sendRejectedReply(RpcCall call, SocketAddress remoteAddress, ChannelHandlerContext ctx)\n{\r\n    XDR out = new XDR();\r\n    RpcDeniedReply reply = new RpcDeniedReply(call.getXid(), RpcReply.ReplyState.MSG_DENIED, RpcDeniedReply.RejectState.AUTH_ERROR, new VerifierNone());\r\n    reply.write(out);\r\n    ByteBuf buf = Unpooled.wrappedBuffer(out.asReadOnlyWrap().buffer());\r\n    RpcResponse rsp = new RpcResponse(buf, remoteAddress);\r\n    RpcUtil.sendRpcResponse(ctx, rsp);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "handleInternal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void handleInternal(ChannelHandlerContext ctx, RpcInfo info)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"Rpc program: \" + program + \" at \" + host + \":\" + port;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "isIdempotent",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isIdempotent(RpcCall call)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getPort()\n{\r\n    return port;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getPortmapUdpTimeoutMillis",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getPortmapUdpTimeoutMillis()\n{\r\n    return portmapUdpTimeoutMillis;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getObjFileHandle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileHandle getObjFileHandle()\n{\r\n    return objFileHandle;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getObjPostOpAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Nfs3FileAttributes getObjPostOpAttr()\n{\r\n    return objPostOpAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getDirWcc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccData getDirWcc()\n{\r\n    return dirWcc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "SYMLINK3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    FileHandle objFileHandle = new FileHandle();\r\n    Nfs3FileAttributes objPostOpAttr = null;\r\n    WccData dirWcc;\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        xdr.readBoolean();\r\n        objFileHandle.deserialize(xdr);\r\n        xdr.readBoolean();\r\n        objPostOpAttr = Nfs3FileAttributes.deserialize(xdr);\r\n    }\r\n    dirWcc = WccData.deserialize(xdr);\r\n    return new SYMLINK3Response(status, objFileHandle, objPostOpAttr, dirWcc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    if (this.getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeBoolean(true);\r\n        objFileHandle.serialize(out);\r\n        out.writeBoolean(true);\r\n        objPostOpAttr.serialize(out);\r\n    }\r\n    dirWcc.serialize(out);\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "nullOp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "XDR nullOp(int xid, XDR in, XDR out)\n{\r\n    return PortmapResponse.voidReply(out, xid);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "set",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "XDR set(int xid, XDR in, XDR out)\n{\r\n    PortmapMapping mapping = PortmapRequest.mapping(in);\r\n    String key = PortmapMapping.key(mapping);\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Portmap set key=\" + key);\r\n    }\r\n    map.put(key, mapping);\r\n    return PortmapResponse.intReply(out, xid, mapping.getPort());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "unset",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "XDR unset(int xid, XDR in, XDR out)\n{\r\n    PortmapMapping mapping = PortmapRequest.mapping(in);\r\n    String key = PortmapMapping.key(mapping);\r\n    if (LOG.isDebugEnabled())\r\n        LOG.debug(\"Portmap remove key=\" + key);\r\n    map.remove(key);\r\n    return PortmapResponse.booleanReply(out, xid, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "getport",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "XDR getport(int xid, XDR in, XDR out)\n{\r\n    PortmapMapping mapping = PortmapRequest.mapping(in);\r\n    String key = PortmapMapping.key(mapping);\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Portmap GETPORT key=\" + key + \" \" + mapping);\r\n    }\r\n    PortmapMapping value = map.get(key);\r\n    int res = 0;\r\n    if (value != null) {\r\n        res = value.getPort();\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Found mapping for key: \" + key + \" port:\" + res);\r\n        }\r\n    } else {\r\n        LOG.warn(\"Warning, no mapping for key: \" + key);\r\n    }\r\n    return PortmapResponse.intReply(out, xid, res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "dump",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "XDR dump(int xid, XDR in, XDR out)\n{\r\n    PortmapMapping[] pmapList = map.values().toArray(new PortmapMapping[0]);\r\n    return PortmapResponse.pmapList(out, xid, pmapList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "channelRead",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception\n{\r\n    RpcInfo info = (RpcInfo) msg;\r\n    RpcCall rpcCall = (RpcCall) info.header();\r\n    final int portmapProc = rpcCall.getProcedure();\r\n    int xid = rpcCall.getXid();\r\n    XDR in = new XDR(info.data().nioBuffer().asReadOnlyBuffer(), XDR.State.READING);\r\n    XDR out = new XDR();\r\n    if (portmapProc == PMAPPROC_NULL) {\r\n        out = nullOp(xid, in, out);\r\n    } else if (portmapProc == PMAPPROC_SET) {\r\n        out = set(xid, in, out);\r\n    } else if (portmapProc == PMAPPROC_UNSET) {\r\n        out = unset(xid, in, out);\r\n    } else if (portmapProc == PMAPPROC_DUMP) {\r\n        out = dump(xid, in, out);\r\n    } else if (portmapProc == PMAPPROC_GETPORT) {\r\n        out = getport(xid, in, out);\r\n    } else if (portmapProc == PMAPPROC_GETVERSADDR) {\r\n        out = getport(xid, in, out);\r\n    } else {\r\n        LOG.info(\"PortmapHandler unknown rpc procedure=\" + portmapProc);\r\n        RpcAcceptedReply reply = RpcAcceptedReply.getInstance(xid, RpcAcceptedReply.AcceptState.PROC_UNAVAIL, new VerifierNone());\r\n        reply.write(out);\r\n    }\r\n    ByteBuf buf = Unpooled.wrappedBuffer(out.asReadOnlyWrap().buffer());\r\n    RpcResponse rsp = new RpcResponse(buf, info.remoteAddress());\r\n    RpcUtil.sendRpcResponse(ctx, rsp);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "channelActive",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void channelActive(ChannelHandlerContext ctx) throws Exception\n{\r\n    allChannels.add(ctx.channel());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "channelIdle",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void channelIdle(ChannelHandlerContext ctx, IdleStateEvent e) throws Exception\n{\r\n    if (e.state() == IdleState.ALL_IDLE) {\r\n        ctx.channel().close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\portmap",
  "methodName" : "exceptionCaught",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void exceptionCaught(ChannelHandlerContext ctx, Throwable t)\n{\r\n    LOG.warn(\"Encountered \", t);\r\n    ctx.channel().close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "READLINK3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    xdr.readBoolean();\r\n    Nfs3FileAttributes postOpSymlinkAttr = Nfs3FileAttributes.deserialize(xdr);\r\n    byte[] path = new byte[0];\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        path = xdr.readVariableOpaque();\r\n    }\r\n    return new READLINK3Response(status, postOpSymlinkAttr, path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    out.writeBoolean(true);\r\n    postOpSymlinkAttr.serialize(out);\r\n    if (getStatus() == Nfs3Status.NFS3_OK) {\r\n        out.writeVariableOpaque(path);\r\n    }\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "READLINK3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    return new READLINK3Request(handle);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getWccData",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WccData getWccData()\n{\r\n    return wccData;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SETATTR3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    WccData wccData = WccData.deserialize(xdr);\r\n    return new SETATTR3Response(status, wccData);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "XDR serialize(XDR out, int xid, Verifier verifier)\n{\r\n    super.serialize(out, xid, verifier);\r\n    wccData.serialize(out);\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getPostOpAttr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Nfs3FileAttributes getPostOpAttr()\n{\r\n    return postOpDirAttr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getCookieVerf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCookieVerf()\n{\r\n    return cookieVerf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "getDirList",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DirList3 getDirList()\n{\r\n    return dirList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "READDIR3Response deserialize(XDR xdr)\n{\r\n    int status = xdr.readInt();\r\n    xdr.readBoolean();\r\n    Nfs3FileAttributes postOpDirAttr = Nfs3FileAttributes.deserialize(xdr);\r\n    long cookieVerf = 0;\r\n    ArrayList<Entry3> entries = new ArrayList<Entry3>();\r\n    DirList3 dirList = null;\r\n    if (status == Nfs3Status.NFS3_OK) {\r\n        cookieVerf = xdr.readHyper();\r\n        while (xdr.readBoolean()) {\r\n            Entry3 e = Entry3.deserialzie(xdr);\r\n            entries.add(e);\r\n        }\r\n        boolean eof = xdr.readBoolean();\r\n        Entry3[] allEntries = new Entry3[entries.size()];\r\n        entries.toArray(allEntries);\r\n        dirList = new DirList3(allEntries, eof);\r\n    }\r\n    return new READDIR3Response(status, postOpDirAttr, cookieVerf, dirList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\response",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "XDR serialize(XDR xdr, int xid, Verifier verifier)\n{\r\n    super.serialize(xdr, xid, verifier);\r\n    xdr.writeBoolean(true);\r\n    postOpDirAttr.serialize(xdr);\r\n    if (getStatus() == Nfs3Status.NFS3_OK) {\r\n        xdr.writeLongAsHyper(cookieVerf);\r\n        for (Entry3 e : dirList.entries) {\r\n            xdr.writeBoolean(true);\r\n            e.seralize(xdr);\r\n        }\r\n        xdr.writeBoolean(false);\r\n        xdr.writeBoolean(dirList.eof);\r\n    }\r\n    return xdr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "deserialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LOOKUP3Request deserialize(XDR xdr) throws IOException\n{\r\n    FileHandle handle = readHandle(xdr);\r\n    String name = xdr.readString();\r\n    return new LOOKUP3Request(handle, name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return this.name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\nfs\\nfs3\\request",
  "methodName" : "serialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serialize(XDR xdr)\n{\r\n    handle.serialize(xdr);\r\n    xdr.writeInt(name.getBytes(StandardCharsets.UTF_8).length);\r\n    xdr.writeFixedOpaque(name.getBytes(StandardCharsets.UTF_8));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "getNewXid",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNewXid(String caller)\n{\r\n    return xid = ++xid + caller.hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "sendRpcResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void sendRpcResponse(ChannelHandlerContext ctx, RpcResponse response)\n{\r\n    ctx.fireChannelRead(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-nfs\\src\\main\\java\\org\\apache\\hadoop\\oncrpc",
  "methodName" : "constructRpcFrameDecoder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ByteToMessageDecoder constructRpcFrameDecoder()\n{\r\n    return new RpcFrameDecoder();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]