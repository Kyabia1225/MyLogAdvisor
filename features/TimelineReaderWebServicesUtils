[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createTimelineReaderContext",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "TimelineReaderContext createTimelineReaderContext(String clusterId, String userId, String flowName, String flowRunId, String appId, String entityType, String entityIdPrefix, String entityId)\n{\r\n    return new TimelineReaderContext(parseStr(clusterId), parseStr(userId), parseStr(flowName), parseLongStr(flowRunId), parseStr(appId), parseStr(entityType), parseLongStr(entityIdPrefix), parseStr(entityId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createTimelineReaderContext",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "TimelineReaderContext createTimelineReaderContext(String clusterId, String userId, String flowName, String flowRunId, String appId, String entityType, String entityIdPrefix, String entityId, String doAsUser)\n{\r\n    return new TimelineReaderContext(parseStr(clusterId), parseStr(userId), parseStr(flowName), parseLongStr(flowRunId), parseStr(appId), parseStr(entityType), parseLongStr(entityIdPrefix), parseStr(entityId), parseStr(doAsUser));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createTimelineEntityFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntityFilters createTimelineEntityFilters(String limit, String createdTimeStart, String createdTimeEnd, String relatesTo, String isRelatedTo, String infofilters, String conffilters, String metricfilters, String eventfilters, String fromid) throws TimelineParseException\n{\r\n    return createTimelineEntityFilters(limit, parseLongStr(createdTimeStart), parseLongStr(createdTimeEnd), relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, fromid);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createTimelineEntityFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntityFilters createTimelineEntityFilters(String limit, Long createdTimeStart, Long createdTimeEnd, String relatesTo, String isRelatedTo, String infofilters, String conffilters, String metricfilters, String eventfilters, String fromid) throws TimelineParseException\n{\r\n    return new TimelineEntityFilters.Builder().entityLimit(parseLongStr(limit)).createdTimeBegin(createdTimeStart).createTimeEnd(createdTimeEnd).relatesTo(parseRelationFilters(relatesTo)).isRelatedTo(parseRelationFilters(isRelatedTo)).infoFilters(parseKVFilters(infofilters, false)).configFilters(parseKVFilters(conffilters, true)).metricFilters(parseMetricFilters(metricfilters)).eventFilters(parseEventFilters(eventfilters)).fromId(parseStr(fromid)).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createTimelineDataToRetrieve",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "TimelineDataToRetrieve createTimelineDataToRetrieve(String confs, String metrics, String fields, String metricsLimit, String metricsTimeBegin, String metricsTimeEnd) throws TimelineParseException\n{\r\n    return new TimelineDataToRetrieve(parseDataToRetrieve(confs), parseDataToRetrieve(metrics), parseFieldsStr(fields, TimelineParseConstants.COMMA_DELIMITER), parseIntStr(metricsLimit), parseLongStr(metricsTimeBegin), parseLongStr(metricsTimeEnd));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseEventFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineFilterList parseEventFilters(String expr) throws TimelineParseException\n{\r\n    return parseFilters(new TimelineParserForExistFilters(expr, TimelineParseConstants.COMMA_CHAR));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseRelationFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineFilterList parseRelationFilters(String expr) throws TimelineParseException\n{\r\n    return parseFilters(new TimelineParserForRelationFilters(expr, TimelineParseConstants.COMMA_CHAR, TimelineParseConstants.COLON_DELIMITER));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseFilters",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineFilterList parseFilters(TimelineParser parser) throws TimelineParseException\n{\r\n    try {\r\n        return parser.parse();\r\n    } finally {\r\n        IOUtils.closeStream(parser);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseKVFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineFilterList parseKVFilters(String expr, boolean valueAsString) throws TimelineParseException\n{\r\n    return parseFilters(new TimelineParserForKVFilters(expr, valueAsString));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseFieldsStr",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "EnumSet<Field> parseFieldsStr(String str, String delimiter)\n{\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    String[] strs = str.split(delimiter);\r\n    EnumSet<Field> fieldList = EnumSet.noneOf(Field.class);\r\n    for (String s : strs) {\r\n        try {\r\n            fieldList.add(Field.valueOf(s.trim().toUpperCase()));\r\n        } catch (IllegalArgumentException e) {\r\n            throw new IllegalArgumentException(s + \" is not a valid field.\");\r\n        }\r\n    }\r\n    return fieldList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseMetricFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineFilterList parseMetricFilters(String expr) throws TimelineParseException\n{\r\n    return parseFilters(new TimelineParserForNumericFilters(expr));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseLongStr",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Long parseLongStr(String str)\n{\r\n    return str == null ? null : Long.parseLong(str.trim());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseIntStr",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Integer parseIntStr(String str)\n{\r\n    return str == null ? null : Integer.parseInt(str.trim());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseStr",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String parseStr(String str)\n{\r\n    return StringUtils.trimToNull(str);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "UserGroupInformation getUser(HttpServletRequest req)\n{\r\n    Principal princ = req.getUserPrincipal();\r\n    String remoteUser = princ == null ? null : princ.getName();\r\n    UserGroupInformation callerUGI = null;\r\n    if (remoteUser != null) {\r\n        callerUGI = UserGroupInformation.createRemoteUser(remoteUser);\r\n    }\r\n    return callerUGI;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getUserName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getUserName(UserGroupInformation callerUGI)\n{\r\n    return ((callerUGI != null) ? callerUGI.getUserName().trim() : \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseDataToRetrieve",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineFilterList parseDataToRetrieve(String expr) throws TimelineParseException\n{\r\n    return parseFilters(new TimelineParserForDataToRetrieve(expr));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parse",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "TimelineFilterList parse() throws TimelineParseException\n{\r\n    if (expr == null || exprLength == 0) {\r\n        return null;\r\n    }\r\n    TimelineCompareOp compareOp = null;\r\n    int openingBracketIndex = expr.indexOf(TimelineParseConstants.OPENING_BRACKET_CHAR);\r\n    if (expr.charAt(0) == TimelineParseConstants.NOT_CHAR) {\r\n        if (openingBracketIndex == -1) {\r\n            throw new TimelineParseException(\"Invalid config/metric to retrieve \" + \"expression\");\r\n        }\r\n        if (openingBracketIndex != 1 && expr.substring(1, openingBracketIndex + 1).trim().length() != 1) {\r\n            throw new TimelineParseException(\"Invalid config/metric to retrieve \" + \"expression\");\r\n        }\r\n        compareOp = TimelineCompareOp.NOT_EQUAL;\r\n    } else if (openingBracketIndex <= 0) {\r\n        compareOp = TimelineCompareOp.EQUAL;\r\n    }\r\n    char lastChar = expr.charAt(exprLength - 1);\r\n    if (compareOp == TimelineCompareOp.NOT_EQUAL && lastChar != TimelineParseConstants.CLOSING_BRACKET_CHAR) {\r\n        throw new TimelineParseException(\"Invalid config/metric to retrieve \" + \"expression\");\r\n    }\r\n    if (openingBracketIndex != -1 && expr.charAt(exprLength - 1) == TimelineParseConstants.CLOSING_BRACKET_CHAR) {\r\n        expr = expr.substring(openingBracketIndex + 1, exprLength - 1).trim();\r\n    }\r\n    if (expr.isEmpty()) {\r\n        return null;\r\n    }\r\n    Operator op = (compareOp == TimelineCompareOp.NOT_EQUAL) ? Operator.AND : Operator.OR;\r\n    TimelineFilterList list = new TimelineFilterList(op);\r\n    String[] splits = expr.split(TimelineParseConstants.COMMA_DELIMITER);\r\n    for (String split : splits) {\r\n        list.addFilter(new TimelinePrefixFilter(compareOp, split.trim()));\r\n    }\r\n    return list;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void close()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "TimelineWriteResponse write(TimelineCollectorContext context, TimelineEntities entities, UserGroupInformation callerUgi) throws IOException\n{\r\n    TimelineWriteResponse response = new TimelineWriteResponse();\r\n    String clusterId = context.getClusterId();\r\n    String userId = context.getUserId();\r\n    String flowName = context.getFlowName();\r\n    String flowVersion = context.getFlowVersion();\r\n    long flowRunId = context.getFlowRunId();\r\n    String appId = context.getAppId();\r\n    for (TimelineEntity entity : entities.getEntities()) {\r\n        writeInternal(clusterId, userId, flowName, flowVersion, flowRunId, appId, entity, response);\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineWriteResponse write(TimelineCollectorContext context, TimelineDomain domain) throws IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "writeInternal",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void writeInternal(String clusterId, String userId, String flowName, String flowVersion, long flowRun, String appId, TimelineEntity entity, TimelineWriteResponse response) throws IOException\n{\r\n    String entityTypePathStr = clusterId + File.separator + userId + File.separator + escape(flowName) + File.separator + escape(flowVersion) + File.separator + flowRun + File.separator + appId + File.separator + entity.getType();\r\n    Path entityTypePath = new Path(entitiesPath, entityTypePathStr);\r\n    try {\r\n        mkdirs(entityTypePath);\r\n        Path filePath = new Path(entityTypePath, entity.getId() + TIMELINE_SERVICE_STORAGE_EXTENSION);\r\n        createFileWithRetries(filePath);\r\n        byte[] record = new StringBuilder().append(TimelineUtils.dumpTimelineRecordtoJSON(entity)).append(\"\\n\").toString().getBytes(\"UTF-8\");\r\n        writeFileWithRetries(filePath, record);\r\n    } catch (Exception ioe) {\r\n        LOG.warn(\"Interrupted operation:\" + ioe.getMessage());\r\n        TimelineWriteError error = createTimelineWriteError(entity);\r\n        response.addError(error);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "createTimelineWriteError",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineWriteError createTimelineWriteError(TimelineEntity entity)\n{\r\n    TimelineWriteError error = new TimelineWriteError();\r\n    error.setEntityId(entity.getId());\r\n    error.setEntityType(entity.getType());\r\n    return error;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "aggregate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineWriteResponse aggregate(TimelineEntity data, TimelineAggregationTrack track) throws IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getOutputRoot",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getOutputRoot()\n{\r\n    return rootPath.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    String outputRoot = conf.get(TIMELINE_SERVICE_STORAGE_DIR_ROOT, conf.get(\"hadoop.tmp.dir\") + File.separator + STORAGE_DIR_ROOT);\r\n    rootPath = new Path(outputRoot);\r\n    entitiesPath = new Path(rootPath, ENTITIES_DIR);\r\n    fsNumRetries = conf.getInt(TIMELINE_FS_WRITER_NUM_RETRIES, DEFAULT_TIMELINE_FS_WRITER_NUM_RETRIES);\r\n    fsRetryInterval = conf.getLong(TIMELINE_FS_WRITER_RETRY_INTERVAL_MS, DEFAULT_TIMELINE_FS_WRITER_RETRY_INTERVAL_MS);\r\n    config = conf;\r\n    fs = rootPath.getFileSystem(config);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    mkdirsWithRetries(rootPath);\r\n    mkdirsWithRetries(entitiesPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void flush() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "mkdirs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mkdirs(Path... paths) throws IOException, InterruptedException\n{\r\n    for (Path path : paths) {\r\n        if (!existsWithRetries(path)) {\r\n            mkdirsWithRetries(path);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "mkdirsWithRetries",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mkdirsWithRetries(final Path dirPath) throws IOException, InterruptedException\n{\r\n    new FSAction<Void>() {\r\n\r\n        @Override\r\n        public Void run() throws IOException {\r\n            fs.mkdirs(dirPath);\r\n            return null;\r\n        }\r\n    }.runWithRetries();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "writeFileWithRetries",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeFileWithRetries(final Path outputPath, final byte[] data) throws Exception\n{\r\n    new FSAction<Void>() {\r\n\r\n        @Override\r\n        public Void run() throws IOException {\r\n            writeFile(outputPath, data);\r\n            return null;\r\n        }\r\n    }.runWithRetries();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "createFileWithRetries",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean createFileWithRetries(final Path newFile) throws IOException, InterruptedException\n{\r\n    return new FSAction<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean run() throws IOException {\r\n            return createFile(newFile);\r\n        }\r\n    }.runWithRetries();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "existsWithRetries",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean existsWithRetries(final Path path) throws IOException, InterruptedException\n{\r\n    return new FSAction<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean run() throws IOException {\r\n            return fs.exists(path);\r\n        }\r\n    }.runWithRetries();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "createFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean createFile(Path newFile) throws IOException\n{\r\n    return fs.createNewFile(newFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "writeFile",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void writeFile(Path outputPath, byte[] data) throws IOException\n{\r\n    Path tempPath = new Path(outputPath.getParent(), outputPath.getName() + \".tmp\");\r\n    FSDataOutputStream fsOut = null;\r\n    try {\r\n        fsOut = fs.create(tempPath, true);\r\n        FSDataInputStream fsIn = fs.open(outputPath);\r\n        IOUtils.copyBytes(fsIn, fsOut, config, false);\r\n        fsIn.close();\r\n        fs.delete(outputPath, false);\r\n        fsOut.write(data);\r\n        fsOut.close();\r\n        fs.rename(tempPath, outputPath);\r\n    } catch (IOException ie) {\r\n        LOG.error(\"Got an exception while writing file\", ie);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "escape",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String escape(String str)\n{\r\n    return str.replace(File.separatorChar, '_');\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "getKerberosInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "KerberosInfo getKerberosInfo(Class<?> protocol, Configuration conf)\n{\r\n    if (!protocol.equals(CollectorNodemanagerProtocolPB.class)) {\r\n        return null;\r\n    }\r\n    return new KerberosInfo() {\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public String serverPrincipal() {\r\n            return YarnConfiguration.NM_PRINCIPAL;\r\n        }\r\n\r\n        @Override\r\n        public String clientPrincipal() {\r\n            return null;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "getTokenInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenInfo getTokenInfo(Class<?> protocol, Configuration conf)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    tokenMgrService = createTokenManagerService();\r\n    addService(tokenMgrService);\r\n    this.loginUGI = UserGroupInformation.getCurrentUser();\r\n    tokenRenewInterval = conf.getLong(YarnConfiguration.TIMELINE_DELEGATION_TOKEN_RENEW_INTERVAL, YarnConfiguration.DEFAULT_TIMELINE_DELEGATION_TOKEN_RENEW_INTERVAL);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceStart",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        if (!runningAsAuxService) {\r\n            try {\r\n                doSecureLogin();\r\n            } catch (IOException ie) {\r\n                throw new YarnRuntimeException(\"Failed to login\", ie);\r\n            }\r\n        }\r\n        this.loginUGI = UserGroupInformation.getLoginUser();\r\n    }\r\n    tokenRenewalExecutor = new ScheduledThreadPoolExecutor(1, new ThreadFactoryBuilder().setNameFormat(\"App Collector Token Renewal thread\").build());\r\n    super.serviceStart();\r\n    startWebApp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "createTokenManagerService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineV2DelegationTokenSecretManagerService createTokenManagerService()\n{\r\n    return new TimelineV2DelegationTokenSecretManagerService();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getTokenManagerService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineV2DelegationTokenSecretManagerService getTokenManagerService()\n{\r\n    return tokenMgrService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "doSecureLogin",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void doSecureLogin() throws IOException\n{\r\n    Configuration conf = getConfig();\r\n    String webAppURLWithoutScheme = WebAppUtils.getTimelineCollectorWebAppURLWithoutScheme(conf);\r\n    InetSocketAddress addr = NetUtils.createSocketAddr(webAppURLWithoutScheme);\r\n    SecurityUtil.login(conf, YarnConfiguration.TIMELINE_SERVICE_KEYTAB, YarnConfiguration.TIMELINE_SERVICE_PRINCIPAL, addr.getHostName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (timelineRestServer != null) {\r\n        timelineRestServer.stop();\r\n    }\r\n    if (tokenRenewalExecutor != null) {\r\n        tokenRenewalExecutor.shutdownNow();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "generateTokenForAppCollector",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token<TimelineDelegationTokenIdentifier> generateTokenForAppCollector(String user)\n{\r\n    Token<TimelineDelegationTokenIdentifier> token = tokenMgrService.generateToken(UserGroupInformation.createRemoteUser(user), loginUGI.getShortUserName());\r\n    token.setService(new Text(timelineRestServerBindAddress));\r\n    return token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "renewTokenForAppCollector",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long renewTokenForAppCollector(AppLevelTimelineCollector appCollector) throws IOException\n{\r\n    if (appCollector.getDelegationTokenForApp() != null) {\r\n        return tokenMgrService.renewToken(appCollector.getDelegationTokenForApp(), appCollector.getAppDelegationTokenRenewer());\r\n    } else {\r\n        LOG.info(\"Delegation token not available for renewal for app \" + appCollector.getTimelineEntityContext().getAppId());\r\n        return -1;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "cancelTokenForAppCollector",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cancelTokenForAppCollector(AppLevelTimelineCollector appCollector) throws IOException\n{\r\n    if (appCollector.getDelegationTokenForApp() != null) {\r\n        tokenMgrService.cancelToken(appCollector.getDelegationTokenForApp(), appCollector.getAppUser());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getRenewalDelay",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRenewalDelay(long renewInterval)\n{\r\n    return ((renewInterval > TIME_BEFORE_RENEW_DATE) ? renewInterval - TIME_BEFORE_RENEW_DATE : renewInterval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getRegenerationDelay",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getRegenerationDelay(long tokenMaxDate)\n{\r\n    long regenerateTime = tokenMaxDate - Time.now();\r\n    return ((regenerateTime > TIME_BEFORE_EXPIRY) ? regenerateTime - TIME_BEFORE_EXPIRY : regenerateTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "generateTokenAndSetTimer",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "org.apache.hadoop.yarn.api.records.Token generateTokenAndSetTimer(ApplicationId appId, AppLevelTimelineCollector appCollector) throws IOException\n{\r\n    Token<TimelineDelegationTokenIdentifier> timelineToken = generateTokenForAppCollector(appCollector.getAppUser());\r\n    TimelineDelegationTokenIdentifier tokenId = timelineToken.decodeIdentifier();\r\n    long renewalDelay = getRenewalDelay(tokenRenewInterval);\r\n    long regenerationDelay = getRegenerationDelay(tokenId.getMaxDate());\r\n    if (renewalDelay > 0 || regenerationDelay > 0) {\r\n        boolean isTimerForRenewal = renewalDelay < regenerationDelay;\r\n        Future<?> renewalOrRegenerationFuture = tokenRenewalExecutor.schedule(new CollectorTokenRenewer(appId, isTimerForRenewal), isTimerForRenewal ? renewalDelay : regenerationDelay, TimeUnit.MILLISECONDS);\r\n        appCollector.setDelegationTokenAndFutureForApp(timelineToken, renewalOrRegenerationFuture, tokenId.getMaxDate(), tokenId.getRenewer().toString());\r\n    }\r\n    LOG.info(\"Generated a new token \" + timelineToken + \" for app \" + appId);\r\n    return org.apache.hadoop.yarn.api.records.Token.newInstance(timelineToken.getIdentifier(), timelineToken.getKind().toString(), timelineToken.getPassword(), timelineToken.getService().toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "doPostPut",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void doPostPut(ApplicationId appId, TimelineCollector collector)\n{\r\n    try {\r\n        updateTimelineCollectorContext(appId, collector);\r\n        org.apache.hadoop.yarn.api.records.Token token = null;\r\n        if (UserGroupInformation.isSecurityEnabled() && collector instanceof AppLevelTimelineCollector) {\r\n            AppLevelTimelineCollector appCollector = (AppLevelTimelineCollector) collector;\r\n            token = generateTokenAndSetTimer(appId, appCollector);\r\n        }\r\n        reportNewCollectorInfoToNM(appId, token);\r\n    } catch (YarnException | IOException e) {\r\n        LOG.error(\"Failed to communicate with NM Collector Service for \" + appId);\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "postRemove",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void postRemove(ApplicationId appId, TimelineCollector collector)\n{\r\n    if (collector instanceof AppLevelTimelineCollector) {\r\n        try {\r\n            cancelTokenForAppCollector((AppLevelTimelineCollector) collector);\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Failed to cancel token for app collector with appId \" + appId, e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "startWebApp",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void startWebApp()\n{\r\n    Configuration conf = getConfig();\r\n    String initializers = conf.get(\"hadoop.http.filter.initializers\", \"\");\r\n    Set<String> defaultInitializers = new LinkedHashSet<String>();\r\n    TimelineServerUtils.addTimelineAuthFilter(initializers, defaultInitializers, tokenMgrService);\r\n    TimelineServerUtils.setTimelineFilters(conf, initializers, defaultInitializers);\r\n    String bindAddress = null;\r\n    String host = conf.getTrimmed(YarnConfiguration.TIMELINE_SERVICE_COLLECTOR_BIND_HOST);\r\n    Configuration.IntegerRanges portRanges = conf.getRange(YarnConfiguration.TIMELINE_SERVICE_COLLECTOR_BIND_PORT_RANGES, \"\");\r\n    int startPort = 0;\r\n    if (portRanges != null && !portRanges.isEmpty()) {\r\n        startPort = portRanges.getRangeStart();\r\n    }\r\n    if (host == null || host.isEmpty()) {\r\n        bindAddress = conf.get(YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_BIND_HOST) + \":\" + startPort;\r\n    } else {\r\n        bindAddress = host + \":\" + startPort;\r\n    }\r\n    try {\r\n        HttpServer2.Builder builder = new HttpServer2.Builder().setName(\"timeline\").setConf(conf).addEndpoint(URI.create((YarnConfiguration.useHttps(conf) ? \"https://\" : \"http://\") + bindAddress));\r\n        if (portRanges != null && !portRanges.isEmpty()) {\r\n            builder.setPortRanges(portRanges);\r\n        }\r\n        if (YarnConfiguration.useHttps(conf)) {\r\n            builder = WebAppUtils.loadSslConfiguration(builder, conf);\r\n        }\r\n        timelineRestServer = builder.build();\r\n        timelineRestServer.addJerseyResourcePackage(TimelineCollectorWebService.class.getPackage().getName() + \";\" + GenericExceptionHandler.class.getPackage().getName() + \";\" + YarnJacksonJaxbJsonProvider.class.getPackage().getName(), \"/*\");\r\n        timelineRestServer.setAttribute(COLLECTOR_MANAGER_ATTR_KEY, this);\r\n        timelineRestServer.start();\r\n    } catch (Exception e) {\r\n        String msg = \"The per-node collector webapp failed to start.\";\r\n        LOG.error(msg, e);\r\n        throw new YarnRuntimeException(msg, e);\r\n    }\r\n    this.timelineRestServerBindAddress = WebAppUtils.getResolvedAddress(timelineRestServer.getConnectorAddress(0));\r\n    LOG.info(\"Instantiated the per-node collector webapp at \" + timelineRestServerBindAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "reportNewCollectorInfoToNM",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void reportNewCollectorInfoToNM(ApplicationId appId, org.apache.hadoop.yarn.api.records.Token token) throws YarnException, IOException\n{\r\n    ReportNewCollectorInfoRequest request = ReportNewCollectorInfoRequest.newInstance(appId, this.timelineRestServerBindAddress, token);\r\n    LOG.info(\"Report a new collector for application: \" + appId + \" to the NM Collector Service.\");\r\n    getNMCollectorService().reportNewCollectorInfo(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "updateTimelineCollectorContext",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void updateTimelineCollectorContext(ApplicationId appId, TimelineCollector collector) throws YarnException, IOException\n{\r\n    GetTimelineCollectorContextRequest request = GetTimelineCollectorContextRequest.newInstance(appId);\r\n    LOG.info(\"Get timeline collector context for \" + appId);\r\n    GetTimelineCollectorContextResponse response = getNMCollectorService().getTimelineCollectorContext(request);\r\n    String userId = response.getUserId();\r\n    if (userId != null && !userId.isEmpty()) {\r\n        LOG.debug(\"Setting the user in the context: {}\", userId);\r\n        collector.getTimelineEntityContext().setUserId(userId);\r\n    }\r\n    String flowName = response.getFlowName();\r\n    if (flowName != null && !flowName.isEmpty()) {\r\n        LOG.debug(\"Setting the flow name: {}\", flowName);\r\n        collector.getTimelineEntityContext().setFlowName(flowName);\r\n    }\r\n    String flowVersion = response.getFlowVersion();\r\n    if (flowVersion != null && !flowVersion.isEmpty()) {\r\n        LOG.debug(\"Setting the flow version: {}\", flowVersion);\r\n        collector.getTimelineEntityContext().setFlowVersion(flowVersion);\r\n    }\r\n    long flowRunId = response.getFlowRunId();\r\n    if (flowRunId != 0L) {\r\n        LOG.debug(\"Setting the flow run id: {}\", flowRunId);\r\n        collector.getTimelineEntityContext().setFlowRunId(flowRunId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getNMCollectorService",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "CollectorNodemanagerProtocol getNMCollectorService()\n{\r\n    if (nmCollectorService == null) {\r\n        synchronized (this) {\r\n            if (nmCollectorService == null) {\r\n                Configuration conf = getConfig();\r\n                InetSocketAddress nmCollectorServiceAddress = conf.getSocketAddr(YarnConfiguration.NM_BIND_HOST, YarnConfiguration.NM_COLLECTOR_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_NM_COLLECTOR_SERVICE_PORT);\r\n                LOG.info(\"nmCollectorServiceAddress: \" + nmCollectorServiceAddress);\r\n                final YarnRPC rpc = YarnRPC.create(conf);\r\n                nmCollectorService = (CollectorNodemanagerProtocol) rpc.getProxy(CollectorNodemanagerProtocol.class, nmCollectorServiceAddress, conf);\r\n            }\r\n        }\r\n    }\r\n    return nmCollectorService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getRestServerBindAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRestServerBindAddress()\n{\r\n    return timelineRestServerBindAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilter createFilter()\n{\r\n    return new TimelineKeyValueFilter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseValue",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Object parseValue(String strValue)\n{\r\n    if (!valueAsString) {\r\n        try {\r\n            return GenericObjectMapper.OBJECT_READER.readValue(strValue);\r\n        } catch (IOException e) {\r\n            return strValue;\r\n        }\r\n    } else {\r\n        return strValue;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setCompareOpToCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setCompareOpToCurrentFilter(TimelineCompareOp compareOp, boolean keyMustExistFlag) throws TimelineParseException\n{\r\n    if (compareOp != TimelineCompareOp.EQUAL && compareOp != TimelineCompareOp.NOT_EQUAL) {\r\n        throw new TimelineParseException(\"TimelineCompareOp for kv-filter \" + \"should be EQUAL or NOT_EQUAL\");\r\n    }\r\n    ((TimelineKeyValueFilter) getCurrentFilter()).setCompareOp(compareOp, keyMustExistFlag);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setValueToCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setValueToCurrentFilter(Object value)\n{\r\n    TimelineFilter currentFilter = getCurrentFilter();\r\n    if (currentFilter != null) {\r\n        ((TimelineKeyValueFilter) currentFilter).setValue(value);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    if (!YarnConfiguration.timelineServiceV2Enabled(conf)) {\r\n        throw new YarnException(\"Looks like timeline_collector is set as an auxillary service in \" + YarnConfiguration.NM_AUX_SERVICES + \". But Timeline service v2 is not enabled,\" + \" so timeline_collector needs to be removed\" + \" from that list of auxillary services.\");\r\n    }\r\n    collectorLingerPeriod = conf.getLong(YarnConfiguration.ATS_APP_COLLECTOR_LINGER_PERIOD_IN_MS, YarnConfiguration.DEFAULT_ATS_APP_COLLECTOR_LINGER_PERIOD_IN_MS);\r\n    scheduler = Executors.newSingleThreadScheduledExecutor();\r\n    collectorManager.init(conf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    collectorManager.start();\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    scheduler.shutdown();\r\n    if (!scheduler.awaitTermination(collectorLingerPeriod, TimeUnit.MILLISECONDS)) {\r\n        LOG.warn(\"Scheduler terminated before removing the application collectors\");\r\n    }\r\n    collectorManager.stop();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "addApplicationIfAbsent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean addApplicationIfAbsent(ApplicationId appId, String user)\n{\r\n    AppLevelTimelineCollector collector = new AppLevelTimelineCollectorWithAgg(appId, user);\r\n    return (collectorManager.putIfAbsent(appId, collector) == collector);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "removeApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean removeApplication(ApplicationId appId)\n{\r\n    return collectorManager.remove(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "initializeContainer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initializeContainer(ContainerInitializationContext context)\n{\r\n    if (context.getContainerType() == ContainerType.APPLICATION_MASTER) {\r\n        ApplicationId appId = context.getContainerId().getApplicationAttemptId().getApplicationId();\r\n        synchronized (appIdToContainerId) {\r\n            Set<ContainerId> masterContainers = appIdToContainerId.get(appId);\r\n            if (masterContainers == null) {\r\n                masterContainers = new HashSet<>();\r\n                appIdToContainerId.put(appId, masterContainers);\r\n            }\r\n            masterContainers.add(context.getContainerId());\r\n        }\r\n        addApplicationIfAbsent(appId, context.getUser());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "stopContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void stopContainer(ContainerTerminationContext context)\n{\r\n    if (context.getContainerType() == ContainerType.APPLICATION_MASTER) {\r\n        final ContainerId containerId = context.getContainerId();\r\n        removeApplicationCollector(containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "removeApplicationCollector",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Future removeApplicationCollector(final ContainerId containerId)\n{\r\n    final ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n    return scheduler.schedule(new Runnable() {\r\n\r\n        public void run() {\r\n            boolean shouldRemoveApplication = false;\r\n            synchronized (appIdToContainerId) {\r\n                Set<ContainerId> masterContainers = appIdToContainerId.get(appId);\r\n                if (masterContainers == null) {\r\n                    LOG.info(\"Stop container for \" + containerId + \" is called before initializing container.\");\r\n                    return;\r\n                }\r\n                masterContainers.remove(containerId);\r\n                if (masterContainers.size() == 0) {\r\n                    shouldRemoveApplication = true;\r\n                    appIdToContainerId.remove(appId);\r\n                }\r\n            }\r\n            if (shouldRemoveApplication) {\r\n                removeApplication(appId);\r\n            }\r\n        }\r\n    }, collectorLingerPeriod, TimeUnit.MILLISECONDS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "hasApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean hasApplication(ApplicationId appId)\n{\r\n    return collectorManager.containsTimelineCollector(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "initializeApplication",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initializeApplication(ApplicationInitializationContext context)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "stopApplication",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void stopApplication(ApplicationTerminationContext context)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getMetaData",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteBuffer getMetaData()\n{\r\n    return ByteBuffer.allocate(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "launchServer",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "PerNodeTimelineCollectorsAuxService launchServer(String[] args, NodeTimelineCollectorManager collectorManager, Configuration conf)\n{\r\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\r\n    StringUtils.startupShutdownMessage(PerNodeTimelineCollectorsAuxService.class, args, LOG);\r\n    PerNodeTimelineCollectorsAuxService auxService = null;\r\n    try {\r\n        auxService = collectorManager == null ? new PerNodeTimelineCollectorsAuxService(new NodeTimelineCollectorManager(false)) : new PerNodeTimelineCollectorsAuxService(collectorManager);\r\n        ShutdownHookManager.get().addShutdownHook(new ShutdownHook(auxService), SHUTDOWN_HOOK_PRIORITY);\r\n        auxService.init(conf);\r\n        auxService.start();\r\n    } catch (Throwable t) {\r\n        LOG.error(\"Error starting PerNodeTimelineCollectorServer\", t);\r\n        ExitUtil.terminate(-1, \"Error starting PerNodeTimelineCollectorServer\");\r\n    }\r\n    return auxService;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n    launchServer(args, null, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getConfsToRetrieve",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterList getConfsToRetrieve()\n{\r\n    return confsToRetrieve;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setConfsToRetrieve",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConfsToRetrieve(TimelineFilterList confs)\n{\r\n    this.confsToRetrieve = confs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getMetricsToRetrieve",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterList getMetricsToRetrieve()\n{\r\n    return metricsToRetrieve;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setMetricsToRetrieve",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMetricsToRetrieve(TimelineFilterList metrics)\n{\r\n    this.metricsToRetrieve = metrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFieldsToRetrieve",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "EnumSet<Field> getFieldsToRetrieve()\n{\r\n    return fieldsToRetrieve;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setFieldsToRetrieve",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFieldsToRetrieve(EnumSet<Field> fields)\n{\r\n    this.fieldsToRetrieve = fields;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "addFieldsBasedOnConfsAndMetricsToRetrieve",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addFieldsBasedOnConfsAndMetricsToRetrieve()\n{\r\n    if (!fieldsToRetrieve.contains(Field.CONFIGS) && confsToRetrieve != null && !confsToRetrieve.getFilterList().isEmpty()) {\r\n        fieldsToRetrieve.add(Field.CONFIGS);\r\n    }\r\n    if (!fieldsToRetrieve.contains(Field.METRICS) && metricsToRetrieve != null && !metricsToRetrieve.getFilterList().isEmpty()) {\r\n        fieldsToRetrieve.add(Field.METRICS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getMetricsLimit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Integer getMetricsLimit()\n{\r\n    return metricsLimit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getMetricsTimeBegin",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getMetricsTimeBegin()\n{\r\n    return this.metricsTimeBegin;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getMetricsTimeEnd",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getMetricsTimeEnd()\n{\r\n    return metricsTimeEnd;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setMetricsLimit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMetricsLimit(Integer limit)\n{\r\n    if (limit == null || limit < 1) {\r\n        this.metricsLimit = DEFAULT_METRICS_LIMIT;\r\n    } else {\r\n        this.metricsLimit = limit;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init(HttpServletResponse response)\n{\r\n    response.setContentType(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseDate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long parseDate(String strDate) throws ParseException\n{\r\n    Date date = DATE_FORMAT.get().parse(strDate);\r\n    return date.getTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseDateRange",
  "errType" : [ "ParseException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "DateRange parseDateRange(String dateRange) throws IllegalArgumentException\n{\r\n    if (dateRange == null || dateRange.isEmpty()) {\r\n        return new DateRange(null, null);\r\n    }\r\n    String[] dates = dateRange.split(RANGE_DELIMITER, 2);\r\n    Long start = null;\r\n    Long end = null;\r\n    try {\r\n        String startDate = dates[0].trim();\r\n        if (!startDate.isEmpty()) {\r\n            if (startDate.length() != DATE_PATTERN.length()) {\r\n                throw new IllegalArgumentException(\"Invalid date range \" + dateRange);\r\n            }\r\n            start = parseDate(startDate);\r\n        }\r\n        if (dates.length > 1) {\r\n            String endDate = dates[1].trim();\r\n            if (!endDate.isEmpty()) {\r\n                if (endDate.length() != DATE_PATTERN.length()) {\r\n                    throw new IllegalArgumentException(\"Invalid date range \" + dateRange);\r\n                }\r\n                end = parseDate(endDate);\r\n            }\r\n        } else {\r\n            end = start;\r\n        }\r\n        if (start != null && end != null) {\r\n            if (start > end) {\r\n                throw new IllegalArgumentException(\"Invalid date range \" + dateRange);\r\n            }\r\n        }\r\n        return new DateRange(start, end);\r\n    } catch (ParseException e) {\r\n        throw new IllegalArgumentException(\"Invalid date range \" + dateRange);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getTimelineReaderManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineReaderManager getTimelineReaderManager()\n{\r\n    return (TimelineReaderManager) ctxt.getAttribute(TimelineReaderServer.TIMELINE_READER_MANAGER_ATTR);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "handleException",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void handleException(Exception e, String url, long startTime, String invalidNumMsg) throws BadRequestException, WebApplicationException\n{\r\n    long endTime = Time.monotonicNow();\r\n    LOG.info(\"Processed URL \" + url + \" but encountered exception (Took \" + (endTime - startTime) + \" ms.)\");\r\n    if (e instanceof NumberFormatException) {\r\n        throw new BadRequestException(invalidNumMsg + \" is not a numeric value.\");\r\n    } else if (e instanceof IllegalArgumentException) {\r\n        throw new BadRequestException(e.getMessage() == null ? \"Requested Invalid Field.\" : e.getMessage());\r\n    } else if (e instanceof NotFoundException) {\r\n        throw (NotFoundException) e;\r\n    } else if (e instanceof TimelineParseException) {\r\n        throw new BadRequestException(e.getMessage() == null ? \"Filter Parsing failed.\" : e.getMessage());\r\n    } else if (e instanceof BadRequestException) {\r\n        throw (BadRequestException) e;\r\n    } else if (e instanceof ForbiddenException) {\r\n        throw (ForbiddenException) e;\r\n    } else {\r\n        LOG.error(\"Error while processing REST request\", e);\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "about",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineAbout about(@Context HttpServletRequest req, @Context HttpServletResponse res)\n{\r\n    init(res);\r\n    return TimelineUtils.createTimelineAbout(\"Timeline Reader API\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "health",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Response health(@Context HttpServletRequest req, @Context HttpServletResponse res)\n{\r\n    Response response;\r\n    TimelineHealth timelineHealth = this.getTimelineReaderManager().getHealthStatus();\r\n    if (timelineHealth.getHealthStatus().equals(TimelineHealth.TimelineHealthStatus.RUNNING)) {\r\n        response = Response.ok(timelineHealth).build();\r\n    } else {\r\n        LOG.info(\"Timeline services health check: timeline reader reported \" + \"connection failure\");\r\n        response = Response.serverError().entity(timelineHealth).build();\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntities",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "Set<TimelineEntity> getEntities(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"uid\") String uId, @PathParam(\"entitytype\") String entityType, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    Set<TimelineEntity> entities = null;\r\n    try {\r\n        TimelineReaderContext context = TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\r\n        if (context == null) {\r\n            throw new BadRequestException(\"Incorrect UID \" + uId);\r\n        }\r\n        context.setEntityType(TimelineReaderWebServicesUtils.parseStr(entityType));\r\n        entities = timelineReaderManager.getEntities(context, TimelineReaderWebServicesUtils.createTimelineEntityFilters(limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, fromId), TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\r\n        checkAccessForGenericEntities(entities, callerUGI, entityType);\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"Either limit or createdtime start/end or metricslimit or metricstime\" + \" start/end or fromid\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entities == null) {\r\n        entities = Collections.emptySet();\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getEntities(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId, @PathParam(\"entitytype\") String entityType, @QueryParam(\"userid\") String userId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    return getEntities(req, res, null, appId, entityType, userId, flowName, flowRunId, limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, fromId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntities",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "Set<TimelineEntity> getEntities(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"appid\") String appId, @PathParam(\"entitytype\") String entityType, @QueryParam(\"userid\") String userId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    Set<TimelineEntity> entities = null;\r\n    try {\r\n        TimelineReaderContext context = TimelineReaderWebServicesUtils.createTimelineReaderContext(clusterId, userId, flowName, flowRunId, appId, entityType, null, null);\r\n        entities = timelineReaderManager.getEntities(context, TimelineReaderWebServicesUtils.createTimelineEntityFilters(limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, fromId), TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\r\n        checkAccessForGenericEntities(entities, callerUGI, entityType);\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"Either flowrunid or limit or createdtime start/end or metricslimit\" + \" or metricstime start/end or fromid\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entities == null) {\r\n        entities = Collections.emptySet();\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntity",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "TimelineEntity getEntity(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"uid\") String uId, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    TimelineEntity entity = null;\r\n    try {\r\n        TimelineReaderContext context = TimelineUIDConverter.GENERIC_ENTITY_UID.decodeUID(uId);\r\n        if (context == null) {\r\n            throw new BadRequestException(\"Incorrect UID \" + uId);\r\n        }\r\n        entity = timelineReaderManager.getEntity(context, TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\r\n        checkAccessForGenericEntity(entity, callerUGI);\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"Either metricslimit or metricstime\" + \" start/end\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entity == null) {\r\n        LOG.info(\"Processed URL \" + url + \" but entity not found\" + \" (Took \" + (Time.monotonicNow() - startTime) + \" ms.)\");\r\n        throw new NotFoundException(\"Timeline entity with uid: \" + uId + \"is not found\");\r\n    }\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntity",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity getEntity(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId, @PathParam(\"entitytype\") String entityType, @PathParam(\"entityid\") String entityId, @QueryParam(\"userid\") String userId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"entityidprefix\") String entityIdPrefix)\n{\r\n    return getEntity(req, res, null, appId, entityType, entityId, userId, flowName, flowRunId, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, entityIdPrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntity",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "TimelineEntity getEntity(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"appid\") String appId, @PathParam(\"entitytype\") String entityType, @PathParam(\"entityid\") String entityId, @QueryParam(\"userid\") String userId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"entityidprefix\") String entityIdPrefix)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    TimelineEntity entity = null;\r\n    try {\r\n        entity = timelineReaderManager.getEntity(TimelineReaderWebServicesUtils.createTimelineReaderContext(clusterId, userId, flowName, flowRunId, appId, entityType, entityIdPrefix, entityId), TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\r\n        checkAccessForGenericEntity(entity, callerUGI);\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"Either flowrunid or metricslimit or\" + \" metricstime start/end\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entity == null) {\r\n        LOG.info(\"Processed URL \" + url + \" but entity not found\" + \" (Took \" + (Time.monotonicNow() - startTime) + \" ms.)\");\r\n        throw new NotFoundException(\"Timeline entity {id: \" + entityId + \", type: \" + entityType + \" } is not found\");\r\n    }\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlowRun",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "TimelineEntity getFlowRun(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"uid\") String uId, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    TimelineEntity entity = null;\r\n    try {\r\n        TimelineReaderContext context = TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\r\n        if (context == null) {\r\n            throw new BadRequestException(\"Incorrect UID \" + uId);\r\n        }\r\n        checkAccess(timelineReaderManager, callerUGI, context.getUserId());\r\n        context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\r\n        entity = timelineReaderManager.getEntity(context, TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(null, metricsToRetrieve, null, null, null, null));\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"flowrunid\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entity == null) {\r\n        LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" + (Time.monotonicNow() - startTime) + \" ms.)\");\r\n        throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\r\n    }\r\n    return entity;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlowRun",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity getFlowRun(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"userid\") String userId, @PathParam(\"flowname\") String flowName, @PathParam(\"flowrunid\") String flowRunId, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve)\n{\r\n    return getFlowRun(req, res, null, userId, flowName, flowRunId, metricsToRetrieve);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlowRun",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "TimelineEntity getFlowRun(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"userid\") String userId, @PathParam(\"flowname\") String flowName, @PathParam(\"flowrunid\") String flowRunId, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    TimelineEntity entity = null;\r\n    try {\r\n        TimelineReaderContext context = TimelineReaderWebServicesUtils.createTimelineReaderContext(clusterId, userId, flowName, flowRunId, null, TimelineEntityType.YARN_FLOW_RUN.toString(), null, null);\r\n        checkAccess(timelineReaderManager, callerUGI, context.getUserId());\r\n        entity = timelineReaderManager.getEntity(context, TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(null, metricsToRetrieve, null, null, null, null));\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"flowrunid\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entity == null) {\r\n        LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" + (Time.monotonicNow() - startTime) + \" ms.)\");\r\n        throw new NotFoundException(\"Flow run {flow name: \" + TimelineReaderWebServicesUtils.parseStr(flowName) + \", run id: \" + TimelineReaderWebServicesUtils.parseLongStr(flowRunId) + \" } is not found\");\r\n    }\r\n    return entity;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlowRuns",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "Set<TimelineEntity> getFlowRuns(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"uid\") String uId, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"fromid\") String fromId)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    Set<TimelineEntity> entities = null;\r\n    try {\r\n        TimelineReaderContext context = TimelineUIDConverter.FLOW_UID.decodeUID(uId);\r\n        if (context == null) {\r\n            throw new BadRequestException(\"Incorrect UID \" + uId);\r\n        }\r\n        checkAccess(timelineReaderManager, callerUGI, context.getUserId());\r\n        context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\r\n        entities = timelineReaderManager.getEntities(context, TimelineReaderWebServicesUtils.createTimelineEntityFilters(limit, createdTimeStart, createdTimeEnd, null, null, null, null, null, null, fromId), TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(null, metricsToRetrieve, fields, null, null, null));\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"createdTime start/end or limit or fromId\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entities == null) {\r\n        entities = Collections.emptySet();\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlowRuns",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getFlowRuns(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"userid\") String userId, @PathParam(\"flowname\") String flowName, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"fromid\") String fromId)\n{\r\n    return getFlowRuns(req, res, null, userId, flowName, limit, createdTimeStart, createdTimeEnd, metricsToRetrieve, fields, fromId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlowRuns",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "Set<TimelineEntity> getFlowRuns(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"userid\") String userId, @PathParam(\"flowname\") String flowName, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"fromid\") String fromId)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    Set<TimelineEntity> entities = null;\r\n    try {\r\n        TimelineReaderContext timelineReaderContext = TimelineReaderWebServicesUtils.createTimelineReaderContext(clusterId, userId, flowName, null, null, TimelineEntityType.YARN_FLOW_RUN.toString(), null, null);\r\n        checkAccess(timelineReaderManager, callerUGI, timelineReaderContext.getUserId());\r\n        entities = timelineReaderManager.getEntities(timelineReaderContext, TimelineReaderWebServicesUtils.createTimelineEntityFilters(limit, createdTimeStart, createdTimeEnd, null, null, null, null, null, null, fromId), TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(null, metricsToRetrieve, fields, null, null, null));\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"createdTime start/end or limit or fromId\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entities == null) {\r\n        entities = Collections.emptySet();\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlows",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getFlows(@Context HttpServletRequest req, @Context HttpServletResponse res, @QueryParam(\"limit\") String limit, @QueryParam(\"daterange\") String dateRange, @QueryParam(\"fromid\") String fromId)\n{\r\n    return getFlows(req, res, null, limit, dateRange, fromId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlows",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "Set<TimelineEntity> getFlows(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @QueryParam(\"limit\") String limit, @QueryParam(\"daterange\") String dateRange, @QueryParam(\"fromid\") String fromId)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    Set<TimelineEntity> entities = null;\r\n    try {\r\n        DateRange range = parseDateRange(dateRange);\r\n        TimelineEntityFilters entityFilters = TimelineReaderWebServicesUtils.createTimelineEntityFilters(limit, range.dateStart, range.dateEnd, null, null, null, null, null, null, fromId);\r\n        entities = timelineReaderManager.getEntities(TimelineReaderWebServicesUtils.createTimelineReaderContext(clusterId, null, null, null, null, TimelineEntityType.YARN_FLOW_ACTIVITY.toString(), null, null), entityFilters, TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(null, null, null, null, null, null));\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"limit\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entities == null) {\r\n        entities = Collections.emptySet();\r\n    } else {\r\n        checkAccess(timelineReaderManager, callerUGI, entities, FlowActivityEntity.USER_INFO_KEY, true);\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getApp",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "TimelineEntity getApp(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"uid\") String uId, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    TimelineEntity entity = null;\r\n    try {\r\n        TimelineReaderContext context = TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\r\n        if (context == null) {\r\n            throw new BadRequestException(\"Incorrect UID \" + uId);\r\n        }\r\n        context.setEntityType(TimelineEntityType.YARN_APPLICATION.toString());\r\n        entity = timelineReaderManager.getEntity(context, TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\r\n        checkAccessForAppEntity(entity, callerUGI);\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"Either metricslimit or metricstime\" + \" start/end\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entity == null) {\r\n        LOG.info(\"Processed URL \" + url + \" but app not found\" + \" (Took \" + (Time.monotonicNow() - startTime) + \" ms.)\");\r\n        throw new NotFoundException(\"App with uid \" + uId + \" not found\");\r\n    }\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getApp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity getApp(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"userid\") String userId, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd)\n{\r\n    return getApp(req, res, null, appId, flowName, flowRunId, userId, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getApp",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "TimelineEntity getApp(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"appid\") String appId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"userid\") String userId, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    TimelineEntity entity = null;\r\n    try {\r\n        entity = timelineReaderManager.getEntity(TimelineReaderWebServicesUtils.createTimelineReaderContext(clusterId, userId, flowName, flowRunId, appId, TimelineEntityType.YARN_APPLICATION.toString(), null, null), TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\r\n        checkAccessForAppEntity(entity, callerUGI);\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"Either flowrunid or metricslimit or\" + \" metricstime start/end\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entity == null) {\r\n        LOG.info(\"Processed URL \" + url + \" but app not found\" + \" (Took \" + (Time.monotonicNow() - startTime) + \" ms.)\");\r\n        throw new NotFoundException(\"App \" + appId + \" not found\");\r\n    }\r\n    return entity;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlowRunApps",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "Set<TimelineEntity> getFlowRunApps(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"uid\") String uId, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    Set<TimelineEntity> entities = null;\r\n    try {\r\n        TimelineReaderContext context = TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\r\n        if (context == null) {\r\n            throw new BadRequestException(\"Incorrect UID \" + uId);\r\n        }\r\n        checkAccess(timelineReaderManager, callerUGI, context.getUserId());\r\n        context.setEntityType(TimelineEntityType.YARN_APPLICATION.toString());\r\n        entities = timelineReaderManager.getEntities(context, TimelineReaderWebServicesUtils.createTimelineEntityFilters(limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, fromId), TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"Either limit or createdtime start/end or metricslimit or\" + \" metricstime start/end\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entities == null) {\r\n        entities = Collections.emptySet();\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlowRunApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getFlowRunApps(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"userid\") String userId, @PathParam(\"flowname\") String flowName, @PathParam(\"flowrunid\") String flowRunId, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    return getEntities(req, res, null, null, TimelineEntityType.YARN_APPLICATION.toString(), userId, flowName, flowRunId, limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, fromId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlowRunApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getFlowRunApps(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"userid\") String userId, @PathParam(\"flowname\") String flowName, @PathParam(\"flowrunid\") String flowRunId, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    return getEntities(req, res, clusterId, null, TimelineEntityType.YARN_APPLICATION.toString(), userId, flowName, flowRunId, limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, fromId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlowApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getFlowApps(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"userid\") String userId, @PathParam(\"flowname\") String flowName, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    return getEntities(req, res, null, null, TimelineEntityType.YARN_APPLICATION.toString(), userId, flowName, null, limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, fromId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFlowApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getFlowApps(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"userid\") String userId, @PathParam(\"flowname\") String flowName, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    return getEntities(req, res, clusterId, null, TimelineEntityType.YARN_APPLICATION.toString(), userId, flowName, null, limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, fromId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getAppAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getAppAttempts(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId, @QueryParam(\"userid\") String userId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    return getAppAttempts(req, res, null, appId, userId, flowName, flowRunId, limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, fromId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getAppAttempts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getAppAttempts(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"appid\") String appId, @QueryParam(\"userid\") String userId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    return getEntities(req, res, clusterId, appId, TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString(), userId, flowName, flowRunId, limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, fromId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getAppAttempt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity getAppAttempt(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId, @PathParam(\"appattemptid\") String appAttemptId, @QueryParam(\"userid\") String userId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"entityidprefix\") String entityIdPrefix)\n{\r\n    return getAppAttempt(req, res, null, appId, appAttemptId, userId, flowName, flowRunId, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, entityIdPrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getAppAttempt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity getAppAttempt(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"appid\") String appId, @PathParam(\"appattemptid\") String appAttemptId, @QueryParam(\"userid\") String userId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"entityidprefix\") String entityIdPrefix)\n{\r\n    return getEntity(req, res, clusterId, appId, TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString(), appAttemptId, userId, flowName, flowRunId, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, entityIdPrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getContainers(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId, @PathParam(\"appattemptid\") String appattemptId, @QueryParam(\"userid\") String userId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    return getContainers(req, res, null, appId, appattemptId, userId, flowName, flowRunId, limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, fromId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Set<TimelineEntity> getContainers(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"appid\") String appId, @PathParam(\"appattemptid\") String appattemptId, @QueryParam(\"userid\") String userId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    String entityType = TimelineEntityType.YARN_CONTAINER.toString();\r\n    String parentEntityType = TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString();\r\n    String jsonFormatString = \"{\\\"type\\\":\\\"\" + parentEntityType + \"\\\",\\\"id\\\":\\\"\" + appattemptId + \"\\\"}\";\r\n    String containerFilters = \"SYSTEM_INFO_PARENT_ENTITY eq \" + jsonFormatString;\r\n    String infofilter;\r\n    if (infofilters != null) {\r\n        infofilter = containerFilters + \" AND \" + infofilters;\r\n    } else {\r\n        infofilter = containerFilters;\r\n    }\r\n    return getEntities(req, res, clusterId, appId, entityType, userId, flowName, flowRunId, limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilter, conffilters, metricfilters, eventfilters, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, fromId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity getContainer(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId, @PathParam(\"containerid\") String containerId, @QueryParam(\"userid\") String userId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"entityidprefix\") String entityIdPrefix)\n{\r\n    return getContainer(req, res, null, appId, containerId, userId, flowName, flowRunId, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, entityIdPrefix, metricsTimeStart, metricsTimeEnd);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity getContainer(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"appid\") String appId, @PathParam(\"containerid\") String containerId, @QueryParam(\"userid\") String userId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"entityidprefix\") String entityIdPrefix)\n{\r\n    return getEntity(req, res, clusterId, appId, TimelineEntityType.YARN_CONTAINER.toString(), containerId, userId, flowName, flowRunId, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, entityIdPrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntityTypes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getEntityTypes(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"appid\") String appId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"userid\") String userId)\n{\r\n    return getEntityTypes(req, res, null, appId, flowName, flowRunId, userId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntityTypes",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "Set<String> getEntityTypes(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"appid\") String appId, @QueryParam(\"flowname\") String flowName, @QueryParam(\"flowrunid\") String flowRunId, @QueryParam(\"userid\") String userId)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    Set<String> results = null;\r\n    try {\r\n        TimelineReaderContext context = TimelineReaderWebServicesUtils.createTimelineReaderContext(clusterId, userId, flowName, flowRunId, appId, null, null, null);\r\n        results = timelineReaderManager.getEntityTypes(context);\r\n        checkAccess(getTimelineReaderManager(), callerUGI, context.getUserId());\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"flowrunid\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntityTypesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    return results;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getSubAppEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getSubAppEntities(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"userid\") String userId, @PathParam(\"entitytype\") String entityType, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    return getSubAppEntities(req, res, null, userId, entityType, limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, fromId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getSubAppEntities",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "Set<TimelineEntity> getSubAppEntities(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"userid\") String userId, @PathParam(\"entitytype\") String entityType, @QueryParam(\"limit\") String limit, @QueryParam(\"createdtimestart\") String createdTimeStart, @QueryParam(\"createdtimeend\") String createdTimeEnd, @QueryParam(\"relatesto\") String relatesTo, @QueryParam(\"isrelatedto\") String isRelatedTo, @QueryParam(\"infofilters\") String infofilters, @QueryParam(\"conffilters\") String conffilters, @QueryParam(\"metricfilters\") String metricfilters, @QueryParam(\"eventfilters\") String eventfilters, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"fromid\") String fromId)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    Set<TimelineEntity> entities = null;\r\n    try {\r\n        TimelineReaderContext context = TimelineReaderWebServicesUtils.createTimelineReaderContext(clusterId, null, null, null, null, entityType, null, null, userId);\r\n        entities = timelineReaderManager.getEntities(context, TimelineReaderWebServicesUtils.createTimelineEntityFilters(limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo, infofilters, conffilters, metricfilters, eventfilters, fromId), TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\r\n        checkAccessForSubAppEntities(entities, callerUGI);\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"Either limit or createdtime start/end or metricslimit or metricstime\" + \" start/end or fromid\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entities == null) {\r\n        entities = Collections.emptySet();\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getSubAppEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getSubAppEntities(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"userid\") String userId, @PathParam(\"entitytype\") String entityType, @PathParam(\"entityid\") String entityId, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"entityidprefix\") String entityIdPrefix)\n{\r\n    return getSubAppEntities(req, res, null, userId, entityType, entityId, confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd, entityIdPrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getSubAppEntities",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "Set<TimelineEntity> getSubAppEntities(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(\"clusterid\") String clusterId, @PathParam(\"userid\") String userId, @PathParam(\"entitytype\") String entityType, @PathParam(\"entityid\") String entityId, @QueryParam(\"confstoretrieve\") String confsToRetrieve, @QueryParam(\"metricstoretrieve\") String metricsToRetrieve, @QueryParam(\"fields\") String fields, @QueryParam(\"metricslimit\") String metricsLimit, @QueryParam(\"metricstimestart\") String metricsTimeStart, @QueryParam(\"metricstimeend\") String metricsTimeEnd, @QueryParam(\"entityidprefix\") String entityIdPrefix)\n{\r\n    String url = req.getRequestURI() + (req.getQueryString() == null ? \"\" : QUERY_STRING_SEP + req.getQueryString());\r\n    UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(req);\r\n    LOG.info(\"Received URL \" + url + \" from user \" + TimelineReaderWebServicesUtils.getUserName(callerUGI));\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    init(res);\r\n    TimelineReaderManager timelineReaderManager = getTimelineReaderManager();\r\n    Set<TimelineEntity> entities = null;\r\n    try {\r\n        TimelineReaderContext context = TimelineReaderWebServicesUtils.createTimelineReaderContext(clusterId, null, null, null, null, entityType, entityIdPrefix, entityId, userId);\r\n        entities = timelineReaderManager.getEntities(context, new TimelineEntityFilters.Builder().build(), TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(confsToRetrieve, metricsToRetrieve, fields, metricsLimit, metricsTimeStart, metricsTimeEnd));\r\n        checkAccessForSubAppEntities(entities, callerUGI);\r\n        succeeded = true;\r\n    } catch (Exception e) {\r\n        handleException(e, url, startTime, \"Either metricslimit or metricstime\" + \" start/end\");\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        METRICS.addGetEntitiesLatency(latency, succeeded);\r\n        LOG.info(\"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\r\n    }\r\n    if (entities == null) {\r\n        entities = Collections.emptySet();\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "isDisplayEntityPerUserFilterEnabled",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isDisplayEntityPerUserFilterEnabled(Configuration config)\n{\r\n    return !config.getBoolean(YarnConfiguration.TIMELINE_SERVICE_READ_AUTH_ENABLED, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_READ_AUTH_ENABLED) && config.getBoolean(YarnConfiguration.FILTER_ENTITY_LIST_BY_USER, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkAccessForSubAppEntities",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void checkAccessForSubAppEntities(Set<TimelineEntity> entities, UserGroupInformation callerUGI) throws Exception\n{\r\n    if (entities != null && entities.size() > 0 && isDisplayEntityPerUserFilterEnabled(getTimelineReaderManager().getConfig())) {\r\n        TimelineReaderContext timelineReaderContext = null;\r\n        TimelineEntity entity = entities.iterator().next();\r\n        String fromId = (String) entity.getInfo().get(TimelineReaderUtils.FROMID_KEY);\r\n        timelineReaderContext = TimelineFromIdConverter.SUB_APPLICATION_ENTITY_FROMID.decodeUID(fromId);\r\n        checkAccess(getTimelineReaderManager(), callerUGI, timelineReaderContext.getDoAsUser());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkAccessForAppEntity",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkAccessForAppEntity(TimelineEntity entity, UserGroupInformation callerUGI) throws Exception\n{\r\n    if (entity != null && isDisplayEntityPerUserFilterEnabled(getTimelineReaderManager().getConfig())) {\r\n        String fromId = (String) entity.getInfo().get(TimelineReaderUtils.FROMID_KEY);\r\n        TimelineReaderContext timelineReaderContext = TimelineFromIdConverter.APPLICATION_FROMID.decodeUID(fromId);\r\n        checkAccess(getTimelineReaderManager(), callerUGI, timelineReaderContext.getUserId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkAccessForGenericEntity",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkAccessForGenericEntity(TimelineEntity entity, UserGroupInformation callerUGI) throws Exception\n{\r\n    if (entity != null && isDisplayEntityPerUserFilterEnabled(getTimelineReaderManager().getConfig())) {\r\n        String fromId = (String) entity.getInfo().get(TimelineReaderUtils.FROMID_KEY);\r\n        TimelineReaderContext timelineReaderContext = TimelineFromIdConverter.GENERIC_ENTITY_FROMID.decodeUID(fromId);\r\n        checkAccess(getTimelineReaderManager(), callerUGI, timelineReaderContext.getUserId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkAccessForGenericEntities",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void checkAccessForGenericEntities(Set<TimelineEntity> entities, UserGroupInformation callerUGI, String entityType) throws Exception\n{\r\n    if (entities != null && entities.size() > 0 && isDisplayEntityPerUserFilterEnabled(getTimelineReaderManager().getConfig())) {\r\n        TimelineReaderContext timelineReaderContext = null;\r\n        TimelineEntity entity = entities.iterator().next();\r\n        String uid = (String) entity.getInfo().get(TimelineReaderUtils.FROMID_KEY);\r\n        if (TimelineEntityType.YARN_APPLICATION.matches(entityType)) {\r\n            timelineReaderContext = TimelineFromIdConverter.APPLICATION_FROMID.decodeUID(uid);\r\n        } else {\r\n            timelineReaderContext = TimelineFromIdConverter.GENERIC_ENTITY_FROMID.decodeUID(uid);\r\n        }\r\n        checkAccess(getTimelineReaderManager(), callerUGI, timelineReaderContext.getUserId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "validateAuthUserWithEntityUser",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean validateAuthUserWithEntityUser(TimelineReaderManager readerManager, UserGroupInformation ugi, String entityUser)\n{\r\n    String authUser = TimelineReaderWebServicesUtils.getUserName(ugi);\r\n    String requestedUser = TimelineReaderWebServicesUtils.parseStr(entityUser);\r\n    LOG.debug(\"Authenticated User: {} Requested User:{}\", authUser, entityUser);\r\n    return (readerManager.checkAccess(ugi) || authUser.equals(requestedUser));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkAccess",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean checkAccess(TimelineReaderManager readerManager, UserGroupInformation ugi, String entityUser)\n{\r\n    if (isDisplayEntityPerUserFilterEnabled(readerManager.getConfig())) {\r\n        if (!validateAuthUserWithEntityUser(readerManager, ugi, entityUser)) {\r\n            String userName = ugi == null ? null : ugi.getShortUserName();\r\n            String msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n            throw new ForbiddenException(msg);\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkAccess",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void checkAccess(TimelineReaderManager readerManager, UserGroupInformation callerUGI, Set<TimelineEntity> entities, String entityUserKey, boolean verifyForAllEntity)\n{\r\n    if (entities.size() > 0 && isDisplayEntityPerUserFilterEnabled(readerManager.getConfig())) {\r\n        Set<TimelineEntity> userEntities = new LinkedHashSet<>();\r\n        userEntities.addAll(entities);\r\n        for (TimelineEntity entity : userEntities) {\r\n            if (entity.getInfo() != null) {\r\n                String userId = (String) entity.getInfo().get(entityUserKey);\r\n                if (!validateAuthUserWithEntityUser(readerManager, callerUGI, userId)) {\r\n                    entities.remove(entity);\r\n                    if (!verifyForAllEntity) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilter createFilter()\n{\r\n    return new TimelineKeyValuesFilter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setCompareOpToCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setCompareOpToCurrentFilter(TimelineCompareOp compareOp)\n{\r\n    ((TimelineKeyValuesFilter) getCurrentFilter()).setCompareOp(compareOp);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setValueToCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setValueToCurrentFilter(String value) throws TimelineParseException\n{\r\n    if (value != null) {\r\n        String[] pairStrs = value.split(valueDelimiter);\r\n        if (pairStrs.length < 2) {\r\n            throw new TimelineParseException(\"Invalid relation filter expression\");\r\n        }\r\n        String key = pairStrs[0].trim();\r\n        Set<Object> values = new HashSet<Object>();\r\n        for (int i = 1; i < pairStrs.length; i++) {\r\n            values.add(pairStrs[i].trim());\r\n        }\r\n        ((TimelineKeyValuesFilter) getCurrentFilter()).setKeyAndValues(key, values);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "getTableName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTableName()\n{\r\n    return tableName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "getPrimaryKeyList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] getPrimaryKeyList()\n{\r\n    return primaryKeyList.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "setStringsForPrimaryKey",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int setStringsForPrimaryKey(PreparedStatement ps, TimelineCollectorContext context, String[] extraInfo, int startPos) throws SQLException\n{\r\n    return primaryKeyStringSetter.setValues(ps, context, extraInfo, startPos);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\security",
  "methodName" : "initFilter",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void initFilter(FilterContainer container, Configuration conf)\n{\r\n    Map<String, String> params = new HashMap<String, String>();\r\n    String isWhitelistReadAuthEnabled = Boolean.toString(conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_READ_AUTH_ENABLED, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_READ_AUTH_ENABLED));\r\n    params.put(YarnConfiguration.TIMELINE_SERVICE_READ_AUTH_ENABLED, isWhitelistReadAuthEnabled);\r\n    params.put(YarnConfiguration.TIMELINE_SERVICE_READ_ALLOWED_USERS, conf.get(YarnConfiguration.TIMELINE_SERVICE_READ_ALLOWED_USERS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_READ_ALLOWED_USERS));\r\n    params.put(YarnConfiguration.YARN_ADMIN_ACL, conf.get(YarnConfiguration.YARN_ADMIN_ACL, TimelineReaderWhitelistAuthorizationFilter.EMPTY_STRING));\r\n    container.addGlobalFilter(\"Timeline Reader Whitelist Authorization Filter\", TimelineReaderWhitelistAuthorizationFilter.class.getName(), params);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "serviceInit",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    if (!YarnConfiguration.timelineServiceV2Enabled(conf)) {\r\n        throw new YarnException(\"timeline service v.2 is not enabled\");\r\n    }\r\n    webAppURLWithoutScheme = WebAppUtils.getTimelineReaderWebAppURLWithoutScheme(conf);\r\n    InetSocketAddress bindAddr = NetUtils.createSocketAddr(webAppURLWithoutScheme);\r\n    try {\r\n        SecurityUtil.login(conf, YarnConfiguration.TIMELINE_SERVICE_KEYTAB, YarnConfiguration.TIMELINE_SERVICE_PRINCIPAL, bindAddr.getHostName());\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(\"Failed to login from keytab\", e);\r\n    }\r\n    TimelineReader timelineReaderStore = createTimelineReaderStore(conf);\r\n    timelineReaderStore.init(conf);\r\n    addService(timelineReaderStore);\r\n    timelineReaderManager = createTimelineReaderManager(timelineReaderStore);\r\n    addService(timelineReaderManager);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createTimelineReaderStore",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "TimelineReader createTimelineReaderStore(final Configuration conf)\n{\r\n    String timelineReaderClassName = conf.get(YarnConfiguration.TIMELINE_SERVICE_READER_CLASS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_READER_CLASS);\r\n    LOG.info(\"Using store: \" + timelineReaderClassName);\r\n    try {\r\n        Class<?> timelineReaderClazz = Class.forName(timelineReaderClassName);\r\n        if (TimelineReader.class.isAssignableFrom(timelineReaderClazz)) {\r\n            return (TimelineReader) ReflectionUtils.newInstance(timelineReaderClazz, conf);\r\n        } else {\r\n            throw new YarnRuntimeException(\"Class: \" + timelineReaderClassName + \" not instance of \" + TimelineReader.class.getCanonicalName());\r\n        }\r\n    } catch (ClassNotFoundException e) {\r\n        throw new YarnRuntimeException(\"Could not instantiate TimelineReader: \" + timelineReaderClassName, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createTimelineReaderManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineReaderManager createTimelineReaderManager(TimelineReader timelineReaderStore)\n{\r\n    return new TimelineReaderManager(timelineReaderStore);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n    startTimelineReaderWebApp();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "join",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void join()\n{\r\n    if (readerWebServer != null) {\r\n        try {\r\n            readerWebServer.join();\r\n        } catch (InterruptedException ignore) {\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (readerWebServer != null) {\r\n        readerWebServer.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "addFilters",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void addFilters(Configuration conf)\n{\r\n    boolean enableCorsFilter = conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration.TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT);\r\n    if (enableCorsFilter) {\r\n        conf.setBoolean(HttpCrossOriginFilterInitializer.PREFIX + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\r\n    }\r\n    String initializers = conf.get(\"hadoop.http.filter.initializers\", \"\");\r\n    Set<String> defaultInitializers = new LinkedHashSet<String>();\r\n    if (!initializers.contains(ProxyUserAuthenticationFilterInitializer.class.getName())) {\r\n        if (!initializers.contains(TimelineReaderAuthenticationFilterInitializer.class.getName())) {\r\n            defaultInitializers.add(TimelineReaderAuthenticationFilterInitializer.class.getName());\r\n        }\r\n    } else {\r\n        defaultInitializers.add(ProxyUserAuthenticationFilterInitializer.class.getName());\r\n    }\r\n    defaultInitializers.add(TimelineReaderWhitelistAuthorizationFilterInitializer.class.getName());\r\n    TimelineServerUtils.setTimelineFilters(conf, initializers, defaultInitializers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "startTimelineReaderWebApp",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void startTimelineReaderWebApp()\n{\r\n    Configuration conf = getConfig();\r\n    addFilters(conf);\r\n    String hostProperty = YarnConfiguration.TIMELINE_SERVICE_READER_BIND_HOST;\r\n    String host = conf.getTrimmed(hostProperty);\r\n    if (host == null || host.isEmpty()) {\r\n        hostProperty = YarnConfiguration.TIMELINE_SERVICE_BIND_HOST;\r\n    }\r\n    String bindAddress = WebAppUtils.getWebAppBindURL(conf, hostProperty, webAppURLWithoutScheme);\r\n    LOG.info(\"Instantiating TimelineReaderWebApp at \" + bindAddress);\r\n    try {\r\n        String httpScheme = WebAppUtils.getHttpSchemePrefix(conf);\r\n        HttpServer2.Builder builder = new HttpServer2.Builder().setName(\"timeline\").setConf(conf).addEndpoint(URI.create(httpScheme + bindAddress));\r\n        if (httpScheme.equals(WebAppUtils.HTTPS_PREFIX)) {\r\n            WebAppUtils.loadSslConfiguration(builder, conf);\r\n        }\r\n        readerWebServer = builder.build();\r\n        readerWebServer.addJerseyResourcePackage(TimelineReaderWebServices.class.getPackage().getName() + \";\" + GenericExceptionHandler.class.getPackage().getName() + \";\" + YarnJacksonJaxbJsonProvider.class.getPackage().getName() + \";\" + LogWebService.class.getPackage().getName(), \"/*\");\r\n        readerWebServer.setAttribute(TIMELINE_READER_MANAGER_ATTR, timelineReaderManager);\r\n        readerWebServer.start();\r\n    } catch (Exception e) {\r\n        String msg = \"TimelineReaderWebApp failed to start.\";\r\n        LOG.error(msg, e);\r\n        throw new YarnRuntimeException(msg, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getWebServerPort",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getWebServerPort()\n{\r\n    return readerWebServer.getConnectorAddress(0).getPort();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "startTimelineReaderServer",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "TimelineReaderServer startTimelineReaderServer(String[] args, Configuration conf)\n{\r\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\r\n    StringUtils.startupShutdownMessage(TimelineReaderServer.class, args, LOG);\r\n    TimelineReaderServer timelineReaderServer = null;\r\n    try {\r\n        timelineReaderServer = new TimelineReaderServer();\r\n        ShutdownHookManager.get().addShutdownHook(new CompositeServiceShutdownHook(timelineReaderServer), SHUTDOWN_HOOK_PRIORITY);\r\n        timelineReaderServer.init(conf);\r\n        timelineReaderServer.start();\r\n    } catch (Throwable t) {\r\n        LOG.error(\"Error starting TimelineReaderWebServer\", t);\r\n        ExitUtil.terminate(-1, \"Error starting TimelineReaderWebServer\");\r\n    }\r\n    return timelineReaderServer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSIONS, 2.0f);\r\n    TimelineReaderServer server = startTimelineReaderServer(args, conf);\r\n    server.join();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    writer = createTimelineWriter(conf);\r\n    writer.init(conf);\r\n    writerFlusher = Executors.newSingleThreadScheduledExecutor();\r\n    flushInterval = conf.getInt(YarnConfiguration.TIMELINE_SERVICE_WRITER_FLUSH_INTERVAL_SECONDS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WRITER_FLUSH_INTERVAL_SECONDS);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "createTimelineWriter",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "TimelineWriter createTimelineWriter(final Configuration conf)\n{\r\n    String timelineWriterClassName = conf.get(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WRITER_CLASS);\r\n    LOG.info(\"Using TimelineWriter: \" + timelineWriterClassName);\r\n    try {\r\n        Class<?> timelineWriterClazz = Class.forName(timelineWriterClassName);\r\n        if (TimelineWriter.class.isAssignableFrom(timelineWriterClazz)) {\r\n            return (TimelineWriter) ReflectionUtils.newInstance(timelineWriterClazz, conf);\r\n        } else {\r\n            throw new YarnRuntimeException(\"Class: \" + timelineWriterClassName + \" not instance of \" + TimelineWriter.class.getCanonicalName());\r\n        }\r\n    } catch (ClassNotFoundException e) {\r\n        throw new YarnRuntimeException(\"Could not instantiate TimelineWriter: \" + timelineWriterClassName, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n    if (writer != null) {\r\n        writer.start();\r\n    }\r\n    writerFlusher.scheduleAtFixedRate(new WriterFlushTask(writer), flushInterval, flushInterval, TimeUnit.SECONDS);\r\n    writerFlusherRunning = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getWriter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineWriter getWriter()\n{\r\n    return writer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "putIfAbsent",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "TimelineCollector putIfAbsent(ApplicationId appId, TimelineCollector collector)\n{\r\n    TimelineCollector collectorInTable = null;\r\n    synchronized (collectors) {\r\n        collectorInTable = collectors.get(appId);\r\n        if (collectorInTable == null) {\r\n            try {\r\n                collector.init(getConfig());\r\n                collector.setWriter(writer);\r\n                collector.start();\r\n                collectors.put(appId, collector);\r\n                LOG.info(\"the collector for \" + appId + \" was added\");\r\n                collectorInTable = collector;\r\n                postPut(appId, collectorInTable);\r\n            } catch (Exception e) {\r\n                throw new YarnRuntimeException(e);\r\n            }\r\n        } else {\r\n            LOG.info(\"the collector for \" + appId + \" already exists!\");\r\n        }\r\n    }\r\n    return collectorInTable;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "postPut",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void postPut(ApplicationId appId, TimelineCollector collector)\n{\r\n    doPostPut(appId, collector);\r\n    collector.setReadyToAggregate();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "doPostPut",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void doPostPut(ApplicationId appId, TimelineCollector collector)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "remove",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean remove(ApplicationId appId)\n{\r\n    TimelineCollector collector = collectors.remove(appId);\r\n    if (collector == null) {\r\n        LOG.error(\"the collector for \" + appId + \" does not exist!\");\r\n    } else {\r\n        synchronized (collector) {\r\n            postRemove(appId, collector);\r\n            collector.stop();\r\n        }\r\n        LOG.info(\"The collector service for \" + appId + \" was removed\");\r\n    }\r\n    return collector != null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "postRemove",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void postRemove(ApplicationId appId, TimelineCollector collector)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineCollector get(ApplicationId appId)\n{\r\n    return collectors.get(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "containsTimelineCollector",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean containsTimelineCollector(ApplicationId appId)\n{\r\n    return collectors.containsKey(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (collectors != null && collectors.size() > 0) {\r\n        synchronized (collectors) {\r\n            for (TimelineCollector c : collectors.values()) {\r\n                c.serviceStop();\r\n            }\r\n        }\r\n    }\r\n    if (writerFlusher != null) {\r\n        writerFlusher.shutdown();\r\n        writerFlusherRunning = false;\r\n        if (!writerFlusher.awaitTermination(30, TimeUnit.SECONDS)) {\r\n            LOG.warn(\"failed to stop the flusher task in time. \" + \"will still proceed to close the writer.\");\r\n        }\r\n    }\r\n    if (writer != null) {\r\n        writer.close();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "writerFlusherRunning",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean writerFlusherRunning()\n{\r\n    return writerFlusherRunning;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "createTimelineDelegationTokenSecretManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractDelegationTokenSecretManager<TimelineDelegationTokenIdentifier> createTimelineDelegationTokenSecretManager(long secretKeyInterval, long tokenMaxLifetime, long tokenRenewInterval, long tokenRemovalScanInterval)\n{\r\n    return new TimelineV2DelegationTokenSecretManager(secretKeyInterval, tokenMaxLifetime, tokenRenewInterval, tokenRemovalScanInterval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "generateToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Token<TimelineDelegationTokenIdentifier> generateToken(UserGroupInformation ugi, String renewer)\n{\r\n    return ((TimelineV2DelegationTokenSecretManager) getTimelineDelegationTokenSecretManager()).generateToken(ugi, renewer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "renewToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long renewToken(Token<TimelineDelegationTokenIdentifier> token, String renewer) throws IOException\n{\r\n    return getTimelineDelegationTokenSecretManager().renewToken(token, renewer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\security",
  "methodName" : "cancelToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cancelToken(Token<TimelineDelegationTokenIdentifier> token, String canceller) throws IOException\n{\r\n    getTimelineDelegationTokenSecretManager().cancelToken(token, canceller);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getLimit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLimit()\n{\r\n    return limit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getCreatedTimeBegin",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCreatedTimeBegin()\n{\r\n    return createdTimeBegin;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getCreatedTimeEnd",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCreatedTimeEnd()\n{\r\n    return createdTimeEnd;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getRelatesTo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterList getRelatesTo()\n{\r\n    return relatesTo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getIsRelatedTo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterList getIsRelatedTo()\n{\r\n    return isRelatedTo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getInfoFilters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterList getInfoFilters()\n{\r\n    return infoFilters;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getConfigFilters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterList getConfigFilters()\n{\r\n    return configFilters;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getMetricFilters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterList getMetricFilters()\n{\r\n    return metricFilters;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEventFilters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterList getEventFilters()\n{\r\n    return eventFilters;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFromId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFromId()\n{\r\n    return fromId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilter getCurrentFilter()\n{\r\n    return currentFilter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFilterList",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilter getFilterList()\n{\r\n    return filterList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilter createFilter()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setCompareOpToCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCompareOpToCurrentFilter(TimelineCompareOp compareOp) throws TimelineParseException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setValueToCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setValueToCurrentFilter(String value) throws TimelineParseException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createAndSetFilter",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createAndSetFilter(boolean checkIfNull) throws TimelineParseException\n{\r\n    if (!checkIfNull || currentFilter == null) {\r\n        currentFilter = createFilter();\r\n        setCompareOpToCurrentFilter(currentCompareOp);\r\n    }\r\n    setValueToCurrentFilter(expr.substring(startOffset, offset).trim());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "handleSpaceChar",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void handleSpaceChar() throws TimelineParseException\n{\r\n    if (currentParseState == ParseState.PARSING_VALUE) {\r\n        if (startOffset == offset) {\r\n            startOffset++;\r\n        } else {\r\n            createAndSetFilter(true);\r\n            currentParseState = ParseState.PARSING_OP;\r\n        }\r\n    }\r\n    offset++;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "handleDelimiter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void handleDelimiter() throws TimelineParseException\n{\r\n    if (currentParseState == ParseState.PARSING_OP || currentParseState == ParseState.PARSING_VALUE) {\r\n        if (currentParseState == ParseState.PARSING_VALUE) {\r\n            createAndSetFilter(false);\r\n        }\r\n        if (filterList == null) {\r\n            filterList = new TimelineFilterList();\r\n        }\r\n        filterList.addFilter(currentFilter);\r\n        currentFilter = null;\r\n        offset++;\r\n        startOffset = offset;\r\n        currentParseState = ParseState.PARSING_VALUE;\r\n    } else {\r\n        throw new TimelineParseException(\"Invalid \" + exprName + \"expression.\");\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "handleOpeningBracketChar",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void handleOpeningBracketChar(boolean encounteredNot) throws TimelineParseException\n{\r\n    if (currentParseState == ParseState.PARSING_COMPAREOP || currentParseState == ParseState.PARSING_VALUE) {\r\n        offset++;\r\n        startOffset = offset;\r\n        filterListStack.push(filterList);\r\n        filterList = null;\r\n        if (currentFilter == null) {\r\n            currentFilter = createFilter();\r\n        }\r\n        currentCompareOp = encounteredNot ? TimelineCompareOp.NOT_EQUAL : TimelineCompareOp.EQUAL;\r\n        setCompareOpToCurrentFilter(currentCompareOp);\r\n        currentParseState = ParseState.PARSING_VALUE;\r\n    } else {\r\n        throw new TimelineParseException(\"Encountered unexpected opening \" + \"bracket while parsing \" + exprName + \".\");\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "handleNotChar",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void handleNotChar() throws TimelineParseException\n{\r\n    if (currentParseState == ParseState.PARSING_COMPAREOP || currentParseState == ParseState.PARSING_VALUE) {\r\n        offset++;\r\n        while (offset < exprLength && expr.charAt(offset) == TimelineParseConstants.SPACE_CHAR) {\r\n            offset++;\r\n        }\r\n        if (offset == exprLength) {\r\n            throw new TimelineParseException(\"Invalid \" + exprName + \"expression\");\r\n        }\r\n        if (expr.charAt(offset) == TimelineParseConstants.OPENING_BRACKET_CHAR) {\r\n            handleOpeningBracketChar(true);\r\n        } else {\r\n            throw new TimelineParseException(\"Invalid \" + exprName + \"expression\");\r\n        }\r\n    } else {\r\n        throw new TimelineParseException(\"Encountered unexpected not(!) char \" + \"while parsing \" + exprName + \".\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "handleClosingBracketChar",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void handleClosingBracketChar() throws TimelineParseException\n{\r\n    if (currentParseState != ParseState.PARSING_VALUE && currentParseState != ParseState.PARSING_OP) {\r\n        throw new TimelineParseException(\"Encountered unexpected closing \" + \"bracket while parsing \" + exprName + \".\");\r\n    }\r\n    if (!filterListStack.isEmpty()) {\r\n        if (currentParseState == ParseState.PARSING_VALUE) {\r\n            if (startOffset != offset) {\r\n                createAndSetFilter(true);\r\n                currentParseState = ParseState.PARSING_OP;\r\n            }\r\n        }\r\n        if (filterList == null) {\r\n            filterList = new TimelineFilterList();\r\n        }\r\n        if (currentFilter != null) {\r\n            filterList.addFilter(currentFilter);\r\n        }\r\n        TimelineFilterList fList = filterListStack.pop();\r\n        if (fList != null) {\r\n            fList.addFilter(filterList);\r\n            filterList = fList;\r\n        }\r\n        currentFilter = null;\r\n        offset++;\r\n        startOffset = offset;\r\n    } else {\r\n        throw new TimelineParseException(\"Encountered unexpected closing \" + \"bracket while parsing \" + exprName + \".\");\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseOp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void parseOp(boolean closingBracket) throws TimelineParseException\n{\r\n    Operator operator = null;\r\n    if (exprInLowerCase.startsWith(\"or \", offset)) {\r\n        operator = Operator.OR;\r\n        offset = offset + 3;\r\n    } else if (exprInLowerCase.startsWith(\"and \", offset)) {\r\n        operator = Operator.AND;\r\n        offset = offset + 4;\r\n    }\r\n    if (operator == null) {\r\n        throw new TimelineParseException(\"Operator cannot be parsed for \" + exprName + \".\");\r\n    }\r\n    if (filterList == null) {\r\n        filterList = new TimelineFilterList(operator);\r\n    }\r\n    if (currentFilter != null) {\r\n        filterList.addFilter(currentFilter);\r\n    }\r\n    if (closingBracket || filterList.getOperator() != operator) {\r\n        filterList = new TimelineFilterList(operator, filterList);\r\n    }\r\n    currentFilter = null;\r\n    startOffset = offset;\r\n    currentParseState = ParseState.PARSING_COMPAREOP;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseCompareOp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void parseCompareOp() throws TimelineParseException\n{\r\n    if (currentFilter == null) {\r\n        currentFilter = createFilter();\r\n    }\r\n    currentCompareOp = TimelineCompareOp.EQUAL;\r\n    setCompareOpToCurrentFilter(currentCompareOp);\r\n    currentParseState = ParseState.PARSING_VALUE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parse",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "TimelineFilterList parse() throws TimelineParseException\n{\r\n    if (expr == null || exprLength == 0) {\r\n        return null;\r\n    }\r\n    boolean closingBracket = false;\r\n    while (offset < exprLength) {\r\n        char offsetChar = expr.charAt(offset);\r\n        switch(offsetChar) {\r\n            case TimelineParseConstants.NOT_CHAR:\r\n                handleNotChar();\r\n                break;\r\n            case TimelineParseConstants.SPACE_CHAR:\r\n                handleSpaceChar();\r\n                break;\r\n            case TimelineParseConstants.OPENING_BRACKET_CHAR:\r\n                handleOpeningBracketChar(false);\r\n                break;\r\n            case TimelineParseConstants.CLOSING_BRACKET_CHAR:\r\n                handleClosingBracketChar();\r\n                closingBracket = true;\r\n                break;\r\n            default:\r\n                if (offsetChar == delimiter) {\r\n                    handleDelimiter();\r\n                } else if (currentParseState == ParseState.PARSING_COMPAREOP) {\r\n                    parseCompareOp();\r\n                } else if (currentParseState == ParseState.PARSING_OP) {\r\n                    parseOp(closingBracket);\r\n                    closingBracket = false;\r\n                } else {\r\n                    offset++;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    if (!filterListStack.isEmpty()) {\r\n        filterListStack.clear();\r\n        throw new TimelineParseException(\"Encountered improper brackets while \" + \"parsing \" + exprName + \".\");\r\n    }\r\n    if (currentParseState == ParseState.PARSING_VALUE) {\r\n        if (startOffset != offset) {\r\n            createAndSetFilter(true);\r\n        }\r\n    }\r\n    if (filterList == null || filterList.getFilterList().isEmpty()) {\r\n        if (currentFilter == null) {\r\n            throw new TimelineParseException(\"Invalid expression provided for \" + exprName);\r\n        } else {\r\n            filterList = new TimelineFilterList(currentFilter);\r\n        }\r\n    } else if (currentFilter != null) {\r\n        filterList.addFilter(currentFilter);\r\n    }\r\n    return filterList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (filterListStack != null) {\r\n        filterListStack.clear();\r\n    }\r\n    currentFilter = null;\r\n    filterList = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineReaderMetrics getInstance()\n{\r\n    if (!isInitialized.get()) {\r\n        synchronized (TimelineReaderMetrics.class) {\r\n            if (instance == null) {\r\n                instance = DefaultMetricsSystem.initialize(\"TimelineService\").register(METRICS_INFO.name(), METRICS_INFO.description(), new TimelineReaderMetrics());\r\n                isInitialized.set(true);\r\n            }\r\n        }\r\n    }\r\n    return instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "destroy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void destroy()\n{\r\n    isInitialized.set(false);\r\n    instance = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "getGetEntitiesSuccessLatency",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableQuantiles getGetEntitiesSuccessLatency()\n{\r\n    return getEntitiesSuccessLatency;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "getGetEntitiesFailureLatency",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableQuantiles getGetEntitiesFailureLatency()\n{\r\n    return getEntitiesFailureLatency;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "getGetEntityTypesSuccessLatency",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableQuantiles getGetEntityTypesSuccessLatency()\n{\r\n    return getEntityTypesSuccessLatency;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "getGetEntityTypesFailureLatency",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableQuantiles getGetEntityTypesFailureLatency()\n{\r\n    return getEntityTypesFailureLatency;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "addGetEntitiesLatency",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addGetEntitiesLatency(long durationMs, boolean succeeded)\n{\r\n    if (succeeded) {\r\n        getEntitiesSuccessLatency.add(durationMs);\r\n    } else {\r\n        getEntitiesFailureLatency.add(durationMs);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "addGetEntityTypesLatency",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addGetEntityTypesLatency(long durationMs, boolean succeeded)\n{\r\n    if (succeeded) {\r\n        getEntityTypesSuccessLatency.add(durationMs);\r\n    } else {\r\n        getEntityTypesFailureLatency.add(durationMs);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilter createFilter()\n{\r\n    return new TimelineCompareFilter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setCompareOpToCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setCompareOpToCurrentFilter(TimelineCompareOp compareOp, boolean keyMustExistFlag)\n{\r\n    ((TimelineCompareFilter) getCurrentFilter()).setCompareOp(compareOp, keyMustExistFlag);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseValue",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Object parseValue(String strValue) throws TimelineParseException\n{\r\n    Object value = null;\r\n    try {\r\n        value = GenericObjectMapper.OBJECT_READER.readValue(strValue);\r\n    } catch (IOException e) {\r\n        throw new TimelineParseException(\"Value cannot be parsed.\");\r\n    }\r\n    if (value == null || !(TimelineStorageUtils.isIntegralValue(value))) {\r\n        throw new TimelineParseException(\"Value is not a number.\");\r\n    }\r\n    return value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setValueToCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setValueToCurrentFilter(Object value)\n{\r\n    TimelineFilter currentFilter = getCurrentFilter();\r\n    if (currentFilter != null) {\r\n        ((TimelineCompareFilter) currentFilter).setValue(value);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "about",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AboutInfo about(@Context HttpServletRequest req, @Context HttpServletResponse res)\n{\r\n    init(res);\r\n    return new AboutInfo(\"Timeline Collector API\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "putEntities",
  "errType" : [ "NotFoundException|ForbiddenException", "IOException", "Exception" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "Response putEntities(@Context HttpServletRequest req, @Context HttpServletResponse res, @QueryParam(\"async\") String async, @QueryParam(\"subappwrite\") String isSubAppEntities, @QueryParam(\"appid\") String appId, TimelineEntities entities)\n{\r\n    init(res);\r\n    UserGroupInformation callerUgi = getUser(req);\r\n    boolean isAsync = async != null && async.trim().equalsIgnoreCase(\"true\");\r\n    if (callerUgi == null) {\r\n        String msg = \"The owner of the posted timeline entities is not set\";\r\n        LOG.error(msg);\r\n        throw new ForbiddenException(msg);\r\n    }\r\n    long startTime = Time.monotonicNow();\r\n    boolean succeeded = false;\r\n    try {\r\n        ApplicationId appID = parseApplicationId(appId);\r\n        if (appID == null) {\r\n            return Response.status(Response.Status.BAD_REQUEST).build();\r\n        }\r\n        NodeTimelineCollectorManager collectorManager = (NodeTimelineCollectorManager) context.getAttribute(NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\r\n        TimelineCollector collector = collectorManager.get(appID);\r\n        if (collector == null) {\r\n            LOG.error(\"Application: \" + appId + \" is not found\");\r\n            throw new NotFoundException(\"Application: \" + appId + \" is not found\");\r\n        }\r\n        if (isAsync) {\r\n            collector.putEntitiesAsync(processTimelineEntities(entities, appId, Boolean.valueOf(isSubAppEntities)), callerUgi);\r\n        } else {\r\n            collector.putEntities(processTimelineEntities(entities, appId, Boolean.valueOf(isSubAppEntities)), callerUgi);\r\n        }\r\n        succeeded = true;\r\n        return Response.ok().build();\r\n    } catch (NotFoundException | ForbiddenException e) {\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error putting entities\", e);\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Unexpected error while putting entities\", e);\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    } finally {\r\n        long latency = Time.monotonicNow() - startTime;\r\n        if (isAsync) {\r\n            METRICS.addAsyncPutEntitiesLatency(latency, succeeded);\r\n        } else {\r\n            METRICS.addPutEntitiesLatency(latency, succeeded);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "putDomain",
  "errType" : [ "NotFoundException", "IOException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "Response putDomain(@Context HttpServletRequest req, @Context HttpServletResponse res, @QueryParam(\"appid\") String appId, TimelineDomain domain)\n{\r\n    init(res);\r\n    UserGroupInformation callerUgi = getUser(req);\r\n    if (callerUgi == null) {\r\n        String msg = \"The owner of the posted timeline entities is not set\";\r\n        LOG.error(msg);\r\n        throw new ForbiddenException(msg);\r\n    }\r\n    try {\r\n        ApplicationId appID = parseApplicationId(appId);\r\n        if (appID == null) {\r\n            return Response.status(Response.Status.BAD_REQUEST).build();\r\n        }\r\n        NodeTimelineCollectorManager collectorManager = (NodeTimelineCollectorManager) context.getAttribute(NodeTimelineCollectorManager.COLLECTOR_MANAGER_ATTR_KEY);\r\n        TimelineCollector collector = collectorManager.get(appID);\r\n        if (collector == null) {\r\n            LOG.error(\"Application: \" + appId + \" is not found\");\r\n            throw new NotFoundException(\"Application: \" + appId + \" is not found\");\r\n        }\r\n        domain.setOwner(callerUgi.getShortUserName());\r\n        collector.putDomain(domain, callerUgi);\r\n        return Response.ok().build();\r\n    } catch (NotFoundException e) {\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Error putting entities\", e);\r\n        throw new WebApplicationException(e, Response.Status.INTERNAL_SERVER_ERROR);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "parseApplicationId",
  "errType" : [ "IllegalFormatException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId parseApplicationId(String appId)\n{\r\n    try {\r\n        if (appId != null) {\r\n            return ApplicationId.fromString(appId.trim());\r\n        } else {\r\n            return null;\r\n        }\r\n    } catch (IllegalFormatException e) {\r\n        LOG.error(\"Invalid application ID: \" + appId);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init(HttpServletResponse response)\n{\r\n    response.setContentType(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UserGroupInformation getUser(HttpServletRequest req)\n{\r\n    String remoteUser = req.getRemoteUser();\r\n    UserGroupInformation callerUgi = null;\r\n    if (remoteUser != null) {\r\n        callerUgi = UserGroupInformation.createRemoteUser(remoteUser);\r\n    }\r\n    return callerUgi;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "processTimelineEntities",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "TimelineEntities processTimelineEntities(TimelineEntities entities, String appId, boolean isSubAppWrite)\n{\r\n    TimelineEntities entitiesToReturn = new TimelineEntities();\r\n    for (TimelineEntity entity : entities.getEntities()) {\r\n        TimelineEntityType type = null;\r\n        try {\r\n            type = TimelineEntityType.valueOf(entity.getType());\r\n        } catch (IllegalArgumentException e) {\r\n            type = null;\r\n        }\r\n        if (type != null) {\r\n            switch(type) {\r\n                case YARN_CLUSTER:\r\n                    entitiesToReturn.addEntity(new ClusterEntity(entity));\r\n                    break;\r\n                case YARN_FLOW_RUN:\r\n                    entitiesToReturn.addEntity(new FlowRunEntity(entity));\r\n                    break;\r\n                case YARN_APPLICATION:\r\n                    entitiesToReturn.addEntity(new ApplicationEntity(entity));\r\n                    break;\r\n                case YARN_APPLICATION_ATTEMPT:\r\n                    entitiesToReturn.addEntity(new ApplicationAttemptEntity(entity));\r\n                    break;\r\n                case YARN_CONTAINER:\r\n                    entitiesToReturn.addEntity(new ContainerEntity(entity));\r\n                    break;\r\n                case YARN_QUEUE:\r\n                    entitiesToReturn.addEntity(new QueueEntity(entity));\r\n                    break;\r\n                case YARN_USER:\r\n                    entitiesToReturn.addEntity(new UserEntity(entity));\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        } else {\r\n            if (isSubAppWrite) {\r\n                SubApplicationEntity se = new SubApplicationEntity(entity);\r\n                se.setApplicationId(appId);\r\n                entitiesToReturn.addEntity(se);\r\n            } else {\r\n                entitiesToReturn.addEntity(entity);\r\n            }\r\n        }\r\n    }\r\n    return entitiesToReturn;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getFilterType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterType getFilterType()\n{\r\n    return TimelineFilterType.KEY_VALUE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "setCompareOp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setCompareOp(TimelineCompareOp timelineCompareOp, boolean keyExistFlag)\n{\r\n    if (timelineCompareOp != TimelineCompareOp.EQUAL && timelineCompareOp != TimelineCompareOp.NOT_EQUAL) {\r\n        throw new IllegalArgumentException(\"TimelineCompareOp for equality\" + \" filter should be EQUAL or NOT_EQUAL\");\r\n    }\r\n    super.setCompareOp(timelineCompareOp, keyExistFlag);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "start",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void start()\n{\r\n    LOG.info(\"Scheduling {} storage monitor at interval {}\", this.storage, monitorInterval);\r\n    monitorExecutorService = Executors.newScheduledThreadPool(1);\r\n    monitorExecutorService.scheduleAtFixedRate(new MonitorThread(), 0, monitorInterval, TimeUnit.MILLISECONDS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void stop() throws Exception\n{\r\n    if (monitorExecutorService != null) {\r\n        monitorExecutorService.shutdownNow();\r\n        if (!monitorExecutorService.awaitTermination(30, TimeUnit.SECONDS)) {\r\n            LOG.warn(\"Failed to stop the monitor task in time. \" + \"will still proceed to close the monitor.\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "healthCheck",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void healthCheck() throws Exception",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "checkStorageIsUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void checkStorageIsUp() throws IOException\n{\r\n    if (storageDown.get()) {\r\n        throw new IOException(storage + \" is down\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getFilterType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterType getFilterType()\n{\r\n    return TimelineFilterType.COMPARE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getCompareOp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineCompareOp getCompareOp()\n{\r\n    return compareOp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getKey()\n{\r\n    return key;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "setKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setKey(String keyToBeSet)\n{\r\n    key = keyToBeSet;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Object getValue()\n{\r\n    return value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "setCompareOp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCompareOp(TimelineCompareOp timelineCompareOp, boolean keyExistFlag)\n{\r\n    this.compareOp = timelineCompareOp;\r\n    if (timelineCompareOp == TimelineCompareOp.NOT_EQUAL) {\r\n        this.keyMustExist = keyExistFlag;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "setValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setValue(Object val)\n{\r\n    value = val;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getKeyMustExist",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getKeyMustExist()\n{\r\n    return keyMustExist;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((compareOp == null) ? 0 : compareOp.hashCode());\r\n    result = prime * result + ((key == null) ? 0 : key.hashCode());\r\n    result = prime * result + (keyMustExist ? 1231 : 1237);\r\n    result = prime * result + ((value == null) ? 0 : value.hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    TimelineCompareFilter other = (TimelineCompareFilter) obj;\r\n    if (compareOp != other.compareOp) {\r\n        return false;\r\n    }\r\n    if (key == null) {\r\n        if (other.key != null) {\r\n            return false;\r\n        }\r\n    } else if (!key.equals(other.key)) {\r\n        return false;\r\n    }\r\n    if (keyMustExist != other.keyMustExist) {\r\n        return false;\r\n    }\r\n    if (value == null) {\r\n        if (other.value != null) {\r\n            return false;\r\n        }\r\n    } else if (!value.equals(other.value)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return String.format(\"%s (%s, %s:%s:%b)\", this.getClass().getSimpleName(), this.compareOp.name(), this.key, this.value, this.keyMustExist);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\security",
  "methodName" : "initFilter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initFilter(FilterContainer container, Configuration conf)\n{\r\n    setAuthFilterConfig(conf);\r\n    container.addGlobalFilter(\"Timeline Reader Authentication Filter\", AuthenticationFilter.class.getName(), getFilterConfig());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getFilterType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterType getFilterType()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return this.getClass().getSimpleName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\security",
  "methodName" : "destroy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void destroy()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\security",
  "methodName" : "doFilter",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException\n{\r\n    HttpServletRequest httpRequest = (HttpServletRequest) request;\r\n    HttpServletResponse httpResponse = (HttpServletResponse) response;\r\n    if (isWhitelistReadAuthEnabled) {\r\n        UserGroupInformation callerUGI = TimelineReaderWebServicesUtils.getUser(httpRequest);\r\n        if (callerUGI == null) {\r\n            String msg = \"Unable to obtain user name, user not authenticated\";\r\n            throw new AuthorizationException(msg);\r\n        }\r\n        if (!(adminAclList.isUserAllowed(callerUGI) || allowedUsersAclList.isUserAllowed(callerUGI))) {\r\n            String userName = callerUGI.getShortUserName();\r\n            String msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n            httpResponse.sendError(HttpServletResponse.SC_FORBIDDEN, msg);\r\n            return;\r\n        }\r\n    }\r\n    if (chain != null) {\r\n        chain.doFilter(request, response);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\security",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void init(FilterConfig conf) throws ServletException\n{\r\n    String isWhitelistReadAuthEnabledStr = conf.getInitParameter(YarnConfiguration.TIMELINE_SERVICE_READ_AUTH_ENABLED);\r\n    if (isWhitelistReadAuthEnabledStr == null) {\r\n        isWhitelistReadAuthEnabled = YarnConfiguration.DEFAULT_TIMELINE_SERVICE_READ_AUTH_ENABLED;\r\n    } else {\r\n        isWhitelistReadAuthEnabled = Boolean.valueOf(isWhitelistReadAuthEnabledStr);\r\n    }\r\n    if (isWhitelistReadAuthEnabled) {\r\n        String listAllowedUsers = conf.getInitParameter(YarnConfiguration.TIMELINE_SERVICE_READ_ALLOWED_USERS);\r\n        if (StringUtils.isEmpty(listAllowedUsers)) {\r\n            listAllowedUsers = YarnConfiguration.DEFAULT_TIMELINE_SERVICE_READ_ALLOWED_USERS;\r\n        }\r\n        LOG.info(\"listAllowedUsers=\" + listAllowedUsers);\r\n        allowedUsersAclList = new AccessControlList(listAllowedUsers);\r\n        LOG.info(\"allowedUsersAclList=\" + allowedUsersAclList.getUsers());\r\n        String adminAclListStr = conf.getInitParameter(YarnConfiguration.YARN_ADMIN_ACL);\r\n        if (StringUtils.isEmpty(adminAclListStr)) {\r\n            adminAclListStr = TimelineReaderWhitelistAuthorizationFilter.EMPTY_STRING;\r\n            LOG.info(\"adminAclList not set, hence setting it to \\\"\\\"\");\r\n        }\r\n        adminAclList = new AccessControlList(adminAclListStr);\r\n        LOG.info(\"adminAclList=\" + adminAclList.getUsers());\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = super.hashCode();\r\n    result = prime * result + ((flowVersion == null) ? 0 : flowVersion.hashCode());\r\n    return result + super.hashCode();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (!super.equals(obj)) {\r\n        return false;\r\n    }\r\n    TimelineCollectorContext other = (TimelineCollectorContext) obj;\r\n    if (flowVersion == null) {\r\n        if (other.flowVersion != null) {\r\n            return false;\r\n        }\r\n    } else if (!flowVersion.equals(other.flowVersion)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFlowVersion()\n{\r\n    return flowVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "setFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFlowVersion(String version)\n{\r\n    this.flowVersion = version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    super.serviceInit(conf);\r\n    int capacity = conf.getInt(YarnConfiguration.TIMELINE_SERVICE_WRITER_ASYNC_QUEUE_CAPACITY, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WRITER_ASYNC_QUEUE_CAPACITY);\r\n    pool = new ThreadPoolExecutor(1, 1, 3, TimeUnit.SECONDS, new ArrayBlockingQueue<>(capacity));\r\n    pool.setRejectedExecutionHandler(new ThreadPoolExecutor.DiscardOldestPolicy());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    isStopped = true;\r\n    pool.shutdownNow();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "isStopped",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isStopped()\n{\r\n    return isStopped;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "setWriter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setWriter(TimelineWriter w)\n{\r\n    this.writer = w;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getAggregationGroups",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, AggregationStatusTable> getAggregationGroups()\n{\r\n    return aggregationGroups;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "setReadyToAggregate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setReadyToAggregate()\n{\r\n    readyToAggregate = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "isReadyToAggregate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isReadyToAggregate()\n{\r\n    return readyToAggregate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getEntityTypesSkipAggregation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<String> getEntityTypesSkipAggregation()\n{\r\n    return entityTypesSkipAggregation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getTimelineEntityContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineCollectorContext getTimelineEntityContext()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "putEntities",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineWriteResponse putEntities(TimelineEntities entities, UserGroupInformation callerUgi) throws IOException\n{\r\n    LOG.debug(\"putEntities(entities={}, callerUgi={})\", entities, callerUgi);\r\n    TimelineWriteResponse response;\r\n    synchronized (writer) {\r\n        response = writeTimelineEntities(entities, callerUgi);\r\n        flushBufferedTimelineEntities();\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "putDomain",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelineWriteResponse putDomain(TimelineDomain domain, UserGroupInformation callerUgi) throws IOException\n{\r\n    LOG.debug(\"putDomain(domain={}, callerUgi={})\", domain, callerUgi);\r\n    TimelineWriteResponse response;\r\n    synchronized (writer) {\r\n        final TimelineCollectorContext context = getTimelineEntityContext();\r\n        response = writer.write(context, domain);\r\n        flushBufferedTimelineEntities();\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "writeTimelineEntities",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineWriteResponse writeTimelineEntities(TimelineEntities entities, UserGroupInformation callerUgi) throws IOException\n{\r\n    updateAggregateStatus(entities, aggregationGroups, getEntityTypesSkipAggregation());\r\n    final TimelineCollectorContext context = getTimelineEntityContext();\r\n    return writer.write(context, entities, callerUgi);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "flushBufferedTimelineEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void flushBufferedTimelineEntities() throws IOException\n{\r\n    writer.flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "putEntitiesAsync",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void putEntitiesAsync(TimelineEntities entities, UserGroupInformation callerUgi) throws IOException\n{\r\n    LOG.debug(\"putEntitiesAsync(entities={}, callerUgi={})\", entities, callerUgi);\r\n    pool.execute(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                writeTimelineEntities(entities, callerUgi);\r\n            } catch (IOException ie) {\r\n                LOG.error(\"Got an exception while writing entity\", ie);\r\n            }\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "aggregateEntities",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineEntity aggregateEntities(TimelineEntities entities, String resultEntityId, String resultEntityType, boolean needsGroupIdInResult)\n{\r\n    ConcurrentMap<String, AggregationStatusTable> aggregationGroups = new ConcurrentHashMap<>();\r\n    updateAggregateStatus(entities, aggregationGroups, null);\r\n    if (needsGroupIdInResult) {\r\n        return aggregate(aggregationGroups, resultEntityId, resultEntityType);\r\n    } else {\r\n        return aggregateWithoutGroupId(aggregationGroups, resultEntityId, resultEntityType);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "updateAggregateStatus",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void updateAggregateStatus(TimelineEntities entities, ConcurrentMap<String, AggregationStatusTable> aggregationGroups, Set<String> typesToSkip)\n{\r\n    for (TimelineEntity e : entities.getEntities()) {\r\n        if ((typesToSkip != null && typesToSkip.contains(e.getType())) || e.getMetrics().isEmpty()) {\r\n            continue;\r\n        }\r\n        AggregationStatusTable aggrTable = aggregationGroups.get(e.getType());\r\n        if (aggrTable == null) {\r\n            AggregationStatusTable table = new AggregationStatusTable();\r\n            aggrTable = aggregationGroups.putIfAbsent(e.getType(), table);\r\n            if (aggrTable == null) {\r\n                aggrTable = table;\r\n            }\r\n        }\r\n        aggrTable.update(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "aggregate",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelineEntity aggregate(Map<String, AggregationStatusTable> aggregationGroups, String resultEntityId, String resultEntityType)\n{\r\n    TimelineEntity result = new TimelineEntity();\r\n    result.setId(resultEntityId);\r\n    result.setType(resultEntityType);\r\n    for (Map.Entry<String, AggregationStatusTable> entry : aggregationGroups.entrySet()) {\r\n        entry.getValue().aggregateAllTo(result, entry.getKey());\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "aggregateWithoutGroupId",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelineEntity aggregateWithoutGroupId(Map<String, AggregationStatusTable> aggregationGroups, String resultEntityId, String resultEntityType)\n{\r\n    TimelineEntity result = new TimelineEntity();\r\n    result.setId(resultEntityId);\r\n    result.setType(resultEntityType);\r\n    for (Map.Entry<String, AggregationStatusTable> entry : aggregationGroups.entrySet()) {\r\n        entry.getValue().aggregateAllTo(result, \"\");\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getEntity",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity getEntity(TimelineReaderContext context, TimelineDataToRetrieve dataToRetrieve) throws IOException\n{\r\n    LOG.debug(\"NoOpTimelineReader is configured. Response to all the read \" + \"requests would be empty\");\r\n    return new TimelineEntity();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<TimelineEntity> getEntities(TimelineReaderContext context, TimelineEntityFilters filters, TimelineDataToRetrieve dataToRetrieve) throws IOException\n{\r\n    LOG.debug(\"NoOpTimelineReader is configured. Response to all the read \" + \"requests would be empty\");\r\n    return new HashSet<>();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getEntityTypes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getEntityTypes(TimelineReaderContext context) throws IOException\n{\r\n    LOG.debug(\"NoOpTimelineReader is configured. Response to all the read \" + \"requests would be empty\");\r\n    return new HashSet<>();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getHealthStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineHealth getHealthStatus()\n{\r\n    return new TimelineHealth(TimelineHealth.TimelineHealthStatus.RUNNING, \"NoOpTimelineReader is configured. \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "writeAggregatedEntity",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineWriteResponse writeAggregatedEntity(TimelineCollectorContext context, TimelineEntities entities, OfflineAggregationInfo info) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = super.hashCode();\r\n    result = prime * result + ((entityIdPrefix == null) ? 0 : entityIdPrefix.hashCode());\r\n    result = prime * result + ((entityId == null) ? 0 : entityId.hashCode());\r\n    result = prime * result + ((entityType == null) ? 0 : entityType.hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (!super.equals(obj)) {\r\n        return false;\r\n    }\r\n    TimelineReaderContext other = (TimelineReaderContext) obj;\r\n    if (entityId == null) {\r\n        if (other.entityId != null) {\r\n            return false;\r\n        }\r\n    } else if (!entityId.equals(other.entityId)) {\r\n        return false;\r\n    }\r\n    if (entityType == null) {\r\n        if (other.entityType != null) {\r\n            return false;\r\n        }\r\n    } else if (!entityType.equals(other.entityType)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntityType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getEntityType()\n{\r\n    return entityType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setEntityType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setEntityType(String type)\n{\r\n    this.entityType = type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntityId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getEntityId()\n{\r\n    return entityId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setEntityId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setEntityId(String id)\n{\r\n    this.entityId = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntityIdPrefix",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getEntityIdPrefix()\n{\r\n    return entityIdPrefix;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setEntityIdPrefix",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setEntityIdPrefix(Long entityIdPrefix)\n{\r\n    this.entityIdPrefix = entityIdPrefix;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getDoAsUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDoAsUser()\n{\r\n    return doAsUser;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setDoAsUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDoAsUser(String doAsUser)\n{\r\n    this.doAsUser = doAsUser;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((compareOp == null) ? 0 : compareOp.hashCode());\r\n    result = prime * result + ((value == null) ? 0 : value.hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    TimelineExistsFilter other = (TimelineExistsFilter) obj;\r\n    if (compareOp != other.compareOp) {\r\n        return false;\r\n    }\r\n    if (value == null) {\r\n        if (other.value != null) {\r\n            return false;\r\n        }\r\n    } else if (!value.equals(other.value)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getFilterType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterType getFilterType()\n{\r\n    return TimelineFilterType.EXISTS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "setValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setValue(String val)\n{\r\n    value = val;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getValue()\n{\r\n    return value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "setCompareOp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCompareOp(TimelineCompareOp op)\n{\r\n    compareOp = op;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getCompareOp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineCompareOp getCompareOp()\n{\r\n    return compareOp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return String.format(\"%s (%s %s)\", this.getClass().getSimpleName(), this.compareOp.name(), this.value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "matchKeyValuesFilter",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean matchKeyValuesFilter(TimelineEntity entity, TimelineKeyValuesFilter keyValuesFilter, TimelineEntityFiltersType entityFiltersType)\n{\r\n    Map<String, Set<String>> relations = null;\r\n    if (entityFiltersType == TimelineEntityFiltersType.IS_RELATED_TO) {\r\n        relations = entity.getIsRelatedToEntities();\r\n    } else if (entityFiltersType == TimelineEntityFiltersType.RELATES_TO) {\r\n        relations = entity.getRelatesToEntities();\r\n    }\r\n    if (relations == null) {\r\n        return false;\r\n    }\r\n    Set<String> ids = relations.get(keyValuesFilter.getKey());\r\n    if (ids == null) {\r\n        return false;\r\n    }\r\n    boolean matched = false;\r\n    for (Object id : keyValuesFilter.getValues()) {\r\n        matched = !(ids.contains(id) ^ keyValuesFilter.getCompareOp() == TimelineCompareOp.EQUAL);\r\n        if (!matched) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "matchRelatesTo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean matchRelatesTo(TimelineEntity entity, TimelineFilterList relatesTo) throws IOException\n{\r\n    return matchFilters(entity, relatesTo, TimelineEntityFiltersType.RELATES_TO);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "matchIsRelatedTo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean matchIsRelatedTo(TimelineEntity entity, TimelineFilterList isRelatedTo) throws IOException\n{\r\n    return matchFilters(entity, isRelatedTo, TimelineEntityFiltersType.IS_RELATED_TO);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "matchKeyValueFilter",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean matchKeyValueFilter(TimelineEntity entity, TimelineKeyValueFilter kvFilter, TimelineEntityFiltersType entityFiltersType)\n{\r\n    Map<String, ? extends Object> map = null;\r\n    if (entityFiltersType == TimelineEntityFiltersType.CONFIG) {\r\n        map = entity.getConfigs();\r\n    } else if (entityFiltersType == TimelineEntityFiltersType.INFO) {\r\n        map = entity.getInfo();\r\n    }\r\n    if (map == null) {\r\n        return false;\r\n    }\r\n    Object value = map.get(kvFilter.getKey());\r\n    if (value == null) {\r\n        return false;\r\n    }\r\n    return !(value.equals(kvFilter.getValue()) ^ kvFilter.getCompareOp() == TimelineCompareOp.EQUAL);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "matchConfigFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean matchConfigFilters(TimelineEntity entity, TimelineFilterList configFilters) throws IOException\n{\r\n    return matchFilters(entity, configFilters, TimelineEntityFiltersType.CONFIG);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "matchInfoFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean matchInfoFilters(TimelineEntity entity, TimelineFilterList infoFilters) throws IOException\n{\r\n    return matchFilters(entity, infoFilters, TimelineEntityFiltersType.INFO);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "matchExistsFilter",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean matchExistsFilter(TimelineEntity entity, TimelineExistsFilter existsFilter, TimelineEntityFiltersType entityFiltersType)\n{\r\n    if (entityFiltersType != TimelineEntityFiltersType.EVENT) {\r\n        return false;\r\n    }\r\n    Set<String> eventIds = new HashSet<String>();\r\n    for (TimelineEvent event : entity.getEvents()) {\r\n        eventIds.add(event.getId());\r\n    }\r\n    return !(eventIds.contains(existsFilter.getValue()) ^ existsFilter.getCompareOp() == TimelineCompareOp.EQUAL);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "matchEventFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean matchEventFilters(TimelineEntity entity, TimelineFilterList eventFilters) throws IOException\n{\r\n    return matchFilters(entity, eventFilters, TimelineEntityFiltersType.EVENT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "compareValues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean compareValues(TimelineCompareOp compareOp, long val1, long val2)\n{\r\n    switch(compareOp) {\r\n        case LESS_THAN:\r\n            return val1 < val2;\r\n        case LESS_OR_EQUAL:\r\n            return val1 <= val2;\r\n        case EQUAL:\r\n            return val1 == val2;\r\n        case NOT_EQUAL:\r\n            return val1 != val2;\r\n        case GREATER_OR_EQUAL:\r\n            return val1 >= val2;\r\n        case GREATER_THAN:\r\n            return val1 > val2;\r\n        default:\r\n            throw new RuntimeException(\"Unknown TimelineCompareOp \" + compareOp.name());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "matchCompareFilter",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean matchCompareFilter(TimelineEntity entity, TimelineCompareFilter compareFilter, TimelineEntityFiltersType entityFiltersType) throws IOException\n{\r\n    if (entityFiltersType != TimelineEntityFiltersType.METRIC) {\r\n        return false;\r\n    }\r\n    if (!isIntegralValue(compareFilter.getValue())) {\r\n        throw new IOException(\"Metric filters has non integral values\");\r\n    }\r\n    Map<String, TimelineMetric> metricMap = new HashMap<String, TimelineMetric>();\r\n    for (TimelineMetric metric : entity.getMetrics()) {\r\n        metricMap.put(metric.getId(), metric);\r\n    }\r\n    TimelineMetric metric = metricMap.get(compareFilter.getKey());\r\n    if (metric == null) {\r\n        return false;\r\n    }\r\n    return compareValues(compareFilter.getCompareOp(), metric.getValuesJAXB().firstEntry().getValue().longValue(), ((Number) compareFilter.getValue()).longValue());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "matchMetricFilters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean matchMetricFilters(TimelineEntity entity, TimelineFilterList metricFilters) throws IOException\n{\r\n    return matchFilters(entity, metricFilters, TimelineEntityFiltersType.METRIC);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "matchFilters",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "boolean matchFilters(TimelineEntity entity, TimelineFilterList filters, TimelineEntityFiltersType entityFiltersType) throws IOException\n{\r\n    if (filters == null || filters.getFilterList().isEmpty()) {\r\n        return false;\r\n    }\r\n    TimelineFilterList.Operator operator = filters.getOperator();\r\n    for (TimelineFilter filter : filters.getFilterList()) {\r\n        TimelineFilterType filterType = filter.getFilterType();\r\n        if (!entityFiltersType.isValidFilter(filterType)) {\r\n            throw new IOException(\"Unsupported filter \" + filterType);\r\n        }\r\n        boolean matched = false;\r\n        switch(filterType) {\r\n            case LIST:\r\n                matched = matchFilters(entity, (TimelineFilterList) filter, entityFiltersType);\r\n                break;\r\n            case COMPARE:\r\n                matched = matchCompareFilter(entity, (TimelineCompareFilter) filter, entityFiltersType);\r\n                break;\r\n            case EXISTS:\r\n                matched = matchExistsFilter(entity, (TimelineExistsFilter) filter, entityFiltersType);\r\n                break;\r\n            case KEY_VALUE:\r\n                matched = matchKeyValueFilter(entity, (TimelineKeyValueFilter) filter, entityFiltersType);\r\n                break;\r\n            case KEY_VALUES:\r\n                matched = matchKeyValuesFilter(entity, (TimelineKeyValuesFilter) filter, entityFiltersType);\r\n                break;\r\n            default:\r\n                throw new IOException(\"Unsupported filter \" + filterType);\r\n        }\r\n        if (!matched) {\r\n            if (operator == TimelineFilterList.Operator.AND) {\r\n                return false;\r\n            }\r\n        } else {\r\n            if (operator == TimelineFilterList.Operator.OR) {\r\n                return true;\r\n            }\r\n        }\r\n    }\r\n    return operator == TimelineFilterList.Operator.AND;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "isIntegralValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isIntegralValue(Object obj)\n{\r\n    return (obj instanceof Short) || (obj instanceof Integer) || (obj instanceof Long);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilter createFilter()\n{\r\n    return new TimelineExistsFilter();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setValueToCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setValueToCurrentFilter(String value)\n{\r\n    ((TimelineExistsFilter) getCurrentFilter()).setValue(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setCompareOpToCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setCompareOpToCurrentFilter(TimelineCompareOp compareOp)\n{\r\n    ((TimelineExistsFilter) getCurrentFilter()).setCompareOp(compareOp);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineWriteResponse write(TimelineCollectorContext context, TimelineEntities data, UserGroupInformation callerUgi) throws IOException\n{\r\n    LOG.debug(\"NoOpTimelineWriter is configured. Not storing \" + \"TimelineEntities.\");\r\n    return new TimelineWriteResponse();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineWriteResponse write(TimelineCollectorContext context, TimelineDomain domain) throws IOException\n{\r\n    LOG.debug(\"NoOpTimelineWriter is configured. Not storing \" + \"TimelineEntities.\");\r\n    return new TimelineWriteResponse();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "aggregate",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineWriteResponse aggregate(TimelineEntity data, TimelineAggregationTrack track) throws IOException\n{\r\n    LOG.debug(\"NoOpTimelineWriter is configured. Not aggregating \" + \"TimelineEntities.\");\r\n    return new TimelineWriteResponse();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void flush() throws IOException\n{\r\n    LOG.debug(\"NoOpTimelineWriter is configured. Ignoring flush call\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilter getCurrentFilter()\n{\r\n    return currentFilter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getFilterList",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilter getFilterList()\n{\r\n    return filterList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilter createFilter()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Object parseValue(String strValue) throws TimelineParseException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setCompareOpToCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCompareOpToCurrentFilter(TimelineCompareOp compareOp, boolean keyMustExistFlag) throws TimelineParseException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setValueToCurrentFilter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setValueToCurrentFilter(Object value)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "handleSpaceChar",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void handleSpaceChar() throws TimelineParseException\n{\r\n    if (currentParseState == ParseState.PARSING_KEY || currentParseState == ParseState.PARSING_VALUE) {\r\n        if (kvStartOffset == offset) {\r\n            kvStartOffset++;\r\n            offset++;\r\n            return;\r\n        }\r\n        String str = expr.substring(kvStartOffset, offset);\r\n        if (currentParseState == ParseState.PARSING_KEY) {\r\n            if (currentFilter == null) {\r\n                currentFilter = createFilter();\r\n            }\r\n            ((TimelineCompareFilter) currentFilter).setKey(str);\r\n            currentParseState = ParseState.PARSING_COMPAREOP;\r\n        } else if (currentParseState == ParseState.PARSING_VALUE) {\r\n            if (currentFilter != null) {\r\n                setValueToCurrentFilter(parseValue(str));\r\n            }\r\n            currentParseState = ParseState.PARSING_OP;\r\n        }\r\n    }\r\n    offset++;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "handleOpeningBracketChar",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void handleOpeningBracketChar() throws TimelineParseException\n{\r\n    if (currentParseState != ParseState.PARSING_KEY) {\r\n        throw new TimelineParseException(\"Encountered unexpected opening \" + \"bracket while parsing \" + exprName + \".\");\r\n    }\r\n    offset++;\r\n    kvStartOffset = offset;\r\n    filterListStack.push(filterList);\r\n    filterList = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "handleClosingBracketChar",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void handleClosingBracketChar() throws TimelineParseException\n{\r\n    if (currentParseState != ParseState.PARSING_VALUE && currentParseState != ParseState.PARSING_OP) {\r\n        throw new TimelineParseException(\"Encountered unexpected closing \" + \"bracket while parsing \" + exprName + \".\");\r\n    }\r\n    if (!filterListStack.isEmpty()) {\r\n        if (currentParseState == ParseState.PARSING_VALUE) {\r\n            setValueToCurrentFilter(parseValue(expr.substring(kvStartOffset, offset)));\r\n            currentParseState = ParseState.PARSING_OP;\r\n        }\r\n        if (currentFilter != null) {\r\n            filterList.addFilter(currentFilter);\r\n        }\r\n        TimelineFilterList fList = filterListStack.pop();\r\n        if (fList != null) {\r\n            fList.addFilter(filterList);\r\n            filterList = fList;\r\n        }\r\n        currentFilter = null;\r\n        offset++;\r\n        kvStartOffset = offset;\r\n    } else {\r\n        throw new TimelineParseException(\"Encountered unexpected closing \" + \"bracket while parsing \" + exprName + \".\");\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseCompareOp",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void parseCompareOp() throws TimelineParseException\n{\r\n    if (offset + 2 >= exprLength) {\r\n        throw new TimelineParseException(\"Compare op cannot be parsed for \" + exprName + \".\");\r\n    }\r\n    TimelineCompareOp compareOp = null;\r\n    boolean keyExistFlag = true;\r\n    if (expr.charAt(offset + 2) == TimelineParseConstants.SPACE_CHAR) {\r\n        if (exprInLowerCase.startsWith(\"eq\", offset)) {\r\n            compareOp = TimelineCompareOp.EQUAL;\r\n        } else if (exprInLowerCase.startsWith(\"ne\", offset)) {\r\n            compareOp = TimelineCompareOp.NOT_EQUAL;\r\n            keyExistFlag = false;\r\n        } else if (exprInLowerCase.startsWith(\"lt\", offset)) {\r\n            compareOp = TimelineCompareOp.LESS_THAN;\r\n        } else if (exprInLowerCase.startsWith(\"le\", offset)) {\r\n            compareOp = TimelineCompareOp.LESS_OR_EQUAL;\r\n        } else if (exprInLowerCase.startsWith(\"gt\", offset)) {\r\n            compareOp = TimelineCompareOp.GREATER_THAN;\r\n        } else if (exprInLowerCase.startsWith(\"ge\", offset)) {\r\n            compareOp = TimelineCompareOp.GREATER_OR_EQUAL;\r\n        }\r\n        offset = offset + 3;\r\n    } else if (exprInLowerCase.startsWith(\"ene \", offset)) {\r\n        compareOp = TimelineCompareOp.NOT_EQUAL;\r\n        offset = offset + 4;\r\n    }\r\n    if (compareOp == null) {\r\n        throw new TimelineParseException(\"Compare op cannot be parsed for \" + exprName + \".\");\r\n    }\r\n    setCompareOpToCurrentFilter(compareOp, keyExistFlag);\r\n    kvStartOffset = offset;\r\n    currentParseState = ParseState.PARSING_VALUE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parseOp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void parseOp(boolean closingBracket) throws TimelineParseException\n{\r\n    Operator operator = null;\r\n    if (exprInLowerCase.startsWith(\"or \", offset)) {\r\n        operator = Operator.OR;\r\n        offset = offset + 3;\r\n    } else if (exprInLowerCase.startsWith(\"and \", offset)) {\r\n        operator = Operator.AND;\r\n        offset = offset + 4;\r\n    }\r\n    if (operator == null) {\r\n        throw new TimelineParseException(\"Operator cannot be parsed for \" + exprName + \".\");\r\n    }\r\n    if (filterList == null) {\r\n        filterList = new TimelineFilterList(operator);\r\n    }\r\n    if (currentFilter != null) {\r\n        filterList.addFilter(currentFilter);\r\n    }\r\n    if (closingBracket || filterList.getOperator() != operator) {\r\n        filterList = new TimelineFilterList(operator, filterList);\r\n    }\r\n    currentFilter = null;\r\n    kvStartOffset = offset;\r\n    currentParseState = ParseState.PARSING_KEY;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "parse",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "TimelineFilterList parse() throws TimelineParseException\n{\r\n    if (expr == null || exprLength == 0) {\r\n        return null;\r\n    }\r\n    boolean closingBracket = false;\r\n    while (offset < exprLength) {\r\n        char offsetChar = expr.charAt(offset);\r\n        switch(offsetChar) {\r\n            case TimelineParseConstants.SPACE_CHAR:\r\n                handleSpaceChar();\r\n                break;\r\n            case TimelineParseConstants.OPENING_BRACKET_CHAR:\r\n                handleOpeningBracketChar();\r\n                break;\r\n            case TimelineParseConstants.CLOSING_BRACKET_CHAR:\r\n                handleClosingBracketChar();\r\n                closingBracket = true;\r\n                break;\r\n            default:\r\n                if (currentParseState == ParseState.PARSING_COMPAREOP) {\r\n                    parseCompareOp();\r\n                } else if (currentParseState == ParseState.PARSING_OP) {\r\n                    parseOp(closingBracket);\r\n                    closingBracket = false;\r\n                } else {\r\n                    offset++;\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    if (!filterListStack.isEmpty()) {\r\n        filterListStack.clear();\r\n        throw new TimelineParseException(\"Encountered improper brackets while \" + \"parsing \" + exprName + \".\");\r\n    }\r\n    if (currentParseState == ParseState.PARSING_VALUE) {\r\n        setValueToCurrentFilter(parseValue(expr.substring(kvStartOffset, offset)));\r\n    }\r\n    if (filterList == null || filterList.getFilterList().isEmpty()) {\r\n        if (currentFilter == null) {\r\n            throw new TimelineParseException(\"Invalid expression provided for \" + exprName);\r\n        } else {\r\n            filterList = new TimelineFilterList(currentFilter);\r\n        }\r\n    } else if (currentFilter != null) {\r\n        filterList.addFilter(currentFilter);\r\n    }\r\n    return filterList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (filterListStack != null) {\r\n        filterListStack.clear();\r\n    }\r\n    filterList = null;\r\n    currentFilter = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "main",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    try {\r\n        int status = ToolRunner.run(new YarnConfiguration(), new TimelineSchemaCreator(), args);\r\n        System.exit(status);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Error while creating Timeline Schema : \", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "run",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int run(String[] args) throws Exception\n{\r\n    Configuration conf = getConf();\r\n    return createTimelineSchema(args, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "createTimelineSchema",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int createTimelineSchema(String[] args, Configuration conf) throws Exception\n{\r\n    String schemaCreatorClassName = conf.get(YarnConfiguration.TIMELINE_SERVICE_SCHEMA_CREATOR_CLASS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_SCHEMA_CREATOR_CLASS);\r\n    LOG.info(\"Using {} for creating Timeline Service Schema \", schemaCreatorClassName);\r\n    try {\r\n        Class<?> schemaCreatorClass = Class.forName(schemaCreatorClassName);\r\n        if (SchemaCreator.class.isAssignableFrom(schemaCreatorClass)) {\r\n            SchemaCreator schemaCreator = (SchemaCreator) ReflectionUtils.newInstance(schemaCreatorClass, conf);\r\n            schemaCreator.createTimelineSchema(args);\r\n            return 0;\r\n        } else {\r\n            throw new YarnRuntimeException(\"Class: \" + schemaCreatorClassName + \" not instance of \" + SchemaCreator.class.getCanonicalName());\r\n        }\r\n    } catch (ClassNotFoundException e) {\r\n        throw new YarnRuntimeException(\"Could not instantiate TimelineReader: \" + schemaCreatorClassName, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "PerNodeAggTimelineCollectorMetrics getInstance()\n{\r\n    if (!isInitialized.get()) {\r\n        synchronized (PerNodeAggTimelineCollectorMetrics.class) {\r\n            if (instance == null) {\r\n                instance = DefaultMetricsSystem.instance().register(METRICS_INFO.name(), METRICS_INFO.description(), new PerNodeAggTimelineCollectorMetrics());\r\n                isInitialized.set(true);\r\n            }\r\n        }\r\n    }\r\n    return instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "destroy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void destroy()\n{\r\n    isInitialized.set(false);\r\n    instance = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "getPutEntitiesSuccessLatency",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableQuantiles getPutEntitiesSuccessLatency()\n{\r\n    return putEntitiesSuccessLatency;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "getPutEntitiesFailureLatency",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableQuantiles getPutEntitiesFailureLatency()\n{\r\n    return putEntitiesFailureLatency;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "getAsyncPutEntitiesSuccessLatency",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableQuantiles getAsyncPutEntitiesSuccessLatency()\n{\r\n    return asyncPutEntitiesSuccessLatency;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "getAsyncPutEntitiesFailureLatency",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableQuantiles getAsyncPutEntitiesFailureLatency()\n{\r\n    return asyncPutEntitiesFailureLatency;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "addPutEntitiesLatency",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addPutEntitiesLatency(long durationMs, boolean succeeded)\n{\r\n    if (succeeded) {\r\n        putEntitiesSuccessLatency.add(durationMs);\r\n    } else {\r\n        putEntitiesFailureLatency.add(durationMs);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\metrics",
  "methodName" : "addAsyncPutEntitiesLatency",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addAsyncPutEntitiesLatency(long durationMs, boolean succeeded)\n{\r\n    if (succeeded) {\r\n        asyncPutEntitiesSuccessLatency.add(durationMs);\r\n    } else {\r\n        asyncPutEntitiesFailureLatency.add(durationMs);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getFilterType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterType getFilterType()\n{\r\n    return TimelineFilterType.LIST;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getFilterList",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<TimelineFilter> getFilterList()\n{\r\n    return filterList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getOperator",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Operator getOperator()\n{\r\n    return operator;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "setOperator",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOperator(Operator op)\n{\r\n    operator = op;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "addFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addFilter(TimelineFilter filter)\n{\r\n    filterList.add(filter);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((filterList == null) ? 0 : filterList.hashCode());\r\n    result = prime * result + ((operator == null) ? 0 : operator.hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    TimelineFilterList other = (TimelineFilterList) obj;\r\n    if (operator != other.operator) {\r\n        return false;\r\n    }\r\n    if (filterList == null) {\r\n        if (other.filterList != null) {\r\n            return false;\r\n        }\r\n    } else if (!filterList.equals(other.filterList)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return String.format(\"TimelineFilterList %s (%d): %s\", this.operator, this.filterList.size(), this.filterList.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.adminACLsManager = new AdminACLsManager(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getClusterID",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getClusterID(String clusterId, Configuration conf)\n{\r\n    if (clusterId == null || clusterId.isEmpty()) {\r\n        return conf.get(YarnConfiguration.RM_CLUSTER_ID, YarnConfiguration.DEFAULT_RM_CLUSTER_ID);\r\n    }\r\n    return clusterId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getTimelineEntityType",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntityType getTimelineEntityType(String entityType)\n{\r\n    if (entityType == null) {\r\n        return null;\r\n    }\r\n    try {\r\n        return TimelineEntityType.valueOf(entityType);\r\n    } catch (IllegalArgumentException e) {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "fillUID",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void fillUID(TimelineEntityType entityType, TimelineEntity entity, TimelineReaderContext context)\n{\r\n    if (entityType != null) {\r\n        switch(entityType) {\r\n            case YARN_FLOW_ACTIVITY:\r\n                FlowActivityEntity activityEntity = (FlowActivityEntity) entity;\r\n                context.setUserId(activityEntity.getUser());\r\n                context.setFlowName(activityEntity.getFlowName());\r\n                entity.setUID(TimelineReaderUtils.UID_KEY, TimelineUIDConverter.FLOW_UID.encodeUID(context));\r\n                return;\r\n            case YARN_FLOW_RUN:\r\n                FlowRunEntity runEntity = (FlowRunEntity) entity;\r\n                context.setFlowRunId(runEntity.getRunId());\r\n                entity.setUID(TimelineReaderUtils.UID_KEY, TimelineUIDConverter.FLOWRUN_UID.encodeUID(context));\r\n                return;\r\n            case YARN_APPLICATION:\r\n                context.setAppId(entity.getId());\r\n                entity.setUID(TimelineReaderUtils.UID_KEY, TimelineUIDConverter.APPLICATION_UID.encodeUID(context));\r\n                return;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    context.setEntityType(entity.getType());\r\n    context.setEntityIdPrefix(entity.getIdPrefix());\r\n    context.setEntityId(entity.getId());\r\n    if (context.getDoAsUser() != null) {\r\n        entity.setUID(TimelineReaderUtils.UID_KEY, TimelineUIDConverter.SUB_APPLICATION_ENTITY_UID.encodeUID(context));\r\n    } else {\r\n        entity.setUID(TimelineReaderUtils.UID_KEY, TimelineUIDConverter.GENERIC_ENTITY_UID.encodeUID(context));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Set<TimelineEntity> getEntities(TimelineReaderContext context, TimelineEntityFilters filters, TimelineDataToRetrieve dataToRetrieve) throws IOException\n{\r\n    context.setClusterId(getClusterID(context.getClusterId(), getConfig()));\r\n    Set<TimelineEntity> entities = reader.getEntities(new TimelineReaderContext(context), filters, dataToRetrieve);\r\n    if (entities != null) {\r\n        TimelineEntityType type = getTimelineEntityType(context.getEntityType());\r\n        for (TimelineEntity entity : entities) {\r\n            fillUID(type, entity, context);\r\n        }\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntity",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelineEntity getEntity(TimelineReaderContext context, TimelineDataToRetrieve dataToRetrieve) throws IOException\n{\r\n    context.setClusterId(getClusterID(context.getClusterId(), getConfig()));\r\n    TimelineEntity entity = reader.getEntity(new TimelineReaderContext(context), dataToRetrieve);\r\n    if (entity != null) {\r\n        TimelineEntityType type = getTimelineEntityType(context.getEntityType());\r\n        fillUID(type, entity, context);\r\n    }\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getEntityTypes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<String> getEntityTypes(TimelineReaderContext context) throws IOException\n{\r\n    context.setClusterId(getClusterID(context.getClusterId(), getConfig()));\r\n    return reader.getEntityTypes(context);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkAccess",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean checkAccess(UserGroupInformation callerUGI)\n{\r\n    if (!adminACLsManager.areACLsEnabled()) {\r\n        return true;\r\n    }\r\n    return callerUGI != null && adminACLsManager.isAdmin(callerUGI);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getHealthStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineHealth getHealthStatus()\n{\r\n    return reader.getHealthStatus();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getFilterType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterType getFilterType()\n{\r\n    return TimelineFilterType.KEY_VALUES;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getKey()\n{\r\n    return key;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getValues",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<Object> getValues()\n{\r\n    return values;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "setKeyAndValues",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setKeyAndValues(String keyForValues, Set<Object> vals)\n{\r\n    key = keyForValues;\r\n    values = vals;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "setCompareOp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCompareOp(TimelineCompareOp op)\n{\r\n    compareOp = op;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getCompareOp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineCompareOp getCompareOp()\n{\r\n    return compareOp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return String.format(\"%s (%s, %s:%s)\", this.getClass().getSimpleName(), this.compareOp.name(), this.key, (values == null) ? \"\" : values.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((compareOp == null) ? 0 : compareOp.hashCode());\r\n    result = prime * result + ((key == null) ? 0 : key.hashCode());\r\n    result = prime * result + ((values == null) ? 0 : values.hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    TimelineKeyValuesFilter other = (TimelineKeyValuesFilter) obj;\r\n    if (compareOp != other.compareOp) {\r\n        return false;\r\n    }\r\n    if (key == null) {\r\n        if (other.key != null) {\r\n            return false;\r\n        }\r\n    } else if (!key.equals(other.key)) {\r\n        return false;\r\n    }\r\n    if (values == null) {\r\n        if (other.values != null) {\r\n            return false;\r\n        }\r\n    } else if (!values.equals(other.values)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "initializeSkipSet",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Set<String> initializeSkipSet()\n{\r\n    Set<String> result = new HashSet<>();\r\n    result.add(TimelineEntityType.YARN_APPLICATION.toString());\r\n    result.add(TimelineEntityType.YARN_FLOW_RUN.toString());\r\n    result.add(TimelineEntityType.YARN_FLOW_ACTIVITY.toString());\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    aggregationExecutorIntervalSecs = conf.getInt(YarnConfiguration.TIMELINE_SERVICE_AGGREGATION_INTERVAL_SECS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_AGGREGATION_INTERVAL_SECS);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    appAggregationExecutor = new ScheduledThreadPoolExecutor(AppLevelTimelineCollectorWithAgg.AGGREGATION_EXECUTOR_NUM_THREADS, new ThreadFactoryBuilder().setNameFormat(\"TimelineCollector Aggregation thread #%d\").build());\r\n    appAggregator = new AppLevelAggregator();\r\n    appAggregationExecutor.scheduleAtFixedRate(appAggregator, aggregationExecutorIntervalSecs, aggregationExecutorIntervalSecs, TimeUnit.SECONDS);\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    appAggregationExecutor.shutdown();\r\n    if (!appAggregationExecutor.awaitTermination(10, TimeUnit.SECONDS)) {\r\n        LOG.info(\"App-level aggregator shutdown timed out, shutdown now. \");\r\n        appAggregationExecutor.shutdownNow();\r\n    }\r\n    appAggregator.aggregate();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getEntityTypesSkipAggregation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<String> getEntityTypesSkipAggregation()\n{\r\n    return entityTypesSkipAggregation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getRootPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getRootPath()\n{\r\n    return rootPath.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getTimelineRecordFromJSON",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T getTimelineRecordFromJSON(String jsonString, Class<T> clazz) throws JsonGenerationException, JsonMappingException, IOException\n{\r\n    return mapper.readValue(jsonString, clazz);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "fillFields",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void fillFields(TimelineEntity finalEntity, TimelineEntity real, EnumSet<Field> fields)\n{\r\n    if (fields.contains(Field.ALL)) {\r\n        fields = EnumSet.allOf(Field.class);\r\n    }\r\n    for (Field field : fields) {\r\n        switch(field) {\r\n            case CONFIGS:\r\n                finalEntity.setConfigs(real.getConfigs());\r\n                break;\r\n            case METRICS:\r\n                finalEntity.setMetrics(real.getMetrics());\r\n                break;\r\n            case INFO:\r\n                finalEntity.setInfo(real.getInfo());\r\n                break;\r\n            case IS_RELATED_TO:\r\n                finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\r\n                break;\r\n            case RELATES_TO:\r\n                finalEntity.setIsRelatedToEntities(real.getIsRelatedToEntities());\r\n                break;\r\n            case EVENTS:\r\n                finalEntity.setEvents(real.getEvents());\r\n                break;\r\n            default:\r\n                continue;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getFlowRunPath",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "String getFlowRunPath(String userId, String clusterId, String flowName, Long flowRunId, String appId) throws IOException\n{\r\n    if (userId != null && flowName != null && flowRunId != null) {\r\n        return userId + File.separator + flowName + File.separator + flowRunId;\r\n    }\r\n    if (clusterId == null || appId == null) {\r\n        throw new IOException(\"Unable to get flow info\");\r\n    }\r\n    Path clusterIdPath = new Path(entitiesPath, clusterId);\r\n    Path appFlowMappingFilePath = new Path(clusterIdPath, APP_FLOW_MAPPING_FILE);\r\n    try (BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(appFlowMappingFilePath), Charset.forName(\"UTF-8\")));\r\n        CSVParser parser = new CSVParser(reader, csvFormat)) {\r\n        for (CSVRecord record : parser.getRecords()) {\r\n            if (record.size() < 4) {\r\n                continue;\r\n            }\r\n            String applicationId = record.get(\"APP\");\r\n            if (applicationId != null && !applicationId.trim().isEmpty() && !applicationId.trim().equals(appId)) {\r\n                continue;\r\n            }\r\n            return record.get(1).trim() + File.separator + record.get(2).trim() + File.separator + record.get(3).trim();\r\n        }\r\n        parser.close();\r\n    }\r\n    throw new IOException(\"Unable to get flow info\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "createEntityToBeReturned",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineEntity createEntityToBeReturned(TimelineEntity entity, EnumSet<Field> fieldsToRetrieve)\n{\r\n    TimelineEntity entityToBeReturned = new TimelineEntity();\r\n    entityToBeReturned.setIdentifier(entity.getIdentifier());\r\n    entityToBeReturned.setCreatedTime(entity.getCreatedTime());\r\n    if (fieldsToRetrieve != null) {\r\n        fillFields(entityToBeReturned, entity, fieldsToRetrieve);\r\n    }\r\n    return entityToBeReturned;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "isTimeInRange",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isTimeInRange(Long time, Long timeBegin, Long timeEnd)\n{\r\n    return (time >= timeBegin) && (time <= timeEnd);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "mergeEntities",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void mergeEntities(TimelineEntity entity1, TimelineEntity entity2)\n{\r\n    if (entity2.getCreatedTime() != null && entity2.getCreatedTime() > 0) {\r\n        entity1.setCreatedTime(entity2.getCreatedTime());\r\n    }\r\n    for (Entry<String, String> configEntry : entity2.getConfigs().entrySet()) {\r\n        entity1.addConfig(configEntry.getKey(), configEntry.getValue());\r\n    }\r\n    for (Entry<String, Object> infoEntry : entity2.getInfo().entrySet()) {\r\n        entity1.addInfo(infoEntry.getKey(), infoEntry.getValue());\r\n    }\r\n    for (Entry<String, Set<String>> isRelatedToEntry : entity2.getIsRelatedToEntities().entrySet()) {\r\n        String type = isRelatedToEntry.getKey();\r\n        for (String entityId : isRelatedToEntry.getValue()) {\r\n            entity1.addIsRelatedToEntity(type, entityId);\r\n        }\r\n    }\r\n    for (Entry<String, Set<String>> relatesToEntry : entity2.getRelatesToEntities().entrySet()) {\r\n        String type = relatesToEntry.getKey();\r\n        for (String entityId : relatesToEntry.getValue()) {\r\n            entity1.addRelatesToEntity(type, entityId);\r\n        }\r\n    }\r\n    for (TimelineEvent event : entity2.getEvents()) {\r\n        entity1.addEvent(event);\r\n    }\r\n    for (TimelineMetric metric2 : entity2.getMetrics()) {\r\n        boolean found = false;\r\n        for (TimelineMetric metric1 : entity1.getMetrics()) {\r\n            if (metric1.getId().equals(metric2.getId())) {\r\n                metric1.addValues(metric2.getValues());\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!found) {\r\n            entity1.addMetric(metric2);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "readEntityFromFile",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "TimelineEntity readEntityFromFile(BufferedReader reader) throws IOException\n{\r\n    TimelineEntity entity = getTimelineRecordFromJSON(reader.readLine(), TimelineEntity.class);\r\n    String entityStr = \"\";\r\n    while ((entityStr = reader.readLine()) != null) {\r\n        if (entityStr.trim().isEmpty()) {\r\n            continue;\r\n        }\r\n        TimelineEntity anotherEntity = getTimelineRecordFromJSON(entityStr, TimelineEntity.class);\r\n        if (!entity.getId().equals(anotherEntity.getId()) || !entity.getType().equals(anotherEntity.getType())) {\r\n            continue;\r\n        }\r\n        mergeEntities(entity, anotherEntity);\r\n    }\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "Set<TimelineEntity> getEntities(Path dir, String entityType, TimelineEntityFilters filters, TimelineDataToRetrieve dataToRetrieve) throws IOException\n{\r\n    Map<Long, Set<TimelineEntity>> sortedEntities = new TreeMap<>(new Comparator<Long>() {\r\n\r\n        @Override\r\n        public int compare(Long l1, Long l2) {\r\n            return l2.compareTo(l1);\r\n        }\r\n    });\r\n    if (dir != null) {\r\n        RemoteIterator<LocatedFileStatus> fileStatuses = fs.listFiles(dir, false);\r\n        if (fileStatuses != null) {\r\n            while (fileStatuses.hasNext()) {\r\n                LocatedFileStatus locatedFileStatus = fileStatuses.next();\r\n                Path entityFile = locatedFileStatus.getPath();\r\n                if (!entityFile.getName().contains(TIMELINE_SERVICE_STORAGE_EXTENSION)) {\r\n                    continue;\r\n                }\r\n                try (BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(entityFile), Charset.forName(\"UTF-8\")))) {\r\n                    TimelineEntity entity = readEntityFromFile(reader);\r\n                    if (!entity.getType().equals(entityType)) {\r\n                        continue;\r\n                    }\r\n                    if (!isTimeInRange(entity.getCreatedTime(), filters.getCreatedTimeBegin(), filters.getCreatedTimeEnd())) {\r\n                        continue;\r\n                    }\r\n                    if (filters.getRelatesTo() != null && !filters.getRelatesTo().getFilterList().isEmpty() && !TimelineStorageUtils.matchRelatesTo(entity, filters.getRelatesTo())) {\r\n                        continue;\r\n                    }\r\n                    if (filters.getIsRelatedTo() != null && !filters.getIsRelatedTo().getFilterList().isEmpty() && !TimelineStorageUtils.matchIsRelatedTo(entity, filters.getIsRelatedTo())) {\r\n                        continue;\r\n                    }\r\n                    if (filters.getInfoFilters() != null && !filters.getInfoFilters().getFilterList().isEmpty() && !TimelineStorageUtils.matchInfoFilters(entity, filters.getInfoFilters())) {\r\n                        continue;\r\n                    }\r\n                    if (filters.getConfigFilters() != null && !filters.getConfigFilters().getFilterList().isEmpty() && !TimelineStorageUtils.matchConfigFilters(entity, filters.getConfigFilters())) {\r\n                        continue;\r\n                    }\r\n                    if (filters.getMetricFilters() != null && !filters.getMetricFilters().getFilterList().isEmpty() && !TimelineStorageUtils.matchMetricFilters(entity, filters.getMetricFilters())) {\r\n                        continue;\r\n                    }\r\n                    if (filters.getEventFilters() != null && !filters.getEventFilters().getFilterList().isEmpty() && !TimelineStorageUtils.matchEventFilters(entity, filters.getEventFilters())) {\r\n                        continue;\r\n                    }\r\n                    TimelineEntity entityToBeReturned = createEntityToBeReturned(entity, dataToRetrieve.getFieldsToRetrieve());\r\n                    Set<TimelineEntity> entitiesCreatedAtSameTime = sortedEntities.get(entityToBeReturned.getCreatedTime());\r\n                    if (entitiesCreatedAtSameTime == null) {\r\n                        entitiesCreatedAtSameTime = new HashSet<TimelineEntity>();\r\n                    }\r\n                    entitiesCreatedAtSameTime.add(entityToBeReturned);\r\n                    sortedEntities.put(entityToBeReturned.getCreatedTime(), entitiesCreatedAtSameTime);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Set<TimelineEntity> entities = new HashSet<TimelineEntity>();\r\n    long entitiesAdded = 0;\r\n    for (Set<TimelineEntity> entitySet : sortedEntities.values()) {\r\n        for (TimelineEntity entity : entitySet) {\r\n            entities.add(entity);\r\n            ++entitiesAdded;\r\n            if (entitiesAdded >= filters.getLimit()) {\r\n                return entities;\r\n            }\r\n        }\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    String outputRoot = conf.get(TIMELINE_SERVICE_STORAGE_DIR_ROOT, conf.get(\"hadoop.tmp.dir\") + File.separator + STORAGE_DIR_ROOT);\r\n    rootPath = new Path(outputRoot);\r\n    entitiesPath = new Path(rootPath, ENTITIES_DIR);\r\n    fs = rootPath.getFileSystem(conf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getEntity",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "TimelineEntity getEntity(TimelineReaderContext context, TimelineDataToRetrieve dataToRetrieve) throws IOException\n{\r\n    String flowRunPathStr = getFlowRunPath(context.getUserId(), context.getClusterId(), context.getFlowName(), context.getFlowRunId(), context.getAppId());\r\n    Path clusterIdPath = new Path(entitiesPath, context.getClusterId());\r\n    Path flowRunPath = new Path(clusterIdPath, flowRunPathStr);\r\n    Path appIdPath = new Path(flowRunPath, context.getAppId());\r\n    Path entityTypePath = new Path(appIdPath, context.getEntityType());\r\n    Path entityFilePath = new Path(entityTypePath, context.getEntityId() + TIMELINE_SERVICE_STORAGE_EXTENSION);\r\n    try (BufferedReader reader = new BufferedReader(new InputStreamReader(fs.open(entityFilePath), Charset.forName(\"UTF-8\")))) {\r\n        TimelineEntity entity = readEntityFromFile(reader);\r\n        return createEntityToBeReturned(entity, dataToRetrieve.getFieldsToRetrieve());\r\n    } catch (FileNotFoundException e) {\r\n        LOG.info(\"Cannot find entity {id:\" + context.getEntityId() + \" , type:\" + context.getEntityType() + \"}. Will send HTTP 404 in response.\");\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Set<TimelineEntity> getEntities(TimelineReaderContext context, TimelineEntityFilters filters, TimelineDataToRetrieve dataToRetrieve) throws IOException\n{\r\n    String flowRunPathStr = getFlowRunPath(context.getUserId(), context.getClusterId(), context.getFlowName(), context.getFlowRunId(), context.getAppId());\r\n    Path clusterIdPath = new Path(entitiesPath, context.getClusterId());\r\n    Path flowRunPath = new Path(clusterIdPath, flowRunPathStr);\r\n    Path appIdPath = new Path(flowRunPath, context.getAppId());\r\n    Path entityTypePath = new Path(appIdPath, context.getEntityType());\r\n    return getEntities(entityTypePath, context.getEntityType(), filters, dataToRetrieve);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getEntityTypes",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Set<String> getEntityTypes(TimelineReaderContext context) throws IOException\n{\r\n    Set<String> result = new TreeSet<>();\r\n    String flowRunPathStr = getFlowRunPath(context.getUserId(), context.getClusterId(), context.getFlowName(), context.getFlowRunId(), context.getAppId());\r\n    if (context.getUserId() == null) {\r\n        context.setUserId(new Path(flowRunPathStr).getParent().getParent().getName());\r\n    }\r\n    Path clusterIdPath = new Path(entitiesPath, context.getClusterId());\r\n    Path flowRunPath = new Path(clusterIdPath, flowRunPathStr);\r\n    Path appIdPath = new Path(flowRunPath, context.getAppId());\r\n    FileStatus[] fileStatuses = fs.listStatus(appIdPath);\r\n    for (FileStatus fileStatus : fileStatuses) {\r\n        if (fileStatus.isDirectory()) {\r\n            result.add(fileStatus.getPath().getName());\r\n        }\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getHealthStatus",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineHealth getHealthStatus()\n{\r\n    try {\r\n        fs.exists(rootPath);\r\n    } catch (IOException e) {\r\n        return new TimelineHealth(TimelineHealth.TimelineHealthStatus.READER_CONNECTION_FAILURE, e.getMessage());\r\n    }\r\n    return new TimelineHealth(TimelineHealth.TimelineHealthStatus.RUNNING, \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((appId == null) ? 0 : appId.hashCode());\r\n    result = prime * result + ((clusterId == null) ? 0 : clusterId.hashCode());\r\n    result = prime * result + ((flowName == null) ? 0 : flowName.hashCode());\r\n    result = prime * result + ((flowRunId == null) ? 0 : flowRunId.hashCode());\r\n    result = prime * result + ((userId == null) ? 0 : userId.hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    TimelineContext other = (TimelineContext) obj;\r\n    if (appId == null) {\r\n        if (other.appId != null) {\r\n            return false;\r\n        }\r\n    } else if (!appId.equals(other.appId)) {\r\n        return false;\r\n    }\r\n    if (clusterId == null) {\r\n        if (other.clusterId != null) {\r\n            return false;\r\n        }\r\n    } else if (!clusterId.equals(other.clusterId)) {\r\n        return false;\r\n    }\r\n    if (flowName == null) {\r\n        if (other.flowName != null) {\r\n            return false;\r\n        }\r\n    } else if (!flowName.equals(other.flowName)) {\r\n        return false;\r\n    }\r\n    if (flowRunId == null) {\r\n        if (other.flowRunId != null) {\r\n            return false;\r\n        }\r\n    } else if (!flowRunId.equals(other.flowRunId)) {\r\n        return false;\r\n    }\r\n    if (userId == null) {\r\n        if (other.userId != null) {\r\n            return false;\r\n        }\r\n    } else if (!userId.equals(other.userId)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "getClusterId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getClusterId()\n{\r\n    return clusterId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "setClusterId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setClusterId(String cluster)\n{\r\n    this.clusterId = cluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "getUserId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUserId()\n{\r\n    return userId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "setUserId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUserId(String user)\n{\r\n    this.userId = user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "getFlowName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFlowName()\n{\r\n    return flowName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "setFlowName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setFlowName(String flow)\n{\r\n    this.flowName = TimelineUtils.shortenFlowName(flow, DEFAULT_CONF);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "getFlowRunId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getFlowRunId()\n{\r\n    return flowRunId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "setFlowRunId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFlowRunId(long runId)\n{\r\n    this.flowRunId = runId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppId()\n{\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice",
  "methodName" : "setAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAppId(String app)\n{\r\n    this.appId = app;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "split",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "List<String> split(final String str, final char delimiterChar, final char escapeChar) throws IllegalArgumentException\n{\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    int len = str.length();\r\n    if (len == 0) {\r\n        return Collections.emptyList();\r\n    }\r\n    List<String> list = new ArrayList<String>();\r\n    int offset = 0;\r\n    int startOffset = 0;\r\n    StringBuilder builder = new StringBuilder(len);\r\n    while (offset < len) {\r\n        if (str.charAt(offset) == escapeChar) {\r\n            if (offset + 1 >= len) {\r\n                throw new IllegalArgumentException(\"Escape char not properly escaped.\");\r\n            }\r\n            char nextChar = str.charAt(offset + 1);\r\n            if (nextChar != escapeChar && nextChar != delimiterChar) {\r\n                throw new IllegalArgumentException(\"Escape char or delimiter char not properly escaped.\");\r\n            }\r\n            if (startOffset < offset) {\r\n                builder.append(str.substring(startOffset, offset));\r\n            }\r\n            builder.append(nextChar);\r\n            offset += 2;\r\n            startOffset = offset;\r\n            continue;\r\n        } else if (str.charAt(offset) == delimiterChar) {\r\n            builder.append(str.substring(startOffset, offset));\r\n            list.add(builder.toString().trim());\r\n            startOffset = ++offset;\r\n            builder = new StringBuilder(len - offset);\r\n            continue;\r\n        }\r\n        offset++;\r\n    }\r\n    if (!str.isEmpty()) {\r\n        builder.append(str.substring(startOffset));\r\n    }\r\n    list.add(builder.toString().trim());\r\n    return list;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "escapeString",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String escapeString(final String str, final char delimiterChar, final char escapeChar)\n{\r\n    if (str == null) {\r\n        return null;\r\n    }\r\n    int len = str.length();\r\n    if (len == 0) {\r\n        return \"\";\r\n    }\r\n    StringBuilder builder = new StringBuilder();\r\n    int offset = 0;\r\n    int startOffset = 0;\r\n    while (offset < len) {\r\n        char charAtOffset = str.charAt(offset);\r\n        if (charAtOffset == escapeChar || charAtOffset == delimiterChar) {\r\n            if (startOffset < offset) {\r\n                builder.append(str.substring(startOffset, offset));\r\n            }\r\n            builder.append(escapeChar).append(charAtOffset);\r\n            startOffset = offset + 1;\r\n        }\r\n        offset++;\r\n    }\r\n    builder.append(str.substring(startOffset));\r\n    return builder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "joinAndEscapeStrings",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String joinAndEscapeStrings(final String[] strs, final char delimiterChar, final char escapeChar)\n{\r\n    int len = strs.length;\r\n    for (int index = 0; index < len; index++) {\r\n        if (strs[index] == null) {\r\n            return null;\r\n        }\r\n        strs[index] = escapeString(strs[index], delimiterChar, escapeChar);\r\n    }\r\n    return StringUtils.join(strs, delimiterChar);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "split",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> split(final String str) throws IllegalArgumentException\n{\r\n    return split(str, DEFAULT_DELIMITER_CHAR, DEFAULT_ESCAPE_CHAR);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "joinAndEscapeStrings",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String joinAndEscapeStrings(final String[] strs)\n{\r\n    return joinAndEscapeStrings(strs, DEFAULT_DELIMITER_CHAR, DEFAULT_ESCAPE_CHAR);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getCurrentUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UserGroupInformation getCurrentUser()\n{\r\n    return currentUser;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getAppUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppUser()\n{\r\n    return appUser;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "setDelegationTokenAndFutureForApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDelegationTokenAndFutureForApp(Token<TimelineDelegationTokenIdentifier> token, Future<?> appRenewalOrRegenerationFuture, long tknMaxDate, String renewer)\n{\r\n    this.delegationTokenForApp = token;\r\n    this.tokenMaxDate = tknMaxDate;\r\n    this.tokenRenewer = renewer;\r\n    this.renewalOrRegenerationFuture = appRenewalOrRegenerationFuture;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "setRenewalOrRegenerationFutureForApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRenewalOrRegenerationFutureForApp(Future<?> appRenewalOrRegenerationFuture)\n{\r\n    this.renewalOrRegenerationFuture = appRenewalOrRegenerationFuture;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "cancelRenewalOrRegenerationFutureForApp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cancelRenewalOrRegenerationFutureForApp()\n{\r\n    if (renewalOrRegenerationFuture != null && !renewalOrRegenerationFuture.isDone()) {\r\n        renewalOrRegenerationFuture.cancel(true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getAppDelegationTokenMaxDate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAppDelegationTokenMaxDate()\n{\r\n    return tokenMaxDate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getAppDelegationTokenRenewer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppDelegationTokenRenewer()\n{\r\n    return tokenRenewer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getDelegationTokenForApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Token<TimelineDelegationTokenIdentifier> getDelegationTokenForApp()\n{\r\n    return this.delegationTokenForApp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    context.setClusterId(conf.get(YarnConfiguration.RM_CLUSTER_ID, YarnConfiguration.DEFAULT_RM_CLUSTER_ID));\r\n    currentUser = UserGroupInformation.getCurrentUser();\r\n    context.setUserId(currentUser.getShortUserName());\r\n    context.setAppId(appId.toString());\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    cancelRenewalOrRegenerationFutureForApp();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getTimelineEntityContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineCollectorContext getTimelineEntityContext()\n{\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getFilterType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineFilterType getFilterType()\n{\r\n    return TimelineFilterType.PREFIX;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getPrefix",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPrefix()\n{\r\n    return prefix;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "getCompareOp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineCompareOp getCompareOp()\n{\r\n    return compareOp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return String.format(\"%s (%s %s)\", this.getClass().getSimpleName(), this.compareOp.name(), this.prefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((compareOp == null) ? 0 : compareOp.hashCode());\r\n    result = prime * result + ((prefix == null) ? 0 : prefix.hashCode());\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader\\filter",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    TimelinePrefixFilter other = (TimelinePrefixFilter) obj;\r\n    if (compareOp != other.compareOp) {\r\n        return false;\r\n    }\r\n    if (prefix == null) {\r\n        if (other.prefix != null) {\r\n            return false;\r\n        }\r\n    } else if (!prefix.equals(other.prefix)) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]