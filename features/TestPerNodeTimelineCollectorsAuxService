[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Shell.ExitCodeException\n{\r\n    if (auxService != null) {\r\n        auxService.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testAddApplication",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAddApplication() throws Exception\n{\r\n    auxService = createCollectorAndAddApplication();\r\n    assertTrue(auxService.hasApplication(appAttemptId.getApplicationId()));\r\n    auxService.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testAddApplicationNonAMContainer",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testAddApplicationNonAMContainer() throws Exception\n{\r\n    auxService = createCollector();\r\n    ContainerId containerId = getContainerId(2L);\r\n    ContainerInitializationContext context = mock(ContainerInitializationContext.class);\r\n    when(context.getContainerId()).thenReturn(containerId);\r\n    auxService.initializeContainer(context);\r\n    assertFalse(auxService.hasApplication(appAttemptId.getApplicationId()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testRemoveApplication",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testRemoveApplication() throws Exception\n{\r\n    auxService = createCollectorAndAddApplication();\r\n    assertTrue(auxService.hasApplication(appAttemptId.getApplicationId()));\r\n    ContainerId containerId = getAMContainerId();\r\n    ContainerTerminationContext context = mock(ContainerTerminationContext.class);\r\n    when(context.getContainerId()).thenReturn(containerId);\r\n    when(context.getContainerType()).thenReturn(ContainerType.APPLICATION_MASTER);\r\n    auxService.stopContainer(context);\r\n    assertFalse(auxService.hasApplication(appAttemptId.getApplicationId()));\r\n    auxService.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testRemoveApplicationNonAMContainer",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testRemoveApplicationNonAMContainer() throws Exception\n{\r\n    auxService = createCollectorAndAddApplication();\r\n    assertTrue(auxService.hasApplication(appAttemptId.getApplicationId()));\r\n    ContainerId containerId = getContainerId(2L);\r\n    ContainerTerminationContext context = mock(ContainerTerminationContext.class);\r\n    when(context.getContainerId()).thenReturn(containerId);\r\n    auxService.stopContainer(context);\r\n    assertTrue(auxService.hasApplication(appAttemptId.getApplicationId()));\r\n    auxService.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testLaunch",
  "errType" : [ "ExitUtil.ExitException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testLaunch() throws Exception\n{\r\n    ExitUtil.disableSystemExit();\r\n    try {\r\n        auxService = PerNodeTimelineCollectorsAuxService.launchServer(new String[0], createCollectorManager(), conf);\r\n    } catch (ExitUtil.ExitException e) {\r\n        assertEquals(0, e.status);\r\n        ExitUtil.resetFirstExitException();\r\n        fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "createCollectorAndAddApplication",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "PerNodeTimelineCollectorsAuxService createCollectorAndAddApplication()\n{\r\n    PerNodeTimelineCollectorsAuxService service = createCollector();\r\n    ContainerInitializationContext context = createContainerInitalizationContext(1);\r\n    service.initializeContainer(context);\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "createContainerInitalizationContext",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ContainerInitializationContext createContainerInitalizationContext(int attempt)\n{\r\n    appAttemptId = ApplicationAttemptId.newInstance(appId, attempt);\r\n    ContainerId containerId = getAMContainerId();\r\n    ContainerInitializationContext context = mock(ContainerInitializationContext.class);\r\n    when(context.getContainerId()).thenReturn(containerId);\r\n    when(context.getContainerType()).thenReturn(ContainerType.APPLICATION_MASTER);\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "createContainerTerminationContext",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ContainerTerminationContext createContainerTerminationContext(int attempt)\n{\r\n    appAttemptId = ApplicationAttemptId.newInstance(appId, attempt);\r\n    ContainerId containerId = getAMContainerId();\r\n    ContainerTerminationContext context = mock(ContainerTerminationContext.class);\r\n    when(context.getContainerId()).thenReturn(containerId);\r\n    when(context.getContainerType()).thenReturn(ContainerType.APPLICATION_MASTER);\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "createCollector",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "PerNodeTimelineCollectorsAuxService createCollector()\n{\r\n    NodeTimelineCollectorManager collectorManager = createCollectorManager();\r\n    PerNodeTimelineCollectorsAuxService service = spy(new PerNodeTimelineCollectorsAuxService(collectorManager) {\r\n\r\n        @Override\r\n        protected Future removeApplicationCollector(ContainerId containerId) {\r\n            Future future = super.removeApplicationCollector(containerId);\r\n            try {\r\n                future.get();\r\n            } catch (Exception e) {\r\n                Assert.fail(\"Expeption thrown while removing collector\");\r\n            }\r\n            return future;\r\n        }\r\n    });\r\n    service.init(conf);\r\n    service.start();\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "createCollectorManager",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "NodeTimelineCollectorManager createCollectorManager()\n{\r\n    NodeTimelineCollectorManager collectorManager = spy(new NodeTimelineCollectorManager());\r\n    doReturn(new Configuration()).when(collectorManager).getConfig();\r\n    CollectorNodemanagerProtocol nmCollectorService = mock(CollectorNodemanagerProtocol.class);\r\n    GetTimelineCollectorContextResponse response = GetTimelineCollectorContextResponse.newInstance(null, null, null, 0L);\r\n    try {\r\n        when(nmCollectorService.getTimelineCollectorContext(any(GetTimelineCollectorContextRequest.class))).thenReturn(response);\r\n    } catch (YarnException | IOException e) {\r\n        fail();\r\n    }\r\n    doReturn(nmCollectorService).when(collectorManager).getNMCollectorService();\r\n    return collectorManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getAMContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId getAMContainerId()\n{\r\n    return getContainerId(1L);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId getContainerId(long id)\n{\r\n    return ContainerId.newContainerId(appAttemptId, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testRemoveAppWhenSecondAttemptAMCotainerIsLaunchedSameNode",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testRemoveAppWhenSecondAttemptAMCotainerIsLaunchedSameNode() throws Exception\n{\r\n    auxService = createCollectorAndAddApplication();\r\n    assertTrue(auxService.hasApplication(appAttemptId.getApplicationId()));\r\n    ContainerInitializationContext containerInitalizationContext = createContainerInitalizationContext(2);\r\n    auxService.initializeContainer(containerInitalizationContext);\r\n    assertTrue(\"Applicatin not found in collectors.\", auxService.hasApplication(appAttemptId.getApplicationId()));\r\n    ContainerTerminationContext context = createContainerTerminationContext(1);\r\n    auxService.stopContainer(context);\r\n    assertTrue(\"collector has removed application though 2nd attempt\" + \" is running this node\", auxService.hasApplication(appAttemptId.getApplicationId()));\r\n    context = createContainerTerminationContext(2);\r\n    auxService.stopContainer(context);\r\n    assertFalse(\"Application is not removed from collector\", auxService.hasApplication(appAttemptId.getApplicationId()));\r\n    auxService.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testStartStopServer",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testStartStopServer() throws Exception\n{\r\n    @SuppressWarnings(\"resource\")\r\n    TimelineReaderServer server = new TimelineReaderServer();\r\n    Configuration config = new YarnConfiguration();\r\n    config.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    config.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n    config.set(YarnConfiguration.TIMELINE_SERVICE_READER_WEBAPP_ADDRESS, \"localhost:0\");\r\n    config.setClass(YarnConfiguration.TIMELINE_SERVICE_READER_CLASS, FileSystemTimelineReaderImpl.class, TimelineReader.class);\r\n    try {\r\n        server.init(config);\r\n        assertEquals(STATE.INITED, server.getServiceState());\r\n        assertEquals(2, server.getServices().size());\r\n        server.start();\r\n        assertEquals(STATE.STARTED, server.getServiceState());\r\n        server.stop();\r\n        assertEquals(STATE.STOPPED, server.getServiceState());\r\n    } finally {\r\n        server.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testTimelineReaderServerWithInvalidTimelineReader",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testTimelineReaderServerWithInvalidTimelineReader()\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_READER_WEBAPP_ADDRESS, \"localhost:0\");\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_READER_CLASS, Object.class.getName());\r\n    runTimelineReaderServerWithConfig(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testTimelineReaderServerWithNonexistentTimelineReader",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testTimelineReaderServerWithNonexistentTimelineReader()\n{\r\n    String nonexistentTimelineReaderClass = \"org.apache.org.yarn.server.\" + \"timelineservice.storage.XXXXXXXX\";\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_READER_WEBAPP_ADDRESS, \"localhost:0\");\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_READER_CLASS, nonexistentTimelineReaderClass);\r\n    runTimelineReaderServerWithConfig(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "runTimelineReaderServerWithConfig",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void runTimelineReaderServerWithConfig(final Configuration conf)\n{\r\n    TimelineReaderServer server = new TimelineReaderServer();\r\n    try {\r\n        server.init(conf);\r\n        server.start();\r\n    } finally {\r\n        server.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    initializeDataDirectory(ROOT_DIR);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "initializeDataDirectory",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initializeDataDirectory(String rootDir) throws Exception\n{\r\n    loadEntityData(rootDir);\r\n    CSVFormat format = CSVFormat.DEFAULT.withHeader(\"APP\", \"USER\", \"FLOW\", \"FLOWRUN\");\r\n    String appFlowMappingFile = rootDir + File.separator + \"entities\" + File.separator + \"cluster1\" + File.separator + FileSystemTimelineReaderImpl.APP_FLOW_MAPPING_FILE;\r\n    try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(appFlowMappingFile, true)));\r\n        CSVPrinter printer = new CSVPrinter(out, format)) {\r\n        printer.printRecord(\"app1\", \"user1\", \"flow1\", 1);\r\n        printer.printRecord(\"app2\", \"user1\", \"flow1,flow\", 1);\r\n        printer.close();\r\n    }\r\n    (new File(rootDir)).deleteOnExit();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    FileUtils.deleteDirectory(new File(ROOT_DIR));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void init() throws Exception\n{\r\n    reader = new FileSystemTimelineReaderImpl();\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.set(FileSystemTimelineReaderImpl.TIMELINE_SERVICE_STORAGE_DIR_ROOT, ROOT_DIR);\r\n    reader.init(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "writeEntityFile",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void writeEntityFile(TimelineEntity entity, File dir) throws Exception\n{\r\n    if (!dir.exists()) {\r\n        if (!dir.mkdirs()) {\r\n            throw new IOException(\"Could not create directories for \" + dir);\r\n        }\r\n    }\r\n    String fileName = dir.getAbsolutePath() + File.separator + entity.getId() + \".thist\";\r\n    try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(fileName, true)))) {\r\n        out.println(TimelineUtils.dumpTimelineRecordtoJSON(entity));\r\n        out.write(\"\\n\");\r\n        out.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "loadEntityData",
  "errType" : null,
  "containingMethodsNum" : 133,
  "sourceCodeText" : "void loadEntityData(String rootDir) throws Exception\n{\r\n    File appDir = getAppDir(rootDir, \"cluster1\", \"user1\", \"flow1\", \"1\", \"app1\", \"app\");\r\n    TimelineEntity entity11 = new TimelineEntity();\r\n    entity11.setId(\"id_1\");\r\n    entity11.setType(\"app\");\r\n    entity11.setCreatedTime(1425016502000L);\r\n    Map<String, Object> info1 = new HashMap<String, Object>();\r\n    info1.put(\"info1\", \"val1\");\r\n    info1.put(\"info2\", \"val5\");\r\n    entity11.addInfo(info1);\r\n    TimelineEvent event = new TimelineEvent();\r\n    event.setId(\"event_1\");\r\n    event.setTimestamp(1425016502003L);\r\n    entity11.addEvent(event);\r\n    Set<TimelineMetric> metrics = new HashSet<TimelineMetric>();\r\n    TimelineMetric metric1 = new TimelineMetric();\r\n    metric1.setId(\"metric1\");\r\n    metric1.setType(TimelineMetric.Type.SINGLE_VALUE);\r\n    metric1.addValue(1425016502006L, 113);\r\n    metrics.add(metric1);\r\n    TimelineMetric metric2 = new TimelineMetric();\r\n    metric2.setId(\"metric2\");\r\n    metric2.setType(TimelineMetric.Type.TIME_SERIES);\r\n    metric2.addValue(1425016502016L, 34);\r\n    metrics.add(metric2);\r\n    entity11.setMetrics(metrics);\r\n    Map<String, String> configs = new HashMap<String, String>();\r\n    configs.put(\"config_1\", \"127\");\r\n    entity11.setConfigs(configs);\r\n    entity11.addRelatesToEntity(\"flow\", \"flow1\");\r\n    entity11.addIsRelatedToEntity(\"type1\", \"tid1_1\");\r\n    writeEntityFile(entity11, appDir);\r\n    TimelineEntity entity12 = new TimelineEntity();\r\n    entity12.setId(\"id_1\");\r\n    entity12.setType(\"app\");\r\n    configs.clear();\r\n    configs.put(\"config_2\", \"23\");\r\n    configs.put(\"config_3\", \"abc\");\r\n    entity12.addConfigs(configs);\r\n    metrics.clear();\r\n    TimelineMetric metric12 = new TimelineMetric();\r\n    metric12.setId(\"metric2\");\r\n    metric12.setType(TimelineMetric.Type.TIME_SERIES);\r\n    metric12.addValue(1425016502032L, 48);\r\n    metric12.addValue(1425016502054L, 51);\r\n    metrics.add(metric12);\r\n    TimelineMetric metric3 = new TimelineMetric();\r\n    metric3.setId(\"metric3\");\r\n    metric3.setType(TimelineMetric.Type.SINGLE_VALUE);\r\n    metric3.addValue(1425016502060L, 23L);\r\n    metrics.add(metric3);\r\n    entity12.setMetrics(metrics);\r\n    entity12.addIsRelatedToEntity(\"type1\", \"tid1_2\");\r\n    entity12.addIsRelatedToEntity(\"type2\", \"tid2_1`\");\r\n    TimelineEvent event15 = new TimelineEvent();\r\n    event15.setId(\"event_5\");\r\n    event15.setTimestamp(1425016502017L);\r\n    entity12.addEvent(event15);\r\n    writeEntityFile(entity12, appDir);\r\n    TimelineEntity entity2 = new TimelineEntity();\r\n    entity2.setId(\"id_2\");\r\n    entity2.setType(\"app\");\r\n    entity2.setCreatedTime(1425016501050L);\r\n    Map<String, Object> info2 = new HashMap<String, Object>();\r\n    info1.put(\"info2\", 4);\r\n    entity2.addInfo(info2);\r\n    Map<String, String> configs2 = new HashMap<String, String>();\r\n    configs2.put(\"config_1\", \"129\");\r\n    configs2.put(\"config_3\", \"def\");\r\n    entity2.setConfigs(configs2);\r\n    TimelineEvent event2 = new TimelineEvent();\r\n    event2.setId(\"event_2\");\r\n    event2.setTimestamp(1425016501003L);\r\n    entity2.addEvent(event2);\r\n    Set<TimelineMetric> metrics2 = new HashSet<TimelineMetric>();\r\n    TimelineMetric metric21 = new TimelineMetric();\r\n    metric21.setId(\"metric1\");\r\n    metric21.setType(TimelineMetric.Type.SINGLE_VALUE);\r\n    metric21.addValue(1425016501006L, 300);\r\n    metrics2.add(metric21);\r\n    TimelineMetric metric22 = new TimelineMetric();\r\n    metric22.setId(\"metric2\");\r\n    metric22.setType(TimelineMetric.Type.TIME_SERIES);\r\n    metric22.addValue(1425016501056L, 31);\r\n    metric22.addValue(1425016501084L, 70);\r\n    metrics2.add(metric22);\r\n    TimelineMetric metric23 = new TimelineMetric();\r\n    metric23.setId(\"metric3\");\r\n    metric23.setType(TimelineMetric.Type.SINGLE_VALUE);\r\n    metric23.addValue(1425016502060L, 23L);\r\n    metrics2.add(metric23);\r\n    entity2.setMetrics(metrics2);\r\n    entity2.addRelatesToEntity(\"flow\", \"flow2\");\r\n    writeEntityFile(entity2, appDir);\r\n    TimelineEntity entity3 = new TimelineEntity();\r\n    entity3.setId(\"id_3\");\r\n    entity3.setType(\"app\");\r\n    entity3.setCreatedTime(1425016501050L);\r\n    Map<String, Object> info3 = new HashMap<String, Object>();\r\n    info3.put(\"info2\", 3.5);\r\n    info3.put(\"info4\", 20);\r\n    entity3.addInfo(info3);\r\n    Map<String, String> configs3 = new HashMap<String, String>();\r\n    configs3.put(\"config_1\", \"123\");\r\n    configs3.put(\"config_3\", \"abc\");\r\n    entity3.setConfigs(configs3);\r\n    TimelineEvent event3 = new TimelineEvent();\r\n    event3.setId(\"event_2\");\r\n    event3.setTimestamp(1425016501003L);\r\n    entity3.addEvent(event3);\r\n    TimelineEvent event4 = new TimelineEvent();\r\n    event4.setId(\"event_4\");\r\n    event4.setTimestamp(1425016502006L);\r\n    entity3.addEvent(event4);\r\n    Set<TimelineMetric> metrics3 = new HashSet<TimelineMetric>();\r\n    TimelineMetric metric31 = new TimelineMetric();\r\n    metric31.setId(\"metric1\");\r\n    metric31.setType(TimelineMetric.Type.SINGLE_VALUE);\r\n    metric31.addValue(1425016501006L, 124);\r\n    metrics3.add(metric31);\r\n    TimelineMetric metric32 = new TimelineMetric();\r\n    metric32.setId(\"metric2\");\r\n    metric32.setType(TimelineMetric.Type.TIME_SERIES);\r\n    metric32.addValue(1425016501056L, 31);\r\n    metric32.addValue(1425016501084L, 74);\r\n    metrics3.add(metric32);\r\n    entity3.setMetrics(metrics3);\r\n    entity3.addIsRelatedToEntity(\"type1\", \"tid1_2\");\r\n    writeEntityFile(entity3, appDir);\r\n    TimelineEntity entity4 = new TimelineEntity();\r\n    entity4.setId(\"id_4\");\r\n    entity4.setType(\"app\");\r\n    entity4.setCreatedTime(1425016502050L);\r\n    TimelineEvent event44 = new TimelineEvent();\r\n    event44.setId(\"event_4\");\r\n    event44.setTimestamp(1425016502003L);\r\n    entity4.addEvent(event44);\r\n    writeEntityFile(entity4, appDir);\r\n    File attemptDir = getAppDir(rootDir, \"cluster1\", \"user1\", \"flow1\", \"1\", \"app1\", TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString());\r\n    ApplicationAttemptEntity attempt1 = new ApplicationAttemptEntity();\r\n    attempt1.setId(\"app-attempt-1\");\r\n    attempt1.setCreatedTime(1425017502003L);\r\n    writeEntityFile(attempt1, attemptDir);\r\n    ApplicationAttemptEntity attempt2 = new ApplicationAttemptEntity();\r\n    attempt2.setId(\"app-attempt-2\");\r\n    attempt2.setCreatedTime(1425017502004L);\r\n    writeEntityFile(attempt2, attemptDir);\r\n    File entityDir = getAppDir(rootDir, \"cluster1\", \"user1\", \"flow1\", \"1\", \"app1\", TimelineEntityType.YARN_CONTAINER.toString());\r\n    ContainerEntity containerEntity1 = new ContainerEntity();\r\n    containerEntity1.setId(\"container_1_1\");\r\n    containerEntity1.setParent(attempt1.getIdentifier());\r\n    containerEntity1.setCreatedTime(1425017502003L);\r\n    writeEntityFile(containerEntity1, entityDir);\r\n    ContainerEntity containerEntity2 = new ContainerEntity();\r\n    containerEntity2.setId(\"container_2_1\");\r\n    containerEntity2.setParent(attempt2.getIdentifier());\r\n    containerEntity2.setCreatedTime(1425018502003L);\r\n    writeEntityFile(containerEntity2, entityDir);\r\n    ContainerEntity containerEntity3 = new ContainerEntity();\r\n    containerEntity3.setId(\"container_2_2\");\r\n    containerEntity3.setParent(attempt2.getIdentifier());\r\n    containerEntity3.setCreatedTime(1425018502003L);\r\n    writeEntityFile(containerEntity3, entityDir);\r\n    File appDir2 = getAppDir(rootDir, \"cluster1\", \"user1\", \"flow1,flow\", \"1\", \"app2\", \"app\");\r\n    TimelineEntity entity5 = new TimelineEntity();\r\n    entity5.setId(\"id_5\");\r\n    entity5.setType(\"app\");\r\n    entity5.setCreatedTime(1425016502050L);\r\n    writeEntityFile(entity5, appDir2);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "getAppDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "File getAppDir(String rootDir, String cluster, String user, String flowName, String flowRunId, String appId, String entityName)\n{\r\n    return new File(rootDir + File.separator + \"entities\" + File.separator + cluster + File.separator + user + File.separator + flowName + File.separator + flowRunId + File.separator + appId + File.separator + entityName + File.separator);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testGetEntityDefaultView",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetEntityDefaultView() throws Exception\n{\r\n    TimelineEntity result = reader.getEntity(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", \"id_1\"), new TimelineDataToRetrieve(null, null, null, null, null, null));\r\n    Assert.assertEquals((new TimelineEntity.Identifier(\"app\", \"id_1\")).toString(), result.getIdentifier().toString());\r\n    Assert.assertEquals((Long) 1425016502000L, result.getCreatedTime());\r\n    Assert.assertEquals(0, result.getConfigs().size());\r\n    Assert.assertEquals(0, result.getMetrics().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testGetEntityByClusterAndApp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetEntityByClusterAndApp() throws Exception\n{\r\n    TimelineEntity result = reader.getEntity(new TimelineReaderContext(\"cluster1\", null, null, null, \"app1\", \"app\", \"id_1\"), new TimelineDataToRetrieve(null, null, null, null, null, null));\r\n    Assert.assertEquals((new TimelineEntity.Identifier(\"app\", \"id_1\")).toString(), result.getIdentifier().toString());\r\n    Assert.assertEquals((Long) 1425016502000L, result.getCreatedTime());\r\n    Assert.assertEquals(0, result.getConfigs().size());\r\n    Assert.assertEquals(0, result.getMetrics().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testAppFlowMappingCsv",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAppFlowMappingCsv() throws Exception\n{\r\n    TimelineEntity result = reader.getEntity(new TimelineReaderContext(\"cluster1\", null, null, null, \"app2\", \"app\", \"id_5\"), new TimelineDataToRetrieve(null, null, null, null, null, null));\r\n    Assert.assertEquals((new TimelineEntity.Identifier(\"app\", \"id_5\")).toString(), result.getIdentifier().toString());\r\n    Assert.assertEquals((Long) 1425016502050L, result.getCreatedTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testGetEntityCustomFields",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetEntityCustomFields() throws Exception\n{\r\n    TimelineEntity result = reader.getEntity(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", \"id_1\"), new TimelineDataToRetrieve(null, null, EnumSet.of(Field.INFO, Field.CONFIGS, Field.METRICS), null, null, null));\r\n    Assert.assertEquals((new TimelineEntity.Identifier(\"app\", \"id_1\")).toString(), result.getIdentifier().toString());\r\n    Assert.assertEquals((Long) 1425016502000L, result.getCreatedTime());\r\n    Assert.assertEquals(3, result.getConfigs().size());\r\n    Assert.assertEquals(3, result.getMetrics().size());\r\n    Assert.assertEquals(2, result.getInfo().size());\r\n    Assert.assertEquals(0, result.getEvents().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testGetEntityAllFields",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testGetEntityAllFields() throws Exception\n{\r\n    TimelineEntity result = reader.getEntity(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", \"id_1\"), new TimelineDataToRetrieve(null, null, EnumSet.of(Field.ALL), null, null, null));\r\n    Assert.assertEquals((new TimelineEntity.Identifier(\"app\", \"id_1\")).toString(), result.getIdentifier().toString());\r\n    Assert.assertEquals((Long) 1425016502000L, result.getCreatedTime());\r\n    Assert.assertEquals(3, result.getConfigs().size());\r\n    Assert.assertEquals(3, result.getMetrics().size());\r\n    Assert.assertEquals(2, result.getEvents().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testGetAllEntities",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetAllEntities() throws Exception\n{\r\n    Set<TimelineEntity> result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().build(), new TimelineDataToRetrieve(null, null, EnumSet.of(Field.ALL), null, null, null));\r\n    Assert.assertEquals(4, result.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testGetEntitiesWithLimit",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetEntitiesWithLimit() throws Exception\n{\r\n    Set<TimelineEntity> result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().entityLimit(2L).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(2, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_1\") && !entity.getId().equals(\"id_4\")) {\r\n            Assert.fail(\"Entity not sorted by created time\");\r\n        }\r\n    }\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().entityLimit(3L).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(3, result.size());\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testGetEntitiesByTimeWindows",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testGetEntitiesByTimeWindows() throws Exception\n{\r\n    Set<TimelineEntity> result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().createdTimeBegin(1425016502030L).createTimeEnd(1425016502060L).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(1, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_4\")) {\r\n            Assert.fail(\"Incorrect filtering based on created time range\");\r\n        }\r\n    }\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().createTimeEnd(1425016502010L).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(3, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (entity.getId().equals(\"id_4\")) {\r\n            Assert.fail(\"Incorrect filtering based on created time range\");\r\n        }\r\n    }\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().createdTimeBegin(1425016502010L).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(1, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_4\")) {\r\n            Assert.fail(\"Incorrect filtering based on created time range\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testGetFilteredEntities",
  "errType" : null,
  "containingMethodsNum" : 107,
  "sourceCodeText" : "void testGetFilteredEntities() throws Exception\n{\r\n    TimelineFilterList infoFilterList = new TimelineFilterList();\r\n    infoFilterList.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"info2\", 3.5));\r\n    Set<TimelineEntity> result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().infoFilters(infoFilterList).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(1, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_3\")) {\r\n            Assert.fail(\"Incorrect filtering based on info filters\");\r\n        }\r\n    }\r\n    TimelineFilterList confFilterList = new TimelineFilterList();\r\n    confFilterList.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"config_1\", \"123\"));\r\n    confFilterList.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"config_3\", \"abc\"));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().configFilters(confFilterList).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(1, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_3\")) {\r\n            Assert.fail(\"Incorrect filtering based on config filters\");\r\n        }\r\n    }\r\n    TimelineFilterList eventFilters = new TimelineFilterList();\r\n    eventFilters.addFilter(new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"event_2\"));\r\n    eventFilters.addFilter(new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"event_4\"));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().eventFilters(eventFilters).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(1, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_3\")) {\r\n            Assert.fail(\"Incorrect filtering based on event filters\");\r\n        }\r\n    }\r\n    TimelineFilterList metricFilterList = new TimelineFilterList();\r\n    metricFilterList.addFilter(new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL, \"metric3\", 0L));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().metricFilters(metricFilterList).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(2, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_1\") && !entity.getId().equals(\"id_2\")) {\r\n            Assert.fail(\"Incorrect filtering based on metric filters\");\r\n        }\r\n    }\r\n    TimelineFilterList list1 = new TimelineFilterList();\r\n    list1.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"config_1\", \"129\"));\r\n    list1.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"config_3\", \"def\"));\r\n    TimelineFilterList list2 = new TimelineFilterList();\r\n    list2.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"config_2\", \"23\"));\r\n    list2.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"config_3\", \"abc\"));\r\n    TimelineFilterList confFilterList1 = new TimelineFilterList(Operator.OR, list1, list2);\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().configFilters(confFilterList1).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(2, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_1\") && !entity.getId().equals(\"id_2\")) {\r\n            Assert.fail(\"Incorrect filtering based on config filters\");\r\n        }\r\n    }\r\n    TimelineFilterList list3 = new TimelineFilterList();\r\n    list3.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"config_1\", \"123\"));\r\n    list3.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"config_3\", \"abc\"));\r\n    TimelineFilterList list4 = new TimelineFilterList();\r\n    list4.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"config_2\", \"23\"));\r\n    TimelineFilterList confFilterList2 = new TimelineFilterList(Operator.OR, list3, list4);\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().configFilters(confFilterList2).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(2, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_1\") && !entity.getId().equals(\"id_2\")) {\r\n            Assert.fail(\"Incorrect filtering based on config filters\");\r\n        }\r\n    }\r\n    TimelineFilterList confFilterList3 = new TimelineFilterList();\r\n    confFilterList3.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"config_1\", \"127\"));\r\n    confFilterList3.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"config_3\", \"abc\"));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().configFilters(confFilterList3).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(1, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_2\")) {\r\n            Assert.fail(\"Incorrect filtering based on config filters\");\r\n        }\r\n    }\r\n    TimelineFilterList confFilterList4 = new TimelineFilterList();\r\n    confFilterList4.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"config_dummy\", \"dummy\"));\r\n    confFilterList4.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"config_3\", \"def\"));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().configFilters(confFilterList4).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(0, result.size());\r\n    TimelineFilterList confFilterList5 = new TimelineFilterList(Operator.OR);\r\n    confFilterList5.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"config_dummy\", \"dummy\"));\r\n    confFilterList5.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"config_3\", \"def\"));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().configFilters(confFilterList5).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(1, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_2\")) {\r\n            Assert.fail(\"Incorrect filtering based on config filters\");\r\n        }\r\n    }\r\n    TimelineFilterList list6 = new TimelineFilterList();\r\n    list6.addFilter(new TimelineCompareFilter(TimelineCompareOp.GREATER_THAN, \"metric1\", 200));\r\n    list6.addFilter(new TimelineCompareFilter(TimelineCompareOp.EQUAL, \"metric3\", 23));\r\n    TimelineFilterList list7 = new TimelineFilterList();\r\n    list7.addFilter(new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL, \"metric2\", 74));\r\n    TimelineFilterList metricFilterList1 = new TimelineFilterList(Operator.OR, list6, list7);\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().metricFilters(metricFilterList1).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(2, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_2\") && !entity.getId().equals(\"id_3\")) {\r\n            Assert.fail(\"Incorrect filtering based on metric filters\");\r\n        }\r\n    }\r\n    TimelineFilterList metricFilterList2 = new TimelineFilterList();\r\n    metricFilterList2.addFilter(new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"metric2\", 70));\r\n    metricFilterList2.addFilter(new TimelineCompareFilter(TimelineCompareOp.LESS_OR_EQUAL, \"metric3\", 23));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().metricFilters(metricFilterList2).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(1, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_1\")) {\r\n            Assert.fail(\"Incorrect filtering based on metric filters\");\r\n        }\r\n    }\r\n    TimelineFilterList metricFilterList3 = new TimelineFilterList();\r\n    metricFilterList3.addFilter(new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"dummy_metric\", 30));\r\n    metricFilterList3.addFilter(new TimelineCompareFilter(TimelineCompareOp.LESS_OR_EQUAL, \"metric3\", 23));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().metricFilters(metricFilterList3).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(0, result.size());\r\n    TimelineFilterList metricFilterList4 = new TimelineFilterList(Operator.OR);\r\n    metricFilterList4.addFilter(new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"dummy_metric\", 30));\r\n    metricFilterList4.addFilter(new TimelineCompareFilter(TimelineCompareOp.LESS_OR_EQUAL, \"metric3\", 23));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().metricFilters(metricFilterList4).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(2, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_1\") && !entity.getId().equals(\"id_2\")) {\r\n            Assert.fail(\"Incorrect filtering based on metric filters\");\r\n        }\r\n    }\r\n    TimelineFilterList metricFilterList5 = new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL, \"metric2\", 74));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().metricFilters(metricFilterList5).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(2, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_1\") && !entity.getId().equals(\"id_2\")) {\r\n            Assert.fail(\"Incorrect filtering based on metric filters\");\r\n        }\r\n    }\r\n    TimelineFilterList infoFilterList1 = new TimelineFilterList();\r\n    infoFilterList1.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"info2\", 3.5));\r\n    infoFilterList1.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"info4\", 20));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().infoFilters(infoFilterList1).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(0, result.size());\r\n    TimelineFilterList infoFilterList2 = new TimelineFilterList(Operator.OR);\r\n    infoFilterList2.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"info2\", 3.5));\r\n    infoFilterList2.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"info1\", \"val1\"));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().infoFilters(infoFilterList2).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(2, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_1\") && !entity.getId().equals(\"id_3\")) {\r\n            Assert.fail(\"Incorrect filtering based on info filters\");\r\n        }\r\n    }\r\n    TimelineFilterList infoFilterList3 = new TimelineFilterList();\r\n    infoFilterList3.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"dummy_info\", 1));\r\n    infoFilterList3.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"info2\", \"val5\"));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().infoFilters(infoFilterList3).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(0, result.size());\r\n    TimelineFilterList infoFilterList4 = new TimelineFilterList(Operator.OR);\r\n    infoFilterList4.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"dummy_info\", 1));\r\n    infoFilterList4.addFilter(new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"info2\", \"val5\"));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().infoFilters(infoFilterList4).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(1, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_1\")) {\r\n            Assert.fail(\"Incorrect filtering based on info filters\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testGetEntitiesByRelations",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testGetEntitiesByRelations() throws Exception\n{\r\n    TimelineFilterList relatesTo = new TimelineFilterList(Operator.OR);\r\n    Set<Object> relatesToIds = new HashSet<Object>(Arrays.asList((Object) \"flow1\"));\r\n    relatesTo.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"flow\", relatesToIds));\r\n    Set<TimelineEntity> result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().relatesTo(relatesTo).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(1, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_1\")) {\r\n            Assert.fail(\"Incorrect filtering based on relatesTo\");\r\n        }\r\n    }\r\n    TimelineFilterList isRelatedTo = new TimelineFilterList(Operator.OR);\r\n    Set<Object> isRelatedToIds = new HashSet<Object>(Arrays.asList((Object) \"tid1_2\"));\r\n    isRelatedTo.addFilter(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type1\", isRelatedToIds));\r\n    result = reader.getEntities(new TimelineReaderContext(\"cluster1\", \"user1\", \"flow1\", 1L, \"app1\", \"app\", null), new TimelineEntityFilters.Builder().isRelatedTo(isRelatedTo).build(), new TimelineDataToRetrieve());\r\n    Assert.assertEquals(2, result.size());\r\n    for (TimelineEntity entity : result) {\r\n        if (!entity.getId().equals(\"id_1\") && !entity.getId().equals(\"id_3\")) {\r\n            Assert.fail(\"Incorrect filtering based on isRelatedTo\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testTimelineCollectorManagerWithInvalidTimelineWriter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testTimelineCollectorManagerWithInvalidTimelineWriter()\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS, Object.class.getName());\r\n    runTimelineCollectorManagerWithConfig(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testTimelineCollectorManagerWithNonexistentTimelineWriter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testTimelineCollectorManagerWithNonexistentTimelineWriter()\n{\r\n    String nonexistentTimelineWriterClass = \"org.apache.org.yarn.server.\" + \"timelineservice.storage.XXXXXXXX\";\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS, nonexistentTimelineWriterClass);\r\n    runTimelineCollectorManagerWithConfig(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testTimelineCollectorManagerWithFileSystemWriter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testTimelineCollectorManagerWithFileSystemWriter()\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setClass(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS, FileSystemTimelineWriterImpl.class, TimelineWriter.class);\r\n    runTimelineCollectorManagerWithConfig(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "runTimelineCollectorManagerWithConfig",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void runTimelineCollectorManagerWithConfig(final Configuration conf)\n{\r\n    TimelineCollectorManager collectorManager = new TimelineCollectorManager(\"testTimelineCollectorManager\");\r\n    try {\r\n        collectorManager.init(conf);\r\n        collectorManager.start();\r\n    } finally {\r\n        collectorManager.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    TestFileSystemTimelineReaderImpl.initializeDataDirectory(ROOT_DIR);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    FileUtils.deleteDirectory(new File(ROOT_DIR));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "init",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void init() throws Exception\n{\r\n    try {\r\n        Configuration config = new YarnConfiguration();\r\n        config.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n        config.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n        config.set(YarnConfiguration.TIMELINE_SERVICE_READER_WEBAPP_ADDRESS, \"localhost:0\");\r\n        config.set(YarnConfiguration.RM_CLUSTER_ID, \"cluster1\");\r\n        config.setClass(YarnConfiguration.TIMELINE_SERVICE_READER_CLASS, FileSystemTimelineReaderImpl.class, TimelineReader.class);\r\n        config.set(FileSystemTimelineReaderImpl.TIMELINE_SERVICE_STORAGE_DIR_ROOT, ROOT_DIR);\r\n        server = new TimelineReaderServer();\r\n        server.init(config);\r\n        server.start();\r\n        serverPort = server.getWebServerPort();\r\n    } catch (Exception e) {\r\n        Assert.fail(\"Web server failed to start\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stop() throws Exception\n{\r\n    if (server != null) {\r\n        server.stop();\r\n        server = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "newEntity",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity newEntity(String type, String id)\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setIdentifier(new TimelineEntity.Identifier(type, id));\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "verifyHttpResponse",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyHttpResponse(Client client, URI uri, Status expectedStatus)\n{\r\n    ClientResponse resp = client.resource(uri).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertNotNull(resp);\r\n    assertEquals(resp.getStatusInfo().getStatusCode(), expectedStatus.getStatusCode());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Client createClient()\n{\r\n    ClientConfig cfg = new DefaultClientConfig();\r\n    cfg.getClasses().add(YarnJacksonJaxbJsonProvider.class);\r\n    return new Client(new URLConnectionClientHandler(new DummyURLConnectionFactory()), cfg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "getResponse",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ClientResponse getResponse(Client client, URI uri) throws Exception\n{\r\n    ClientResponse resp = client.resource(uri).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    if (resp == null || resp.getStatusInfo().getStatusCode() != ClientResponse.Status.OK.getStatusCode()) {\r\n        String msg = new String();\r\n        if (resp != null) {\r\n            msg = String.valueOf(resp.getStatusInfo().getStatusCode());\r\n        }\r\n        throw new IOException(\"Incorrect response from timeline reader. \" + \"Status=\" + msg);\r\n    }\r\n    return resp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testAbout",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAbout() throws Exception\n{\r\n    URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/timeline/\");\r\n    Client client = createClient();\r\n    try {\r\n        ClientResponse resp = getResponse(client, uri);\r\n        TimelineAbout about = resp.getEntity(TimelineAbout.class);\r\n        Assert.assertNotNull(about);\r\n        Assert.assertEquals(\"Timeline Reader API\", about.getAbout());\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntityDefaultView",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testGetEntityDefaultView() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app/id_1\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        TimelineEntity entity = resp.getEntity(TimelineEntity.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entity);\r\n        assertEquals(\"id_1\", entity.getId());\r\n        assertEquals(\"app\", entity.getType());\r\n        assertEquals((Long) 1425016502000L, entity.getCreatedTime());\r\n        assertEquals(0, entity.getConfigs().size());\r\n        assertEquals(0, entity.getMetrics().size());\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntityWithUserAndFlowInfo",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testGetEntityWithUserAndFlowInfo() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app/id_1?\" + \"userid=user1&flowname=flow1&flowrunid=1\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        TimelineEntity entity = resp.getEntity(TimelineEntity.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entity);\r\n        assertEquals(\"id_1\", entity.getId());\r\n        assertEquals(\"app\", entity.getType());\r\n        assertEquals((Long) 1425016502000L, entity.getCreatedTime());\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntityCustomFields",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testGetEntityCustomFields() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app/id_1?\" + \"fields=CONFIGS,Metrics,info\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        TimelineEntity entity = resp.getEntity(TimelineEntity.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entity);\r\n        assertEquals(\"id_1\", entity.getId());\r\n        assertEquals(\"app\", entity.getType());\r\n        assertEquals(3, entity.getConfigs().size());\r\n        assertEquals(3, entity.getMetrics().size());\r\n        assertTrue(\"UID should be present\", entity.getInfo().containsKey(TimelineReaderUtils.UID_KEY));\r\n        assertEquals(3, entity.getInfo().size());\r\n        assertEquals(0, entity.getEvents().size());\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntityAllFields",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testGetEntityAllFields() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app/id_1?\" + \"fields=ALL\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        TimelineEntity entity = resp.getEntity(TimelineEntity.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entity);\r\n        assertEquals(\"id_1\", entity.getId());\r\n        assertEquals(\"app\", entity.getType());\r\n        assertEquals(3, entity.getConfigs().size());\r\n        assertEquals(3, entity.getMetrics().size());\r\n        assertTrue(\"UID should be present\", entity.getInfo().containsKey(TimelineReaderUtils.UID_KEY));\r\n        assertEquals(3, entity.getInfo().size());\r\n        assertEquals(2, entity.getEvents().size());\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntityNotPresent",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetEntityNotPresent() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app/id_10\");\r\n        verifyHttpResponse(client, uri, Status.NOT_FOUND);\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testQueryWithoutCluster",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testQueryWithoutCluster() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/apps/app1/entities/app/id_1\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        TimelineEntity entity = resp.getEntity(TimelineEntity.class);\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entity);\r\n        assertEquals(\"id_1\", entity.getId());\r\n        assertEquals(\"app\", entity.getType());\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/apps/app1/entities/app\");\r\n        resp = getResponse(client, uri);\r\n        Set<TimelineEntity> entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(4, entities.size());\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntities",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetEntities() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        Set<TimelineEntity> entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(4, entities.size());\r\n        assertTrue(\"Entities id_1, id_2, id_3 and id_4 should have been\" + \" present in response\", entities.contains(newEntity(\"app\", \"id_1\")) && entities.contains(newEntity(\"app\", \"id_2\")) && entities.contains(newEntity(\"app\", \"id_3\")) && entities.contains(newEntity(\"app\", \"id_4\")));\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntitiesWithLimit",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testGetEntitiesWithLimit() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app?limit=2\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        Set<TimelineEntity> entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(2, entities.size());\r\n        assertTrue(\"Entities with id_1 and id_4 should have been present \" + \"in response based on entity created time.\", entities.contains(newEntity(\"app\", \"id_1\")) && entities.contains(newEntity(\"app\", \"id_4\")));\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/timeline/\" + \"clusters/cluster1/apps/app1/entities/app?limit=3\");\r\n        resp = getResponse(client, uri);\r\n        entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(3, entities.size());\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntitiesBasedOnCreatedTime",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testGetEntitiesBasedOnCreatedTime() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app?\" + \"createdtimestart=1425016502030&createdtimeend=1425016502060\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        Set<TimelineEntity> entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(1, entities.size());\r\n        assertTrue(\"Entity with id_4 should have been present in response.\", entities.contains(newEntity(\"app\", \"id_4\")));\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/timeline/\" + \"clusters/cluster1/apps/app1/entities/app?createdtimeend\" + \"=1425016502010\");\r\n        resp = getResponse(client, uri);\r\n        entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(3, entities.size());\r\n        assertFalse(\"Entity with id_4 should not have been present in response.\", entities.contains(newEntity(\"app\", \"id_4\")));\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/timeline/\" + \"clusters/cluster1/apps/app1/entities/app?createdtimestart=\" + \"1425016502010\");\r\n        resp = getResponse(client, uri);\r\n        entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(1, entities.size());\r\n        assertTrue(\"Entity with id_4 should have been present in response.\", entities.contains(newEntity(\"app\", \"id_4\")));\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntitiesByRelations",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testGetEntitiesByRelations() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app?relatesto=\" + \"flow:flow1\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        Set<TimelineEntity> entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(1, entities.size());\r\n        assertTrue(\"Entity with id_1 should have been present in response.\", entities.contains(newEntity(\"app\", \"id_1\")));\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/timeline/\" + \"clusters/cluster1/apps/app1/entities/app?isrelatedto=\" + \"type1:tid1_2,type2:tid2_1%60\");\r\n        resp = getResponse(client, uri);\r\n        entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(1, entities.size());\r\n        assertTrue(\"Entity with id_1 should have been present in response.\", entities.contains(newEntity(\"app\", \"id_1\")));\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/timeline/\" + \"clusters/cluster1/apps/app1/entities/app?isrelatedto=\" + \"type1:tid1_1:tid1_2,type2:tid2_1%60\");\r\n        resp = getResponse(client, uri);\r\n        entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(1, entities.size());\r\n        assertTrue(\"Entity with id_1 should have been present in response.\", entities.contains(newEntity(\"app\", \"id_1\")));\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntitiesByConfigFilters",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetEntitiesByConfigFilters() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app?\" + \"conffilters=config_1%20eq%20123%20AND%20config_3%20eq%20abc\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        Set<TimelineEntity> entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(1, entities.size());\r\n        assertTrue(\"Entity with id_3 should have been present in response.\", entities.contains(newEntity(\"app\", \"id_3\")));\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntitiesByInfoFilters",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetEntitiesByInfoFilters() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app?\" + \"infofilters=info2%20eq%203.5\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        Set<TimelineEntity> entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(1, entities.size());\r\n        assertTrue(\"Entity with id_3 should have been present in response.\", entities.contains(newEntity(\"app\", \"id_3\")));\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntitiesByMetricFilters",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetEntitiesByMetricFilters() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app?\" + \"metricfilters=metric3%20ge%200\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        Set<TimelineEntity> entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(2, entities.size());\r\n        assertTrue(\"Entities with id_1 and id_2 should have been present\" + \" in response.\", entities.contains(newEntity(\"app\", \"id_1\")) && entities.contains(newEntity(\"app\", \"id_2\")));\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntitiesByEventFilters",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetEntitiesByEventFilters() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app?\" + \"eventfilters=event_2,event_4\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        Set<TimelineEntity> entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(1, entities.size());\r\n        assertTrue(\"Entity with id_3 should have been present in response.\", entities.contains(newEntity(\"app\", \"id_3\")));\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntitiesNoMatch",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetEntitiesNoMatch() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app?\" + \"metricfilters=metric7%20ge%200&isrelatedto=type1:tid1_1:tid1_2,\" + \"type2:tid2_1%60&relatesto=flow:flow1&eventfilters=event_2,event_4\" + \"&infofilters=info2%20eq%203.5&createdtimestart=1425016502030&\" + \"createdtimeend=1425016502060\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        Set<TimelineEntity> entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        assertEquals(0, entities.size());\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testInvalidValuesHandling",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testInvalidValuesHandling() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/app?flowrunid=a23b\");\r\n        verifyHttpResponse(client, uri, Status.BAD_REQUEST);\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/timeline/\" + \"clusters/cluster1/apps/app1/entities/app/id_1?flowrunid=2ab15\");\r\n        verifyHttpResponse(client, uri, Status.BAD_REQUEST);\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/timeline/\" + \"clusters/cluster1/apps/app1/entities/app?limit=#$561av\");\r\n        verifyHttpResponse(client, uri, Status.BAD_REQUEST);\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetAppAttempts",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testGetAppAttempts() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/\" + \"entities/YARN_APPLICATION_ATTEMPT\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        Set<TimelineEntity> entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        int totalEntities = entities.size();\r\n        assertEquals(2, totalEntities);\r\n        assertTrue(\"Entity with app-attempt-2 should have been present in response.\", entities.contains(newEntity(TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString(), \"app-attempt-1\")));\r\n        assertTrue(\"Entity with app-attempt-2 should have been present in response.\", entities.contains(newEntity(TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString(), \"app-attempt-2\")));\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/appattempts\");\r\n        resp = getResponse(client, uri);\r\n        entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE, resp.getType());\r\n        assertNotNull(entities);\r\n        int retrievedEntity = entities.size();\r\n        assertEquals(2, retrievedEntity);\r\n        assertTrue(\"Entity with app-attempt-2 should have been present in response.\", entities.contains(newEntity(TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString(), \"app-attempt-1\")));\r\n        assertTrue(\"Entity with app-attempt-2 should have been present in response.\", entities.contains(newEntity(TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString(), \"app-attempt-2\")));\r\n        assertEquals(totalEntities, retrievedEntity);\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetAppAttempt",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testGetAppAttempt() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/\" + \"YARN_APPLICATION_ATTEMPT/app-attempt-1\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        TimelineEntity entities1 = resp.getEntity(new GenericType<TimelineEntity>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities1);\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/appattempts/app-attempt-1\");\r\n        resp = getResponse(client, uri);\r\n        TimelineEntity entities2 = resp.getEntity(new GenericType<TimelineEntity>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE, resp.getType());\r\n        assertNotNull(entities2);\r\n        assertEquals(entities1, entities2);\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetContainers",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testGetContainers() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/entities/YARN_CONTAINER\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        Set<TimelineEntity> entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities);\r\n        int totalEntities = entities.size();\r\n        assertEquals(3, totalEntities);\r\n        assertTrue(\"Entity with container_1_1 should have been present in response.\", entities.contains(newEntity(TimelineEntityType.YARN_CONTAINER.toString(), \"container_1_1\")));\r\n        assertTrue(\"Entity with container_2_1 should have been present in response.\", entities.contains(newEntity(TimelineEntityType.YARN_CONTAINER.toString(), \"container_2_1\")));\r\n        assertTrue(\"Entity with container_2_2 should have been present in response.\", entities.contains(newEntity(TimelineEntityType.YARN_CONTAINER.toString(), \"container_2_2\")));\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/\" + \"appattempts/app-attempt-1/containers\");\r\n        resp = getResponse(client, uri);\r\n        entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE, resp.getType());\r\n        assertNotNull(entities);\r\n        int retrievedEntity = entities.size();\r\n        assertEquals(1, retrievedEntity);\r\n        assertTrue(\"Entity with container_1_1 should have been present in response.\", entities.contains(newEntity(TimelineEntityType.YARN_CONTAINER.toString(), \"container_1_1\")));\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/\" + \"appattempts/app-attempt-2/containers\");\r\n        resp = getResponse(client, uri);\r\n        entities = resp.getEntity(new GenericType<Set<TimelineEntity>>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE, resp.getType());\r\n        assertNotNull(entities);\r\n        retrievedEntity += entities.size();\r\n        assertEquals(2, entities.size());\r\n        assertTrue(\"Entity with container_2_1 should have been present in response.\", entities.contains(newEntity(TimelineEntityType.YARN_CONTAINER.toString(), \"container_2_1\")));\r\n        assertTrue(\"Entity with container_2_2 should have been present in response.\", entities.contains(newEntity(TimelineEntityType.YARN_CONTAINER.toString(), \"container_2_2\")));\r\n        assertEquals(totalEntities, retrievedEntity);\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetContainer",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testGetContainer() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/\" + \"entities/YARN_CONTAINER/container_2_2\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        TimelineEntity entities1 = resp.getEntity(new GenericType<TimelineEntity>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON + \"; \" + JettyUtils.UTF_8, resp.getType().toString());\r\n        assertNotNull(entities1);\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/clusters/cluster1/apps/app1/containers/container_2_2\");\r\n        resp = getResponse(client, uri);\r\n        TimelineEntity entities2 = resp.getEntity(new GenericType<TimelineEntity>() {\r\n        });\r\n        assertEquals(MediaType.APPLICATION_JSON_TYPE, resp.getType());\r\n        assertNotNull(entities2);\r\n        assertEquals(entities1, entities2);\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testHealthCheck",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testHealthCheck() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/health\");\r\n        ClientResponse resp = getResponse(client, uri);\r\n        TimelineHealth timelineHealth = resp.getEntity(new GenericType<TimelineHealth>() {\r\n        });\r\n        assertEquals(200, resp.getStatus());\r\n        assertEquals(TimelineHealth.TimelineHealthStatus.RUNNING, timelineHealth.getHealthStatus());\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    config = new YarnConfiguration();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (manager != null) {\r\n        manager.stop();\r\n        manager = null;\r\n    }\r\n    config = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testTimelineReaderManagerAclsWhenDisabled",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testTimelineReaderManagerAclsWhenDisabled() throws Exception\n{\r\n    config.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, false);\r\n    config.set(YarnConfiguration.YARN_ADMIN_ACL, adminUser);\r\n    manager = new TimelineReaderManager(null);\r\n    manager.init(config);\r\n    manager.start();\r\n    Assert.assertTrue(manager.checkAccess(null));\r\n    Assert.assertFalse(TimelineReaderWebServices.isDisplayEntityPerUserFilterEnabled(config));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testTimelineReaderManagerAclsWhenEnabled",
  "errType" : [ "ForbiddenException", "ForbiddenException", "ForbiddenException" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testTimelineReaderManagerAclsWhenEnabled() throws Exception\n{\r\n    Configuration config = new YarnConfiguration();\r\n    config.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n    config.setBoolean(YarnConfiguration.FILTER_ENTITY_LIST_BY_USER, true);\r\n    config.set(YarnConfiguration.YARN_ADMIN_ACL, adminUser);\r\n    manager = new TimelineReaderManager(null);\r\n    manager.init(config);\r\n    manager.start();\r\n    String user1 = \"user1\";\r\n    String user2 = \"user2\";\r\n    UserGroupInformation user1Ugi = UserGroupInformation.createRemoteUser(user1);\r\n    UserGroupInformation user2Ugi = UserGroupInformation.createRemoteUser(user2);\r\n    Assert.assertFalse(TimelineReaderWebServices.validateAuthUserWithEntityUser(manager, null, user1));\r\n    try {\r\n        TimelineReaderWebServices.checkAccess(manager, null, user1);\r\n        Assert.fail(\"user1Ugi is not allowed to view user1\");\r\n    } catch (ForbiddenException e) {\r\n    }\r\n    Assert.assertTrue(TimelineReaderWebServices.checkAccess(manager, adminUgi, user1));\r\n    Assert.assertTrue(TimelineReaderWebServices.checkAccess(manager, adminUgi, user2));\r\n    try {\r\n        TimelineReaderWebServices.checkAccess(manager, user1Ugi, user2);\r\n        Assert.fail(\"user1Ugi is not allowed to view user2\");\r\n    } catch (ForbiddenException e) {\r\n    }\r\n    try {\r\n        TimelineReaderWebServices.checkAccess(manager, user1Ugi, user2);\r\n        Assert.fail(\"user2Ugi is not allowed to view user1\");\r\n    } catch (ForbiddenException e) {\r\n    }\r\n    String userKey = \"user\";\r\n    Set<TimelineEntity> entities = createEntities(10, userKey);\r\n    TimelineReaderWebServices.checkAccess(manager, adminUgi, entities, userKey, true);\r\n    Assert.assertTrue(entities.size() == 10);\r\n    entities = createEntities(5, userKey);\r\n    TimelineReaderWebServices.checkAccess(manager, user1Ugi, entities, userKey, true);\r\n    Assert.assertTrue(entities.size() == 1);\r\n    Assert.assertEquals(user1, entities.iterator().next().getInfo().get(userKey));\r\n    entities = createEntities(8, userKey);\r\n    TimelineReaderWebServices.checkAccess(manager, user2Ugi, entities, userKey, true);\r\n    Assert.assertTrue(entities.size() == 1);\r\n    Assert.assertEquals(user2, entities.iterator().next().getInfo().get(userKey));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createEntities",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Set<TimelineEntity> createEntities(int noOfUsers, String userKey)\n{\r\n    Set<TimelineEntity> entities = new LinkedHashSet<>();\r\n    for (int i = 0; i < noOfUsers; i++) {\r\n        TimelineEntity e = new TimelineEntity();\r\n        e.setType(\"user\" + i);\r\n        e.setId(\"user\" + i);\r\n        e.getInfo().put(userKey, \"user\" + i);\r\n        entities.add(e);\r\n    }\r\n    return entities;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testTimelineReaderMetrics",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testTimelineReaderMetrics()\n{\r\n    Assert.assertNotNull(metrics);\r\n    Assert.assertEquals(10, metrics.getGetEntitiesSuccessLatency().getInterval());\r\n    Assert.assertEquals(10, metrics.getGetEntitiesFailureLatency().getInterval());\r\n    Assert.assertEquals(10, metrics.getGetEntityTypesSuccessLatency().getInterval());\r\n    Assert.assertEquals(10, metrics.getGetEntityTypesFailureLatency().getInterval());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    metrics = TimelineReaderMetrics.getInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown()\n{\r\n    TimelineReaderMetrics.destroy();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "createTimelineSchema",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void createTimelineSchema(String[] args)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testWriteEntityToFile",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void testWriteEntityToFile() throws Exception\n{\r\n    TimelineEntities te = new TimelineEntities();\r\n    TimelineEntity entity = new TimelineEntity();\r\n    String id = \"hello\";\r\n    String type = \"world\";\r\n    entity.setId(id);\r\n    entity.setType(type);\r\n    entity.setCreatedTime(1425016501000L);\r\n    te.addEntity(entity);\r\n    TimelineMetric metric = new TimelineMetric();\r\n    String metricId = \"CPU\";\r\n    metric.setId(metricId);\r\n    metric.setType(TimelineMetric.Type.SINGLE_VALUE);\r\n    metric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\r\n    metric.addValue(1425016501000L, 1234567L);\r\n    TimelineEntity entity2 = new TimelineEntity();\r\n    String id2 = \"metric\";\r\n    String type2 = \"app\";\r\n    entity2.setId(id2);\r\n    entity2.setType(type2);\r\n    entity2.setCreatedTime(1425016503000L);\r\n    entity2.addMetric(metric);\r\n    te.addEntity(entity2);\r\n    Map<String, TimelineMetric> aggregatedMetrics = new HashMap<String, TimelineMetric>();\r\n    aggregatedMetrics.put(metricId, metric);\r\n    FileSystemTimelineWriterImpl fsi = null;\r\n    try {\r\n        fsi = new FileSystemTimelineWriterImpl();\r\n        Configuration conf = new YarnConfiguration();\r\n        String outputRoot = tmpFolder.newFolder().getAbsolutePath();\r\n        conf.set(FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_DIR_ROOT, outputRoot);\r\n        fsi.init(conf);\r\n        fsi.start();\r\n        fsi.write(new TimelineCollectorContext(\"cluster_id\", \"user_id\", \"flow_name\", \"flow_version\", 12345678L, \"app_id\"), te, UserGroupInformation.createRemoteUser(\"user_id\"));\r\n        String fileName = outputRoot + File.separator + \"entities\" + File.separator + \"cluster_id\" + File.separator + \"user_id\" + File.separator + \"flow_name\" + File.separator + \"flow_version\" + File.separator + \"12345678\" + File.separator + \"app_id\" + File.separator + type + File.separator + id + FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;\r\n        Path path = new Path(fileName);\r\n        FileSystem fs = FileSystem.get(conf);\r\n        assertTrue(\"Specified path(\" + fileName + \") should exist: \", fs.exists(path));\r\n        FileStatus fileStatus = fs.getFileStatus(path);\r\n        assertTrue(\"Specified path should be a file\", !fileStatus.isDirectory());\r\n        List<String> data = readFromFile(fs, path);\r\n        assertTrue(\"data size is:\" + data.size(), data.size() == 2);\r\n        String d = data.get(0);\r\n        assertEquals(d, TimelineUtils.dumpTimelineRecordtoJSON(entity));\r\n        String fileName2 = fsi.getOutputRoot() + File.separator + \"entities\" + File.separator + \"cluster_id\" + File.separator + \"user_id\" + File.separator + \"flow_name\" + File.separator + \"flow_version\" + File.separator + \"12345678\" + File.separator + \"app_id\" + File.separator + type2 + File.separator + id2 + FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;\r\n        Path path2 = new Path(fileName2);\r\n        assertTrue(\"Specified path(\" + fileName + \") should exist: \", fs.exists(path2));\r\n        FileStatus fileStatus2 = fs.getFileStatus(path2);\r\n        assertTrue(\"Specified path should be a file\", !fileStatus2.isDirectory());\r\n        List<String> data2 = readFromFile(fs, path2);\r\n        assertTrue(\"data size is:\" + data2.size(), data2.size() == 2);\r\n        String metricToString = data2.get(0);\r\n        assertEquals(metricToString, TimelineUtils.dumpTimelineRecordtoJSON(entity2));\r\n    } finally {\r\n        if (fsi != null) {\r\n            fsi.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testWriteMultipleEntities",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testWriteMultipleEntities() throws Exception\n{\r\n    String id = \"appId\";\r\n    String type = \"app\";\r\n    TimelineEntities te1 = new TimelineEntities();\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setId(id);\r\n    entity.setType(type);\r\n    entity.setCreatedTime(1425016501000L);\r\n    te1.addEntity(entity);\r\n    TimelineEntities te2 = new TimelineEntities();\r\n    TimelineEntity entity2 = new TimelineEntity();\r\n    entity2.setId(id);\r\n    entity2.setType(type);\r\n    entity2.setCreatedTime(1425016503000L);\r\n    te2.addEntity(entity2);\r\n    FileSystemTimelineWriterImpl fsi = null;\r\n    try {\r\n        fsi = new FileSystemTimelineWriterImpl();\r\n        Configuration conf = new YarnConfiguration();\r\n        String outputRoot = tmpFolder.newFolder().getAbsolutePath();\r\n        conf.set(FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_DIR_ROOT, outputRoot);\r\n        fsi.init(conf);\r\n        fsi.start();\r\n        fsi.write(new TimelineCollectorContext(\"cluster_id\", \"user_id\", \"flow_name\", \"flow_version\", 12345678L, \"app_id\"), te1, UserGroupInformation.createRemoteUser(\"user_id\"));\r\n        fsi.write(new TimelineCollectorContext(\"cluster_id\", \"user_id\", \"flow_name\", \"flow_version\", 12345678L, \"app_id\"), te2, UserGroupInformation.createRemoteUser(\"user_id\"));\r\n        String fileName = outputRoot + File.separator + \"entities\" + File.separator + \"cluster_id\" + File.separator + \"user_id\" + File.separator + \"flow_name\" + File.separator + \"flow_version\" + File.separator + \"12345678\" + File.separator + \"app_id\" + File.separator + type + File.separator + id + FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;\r\n        Path path = new Path(fileName);\r\n        FileSystem fs = FileSystem.get(conf);\r\n        assertTrue(\"Specified path(\" + fileName + \") should exist: \", fs.exists(path));\r\n        FileStatus fileStatus = fs.getFileStatus(path);\r\n        assertTrue(\"Specified path should be a file\", !fileStatus.isDirectory());\r\n        List<String> data = readFromFile(fs, path);\r\n        assertTrue(\"data size is:\" + data.size(), data.size() == 3);\r\n        String d = data.get(0);\r\n        assertEquals(d, TimelineUtils.dumpTimelineRecordtoJSON(entity));\r\n        String metricToString = data.get(1);\r\n        assertEquals(metricToString, TimelineUtils.dumpTimelineRecordtoJSON(entity2));\r\n    } finally {\r\n        if (fsi != null) {\r\n            fsi.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testWriteEntitiesWithEmptyFlowName",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testWriteEntitiesWithEmptyFlowName() throws Exception\n{\r\n    String id = \"appId\";\r\n    String type = \"app\";\r\n    TimelineEntities te = new TimelineEntities();\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setId(id);\r\n    entity.setType(type);\r\n    entity.setCreatedTime(1425016501000L);\r\n    te.addEntity(entity);\r\n    FileSystemTimelineWriterImpl fsi = null;\r\n    try {\r\n        fsi = new FileSystemTimelineWriterImpl();\r\n        Configuration conf = new YarnConfiguration();\r\n        String outputRoot = tmpFolder.newFolder().getAbsolutePath();\r\n        conf.set(FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_DIR_ROOT, outputRoot);\r\n        fsi.init(conf);\r\n        fsi.start();\r\n        fsi.write(new TimelineCollectorContext(\"cluster_id\", \"user_id\", \"\", \"flow_version\", 12345678L, \"app_id\"), te, UserGroupInformation.createRemoteUser(\"user_id\"));\r\n        String fileName = outputRoot + File.separator + \"entities\" + File.separator + \"cluster_id\" + File.separator + \"user_id\" + File.separator + \"\" + File.separator + \"flow_version\" + File.separator + \"12345678\" + File.separator + \"app_id\" + File.separator + type + File.separator + id + FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION;\r\n        Path path = new Path(fileName);\r\n        FileSystem fs = FileSystem.get(conf);\r\n        assertTrue(\"Specified path(\" + fileName + \") should exist: \", fs.exists(path));\r\n        FileStatus fileStatus = fs.getFileStatus(path);\r\n        assertTrue(\"Specified path should be a file\", !fileStatus.isDirectory());\r\n        List<String> data = readFromFile(fs, path);\r\n        assertTrue(\"data size is:\" + data.size(), data.size() == 2);\r\n        String d = data.get(0);\r\n        assertEquals(d, TimelineUtils.dumpTimelineRecordtoJSON(entity));\r\n    } finally {\r\n        if (fsi != null) {\r\n            fsi.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "readFromFile",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<String> readFromFile(FileSystem fs, Path path) throws IOException\n{\r\n    BufferedReader br = new BufferedReader(new InputStreamReader(fs.open(path)));\r\n    List<String> data = new ArrayList<>();\r\n    String line = br.readLine();\r\n    data.add(line);\r\n    while (line != null) {\r\n        line = br.readLine();\r\n        data.add(line);\r\n    }\r\n    return data;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage",
  "methodName" : "testTimelineSchemaCreation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testTimelineSchemaCreation() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_SCHEMA_CREATOR_CLASS, \"org.apache.hadoop.yarn.server.timelineservice.storage\" + \".DummyTimelineSchemaCreator\");\r\n    TimelineSchemaCreator timelineSchemaCreator = new TimelineSchemaCreator();\r\n    Assert.assertEquals(0, timelineSchemaCreator.createTimelineSchema(new String[] {}, conf));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "verifyFilterList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyFilterList(String expr, TimelineFilterList list, TimelineFilterList expectedList) throws Exception\n{\r\n    assertNotNull(list);\r\n    assertTrue(\"Unexpected List received after parsing expression \" + expr + \". Expected=\" + expectedList + \" but Actual=\" + list, list.equals(expectedList));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testMetricFiltersParsing",
  "errType" : [ "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException" ],
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testMetricFiltersParsing() throws Exception\n{\r\n    String expr = \"(((key11 ne 234 AND key12 gt 23) AND \" + \"(key13 lt 34 OR key14 ge 567)) OR (key21 lt 24 OR key22 le 45))\";\r\n    TimelineFilterList expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(Operator.AND, new TimelineFilterList(Operator.AND, new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL, \"key11\", 234, false), new TimelineCompareFilter(TimelineCompareOp.GREATER_THAN, \"key12\", 23, true)), new TimelineFilterList(Operator.OR, new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"key13\", 34, true), new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL, \"key14\", 567, true))), new TimelineFilterList(Operator.OR, new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"key21\", 24, true), new TimelineCompareFilter(TimelineCompareOp.LESS_OR_EQUAL, \"key22\", 45, true)));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseMetricFilters(expr), expectedList);\r\n    expr = \"abc ene 234\";\r\n    expectedList = new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL, \"abc\", 234, true));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseMetricFilters(expr), expectedList);\r\n    expr = \"abc ne 234\";\r\n    expectedList = new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL, \"abc\", 234, false));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseMetricFilters(expr), expectedList);\r\n    expr = \"abc ne 234 AND def gt 23\";\r\n    expectedList = new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL, \"abc\", 234, false), new TimelineCompareFilter(TimelineCompareOp.GREATER_THAN, \"def\", 23, true));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseMetricFilters(expr), expectedList);\r\n    expr = \"(abc ne 234 AND def gt 23)\";\r\n    expectedList = new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL, \"abc\", 234, false), new TimelineCompareFilter(TimelineCompareOp.GREATER_THAN, \"def\", 23, true));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseMetricFilters(expr), expectedList);\r\n    expr = \"abc ne 234 AND def gt 23 OR rst lt 24\";\r\n    expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL, \"abc\", 234, false), new TimelineCompareFilter(TimelineCompareOp.GREATER_THAN, \"def\", 23, true)), new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"rst\", 24, true));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseMetricFilters(expr), expectedList);\r\n    expr = \"abc ne 234 AND def gt 23 OR rst lt 24 OR xyz le 456\";\r\n    expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL, \"abc\", 234, false), new TimelineCompareFilter(TimelineCompareOp.GREATER_THAN, \"def\", 23, true)), new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"rst\", 24, true), new TimelineCompareFilter(TimelineCompareOp.LESS_OR_EQUAL, \"xyz\", 456, true));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseMetricFilters(expr), expectedList);\r\n    expr = \"abc ne 234 AND def gt 23 OR rst lt 24 OR xyz le 456 AND pqr ge 2\";\r\n    expectedList = new TimelineFilterList(new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL, \"abc\", 234, false), new TimelineCompareFilter(TimelineCompareOp.GREATER_THAN, \"def\", 23, true)), new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"rst\", 24, true), new TimelineCompareFilter(TimelineCompareOp.LESS_OR_EQUAL, \"xyz\", 456, true)), new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL, \"pqr\", 2, true));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseMetricFilters(expr), expectedList);\r\n    expr = \"  abc ne   234       AND       def           gt 23 OR     rst lt \" + \"           24     OR xyz     le     456    AND pqr ge 2        \";\r\n    expectedList = new TimelineFilterList(new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL, \"abc\", 234, false), new TimelineCompareFilter(TimelineCompareOp.GREATER_THAN, \"def\", 23, true)), new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"rst\", 24, true), new TimelineCompareFilter(TimelineCompareOp.LESS_OR_EQUAL, \"xyz\", 456, true)), new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL, \"pqr\", 2, true));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseMetricFilters(expr), expectedList);\r\n    expr = \"(((key11 ne 234 AND key12 gt 23 OR key13 lt 24 OR key14 le 456 \" + \"AND key15 ge 2) AND (key16 lt 34 OR key17 ge 567)) OR (key21 lt 24 \" + \"OR key22 le 45))\";\r\n    expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(Operator.AND, new TimelineFilterList(new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL, \"key11\", 234, false), new TimelineCompareFilter(TimelineCompareOp.GREATER_THAN, \"key12\", 23, true)), new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"key13\", 24, true), new TimelineCompareFilter(TimelineCompareOp.LESS_OR_EQUAL, \"key14\", 456, true)), new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL, \"key15\", 2, true)), new TimelineFilterList(Operator.OR, new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"key16\", 34, true), new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL, \"key17\", 567, true))), new TimelineFilterList(Operator.OR, new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"key21\", 24, true), new TimelineCompareFilter(TimelineCompareOp.LESS_OR_EQUAL, \"key22\", 45, true)));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseMetricFilters(expr), expectedList);\r\n    expr = \"   (  (     (        key11      ne     234    AND key12    gt   \" + \"23    OR    key13    lt    24 OR key14 le 456   AND   key15   ge   2\" + \"   )   AND ( key16 lt 34 OR key17 ge 567 )    )     OR \" + \"(   key21 lt 24 OR key22 le 45 )   )    \";\r\n    expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(Operator.AND, new TimelineFilterList(new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineCompareFilter(TimelineCompareOp.NOT_EQUAL, \"key11\", 234, false), new TimelineCompareFilter(TimelineCompareOp.GREATER_THAN, \"key12\", 23, true)), new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"key13\", 24, true), new TimelineCompareFilter(TimelineCompareOp.LESS_OR_EQUAL, \"key14\", 456, true)), new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL, \"key15\", 2, true)), new TimelineFilterList(Operator.OR, new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"key16\", 34, true), new TimelineCompareFilter(TimelineCompareOp.GREATER_OR_EQUAL, \"key17\", 567, true))), new TimelineFilterList(Operator.OR, new TimelineCompareFilter(TimelineCompareOp.LESS_THAN, \"key21\", 24, true), new TimelineCompareFilter(TimelineCompareOp.LESS_OR_EQUAL, \"key22\", 45, true)));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseMetricFilters(expr), expectedList);\r\n    expr = \"(((key11 ne 234 AND key12 gt 23 OR key13 lt 24 OR key14 le 456 \" + \"AND key15 ge 2) AND (key16 lt 34 OR key17 ge 567)) OR (key21 lt 24 \" + \"OR key22 le 45)\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseMetricFilters(expr);\r\n        fail(\"Improper brackers. Exception should have been thrown.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(((key11 ne 234 AND key12 gt v3 OR key13 lt 24 OR key14 le 456 \" + \"AND key15 ge 2) AND (key16 lt 34 OR key17 ge 567)) OR (key21 lt 24 \" + \"OR key22 le 45))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseMetricFilters(expr);\r\n        fail(\"Non Numeric value. Exception should have been thrown.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(((key11 ne (234 AND key12 gt 3 OR key13 lt 24 OR key14 le 456 \" + \"AND key15 ge 2) AND (key16 lt 34 OR key17 ge 567)) OR (key21 lt 24 \" + \"OR key22 le 45))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseMetricFilters(expr);\r\n        fail(\"Unexpected opening bracket. Exception should have been thrown.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(((k)ey11 ne 234 AND key12 gt 3 OR key13 lt 24 OR key14 le 456 \" + \"AND key15 ge 2) AND (key16 lt 34 OR key17 ge 567)) OR (key21 lt 24 \" + \"OR key22 le 45))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseMetricFilters(expr);\r\n        fail(\"Unexpected closing bracket. Exception should have been thrown.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(((key11 rs 234 AND key12 gt 3 OR key13 lt 24 OR key14 le 456 \" + \"AND key15 ge 2) AND (key16 lt 34 OR key17 ge 567)) OR (key21 lt 24 \" + \"OR key22 le 45))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseMetricFilters(expr);\r\n        fail(\"Improper compare op. Exception should have been thrown.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(((key11 ne 234 PI key12 gt 3 OR key13 lt 24 OR key14 le 456 \" + \"AND key15 ge 2) AND (key16 lt 34 OR key17 ge 567)) OR (key21 lt 24 \" + \"OR key22 le 45))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseMetricFilters(expr);\r\n        fail(\"Improper op. Exception should have been thrown.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(((key11 ne 234 PI key12 gt 3 OR key13 lt 24 OR key14 le 456 \" + \"AND key15 ge 2) AND (key16 lt 34 OR key17 ge 567)) OR (key21 lt 24 \" + \"OR key22 le 45))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseMetricFilters(expr);\r\n        fail(\"Improper op. Exception should have been thrown.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(key11 ne 234 AND key12 gt 3)) OR (key13 lt 24 OR key14 le 456)\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseMetricFilters(expr);\r\n        fail(\"Unbalanced brackets. Exception should have been thrown.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(key11 rne 234 AND key12 gt 3) OR (key13 lt 24 OR key14 le 456)\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseMetricFilters(expr);\r\n        fail(\"Invalid compareop. Exception should have been thrown.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(key11 ne 234 AND key12 gt 3) OR (key13 lt 24 OR key14 le\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseMetricFilters(expr);\r\n        fail(\"Compareop cant be parsed. Exception should have been thrown.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    assertNull(TimelineReaderWebServicesUtils.parseMetricFilters(null));\r\n    assertNull(TimelineReaderWebServicesUtils.parseMetricFilters(\"   \"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 10,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testConfigFiltersParsing",
  "errType" : [ "TimelineParseException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testConfigFiltersParsing() throws Exception\n{\r\n    String expr = \"(((key11 ne 234 AND key12 eq val12) AND \" + \"(key13 ene val13 OR key14 eq 567)) OR (key21 eq val_21 OR key22 eq \" + \"val.22))\";\r\n    TimelineFilterList expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(Operator.AND, new TimelineFilterList(Operator.AND, new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"key11\", \"234\", false), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"key12\", \"val12\", true)), new TimelineFilterList(Operator.OR, new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"key13\", \"val13\", true), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"key14\", \"567\", true))), new TimelineFilterList(Operator.OR, new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"key21\", \"val_21\", true), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"key22\", \"val.22\", true)));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseKVFilters(expr, true), expectedList);\r\n    expr = \"abc ne 234 AND def eq 23 OR rst ene 24 OR xyz eq 456 AND pqr eq 2\";\r\n    expectedList = new TimelineFilterList(new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"abc\", \"234\", false), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"def\", \"23\", true)), new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"rst\", \"24\", true), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"xyz\", \"456\", true)), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"pqr\", \"2\", true));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseKVFilters(expr, true), expectedList);\r\n    expr = \"  abc ne   234       AND       def           eq 23 OR     rst ene \" + \"           24     OR xyz     eq     456    AND pqr eq 2        \";\r\n    expectedList = new TimelineFilterList(new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"abc\", \"234\", false), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"def\", \"23\", true)), new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"rst\", \"24\", true), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"xyz\", \"456\", true)), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"pqr\", \"2\", true));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseKVFilters(expr, true), expectedList);\r\n    expr = \"abc gt 234 AND def eq 23 OR rst ene 24 OR xyz eq 456 AND pqr eq 2\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseKVFilters(expr, true);\r\n        fail(\"Invalid compareop specified for config filters. Should be either\" + \" eq,ne or ene and exception should have been thrown.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testInfoFiltersParsing",
  "errType" : [ "TimelineParseException", "TimelineParseException", "TimelineParseException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testInfoFiltersParsing() throws Exception\n{\r\n    String expr = \"(((key11 ne 234 AND key12 eq val12) AND \" + \"(key13 ene val13 OR key14 eq 567)) OR (key21 eq val_21 OR key22 eq \" + \"5.0))\";\r\n    TimelineFilterList expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(Operator.AND, new TimelineFilterList(Operator.AND, new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"key11\", 234, false), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"key12\", \"val12\", true)), new TimelineFilterList(Operator.OR, new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"key13\", \"val13\", true), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"key14\", 567, true))), new TimelineFilterList(Operator.OR, new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"key21\", \"val_21\", true), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"key22\", 5.0, true)));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseKVFilters(expr, false), expectedList);\r\n    expr = \"abc ne 234 AND def eq 23 OR rst ene 24 OR xyz eq 456 AND pqr eq \" + \"val.1234\";\r\n    expectedList = new TimelineFilterList(new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"abc\", 234, false), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"def\", 23, true)), new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"rst\", 24, true), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"xyz\", 456, true)), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"pqr\", \"val.1234\", true));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseKVFilters(expr, false), expectedList);\r\n    expr = \"  abc ne   234       AND       def           eq 23 OR     rst ene \" + \"           24     OR xyz     eq     456    AND pqr eq 2        \";\r\n    expectedList = new TimelineFilterList(new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"abc\", 234, false), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"def\", 23, true)), new TimelineKeyValueFilter(TimelineCompareOp.NOT_EQUAL, \"rst\", 24, true), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"xyz\", 456, true)), new TimelineKeyValueFilter(TimelineCompareOp.EQUAL, \"pqr\", 2, true));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseKVFilters(expr, false), expectedList);\r\n    expr = \"abdeq\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseKVFilters(expr, false);\r\n        Assert.fail(\"Expression valuation should throw exception.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"abc gt 234 AND defeq\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseKVFilters(expr, false);\r\n        Assert.fail(\"Expression valuation should throw exception.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"((key11 ne 234 AND key12 eq val12) AND (key13eq OR key14 eq va14))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseKVFilters(expr, false);\r\n        Assert.fail(\"Expression valuation should throw exception.\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testEventFiltersParsing",
  "errType" : [ "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException" ],
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testEventFiltersParsing() throws Exception\n{\r\n    String expr = \"abc,def\";\r\n    TimelineFilterList expectedList = new TimelineFilterList(new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"abc\"), new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"def\"));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseEventFilters(expr), expectedList);\r\n    expr = \"(abc,def)\";\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseEventFilters(expr), expectedList);\r\n    expr = \"(abc,def) OR (rst, uvx)\";\r\n    expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"abc\"), new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"def\")), new TimelineFilterList(new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"rst\"), new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"uvx\")));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseEventFilters(expr), expectedList);\r\n    expr = \"!(abc,def,uvc) OR (rst, uvx)\";\r\n    expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, \"abc\"), new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, \"def\"), new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, \"uvc\")), new TimelineFilterList(new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"rst\"), new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"uvx\")));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseEventFilters(expr), expectedList);\r\n    expr = \"(((!(abc,def,uvc) OR (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu)))\" + \" OR ((bcd,tyu) AND uvb))\";\r\n    expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, \"abc\"), new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, \"def\"), new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, \"uvc\")), new TimelineFilterList(new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"rst\"), new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"uvx\"))), new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, \"abcdefg\")), new TimelineFilterList(new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, \"ghj\"), new TimelineExistsFilter(TimelineCompareOp.NOT_EQUAL, \"tyu\")))), new TimelineFilterList(new TimelineFilterList(new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"bcd\"), new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"tyu\")), new TimelineExistsFilter(TimelineCompareOp.EQUAL, \"uvb\")));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseEventFilters(expr), expectedList);\r\n    expr = \"  (  (  (  !  (  abc , def  ,   uvc)   OR   (   rst  ,   uvx )  )\" + \"  AND   (  !  (  abcdefg ) OR  !   (  ghj,  tyu)  ) )  OR   (   (\" + \"   bcd   ,   tyu  )   AND   uvb  )   )\";\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseEventFilters(expr), expectedList);\r\n    expr = \"(((!(abc,def,uvc) OR (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu)))\" + \" OR ((bcd,tyu) AND uvb)\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseEventFilters(expr);\r\n        fail(\"Improper brackets. Exception should have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(((!(abc,def,uvc) (OR (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu)))\" + \" OR ((bcd,tyu) AND uvb))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseEventFilters(expr);\r\n        fail(\"Unexpected opening bracket. Exception should have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(((!(abc,def,uvc) OR) (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu)))\" + \" OR ((bcd,tyu) AND uvb))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseEventFilters(expr);\r\n        fail(\"Unexpected closing bracket. Exception should have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(((!(abc,def,uvc) PI (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu)))\" + \" OR ((bcd,tyu) AND uvb))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseEventFilters(expr);\r\n        fail(\"Invalid op. Exception should have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(((!(abc,def,uvc) !OR (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu)))\" + \" OR ((bcd,tyu) AND uvb))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseEventFilters(expr);\r\n        fail(\"Unexpected ! char. Exception should have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"abc,def,uvc) OR (rst, uvx)\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseEventFilters(expr);\r\n        fail(\"Unexpected closing bracket. Exception should have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"abc,def,uvc OR )rst, uvx)\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseEventFilters(expr);\r\n        fail(\"Unexpected closing bracket. Exception should have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"abc,def,uvc OR ,rst, uvx)\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseEventFilters(expr);\r\n        fail(\"Unexpected delimiter. Exception should have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"abc,def,uvc OR !  \";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseEventFilters(expr);\r\n        fail(\"Unexpected not char. Exception should have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(abc,def,uvc)) OR (rst, uvx)\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseEventFilters(expr);\r\n        fail(\"Unbalanced brackets. Exception should have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"(((! ,(abc,def,uvc) OR (rst, uvx)) AND (!(abcdefg) OR !(ghj,tyu\" + \"))) OR ((bcd,tyu) AND uvb))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseEventFilters(expr);\r\n        fail(\"( should follow ! char. Exception should have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    assertNull(TimelineReaderWebServicesUtils.parseEventFilters(null));\r\n    assertNull(TimelineReaderWebServicesUtils.parseEventFilters(\"   \"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 11,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testRelationFiltersParsing",
  "errType" : [ "TimelineParseException" ],
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testRelationFiltersParsing() throws Exception\n{\r\n    String expr = \"type1:entity11,type2:entity21:entity22\";\r\n    TimelineFilterList expectedList = new TimelineFilterList(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type1\", Sets.newHashSet((Object) \"entity11\")), new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type2\", Sets.newHashSet((Object) \"entity21\", \"entity22\")));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseRelationFilters(expr), expectedList);\r\n    expr = \"(type1:entity11,type2:entity21:entity22)\";\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseRelationFilters(expr), expectedList);\r\n    expr = \"(type1:entity11,type2:entity21:entity22) OR (type3:entity31:\" + \"entity32:entity33,type1:entity11:entity12)\";\r\n    expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type1\", Sets.newHashSet((Object) \"entity11\")), new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type2\", Sets.newHashSet((Object) \"entity21\", \"entity22\"))), new TimelineFilterList(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type3\", Sets.newHashSet((Object) \"entity31\", \"entity32\", \"entity33\")), new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type1\", Sets.newHashSet((Object) \"entity11\", \"entity12\"))));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseRelationFilters(expr), expectedList);\r\n    expr = \"!(type1:entity11,type2:entity21:entity22,type5:entity51) OR \" + \"(type3:entity31:entity32:entity33,type1:entity11:entity12)\";\r\n    expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineKeyValuesFilter(TimelineCompareOp.NOT_EQUAL, \"type1\", Sets.newHashSet((Object) \"entity11\")), new TimelineKeyValuesFilter(TimelineCompareOp.NOT_EQUAL, \"type2\", Sets.newHashSet((Object) \"entity21\", \"entity22\")), new TimelineKeyValuesFilter(TimelineCompareOp.NOT_EQUAL, \"type5\", Sets.newHashSet((Object) \"entity51\"))), new TimelineFilterList(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type3\", Sets.newHashSet((Object) \"entity31\", \"entity32\", \"entity33\")), new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type1\", Sets.newHashSet((Object) \"entity11\", \"entity12\"))));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseRelationFilters(expr), expectedList);\r\n    expr = \"(((!(type1:entity11,type2:entity21:entity22,type5:entity51) OR \" + \"(type3:entity31:entity32:entity33,type1:entity11:entity12)) AND \" + \"(!(type11:entity111) OR !(type4:entity43:entity44:entity47:entity49,\" + \"type7:entity71))) OR ((type2:entity2,type8:entity88) AND t9:e:e1))\";\r\n    expectedList = new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineKeyValuesFilter(TimelineCompareOp.NOT_EQUAL, \"type1\", Sets.newHashSet((Object) \"entity11\")), new TimelineKeyValuesFilter(TimelineCompareOp.NOT_EQUAL, \"type2\", Sets.newHashSet((Object) \"entity21\", \"entity22\")), new TimelineKeyValuesFilter(TimelineCompareOp.NOT_EQUAL, \"type5\", Sets.newHashSet((Object) \"entity51\"))), new TimelineFilterList(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type3\", Sets.newHashSet((Object) \"entity31\", \"entity32\", \"entity33\")), new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type1\", Sets.newHashSet((Object) \"entity11\", \"entity12\")))), new TimelineFilterList(Operator.OR, new TimelineFilterList(new TimelineKeyValuesFilter(TimelineCompareOp.NOT_EQUAL, \"type11\", Sets.newHashSet((Object) \"entity111\"))), new TimelineFilterList(new TimelineKeyValuesFilter(TimelineCompareOp.NOT_EQUAL, \"type4\", Sets.newHashSet((Object) \"entity43\", \"entity44\", \"entity47\", \"entity49\")), new TimelineKeyValuesFilter(TimelineCompareOp.NOT_EQUAL, \"type7\", Sets.newHashSet((Object) \"entity71\"))))), new TimelineFilterList(new TimelineFilterList(new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type2\", Sets.newHashSet((Object) \"entity2\")), new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"type8\", Sets.newHashSet((Object) \"entity88\"))), new TimelineKeyValuesFilter(TimelineCompareOp.EQUAL, \"t9\", Sets.newHashSet((Object) \"e\", \"e1\"))));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseRelationFilters(expr), expectedList);\r\n    expr = \"   (   (  (   !   (   type1:entity11  ,  type2:entity21:entity22\" + \"  ,  type5:entity51  )   OR  (   type3:entity31:entity32:entity33  \" + \"     ,   type1:entity11:entity12)) AND (!(  type11:entity111  )  OR \" + \"    !   (   type4:entity43:entity44:entity47:entity49 , \" + \"type7:entity71  )  )  ) OR  (  (  type2:entity2 , type8:entity88) \" + \"AND  t9:e:e1 )    ) \";\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseRelationFilters(expr), expectedList);\r\n    expr = \"(((!(type1 : entity11,type2:entity21:entity22,type5:entity51) OR \" + \"(type3:entity31:entity32:entity33,type1:entity11:entity12)) AND \" + \"(!(type11:entity111) OR !(type4:entity43:entity44:entity47:entity49,\" + \"type7:entity71))) OR ((type2:entity2,type8:entity88) AND t9:e:e1))\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseRelationFilters(expr);\r\n        fail(\"Space not allowed in relation expression. Exception should have \" + \"been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testDataToRetrieve",
  "errType" : [ "TimelineParseException", "TimelineParseException", "TimelineParseException", "TimelineParseException" ],
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testDataToRetrieve() throws Exception\n{\r\n    String expr = \"abc,def\";\r\n    TimelineFilterList expectedList = new TimelineFilterList(Operator.OR, new TimelinePrefixFilter(TimelineCompareOp.EQUAL, \"abc\"), new TimelinePrefixFilter(TimelineCompareOp.EQUAL, \"def\"));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseDataToRetrieve(expr), expectedList);\r\n    expr = \"(abc,def)\";\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseDataToRetrieve(expr), expectedList);\r\n    expr = \"   (   abc  ,   def  )   \";\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseDataToRetrieve(expr), expectedList);\r\n    expr = \"    abc  ,   def   \";\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseDataToRetrieve(expr), expectedList);\r\n    expr = \"!(abc,def)\";\r\n    expectedList = new TimelineFilterList(new TimelinePrefixFilter(TimelineCompareOp.NOT_EQUAL, \"abc\"), new TimelinePrefixFilter(TimelineCompareOp.NOT_EQUAL, \"def\"));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseDataToRetrieve(expr), expectedList);\r\n    expr = \" !  (   abc  ,  def  )  \";\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseDataToRetrieve(expr), expectedList);\r\n    expr = \"!(abc)\";\r\n    expectedList = new TimelineFilterList(new TimelinePrefixFilter(TimelineCompareOp.NOT_EQUAL, \"abc\"));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseDataToRetrieve(expr), expectedList);\r\n    expr = \"(abc)\";\r\n    expectedList = new TimelineFilterList(Operator.OR, new TimelinePrefixFilter(TimelineCompareOp.EQUAL, \"abc\"));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseDataToRetrieve(expr), expectedList);\r\n    expr = \"abc\";\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseDataToRetrieve(expr), expectedList);\r\n    expr = \" !  (   abc  ,  def  , xyz)  \";\r\n    expectedList = new TimelineFilterList(new TimelinePrefixFilter(TimelineCompareOp.NOT_EQUAL, \"abc\"), new TimelinePrefixFilter(TimelineCompareOp.NOT_EQUAL, \"def\"), new TimelinePrefixFilter(TimelineCompareOp.NOT_EQUAL, \"xyz\"));\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseDataToRetrieve(expr), expectedList);\r\n    expr = \"!(abc,def,xyz)\";\r\n    verifyFilterList(expr, TimelineReaderWebServicesUtils.parseDataToRetrieve(expr), expectedList);\r\n    expr = \"!(abc,def,xyz\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseDataToRetrieve(expr);\r\n        fail(\"No closing bracket. Exception should have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"!abc,def,xyz\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseDataToRetrieve(expr);\r\n        fail(\"NOT(!) should be followed by opening bracket. Exception should \" + \"have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"!abc,def,xyz\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseDataToRetrieve(expr);\r\n        fail(\"NOT(!) should be followed by opening bracket. Exception should \" + \"have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    expr = \"!   r(  abc,def,xyz)\";\r\n    try {\r\n        TimelineReaderWebServicesUtils.parseDataToRetrieve(expr);\r\n        fail(\"NOT(!) should be followed by opening bracket. Exception should \" + \"have been thrown\");\r\n    } catch (TimelineParseException e) {\r\n    }\r\n    assertNull(TimelineReaderWebServicesUtils.parseDataToRetrieve(null));\r\n    assertNull(TimelineReaderWebServicesUtils.parseDataToRetrieve(\"     \"));\r\n    assertNull(TimelineReaderWebServicesUtils.parseDataToRetrieve(\"()\"));\r\n    assertNull(TimelineReaderWebServicesUtils.parseDataToRetrieve(\"!()\"));\r\n    assertNull(TimelineReaderWebServicesUtils.parseDataToRetrieve(\"(     )\"));\r\n    assertNull(TimelineReaderWebServicesUtils.parseDataToRetrieve(\"!(   )\"));\r\n    assertNull(TimelineReaderWebServicesUtils.parseDataToRetrieve(\"!  (   )\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 4,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkFilterAllowedUser",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void checkFilterAllowedUser() throws ServletException, IOException\n{\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_AUTH_ENABLED, \"true\");\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_ALLOWED_USERS, \"user1,user2\");\r\n    TimelineReaderWhitelistAuthorizationFilter f = new TimelineReaderWhitelistAuthorizationFilter();\r\n    FilterConfig fc = new DummyFilterConfig(map);\r\n    f.init(fc);\r\n    HttpServletRequest mockHsr = Mockito.mock(HttpServletRequest.class);\r\n    String userName = \"user1\";\r\n    Mockito.when(mockHsr.getUserPrincipal()).thenReturn(new Principal() {\r\n\r\n        @Override\r\n        public String getName() {\r\n            return userName;\r\n        }\r\n    });\r\n    HttpServletResponse r = Mockito.mock(HttpServletResponse.class);\r\n    f.doFilter(mockHsr, r, null);\r\n    String msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n    verify(r, times(0)).sendError(HttpServletResponse.SC_FORBIDDEN, msg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkFilterNotAllowedUser",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void checkFilterNotAllowedUser() throws ServletException, IOException\n{\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_AUTH_ENABLED, \"true\");\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_ALLOWED_USERS, \"user1,user2\");\r\n    TimelineReaderWhitelistAuthorizationFilter f = new TimelineReaderWhitelistAuthorizationFilter();\r\n    FilterConfig fc = new DummyFilterConfig(map);\r\n    f.init(fc);\r\n    HttpServletRequest mockHsr = Mockito.mock(HttpServletRequest.class);\r\n    String userName = \"testuser1\";\r\n    Mockito.when(mockHsr.getUserPrincipal()).thenReturn(new Principal() {\r\n\r\n        @Override\r\n        public String getName() {\r\n            return userName;\r\n        }\r\n    });\r\n    HttpServletResponse r = Mockito.mock(HttpServletResponse.class);\r\n    f.doFilter(mockHsr, r, null);\r\n    String msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n    Mockito.verify(r).sendError(eq(HttpServletResponse.SC_FORBIDDEN), eq(msg));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkFilterAllowedUserGroup",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void checkFilterAllowedUserGroup() throws ServletException, IOException, InterruptedException\n{\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_AUTH_ENABLED, \"true\");\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_ALLOWED_USERS, \"user2 group1,group2\");\r\n    TimelineReaderWhitelistAuthorizationFilter f = new TimelineReaderWhitelistAuthorizationFilter();\r\n    FilterConfig fc = new DummyFilterConfig(map);\r\n    f.init(fc);\r\n    HttpServletRequest mockHsr = Mockito.mock(HttpServletRequest.class);\r\n    String userName = \"user1\";\r\n    Mockito.when(mockHsr.getUserPrincipal()).thenReturn(new Principal() {\r\n\r\n        @Override\r\n        public String getName() {\r\n            return userName;\r\n        }\r\n    });\r\n    HttpServletResponse r = Mockito.mock(HttpServletResponse.class);\r\n    UserGroupInformation user1 = UserGroupInformation.createUserForTesting(userName, GROUP_NAMES);\r\n    user1.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            f.doFilter(mockHsr, r, null);\r\n            return null;\r\n        }\r\n    });\r\n    String msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n    verify(r, times(0)).sendError(HttpServletResponse.SC_FORBIDDEN, msg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkFilterNotAlloweGroup",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void checkFilterNotAlloweGroup() throws ServletException, IOException, InterruptedException\n{\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_AUTH_ENABLED, \"true\");\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_ALLOWED_USERS, \" group5,group6\");\r\n    TimelineReaderWhitelistAuthorizationFilter f = new TimelineReaderWhitelistAuthorizationFilter();\r\n    FilterConfig fc = new DummyFilterConfig(map);\r\n    f.init(fc);\r\n    HttpServletRequest mockHsr = Mockito.mock(HttpServletRequest.class);\r\n    String userName = \"user200\";\r\n    Mockito.when(mockHsr.getUserPrincipal()).thenReturn(new Principal() {\r\n\r\n        @Override\r\n        public String getName() {\r\n            return userName;\r\n        }\r\n    });\r\n    HttpServletResponse r = Mockito.mock(HttpServletResponse.class);\r\n    UserGroupInformation user1 = UserGroupInformation.createUserForTesting(userName, GROUP_NAMES);\r\n    user1.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            f.doFilter(mockHsr, r, null);\r\n            return null;\r\n        }\r\n    });\r\n    String msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n    Mockito.verify(r).sendError(eq(HttpServletResponse.SC_FORBIDDEN), eq(msg));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkFilterAllowAdmins",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void checkFilterAllowAdmins() throws ServletException, IOException, InterruptedException\n{\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_AUTH_ENABLED, \"true\");\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_ALLOWED_USERS, \"user3 group5,group6\");\r\n    map.put(YarnConfiguration.YARN_ADMIN_ACL, \" group1,group2\");\r\n    TimelineReaderWhitelistAuthorizationFilter f = new TimelineReaderWhitelistAuthorizationFilter();\r\n    FilterConfig fc = new DummyFilterConfig(map);\r\n    f.init(fc);\r\n    HttpServletRequest mockHsr = Mockito.mock(HttpServletRequest.class);\r\n    String userName = \"user90\";\r\n    Mockito.when(mockHsr.getUserPrincipal()).thenReturn(new Principal() {\r\n\r\n        @Override\r\n        public String getName() {\r\n            return userName;\r\n        }\r\n    });\r\n    HttpServletResponse r = Mockito.mock(HttpServletResponse.class);\r\n    UserGroupInformation user1 = UserGroupInformation.createUserForTesting(userName, GROUP_NAMES);\r\n    user1.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            f.doFilter(mockHsr, r, null);\r\n            return null;\r\n        }\r\n    });\r\n    String msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n    verify(r, times(0)).sendError(HttpServletResponse.SC_FORBIDDEN, msg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkFilterAllowAdminsWhenNoUsersSet",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void checkFilterAllowAdminsWhenNoUsersSet() throws ServletException, IOException, InterruptedException\n{\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_AUTH_ENABLED, \"true\");\r\n    map.put(YarnConfiguration.YARN_ADMIN_ACL, \" group1,group2\");\r\n    TimelineReaderWhitelistAuthorizationFilter f = new TimelineReaderWhitelistAuthorizationFilter();\r\n    FilterConfig fc = new DummyFilterConfig(map);\r\n    f.init(fc);\r\n    HttpServletRequest mockHsr = Mockito.mock(HttpServletRequest.class);\r\n    String userName = \"user90\";\r\n    Mockito.when(mockHsr.getUserPrincipal()).thenReturn(new Principal() {\r\n\r\n        @Override\r\n        public String getName() {\r\n            return userName;\r\n        }\r\n    });\r\n    HttpServletResponse r = Mockito.mock(HttpServletResponse.class);\r\n    UserGroupInformation user1 = UserGroupInformation.createUserForTesting(userName, GROUP_NAMES);\r\n    user1.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            f.doFilter(mockHsr, r, null);\r\n            return null;\r\n        }\r\n    });\r\n    String msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n    verify(r, times(0)).sendError(HttpServletResponse.SC_FORBIDDEN, msg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkFilterAllowNoOneWhenAdminAclsEmptyAndUserAclsEmpty",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void checkFilterAllowNoOneWhenAdminAclsEmptyAndUserAclsEmpty() throws ServletException, IOException, InterruptedException\n{\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_AUTH_ENABLED, \"true\");\r\n    TimelineReaderWhitelistAuthorizationFilter f = new TimelineReaderWhitelistAuthorizationFilter();\r\n    FilterConfig fc = new DummyFilterConfig(map);\r\n    f.init(fc);\r\n    HttpServletRequest mockHsr = Mockito.mock(HttpServletRequest.class);\r\n    String userName = \"user88\";\r\n    Mockito.when(mockHsr.getUserPrincipal()).thenReturn(new Principal() {\r\n\r\n        @Override\r\n        public String getName() {\r\n            return userName;\r\n        }\r\n    });\r\n    HttpServletResponse r = Mockito.mock(HttpServletResponse.class);\r\n    UserGroupInformation user1 = UserGroupInformation.createUserForTesting(userName, GROUP_NAMES);\r\n    user1.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            f.doFilter(mockHsr, r, null);\r\n            return null;\r\n        }\r\n    });\r\n    String msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n    Mockito.verify(r).sendError(eq(HttpServletResponse.SC_FORBIDDEN), eq(msg));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkFilterReadAuthDisabledNoAclSettings",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void checkFilterReadAuthDisabledNoAclSettings() throws ServletException, IOException, InterruptedException\n{\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    TimelineReaderWhitelistAuthorizationFilter f = new TimelineReaderWhitelistAuthorizationFilter();\r\n    FilterConfig fc = new DummyFilterConfig(map);\r\n    f.init(fc);\r\n    HttpServletRequest mockHsr = Mockito.mock(HttpServletRequest.class);\r\n    String userName = \"user437\";\r\n    Mockito.when(mockHsr.getUserPrincipal()).thenReturn(new Principal() {\r\n\r\n        @Override\r\n        public String getName() {\r\n            return userName;\r\n        }\r\n    });\r\n    HttpServletResponse r = Mockito.mock(HttpServletResponse.class);\r\n    UserGroupInformation user1 = UserGroupInformation.createUserForTesting(userName, GROUP_NAMES);\r\n    user1.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            f.doFilter(mockHsr, r, null);\r\n            return null;\r\n        }\r\n    });\r\n    String msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n    verify(r, times(0)).sendError(HttpServletResponse.SC_FORBIDDEN, msg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "checkFilterReadAuthDisabledButAclSettingsPopulated",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void checkFilterReadAuthDisabledButAclSettingsPopulated() throws ServletException, IOException, InterruptedException\n{\r\n    Map<String, String> map = new HashMap<String, String>();\r\n    map.put(YarnConfiguration.YARN_ADMIN_ACL, \"user1,user2 group9,group21\");\r\n    map.put(YarnConfiguration.TIMELINE_SERVICE_READ_ALLOWED_USERS, \"user27,user36 group5,group6\");\r\n    TimelineReaderWhitelistAuthorizationFilter f = new TimelineReaderWhitelistAuthorizationFilter();\r\n    FilterConfig fc = new DummyFilterConfig(map);\r\n    f.init(fc);\r\n    HttpServletRequest mockHsr = mock(HttpServletRequest.class);\r\n    String userName = \"user37\";\r\n    when(mockHsr.getUserPrincipal()).thenReturn(new Principal() {\r\n\r\n        @Override\r\n        public String getName() {\r\n            return \"user37\";\r\n        }\r\n    });\r\n    HttpServletResponse r = Mockito.mock(HttpServletResponse.class);\r\n    UserGroupInformation user1 = UserGroupInformation.createUserForTesting(userName, GROUP_NAMES);\r\n    user1.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            f.doFilter(mockHsr, r, null);\r\n            return null;\r\n        }\r\n    });\r\n    String msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n    verify(r, times(0)).sendError(HttpServletResponse.SC_FORBIDDEN, msg);\r\n    userName = \"user27\";\r\n    Mockito.when(mockHsr.getUserPrincipal()).thenReturn(new Principal() {\r\n\r\n        @Override\r\n        public String getName() {\r\n            return \"user27\";\r\n        }\r\n    });\r\n    HttpServletResponse r2 = Mockito.mock(HttpServletResponse.class);\r\n    UserGroupInformation user2 = UserGroupInformation.createUserForTesting(userName, GROUP_NAMES);\r\n    user2.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            f.doFilter(mockHsr, r2, null);\r\n            return null;\r\n        }\r\n    });\r\n    msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n    verify(r, times(0)).sendError(HttpServletResponse.SC_FORBIDDEN, msg);\r\n    userName = \"user2\";\r\n    Mockito.when(mockHsr.getUserPrincipal()).thenReturn(new Principal() {\r\n\r\n        @Override\r\n        public String getName() {\r\n            return \"user2\";\r\n        }\r\n    });\r\n    HttpServletResponse r3 = Mockito.mock(HttpServletResponse.class);\r\n    UserGroupInformation user3 = UserGroupInformation.createUserForTesting(userName, GROUP_NAMES);\r\n    user3.doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws Exception {\r\n            f.doFilter(mockHsr, r3, null);\r\n            return null;\r\n        }\r\n    });\r\n    msg = \"User \" + userName + \" is not allowed to read TimelineService V2 data.\";\r\n    verify(r, times(0)).sendError(HttpServletResponse.SC_FORBIDDEN, msg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testUIDEncodingDecoding",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testUIDEncodingDecoding() throws Exception\n{\r\n    TimelineReaderContext context = new TimelineReaderContext(\"!cluster\", \"!b*o*!xer\", \"oozie*\", null, null, null, null);\r\n    String uid = TimelineUIDConverter.FLOW_UID.encodeUID(context);\r\n    assertEquals(\"*!cluster!*!b**o***!xer!oozie**\", uid);\r\n    assertEquals(context, TimelineUIDConverter.FLOW_UID.decodeUID(uid));\r\n    context = new TimelineReaderContext(\"!cluster*\", \"!b*o!!x!*er\", \"*oozie!\", 123L, null, null, null);\r\n    uid = TimelineUIDConverter.FLOWRUN_UID.encodeUID(context);\r\n    assertEquals(\"*!cluster**!*!b**o*!*!x*!**er!**oozie*!!123\", uid);\r\n    assertEquals(context, TimelineUIDConverter.FLOWRUN_UID.decodeUID(uid));\r\n    context = new TimelineReaderContext(\"yarn_cluster\", \"root\", \"hive_join\", 1234L, \"application_1111111111_1111\", null, null);\r\n    uid = TimelineUIDConverter.APPLICATION_UID.encodeUID(context);\r\n    assertEquals(\"yarn_cluster!root!hive_join!1234!application_1111111111_1111\", uid);\r\n    assertEquals(context, TimelineUIDConverter.APPLICATION_UID.decodeUID(uid));\r\n    context = new TimelineReaderContext(\"yarn_cluster\", null, null, null, \"application_1111111111_1111\", null, null);\r\n    uid = TimelineUIDConverter.APPLICATION_UID.encodeUID(context);\r\n    assertEquals(\"yarn_cluster!application_1111111111_1111\", uid);\r\n    assertEquals(context, TimelineUIDConverter.APPLICATION_UID.decodeUID(uid));\r\n    context = new TimelineReaderContext(\"yarn_cluster\", \"root\", \"hive_join\", 1234L, \"application_1111111111_1111\", \"YARN_CONTAINER\", 12345L, \"container_1111111111_1111_01_000001\");\r\n    uid = TimelineUIDConverter.GENERIC_ENTITY_UID.encodeUID(context);\r\n    assertEquals(\"yarn_cluster!root!hive_join!1234!application_1111111111_1111!\" + \"YARN_CONTAINER!12345!container_1111111111_1111_01_000001\", uid);\r\n    assertEquals(context, TimelineUIDConverter.GENERIC_ENTITY_UID.decodeUID(uid));\r\n    context = new TimelineReaderContext(\"yarn_cluster\", null, null, null, \"application_1111111111_1111\", \"YARN_CONTAINER\", 54321L, \"container_1111111111_1111_01_000001\");\r\n    uid = TimelineUIDConverter.GENERIC_ENTITY_UID.encodeUID(context);\r\n    assertEquals(\"yarn_cluster!application_1111111111_1111!YARN_CONTAINER!\" + \"54321!container_1111111111_1111_01_000001\", uid);\r\n    assertEquals(context, TimelineUIDConverter.GENERIC_ENTITY_UID.decodeUID(uid));\r\n    context = new TimelineReaderContext(\"yarn_cluster\", null, null, null, null, \"YARN_CONTAINER\", 54321L, \"container_1111111111_1111_01_000001\", \"user1\");\r\n    uid = TimelineUIDConverter.SUB_APPLICATION_ENTITY_UID.encodeUID(context);\r\n    assertEquals(\"yarn_cluster!user1!YARN_CONTAINER!\" + \"54321!container_1111111111_1111_01_000001\", uid);\r\n    assertEquals(context, TimelineUIDConverter.SUB_APPLICATION_ENTITY_UID.decodeUID(uid));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testUIDNotProperlyEscaped",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testUIDNotProperlyEscaped() throws Exception\n{\r\n    try {\r\n        TimelineUIDConverter.FLOW_UID.decodeUID(\"*!cluster!*!b*o***!xer!oozie**\");\r\n        fail(\"UID not properly escaped. Exception should have been thrown.\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n    try {\r\n        TimelineUIDConverter.FLOW_UID.decodeUID(\"*!cluster!*!b**o***!xer!oozie*\");\r\n        fail(\"UID not properly escaped. Exception should have been thrown.\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n    try {\r\n        TimelineUIDConverter.FLOW_UID.decodeUID(\"*!cluster!*!b**o***xer!oozie*\");\r\n        fail(\"UID not properly escaped. Exception should have been thrown.\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n    assertNull(TimelineUIDConverter.FLOW_UID.decodeUID(\"!cluster!*!b**o***!xer!oozie**\"));\r\n    assertNull(TimelineUIDConverter.FLOW_UID.decodeUID(\"*!cluster!*!b**o**!xer!oozie**\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testTimelineCollectorMetrics",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testTimelineCollectorMetrics()\n{\r\n    Assert.assertNotNull(metrics);\r\n    Assert.assertEquals(10, metrics.getPutEntitiesSuccessLatency().getInterval());\r\n    Assert.assertEquals(10, metrics.getPutEntitiesFailureLatency().getInterval());\r\n    Assert.assertEquals(10, metrics.getAsyncPutEntitiesSuccessLatency().getInterval());\r\n    Assert.assertEquals(10, metrics.getAsyncPutEntitiesFailureLatency().getInterval());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    metrics = PerNodeAggTimelineCollectorMetrics.getInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown()\n{\r\n    PerNodeAggTimelineCollectorMetrics.destroy();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    TestFileSystemTimelineReaderImpl.initializeDataDirectory(ROOT_DIR);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    FileUtils.deleteDirectory(new File(ROOT_DIR));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "init",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void init() throws Exception\n{\r\n    try {\r\n        Configuration config = new YarnConfiguration();\r\n        config.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n        config.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n        config.set(YarnConfiguration.TIMELINE_SERVICE_READER_WEBAPP_ADDRESS, \"localhost:0\");\r\n        config.set(YarnConfiguration.RM_CLUSTER_ID, \"cluster1\");\r\n        config.setClass(YarnConfiguration.TIMELINE_SERVICE_READER_CLASS, FileSystemTimelineReaderImpl.class, TimelineReader.class);\r\n        config.set(FileSystemTimelineReaderImpl.TIMELINE_SERVICE_STORAGE_DIR_ROOT, ROOT_DIR);\r\n        config.setBoolean(YarnConfiguration.FILTER_ENTITY_LIST_BY_USER, true);\r\n        config.setBoolean(YarnConfiguration.YARN_ACL_ENABLE, true);\r\n        config.set(YarnConfiguration.YARN_ADMIN_ACL, ADMIN);\r\n        server = new TimelineReaderServer();\r\n        server.init(config);\r\n        server.start();\r\n        serverPort = server.getWebServerPort();\r\n    } catch (Exception e) {\r\n        Assert.fail(\"Web server failed to start\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stop() throws Exception\n{\r\n    if (server != null) {\r\n        server.stop();\r\n        server = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "verifyHttpResponse",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ClientResponse verifyHttpResponse(Client client, URI uri, Status expectedStatus)\n{\r\n    ClientResponse resp = client.resource(uri).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    assertNotNull(resp);\r\n    assertEquals(resp.getStatusInfo().getStatusCode(), expectedStatus.getStatusCode());\r\n    return resp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "createClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Client createClient()\n{\r\n    ClientConfig cfg = new DefaultClientConfig();\r\n    cfg.getClasses().add(YarnJacksonJaxbJsonProvider.class);\r\n    return new Client(new URLConnectionClientHandler(new DummyURLConnectionFactory()), cfg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testGetEntityTypes",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testGetEntityTypes() throws Exception\n{\r\n    Client client = createClient();\r\n    try {\r\n        String unAuthorizedUser = \"user2\";\r\n        URI uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/apps/app1/entity-types?user.name=\" + unAuthorizedUser);\r\n        String msg = \"User \" + unAuthorizedUser + \" is not allowed to read TimelineService V2 data.\";\r\n        ClientResponse resp = verifyHttpResponse(client, uri, Status.FORBIDDEN);\r\n        assertTrue(resp.getEntity(String.class).contains(msg));\r\n        String authorizedUser = \"user1\";\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/apps/app1/entity-types?user.name=\" + authorizedUser);\r\n        verifyHttpResponse(client, uri, Status.OK);\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/apps/app1/entity-types?user.name=\" + ADMIN);\r\n        verifyHttpResponse(client, uri, Status.OK);\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/apps/app1/entity-types?user.name=\" + authorizedUser + \"&userid=\" + authorizedUser);\r\n        verifyHttpResponse(client, uri, Status.OK);\r\n        uri = URI.create(\"http://localhost:\" + serverPort + \"/ws/v2/\" + \"timeline/apps/app1/entity-types?user.name=\" + authorizedUser + \"&userid=\" + unAuthorizedUser);\r\n        verifyHttpResponse(client, uri, Status.FORBIDDEN);\r\n    } finally {\r\n        client.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "generateTestEntities",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "TimelineEntities generateTestEntities(int groups, int entities)\n{\r\n    TimelineEntities te = new TimelineEntities();\r\n    for (int j = 0; j < groups; j++) {\r\n        for (int i = 0; i < entities; i++) {\r\n            TimelineEntity entity = new TimelineEntity();\r\n            String containerId = \"container_1000178881110_2002_\" + i;\r\n            entity.setId(containerId);\r\n            String entityType = \"TEST_\" + j;\r\n            entity.setType(entityType);\r\n            long cTime = 1425016501000L;\r\n            entity.setCreatedTime(cTime);\r\n            Set<TimelineMetric> metrics = new HashSet<>();\r\n            TimelineMetric m1 = new TimelineMetric();\r\n            m1.setId(\"HDFS_BYTES_WRITE\");\r\n            m1.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\r\n            long ts = System.currentTimeMillis();\r\n            m1.addValue(ts - 20000, 100L);\r\n            metrics.add(m1);\r\n            TimelineMetric m2 = new TimelineMetric();\r\n            m2.setId(\"VCORES_USED\");\r\n            m2.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\r\n            m2.addValue(ts - 20000, 3L);\r\n            metrics.add(m2);\r\n            TimelineMetric m3 = new TimelineMetric();\r\n            m3.setId(\"UNRELATED_VALUES\");\r\n            m3.addValue(ts - 20000, 3L);\r\n            metrics.add(m3);\r\n            TimelineMetric m4 = new TimelineMetric();\r\n            m4.setId(\"TXN_FINISH_TIME\");\r\n            m4.setRealtimeAggregationOp(TimelineMetricOperation.MAX);\r\n            m4.addValue(ts - 20000, i);\r\n            metrics.add(m4);\r\n            entity.addMetrics(metrics);\r\n            te.addEntity(entity);\r\n        }\r\n    }\r\n    return te;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testAggregation",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testAggregation() throws Exception\n{\r\n    int groups = 3;\r\n    int n = 50;\r\n    TimelineEntities testEntities = generateTestEntities(groups, n);\r\n    TimelineEntity resultEntity = TimelineCollector.aggregateEntities(testEntities, \"test_result\", \"TEST_AGGR\", true);\r\n    assertThat(resultEntity.getMetrics()).hasSize(groups * 3);\r\n    for (int i = 0; i < groups; i++) {\r\n        Set<TimelineMetric> metrics = resultEntity.getMetrics();\r\n        for (TimelineMetric m : metrics) {\r\n            if (m.getId().startsWith(\"HDFS_BYTES_WRITE\")) {\r\n                assertEquals(100 * n, m.getSingleDataValue().intValue());\r\n            } else if (m.getId().startsWith(\"VCORES_USED\")) {\r\n                assertEquals(3 * n, m.getSingleDataValue().intValue());\r\n            } else if (m.getId().startsWith(\"TXN_FINISH_TIME\")) {\r\n                assertEquals(n - 1, m.getSingleDataValue());\r\n            } else {\r\n                fail(\"Unrecognized metric! \" + m.getId());\r\n            }\r\n        }\r\n    }\r\n    TimelineEntities testEntities1 = generateTestEntities(1, n);\r\n    TimelineEntity resultEntity1 = TimelineCollector.aggregateEntities(testEntities1, \"test_result\", \"TEST_AGGR\", false);\r\n    assertThat(resultEntity1.getMetrics()).hasSize(3);\r\n    Set<TimelineMetric> metrics = resultEntity1.getMetrics();\r\n    for (TimelineMetric m : metrics) {\r\n        if (m.getId().equals(\"HDFS_BYTES_WRITE\")) {\r\n            assertEquals(100 * n, m.getSingleDataValue().intValue());\r\n        } else if (m.getId().equals(\"VCORES_USED\")) {\r\n            assertEquals(3 * n, m.getSingleDataValue().intValue());\r\n        } else if (m.getId().equals(\"TXN_FINISH_TIME\")) {\r\n            assertEquals(n - 1, m.getSingleDataValue());\r\n        } else {\r\n            fail(\"Unrecognized metric! \" + m.getId());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testPutEntity",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testPutEntity() throws IOException\n{\r\n    TimelineWriter writer = mock(TimelineWriter.class);\r\n    TimelineCollector collector = new TimelineCollectorForTest(writer);\r\n    TimelineEntities entities = generateTestEntities(1, 1);\r\n    collector.putEntities(entities, UserGroupInformation.createRemoteUser(\"test-user\"));\r\n    verify(writer, times(1)).write(any(TimelineCollectorContext.class), any(TimelineEntities.class), any(UserGroupInformation.class));\r\n    verify(writer, times(1)).flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testPutEntityAsync",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testPutEntityAsync() throws Exception\n{\r\n    TimelineWriter writer = mock(TimelineWriter.class);\r\n    TimelineCollector collector = new TimelineCollectorForTest(writer);\r\n    collector.init(new Configuration());\r\n    collector.start();\r\n    TimelineEntities entities = generateTestEntities(1, 1);\r\n    collector.putEntitiesAsync(entities, UserGroupInformation.createRemoteUser(\"test-user\"));\r\n    Thread.sleep(1000);\r\n    verify(writer, times(1)).write(any(TimelineCollectorContext.class), any(TimelineEntities.class), any(UserGroupInformation.class));\r\n    verify(writer, never()).flush();\r\n    collector.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testAsyncEntityDiscard",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testAsyncEntityDiscard() throws Exception\n{\r\n    TimelineWriter writer = mock(TimelineWriter.class);\r\n    when(writer.write(any(), any(), any())).thenAnswer(new AnswersWithDelay(500, new Returns(new TimelineWriteResponse())));\r\n    TimelineCollector collector = new TimelineCollectorForTest(writer);\r\n    Configuration config = new Configuration();\r\n    config.setInt(YarnConfiguration.TIMELINE_SERVICE_WRITER_ASYNC_QUEUE_CAPACITY, 3);\r\n    collector.init(config);\r\n    collector.start();\r\n    for (int i = 0; i < 10; ++i) {\r\n        TimelineEntities entities = generateTestEntities(i + 1, 1);\r\n        collector.putEntitiesAsync(entities, UserGroupInformation.createRemoteUser(\"test-user\"));\r\n    }\r\n    Thread.sleep(3000);\r\n    verify(writer, times(4)).write(any(TimelineCollectorContext.class), any(TimelineEntities.class), any(UserGroupInformation.class));\r\n    verify(writer, never()).flush();\r\n    collector.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testPutDomain",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testPutDomain() throws IOException\n{\r\n    TimelineWriter writer = mock(TimelineWriter.class);\r\n    TimelineCollector collector = new TimelineCollectorForTest(writer);\r\n    TimelineDomain domain = generateDomain(\"id\", \"desc\", \"owner\", \"reader1,reader2\", \"writer\", 0L, 1L);\r\n    collector.putDomain(domain, UserGroupInformation.createRemoteUser(\"owner\"));\r\n    verify(writer, times(1)).write(any(TimelineCollectorContext.class), any(TimelineDomain.class));\r\n    verify(writer, times(1)).flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "generateDomain",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "TimelineDomain generateDomain(String id, String desc, String owner, String reader, String writer, Long cTime, Long mTime)\n{\r\n    TimelineDomain domain = new TimelineDomain();\r\n    domain.setId(id);\r\n    domain.setDescription(desc);\r\n    domain.setOwner(owner);\r\n    domain.setReaders(reader);\r\n    domain.setWriters(writer);\r\n    domain.setCreatedTime(cTime);\r\n    domain.setModifiedTime(mTime);\r\n    return domain;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "createEntity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineEntity createEntity(String id, String type)\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setId(id);\r\n    entity.setType(type);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "createDummyMetric",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineMetric createDummyMetric(long ts, Long value)\n{\r\n    TimelineMetric metric = new TimelineMetric();\r\n    metric.setId(\"dummy_metric\");\r\n    metric.addValue(ts, value);\r\n    metric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\r\n    return metric;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testClearPreviousEntitiesOnAggregation",
  "errType" : null,
  "containingMethodsNum" : 29,
  "sourceCodeText" : "void testClearPreviousEntitiesOnAggregation() throws Exception\n{\r\n    final long ts = System.currentTimeMillis();\r\n    TimelineCollector collector = new TimelineCollector(\"\") {\r\n\r\n        @Override\r\n        public TimelineCollectorContext getTimelineEntityContext() {\r\n            return new TimelineCollectorContext(\"cluster\", \"user\", \"flow\", \"1\", 1L, ApplicationId.newInstance(ts, 1).toString());\r\n        }\r\n    };\r\n    collector.init(new Configuration());\r\n    collector.setWriter(mock(TimelineWriter.class));\r\n    TimelineEntities entities = new TimelineEntities();\r\n    for (int i = 1; i <= 5; i++) {\r\n        TimelineEntity entity = createEntity(\"e\" + i, \"type\");\r\n        entity.addMetric(createDummyMetric(ts + i, Long.valueOf(i * 50)));\r\n        entities.addEntity(entity);\r\n    }\r\n    collector.putEntities(entities, UserGroupInformation.getCurrentUser());\r\n    TimelineCollectorContext currContext = collector.getTimelineEntityContext();\r\n    Map<String, AggregationStatusTable> aggregationGroups = collector.getAggregationGroups();\r\n    assertEquals(Sets.newHashSet(\"type\"), aggregationGroups.keySet());\r\n    TimelineEntity aggregatedEntity = TimelineCollector.aggregateWithoutGroupId(aggregationGroups, currContext.getAppId(), TimelineEntityType.YARN_APPLICATION.toString());\r\n    TimelineMetric aggregatedMetric = aggregatedEntity.getMetrics().iterator().next();\r\n    assertEquals(750L, aggregatedMetric.getValues().values().iterator().next());\r\n    assertEquals(TimelineMetricOperation.SUM, aggregatedMetric.getRealtimeAggregationOp());\r\n    aggregatedEntity = TimelineCollector.aggregateWithoutGroupId(aggregationGroups, currContext.getAppId(), TimelineEntityType.YARN_APPLICATION.toString());\r\n    aggregatedMetric = aggregatedEntity.getMetrics().iterator().next();\r\n    assertTrue(aggregatedMetric.getValues().isEmpty());\r\n    assertEquals(TimelineMetricOperation.NOP, aggregatedMetric.getRealtimeAggregationOp());\r\n    entities = new TimelineEntities();\r\n    for (int i = 1; i <= 3; i++) {\r\n        TimelineEntity entity = createEntity(\"e\" + i, \"type\");\r\n        entity.addMetric(createDummyMetric(System.currentTimeMillis() + i, 50L));\r\n        entities.addEntity(entity);\r\n    }\r\n    aggregationGroups = collector.getAggregationGroups();\r\n    collector.putEntities(entities, UserGroupInformation.getCurrentUser());\r\n    aggregatedEntity = TimelineCollector.aggregateWithoutGroupId(aggregationGroups, currContext.getAppId(), TimelineEntityType.YARN_APPLICATION.toString());\r\n    aggregatedMetric = aggregatedEntity.getMetrics().iterator().next();\r\n    assertEquals(150L, aggregatedMetric.getValues().values().iterator().next());\r\n    assertEquals(TimelineMetricOperation.SUM, aggregatedMetric.getRealtimeAggregationOp());\r\n    collector.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    collectorManager = createCollectorManager();\r\n    Configuration conf = new YarnConfiguration();\r\n    conf.setClass(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS, FileSystemTimelineWriterImpl.class, TimelineWriter.class);\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_COLLECTOR_BIND_PORT_RANGES, \"30000-30100\");\r\n    collectorManager.init(conf);\r\n    collectorManager.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (collectorManager != null) {\r\n        collectorManager.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testStartingWriterFlusher",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testStartingWriterFlusher() throws Exception\n{\r\n    assertTrue(collectorManager.writerFlusherRunning());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testStartWebApp",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testStartWebApp() throws Exception\n{\r\n    assertNotNull(collectorManager.getRestServerBindAddress());\r\n    String address = collectorManager.getRestServerBindAddress();\r\n    String[] parts = address.split(\":\");\r\n    assertEquals(2, parts.length);\r\n    assertNotNull(parts[0]);\r\n    assertTrue(Integer.valueOf(parts[1]) >= 30000 && Integer.valueOf(parts[1]) <= 30100);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testMultithreadedAdd",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testMultithreadedAdd() throws Exception\n{\r\n    final int numApps = 5;\r\n    List<Callable<Boolean>> tasks = new ArrayList<Callable<Boolean>>();\r\n    for (int i = 0; i < numApps; i++) {\r\n        final ApplicationId appId = ApplicationId.newInstance(0L, i);\r\n        Callable<Boolean> task = new Callable<Boolean>() {\r\n\r\n            public Boolean call() {\r\n                AppLevelTimelineCollector collector = new AppLevelTimelineCollectorWithAgg(appId, \"user\");\r\n                return (collectorManager.putIfAbsent(appId, collector) == collector);\r\n            }\r\n        };\r\n        tasks.add(task);\r\n    }\r\n    ExecutorService executor = Executors.newFixedThreadPool(numApps);\r\n    try {\r\n        List<Future<Boolean>> futures = executor.invokeAll(tasks);\r\n        for (Future<Boolean> future : futures) {\r\n            assertTrue(future.get());\r\n        }\r\n    } finally {\r\n        executor.shutdownNow();\r\n    }\r\n    for (int i = 0; i < numApps; i++) {\r\n        final ApplicationId appId = ApplicationId.newInstance(0L, i);\r\n        assertTrue(collectorManager.containsTimelineCollector(appId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "testMultithreadedAddAndRemove",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testMultithreadedAddAndRemove() throws Exception\n{\r\n    final int numApps = 5;\r\n    List<Callable<Boolean>> tasks = new ArrayList<Callable<Boolean>>();\r\n    for (int i = 0; i < numApps; i++) {\r\n        final ApplicationId appId = ApplicationId.newInstance(0L, i);\r\n        Callable<Boolean> task = new Callable<Boolean>() {\r\n\r\n            public Boolean call() {\r\n                AppLevelTimelineCollector collector = new AppLevelTimelineCollectorWithAgg(appId, \"user\");\r\n                boolean successPut = (collectorManager.putIfAbsent(appId, collector) == collector);\r\n                return successPut && collectorManager.remove(appId);\r\n            }\r\n        };\r\n        tasks.add(task);\r\n    }\r\n    ExecutorService executor = Executors.newFixedThreadPool(numApps);\r\n    try {\r\n        List<Future<Boolean>> futures = executor.invokeAll(tasks);\r\n        for (Future<Boolean> future : futures) {\r\n            assertTrue(future.get());\r\n        }\r\n    } finally {\r\n        executor.shutdownNow();\r\n    }\r\n    for (int i = 0; i < numApps; i++) {\r\n        final ApplicationId appId = ApplicationId.newInstance(0L, i);\r\n        assertFalse(collectorManager.containsTimelineCollector(appId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\collector",
  "methodName" : "createCollectorManager",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "NodeTimelineCollectorManager createCollectorManager()\n{\r\n    final NodeTimelineCollectorManager cm = spy(new NodeTimelineCollectorManager());\r\n    CollectorNodemanagerProtocol nmCollectorService = mock(CollectorNodemanagerProtocol.class);\r\n    GetTimelineCollectorContextResponse response = GetTimelineCollectorContextResponse.newInstance(null, null, null, 0L);\r\n    try {\r\n        when(nmCollectorService.getTimelineCollectorContext(any(GetTimelineCollectorContextRequest.class))).thenReturn(response);\r\n    } catch (YarnException | IOException e) {\r\n        fail();\r\n    }\r\n    doReturn(nmCollectorService).when(cm).getNMCollectorService();\r\n    return cm;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testSplitUsingEscapeAndDelimChar",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testSplitUsingEscapeAndDelimChar() throws Exception\n{\r\n    List<String> list = TimelineReaderUtils.split(\"*!cluster!*!b**o***!xer!oozie**\", '!', '*');\r\n    String[] arr = new String[list.size()];\r\n    arr = list.toArray(arr);\r\n    assertArrayEquals(new String[] { \"!cluster\", \"!b*o*!xer\", \"oozie*\" }, arr);\r\n    list = TimelineReaderUtils.split(\"*!cluster!*!b**o***!xer!!\", '!', '*');\r\n    arr = new String[list.size()];\r\n    arr = list.toArray(arr);\r\n    assertArrayEquals(new String[] { \"!cluster\", \"!b*o*!xer\", \"\", \"\" }, arr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\reader",
  "methodName" : "testJoinAndEscapeStrings",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testJoinAndEscapeStrings() throws Exception\n{\r\n    assertEquals(\"*!cluster!*!b**o***!xer!oozie**\", TimelineReaderUtils.joinAndEscapeStrings(new String[] { \"!cluster\", \"!b*o*!xer\", \"oozie*\" }, '!', '*'));\r\n    assertEquals(\"*!cluster!*!b**o***!xer!!\", TimelineReaderUtils.joinAndEscapeStrings(new String[] { \"!cluster\", \"!b*o*!xer\", \"\", \"\" }, '!', '*'));\r\n    assertNull(TimelineReaderUtils.joinAndEscapeStrings(new String[] { \"!cluster\", \"!b*o*!xer\", null, \"\" }, '!', '*'));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]