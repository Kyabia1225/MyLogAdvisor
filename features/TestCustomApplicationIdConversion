[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testConvertAplicationIdToString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testConvertAplicationIdToString()\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(0, 1);\r\n    String applicationIdStr = HBaseTimelineSchemaUtils.convertApplicationIdToString(applicationId);\r\n    Assert.assertEquals(applicationId, ApplicationId.fromString(applicationIdStr));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testAppIdKeyConverter",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testAppIdKeyConverter()\n{\r\n    AppIdKeyConverter appIdKeyConverter = new AppIdKeyConverter();\r\n    long currentTs = System.currentTimeMillis();\r\n    ApplicationId appId1 = ApplicationId.newInstance(currentTs, 1);\r\n    ApplicationId appId2 = ApplicationId.newInstance(currentTs, 2);\r\n    ApplicationId appId3 = ApplicationId.newInstance(currentTs + 300, 1);\r\n    String appIdStr1 = appId1.toString();\r\n    String appIdStr2 = appId2.toString();\r\n    String appIdStr3 = appId3.toString();\r\n    byte[] appIdBytes1 = appIdKeyConverter.encode(appIdStr1);\r\n    byte[] appIdBytes2 = appIdKeyConverter.encode(appIdStr2);\r\n    byte[] appIdBytes3 = appIdKeyConverter.encode(appIdStr3);\r\n    assertTrue(\"Ordering of app ids' is incorrect\", Bytes.compareTo(appIdBytes1, appIdBytes2) > 0 && Bytes.compareTo(appIdBytes1, appIdBytes3) > 0 && Bytes.compareTo(appIdBytes2, appIdBytes3) > 0);\r\n    String decodedAppId1 = appIdKeyConverter.decode(appIdBytes1);\r\n    String decodedAppId2 = appIdKeyConverter.decode(appIdBytes2);\r\n    String decodedAppId3 = appIdKeyConverter.decode(appIdBytes3);\r\n    assertTrue(\"Decoded app id is not same as the app id encoded\", appIdStr1.equals(decodedAppId1));\r\n    assertTrue(\"Decoded app id is not same as the app id encoded\", appIdStr2.equals(decodedAppId2));\r\n    assertTrue(\"Decoded app id is not same as the app id encoded\", appIdStr3.equals(decodedAppId3));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testEventColumnNameConverter",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testEventColumnNameConverter()\n{\r\n    String eventId = \"=foo_=eve=nt=\";\r\n    byte[] valSepBytes = Bytes.toBytes(Separator.VALUES.getValue());\r\n    byte[] maxByteArr = Bytes.createMaxByteArray(Bytes.SIZEOF_LONG - valSepBytes.length);\r\n    byte[] ts = Bytes.add(valSepBytes, maxByteArr);\r\n    Long eventTs = Bytes.toLong(ts);\r\n    byte[] byteEventColName = new EventColumnName(eventId, eventTs, null).getColumnQualifier();\r\n    KeyConverter<EventColumnName> eventColumnNameConverter = new EventColumnNameConverter();\r\n    EventColumnName eventColName = eventColumnNameConverter.decode(byteEventColName);\r\n    assertEquals(eventId, eventColName.getId());\r\n    assertEquals(eventTs, eventColName.getTimestamp());\r\n    assertNull(eventColName.getInfoKey());\r\n    String infoKey = \"f=oo_event_in=fo=_key\";\r\n    byteEventColName = new EventColumnName(eventId, eventTs, infoKey).getColumnQualifier();\r\n    eventColName = eventColumnNameConverter.decode(byteEventColName);\r\n    assertEquals(eventId, eventColName.getId());\r\n    assertEquals(eventTs, eventColName.getTimestamp());\r\n    assertEquals(infoKey, eventColName.getInfoKey());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testLongKeyConverter",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testLongKeyConverter()\n{\r\n    LongKeyConverter longKeyConverter = new LongKeyConverter();\r\n    confirmLongKeyConverter(longKeyConverter, Long.MIN_VALUE);\r\n    confirmLongKeyConverter(longKeyConverter, -1234567890L);\r\n    confirmLongKeyConverter(longKeyConverter, -128L);\r\n    confirmLongKeyConverter(longKeyConverter, -127L);\r\n    confirmLongKeyConverter(longKeyConverter, -1L);\r\n    confirmLongKeyConverter(longKeyConverter, 0L);\r\n    confirmLongKeyConverter(longKeyConverter, 1L);\r\n    confirmLongKeyConverter(longKeyConverter, 127L);\r\n    confirmLongKeyConverter(longKeyConverter, 128L);\r\n    confirmLongKeyConverter(longKeyConverter, 1234567890L);\r\n    confirmLongKeyConverter(longKeyConverter, Long.MAX_VALUE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "confirmLongKeyConverter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void confirmLongKeyConverter(LongKeyConverter longKeyConverter, Long testValue)\n{\r\n    Long decoded = longKeyConverter.decode(longKeyConverter.encode(testValue));\r\n    assertEquals(testValue, decoded);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testStringKeyConverter",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testStringKeyConverter()\n{\r\n    StringKeyConverter stringKeyConverter = new StringKeyConverter();\r\n    String phrase = \"QuackAttack now!\";\r\n    for (int i = 0; i < phrase.length(); i++) {\r\n        String sub = phrase.substring(i, phrase.length());\r\n        confirmStrignKeyConverter(stringKeyConverter, sub);\r\n        confirmStrignKeyConverter(stringKeyConverter, sub + sub);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "confirmStrignKeyConverter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void confirmStrignKeyConverter(StringKeyConverter stringKeyConverter, String testValue)\n{\r\n    String decoded = stringKeyConverter.decode(stringKeyConverter.encode(testValue));\r\n    assertEquals(testValue, decoded);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "verifyRowPrefixBytes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void verifyRowPrefixBytes(byte[] byteRowKeyPrefix)\n{\r\n    int sepLen = QUALIFIER_SEP_BYTES.length;\r\n    for (int i = 0; i < sepLen; i++) {\r\n        assertTrue(\"Row key prefix not encoded properly.\", byteRowKeyPrefix[byteRowKeyPrefix.length - sepLen + i] == QUALIFIER_SEP_BYTES[i]);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testApplicationRowKey",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testApplicationRowKey()\n{\r\n    byte[] byteRowKey = new ApplicationRowKey(CLUSTER, USER, FLOW_NAME, FLOW_RUN_ID, APPLICATION_ID).getRowKey();\r\n    ApplicationRowKey rowKey = ApplicationRowKey.parseRowKey(byteRowKey);\r\n    assertEquals(CLUSTER, rowKey.getClusterId());\r\n    assertEquals(USER, rowKey.getUserId());\r\n    assertEquals(FLOW_NAME, rowKey.getFlowName());\r\n    assertEquals(FLOW_RUN_ID, rowKey.getFlowRunId());\r\n    assertEquals(APPLICATION_ID, rowKey.getAppId());\r\n    byte[] byteRowKeyPrefix = new ApplicationRowKeyPrefix(CLUSTER, USER, FLOW_NAME, FLOW_RUN_ID).getRowKeyPrefix();\r\n    byte[][] splits = Separator.QUALIFIERS.split(byteRowKeyPrefix, new int[] { Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, Bytes.SIZEOF_LONG, Separator.VARIABLE_SIZE });\r\n    assertEquals(5, splits.length);\r\n    assertEquals(0, splits[4].length);\r\n    assertEquals(FLOW_NAME, Separator.QUALIFIERS.decode(Bytes.toString(splits[2])));\r\n    assertEquals(FLOW_RUN_ID, (Long) LongConverter.invertLong(Bytes.toLong(splits[3])));\r\n    verifyRowPrefixBytes(byteRowKeyPrefix);\r\n    byteRowKeyPrefix = new ApplicationRowKeyPrefix(CLUSTER, USER, FLOW_NAME).getRowKeyPrefix();\r\n    splits = Separator.QUALIFIERS.split(byteRowKeyPrefix, new int[] { Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE });\r\n    assertEquals(4, splits.length);\r\n    assertEquals(0, splits[3].length);\r\n    assertEquals(FLOW_NAME, Separator.QUALIFIERS.decode(Bytes.toString(splits[2])));\r\n    verifyRowPrefixBytes(byteRowKeyPrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testAppToFlowRowKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testAppToFlowRowKey()\n{\r\n    byte[] byteRowKey = new AppToFlowRowKey(APPLICATION_ID).getRowKey();\r\n    AppToFlowRowKey rowKey = AppToFlowRowKey.parseRowKey(byteRowKey);\r\n    assertEquals(APPLICATION_ID, rowKey.getAppId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testEntityRowKey",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testEntityRowKey()\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setId(\"!ent!ity!!id!\");\r\n    entity.setType(\"entity!Type\");\r\n    entity.setIdPrefix(54321);\r\n    byte[] byteRowKey = new EntityRowKey(CLUSTER, USER, FLOW_NAME, FLOW_RUN_ID, APPLICATION_ID, entity.getType(), entity.getIdPrefix(), entity.getId()).getRowKey();\r\n    EntityRowKey rowKey = EntityRowKey.parseRowKey(byteRowKey);\r\n    assertEquals(CLUSTER, rowKey.getClusterId());\r\n    assertEquals(USER, rowKey.getUserId());\r\n    assertEquals(FLOW_NAME, rowKey.getFlowName());\r\n    assertEquals(FLOW_RUN_ID, rowKey.getFlowRunId());\r\n    assertEquals(APPLICATION_ID, rowKey.getAppId());\r\n    assertEquals(entity.getType(), rowKey.getEntityType());\r\n    assertEquals(entity.getIdPrefix(), rowKey.getEntityIdPrefix().longValue());\r\n    assertEquals(entity.getId(), rowKey.getEntityId());\r\n    byte[] byteRowKeyPrefix = new EntityRowKeyPrefix(CLUSTER, USER, FLOW_NAME, FLOW_RUN_ID, APPLICATION_ID, entity.getType(), null, null).getRowKeyPrefix();\r\n    byte[][] splits = Separator.QUALIFIERS.split(byteRowKeyPrefix, new int[] { Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, Bytes.SIZEOF_LONG, AppIdKeyConverter.getKeySize(), Separator.VARIABLE_SIZE, Bytes.SIZEOF_LONG, Separator.VARIABLE_SIZE });\r\n    assertEquals(7, splits.length);\r\n    assertEquals(APPLICATION_ID, new AppIdKeyConverter().decode(splits[4]));\r\n    assertEquals(entity.getType(), Separator.QUALIFIERS.decode(Bytes.toString(splits[5])));\r\n    verifyRowPrefixBytes(byteRowKeyPrefix);\r\n    byteRowKeyPrefix = new EntityRowKeyPrefix(CLUSTER, USER, FLOW_NAME, FLOW_RUN_ID, APPLICATION_ID).getRowKeyPrefix();\r\n    splits = Separator.QUALIFIERS.split(byteRowKeyPrefix, new int[] { Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, Bytes.SIZEOF_LONG, AppIdKeyConverter.getKeySize(), Separator.VARIABLE_SIZE });\r\n    assertEquals(6, splits.length);\r\n    assertEquals(0, splits[5].length);\r\n    AppIdKeyConverter appIdKeyConverter = new AppIdKeyConverter();\r\n    assertEquals(APPLICATION_ID, appIdKeyConverter.decode(splits[4]));\r\n    verifyRowPrefixBytes(byteRowKeyPrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testFlowActivityRowKey",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testFlowActivityRowKey()\n{\r\n    Long ts = 1459900830000L;\r\n    Long dayTimestamp = HBaseTimelineSchemaUtils.getTopOfTheDayTimestamp(ts);\r\n    byte[] byteRowKey = new FlowActivityRowKey(CLUSTER, ts, USER, FLOW_NAME).getRowKey();\r\n    FlowActivityRowKey rowKey = FlowActivityRowKey.parseRowKey(byteRowKey);\r\n    assertEquals(CLUSTER, rowKey.getClusterId());\r\n    assertEquals(dayTimestamp, rowKey.getDayTimestamp());\r\n    assertEquals(USER, rowKey.getUserId());\r\n    assertEquals(FLOW_NAME, rowKey.getFlowName());\r\n    byte[] byteRowKeyPrefix = new FlowActivityRowKeyPrefix(CLUSTER).getRowKeyPrefix();\r\n    byte[][] splits = Separator.QUALIFIERS.split(byteRowKeyPrefix, new int[] { Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE });\r\n    assertEquals(2, splits.length);\r\n    assertEquals(0, splits[1].length);\r\n    assertEquals(CLUSTER, Separator.QUALIFIERS.decode(Bytes.toString(splits[0])));\r\n    verifyRowPrefixBytes(byteRowKeyPrefix);\r\n    byteRowKeyPrefix = new FlowActivityRowKeyPrefix(CLUSTER, ts).getRowKeyPrefix();\r\n    splits = Separator.QUALIFIERS.split(byteRowKeyPrefix, new int[] { Separator.VARIABLE_SIZE, Bytes.SIZEOF_LONG, Separator.VARIABLE_SIZE });\r\n    assertEquals(3, splits.length);\r\n    assertEquals(0, splits[2].length);\r\n    assertEquals(CLUSTER, Separator.QUALIFIERS.decode(Bytes.toString(splits[0])));\r\n    assertEquals(ts, (Long) LongConverter.invertLong(Bytes.toLong(splits[1])));\r\n    verifyRowPrefixBytes(byteRowKeyPrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testFlowRunRowKey",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testFlowRunRowKey()\n{\r\n    byte[] byteRowKey = new FlowRunRowKey(CLUSTER, USER, FLOW_NAME, FLOW_RUN_ID).getRowKey();\r\n    FlowRunRowKey rowKey = FlowRunRowKey.parseRowKey(byteRowKey);\r\n    assertEquals(CLUSTER, rowKey.getClusterId());\r\n    assertEquals(USER, rowKey.getUserId());\r\n    assertEquals(FLOW_NAME, rowKey.getFlowName());\r\n    assertEquals(FLOW_RUN_ID, rowKey.getFlowRunId());\r\n    byte[] byteRowKeyPrefix = new FlowRunRowKey(CLUSTER, USER, FLOW_NAME, null).getRowKey();\r\n    byte[][] splits = Separator.QUALIFIERS.split(byteRowKeyPrefix, new int[] { Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE });\r\n    assertEquals(4, splits.length);\r\n    assertEquals(0, splits[3].length);\r\n    assertEquals(FLOW_NAME, Separator.QUALIFIERS.decode(Bytes.toString(splits[2])));\r\n    verifyRowPrefixBytes(byteRowKeyPrefix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testSubAppRowKey",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testSubAppRowKey()\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setId(\"entity1\");\r\n    entity.setType(\"DAG\");\r\n    entity.setIdPrefix(54321);\r\n    byte[] byteRowKey = new SubApplicationRowKey(SUB_APP_USER, CLUSTER, entity.getType(), entity.getIdPrefix(), entity.getId(), USER).getRowKey();\r\n    SubApplicationRowKey rowKey = SubApplicationRowKey.parseRowKey(byteRowKey);\r\n    assertEquals(CLUSTER, rowKey.getClusterId());\r\n    assertEquals(SUB_APP_USER, rowKey.getSubAppUserId());\r\n    assertEquals(entity.getType(), rowKey.getEntityType());\r\n    assertEquals(entity.getIdPrefix(), rowKey.getEntityIdPrefix().longValue());\r\n    assertEquals(entity.getId(), rowKey.getEntityId());\r\n    assertEquals(USER, rowKey.getUserId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testDomainRowKey",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testDomainRowKey()\n{\r\n    String clusterId = \"cluster1@dc1\";\r\n    String domainId = \"helloworld\";\r\n    byte[] byteRowKey = new DomainRowKey(clusterId, domainId).getRowKey();\r\n    DomainRowKey rowKey = DomainRowKey.parseRowKey(byteRowKey);\r\n    assertEquals(clusterId, rowKey.getClusterId());\r\n    assertEquals(domainId, rowKey.getDomainId());\r\n    String rowKeyStr = rowKey.getRowKeyAsString();\r\n    DomainRowKey drk = DomainRowKey.parseRowKeyFromString(rowKeyStr);\r\n    assertEquals(drk.getClusterId(), rowKey.getClusterId());\r\n    assertEquals(drk.getDomainId(), rowKey.getDomainId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testDomainRowKeySpecialChars",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testDomainRowKeySpecialChars()\n{\r\n    String clusterId = \"cluster1!temp!dc1\";\r\n    String domainId = \"hello=world\";\r\n    byte[] byteRowKey = new DomainRowKey(clusterId, domainId).getRowKey();\r\n    DomainRowKey rowKey = DomainRowKey.parseRowKey(byteRowKey);\r\n    assertEquals(clusterId, rowKey.getClusterId());\r\n    assertEquals(domainId, rowKey.getDomainId());\r\n    String rowKeyStr = rowKey.getRowKeyAsString();\r\n    DomainRowKey drk = DomainRowKey.parseRowKeyFromString(rowKeyStr);\r\n    assertEquals(drk.getClusterId(), rowKey.getClusterId());\r\n    assertEquals(drk.getDomainId(), rowKey.getDomainId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testEncodeDecodeString",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testEncodeDecodeString()\n{\r\n    for (Separator separator : Separator.values()) {\r\n        testEncodeDecode(separator, \"\");\r\n        testEncodeDecode(separator, \" \");\r\n        testEncodeDecode(separator, \"!\");\r\n        testEncodeDecode(separator, \"?\");\r\n        testEncodeDecode(separator, \"&\");\r\n        testEncodeDecode(separator, \"+\");\r\n        testEncodeDecode(separator, \"\\t\");\r\n        testEncodeDecode(separator, \"Dr.\");\r\n        testEncodeDecode(separator, \"Heinz\");\r\n        testEncodeDecode(separator, \"Doofenshmirtz\");\r\n        testEncodeDecode(separator, villain);\r\n        testEncodeDecode(separator, special);\r\n        assertNull(separator.encode(null));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testEncodeDecode",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testEncodeDecode(Separator separator, String token)\n{\r\n    String encoded = separator.encode(token);\r\n    String decoded = separator.decode(encoded);\r\n    String msg = \"token:\" + token + \" separator:\" + separator + \".\";\r\n    assertEquals(msg, token, decoded);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testEncodeDecode",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testEncodeDecode()\n{\r\n    testEncodeDecode(\"Dr.\", Separator.QUALIFIERS);\r\n    testEncodeDecode(\"Heinz\", Separator.QUALIFIERS, Separator.QUALIFIERS);\r\n    testEncodeDecode(\"Doofenshmirtz\", Separator.QUALIFIERS, null, Separator.QUALIFIERS);\r\n    testEncodeDecode(\"&Perry\", Separator.QUALIFIERS, Separator.VALUES, null);\r\n    testEncodeDecode(\"the \", Separator.QUALIFIERS, Separator.SPACE);\r\n    testEncodeDecode(\"Platypus...\", (Separator) null);\r\n    testEncodeDecode(\"The what now ?!?\", Separator.QUALIFIERS, Separator.VALUES, Separator.SPACE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testEncodedValues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testEncodedValues()\n{\r\n    testEncodeDecode(\"Double-escape %2$ and %9$ or %%2$ or %%3$, nor  %%%2$\" + \"= no problem!\", Separator.QUALIFIERS, Separator.VALUES, Separator.SPACE, Separator.TAB);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testSplits",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 44,
  "sourceCodeText" : "void testSplits()\n{\r\n    byte[] maxLongBytes = Bytes.toBytes(Long.MAX_VALUE);\r\n    byte[] maxIntBytes = Bytes.toBytes(Integer.MAX_VALUE);\r\n    for (Separator separator : Separator.values()) {\r\n        String str1 = \"cl\" + separator.getValue() + \"us\";\r\n        String str2 = separator.getValue() + \"rst\";\r\n        byte[] sepByteArr = Bytes.toBytes(separator.getValue());\r\n        byte[] longVal1Arr = Bytes.add(sepByteArr, Bytes.copy(maxLongBytes, sepByteArr.length, Bytes.SIZEOF_LONG - sepByteArr.length));\r\n        byte[] intVal1Arr = Bytes.add(sepByteArr, Bytes.copy(maxIntBytes, sepByteArr.length, Bytes.SIZEOF_INT - sepByteArr.length));\r\n        byte[] arr = separator.join(Bytes.toBytes(separator.encode(str1)), longVal1Arr, Bytes.toBytes(separator.encode(str2)), intVal1Arr);\r\n        int[] sizes = { Separator.VARIABLE_SIZE, Bytes.SIZEOF_LONG, Separator.VARIABLE_SIZE, Bytes.SIZEOF_INT };\r\n        byte[][] splits = separator.split(arr, sizes);\r\n        assertEquals(4, splits.length);\r\n        assertEquals(str1, separator.decode(Bytes.toString(splits[0])));\r\n        assertEquals(Bytes.toLong(longVal1Arr), Bytes.toLong(splits[1]));\r\n        assertEquals(str2, separator.decode(Bytes.toString(splits[2])));\r\n        assertEquals(Bytes.toInt(intVal1Arr), Bytes.toInt(splits[3]));\r\n        longVal1Arr = Bytes.add(Bytes.copy(maxLongBytes, 0, Bytes.SIZEOF_LONG - sepByteArr.length), sepByteArr);\r\n        intVal1Arr = Bytes.add(Bytes.copy(maxIntBytes, 0, Bytes.SIZEOF_INT - sepByteArr.length), sepByteArr);\r\n        arr = separator.join(Bytes.toBytes(separator.encode(str1)), longVal1Arr, Bytes.toBytes(separator.encode(str2)), intVal1Arr);\r\n        splits = separator.split(arr, sizes);\r\n        assertEquals(4, splits.length);\r\n        assertEquals(str1, separator.decode(Bytes.toString(splits[0])));\r\n        assertEquals(Bytes.toLong(longVal1Arr), Bytes.toLong(splits[1]));\r\n        assertEquals(str2, separator.decode(Bytes.toString(splits[2])));\r\n        assertEquals(Bytes.toInt(intVal1Arr), Bytes.toInt(splits[3]));\r\n        longVal1Arr = Bytes.add(sepByteArr, Bytes.copy(maxLongBytes, sepByteArr.length, 4 - sepByteArr.length), sepByteArr);\r\n        longVal1Arr = Bytes.add(longVal1Arr, Bytes.copy(maxLongBytes, 4, 3 - sepByteArr.length), sepByteArr);\r\n        arr = separator.join(Bytes.toBytes(separator.encode(str1)), longVal1Arr, Bytes.toBytes(separator.encode(str2)), intVal1Arr);\r\n        splits = separator.split(arr, sizes);\r\n        assertEquals(4, splits.length);\r\n        assertEquals(str1, separator.decode(Bytes.toString(splits[0])));\r\n        assertEquals(Bytes.toLong(longVal1Arr), Bytes.toLong(splits[1]));\r\n        assertEquals(str2, separator.decode(Bytes.toString(splits[2])));\r\n        assertEquals(Bytes.toInt(intVal1Arr), Bytes.toInt(splits[3]));\r\n        arr = separator.join(Bytes.toBytes(separator.encode(str1)), Bytes.toBytes(separator.encode(str2)), intVal1Arr, longVal1Arr);\r\n        int[] sizes1 = { Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, Bytes.SIZEOF_INT, Bytes.SIZEOF_LONG };\r\n        splits = separator.split(arr, sizes1);\r\n        assertEquals(4, splits.length);\r\n        assertEquals(str1, separator.decode(Bytes.toString(splits[0])));\r\n        assertEquals(str2, separator.decode(Bytes.toString(splits[1])));\r\n        assertEquals(Bytes.toInt(intVal1Arr), Bytes.toInt(splits[2]));\r\n        assertEquals(Bytes.toLong(longVal1Arr), Bytes.toLong(splits[3]));\r\n        try {\r\n            int[] sizes2 = { Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, Bytes.SIZEOF_INT, 7 };\r\n            splits = separator.split(arr, sizes2);\r\n            fail(\"Exception should have been thrown.\");\r\n        } catch (IllegalArgumentException e) {\r\n        }\r\n        try {\r\n            int[] sizes2 = { Separator.VARIABLE_SIZE, Separator.VARIABLE_SIZE, 2, Bytes.SIZEOF_LONG };\r\n            splits = separator.split(arr, sizes2);\r\n            fail(\"Exception should have been thrown.\");\r\n        } catch (IllegalArgumentException e) {\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testEncodeDecode",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testEncodeDecode(String token, Separator... separators)\n{\r\n    byte[] encoded = Separator.encode(token, separators);\r\n    String decoded = Separator.decode(encoded, separators);\r\n    assertEquals(token, decoded);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testJoinStripped",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testJoinStripped()\n{\r\n    List<String> stringList = new ArrayList<String>(0);\r\n    stringList.add(\"nothing\");\r\n    String joined = Separator.VALUES.joinEncoded(stringList);\r\n    Iterable<String> split = Separator.VALUES.splitEncoded(joined);\r\n    assertTrue(Iterables.elementsEqual(stringList, split));\r\n    stringList = new ArrayList<String>(3);\r\n    stringList.add(\"a\");\r\n    stringList.add(\"b?\");\r\n    stringList.add(\"c\");\r\n    joined = Separator.VALUES.joinEncoded(stringList);\r\n    split = Separator.VALUES.splitEncoded(joined);\r\n    assertTrue(Iterables.elementsEqual(stringList, split));\r\n    String[] stringArray1 = { \"else\" };\r\n    joined = Separator.VALUES.joinEncoded(stringArray1);\r\n    split = Separator.VALUES.splitEncoded(joined);\r\n    assertTrue(Iterables.elementsEqual(Arrays.asList(stringArray1), split));\r\n    String[] stringArray2 = { \"d\", \"e?\", \"f\" };\r\n    joined = Separator.VALUES.joinEncoded(stringArray2);\r\n    split = Separator.VALUES.splitEncoded(joined);\r\n    assertTrue(Iterables.elementsEqual(Arrays.asList(stringArray2), split));\r\n    List<String> empty = new ArrayList<String>(0);\r\n    split = Separator.VALUES.splitEncoded(null);\r\n    assertTrue(Iterables.elementsEqual(empty, split));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testApplicationRow",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testApplicationRow()\n{\r\n    String rowKeyAsString = new ApplicationRowKey(CLUSTER, USER, FLOW_NAME, FLOW_RUN_ID, APPLICATION_ID).getRowKeyAsString();\r\n    ApplicationRowKey rowKey = ApplicationRowKey.parseRowKeyFromString(rowKeyAsString);\r\n    assertEquals(CLUSTER, rowKey.getClusterId());\r\n    assertEquals(USER, rowKey.getUserId());\r\n    assertEquals(FLOW_NAME, rowKey.getFlowName());\r\n    assertEquals(FLOW_RUN_ID, rowKey.getFlowRunId());\r\n    assertEquals(APPLICATION_ID, rowKey.getAppId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testEntityRowKey",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testEntityRowKey()\n{\r\n    char del = TimelineReaderUtils.DEFAULT_DELIMITER_CHAR;\r\n    char esc = TimelineReaderUtils.DEFAULT_ESCAPE_CHAR;\r\n    String id = del + esc + \"ent\" + esc + del + \"ity\" + esc + del + esc + \"id\" + esc + del + esc;\r\n    String type = \"entity\" + esc + del + esc + \"Type\";\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setId(id);\r\n    entity.setType(type);\r\n    entity.setIdPrefix(54321);\r\n    String rowKeyAsString = new EntityRowKey(CLUSTER, USER, FLOW_NAME, FLOW_RUN_ID, APPLICATION_ID, entity.getType(), entity.getIdPrefix(), entity.getId()).getRowKeyAsString();\r\n    EntityRowKey rowKey = EntityRowKey.parseRowKeyFromString(rowKeyAsString);\r\n    assertEquals(CLUSTER, rowKey.getClusterId());\r\n    assertEquals(USER, rowKey.getUserId());\r\n    assertEquals(FLOW_NAME, rowKey.getFlowName());\r\n    assertEquals(FLOW_RUN_ID, rowKey.getFlowRunId());\r\n    assertEquals(APPLICATION_ID, rowKey.getAppId());\r\n    assertEquals(entity.getType(), rowKey.getEntityType());\r\n    assertEquals(entity.getIdPrefix(), rowKey.getEntityIdPrefix().longValue());\r\n    assertEquals(entity.getId(), rowKey.getEntityId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testFlowActivityRowKey",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testFlowActivityRowKey()\n{\r\n    Long ts = 1459900830000L;\r\n    Long dayTimestamp = HBaseTimelineSchemaUtils.getTopOfTheDayTimestamp(ts);\r\n    String rowKeyAsString = new FlowActivityRowKey(CLUSTER, ts, USER, FLOW_NAME).getRowKeyAsString();\r\n    FlowActivityRowKey rowKey = FlowActivityRowKey.parseRowKeyFromString(rowKeyAsString);\r\n    assertEquals(CLUSTER, rowKey.getClusterId());\r\n    assertEquals(dayTimestamp, rowKey.getDayTimestamp());\r\n    assertEquals(USER, rowKey.getUserId());\r\n    assertEquals(FLOW_NAME, rowKey.getFlowName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testFlowRunRowKey",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testFlowRunRowKey()\n{\r\n    String rowKeyAsString = new FlowRunRowKey(CLUSTER, USER, FLOW_NAME, FLOW_RUN_ID).getRowKeyAsString();\r\n    FlowRunRowKey rowKey = FlowRunRowKey.parseRowKeyFromString(rowKeyAsString);\r\n    assertEquals(CLUSTER, rowKey.getClusterId());\r\n    assertEquals(USER, rowKey.getUserId());\r\n    assertEquals(FLOW_NAME, rowKey.getFlowName());\r\n    assertEquals(FLOW_RUN_ID, rowKey.getFlowRunId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timelineservice-hbase\\hadoop-yarn-server-timelineservice-hbase-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timelineservice\\storage\\common",
  "methodName" : "testSubApplicationRowKey",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testSubApplicationRowKey()\n{\r\n    char del = TimelineReaderUtils.DEFAULT_DELIMITER_CHAR;\r\n    char esc = TimelineReaderUtils.DEFAULT_ESCAPE_CHAR;\r\n    String id = del + esc + \"ent\" + esc + del + \"ity\" + esc + del + esc + \"id\" + esc + del + esc;\r\n    String type = \"entity\" + esc + del + esc + \"Type\";\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setId(id);\r\n    entity.setType(type);\r\n    entity.setIdPrefix(54321);\r\n    String rowKeyAsString = new SubApplicationRowKey(SUB_APP_USER, CLUSTER, entity.getType(), entity.getIdPrefix(), entity.getId(), USER).getRowKeyAsString();\r\n    SubApplicationRowKey rowKey = SubApplicationRowKey.parseRowKeyFromString(rowKeyAsString);\r\n    assertEquals(SUB_APP_USER, rowKey.getSubAppUserId());\r\n    assertEquals(CLUSTER, rowKey.getClusterId());\r\n    assertEquals(entity.getType(), rowKey.getEntityType());\r\n    assertEquals(entity.getIdPrefix(), rowKey.getEntityIdPrefix().longValue());\r\n    assertEquals(entity.getId(), rowKey.getEntityId());\r\n    assertEquals(USER, rowKey.getUserId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]