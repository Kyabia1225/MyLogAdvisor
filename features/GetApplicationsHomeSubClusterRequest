[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetApplicationsHomeSubClusterRequest newInstance()\n{\r\n    GetApplicationsHomeSubClusterRequest request = Records.newRecord(GetApplicationsHomeSubClusterRequest.class);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "reinitialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void reinitialize(FederationPolicyInitializationContext policyContext) throws FederationPolicyInitializationException\n{\r\n    super.reinitialize(policyContext);\r\n    resolver = policyContext.getFederationSubclusterResolver();\r\n    Map<SubClusterIdInfo, Float> weights = getPolicyInfo().getRouterPolicyWeights();\r\n    enabledSCs = new ArrayList<SubClusterId>();\r\n    for (Map.Entry<SubClusterIdInfo, Float> entry : weights.entrySet()) {\r\n        if (entry != null && entry.getValue() > 0) {\r\n            enabledSCs.add(entry.getKey().toId());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "getHomeSubcluster",
  "errType" : [ "YarnException", "YarnException", "YarnException" ],
  "containingMethodsNum" : 33,
  "sourceCodeText" : "SubClusterId getHomeSubcluster(ApplicationSubmissionContext appSubmissionContext, List<SubClusterId> blackListSubClusters) throws YarnException\n{\r\n    validate(appSubmissionContext);\r\n    List<ResourceRequest> rrList = appSubmissionContext.getAMContainerResourceRequests();\r\n    if (rrList == null || rrList.isEmpty() || (rrList.size() == 1 && ResourceRequest.isAnyLocation(rrList.get(0).getResourceName()))) {\r\n        return super.getHomeSubcluster(appSubmissionContext, blackListSubClusters);\r\n    }\r\n    if (rrList.size() != 3) {\r\n        throw new FederationPolicyException(\"Invalid number of resource requests: \" + rrList.size());\r\n    }\r\n    Map<SubClusterId, SubClusterInfo> activeSubClusters = getActiveSubclusters();\r\n    List<SubClusterId> validSubClusters = new ArrayList<>(activeSubClusters.keySet());\r\n    FederationPolicyUtils.validateSubClusterAvailability(validSubClusters, blackListSubClusters);\r\n    if (blackListSubClusters != null) {\r\n        validSubClusters.removeAll(blackListSubClusters);\r\n    }\r\n    try {\r\n        SubClusterId targetId = null;\r\n        ResourceRequest nodeRequest = null;\r\n        ResourceRequest rackRequest = null;\r\n        ResourceRequest anyRequest = null;\r\n        for (ResourceRequest rr : rrList) {\r\n            try {\r\n                targetId = resolver.getSubClusterForNode(rr.getResourceName());\r\n                nodeRequest = rr;\r\n            } catch (YarnException e) {\r\n                LOG.error(\"Cannot resolve node : {}\", e.getLocalizedMessage());\r\n            }\r\n            try {\r\n                resolver.getSubClustersForRack(rr.getResourceName());\r\n                rackRequest = rr;\r\n            } catch (YarnException e) {\r\n                LOG.error(\"Cannot resolve rack : {}\", e.getLocalizedMessage());\r\n            }\r\n            if (ResourceRequest.isAnyLocation(rr.getResourceName())) {\r\n                anyRequest = rr;\r\n                continue;\r\n            }\r\n        }\r\n        if (nodeRequest == null) {\r\n            throw new YarnException(\"Missing node request\");\r\n        }\r\n        if (rackRequest == null) {\r\n            throw new YarnException(\"Missing rack request\");\r\n        }\r\n        if (anyRequest == null) {\r\n            throw new YarnException(\"Missing any request\");\r\n        }\r\n        LOG.info(\"Node request: \" + nodeRequest.getResourceName() + \", Rack request: \" + rackRequest.getResourceName() + \", Any request: \" + anyRequest.getResourceName());\r\n        if (validSubClusters.contains(targetId) && enabledSCs.contains(targetId)) {\r\n            LOG.info(\"Node {} is in SubCluster: {}\", nodeRequest.getResourceName(), targetId);\r\n            return targetId;\r\n        } else {\r\n            throw new YarnException(\"The node \" + nodeRequest.getResourceName() + \" is in a blacklist SubCluster or not active. \");\r\n        }\r\n    } catch (YarnException e) {\r\n        LOG.error(\"Validating resource requests failed, Falling back to \" + \"WeightedRandomRouterPolicy placement: \" + e.getMessage());\r\n        ResourceRequest amReq = Records.newRecord(ResourceRequest.class);\r\n        amReq.setPriority(appSubmissionContext.getPriority());\r\n        amReq.setResourceName(ResourceRequest.ANY);\r\n        amReq.setCapability(appSubmissionContext.getResource());\r\n        amReq.setNumContainers(1);\r\n        amReq.setRelaxLocality(true);\r\n        amReq.setNodeLabelExpression(appSubmissionContext.getNodeLabelExpression());\r\n        amReq.setExecutionTypeRequest(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED));\r\n        appSubmissionContext.setAMContainerResourceRequests(Collections.singletonList(amReq));\r\n        return super.getHomeSubcluster(appSubmissionContext, blackListSubClusters);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "NodeStatus newInstance(NodeId nodeId, int responseId, List<ContainerStatus> containerStatuses, List<ApplicationId> keepAliveApplications, NodeHealthStatus nodeHealthStatus, ResourceUtilization containersUtilization, ResourceUtilization nodeUtilization, List<Container> increasedContainers)\n{\r\n    NodeStatus nodeStatus = Records.newRecord(NodeStatus.class);\r\n    nodeStatus.setResponseId(responseId);\r\n    nodeStatus.setNodeId(nodeId);\r\n    nodeStatus.setContainersStatuses(containerStatuses);\r\n    nodeStatus.setKeepAliveApplications(keepAliveApplications);\r\n    nodeStatus.setNodeHealthStatus(nodeHealthStatus);\r\n    nodeStatus.setContainersUtilization(containersUtilization);\r\n    nodeStatus.setNodeUtilization(nodeUtilization);\r\n    nodeStatus.setIncreasedContainers(increasedContainers);\r\n    return nodeStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId getNodeId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getResponseId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getResponseId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getContainersStatuses",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ContainerStatus> getContainersStatuses()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setContainersStatuses",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainersStatuses(List<ContainerStatus> containersStatuses)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getKeepAliveApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationId> getKeepAliveApplications()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setKeepAliveApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setKeepAliveApplications(List<ApplicationId> appIds)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getNodeHealthStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeHealthStatus getNodeHealthStatus()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setNodeHealthStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeHealthStatus(NodeHealthStatus healthStatus)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeId(NodeId nodeId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setResponseId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResponseId(int responseId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getContainersUtilization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceUtilization getContainersUtilization()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setContainersUtilization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainersUtilization(ResourceUtilization containersUtilization)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getNodeUtilization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceUtilization getNodeUtilization()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setNodeUtilization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeUtilization(ResourceUtilization nodeUtilization)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getIncreasedContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Container> getIncreasedContainers()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setIncreasedContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setIncreasedContainers(List<Container> increasedContainers)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getOpportunisticContainersStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "OpportunisticContainersStatus getOpportunisticContainersStatus()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setOpportunisticContainersStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOpportunisticContainersStatus(OpportunisticContainersStatus opportunisticContainersStatus)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterDeregisterResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetApplicationsHomeSubClusterRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SetSubClusterPolicyConfigurationRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SetSubClusterPolicyConfigurationRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.subClusterPolicy != null && !((SubClusterPolicyConfigurationPBImpl) this.subClusterPolicy).getProto().equals(builder.getPolicyConfiguration())) {\r\n        builder.setPolicyConfiguration(convertToProtoFormat(this.subClusterPolicy));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterPolicyConfiguration getPolicyConfiguration()\n{\r\n    SetSubClusterPolicyConfigurationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.subClusterPolicy != null) {\r\n        return this.subClusterPolicy;\r\n    }\r\n    if (!p.hasPolicyConfiguration()) {\r\n        return null;\r\n    }\r\n    this.subClusterPolicy = convertFromProtoFormat(p.getPolicyConfiguration());\r\n    return this.subClusterPolicy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPolicyConfiguration(SubClusterPolicyConfiguration policyConfiguration)\n{\r\n    maybeInitBuilder();\r\n    if (policyConfiguration == null) {\r\n        builder.clearPolicyConfiguration();\r\n    }\r\n    this.subClusterPolicy = policyConfiguration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterPolicyConfiguration convertFromProtoFormat(SubClusterPolicyConfigurationProto policy)\n{\r\n    return new SubClusterPolicyConfigurationPBImpl(policy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterPolicyConfigurationProto convertToProtoFormat(SubClusterPolicyConfiguration policy)\n{\r\n    return ((SubClusterPolicyConfigurationPBImpl) policy).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "GetTimelineCollectorContextResponse newInstance(String userId, String flowName, String flowVersion, long flowRunId)\n{\r\n    GetTimelineCollectorContextResponse response = Records.newRecord(GetTimelineCollectorContextResponse.class);\r\n    response.setUserId(userId);\r\n    response.setFlowName(flowName);\r\n    response.setFlowVersion(flowVersion);\r\n    response.setFlowRunId(flowRunId);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getUserId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUserId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setUserId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUserId(String userId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getFlowName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFlowName()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setFlowName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFlowName(String flowName)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFlowVersion()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFlowVersion(String flowVersion)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getFlowRunId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFlowRunId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setFlowRunId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFlowRunId(long flowRunId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RegisterNodeManagerRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerStatuses != null) {\r\n        addNMContainerStatusesToProto();\r\n    }\r\n    if (this.runningApplications != null) {\r\n        addRunningApplicationsToProto();\r\n    }\r\n    if (this.resource != null) {\r\n        builder.setResource(convertToProtoFormat(this.resource));\r\n    }\r\n    if (this.nodeId != null) {\r\n        builder.setNodeId(convertToProtoFormat(this.nodeId));\r\n    }\r\n    if (this.labels != null) {\r\n        builder.clearNodeLabels();\r\n        Builder newBuilder = NodeLabelsProto.newBuilder();\r\n        for (NodeLabel label : labels) {\r\n            newBuilder.addNodeLabels(convertToProtoFormat(label));\r\n        }\r\n        builder.setNodeLabels(newBuilder.build());\r\n    }\r\n    if (this.attributes != null) {\r\n        builder.clearNodeAttributes();\r\n        NodeAttributesProto.Builder attributesBuilder = NodeAttributesProto.newBuilder();\r\n        for (NodeAttribute attribute : attributes) {\r\n            attributesBuilder.addNodeAttributes(convertToProtoFormat(attribute));\r\n        }\r\n        builder.setNodeAttributes(attributesBuilder.build());\r\n    }\r\n    if (this.physicalResource != null) {\r\n        builder.setPhysicalResource(convertToProtoFormat(this.physicalResource));\r\n    }\r\n    if (this.logAggregationReportsForApps != null) {\r\n        addLogAggregationStatusForAppsToProto();\r\n    }\r\n    if (this.nodeStatus != null) {\r\n        builder.setNodeStatus(convertToProtoFormat(this.nodeStatus));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLogAggregationStatusForAppsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addLogAggregationStatusForAppsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearLogAggregationReportsForApps();\r\n    if (this.logAggregationReportsForApps == null) {\r\n        return;\r\n    }\r\n    Iterable<LogAggregationReportProto> it = new Iterable<LogAggregationReportProto>() {\r\n\r\n        @Override\r\n        public Iterator<LogAggregationReportProto> iterator() {\r\n            return new Iterator<LogAggregationReportProto>() {\r\n\r\n                private Iterator<LogAggregationReport> iter = logAggregationReportsForApps.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public LogAggregationReportProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllLogAggregationReportsForApps(it);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationReportProto convertToProtoFormat(LogAggregationReport value)\n{\r\n    return ((LogAggregationReportPBImpl) value).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addNMContainerStatusesToProto",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addNMContainerStatusesToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainerStatuses();\r\n    List<NMContainerStatusProto> list = new ArrayList<NMContainerStatusProto>();\r\n    for (NMContainerStatus status : this.containerStatuses) {\r\n        list.add(convertToProtoFormat(status));\r\n    }\r\n    builder.addAllContainerStatuses(list);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = RegisterNodeManagerRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getResource()\n{\r\n    RegisterNodeManagerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.resource != null) {\r\n        return this.resource;\r\n    }\r\n    if (!p.hasResource()) {\r\n        return null;\r\n    }\r\n    this.resource = convertFromProtoFormat(p.getResource());\r\n    return this.resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResource(Resource resource)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null)\r\n        builder.clearResource();\r\n    this.resource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    RegisterNodeManagerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.nodeId != null) {\r\n        return this.nodeId;\r\n    }\r\n    if (!p.hasNodeId()) {\r\n        return null;\r\n    }\r\n    this.nodeId = convertFromProtoFormat(p.getNodeId());\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeId(NodeId nodeId)\n{\r\n    maybeInitBuilder();\r\n    if (nodeId == null) {\r\n        builder.clearNodeId();\r\n    }\r\n    this.nodeId = nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getHttpPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getHttpPort()\n{\r\n    RegisterNodeManagerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasHttpPort()) {\r\n        return 0;\r\n    }\r\n    return (p.getHttpPort());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setHttpPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setHttpPort(int httpPort)\n{\r\n    maybeInitBuilder();\r\n    builder.setHttpPort(httpPort);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getRunningApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationId> getRunningApplications()\n{\r\n    initRunningApplications();\r\n    return runningApplications;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initRunningApplications",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initRunningApplications()\n{\r\n    if (this.runningApplications != null) {\r\n        return;\r\n    }\r\n    RegisterNodeManagerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ApplicationIdProto> list = p.getRunningApplicationsList();\r\n    this.runningApplications = new ArrayList<ApplicationId>();\r\n    for (ApplicationIdProto c : list) {\r\n        this.runningApplications.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setRunningApplications",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRunningApplications(List<ApplicationId> apps)\n{\r\n    if (apps == null) {\r\n        return;\r\n    }\r\n    initRunningApplications();\r\n    this.runningApplications.addAll(apps);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addRunningApplicationsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addRunningApplicationsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearRunningApplications();\r\n    if (runningApplications == null) {\r\n        return;\r\n    }\r\n    Iterable<ApplicationIdProto> it = new Iterable<ApplicationIdProto>() {\r\n\r\n        @Override\r\n        public Iterator<ApplicationIdProto> iterator() {\r\n            return new Iterator<ApplicationIdProto>() {\r\n\r\n                Iterator<ApplicationId> iter = runningApplications.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ApplicationIdProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllRunningApplications(it);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNMContainerStatuses",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<NMContainerStatus> getNMContainerStatuses()\n{\r\n    initContainerRecoveryReports();\r\n    return containerStatuses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initContainerRecoveryReports",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initContainerRecoveryReports()\n{\r\n    if (this.containerStatuses != null) {\r\n        return;\r\n    }\r\n    RegisterNodeManagerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<NMContainerStatusProto> list = p.getContainerStatusesList();\r\n    this.containerStatuses = new ArrayList<NMContainerStatus>();\r\n    for (NMContainerStatusProto c : list) {\r\n        this.containerStatuses.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerStatuses",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerStatuses(List<NMContainerStatus> containerReports)\n{\r\n    if (containerReports == null) {\r\n        return;\r\n    }\r\n    initContainerRecoveryReports();\r\n    this.containerStatuses.addAll(containerReports);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getPhysicalResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getPhysicalResource()\n{\r\n    RegisterNodeManagerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.physicalResource != null) {\r\n        return this.physicalResource;\r\n    }\r\n    if (!p.hasPhysicalResource()) {\r\n        return null;\r\n    }\r\n    this.physicalResource = convertFromProtoFormat(p.getPhysicalResource());\r\n    return this.physicalResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setPhysicalResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPhysicalResource(Resource pPhysicalResource)\n{\r\n    maybeInitBuilder();\r\n    if (pPhysicalResource == null) {\r\n        builder.clearPhysicalResource();\r\n    }\r\n    this.physicalResource = pPhysicalResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeStatus getNodeStatus()\n{\r\n    RegisterNodeManagerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.nodeStatus != null) {\r\n        return this.nodeStatus;\r\n    }\r\n    if (!p.hasNodeStatus()) {\r\n        return null;\r\n    }\r\n    this.nodeStatus = convertFromProtoFormat(p.getNodeStatus());\r\n    return this.nodeStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeStatus(NodeStatus pNodeStatus)\n{\r\n    maybeInitBuilder();\r\n    if (pNodeStatus == null) {\r\n        builder.clearNodeStatus();\r\n    }\r\n    this.nodeStatus = pNodeStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNMVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getNMVersion()\n{\r\n    RegisterNodeManagerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNmVersion()) {\r\n        return \"\";\r\n    }\r\n    return (p.getNmVersion());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNMVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNMVersion(String version)\n{\r\n    maybeInitBuilder();\r\n    builder.setNmVersion(version);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<NodeLabel> getNodeLabels()\n{\r\n    initNodeLabels();\r\n    return this.labels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeLabels(Set<NodeLabel> nodeLabels)\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeLabels();\r\n    this.labels = nodeLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initNodeLabels()\n{\r\n    if (this.labels != null) {\r\n        return;\r\n    }\r\n    RegisterNodeManagerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeLabels()) {\r\n        labels = null;\r\n        return;\r\n    }\r\n    NodeLabelsProto nodeLabels = p.getNodeLabels();\r\n    labels = new HashSet<NodeLabel>();\r\n    for (NodeLabelProto nlp : nodeLabels.getNodeLabelsList()) {\r\n        labels.add(convertFromProtoFormat(nlp));\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<NodeAttribute> getNodeAttributes()\n{\r\n    initNodeAttributes();\r\n    return this.attributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeAttributes(Set<NodeAttribute> nodeAttributes)\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeAttributes();\r\n    this.attributes = nodeAttributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initNodeAttributes()\n{\r\n    if (this.attributes != null) {\r\n        return;\r\n    }\r\n    RegisterNodeManagerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeAttributes()) {\r\n        attributes = null;\r\n        return;\r\n    }\r\n    NodeAttributesProto nodeAttributes = p.getNodeAttributes();\r\n    attributes = new HashSet<>();\r\n    for (NodeAttributeProto nap : nodeAttributes.getNodeAttributesList()) {\r\n        attributes.add(convertFromProtoFormat(nap));\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeLabelPBImpl convertFromProtoFormat(NodeLabelProto p)\n{\r\n    return new NodeLabelPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeLabelProto convertToProtoFormat(NodeLabel t)\n{\r\n    return ((NodeLabelPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeAttributePBImpl convertFromProtoFormat(NodeAttributeProto p)\n{\r\n    return new NodeAttributePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeProto convertToProtoFormat(NodeAttribute t)\n{\r\n    return ((NodeAttributePBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeIdPBImpl convertFromProtoFormat(NodeIdProto p)\n{\r\n    return new NodeIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId t)\n{\r\n    return ((NodeIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource t)\n{\r\n    return ProtoUtils.convertToProtoFormat(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMContainerStatusPBImpl convertFromProtoFormat(NMContainerStatusProto c)\n{\r\n    return new NMContainerStatusPBImpl(c);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NMContainerStatusProto convertToProtoFormat(NMContainerStatus c)\n{\r\n    return ((NMContainerStatusPBImpl) c).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLogAggregationReportsForApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<LogAggregationReport> getLogAggregationReportsForApps()\n{\r\n    if (this.logAggregationReportsForApps != null) {\r\n        return this.logAggregationReportsForApps;\r\n    }\r\n    initLogAggregationReportsForApps();\r\n    return logAggregationReportsForApps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLogAggregationReportsForApps",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLogAggregationReportsForApps()\n{\r\n    RegisterNodeManagerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<LogAggregationReportProto> list = p.getLogAggregationReportsForAppsList();\r\n    this.logAggregationReportsForApps = new ArrayList<LogAggregationReport>();\r\n    for (LogAggregationReportProto c : list) {\r\n        this.logAggregationReportsForApps.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LogAggregationReport convertFromProtoFormat(LogAggregationReportProto logAggregationReport)\n{\r\n    return new LogAggregationReportPBImpl(logAggregationReport);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLogAggregationReportsForApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setLogAggregationReportsForApps(List<LogAggregationReport> logAggregationStatusForApps)\n{\r\n    if (logAggregationStatusForApps == null) {\r\n        builder.clearLogAggregationReportsForApps();\r\n    }\r\n    this.logAggregationReportsForApps = logAggregationStatusForApps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeStatusPBImpl convertFromProtoFormat(NodeStatusProto s)\n{\r\n    return new NodeStatusPBImpl(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeStatusProto convertToProtoFormat(NodeStatus s)\n{\r\n    return ((NodeStatusPBImpl) s).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SCMUploaderCanUploadRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResourceKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getResourceKey()\n{\r\n    SCMUploaderCanUploadRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasResourceKey()) ? p.getResourceKey() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResourceKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setResourceKey(String key)\n{\r\n    maybeInitBuilder();\r\n    if (key == null) {\r\n        builder.clearResourceKey();\r\n        return;\r\n    }\r\n    builder.setResourceKey(key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SCMUploaderCanUploadRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void init(FilterConfig filterConfig) throws ServletException\n{\r\n    filterConfig.getServletContext().setAttribute(DelegationTokenAuthenticationFilter.DELEGATION_TOKEN_SECRET_MANAGER_ATTR, secretManager);\r\n    super.init(filterConfig);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "setTimelineDelegationTokenSecretManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTimelineDelegationTokenSecretManager(AbstractDelegationTokenSecretManager<TimelineDelegationTokenIdentifier> secretMgr)\n{\r\n    TimelineAuthenticationFilter.secretManager = secretMgr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getFileController",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFileController()\n{\r\n    return fileController;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "setFileController",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFileController(String fileController)\n{\r\n    this.fileController = fileController;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPath()\n{\r\n    return path;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "setPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPath(String path)\n{\r\n    this.path = path;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "allocateContainers",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "List<Container> allocateContainers(ResourceBlacklistRequest blackList, List<ResourceRequest> oppResourceReqs, ApplicationAttemptId applicationAttemptId, OpportunisticContainerContext opportContext, long rmIdentifier, String appSubmitter) throws YarnException\n{\r\n    updateBlacklist(blackList, opportContext);\r\n    opportContext.addToOutstandingReqs(oppResourceReqs);\r\n    Set<String> nodeBlackList = new HashSet<>(opportContext.getBlacklist());\r\n    Set<String> allocatedNodes = new HashSet<>();\r\n    List<Container> allocatedContainers = new ArrayList<>();\r\n    boolean continueLoop = true;\r\n    while (continueLoop) {\r\n        continueLoop = false;\r\n        List<Map<Resource, List<Allocation>>> allocations = new ArrayList<>();\r\n        for (SchedulerRequestKey schedulerKey : opportContext.getOutstandingOpReqs().descendingKeySet()) {\r\n            int remAllocs = -1;\r\n            int maxAllocationsPerAMHeartbeat = getMaxAllocationsPerAMHeartbeat();\r\n            if (maxAllocationsPerAMHeartbeat > 0) {\r\n                remAllocs = maxAllocationsPerAMHeartbeat - allocatedContainers.size() - getTotalAllocations(allocations);\r\n                if (remAllocs <= 0) {\r\n                    LOG.info(\"Not allocating more containers as we have reached max \" + \"allocations per AM heartbeat {}\", maxAllocationsPerAMHeartbeat);\r\n                    break;\r\n                }\r\n            }\r\n            Map<Resource, List<Allocation>> allocation = allocate(rmIdentifier, opportContext, schedulerKey, applicationAttemptId, appSubmitter, nodeBlackList, allocatedNodes, remAllocs);\r\n            if (allocation.size() > 0) {\r\n                allocations.add(allocation);\r\n                continueLoop = true;\r\n            }\r\n        }\r\n        matchAllocation(allocations, allocatedContainers, opportContext);\r\n    }\r\n    return allocatedContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "allocate",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Map<Resource, List<Allocation>> allocate(long rmIdentifier, OpportunisticContainerContext appContext, SchedulerRequestKey schedKey, ApplicationAttemptId appAttId, String userName, Set<String> blackList, Set<String> allocatedNodes, int maxAllocations) throws YarnException\n{\r\n    Map<Resource, List<Allocation>> containers = new HashMap<>();\r\n    for (EnrichedResourceRequest enrichedAsk : appContext.getOutstandingOpReqs().get(schedKey).values()) {\r\n        int remainingAllocs = -1;\r\n        if (maxAllocations > 0) {\r\n            int totalAllocated = 0;\r\n            for (List<Allocation> allocs : containers.values()) {\r\n                totalAllocated += allocs.size();\r\n            }\r\n            remainingAllocs = maxAllocations - totalAllocated;\r\n            if (remainingAllocs <= 0) {\r\n                LOG.info(\"Not allocating more containers as max allocations per AM \" + \"heartbeat {} has reached\", getMaxAllocationsPerAMHeartbeat());\r\n                break;\r\n            }\r\n        }\r\n        allocateContainersInternal(rmIdentifier, appContext.getAppParams(), appContext.getContainerIdGenerator(), blackList, allocatedNodes, appAttId, appContext.getNodeMap(), userName, containers, enrichedAsk, remainingAllocs);\r\n        ResourceRequest anyAsk = enrichedAsk.getRequest();\r\n        if (!containers.isEmpty()) {\r\n            LOG.info(\"Opportunistic allocation requested for [priority={}, \" + \"allocationRequestId={}, num_containers={}, capability={}] \" + \"allocated = {}\", anyAsk.getPriority(), anyAsk.getAllocationRequestId(), anyAsk.getNumContainers(), anyAsk.getCapability(), containers.keySet());\r\n        }\r\n    }\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "allocateContainersInternal",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void allocateContainersInternal(long rmIdentifier, AllocationParams appParams, ContainerIdGenerator idCounter, Set<String> blacklist, Set<String> allocatedNodes, ApplicationAttemptId id, Map<String, RemoteNode> allNodes, String userName, Map<Resource, List<Allocation>> allocations, EnrichedResourceRequest enrichedAsk, int maxAllocations) throws YarnException\n{\r\n    if (allNodes.size() == 0) {\r\n        LOG.info(\"No nodes currently available to \" + \"allocate OPPORTUNISTIC containers.\");\r\n        return;\r\n    }\r\n    ResourceRequest anyAsk = enrichedAsk.getRequest();\r\n    int toAllocate = anyAsk.getNumContainers() - (allocations.isEmpty() ? 0 : allocations.get(anyAsk.getCapability()).size());\r\n    toAllocate = Math.min(toAllocate, appParams.getMaxAllocationsPerSchedulerKeyPerRound());\r\n    if (maxAllocations >= 0) {\r\n        toAllocate = Math.min(maxAllocations, toAllocate);\r\n    }\r\n    int numAllocated = 0;\r\n    int loopIndex = OFF_SWITCH_LOOP;\r\n    if (enrichedAsk.getNodeMap().size() > 0) {\r\n        loopIndex = NODE_LOCAL_LOOP;\r\n    }\r\n    while (numAllocated < toAllocate) {\r\n        Collection<RemoteNode> nodeCandidates = findNodeCandidates(loopIndex, allNodes, blacklist, allocatedNodes, enrichedAsk);\r\n        for (RemoteNode rNode : nodeCandidates) {\r\n            String rNodeHost = rNode.getNodeId().getHost();\r\n            if (blacklist.contains(rNodeHost)) {\r\n                LOG.info(\"Nodes for scheduling has a blacklisted node\" + \" [\" + rNodeHost + \"]..\");\r\n                continue;\r\n            }\r\n            String location = ResourceRequest.ANY;\r\n            if (loopIndex == NODE_LOCAL_LOOP) {\r\n                if (enrichedAsk.getNodeMap().containsKey(rNodeHost)) {\r\n                    location = rNodeHost;\r\n                } else {\r\n                    continue;\r\n                }\r\n            } else if (allocatedNodes.contains(rNodeHost)) {\r\n                LOG.info(\"Opportunistic container has already been allocated on {}.\", rNodeHost);\r\n                continue;\r\n            }\r\n            if (loopIndex == RACK_LOCAL_LOOP) {\r\n                if (enrichedAsk.getRackMap().containsKey(rNode.getRackName())) {\r\n                    location = rNode.getRackName();\r\n                } else {\r\n                    continue;\r\n                }\r\n            }\r\n            Container container = createContainer(rmIdentifier, appParams, idCounter, id, userName, allocations, location, anyAsk, rNode);\r\n            numAllocated++;\r\n            updateMetrics(loopIndex);\r\n            allocatedNodes.add(rNodeHost);\r\n            LOG.info(\"Allocated [\" + container.getId() + \"] as opportunistic at \" + \"location [\" + location + \"]\");\r\n            if (numAllocated >= toAllocate) {\r\n                break;\r\n            }\r\n        }\r\n        if (loopIndex == NODE_LOCAL_LOOP && enrichedAsk.getRackMap().size() > 0) {\r\n            loopIndex = RACK_LOCAL_LOOP;\r\n        } else {\r\n            loopIndex++;\r\n        }\r\n        if (loopIndex > OFF_SWITCH_LOOP && numAllocated == 0) {\r\n            LOG.warn(\"Unable to allocate any opportunistic containers.\");\r\n            break;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "updateMetrics",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void updateMetrics(int loopIndex)\n{\r\n    OpportunisticSchedulerMetrics metrics = OpportunisticSchedulerMetrics.getMetrics();\r\n    if (loopIndex == NODE_LOCAL_LOOP) {\r\n        metrics.incrNodeLocalOppContainers();\r\n    } else if (loopIndex == RACK_LOCAL_LOOP) {\r\n        metrics.incrRackLocalOppContainers();\r\n    } else {\r\n        metrics.incrOffSwitchOppContainers();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "findNodeCandidates",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Collection<RemoteNode> findNodeCandidates(int loopIndex, Map<String, RemoteNode> allNodes, Set<String> blackList, Set<String> allocatedNodes, EnrichedResourceRequest enrichedRR)\n{\r\n    LinkedList<RemoteNode> retList = new LinkedList<>();\r\n    String partition = getRequestPartition(enrichedRR);\r\n    if (loopIndex > 1) {\r\n        for (RemoteNode remoteNode : allNodes.values()) {\r\n            if (StringUtils.equals(partition, getRemoteNodePartition(remoteNode))) {\r\n                retList.add(remoteNode);\r\n            }\r\n        }\r\n        return retList;\r\n    } else {\r\n        int numContainers = enrichedRR.getRequest().getNumContainers();\r\n        while (numContainers > 0) {\r\n            if (loopIndex == 0) {\r\n                numContainers = collectNodeLocalCandidates(allNodes, enrichedRR, retList, numContainers);\r\n            } else {\r\n                numContainers = collectRackLocalCandidates(allNodes, enrichedRR, retList, blackList, allocatedNodes, numContainers);\r\n            }\r\n            if (numContainers == enrichedRR.getRequest().getNumContainers()) {\r\n                break;\r\n            }\r\n        }\r\n        return retList;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "collectRackLocalCandidates",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "int collectRackLocalCandidates(Map<String, RemoteNode> allNodes, EnrichedResourceRequest enrichedRR, LinkedList<RemoteNode> retList, Set<String> blackList, Set<String> allocatedNodes, int numContainers)\n{\r\n    String partition = getRequestPartition(enrichedRR);\r\n    for (RemoteNode rNode : allNodes.values()) {\r\n        if (StringUtils.equals(partition, getRemoteNodePartition(rNode)) && enrichedRR.getRackMap().containsKey(rNode.getRackName())) {\r\n            String rHost = rNode.getNodeId().getHost();\r\n            if (blackList.contains(rHost)) {\r\n                continue;\r\n            }\r\n            if (allocatedNodes.contains(rHost)) {\r\n                retList.addLast(rNode);\r\n            } else {\r\n                retList.addFirst(rNode);\r\n                numContainers--;\r\n            }\r\n        }\r\n        if (numContainers == 0) {\r\n            break;\r\n        }\r\n    }\r\n    return numContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "collectNodeLocalCandidates",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int collectNodeLocalCandidates(Map<String, RemoteNode> allNodes, EnrichedResourceRequest enrichedRR, List<RemoteNode> retList, int numContainers)\n{\r\n    String partition = getRequestPartition(enrichedRR);\r\n    for (String nodeName : enrichedRR.getNodeMap().keySet()) {\r\n        RemoteNode remoteNode = allNodes.get(nodeName);\r\n        if (remoteNode != null && StringUtils.equals(partition, getRemoteNodePartition(remoteNode))) {\r\n            retList.add(remoteNode);\r\n            numContainers--;\r\n        }\r\n        if (numContainers == 0) {\r\n            break;\r\n        }\r\n    }\r\n    return numContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateApplicationHomeSubClusterRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = UpdateApplicationHomeSubClusterRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationHomeSubCluster getApplicationHomeSubCluster()\n{\r\n    UpdateApplicationHomeSubClusterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAppSubclusterMap()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getAppSubclusterMap());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationHomeSubCluster(ApplicationHomeSubCluster applicationInfo)\n{\r\n    maybeInitBuilder();\r\n    if (applicationInfo == null) {\r\n        builder.clearAppSubclusterMap();\r\n        return;\r\n    }\r\n    builder.setAppSubclusterMap(convertToProtoFormat(applicationInfo));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHomeSubCluster convertFromProtoFormat(ApplicationHomeSubClusterProto sc)\n{\r\n    return new ApplicationHomeSubClusterPBImpl(sc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationHomeSubClusterProto convertToProtoFormat(ApplicationHomeSubCluster sc)\n{\r\n    return ((ApplicationHomeSubClusterPBImpl) sc).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void add(AppAttemptInfo info)\n{\r\n    this.attempt.add(info);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAttempts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ArrayList<AppAttemptInfo> getAttempts()\n{\r\n    return this.attempt;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RemoteNodeProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodeId != null && !((NodeIdPBImpl) nodeId).getProto().equals(builder.getNodeId())) {\r\n        builder.setNodeId(ProtoUtils.convertToProtoFormat(this.nodeId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = RemoteNodeProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    RemoteNodeProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.nodeId != null) {\r\n        return this.nodeId;\r\n    }\r\n    if (!p.hasNodeId()) {\r\n        return null;\r\n    }\r\n    this.nodeId = ProtoUtils.convertFromProtoFormat(p.getNodeId());\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeId(NodeId nodeId)\n{\r\n    maybeInitBuilder();\r\n    if (nodeId == null) {\r\n        builder.clearNodeId();\r\n    }\r\n    this.nodeId = nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getHttpAddress()\n{\r\n    RemoteNodeProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasHttpAddress()) {\r\n        return null;\r\n    }\r\n    return (p.getHttpAddress());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHttpAddress(String httpAddress)\n{\r\n    maybeInitBuilder();\r\n    if (httpAddress == null) {\r\n        builder.clearHttpAddress();\r\n        return;\r\n    }\r\n    builder.setHttpAddress(httpAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getRackName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRackName()\n{\r\n    RemoteNodeProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasRackName()) {\r\n        return null;\r\n    }\r\n    return (p.getRackName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setRackName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRackName(String rackName)\n{\r\n    maybeInitBuilder();\r\n    if (rackName == null) {\r\n        builder.clearRackName();\r\n        return;\r\n    }\r\n    builder.setRackName(rackName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodePartition",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getNodePartition()\n{\r\n    RemoteNodeProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodePartition()) {\r\n        return null;\r\n    }\r\n    return (p.getNodePartition());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodePartition",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodePartition(String nodePartition)\n{\r\n    maybeInitBuilder();\r\n    if (nodePartition == null) {\r\n        builder.clearNodePartition();\r\n        return;\r\n    }\r\n    builder.setNodePartition(nodePartition);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "authorizeRequest",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "AMRMTokenIdentifier authorizeRequest() throws YarnException\n{\r\n    UserGroupInformation remoteUgi;\r\n    try {\r\n        remoteUgi = UserGroupInformation.getCurrentUser();\r\n    } catch (IOException e) {\r\n        String msg = \"Cannot obtain the user-name for authorizing ApplicationMaster. \" + \"Got exception: \" + StringUtils.stringifyException(e);\r\n        LOG.warn(msg);\r\n        throw RPCUtil.getRemoteException(msg);\r\n    }\r\n    boolean tokenFound = false;\r\n    String message = \"\";\r\n    AMRMTokenIdentifier appTokenIdentifier = null;\r\n    try {\r\n        appTokenIdentifier = selectAMRMTokenIdentifier(remoteUgi);\r\n        if (appTokenIdentifier == null) {\r\n            tokenFound = false;\r\n            message = \"No AMRMToken found for user \" + remoteUgi.getUserName();\r\n        } else {\r\n            tokenFound = true;\r\n        }\r\n    } catch (IOException e) {\r\n        tokenFound = false;\r\n        message = \"Got exception while looking for AMRMToken for user \" + remoteUgi.getUserName();\r\n    }\r\n    if (!tokenFound) {\r\n        LOG.warn(message);\r\n        throw RPCUtil.getRemoteException(message);\r\n    }\r\n    return appTokenIdentifier;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "selectAMRMTokenIdentifier",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AMRMTokenIdentifier selectAMRMTokenIdentifier(UserGroupInformation remoteUgi) throws IOException\n{\r\n    AMRMTokenIdentifier result = null;\r\n    Set<TokenIdentifier> tokenIds = remoteUgi.getTokenIdentifiers();\r\n    for (TokenIdentifier tokenId : tokenIds) {\r\n        if (tokenId instanceof AMRMTokenIdentifier) {\r\n            result = (AMRMTokenIdentifier) tokenId;\r\n            break;\r\n        }\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "updateAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void updateAMRMToken(org.apache.hadoop.yarn.api.records.Token token, UserGroupInformation user, Configuration conf)\n{\r\n    Token<AMRMTokenIdentifier> amrmToken = new Token<AMRMTokenIdentifier>(token.getIdentifier().array(), token.getPassword().array(), new Text(token.getKind()), new Text(token.getService()));\r\n    user.addToken(amrmToken);\r\n    amrmToken.setService(ClientRMProxy.getAMRMTokenService(conf));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "parseCredentials",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Credentials parseCredentials(ContainerLaunchContext launchContext) throws IOException\n{\r\n    Credentials credentials = new Credentials();\r\n    ByteBuffer tokens = launchContext.getTokens();\r\n    if (tokens != null) {\r\n        DataInputByteBuffer buf = new DataInputByteBuffer();\r\n        tokens.rewind();\r\n        buf.reset(tokens);\r\n        credentials.readTokenStorageStream(buf);\r\n        if (LOG.isDebugEnabled()) {\r\n            for (Token<? extends TokenIdentifier> tk : credentials.getAllTokens()) {\r\n                LOG.debug(\"{}={}\", tk.getService(), tk);\r\n            }\r\n        }\r\n    }\r\n    return credentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterHeartbeatResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "registerApplicationMasterForDistributedScheduling",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RegisterDistributedSchedulingAMResponse registerApplicationMasterForDistributedScheduling(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.RegisterApplicationMasterRequestProto requestProto = ((RegisterApplicationMasterRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RegisterDistributedSchedulingAMResponsePBImpl(proxy.registerApplicationMasterForDistributedScheduling(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "allocateForDistributedScheduling",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "DistributedSchedulingAllocateResponse allocateForDistributedScheduling(DistributedSchedulingAllocateRequest request) throws YarnException, IOException\n{\r\n    YarnServerCommonServiceProtos.DistributedSchedulingAllocateRequestProto requestProto = ((DistributedSchedulingAllocateRequestPBImpl) request).getProto();\r\n    try {\r\n        return new DistributedSchedulingAllocateResponsePBImpl(proxy.allocateForDistributedScheduling(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "registerApplicationMaster",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.RegisterApplicationMasterRequestProto requestProto = ((RegisterApplicationMasterRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RegisterApplicationMasterResponsePBImpl(proxy.registerApplicationMaster(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "finishApplicationMaster",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(FinishApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.FinishApplicationMasterRequestProto requestProto = ((FinishApplicationMasterRequestPBImpl) request).getProto();\r\n    try {\r\n        return new FinishApplicationMasterResponsePBImpl(proxy.finishApplicationMaster(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "allocate",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "AllocateResponse allocate(AllocateRequest request) throws YarnException, IOException\n{\r\n    YarnServiceProtos.AllocateRequestProto requestProto = ((AllocateRequestPBImpl) request).getProto();\r\n    try {\r\n        return new AllocateResponsePBImpl(proxy.allocate(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RegisterDistributedSchedulingAMResponse newInstance(RegisterApplicationMasterResponse regAMResp)\n{\r\n    RegisterDistributedSchedulingAMResponse response = Records.newRecord(RegisterDistributedSchedulingAMResponse.class);\r\n    response.setRegisterResponse(regAMResp);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setRegisterResponse",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRegisterResponse(RegisterApplicationMasterResponse resp)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getRegisterResponse",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RegisterApplicationMasterResponse getRegisterResponse()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setMinContainerResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMinContainerResource(Resource minResource)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getMinContainerResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getMinContainerResource()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setMaxContainerResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMaxContainerResource(Resource maxResource)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getMaxContainerResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getMaxContainerResource()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setIncrContainerResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setIncrContainerResource(Resource maxResource)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getIncrContainerResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getIncrContainerResource()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setContainerTokenExpiryInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerTokenExpiryInterval(int interval)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainerTokenExpiryInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getContainerTokenExpiryInterval()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setContainerIdStart",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerIdStart(long containerIdStart)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainerIdStart",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getContainerIdStart()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodesForScheduling",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodesForScheduling(List<RemoteNode> nodesForScheduling)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodesForScheduling",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<RemoteNode> getNodesForScheduling()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApps",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 37,
  "sourceCodeText" : "AppsInfo getApps(HttpServletRequest req, HttpServletResponse res, String stateQuery, Set<String> statesQuery, String finalStatusQuery, String userQuery, String queueQuery, String count, String startedBegin, String startedEnd, String finishBegin, String finishEnd, String nameQuery, Set<String> applicationTypes)\n{\r\n    UserGroupInformation callerUGI = getUser(req);\r\n    boolean checkEnd = false;\r\n    boolean checkAppTypes = false;\r\n    boolean checkAppStates = false;\r\n    long countNum = Long.MAX_VALUE;\r\n    long sBegin = 0;\r\n    long sEnd = Long.MAX_VALUE;\r\n    long fBegin = 0;\r\n    long fEnd = Long.MAX_VALUE;\r\n    if (count != null && !count.isEmpty()) {\r\n        countNum = Long.parseLong(count);\r\n        if (countNum <= 0) {\r\n            throw new BadRequestException(\"limit value must be greater then 0\");\r\n        }\r\n    }\r\n    if (startedBegin != null && !startedBegin.isEmpty()) {\r\n        sBegin = Long.parseLong(startedBegin);\r\n        if (sBegin < 0) {\r\n            throw new BadRequestException(\"startedTimeBegin must be greater than 0\");\r\n        }\r\n    }\r\n    if (startedEnd != null && !startedEnd.isEmpty()) {\r\n        sEnd = Long.parseLong(startedEnd);\r\n        if (sEnd < 0) {\r\n            throw new BadRequestException(\"startedTimeEnd must be greater than 0\");\r\n        }\r\n    }\r\n    if (sBegin > sEnd) {\r\n        throw new BadRequestException(\"startedTimeEnd must be greater than startTimeBegin\");\r\n    }\r\n    if (finishBegin != null && !finishBegin.isEmpty()) {\r\n        checkEnd = true;\r\n        fBegin = Long.parseLong(finishBegin);\r\n        if (fBegin < 0) {\r\n            throw new BadRequestException(\"finishTimeBegin must be greater than 0\");\r\n        }\r\n    }\r\n    if (finishEnd != null && !finishEnd.isEmpty()) {\r\n        checkEnd = true;\r\n        fEnd = Long.parseLong(finishEnd);\r\n        if (fEnd < 0) {\r\n            throw new BadRequestException(\"finishTimeEnd must be greater than 0\");\r\n        }\r\n    }\r\n    if (fBegin > fEnd) {\r\n        throw new BadRequestException(\"finishTimeEnd must be greater than finishTimeBegin\");\r\n    }\r\n    Set<String> appTypes = parseQueries(applicationTypes, false);\r\n    if (!appTypes.isEmpty()) {\r\n        checkAppTypes = true;\r\n    }\r\n    if (stateQuery != null && !stateQuery.isEmpty()) {\r\n        statesQuery.add(stateQuery);\r\n    }\r\n    Set<String> appStates = parseQueries(statesQuery, true);\r\n    if (!appStates.isEmpty()) {\r\n        checkAppStates = true;\r\n    }\r\n    AppsInfo allApps = new AppsInfo();\r\n    Collection<ApplicationReport> appReports = null;\r\n    final GetApplicationsRequest request = GetApplicationsRequest.newInstance();\r\n    request.setLimit(countNum);\r\n    request.setStartRange(Range.between(sBegin, sEnd));\r\n    try {\r\n        if (callerUGI == null) {\r\n            appReports = getApplicationsReport(request);\r\n        } else {\r\n            appReports = callerUGI.doAs(new PrivilegedExceptionAction<Collection<ApplicationReport>>() {\r\n\r\n                @Override\r\n                public Collection<ApplicationReport> run() throws Exception {\r\n                    return getApplicationsReport(request);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        rewrapAndThrowException(e);\r\n    }\r\n    if (appReports == null) {\r\n        return allApps;\r\n    }\r\n    for (ApplicationReport appReport : appReports) {\r\n        if (checkAppStates && !appStates.contains(StringUtils.toLowerCase(appReport.getYarnApplicationState().toString()))) {\r\n            continue;\r\n        }\r\n        if (finalStatusQuery != null && !finalStatusQuery.isEmpty()) {\r\n            FinalApplicationStatus.valueOf(finalStatusQuery);\r\n            if (!appReport.getFinalApplicationStatus().toString().equalsIgnoreCase(finalStatusQuery)) {\r\n                continue;\r\n            }\r\n        }\r\n        if (userQuery != null && !userQuery.isEmpty()) {\r\n            if (!appReport.getUser().equals(userQuery)) {\r\n                continue;\r\n            }\r\n        }\r\n        if (queueQuery != null && !queueQuery.isEmpty()) {\r\n            if (appReport.getQueue() == null || !appReport.getQueue().equals(queueQuery)) {\r\n                continue;\r\n            }\r\n        }\r\n        if (checkAppTypes && !appTypes.contains(StringUtils.toLowerCase(appReport.getApplicationType().trim()))) {\r\n            continue;\r\n        }\r\n        if (checkEnd && (appReport.getFinishTime() < fBegin || appReport.getFinishTime() > fEnd)) {\r\n            continue;\r\n        }\r\n        if (nameQuery != null && !nameQuery.equals(appReport.getName())) {\r\n            continue;\r\n        }\r\n        AppInfo app = new AppInfo(appReport);\r\n        allApps.add(app);\r\n    }\r\n    return allApps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppInfo getApp(HttpServletRequest req, HttpServletResponse res, String appId)\n{\r\n    return getApp(req, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "BasicAppInfo getApp(HttpServletRequest req, String appId, String clusterId)\n{\r\n    return BasicAppInfo.fromAppInfo(getApp(req, appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApp",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "AppInfo getApp(HttpServletRequest req, String appId)\n{\r\n    UserGroupInformation callerUGI = getUser(req);\r\n    final ApplicationId id = parseApplicationId(appId);\r\n    ApplicationReport app = null;\r\n    try {\r\n        if (callerUGI == null) {\r\n            GetApplicationReportRequest request = GetApplicationReportRequest.newInstance(id);\r\n            app = getApplicationReport(request);\r\n        } else {\r\n            app = callerUGI.doAs(new PrivilegedExceptionAction<ApplicationReport>() {\r\n\r\n                @Override\r\n                public ApplicationReport run() throws Exception {\r\n                    GetApplicationReportRequest request = GetApplicationReportRequest.newInstance(id);\r\n                    return getApplicationReport(request);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        rewrapAndThrowException(e);\r\n    }\r\n    if (app == null) {\r\n        throw new NotFoundException(\"app with id: \" + appId + \" not found\");\r\n    }\r\n    return new AppInfo(app);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getAppAttempts",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "AppAttemptsInfo getAppAttempts(HttpServletRequest req, HttpServletResponse res, String appId)\n{\r\n    UserGroupInformation callerUGI = getUser(req);\r\n    final ApplicationId id = parseApplicationId(appId);\r\n    Collection<ApplicationAttemptReport> appAttemptReports = null;\r\n    try {\r\n        if (callerUGI == null) {\r\n            GetApplicationAttemptsRequest request = GetApplicationAttemptsRequest.newInstance(id);\r\n            appAttemptReports = getApplicationAttemptsReport(request);\r\n        } else {\r\n            appAttemptReports = callerUGI.doAs(new PrivilegedExceptionAction<Collection<ApplicationAttemptReport>>() {\r\n\r\n                @Override\r\n                public Collection<ApplicationAttemptReport> run() throws Exception {\r\n                    GetApplicationAttemptsRequest request = GetApplicationAttemptsRequest.newInstance(id);\r\n                    return getApplicationAttemptsReport(request);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        rewrapAndThrowException(e);\r\n    }\r\n    AppAttemptsInfo appAttemptsInfo = new AppAttemptsInfo();\r\n    if (appAttemptReports == null) {\r\n        return appAttemptsInfo;\r\n    }\r\n    for (ApplicationAttemptReport appAttemptReport : appAttemptReports) {\r\n        AppAttemptInfo appAttemptInfo = new AppAttemptInfo(appAttemptReport);\r\n        appAttemptsInfo.add(appAttemptInfo);\r\n    }\r\n    return appAttemptsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getAppAttempt",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "AppAttemptInfo getAppAttempt(HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId)\n{\r\n    UserGroupInformation callerUGI = getUser(req);\r\n    ApplicationId aid = parseApplicationId(appId);\r\n    final ApplicationAttemptId aaid = parseApplicationAttemptId(appAttemptId);\r\n    validateIds(aid, aaid, null);\r\n    ApplicationAttemptReport appAttempt = null;\r\n    try {\r\n        if (callerUGI == null) {\r\n            GetApplicationAttemptReportRequest request = GetApplicationAttemptReportRequest.newInstance(aaid);\r\n            appAttempt = getApplicationAttemptReport(request);\r\n        } else {\r\n            appAttempt = callerUGI.doAs(new PrivilegedExceptionAction<ApplicationAttemptReport>() {\r\n\r\n                @Override\r\n                public ApplicationAttemptReport run() throws Exception {\r\n                    GetApplicationAttemptReportRequest request = GetApplicationAttemptReportRequest.newInstance(aaid);\r\n                    return getApplicationAttemptReport(request);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        rewrapAndThrowException(e);\r\n    }\r\n    if (appAttempt == null) {\r\n        throw new NotFoundException(\"app attempt with id: \" + appAttemptId + \" not found\");\r\n    }\r\n    return new AppAttemptInfo(appAttempt);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainers",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ContainersInfo getContainers(HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId)\n{\r\n    UserGroupInformation callerUGI = getUser(req);\r\n    ApplicationId aid = parseApplicationId(appId);\r\n    final ApplicationAttemptId aaid = parseApplicationAttemptId(appAttemptId);\r\n    validateIds(aid, aaid, null);\r\n    Collection<ContainerReport> containerReports = null;\r\n    try {\r\n        if (callerUGI == null) {\r\n            GetContainersRequest request = GetContainersRequest.newInstance(aaid);\r\n            containerReports = getContainersReport(request);\r\n        } else {\r\n            containerReports = callerUGI.doAs(new PrivilegedExceptionAction<Collection<ContainerReport>>() {\r\n\r\n                @Override\r\n                public Collection<ContainerReport> run() throws Exception {\r\n                    GetContainersRequest request = GetContainersRequest.newInstance(aaid);\r\n                    return getContainersReport(request);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        rewrapAndThrowException(e);\r\n    }\r\n    ContainersInfo containersInfo = new ContainersInfo();\r\n    if (containerReports == null) {\r\n        return containersInfo;\r\n    }\r\n    for (ContainerReport containerReport : containerReports) {\r\n        ContainerInfo containerInfo = new ContainerInfo(containerReport);\r\n        containersInfo.add(containerInfo);\r\n    }\r\n    return containersInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getNodeHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getNodeHttpAddress(HttpServletRequest req, String appId, String appAttemptId, String containerId, String clusterId)\n{\r\n    ContainerInfo containerInfo = getContainer(req, appId, appAttemptId, containerId);\r\n    return containerInfo.getNodeHttpAddress();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainer",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ContainerInfo getContainer(HttpServletRequest req, String appId, String appAttemptId, String containerId)\n{\r\n    UserGroupInformation callerUGI = getUser(req);\r\n    ApplicationId aid = parseApplicationId(appId);\r\n    ApplicationAttemptId aaid = parseApplicationAttemptId(appAttemptId);\r\n    final ContainerId cid = parseContainerId(containerId);\r\n    validateIds(aid, aaid, cid);\r\n    ContainerReport container = null;\r\n    try {\r\n        if (callerUGI == null) {\r\n            GetContainerReportRequest request = GetContainerReportRequest.newInstance(cid);\r\n            container = getContainerReport(request);\r\n        } else {\r\n            container = callerUGI.doAs(new PrivilegedExceptionAction<ContainerReport>() {\r\n\r\n                @Override\r\n                public ContainerReport run() throws Exception {\r\n                    GetContainerReportRequest request = GetContainerReportRequest.newInstance(cid);\r\n                    return getContainerReport(request);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        rewrapAndThrowException(e);\r\n    }\r\n    if (container == null) {\r\n        throw new NotFoundException(\"container with id: \" + containerId + \" not found\");\r\n    }\r\n    return new ContainerInfo(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerInfo getContainer(HttpServletRequest req, HttpServletResponse res, String appId, String appAttemptId, String containerId)\n{\r\n    return getContainer(req, appId, appAttemptId, containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "initForReadableEndpoints",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initForReadableEndpoints(HttpServletResponse response)\n{\r\n    response.setContentType(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "parseQueries",
  "errType" : [ "RuntimeException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Set<String> parseQueries(Set<String> queries, boolean isState)\n{\r\n    Set<String> params = new HashSet<String>();\r\n    if (!queries.isEmpty()) {\r\n        for (String query : queries) {\r\n            if (query != null && !query.trim().isEmpty()) {\r\n                String[] paramStrs = query.split(\",\");\r\n                for (String paramStr : paramStrs) {\r\n                    if (paramStr != null && !paramStr.trim().isEmpty()) {\r\n                        if (isState) {\r\n                            try {\r\n                                YarnApplicationState.valueOf(StringUtils.toUpperCase(paramStr.trim()));\r\n                            } catch (RuntimeException e) {\r\n                                YarnApplicationState[] stateArray = YarnApplicationState.values();\r\n                                String allAppStates = Arrays.toString(stateArray);\r\n                                throw new BadRequestException(\"Invalid application-state \" + paramStr.trim() + \" specified. It should be one of \" + allAppStates);\r\n                            }\r\n                        }\r\n                        params.add(StringUtils.toLowerCase(paramStr.trim()));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return params;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "parseApplicationId",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId parseApplicationId(String appId)\n{\r\n    if (appId == null || appId.isEmpty()) {\r\n        throw new NotFoundException(\"appId, \" + appId + \", is empty or null\");\r\n    }\r\n    ApplicationId aid = null;\r\n    try {\r\n        aid = ApplicationId.fromString(appId);\r\n    } catch (Exception e) {\r\n        throw new BadRequestException(e);\r\n    }\r\n    if (aid == null) {\r\n        throw new NotFoundException(\"appId is null\");\r\n    }\r\n    return aid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "parseApplicationAttemptId",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptId parseApplicationAttemptId(String appAttemptId)\n{\r\n    if (appAttemptId == null || appAttemptId.isEmpty()) {\r\n        throw new NotFoundException(\"appAttemptId, \" + appAttemptId + \", is empty or null\");\r\n    }\r\n    ApplicationAttemptId aaid = null;\r\n    try {\r\n        aaid = ApplicationAttemptId.fromString(appAttemptId);\r\n    } catch (Exception e) {\r\n        throw new BadRequestException(e);\r\n    }\r\n    if (aaid == null) {\r\n        throw new NotFoundException(\"appAttemptId is null\");\r\n    }\r\n    return aaid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "parseContainerId",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId parseContainerId(String containerId)\n{\r\n    if (containerId == null || containerId.isEmpty()) {\r\n        throw new NotFoundException(\"containerId, \" + containerId + \", is empty or null\");\r\n    }\r\n    ContainerId cid = null;\r\n    try {\r\n        cid = ContainerId.fromString(containerId);\r\n    } catch (Exception e) {\r\n        throw new BadRequestException(e);\r\n    }\r\n    if (cid == null) {\r\n        throw new NotFoundException(\"containerId is null\");\r\n    }\r\n    return cid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "validateIds",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validateIds(ApplicationId appId, ApplicationAttemptId appAttemptId, ContainerId containerId)\n{\r\n    if (!appAttemptId.getApplicationId().equals(appId)) {\r\n        throw new NotFoundException(\"appId and appAttemptId don't match\");\r\n    }\r\n    if (containerId != null && !containerId.getApplicationAttemptId().equals(appAttemptId)) {\r\n        throw new NotFoundException(\"appAttemptId and containerId don't match\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UserGroupInformation getUser(HttpServletRequest req)\n{\r\n    String remoteUser = req.getRemoteUser();\r\n    UserGroupInformation callerUGI = null;\r\n    if (remoteUser != null) {\r\n        callerUGI = UserGroupInformation.createRemoteUser(remoteUser);\r\n    }\r\n    return callerUGI;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "rewrapAndThrowException",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void rewrapAndThrowException(Exception e)\n{\r\n    if (e instanceof UndeclaredThrowableException) {\r\n        rewrapAndThrowThrowable(e.getCause());\r\n    } else {\r\n        rewrapAndThrowThrowable(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "rewrapAndThrowThrowable",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void rewrapAndThrowThrowable(Throwable t)\n{\r\n    if (t instanceof AuthorizationException) {\r\n        throw new ForbiddenException(t);\r\n    } else if (t instanceof ApplicationNotFoundException || t instanceof ApplicationAttemptNotFoundException || t instanceof ContainerNotFoundException) {\r\n        throw new NotFoundException(t);\r\n    } else {\r\n        throw new WebApplicationException(t);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationReport getApplicationReport(GetApplicationReportRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getApplicationReport(request).getApplicationReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApplicationsReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationReport> getApplicationsReport(final GetApplicationsRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getApplications(request).getApplicationList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptReport getApplicationAttemptReport(GetApplicationAttemptReportRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getApplicationAttemptReport(request).getApplicationAttemptReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApplicationAttemptsReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationAttemptReport> getApplicationAttemptsReport(GetApplicationAttemptsRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getApplicationAttempts(request).getApplicationAttemptList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainerReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerReport getContainerReport(GetContainerReportRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getContainerReport(request).getContainerReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainersReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerReport> getContainersReport(GetContainersRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getContainers(request).getContainerList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SchedulerRequestKey create(ResourceRequest req)\n{\r\n    return new SchedulerRequestKey(req.getPriority(), req.getAllocationRequestId(), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SchedulerRequestKey create(SchedulingRequest req)\n{\r\n    return new SchedulerRequestKey(req.getPriority(), req.getAllocationRequestId(), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SchedulerRequestKey create(UpdateContainerRequest req, SchedulerRequestKey schedulerRequestKey)\n{\r\n    return new SchedulerRequestKey(schedulerRequestKey.getPriority(), schedulerRequestKey.getAllocationRequestId(), req.getContainerId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "extractFrom",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SchedulerRequestKey extractFrom(Container container)\n{\r\n    return new SchedulerRequestKey(container.getPriority(), container.getAllocationRequestId(), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    return priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getAllocationRequestId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAllocationRequestId()\n{\r\n    return allocationRequestId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getContainerToUpdate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerToUpdate()\n{\r\n    return containerToUpdate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int compareTo(SchedulerRequestKey o)\n{\r\n    if (o == null) {\r\n        return (priority != null) ? -1 : 0;\r\n    } else {\r\n        if (priority == null) {\r\n            return 1;\r\n        }\r\n    }\r\n    if (this.containerToUpdate == null && o.containerToUpdate != null) {\r\n        return -1;\r\n    }\r\n    if (this.containerToUpdate != null && o.containerToUpdate == null) {\r\n        return 1;\r\n    }\r\n    int priorityCompare = o.getPriority().compareTo(priority);\r\n    if (priorityCompare != 0) {\r\n        return priorityCompare;\r\n    }\r\n    int allocReqCompare = Long.compare(allocationRequestId, o.getAllocationRequestId());\r\n    if (allocReqCompare != 0) {\r\n        return allocReqCompare;\r\n    }\r\n    if (this.containerToUpdate != null && o.containerToUpdate != null) {\r\n        return (this.containerToUpdate.compareTo(o.containerToUpdate));\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (!(o instanceof SchedulerRequestKey)) {\r\n        return false;\r\n    }\r\n    SchedulerRequestKey that = (SchedulerRequestKey) o;\r\n    if (getAllocationRequestId() != that.getAllocationRequestId()) {\r\n        return false;\r\n    }\r\n    if (!getPriority().equals(that.getPriority())) {\r\n        return false;\r\n    }\r\n    return containerToUpdate != null ? containerToUpdate.equals(that.containerToUpdate) : that.containerToUpdate == null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    int result = priority != null ? priority.hashCode() : 0;\r\n    result = 31 * result + (int) (allocationRequestId ^ (allocationRequestId >>> 32));\r\n    result = 31 * result + (containerToUpdate != null ? containerToUpdate.hashCode() : 0);\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"SchedulerRequestKey{\" + \"priority=\" + priority + \", allocationRequestId=\" + allocationRequestId + \", containerToUpdate=\" + containerToUpdate + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SCMUploaderCanUploadResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getUploadable",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean getUploadable()\n{\r\n    SCMUploaderCanUploadResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasUploadable()) ? p.getUploadable() : true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setUploadable",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUploadable(boolean b)\n{\r\n    maybeInitBuilder();\r\n    builder.setUploadable(b);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SCMUploaderCanUploadResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "reinitialize",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void reinitialize(FederationPolicyInitializationContext policyContext) throws FederationPolicyInitializationException\n{\r\n    WeightedPolicyInfo tempPolicy = getPolicyInfo();\r\n    super.reinitialize(policyContext);\r\n    if (!getIsDirty()) {\r\n        return;\r\n    }\r\n    Map<SubClusterId, Float> newWeightsConverted = new HashMap<>();\r\n    boolean allInactive = true;\r\n    WeightedPolicyInfo policy = getPolicyInfo();\r\n    if (policy.getAMRMPolicyWeights() != null && policy.getAMRMPolicyWeights().size() > 0) {\r\n        for (Map.Entry<SubClusterIdInfo, Float> e : policy.getAMRMPolicyWeights().entrySet()) {\r\n            if (e.getValue() > 0) {\r\n                allInactive = false;\r\n            }\r\n            newWeightsConverted.put(e.getKey().toId(), e.getValue());\r\n        }\r\n    }\r\n    if (allInactive) {\r\n        setPolicyInfo(tempPolicy);\r\n        throw new FederationPolicyInitializationException(\"The weights used to configure \" + \"this policy are all set to zero! (no ResourceRequest could be \" + \"forwarded with this setting.)\");\r\n    }\r\n    if (policyContext.getHomeSubcluster() == null) {\r\n        setPolicyInfo(tempPolicy);\r\n        throw new FederationPolicyInitializationException(\"The homeSubcluster \" + \"filed in the context must be initialized to use this policy\");\r\n    }\r\n    weights = newWeightsConverted;\r\n    resolver = policyContext.getFederationSubclusterResolver();\r\n    if (headroom == null) {\r\n        headroom = new ConcurrentHashMap<>();\r\n        enhancedHeadroom = new ConcurrentHashMap<>();\r\n    }\r\n    hrAlpha = policy.getHeadroomAlpha();\r\n    this.federationFacade = policyContext.getFederationStateStoreFacade();\r\n    this.homeSubcluster = policyContext.getHomeSubcluster();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "notifyOfResponse",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void notifyOfResponse(SubClusterId subClusterId, AllocateResponse response) throws YarnException\n{\r\n    if (response.getAvailableResources() != null) {\r\n        headroom.put(subClusterId, response.getAvailableResources());\r\n    }\r\n    if (response.getEnhancedHeadroom() != null) {\r\n        this.enhancedHeadroom.put(subClusterId, response.getEnhancedHeadroom());\r\n    }\r\n    LOG.info(\"Subcluster {} updated with AvailableResource {}, EnhancedHeadRoom {}\", subClusterId, response.getAvailableResources(), response.getEnhancedHeadroom());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "splitResourceRequests",
  "errType" : [ "YarnException", "YarnException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "Map<SubClusterId, List<ResourceRequest>> splitResourceRequests(List<ResourceRequest> resourceRequests, Set<SubClusterId> timedOutSubClusters) throws YarnException\n{\r\n    AllocationBookkeeper bookkeeper = new AllocationBookkeeper();\r\n    bookkeeper.reinitialize(getActiveSubclusters(), timedOutSubClusters);\r\n    List<ResourceRequest> nonLocalizedRequests = new ArrayList<ResourceRequest>();\r\n    SubClusterId targetId = null;\r\n    Set<SubClusterId> targetIds = null;\r\n    for (ResourceRequest rr : resourceRequests) {\r\n        targetId = null;\r\n        targetIds = null;\r\n        if (ResourceRequest.isAnyLocation(rr.getResourceName())) {\r\n            nonLocalizedRequests.add(rr);\r\n            continue;\r\n        }\r\n        try {\r\n            targetId = resolver.getSubClusterForNode(rr.getResourceName());\r\n        } catch (YarnException e) {\r\n        }\r\n        if (bookkeeper.isActiveAndEnabled(targetId)) {\r\n            bookkeeper.addLocalizedNodeRR(targetId, rr);\r\n            continue;\r\n        }\r\n        try {\r\n            targetIds = resolver.getSubClustersForRack(rr.getResourceName());\r\n        } catch (YarnException e) {\r\n        }\r\n        if (targetIds != null && targetIds.size() > 0) {\r\n            boolean hasActive = false;\r\n            for (SubClusterId tid : targetIds) {\r\n                if (bookkeeper.isActiveAndEnabled(tid)) {\r\n                    bookkeeper.addRackRR(tid, rr);\r\n                    hasActive = true;\r\n                }\r\n            }\r\n            if (hasActive) {\r\n                continue;\r\n            }\r\n        }\r\n        targetId = getSubClusterForUnResolvedRequest(bookkeeper, rr.getAllocationRequestId());\r\n        LOG.debug(\"ERROR resolving sub-cluster for resourceName: {}, picked a \" + \"random subcluster to forward:{}\", rr.getResourceName(), targetId);\r\n        if (targetIds != null && targetIds.size() > 0) {\r\n            bookkeeper.addRackRR(targetId, rr);\r\n        } else {\r\n            bookkeeper.addLocalizedNodeRR(targetId, rr);\r\n        }\r\n    }\r\n    splitAnyRequests(nonLocalizedRequests, bookkeeper);\r\n    return bookkeeper.getAnswer();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "getSubClusterForUnResolvedRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterId getSubClusterForUnResolvedRequest(AllocationBookkeeper bookKeeper, long allocationId)\n{\r\n    return bookKeeper.getSubClusterForUnResolvedRequest(allocationId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "splitAnyRequests",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void splitAnyRequests(List<ResourceRequest> originalResourceRequests, AllocationBookkeeper allocationBookkeeper) throws YarnException\n{\r\n    for (ResourceRequest resourceRequest : originalResourceRequests) {\r\n        Long allocationId = resourceRequest.getAllocationRequestId();\r\n        Set<SubClusterId> targetSubclusters;\r\n        if (allocationBookkeeper.getSubClustersForId(allocationId) != null) {\r\n            targetSubclusters = allocationBookkeeper.getSubClustersForId(allocationId);\r\n        } else {\r\n            targetSubclusters = allocationBookkeeper.getActiveAndEnabledSC();\r\n        }\r\n        splitIndividualAny(resourceRequest, targetSubclusters, allocationBookkeeper);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "splitIndividualAny",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void splitIndividualAny(ResourceRequest originalResourceRequest, Set<SubClusterId> targetSubclusters, AllocationBookkeeper allocationBookkeeper) throws YarnException\n{\r\n    long allocationId = originalResourceRequest.getAllocationRequestId();\r\n    int numContainer = originalResourceRequest.getNumContainers();\r\n    if (numContainer == 0) {\r\n        for (SubClusterId targetId : headroom.keySet()) {\r\n            allocationBookkeeper.addAnyRR(targetId, originalResourceRequest);\r\n        }\r\n        return;\r\n    }\r\n    List<SubClusterId> targetSCs = new ArrayList<>(targetSubclusters);\r\n    ArrayList<Float> weightsList = new ArrayList<>();\r\n    for (SubClusterId targetId : targetSCs) {\r\n        if (allocationBookkeeper.getSubClustersForId(allocationId) != null) {\r\n            weightsList.add(getLocalityBasedWeighting(allocationId, targetId, allocationBookkeeper));\r\n        } else {\r\n            float headroomWeighting = getHeadroomWeighting(targetId, allocationBookkeeper);\r\n            float policyWeighting = getPolicyConfigWeighting(targetId, allocationBookkeeper);\r\n            weightsList.add(hrAlpha * headroomWeighting + (1 - hrAlpha) * policyWeighting);\r\n        }\r\n    }\r\n    ArrayList<Integer> containerNums = computeIntegerAssignment(numContainer, weightsList);\r\n    int i = 0;\r\n    for (SubClusterId targetId : targetSCs) {\r\n        if (containerNums.get(i) > 0) {\r\n            ResourceRequest out = ResourceRequest.clone(originalResourceRequest);\r\n            out.setNumContainers(containerNums.get(i));\r\n            if (ResourceRequest.isAnyLocation(out.getResourceName())) {\r\n                allocationBookkeeper.addAnyRR(targetId, out);\r\n            } else {\r\n                allocationBookkeeper.addRackRR(targetId, out);\r\n            }\r\n        }\r\n        i++;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "computeIntegerAssignment",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "ArrayList<Integer> computeIntegerAssignment(int totalNum, ArrayList<Float> weightsList) throws YarnException\n{\r\n    int i, residue;\r\n    ArrayList<Integer> ret = new ArrayList<>();\r\n    float totalWeight = 0, totalNumFloat = totalNum;\r\n    if (weightsList.size() == 0) {\r\n        return ret;\r\n    }\r\n    for (i = 0; i < weightsList.size(); i++) {\r\n        ret.add(0);\r\n        if (weightsList.get(i) > 0) {\r\n            totalWeight += weightsList.get(i);\r\n        }\r\n    }\r\n    if (totalWeight == 0) {\r\n        StringBuilder sb = new StringBuilder();\r\n        for (Float weight : weightsList) {\r\n            sb.append(weight + \", \");\r\n        }\r\n        throw new FederationPolicyException(\"No positive value found in weight array \" + sb.toString());\r\n    }\r\n    residue = totalNum;\r\n    for (i = 0; i < weightsList.size(); i++) {\r\n        if (weightsList.get(i) > 0) {\r\n            int base = (int) (totalNumFloat * weightsList.get(i) / totalWeight);\r\n            ret.set(i, ret.get(i) + base);\r\n            residue -= base;\r\n        }\r\n    }\r\n    for (i = 0; i < residue; i++) {\r\n        int index = FederationPolicyUtils.getWeightedRandom(weightsList);\r\n        ret.set(index, ret.get(index) + 1);\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "getLocalityBasedWeighting",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "float getLocalityBasedWeighting(long reqId, SubClusterId targetId, AllocationBookkeeper allocationBookkeeper)\n{\r\n    float totWeight = allocationBookkeeper.getTotNumLocalizedContainers(reqId);\r\n    float localWeight = allocationBookkeeper.getNumLocalizedContainers(reqId, targetId);\r\n    return totWeight > 0 ? localWeight / totWeight : 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "getPolicyConfigWeighting",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "float getPolicyConfigWeighting(SubClusterId targetId, AllocationBookkeeper allocationBookkeeper)\n{\r\n    float totWeight = allocationBookkeeper.totPolicyWeight;\r\n    Float localWeight = allocationBookkeeper.policyWeights.get(targetId);\r\n    return (localWeight != null && totWeight > 0) ? localWeight / totWeight : 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "getHeadroomWeighting",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "float getHeadroomWeighting(SubClusterId targetId, AllocationBookkeeper allocationBookkeeper)\n{\r\n    float headroomWeighting = 1 / (float) allocationBookkeeper.getActiveAndEnabledSC().size();\r\n    if (headroom.containsKey(targetId) && allocationBookkeeper.totHeadroomMemory > 0) {\r\n        float ratioHeadroomKnown = allocationBookkeeper.totHeadRoomEnabledRMs / (float) allocationBookkeeper.getActiveAndEnabledSC().size();\r\n        headroomWeighting = (headroom.get(targetId).getMemorySize() / allocationBookkeeper.totHeadroomMemory) * (ratioHeadroomKnown);\r\n    }\r\n    return headroomWeighting;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReportNewCollectorInfoResponse newInstance()\n{\r\n    ReportNewCollectorInfoResponse response = Records.newRecord(ReportNewCollectorInfoResponse.class);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validate(AddApplicationHomeSubClusterRequest request) throws FederationStateStoreInvalidInputException\n{\r\n    if (request == null) {\r\n        String message = \"Missing AddApplicationHomeSubCluster Request.\" + \" Please try again by specifying\" + \" an AddApplicationHomeSubCluster information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkApplicationHomeSubCluster(request.getApplicationHomeSubCluster());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validate(UpdateApplicationHomeSubClusterRequest request) throws FederationStateStoreInvalidInputException\n{\r\n    if (request == null) {\r\n        String message = \"Missing UpdateApplicationHomeSubCluster Request.\" + \" Please try again by specifying\" + \" an ApplicationHomeSubCluster information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkApplicationHomeSubCluster(request.getApplicationHomeSubCluster());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validate(GetApplicationHomeSubClusterRequest request) throws FederationStateStoreInvalidInputException\n{\r\n    if (request == null) {\r\n        String message = \"Missing GetApplicationHomeSubCluster Request.\" + \" Please try again by specifying an Application Id information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkApplicationId(request.getApplicationId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validate(DeleteApplicationHomeSubClusterRequest request) throws FederationStateStoreInvalidInputException\n{\r\n    if (request == null) {\r\n        String message = \"Missing DeleteApplicationHomeSubCluster Request.\" + \" Please try again by specifying\" + \" an ApplicationHomeSubCluster information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkApplicationId(request.getApplicationId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "checkApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void checkApplicationHomeSubCluster(ApplicationHomeSubCluster applicationHomeSubCluster) throws FederationStateStoreInvalidInputException\n{\r\n    if (applicationHomeSubCluster == null) {\r\n        String message = \"Missing ApplicationHomeSubCluster Info.\" + \" Please try again by specifying\" + \" an ApplicationHomeSubCluster information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkApplicationId(applicationHomeSubCluster.getApplicationId());\r\n    FederationMembershipStateStoreInputValidator.checkSubClusterId(applicationHomeSubCluster.getHomeSubCluster());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "checkApplicationId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void checkApplicationId(ApplicationId appId) throws FederationStateStoreInvalidInputException\n{\r\n    if (appId == null) {\r\n        String message = \"Missing Application Id.\" + \" Please try again by specifying an Application Id.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeStatusProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodeId != null) {\r\n        builder.setNodeId(convertToProtoFormat(this.nodeId));\r\n    }\r\n    if (this.containers != null) {\r\n        addContainersToProto();\r\n    }\r\n    if (this.nodeHealthStatus != null) {\r\n        builder.setNodeHealthStatus(convertToProtoFormat(this.nodeHealthStatus));\r\n    }\r\n    if (this.keepAliveApplications != null) {\r\n        addKeepAliveApplicationsToProto();\r\n    }\r\n    if (this.increasedContainers != null) {\r\n        addIncreasedContainersToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NodeStatusProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "addContainersToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addContainersToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainersStatuses();\r\n    if (containers == null)\r\n        return;\r\n    Iterable<ContainerStatusProto> iterable = new Iterable<ContainerStatusProto>() {\r\n\r\n        @Override\r\n        public Iterator<ContainerStatusProto> iterator() {\r\n            return new Iterator<ContainerStatusProto>() {\r\n\r\n                Iterator<ContainerStatus> iter = containers.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ContainerStatusProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllContainersStatuses(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "addKeepAliveApplicationsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addKeepAliveApplicationsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearKeepAliveApplications();\r\n    if (keepAliveApplications == null)\r\n        return;\r\n    Iterable<ApplicationIdProto> iterable = new Iterable<ApplicationIdProto>() {\r\n\r\n        @Override\r\n        public Iterator<ApplicationIdProto> iterator() {\r\n            return new Iterator<ApplicationIdProto>() {\r\n\r\n                Iterator<ApplicationId> iter = keepAliveApplications.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ApplicationIdProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllKeepAliveApplications(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "addIncreasedContainersToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addIncreasedContainersToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearIncreasedContainers();\r\n    if (increasedContainers == null) {\r\n        return;\r\n    }\r\n    Iterable<ContainerProto> iterable = new Iterable<ContainerProto>() {\r\n\r\n        @Override\r\n        public Iterator<ContainerProto> iterator() {\r\n            return new Iterator<ContainerProto>() {\r\n\r\n                private Iterator<Container> iter = increasedContainers.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ContainerProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllIncreasedContainers(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getResponseId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getResponseId()\n{\r\n    NodeStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getResponseId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setResponseId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResponseId(int responseId)\n{\r\n    maybeInitBuilder();\r\n    builder.setResponseId(responseId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    NodeStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.nodeId != null) {\r\n        return this.nodeId;\r\n    }\r\n    if (!p.hasNodeId()) {\r\n        return null;\r\n    }\r\n    this.nodeId = convertFromProtoFormat(p.getNodeId());\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeId(NodeId nodeId)\n{\r\n    maybeInitBuilder();\r\n    if (nodeId == null)\r\n        builder.clearNodeId();\r\n    this.nodeId = nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getContainersStatuses",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerStatus> getContainersStatuses()\n{\r\n    initContainers();\r\n    return this.containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setContainersStatuses",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setContainersStatuses(List<ContainerStatus> containers)\n{\r\n    if (containers == null) {\r\n        builder.clearContainersStatuses();\r\n    }\r\n    this.containers = containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getKeepAliveApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationId> getKeepAliveApplications()\n{\r\n    initKeepAliveApplications();\r\n    return this.keepAliveApplications;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setKeepAliveApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setKeepAliveApplications(List<ApplicationId> appIds)\n{\r\n    if (appIds == null) {\r\n        builder.clearKeepAliveApplications();\r\n    }\r\n    this.keepAliveApplications = appIds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "initContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initContainers()\n{\r\n    if (this.containers != null) {\r\n        return;\r\n    }\r\n    NodeStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerStatusProto> list = p.getContainersStatusesList();\r\n    this.containers = new ArrayList<ContainerStatus>();\r\n    for (ContainerStatusProto c : list) {\r\n        this.containers.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "initKeepAliveApplications",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initKeepAliveApplications()\n{\r\n    if (this.keepAliveApplications != null) {\r\n        return;\r\n    }\r\n    NodeStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ApplicationIdProto> list = p.getKeepAliveApplicationsList();\r\n    this.keepAliveApplications = new ArrayList<ApplicationId>();\r\n    for (ApplicationIdProto c : list) {\r\n        this.keepAliveApplications.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getNodeHealthStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeHealthStatus getNodeHealthStatus()\n{\r\n    NodeStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (nodeHealthStatus != null) {\r\n        return nodeHealthStatus;\r\n    }\r\n    if (!p.hasNodeHealthStatus()) {\r\n        return null;\r\n    }\r\n    nodeHealthStatus = convertFromProtoFormat(p.getNodeHealthStatus());\r\n    return nodeHealthStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setNodeHealthStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeHealthStatus(NodeHealthStatus healthStatus)\n{\r\n    maybeInitBuilder();\r\n    if (healthStatus == null) {\r\n        builder.clearNodeHealthStatus();\r\n    }\r\n    this.nodeHealthStatus = healthStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getContainersUtilization",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceUtilization getContainersUtilization()\n{\r\n    NodeStatusProtoOrBuilder p = this.viaProto ? this.proto : this.builder;\r\n    if (!p.hasContainersUtilization()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getContainersUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setContainersUtilization",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setContainersUtilization(ResourceUtilization containersUtilization)\n{\r\n    maybeInitBuilder();\r\n    if (containersUtilization == null) {\r\n        this.builder.clearContainersUtilization();\r\n        return;\r\n    }\r\n    this.builder.setContainersUtilization(convertToProtoFormat(containersUtilization));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getNodeUtilization",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceUtilization getNodeUtilization()\n{\r\n    NodeStatusProtoOrBuilder p = this.viaProto ? this.proto : this.builder;\r\n    if (!p.hasNodeUtilization()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getNodeUtilization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setNodeUtilization",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeUtilization(ResourceUtilization nodeUtilization)\n{\r\n    maybeInitBuilder();\r\n    if (nodeUtilization == null) {\r\n        this.builder.clearNodeUtilization();\r\n        return;\r\n    }\r\n    this.builder.setNodeUtilization(convertToProtoFormat(nodeUtilization));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getIncreasedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<Container> getIncreasedContainers()\n{\r\n    if (increasedContainers != null) {\r\n        return increasedContainers;\r\n    }\r\n    NodeStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerProto> list = p.getIncreasedContainersList();\r\n    this.increasedContainers = new ArrayList<>();\r\n    for (ContainerProto c : list) {\r\n        this.increasedContainers.add(convertFromProtoFormat(c));\r\n    }\r\n    return this.increasedContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setIncreasedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setIncreasedContainers(List<Container> increasedContainers)\n{\r\n    maybeInitBuilder();\r\n    if (increasedContainers == null) {\r\n        builder.clearIncreasedContainers();\r\n        return;\r\n    }\r\n    this.increasedContainers = increasedContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getOpportunisticContainersStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "OpportunisticContainersStatus getOpportunisticContainersStatus()\n{\r\n    NodeStatusProtoOrBuilder p = this.viaProto ? this.proto : this.builder;\r\n    if (!p.hasOpportunisticContainersStatus()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getOpportunisticContainersStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setOpportunisticContainersStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setOpportunisticContainersStatus(OpportunisticContainersStatus opportunisticContainersStatus)\n{\r\n    maybeInitBuilder();\r\n    if (opportunisticContainersStatus == null) {\r\n        this.builder.clearOpportunisticContainersStatus();\r\n        return;\r\n    }\r\n    this.builder.setOpportunisticContainersStatus(convertToProtoFormat(opportunisticContainersStatus));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId nodeId)\n{\r\n    return ((NodeIdPBImpl) nodeId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId convertFromProtoFormat(NodeIdProto proto)\n{\r\n    return new NodeIdPBImpl(proto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeHealthStatusProto convertToProtoFormat(NodeHealthStatus healthStatus)\n{\r\n    return ((NodeHealthStatusPBImpl) healthStatus).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeHealthStatus convertFromProtoFormat(NodeHealthStatusProto proto)\n{\r\n    return new NodeHealthStatusPBImpl(proto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerStatusPBImpl convertFromProtoFormat(ContainerStatusProto c)\n{\r\n    return new ContainerStatusPBImpl(c);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerStatusProto convertToProtoFormat(ContainerStatus c)\n{\r\n    return ((ContainerStatusPBImpl) c).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto c)\n{\r\n    return new ApplicationIdPBImpl(c);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId c)\n{\r\n    return ((ApplicationIdPBImpl) c).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnProtos.ResourceUtilizationProto convertToProtoFormat(ResourceUtilization r)\n{\r\n    return ((ResourceUtilizationPBImpl) r).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceUtilizationPBImpl convertFromProtoFormat(YarnProtos.ResourceUtilizationProto p)\n{\r\n    return new ResourceUtilizationPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OpportunisticContainersStatusProto convertToProtoFormat(OpportunisticContainersStatus r)\n{\r\n    return ((OpportunisticContainersStatusPBImpl) r).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "OpportunisticContainersStatus convertFromProtoFormat(OpportunisticContainersStatusProto p)\n{\r\n    return new OpportunisticContainersStatusPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerPBImpl convertFromProtoFormat(ContainerProto c)\n{\r\n    return new ContainerPBImpl(c);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerProto convertToProtoFormat(Container c)\n{\r\n    return ((ContainerPBImpl) c).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "serializeConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterPolicyConfiguration serializeConf() throws FederationPolicyInitializationException\n{\r\n    ByteBuffer buf = weightedPolicyInfo.toByteBuffer();\r\n    return SubClusterPolicyConfiguration.newInstance(getQueue(), this.getClass().getCanonicalName(), buf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "getWeightedPolicyInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WeightedPolicyInfo getWeightedPolicyInfo()\n{\r\n    return weightedPolicyInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "setWeightedPolicyInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setWeightedPolicyInfo(WeightedPolicyInfo weightedPolicyInfo)\n{\r\n    this.weightedPolicyInfo = weightedPolicyInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "serializeConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterPolicyConfiguration serializeConf() throws FederationPolicyInitializationException\n{\r\n    ByteBuffer buf = weightedPolicyInfo.toByteBuffer();\r\n    return SubClusterPolicyConfiguration.newInstance(getQueue(), this.getClass().getCanonicalName(), buf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "returnToPool",
  "errType" : [ "SQLException", "SQLException", "SQLException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void returnToPool(Logger log, CallableStatement cstmt, Connection conn, ResultSet rs) throws YarnException\n{\r\n    if (cstmt != null) {\r\n        try {\r\n            cstmt.close();\r\n        } catch (SQLException e) {\r\n            logAndThrowException(log, \"Exception while trying to close Statement\", e);\r\n        }\r\n    }\r\n    if (conn != null) {\r\n        try {\r\n            conn.close();\r\n            FederationStateStoreClientMetrics.decrConnections();\r\n        } catch (SQLException e) {\r\n            logAndThrowException(log, \"Exception while trying to close Connection\", e);\r\n        }\r\n    }\r\n    if (rs != null) {\r\n        try {\r\n            rs.close();\r\n        } catch (SQLException e) {\r\n            logAndThrowException(log, \"Exception while trying to close ResultSet\", e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "returnToPool",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void returnToPool(Logger log, CallableStatement cstmt, Connection conn) throws YarnException\n{\r\n    returnToPool(log, cstmt, conn, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "returnToPool",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void returnToPool(Logger log, CallableStatement cstmt) throws YarnException\n{\r\n    returnToPool(log, cstmt, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "logAndThrowException",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void logAndThrowException(Logger log, String errMsg, Throwable t) throws YarnException\n{\r\n    if (t != null) {\r\n        log.error(errMsg, t);\r\n        throw new YarnException(errMsg, t);\r\n    } else {\r\n        log.error(errMsg);\r\n        throw new YarnException(errMsg);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "logAndThrowStoreException",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void logAndThrowStoreException(Logger log, String errMsg) throws YarnException\n{\r\n    log.error(errMsg);\r\n    throw new FederationStateStoreException(errMsg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "logAndThrowInvalidInputException",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void logAndThrowInvalidInputException(Logger log, String errMsg) throws YarnException\n{\r\n    log.error(errMsg);\r\n    throw new FederationStateStoreInvalidInputException(errMsg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "logAndThrowRetriableException",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void logAndThrowRetriableException(Logger log, String errMsg, Throwable t) throws YarnException\n{\r\n    if (t != null) {\r\n        log.error(errMsg, t);\r\n        throw new FederationStateStoreRetriableException(errMsg, t);\r\n    } else {\r\n        log.error(errMsg);\r\n        throw new FederationStateStoreRetriableException(errMsg);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "setProperty",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setProperty(HikariDataSource dataSource, String property, String value)\n{\r\n    LOG.debug(\"Setting property {} with value {}\", property, value);\r\n    if (property != null && !property.isEmpty() && value != null) {\r\n        dataSource.addDataSourceProperty(property, value);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "setUsername",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUsername(HikariDataSource dataSource, String userNameDB)\n{\r\n    if (userNameDB != null) {\r\n        dataSource.setUsername(userNameDB);\r\n        LOG.debug(\"Setting non NULL Username for Store connection\");\r\n    } else {\r\n        LOG.debug(\"NULL Username specified for Store connection, so ignoring\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "setPassword",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setPassword(HikariDataSource dataSource, String password)\n{\r\n    if (password != null) {\r\n        dataSource.setPassword(password);\r\n        LOG.debug(\"Setting non NULL Credentials for Store connection\");\r\n    } else {\r\n        LOG.debug(\"NULL Credentials specified for Store connection, so ignoring\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClusterPoliciesConfigurationsResponse newInstance(List<SubClusterPolicyConfiguration> policyConfigurations)\n{\r\n    GetSubClusterPoliciesConfigurationsResponse response = Records.newRecord(GetSubClusterPoliciesConfigurationsResponse.class);\r\n    response.setPoliciesConfigs(policyConfigurations);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getPoliciesConfigs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<SubClusterPolicyConfiguration> getPoliciesConfigs()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setPoliciesConfigs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPoliciesConfigs(List<SubClusterPolicyConfiguration> policyConfigurations)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getOrCreateFactory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationFileControllerFactory getOrCreateFactory()\n{\r\n    if (factoryInstance != null) {\r\n        return factoryInstance;\r\n    } else {\r\n        factoryInstance = new LogAggregationFileControllerFactory(getConf());\r\n        return factoryInstance;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getNMWebAddressFromRM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getNMWebAddressFromRM(String nodeId) throws ClientHandlerException, UniformInterfaceException, JSONException\n{\r\n    return LogWebServiceUtils.getNMWebAddressFromRM(getConf(), nodeId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "convertToContainerLogsInfo",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<ContainerLogsInfo> convertToContainerLogsInfo(List<ContainerLogMeta> containerLogMetas, boolean emptyLocalContainerLogMeta)\n{\r\n    List<ContainerLogsInfo> containersLogsInfo = new ArrayList<>();\r\n    for (ContainerLogMeta meta : containerLogMetas) {\r\n        ContainerLogsInfo logInfo = new ContainerLogsInfo(meta, ContainerLogAggregationType.AGGREGATED);\r\n        containersLogsInfo.add(logInfo);\r\n        if (emptyLocalContainerLogMeta) {\r\n            ContainerLogMeta emptyMeta = new ContainerLogMeta(logInfo.getContainerId(), logInfo.getNodeId() == null ? \"N/A\" : logInfo.getNodeId());\r\n            ContainerLogsInfo empty = new ContainerLogsInfo(emptyMeta, ContainerLogAggregationType.LOCAL);\r\n            containersLogsInfo.add(empty);\r\n        }\r\n    }\r\n    return containersLogsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainerLogMeta",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Response getContainerLogMeta(WrappedLogMetaRequest request, boolean emptyLocalContainerLogMeta)\n{\r\n    try {\r\n        List<ContainerLogMeta> containerLogMeta = request.getContainerLogMetas();\r\n        if (containerLogMeta.isEmpty()) {\r\n            throw new NotFoundException(\"Can not get log meta for request.\");\r\n        }\r\n        List<ContainerLogsInfo> containersLogsInfo = convertToContainerLogsInfo(containerLogMeta, emptyLocalContainerLogMeta);\r\n        GenericEntity<List<ContainerLogsInfo>> meta = new GenericEntity<List<ContainerLogsInfo>>(containersLogsInfo) {\r\n        };\r\n        Response.ResponseBuilder response = Response.ok(meta);\r\n        response.header(\"X-Content-Type-Options\", \"nosniff\");\r\n        return response.build();\r\n    } catch (Exception ex) {\r\n        LOG.debug(\"Exception during request\", ex);\r\n        throw new WebApplicationException(ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "validateUserInput",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void validateUserInput(ApplicationId applicationId, ApplicationAttemptId applicationAttemptId, ContainerId containerId)\n{\r\n    if (applicationId == null && applicationAttemptId == null && containerId == null) {\r\n        throw new IllegalArgumentException(\"Should set application id, \" + \"application attempt id or container id.\");\r\n    }\r\n    if (containerId != null) {\r\n        if (applicationAttemptId != null && !applicationAttemptId.equals(containerId.getApplicationAttemptId())) {\r\n            throw new IllegalArgumentException(String.format(\"Container %s does not belong to application attempt %s!\", containerId, applicationAttemptId));\r\n        }\r\n        if (applicationId != null && !applicationId.equals(containerId.getApplicationAttemptId().getApplicationId())) {\r\n            throw new IllegalArgumentException(String.format(\"Container %s does not belong to application %s!\", containerId, applicationId));\r\n        }\r\n    }\r\n    if (applicationAttemptId != null && applicationId != null && !applicationId.equals(applicationAttemptId.getApplicationId())) {\r\n        throw new IllegalArgumentException(String.format(\"Application attempt %s does not belong to application %s!\", applicationAttemptId, applicationId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getRemoteLogDirPath",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "Response getRemoteLogDirPath(String user, String applicationId) throws IOException\n{\r\n    String remoteUser = user;\r\n    ApplicationId appId = applicationId != null ? ApplicationIdPBImpl.fromString(applicationId) : null;\r\n    if (remoteUser == null) {\r\n        UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n        remoteUser = ugi.getUserName();\r\n    }\r\n    List<LogAggregationFileController> fileControllers = getOrCreateFactory().getConfiguredLogAggregationFileControllerList();\r\n    List<RemoteLogPathEntry> paths = new ArrayList<>();\r\n    for (LogAggregationFileController fileController : fileControllers) {\r\n        String path;\r\n        if (appId != null) {\r\n            path = fileController.getRemoteAppLogDir(appId, remoteUser).toString();\r\n        } else {\r\n            path = LogAggregationUtils.getRemoteLogSuffixedDir(fileController.getRemoteRootLogDir(), remoteUser, fileController.getRemoteRootLogDirSuffix()).toString();\r\n        }\r\n        paths.add(new RemoteLogPathEntry(fileController.getFileControllerName(), path));\r\n    }\r\n    RemoteLogPaths result = new RemoteLogPaths(paths);\r\n    Response.ResponseBuilder response = Response.ok().entity(result);\r\n    response.header(\"X-Content-Type-Options\", \"nosniff\");\r\n    return response.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getLogsInfo",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Response getLogsInfo(HttpServletRequest hsr, String appIdStr, String appAttemptIdStr, String containerIdStr, String nmId, boolean redirectedFromNode, boolean manualRedirection)\n{\r\n    ApplicationId appId = null;\r\n    if (appIdStr != null) {\r\n        try {\r\n            appId = ApplicationId.fromString(appIdStr);\r\n        } catch (IllegalArgumentException iae) {\r\n            throw new BadRequestException(iae);\r\n        }\r\n    }\r\n    ApplicationAttemptId appAttemptId = null;\r\n    if (appAttemptIdStr != null) {\r\n        try {\r\n            appAttemptId = ApplicationAttemptId.fromString(appAttemptIdStr);\r\n        } catch (IllegalArgumentException iae) {\r\n            throw new BadRequestException(iae);\r\n        }\r\n    }\r\n    ContainerId containerId = null;\r\n    if (containerIdStr != null) {\r\n        try {\r\n            containerId = ContainerId.fromString(containerIdStr);\r\n        } catch (IllegalArgumentException iae) {\r\n            throw new BadRequestException(iae);\r\n        }\r\n    }\r\n    validateUserInput(appId, appAttemptId, containerId);\r\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder = WrappedLogMetaRequest.builder().setApplicationId(appId).setApplicationAttemptId(appAttemptId).setContainerId(containerIdStr);\r\n    return getContainerLogsInfo(hsr, logMetaRequestBuilder, nmId, redirectedFromNode, null, manualRedirection);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainerLogsInfo",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "Response getContainerLogsInfo(HttpServletRequest req, ExtendedLogMetaRequest.ExtendedLogMetaRequestBuilder logsRequest) throws IOException\n{\r\n    List<ContainerLogMeta> logs = new ArrayList<>();\r\n    if (!logsRequest.isUserSet()) {\r\n        logsRequest.setUser(UserGroupInformation.getCurrentUser().getUserName());\r\n    }\r\n    LogAggregationMetaCollector collector = new LogAggregationMetaCollector(logsRequest.build(), getConf());\r\n    for (LogAggregationFileController fc : getOrCreateFactory().getConfiguredLogAggregationFileControllerList()) {\r\n        logs.addAll(collector.collect(fc));\r\n    }\r\n    List<ContainerLogsInfo> containersLogsInfo = convertToContainerLogsInfo(logs, false);\r\n    GenericEntity<List<ContainerLogsInfo>> meta = new GenericEntity<List<ContainerLogsInfo>>(containersLogsInfo) {\r\n    };\r\n    Response.ResponseBuilder response = Response.ok(meta);\r\n    response.header(\"X-Content-Type-Options\", \"nosniff\");\r\n    return response.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainerLogsInfo",
  "errType" : [ "Exception", "Exception", "Exception" ],
  "containingMethodsNum" : 29,
  "sourceCodeText" : "Response getContainerLogsInfo(HttpServletRequest req, WrappedLogMetaRequest.Builder builder, String nmId, boolean redirectedFromNode, String clusterId, boolean manualRedirection)\n{\r\n    builder.setFactory(getOrCreateFactory());\r\n    BasicAppInfo appInfo;\r\n    try {\r\n        appInfo = appInfoProvider.getApp(req, builder.getAppId(), clusterId);\r\n    } catch (Exception ex) {\r\n        LOG.warn(\"Could not obtain appInfo object from provider.\", ex);\r\n        return getContainerLogMeta(builder.build(), false);\r\n    }\r\n    if (Apps.isApplicationFinalState(appInfo.getAppState())) {\r\n        return getContainerLogMeta(builder.build(), false);\r\n    }\r\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\r\n        String appOwner = appInfo.getUser();\r\n        builder.setAppOwner(appOwner);\r\n        WrappedLogMetaRequest request = builder.build();\r\n        String nodeHttpAddress = null;\r\n        if (nmId != null && !nmId.isEmpty()) {\r\n            try {\r\n                nodeHttpAddress = getNMWebAddressFromRM(nmId);\r\n            } catch (Exception ex) {\r\n                LOG.info(\"Exception during getting NM web address.\", ex);\r\n            }\r\n        }\r\n        if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {\r\n            if (request.getContainerId() != null) {\r\n                try {\r\n                    nodeHttpAddress = appInfoProvider.getNodeHttpAddress(req, request.getAppId(), request.getAppAttemptId(), request.getContainerId().toString(), clusterId);\r\n                } catch (Exception ex) {\r\n                    LOG.warn(\"Could not obtain node HTTP address from provider.\", ex);\r\n                    return getContainerLogMeta(request, true);\r\n                }\r\n            }\r\n            if (nodeHttpAddress == null || nodeHttpAddress.isEmpty() || redirectedFromNode) {\r\n                return getContainerLogMeta(request, true);\r\n            }\r\n        }\r\n        ContainerId containerId = request.getContainerId();\r\n        if (containerId == null) {\r\n            throw new WebApplicationException(new Exception(\"Could not redirect to node, as app attempt or \" + \"application logs are requested.\"));\r\n        }\r\n        String uri = \"/\" + containerId.toString() + \"/logs\";\r\n        String resURI = JOINER.join(LogWebServiceUtils.getAbsoluteNMWebAddress(getConf(), nodeHttpAddress), NM_DOWNLOAD_URI_STR, uri);\r\n        String query = req.getQueryString();\r\n        if (query != null && !query.isEmpty()) {\r\n            resURI += \"?\" + query;\r\n        }\r\n        if (manualRedirection) {\r\n            return createLocationResponse(resURI, createEmptyLogsInfo());\r\n        }\r\n        Response.ResponseBuilder response = Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\r\n        response.header(\"Location\", resURI);\r\n        return response.build();\r\n    } else {\r\n        throw new NotFoundException(\"The application is not at Running or Finished State.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createLocationResponse",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Response createLocationResponse(String uri, T emptyPayload)\n{\r\n    Response.ResponseBuilder response = Response.status(HttpServletResponse.SC_OK).entity(emptyPayload);\r\n    response.header(\"Location\", uri);\r\n    response.header(\"Access-Control-Expose-Headers\", \"Location\");\r\n    return response.build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createEmptyLogsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GenericEntity<List<ContainerLogsInfo>> createEmptyLogsInfo()\n{\r\n    return new GenericEntity<List<ContainerLogsInfo>>(Collections.EMPTY_LIST, List.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createEmptyStream",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "StreamingOutput createEmptyStream()\n{\r\n    return outputStream -> outputStream.write(\"\".getBytes(StandardCharsets.UTF_8));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getLogFile",
  "errType" : [ "IllegalArgumentException", "Exception", "Exception", "Exception" ],
  "containingMethodsNum" : 30,
  "sourceCodeText" : "Response getLogFile(HttpServletRequest req, String containerIdStr, String filename, String format, String size, String nmId, boolean redirectedFromNode, String clusterId, boolean manualRedirection)\n{\r\n    ContainerId containerId;\r\n    try {\r\n        containerId = ContainerId.fromString(containerIdStr);\r\n    } catch (IllegalArgumentException ex) {\r\n        return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND, \"Invalid ContainerId: \" + containerIdStr);\r\n    }\r\n    LogAggregationFileControllerFactory factory = getOrCreateFactory();\r\n    final long length = LogWebServiceUtils.parseLongParam(size);\r\n    ApplicationId appId = containerId.getApplicationAttemptId().getApplicationId();\r\n    BasicAppInfo appInfo;\r\n    try {\r\n        appInfo = appInfoProvider.getApp(req, appId.toString(), clusterId);\r\n    } catch (Exception ex) {\r\n        LOG.warn(\"Could not obtain appInfo object from provider.\", ex);\r\n        return LogWebServiceUtils.sendStreamOutputResponse(factory, appId, null, null, containerIdStr, filename, format, length, false);\r\n    }\r\n    String appOwner = appInfo.getUser();\r\n    if (Apps.isApplicationFinalState(appInfo.getAppState())) {\r\n        return LogWebServiceUtils.sendStreamOutputResponse(factory, appId, appOwner, null, containerIdStr, filename, format, length, false);\r\n    }\r\n    if (LogWebServiceUtils.isRunningState(appInfo.getAppState())) {\r\n        String nodeHttpAddress = null;\r\n        if (nmId != null && !nmId.isEmpty()) {\r\n            try {\r\n                nodeHttpAddress = getNMWebAddressFromRM(nmId);\r\n            } catch (Exception ex) {\r\n                LOG.debug(\"Exception happened during obtaining NM web address \" + \"from RM.\", ex);\r\n            }\r\n        }\r\n        if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {\r\n            try {\r\n                nodeHttpAddress = appInfoProvider.getNodeHttpAddress(req, appId.toString(), containerId.getApplicationAttemptId().toString(), containerId.toString(), clusterId);\r\n            } catch (Exception ex) {\r\n                LOG.warn(\"Could not obtain node HTTP address from provider.\", ex);\r\n                return LogWebServiceUtils.sendStreamOutputResponse(factory, appId, appOwner, null, containerIdStr, filename, format, length, true);\r\n            }\r\n            if (nodeHttpAddress == null || nodeHttpAddress.isEmpty() || redirectedFromNode) {\r\n                return LogWebServiceUtils.sendStreamOutputResponse(factory, appId, appOwner, null, containerIdStr, filename, format, length, true);\r\n            }\r\n        }\r\n        String uri = \"/\" + containerId.toString() + \"/logs/\" + filename;\r\n        String resURI = JOINER.join(LogWebServiceUtils.getAbsoluteNMWebAddress(getConf(), nodeHttpAddress), NM_DOWNLOAD_URI_STR, uri);\r\n        String query = req.getQueryString();\r\n        if (query != null && !query.isEmpty()) {\r\n            resURI += \"?\" + query;\r\n        }\r\n        if (manualRedirection) {\r\n            return createLocationResponse(resURI, createEmptyStream());\r\n        }\r\n        Response.ResponseBuilder response = Response.status(HttpServletResponse.SC_TEMPORARY_REDIRECT);\r\n        response.header(\"Location\", resURI);\r\n        return response.build();\r\n    } else {\r\n        return LogWebServiceUtils.createBadResponse(Status.NOT_FOUND, \"The application is not at Running or Finished State.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createRequestFromContainerId",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "WrappedLogMetaRequest.Builder createRequestFromContainerId(String containerIdStr)\n{\r\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder = WrappedLogMetaRequest.builder();\r\n    try {\r\n        logMetaRequestBuilder.setContainerId(containerIdStr);\r\n    } catch (IllegalArgumentException e) {\r\n        throw new BadRequestException(\"Invalid container id: \" + containerIdStr);\r\n    }\r\n    return logMetaRequestBuilder;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DeleteApplicationHomeSubClusterResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SCMUploaderNotifyRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResourceKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getResourceKey()\n{\r\n    SCMUploaderNotifyRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasResourceKey()) ? p.getResourceKey() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResourceKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setResourceKey(String key)\n{\r\n    maybeInitBuilder();\r\n    if (key == null) {\r\n        builder.clearResourceKey();\r\n        return;\r\n    }\r\n    builder.setResourceKey(key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFileName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getFileName()\n{\r\n    SCMUploaderNotifyRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasFilename()) ? p.getFilename() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFilename",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setFilename(String filename)\n{\r\n    maybeInitBuilder();\r\n    if (filename == null) {\r\n        builder.clearFilename();\r\n        return;\r\n    }\r\n    builder.setFilename(filename);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SCMUploaderNotifyRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "sendStreamOutputResponse",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "Response sendStreamOutputResponse(LogAggregationFileControllerFactory factory, ApplicationId appId, String appOwner, String nodeId, String containerIdStr, String fileName, String format, long bytes, boolean printEmptyLocalContainerLog)\n{\r\n    String contentType = WebAppUtils.getDefaultLogContentType();\r\n    if (format != null && !format.isEmpty()) {\r\n        contentType = WebAppUtils.getSupportedLogContentType(format);\r\n        if (contentType == null) {\r\n            String errorMessage = \"The valid values for the parameter : format \" + \"are \" + WebAppUtils.listSupportedLogContentType();\r\n            return Response.status(Response.Status.BAD_REQUEST).entity(errorMessage).build();\r\n        }\r\n    }\r\n    StreamingOutput stream = null;\r\n    try {\r\n        stream = getStreamingOutput(factory, appId, appOwner, nodeId, containerIdStr, fileName, bytes, printEmptyLocalContainerLog);\r\n    } catch (Exception ex) {\r\n        LOG.debug(\"Exception\", ex);\r\n        return createBadResponse(Response.Status.INTERNAL_SERVER_ERROR, ex.getMessage());\r\n    }\r\n    Response.ResponseBuilder response = Response.ok(stream);\r\n    response.header(\"Content-Type\", contentType);\r\n    response.header(\"X-Content-Type-Options\", \"nosniff\");\r\n    return response.build();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getStreamingOutput",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "StreamingOutput getStreamingOutput(final LogAggregationFileControllerFactory factory, final ApplicationId appId, final String appOwner, final String nodeId, final String containerIdStr, final String logFile, final long bytes, final boolean printEmptyLocalContainerLog) throws IOException\n{\r\n    StreamingOutput stream = new StreamingOutput() {\r\n\r\n        @Override\r\n        public void write(OutputStream os) throws IOException, WebApplicationException {\r\n            ContainerLogsRequest request = new ContainerLogsRequest();\r\n            request.setAppId(appId);\r\n            request.setAppOwner(appOwner);\r\n            request.setContainerId(containerIdStr);\r\n            request.setBytes(bytes);\r\n            request.setNodeId(nodeId);\r\n            Set<String> logTypes = new HashSet<>();\r\n            logTypes.add(logFile);\r\n            request.setLogTypes(logTypes);\r\n            boolean findLogs = factory.getFileControllerForRead(appId, appOwner).readAggregatedLogs(request, os);\r\n            if (!findLogs) {\r\n                os.write((\"Can not find logs for container:\" + containerIdStr).getBytes(Charset.forName(\"UTF-8\")));\r\n            } else {\r\n                if (printEmptyLocalContainerLog) {\r\n                    StringBuilder sb = new StringBuilder();\r\n                    sb.append(containerIdStr + \"\\n\");\r\n                    sb.append(\"LogAggregationType: \" + ContainerLogAggregationType.LOCAL + \"\\n\");\r\n                    sb.append(\"LogContents:\\n\");\r\n                    sb.append(getNoRedirectWarning() + \"\\n\");\r\n                    os.write(sb.toString().getBytes(Charset.forName(\"UTF-8\")));\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return stream;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getNoRedirectWarning",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNoRedirectWarning()\n{\r\n    return \"We do not have NodeManager web address, so we can not \" + \"re-direct the request to related NodeManager \" + \"for local container logs.\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "rewrapAndThrowException",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void rewrapAndThrowException(Exception e)\n{\r\n    if (e instanceof UndeclaredThrowableException) {\r\n        rewrapAndThrowThrowable(e.getCause());\r\n    } else {\r\n        rewrapAndThrowThrowable(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "rewrapAndThrowThrowable",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void rewrapAndThrowThrowable(Throwable t)\n{\r\n    if (t instanceof AuthorizationException) {\r\n        throw new ForbiddenException(t);\r\n    } else {\r\n        throw new WebApplicationException(t);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "parseLongParam",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long parseLongParam(String bytes)\n{\r\n    if (bytes == null || bytes.isEmpty()) {\r\n        return Long.MAX_VALUE;\r\n    }\r\n    return Long.parseLong(bytes);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createBadResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response createBadResponse(Response.Status status, String errMessage)\n{\r\n    Response response = Response.status(status).entity(DOT_JOINER.join(status.toString(), errMessage)).build();\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "isRunningState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isRunningState(YarnApplicationState appState)\n{\r\n    return appState == YarnApplicationState.RUNNING;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UserGroupInformation getUser(HttpServletRequest req)\n{\r\n    String remoteUser = req.getRemoteUser();\r\n    UserGroupInformation callerUGI = null;\r\n    if (remoteUser != null) {\r\n        callerUGI = UserGroupInformation.createRemoteUser(remoteUser);\r\n    }\r\n    return callerUGI;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getNMWebAddressFromRM",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getNMWebAddressFromRM(Configuration yarnConf, String nodeId) throws ClientHandlerException, UniformInterfaceException, JSONException\n{\r\n    JSONObject nodeInfo = YarnWebServiceUtils.getNodeInfoFromRMWebService(yarnConf, nodeId).getJSONObject(\"node\");\r\n    return nodeInfo.has(\"nodeHTTPAddress\") ? nodeInfo.getString(\"nodeHTTPAddress\") : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getAbsoluteNMWebAddress",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getAbsoluteNMWebAddress(Configuration yarnConf, String nmWebAddress)\n{\r\n    if (nmWebAddress.contains(WebAppUtils.HTTP_PREFIX) || nmWebAddress.contains(WebAppUtils.HTTPS_PREFIX)) {\r\n        return nmWebAddress;\r\n    }\r\n    return WebAppUtils.getHttpSchemePrefix(yarnConf) + nmWebAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getAppParams",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AllocationParams getAppParams()\n{\r\n    return appParams;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getContainerIdGenerator",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdGenerator getContainerIdGenerator()\n{\r\n    return containerIdGenerator;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "setContainerIdGenerator",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerIdGenerator(ContainerIdGenerator containerIdGenerator)\n{\r\n    this.containerIdGenerator = containerIdGenerator;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getNodeMap",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, RemoteNode> getNodeMap()\n{\r\n    return Collections.unmodifiableMap(nodeMap);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "updateNodeList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updateNodeList(List<RemoteNode> newNodeList)\n{\r\n    if (newNodeList != nodeList) {\r\n        nodeList = newNodeList;\r\n        nodeMap.clear();\r\n        for (RemoteNode n : nodeList) {\r\n            nodeMap.put(n.getNodeId().getHost(), n);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "updateAllocationParams",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void updateAllocationParams(Resource minResource, Resource maxResource, Resource incrResource, int containerTokenExpiryInterval)\n{\r\n    appParams.setMinResource(minResource);\r\n    appParams.setMaxResource(maxResource);\r\n    appParams.setIncrementResource(incrResource);\r\n    appParams.setContainerTokenExpiryInterval(containerTokenExpiryInterval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getBlacklist",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<String> getBlacklist()\n{\r\n    return blacklist;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getOutstandingOpReqs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TreeMap<SchedulerRequestKey, Map<Resource, EnrichedResourceRequest>> getOutstandingOpReqs()\n{\r\n    return outstandingOpReqs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "addToOutstandingReqs",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void addToOutstandingReqs(List<ResourceRequest> resourceAsks)\n{\r\n    for (ResourceRequest request : resourceAsks) {\r\n        SchedulerRequestKey schedulerKey = SchedulerRequestKey.create(request);\r\n        Map<Resource, EnrichedResourceRequest> reqMap = outstandingOpReqs.get(schedulerKey);\r\n        if (reqMap == null) {\r\n            reqMap = new HashMap<>();\r\n            outstandingOpReqs.put(schedulerKey, reqMap);\r\n        }\r\n        EnrichedResourceRequest eReq = reqMap.get(request.getCapability());\r\n        if (eReq == null) {\r\n            eReq = new EnrichedResourceRequest(request);\r\n            reqMap.put(request.getCapability(), eReq);\r\n        }\r\n        if (ResourceRequest.isAnyLocation(request.getResourceName())) {\r\n            eReq.getRequest().setResourceName(ResourceRequest.ANY);\r\n            eReq.getRequest().setNumContainers(request.getNumContainers());\r\n        } else {\r\n            eReq.addLocation(request.getResourceName(), request.getNumContainers());\r\n        }\r\n        if (ResourceRequest.isAnyLocation(request.getResourceName())) {\r\n            LOG.info(\"# of outstandingOpReqs in ANY (at \" + \"priority = \" + schedulerKey.getPriority() + \", allocationReqId = \" + schedulerKey.getAllocationRequestId() + \", with capability = \" + request.getCapability() + \" ) : \" + \", with location = \" + request.getResourceName() + \" ) : \" + \", numContainers = \" + eReq.getRequest().getNumContainers());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "matchAllocationToOutstandingRequest",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void matchAllocationToOutstandingRequest(Resource capability, List<Allocation> allocations)\n{\r\n    for (OpportunisticContainerAllocator.Allocation allocation : allocations) {\r\n        SchedulerRequestKey schedulerKey = SchedulerRequestKey.extractFrom(allocation.getContainer());\r\n        Map<Resource, EnrichedResourceRequest> asks = outstandingOpReqs.get(schedulerKey);\r\n        if (asks == null) {\r\n            continue;\r\n        }\r\n        EnrichedResourceRequest err = asks.get(capability);\r\n        if (err != null) {\r\n            int numContainers = err.getRequest().getNumContainers();\r\n            numContainers--;\r\n            err.getRequest().setNumContainers(numContainers);\r\n            if (numContainers == 0) {\r\n                asks.remove(capability);\r\n                if (asks.size() == 0) {\r\n                    outstandingOpReqs.remove(schedulerKey);\r\n                }\r\n            } else {\r\n                if (!ResourceRequest.isAnyLocation(allocation.getResourceName())) {\r\n                    err.removeLocation(allocation.getResourceName());\r\n                }\r\n            }\r\n            getOppSchedulerMetrics().addAllocateOLatencyEntry(Time.monotonicNow() - err.getTimestamp());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getOppSchedulerMetrics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OpportunisticSchedulerMetrics getOppSchedulerMetrics()\n{\r\n    return OpportunisticSchedulerMetrics.getMetrics();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "getMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MasterKey getMasterKey()\n{\r\n    return this.masterKeyRecord;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "getSecretKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SecretKey getSecretKey()\n{\r\n    return this.generatedSecretKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "getHomeSubcluster",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "SubClusterId getHomeSubcluster(ApplicationSubmissionContext appSubmissionContext, List<SubClusterId> blacklist) throws YarnException\n{\r\n    validate(appSubmissionContext);\r\n    Map<SubClusterId, SubClusterInfo> activeSubclusters = getActiveSubclusters();\r\n    FederationPolicyUtils.validateSubClusterAvailability(new ArrayList<SubClusterId>(activeSubclusters.keySet()), blacklist);\r\n    Map<SubClusterIdInfo, Float> weights = getPolicyInfo().getRouterPolicyWeights();\r\n    ArrayList<Float> weightList = new ArrayList<>();\r\n    ArrayList<SubClusterId> scIdList = new ArrayList<>();\r\n    for (Map.Entry<SubClusterIdInfo, Float> entry : weights.entrySet()) {\r\n        if (blacklist != null && blacklist.contains(entry.getKey().toId())) {\r\n            continue;\r\n        }\r\n        if (entry.getKey() != null && activeSubclusters.containsKey(entry.getKey().toId())) {\r\n            weightList.add(entry.getValue());\r\n            scIdList.add(entry.getKey().toId());\r\n        }\r\n    }\r\n    int pickedIndex = FederationPolicyUtils.getWeightedRandom(weightList);\r\n    if (pickedIndex == -1) {\r\n        throw new FederationPolicyException(\"No positive weight found on active subclusters\");\r\n    }\r\n    return scIdList.get(pickedIndex);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AllocateRequest getAllocateRequest()\n{\r\n    DistributedSchedulingAllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.allocateRequest != null) {\r\n        return this.allocateRequest;\r\n    }\r\n    if (!p.hasAllocateRequest()) {\r\n        return null;\r\n    }\r\n    this.allocateRequest = convertFromProtoFormat(p.getAllocateRequest());\r\n    return this.allocateRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocateRequest(AllocateRequest pAllocateRequest)\n{\r\n    maybeInitBuilder();\r\n    if (allocateRequest == null) {\r\n        builder.clearAllocateRequest();\r\n    }\r\n    this.allocateRequest = pAllocateRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAllocatedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Container> getAllocatedContainers()\n{\r\n    if (this.containers != null) {\r\n        return this.containers;\r\n    }\r\n    initAllocatedContainers();\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initAllocatedContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initAllocatedContainers()\n{\r\n    DistributedSchedulingAllocateRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerProto> list = p.getAllocatedContainersList();\r\n    this.containers = new ArrayList<Container>();\r\n    for (ContainerProto c : list) {\r\n        this.containers.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAllocatedContainers",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setAllocatedContainers(List<Container> pContainers)\n{\r\n    maybeInitBuilder();\r\n    if (pContainers == null || pContainers.isEmpty()) {\r\n        if (this.containers != null) {\r\n            this.containers.clear();\r\n        }\r\n        builder.clearAllocatedContainers();\r\n        return;\r\n    }\r\n    this.containers = new ArrayList<>();\r\n    this.containers.addAll(pContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DistributedSchedulingAllocateRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = DistributedSchedulingAllocateRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containers != null) {\r\n        builder.clearAllocatedContainers();\r\n        Iterable<ContainerProto> iterable = getContainerProtoIterable(this.containers);\r\n        builder.addAllAllocatedContainers(iterable);\r\n    }\r\n    if (this.allocateRequest != null) {\r\n        builder.setAllocateRequest(((AllocateRequestPBImpl) this.allocateRequest).getProto());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerProtoIterable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Iterable<ContainerProto> getContainerProtoIterable(final List<Container> newContainersList)\n{\r\n    maybeInitBuilder();\r\n    return new Iterable<ContainerProto>() {\r\n\r\n        @Override\r\n        public synchronized Iterator<ContainerProto> iterator() {\r\n            return new Iterator<ContainerProto>() {\r\n\r\n                Iterator<Container> iter = newContainersList.iterator();\r\n\r\n                @Override\r\n                public synchronized boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public synchronized ContainerProto next() {\r\n                    return ProtoUtils.convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public synchronized void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerPBImpl convertFromProtoFormat(ContainerProto p)\n{\r\n    return new ContainerPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AllocateRequestPBImpl convertFromProtoFormat(AllocateRequestProto p)\n{\r\n    return new AllocateRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "initContext",
  "errType" : [ "JAXBException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "JSONJAXBContext initContext()\n{\r\n    try {\r\n        return new JSONJAXBContext(JSONConfiguration.DEFAULT, WeightedPolicyInfo.class);\r\n    } catch (JAXBException e) {\r\n        LOG.error(\"Error parsing the policy.\", e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "fromByteBuffer",
  "errType" : [ "JAXBException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "WeightedPolicyInfo fromByteBuffer(ByteBuffer bb) throws FederationPolicyInitializationException\n{\r\n    if (jsonjaxbContext == null) {\r\n        throw new FederationPolicyInitializationException(\"JSONJAXBContext should\" + \" not be null.\");\r\n    }\r\n    try {\r\n        JSONUnmarshaller unmarshaller = jsonjaxbContext.createJSONUnmarshaller();\r\n        final byte[] bytes = new byte[bb.remaining()];\r\n        bb.get(bytes);\r\n        String params = new String(bytes, StandardCharsets.UTF_8);\r\n        WeightedPolicyInfo weightedPolicyInfo = unmarshaller.unmarshalFromJSON(new StringReader(params), WeightedPolicyInfo.class);\r\n        return weightedPolicyInfo;\r\n    } catch (JAXBException j) {\r\n        throw new FederationPolicyInitializationException(j);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "getRouterPolicyWeights",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<SubClusterIdInfo, Float> getRouterPolicyWeights()\n{\r\n    return routerPolicyWeights;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "setRouterPolicyWeights",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRouterPolicyWeights(Map<SubClusterIdInfo, Float> policyWeights)\n{\r\n    this.routerPolicyWeights = policyWeights;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "getAMRMPolicyWeights",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<SubClusterIdInfo, Float> getAMRMPolicyWeights()\n{\r\n    return amrmPolicyWeights;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "setAMRMPolicyWeights",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAMRMPolicyWeights(Map<SubClusterIdInfo, Float> policyWeights)\n{\r\n    this.amrmPolicyWeights = policyWeights;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "toByteBuffer",
  "errType" : [ "JAXBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ByteBuffer toByteBuffer() throws FederationPolicyInitializationException\n{\r\n    if (jsonjaxbContext == null) {\r\n        throw new FederationPolicyInitializationException(\"JSONJAXBContext should\" + \" not be null.\");\r\n    }\r\n    try {\r\n        String s = toJSONString();\r\n        return ByteBuffer.wrap(s.getBytes(StandardCharsets.UTF_8));\r\n    } catch (JAXBException j) {\r\n        throw new FederationPolicyInitializationException(j);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "toJSONString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String toJSONString() throws JAXBException\n{\r\n    JSONMarshaller marshaller = jsonjaxbContext.createJSONMarshaller();\r\n    marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\r\n    StringWriter sw = new StringWriter(256);\r\n    marshaller.marshallToJSON(this, sw);\r\n    return sw.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null || !other.getClass().equals(this.getClass())) {\r\n        return false;\r\n    }\r\n    WeightedPolicyInfo otherPolicy = (WeightedPolicyInfo) other;\r\n    Map<SubClusterIdInfo, Float> otherAMRMWeights = otherPolicy.getAMRMPolicyWeights();\r\n    Map<SubClusterIdInfo, Float> otherRouterWeights = otherPolicy.getRouterPolicyWeights();\r\n    boolean amrmWeightsMatch = otherAMRMWeights != null && getAMRMPolicyWeights() != null && CollectionUtils.isEqualCollection(otherAMRMWeights.entrySet(), getAMRMPolicyWeights().entrySet());\r\n    boolean routerWeightsMatch = otherRouterWeights != null && getRouterPolicyWeights() != null && CollectionUtils.isEqualCollection(otherRouterWeights.entrySet(), getRouterPolicyWeights().entrySet());\r\n    return amrmWeightsMatch && routerWeightsMatch;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    return 31 * amrmPolicyWeights.hashCode() + routerPolicyWeights.hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "getHeadroomAlpha",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getHeadroomAlpha()\n{\r\n    return headroomAlpha;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "setHeadroomAlpha",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHeadroomAlpha(float headroomAlpha)\n{\r\n    this.headroomAlpha = headroomAlpha;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\dao",
  "methodName" : "toString",
  "errType" : [ "JAXBException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    try {\r\n        return toJSONString();\r\n    } catch (JAXBException e) {\r\n        e.printStackTrace();\r\n        return \"Error serializing to string.\";\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "appsTableInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String appsTableInit()\n{\r\n    return appsTableInit(false, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "appsTableInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String appsTableInit(boolean isResourceManager)\n{\r\n    return appsTableInit(false, isResourceManager);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "appsTableInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String appsTableInit(boolean isFairSchedulerPage, boolean isResourceManager)\n{\r\n    return tableInit().append(\", 'aaData': appsTableData\").append(\", bDeferRender: true\").append(\", bProcessing: true\").append(\"\\n, aoColumnDefs: \").append(getAppsTableColumnDefs(isFairSchedulerPage, isResourceManager)).append(\", aaSorting: [[0, 'desc']]}\").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getAppsTableColumnDefs",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String getAppsTableColumnDefs(boolean isFairSchedulerPage, boolean isResourceManager)\n{\r\n    String progressIndex = \"[11]\";\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"[\\n\").append(\"{'sType':'natural', 'aTargets': [0], \").append(\"'mRender': parseHadoopID },\\n\").append(\"{'sType':'num-ignore-str', 'aTargets': [7, 8, 9], \").append(\"'mRender': renderHadoopDate },\\n\");\r\n    if (isResourceManager) {\r\n        sb.append(\"{'sType':'num-ignore-str', \").append(\"'aTargets': [12, 13, 14, 15, 16] },\\n\");\r\n        progressIndex = \"[21]\";\r\n    } else if (isFairSchedulerPage) {\r\n        sb.append(\"{'sType':'num-ignore-str', \").append(\"'aTargets': [11, 12, 13, 14, 15] },\\n\");\r\n        progressIndex = \"[16]\";\r\n    }\r\n    sb.append(\"{'sType':'numeric', bSearchable:false, 'aTargets':\").append(progressIndex).append(\", 'mRender': parseHadoopProgress }\\n]\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "attemptsTableInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String attemptsTableInit()\n{\r\n    return tableInit().append(\", 'aaData': attemptsTableData\").append(\", bDeferRender: true\").append(\", bProcessing: true\").append(\"\\n, aoColumnDefs: \").append(getAttemptsTableColumnDefs()).append(\", aaSorting: [[0, 'desc']]}\").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getAttemptsTableColumnDefs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getAttemptsTableColumnDefs()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    return sb.append(\"[\\n\").append(\"{'sType':'natural', 'aTargets': [0]\").append(\", 'mRender': parseHadoopID }\").append(\"\\n, {'sType':'numeric', 'aTargets': [1]\").append(\", 'mRender': renderHadoopDate }]\").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "containersTableInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String containersTableInit()\n{\r\n    return tableInit().append(\", 'aaData': containersTableData\").append(\", bDeferRender: true\").append(\", bProcessing: true\").append(\"\\n, aoColumnDefs: \").append(getContainersTableColumnDefs()).append(\", aaSorting: [[0, 'desc']]}\").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainersTableColumnDefs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getContainersTableColumnDefs()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    return sb.append(\"[\\n\").append(\"{'sType':'natural', 'aTargets': [0]\").append(\", 'mRender': parseHadoopID }]\").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "resourceRequestsTableInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String resourceRequestsTableInit()\n{\r\n    return tableInit().append(\", 'aaData': resourceRequestsTableData\").append(\", bDeferRender: true\").append(\", bProcessing: true}\").toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "appendToolSection",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Hamlet.UL<Hamlet.DIV<Hamlet>> appendToolSection(Hamlet.DIV<Hamlet> section, Configuration conf)\n{\r\n    boolean isToolsEnabled = conf.getBoolean(YarnConfiguration.YARN_WEBAPP_UI1_ENABLE_TOOLS, true);\r\n    Hamlet.DIV<Hamlet> tools = null;\r\n    Hamlet.UL<Hamlet.DIV<Hamlet>> enabledTools = null;\r\n    if (isToolsEnabled) {\r\n        tools = section.h3(\"Tools\");\r\n        enabledTools = tools.ul().li().a(\"/conf\", \"Configuration\").__().li().a(\"/logs\", \"Local logs\").__().li().a(\"/stacks\", \"Server stacks\").__().li().a(\"/jmx?qry=Hadoop:*\", \"Server metrics\").__();\r\n    } else {\r\n        section.h4(\"Tools (DISABLED)\").__();\r\n    }\r\n    return enabledTools;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "reportNewCollectorInfo",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ReportNewCollectorInfoResponse reportNewCollectorInfo(ReportNewCollectorInfoRequest request) throws YarnException, IOException\n{\r\n    ReportNewCollectorInfoRequestProto requestProto = ((ReportNewCollectorInfoRequestPBImpl) request).getProto();\r\n    try {\r\n        return new ReportNewCollectorInfoResponsePBImpl(proxy.reportNewCollectorInfo(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "getTimelineCollectorContext",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetTimelineCollectorContextResponse getTimelineCollectorContext(GetTimelineCollectorContextRequest request) throws YarnException, IOException\n{\r\n    GetTimelineCollectorContextRequestProto requestProto = ((GetTimelineCollectorContextRequestPBImpl) request).getProto();\r\n    try {\r\n        return new GetTimelineCollectorContextResponsePBImpl(proxy.getTimelineCollectorContext(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security\\http",
  "methodName" : "createFilterConfig",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<String, String> createFilterConfig(Configuration conf)\n{\r\n    Map<String, String> filterConfig = AuthenticationFilterInitializer.getFilterConfigMap(conf, configPrefix);\r\n    for (Map.Entry<String, String> entry : conf.getPropsWithPrefix(ProxyUsers.CONF_HADOOP_PROXYUSER).entrySet()) {\r\n        filterConfig.put(\"proxyuser\" + entry.getKey(), entry.getValue());\r\n    }\r\n    filterConfig.put(DelegationTokenAuthenticationHandler.TOKEN_KIND, RMDelegationTokenIdentifier.KIND_NAME.toString());\r\n    return filterConfig;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security\\http",
  "methodName" : "initFilter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initFilter(FilterContainer container, Configuration conf)\n{\r\n    Map<String, String> filterConfig = createFilterConfig(conf);\r\n    container.addFilter(\"RMAuthenticationFilter\", RMAuthenticationFilter.class.getName(), filterConfig);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getFileName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFileName()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setFilename",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFilename(String filename)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getResourceKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getResourceKey()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setResourceKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResourceKey(String key)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "reinitialize",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void reinitialize(FederationPolicyInitializationContext initializationContext) throws FederationPolicyInitializationException\n{\r\n    isDirty = true;\r\n    FederationPolicyInitializationContextValidator.validate(initializationContext, this.getClass().getCanonicalName());\r\n    WeightedPolicyInfo newPolicyInfo = WeightedPolicyInfo.fromByteBuffer(initializationContext.getSubClusterPolicyConfiguration().getParams());\r\n    if (policyInfo != null && policyInfo.equals(newPolicyInfo)) {\r\n        isDirty = false;\r\n        return;\r\n    }\r\n    validate(newPolicyInfo);\r\n    setPolicyInfo(newPolicyInfo);\r\n    this.policyContext = initializationContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void validate(WeightedPolicyInfo newPolicyInfo) throws FederationPolicyInitializationException\n{\r\n    if (newPolicyInfo == null) {\r\n        throw new FederationPolicyInitializationException(\"The policy to \" + \"validate should not be null.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getIsDirty",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getIsDirty()\n{\r\n    return isDirty;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getPolicyInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WeightedPolicyInfo getPolicyInfo()\n{\r\n    return policyInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setPolicyInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPolicyInfo(WeightedPolicyInfo policyInfo)\n{\r\n    this.policyInfo = policyInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getPolicyContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FederationPolicyInitializationContext getPolicyContext()\n{\r\n    return policyContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setPolicyContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPolicyContext(FederationPolicyInitializationContext policyContext)\n{\r\n    this.policyContext = policyContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getActiveSubclusters",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<SubClusterId, SubClusterInfo> getActiveSubclusters() throws YarnException\n{\r\n    Map<SubClusterId, SubClusterInfo> activeSubclusters = getPolicyContext().getFederationStateStoreFacade().getSubClusters(true);\r\n    if (activeSubclusters == null || activeSubclusters.size() < 1) {\r\n        throw new NoActiveSubclustersException(\"Zero active subclusters, cannot pick where to send job.\");\r\n    }\r\n    return activeSubclusters;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReportNewCollectorInfoRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (collectorsList != null) {\r\n        addLocalCollectorsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ReportNewCollectorInfoRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLocalCollectorsToProto",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addLocalCollectorsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearAppCollectors();\r\n    List<AppCollectorDataProto> protoList = new ArrayList<AppCollectorDataProto>();\r\n    for (AppCollectorData m : this.collectorsList) {\r\n        protoList.add(convertToProtoFormat(m));\r\n    }\r\n    builder.addAllAppCollectors(protoList);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalCollectorsList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalCollectorsList()\n{\r\n    ReportNewCollectorInfoRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<AppCollectorDataProto> list = p.getAppCollectorsList();\r\n    this.collectorsList = new ArrayList<AppCollectorData>();\r\n    for (AppCollectorDataProto m : list) {\r\n        this.collectorsList.add(convertFromProtoFormat(m));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAppCollectorsList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<AppCollectorData> getAppCollectorsList()\n{\r\n    if (this.collectorsList == null) {\r\n        initLocalCollectorsList();\r\n    }\r\n    return this.collectorsList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAppCollectorsList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAppCollectorsList(List<AppCollectorData> appCollectorsList)\n{\r\n    maybeInitBuilder();\r\n    if (appCollectorsList == null) {\r\n        builder.clearAppCollectors();\r\n    }\r\n    this.collectorsList = appCollectorsList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AppCollectorDataPBImpl convertFromProtoFormat(AppCollectorDataProto p)\n{\r\n    return new AppCollectorDataPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppCollectorDataProto convertToProtoFormat(AppCollectorData m)\n{\r\n    return ((AppCollectorDataPBImpl) m).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DeleteApplicationHomeSubClusterRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = DeleteApplicationHomeSubClusterRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    DeleteApplicationHomeSubClusterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getApplicationId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null) {\r\n        builder.clearApplicationId();\r\n        return;\r\n    }\r\n    builder.setApplicationId(convertToProtoFormat(applicationId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId convertFromProtoFormat(ApplicationIdProto appId)\n{\r\n    return new ApplicationIdPBImpl(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId appId)\n{\r\n    return ((ApplicationIdPBImpl) appId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetSubClusterPolicyConfigurationRequestProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetSubClusterPolicyConfigurationRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getQueue()\n{\r\n    GetSubClusterPolicyConfigurationRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getQueue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueue(String queueName)\n{\r\n    maybeInitBuilder();\r\n    if (queueName == null) {\r\n        builder.clearQueue();\r\n        return;\r\n    }\r\n    builder.setQueue(queueName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "fromAppInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "BasicAppInfo fromAppInfo(AppInfo report)\n{\r\n    return new BasicAppInfo(report.getAppState(), report.getUser());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getAppState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnApplicationState getAppState()\n{\r\n    return this.appState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return this.user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getHomeSubcluster",
  "errType" : [ "YarnException", "YarnException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "SubClusterId getHomeSubcluster(ApplicationSubmissionContext appSubmissionContext, List<SubClusterId> blackListSubClusters) throws YarnException\n{\r\n    Map<String, SubClusterPolicyConfiguration> cachedConfs = globalConfMap;\r\n    Map<String, FederationRouterPolicy> policyMap = globalPolicyMap;\r\n    if (appSubmissionContext == null) {\r\n        throw new FederationPolicyException(\"The ApplicationSubmissionContext \" + \"cannot be null.\");\r\n    }\r\n    String queue = appSubmissionContext.getQueue();\r\n    if (queue == null) {\r\n        queue = YarnConfiguration.DEFAULT_QUEUE_NAME;\r\n    }\r\n    SubClusterPolicyConfiguration configuration = null;\r\n    try {\r\n        configuration = federationFacade.getPolicyConfiguration(queue);\r\n    } catch (YarnException e) {\r\n        String errMsg = \"There is no policy configured for the queue: \" + queue + \", falling back to defaults.\";\r\n        LOG.warn(errMsg, e);\r\n    }\r\n    if (configuration == null) {\r\n        LOG.warn(\"There is no policies configured for queue: \" + queue + \" we\" + \" fallback to default policy for: \" + YarnConfiguration.DEFAULT_FEDERATION_POLICY_KEY);\r\n        queue = YarnConfiguration.DEFAULT_FEDERATION_POLICY_KEY;\r\n        try {\r\n            configuration = federationFacade.getPolicyConfiguration(queue);\r\n        } catch (YarnException e) {\r\n            String errMsg = \"Cannot retrieve policy configured for the queue: \" + queue + \", falling back to defaults.\";\r\n            LOG.warn(errMsg, e);\r\n        }\r\n    }\r\n    if (configuration == null) {\r\n        configuration = cachedConfs.get(YarnConfiguration.DEFAULT_FEDERATION_POLICY_KEY);\r\n    }\r\n    if (!cachedConfs.containsKey(queue) || !cachedConfs.get(queue).equals(configuration)) {\r\n        singlePolicyReinit(policyMap, cachedConfs, queue, configuration);\r\n    }\r\n    FederationRouterPolicy policy = policyMap.get(queue);\r\n    if (policy == null) {\r\n        throw new FederationPolicyException(\"No FederationRouterPolicy found \" + \"for queue: \" + appSubmissionContext.getQueue() + \" (for \" + \"application: \" + appSubmissionContext.getApplicationId() + \") \" + \"and no default specified.\");\r\n    }\r\n    return policy.getHomeSubcluster(appSubmissionContext, blackListSubClusters);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "singlePolicyReinit",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void singlePolicyReinit(Map<String, FederationRouterPolicy> policyMap, Map<String, SubClusterPolicyConfiguration> cachedConfs, String queue, SubClusterPolicyConfiguration conf) throws FederationPolicyInitializationException\n{\r\n    FederationPolicyInitializationContext context = new FederationPolicyInitializationContext(conf, subClusterResolver, federationFacade, null);\r\n    String newType = context.getSubClusterPolicyConfiguration().getType();\r\n    FederationRouterPolicy routerPolicy = policyMap.get(queue);\r\n    FederationPolicyManager federationPolicyManager = FederationPolicyUtils.instantiatePolicyManager(newType);\r\n    federationPolicyManager.setQueue(queue);\r\n    routerPolicy = federationPolicyManager.getRouterPolicy(context, routerPolicy);\r\n    synchronized (this) {\r\n        policyMap.put(queue, routerPolicy);\r\n        cachedConfs.put(queue, conf);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "reset",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void reset()\n{\r\n    SubClusterPolicyConfiguration conf = globalConfMap.get(YarnConfiguration.DEFAULT_FEDERATION_POLICY_KEY);\r\n    FederationRouterPolicy policy = globalPolicyMap.get(YarnConfiguration.DEFAULT_FEDERATION_POLICY_KEY);\r\n    globalConfMap = new ConcurrentHashMap<>();\r\n    globalPolicyMap = new ConcurrentHashMap<>();\r\n    globalConfMap.put(YarnConfiguration.DEFAULT_FEDERATION_POLICY_KEY, conf);\r\n    globalPolicyMap.put(YarnConfiguration.DEFAULT_FEDERATION_POLICY_KEY, policy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "serializeConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterPolicyConfiguration serializeConf() throws FederationPolicyInitializationException\n{\r\n    ByteBuffer buf = weightedPolicyInfo.toByteBuffer();\r\n    return SubClusterPolicyConfiguration.newInstance(getQueue(), this.getClass().getCanonicalName(), buf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "getWeightedPolicyInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WeightedPolicyInfo getWeightedPolicyInfo()\n{\r\n    return weightedPolicyInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "setWeightedPolicyInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setWeightedPolicyInfo(WeightedPolicyInfo weightedPolicyInfo)\n{\r\n    this.weightedPolicyInfo = weightedPolicyInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void add(ContainerInfo containerInfo)\n{\r\n    container.add(containerInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ArrayList<ContainerInfo> getContainers()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n        this.proxy = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "notify",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SCMUploaderNotifyResponse notify(SCMUploaderNotifyRequest request) throws YarnException, IOException\n{\r\n    SCMUploaderNotifyRequestProto requestProto = ((SCMUploaderNotifyRequestPBImpl) request).getProto();\r\n    try {\r\n        return new SCMUploaderNotifyResponsePBImpl(proxy.notify(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "canUpload",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SCMUploaderCanUploadResponse canUpload(SCMUploaderCanUploadRequest request) throws YarnException, IOException\n{\r\n    SCMUploaderCanUploadRequestProto requestProto = ((SCMUploaderCanUploadRequestPBImpl) request).getProto();\r\n    try {\r\n        return new SCMUploaderCanUploadResponsePBImpl(proxy.canUpload(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpdateApplicationHomeSubClusterResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NMContainerStatus newInstance(ContainerId containerId, int version, ContainerState containerState, Resource allocatedResource, String diagnostics, int containerExitStatus, Priority priority, long creationTime)\n{\r\n    return newInstance(containerId, version, containerState, allocatedResource, diagnostics, containerExitStatus, priority, creationTime, CommonNodeLabelsManager.NO_LABEL, ExecutionType.GUARANTEED, -1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "NMContainerStatus newInstance(ContainerId containerId, int version, ContainerState containerState, Resource allocatedResource, String diagnostics, int containerExitStatus, Priority priority, long creationTime, String nodeLabelExpression, ExecutionType executionType, long allocationRequestId)\n{\r\n    NMContainerStatus status = Records.newRecord(NMContainerStatus.class);\r\n    status.setContainerId(containerId);\r\n    status.setVersion(version);\r\n    status.setContainerState(containerState);\r\n    status.setAllocatedResource(allocatedResource);\r\n    status.setDiagnostics(diagnostics);\r\n    status.setContainerExitStatus(containerExitStatus);\r\n    status.setPriority(priority);\r\n    status.setCreationTime(creationTime);\r\n    status.setNodeLabelExpression(nodeLabelExpression);\r\n    status.setExecutionType(executionType);\r\n    status.setAllocationRequestId(allocationRequestId);\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAllocatedResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getAllocatedResource()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAllocatedResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAllocatedResource(Resource resource)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnostics()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiagnostics(String diagnostics)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainerState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerState getContainerState()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setContainerState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerState(ContainerState containerState)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getContainerExitStatus()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerExitStatus(int containerExitStatus)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Priority getPriority()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPriority(Priority priority)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getCreationTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getCreationTime()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setCreationTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCreationTime(long creationTime)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNodeLabelExpression()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeLabelExpression(String nodeLabelExpression)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAllocationRequestId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAllocationRequestId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAllocationRequestId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAllocationRequestId(long allocationRequestId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getVersion()\n{\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVersion(int version)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getExecutionType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ExecutionType getExecutionType()\n{\r\n    return ExecutionType.GUARANTEED;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setExecutionType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setExecutionType(ExecutionType executionType)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAllocationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getAllocationTags()\n{\r\n    return Collections.emptySet();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAllocationTags",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAllocationTags(Set<String> allocationTags)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NMContainerStatusProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return this.getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"[\").append(getContainerId()).append(\", \").append(\"CreateTime: \").append(getCreationTime()).append(\", \").append(\"Version: \").append(getVersion()).append(\", \").append(\"State: \").append(getContainerState()).append(\", \").append(\"Capability: \").append(getAllocatedResource()).append(\", \").append(\"Diagnostics: \").append(getDiagnostics()).append(\", \").append(\"ExitStatus: \").append(getContainerExitStatus()).append(\", \").append(\"NodeLabelExpression: \").append(getNodeLabelExpression()).append(\", \").append(\"Priority: \").append(getPriority()).append(\", \").append(\"AllocationRequestId: \").append(getAllocationRequestId()).append(\", \").append(\"AllocationTags: \").append(getAllocationTags()).append(\", \").append(\"]\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAllocatedResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getAllocatedResource()\n{\r\n    if (this.resource != null) {\r\n        return this.resource;\r\n    }\r\n    NMContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasResource()) {\r\n        return null;\r\n    }\r\n    this.resource = convertFromProtoFormat(p.getResource());\r\n    return this.resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    if (this.containerId != null) {\r\n        return this.containerId;\r\n    }\r\n    NMContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerId()) {\r\n        return null;\r\n    }\r\n    this.containerId = convertFromProtoFormat(p.getContainerId());\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDiagnostics()\n{\r\n    NMContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDiagnostics()) {\r\n        return null;\r\n    }\r\n    return (p.getDiagnostics());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerState getContainerState()\n{\r\n    NMContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerState()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getContainerState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAllocatedResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocatedResource(Resource resource)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null)\r\n        builder.clearResource();\r\n    this.resource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)\n{\r\n    maybeInitBuilder();\r\n    if (containerId == null)\r\n        builder.clearContainerId();\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDiagnostics(String diagnosticsInfo)\n{\r\n    maybeInitBuilder();\r\n    if (diagnosticsInfo == null) {\r\n        builder.clearDiagnostics();\r\n        return;\r\n    }\r\n    builder.setDiagnostics(diagnosticsInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setContainerState(ContainerState containerState)\n{\r\n    maybeInitBuilder();\r\n    if (containerState == null) {\r\n        builder.clearContainerState();\r\n        return;\r\n    }\r\n    builder.setContainerState(convertToProtoFormat(containerState));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getContainerExitStatus()\n{\r\n    NMContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getContainerExitStatus();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerExitStatus(int containerExitStatus)\n{\r\n    maybeInitBuilder();\r\n    builder.setContainerExitStatus(containerExitStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getVersion()\n{\r\n    NMContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setVersion(int version)\n{\r\n    maybeInitBuilder();\r\n    builder.setVersion(version);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    NMContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.priority != null) {\r\n        return this.priority;\r\n    }\r\n    if (!p.hasPriority()) {\r\n        return null;\r\n    }\r\n    this.priority = convertFromProtoFormat(p.getPriority());\r\n    return this.priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPriority(Priority priority)\n{\r\n    maybeInitBuilder();\r\n    if (priority == null)\r\n        builder.clearPriority();\r\n    this.priority = priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getCreationTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getCreationTime()\n{\r\n    NMContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getCreationTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setCreationTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCreationTime(long creationTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setCreationTime(creationTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getNodeLabelExpression()\n{\r\n    NMContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (p.hasNodeLabelExpression()) {\r\n        return p.getNodeLabelExpression();\r\n    }\r\n    return CommonNodeLabelsManager.NO_LABEL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeLabelExpression(String nodeLabelExpression)\n{\r\n    maybeInitBuilder();\r\n    if (nodeLabelExpression == null) {\r\n        builder.clearNodeLabelExpression();\r\n        return;\r\n    }\r\n    builder.setNodeLabelExpression(nodeLabelExpression);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getExecutionType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ExecutionType getExecutionType()\n{\r\n    NMContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasExecutionType()) {\r\n        return ExecutionType.GUARANTEED;\r\n    }\r\n    return convertFromProtoFormat(p.getExecutionType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setExecutionType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setExecutionType(ExecutionType executionType)\n{\r\n    maybeInitBuilder();\r\n    if (executionType == null) {\r\n        builder.clearExecutionType();\r\n        return;\r\n    }\r\n    builder.setExecutionType(convertToProtoFormat(executionType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAllocationRequestId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAllocationRequestId()\n{\r\n    NMContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getAllocationRequestId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAllocationRequestId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocationRequestId(long allocationRequestId)\n{\r\n    maybeInitBuilder();\r\n    builder.setAllocationRequestId(allocationRequestId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initAllocationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initAllocationTags()\n{\r\n    if (this.allocationTags != null) {\r\n        return;\r\n    }\r\n    NMContainerStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    this.allocationTags = new HashSet<>();\r\n    this.allocationTags.addAll(p.getAllocationTagsList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAllocationTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getAllocationTags()\n{\r\n    initAllocationTags();\r\n    return this.allocationTags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAllocationTags",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocationTags(Set<String> allocationTags)\n{\r\n    maybeInitBuilder();\r\n    builder.clearAllocationTags();\r\n    this.allocationTags = allocationTags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerId != null && !((ContainerIdPBImpl) containerId).getProto().equals(builder.getContainerId())) {\r\n        builder.setContainerId(convertToProtoFormat(this.containerId));\r\n    }\r\n    if (this.resource != null) {\r\n        builder.setResource(convertToProtoFormat(this.resource));\r\n    }\r\n    if (this.priority != null) {\r\n        builder.setPriority(convertToProtoFormat(this.priority));\r\n    }\r\n    if (this.allocationTags != null) {\r\n        builder.clearAllocationTags();\r\n        builder.addAllAllocationTags(this.allocationTags);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NMContainerStatusProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource t)\n{\r\n    return ProtoUtils.convertToProtoFormat(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerStateProto convertToProtoFormat(ContainerState containerState)\n{\r\n    return ProtoUtils.convertToProtoFormat(containerState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerState convertFromProtoFormat(ContainerStateProto containerState)\n{\r\n    return ProtoUtils.convertFromProtoFormat(containerState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PriorityPBImpl convertFromProtoFormat(PriorityProto p)\n{\r\n    return new PriorityPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PriorityProto convertToProtoFormat(Priority t)\n{\r\n    return ((PriorityPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ExecutionType convertFromProtoFormat(YarnProtos.ExecutionTypeProto e)\n{\r\n    return ProtoUtils.convertFromProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnProtos.ExecutionTypeProto convertToProtoFormat(ExecutionType e)\n{\r\n    return ProtoUtils.convertToProtoFormat(e);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnServerCommonServiceProtos.RegisterDistributedSchedulingAMResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = YarnServerCommonServiceProtos.RegisterDistributedSchedulingAMResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodesForScheduling != null) {\r\n        builder.clearNodesForScheduling();\r\n        Iterable<YarnServerCommonServiceProtos.RemoteNodeProto> iterable = getNodeIdProtoIterable(this.nodesForScheduling);\r\n        builder.addAllNodesForScheduling(iterable);\r\n    }\r\n    if (this.maxContainerResource != null) {\r\n        builder.setMaxContainerResource(ProtoUtils.convertToProtoFormat(this.maxContainerResource));\r\n    }\r\n    if (this.minContainerResource != null) {\r\n        builder.setMinContainerResource(ProtoUtils.convertToProtoFormat(this.minContainerResource));\r\n    }\r\n    if (this.incrContainerResource != null) {\r\n        builder.setIncrContainerResource(ProtoUtils.convertToProtoFormat(this.incrContainerResource));\r\n    }\r\n    if (this.registerApplicationMasterResponse != null) {\r\n        builder.setRegisterResponse(((RegisterApplicationMasterResponsePBImpl) this.registerApplicationMasterResponse).getProto());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setRegisterResponse",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRegisterResponse(RegisterApplicationMasterResponse resp)\n{\r\n    maybeInitBuilder();\r\n    if (registerApplicationMasterResponse == null) {\r\n        builder.clearRegisterResponse();\r\n    }\r\n    this.registerApplicationMasterResponse = resp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getRegisterResponse",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RegisterApplicationMasterResponse getRegisterResponse()\n{\r\n    if (this.registerApplicationMasterResponse != null) {\r\n        return this.registerApplicationMasterResponse;\r\n    }\r\n    YarnServerCommonServiceProtos.RegisterDistributedSchedulingAMResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasRegisterResponse()) {\r\n        return null;\r\n    }\r\n    this.registerApplicationMasterResponse = new RegisterApplicationMasterResponsePBImpl(p.getRegisterResponse());\r\n    return this.registerApplicationMasterResponse;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setMaxContainerResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMaxContainerResource(Resource maxResource)\n{\r\n    maybeInitBuilder();\r\n    if (maxContainerResource == null) {\r\n        builder.clearMaxContainerResource();\r\n    }\r\n    this.maxContainerResource = maxResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getMaxContainerResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getMaxContainerResource()\n{\r\n    if (this.maxContainerResource != null) {\r\n        return this.maxContainerResource;\r\n    }\r\n    YarnServerCommonServiceProtos.RegisterDistributedSchedulingAMResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasMaxContainerResource()) {\r\n        return null;\r\n    }\r\n    this.maxContainerResource = ProtoUtils.convertFromProtoFormat(p.getMaxContainerResource());\r\n    return this.maxContainerResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setMinContainerResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMinContainerResource(Resource minResource)\n{\r\n    maybeInitBuilder();\r\n    if (minContainerResource == null) {\r\n        builder.clearMinContainerResource();\r\n    }\r\n    this.minContainerResource = minResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getMinContainerResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getMinContainerResource()\n{\r\n    if (this.minContainerResource != null) {\r\n        return this.minContainerResource;\r\n    }\r\n    YarnServerCommonServiceProtos.RegisterDistributedSchedulingAMResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasMinContainerResource()) {\r\n        return null;\r\n    }\r\n    this.minContainerResource = ProtoUtils.convertFromProtoFormat(p.getMinContainerResource());\r\n    return this.minContainerResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setIncrContainerResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setIncrContainerResource(Resource incrResource)\n{\r\n    maybeInitBuilder();\r\n    if (incrContainerResource == null) {\r\n        builder.clearIncrContainerResource();\r\n    }\r\n    this.incrContainerResource = incrResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getIncrContainerResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getIncrContainerResource()\n{\r\n    if (this.incrContainerResource != null) {\r\n        return this.incrContainerResource;\r\n    }\r\n    YarnServerCommonServiceProtos.RegisterDistributedSchedulingAMResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasIncrContainerResource()) {\r\n        return null;\r\n    }\r\n    this.incrContainerResource = ProtoUtils.convertFromProtoFormat(p.getIncrContainerResource());\r\n    return this.incrContainerResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerTokenExpiryInterval",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerTokenExpiryInterval(int interval)\n{\r\n    maybeInitBuilder();\r\n    builder.setContainerTokenExpiryInterval(interval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerTokenExpiryInterval",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getContainerTokenExpiryInterval()\n{\r\n    YarnServerCommonServiceProtos.RegisterDistributedSchedulingAMResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerTokenExpiryInterval()) {\r\n        return 0;\r\n    }\r\n    return p.getContainerTokenExpiryInterval();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerIdStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerIdStart(long containerIdStart)\n{\r\n    maybeInitBuilder();\r\n    builder.setContainerIdStart(containerIdStart);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerIdStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getContainerIdStart()\n{\r\n    YarnServerCommonServiceProtos.RegisterDistributedSchedulingAMResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasContainerIdStart()) {\r\n        return 0;\r\n    }\r\n    return p.getContainerIdStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodesForScheduling",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setNodesForScheduling(List<RemoteNode> nodesForScheduling)\n{\r\n    maybeInitBuilder();\r\n    if (nodesForScheduling == null || nodesForScheduling.isEmpty()) {\r\n        if (this.nodesForScheduling != null) {\r\n            this.nodesForScheduling.clear();\r\n        }\r\n        builder.clearNodesForScheduling();\r\n        return;\r\n    }\r\n    this.nodesForScheduling = new ArrayList<>();\r\n    this.nodesForScheduling.addAll(nodesForScheduling);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodesForScheduling",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<RemoteNode> getNodesForScheduling()\n{\r\n    if (nodesForScheduling != null) {\r\n        return nodesForScheduling;\r\n    }\r\n    initLocalNodesForSchedulingList();\r\n    return nodesForScheduling;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalNodesForSchedulingList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalNodesForSchedulingList()\n{\r\n    YarnServerCommonServiceProtos.RegisterDistributedSchedulingAMResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<YarnServerCommonServiceProtos.RemoteNodeProto> list = p.getNodesForSchedulingList();\r\n    nodesForScheduling = new ArrayList<>();\r\n    if (list != null) {\r\n        for (YarnServerCommonServiceProtos.RemoteNodeProto t : list) {\r\n            nodesForScheduling.add(new RemoteNodePBImpl(t));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeIdProtoIterable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Iterable<RemoteNodeProto> getNodeIdProtoIterable(final List<RemoteNode> nodeList)\n{\r\n    maybeInitBuilder();\r\n    return new Iterable<RemoteNodeProto>() {\r\n\r\n        @Override\r\n        public synchronized Iterator<RemoteNodeProto> iterator() {\r\n            return new Iterator<RemoteNodeProto>() {\r\n\r\n                Iterator<RemoteNode> iter = nodeList.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public RemoteNodeProto next() {\r\n                    return ((RemoteNodePBImpl) iter.next()).getProto();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getResourceKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getResourceKey()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setResourceKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResourceKey(String key)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClustersInfoResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.subClusterInfos != null) {\r\n        addSubClusterInfosToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetSubClustersInfoResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getSubClusters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<SubClusterInfo> getSubClusters()\n{\r\n    initSubClustersInfoList();\r\n    return subClusterInfos;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setSubClusters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setSubClusters(List<SubClusterInfo> subClusters)\n{\r\n    if (subClusters == null) {\r\n        builder.clearSubClusterInfos();\r\n        return;\r\n    }\r\n    this.subClusterInfos = subClusters;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "initSubClustersInfoList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initSubClustersInfoList()\n{\r\n    if (this.subClusterInfos != null) {\r\n        return;\r\n    }\r\n    GetSubClustersInfoResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<SubClusterInfoProto> subClusterInfosList = p.getSubClusterInfosList();\r\n    subClusterInfos = new ArrayList<SubClusterInfo>();\r\n    for (SubClusterInfoProto r : subClusterInfosList) {\r\n        subClusterInfos.add(convertFromProtoFormat(r));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "addSubClusterInfosToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addSubClusterInfosToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearSubClusterInfos();\r\n    if (subClusterInfos == null) {\r\n        return;\r\n    }\r\n    Iterable<SubClusterInfoProto> iterable = new Iterable<SubClusterInfoProto>() {\r\n\r\n        @Override\r\n        public Iterator<SubClusterInfoProto> iterator() {\r\n            return new Iterator<SubClusterInfoProto>() {\r\n\r\n                private Iterator<SubClusterInfo> iter = subClusterInfos.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public SubClusterInfoProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllSubClusterInfos(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterInfoProto convertToProtoFormat(SubClusterInfo r)\n{\r\n    return ((SubClusterInfoPBImpl) r).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterInfoPBImpl convertFromProtoFormat(SubClusterInfoProto r)\n{\r\n    return new SubClusterInfoPBImpl(r);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnServerCommonProtos.OpportunisticContainersStatusProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = YarnServerCommonProtos.OpportunisticContainersStatusProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getRunningOpportContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getRunningOpportContainers()\n{\r\n    YarnServerCommonProtos.OpportunisticContainersStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getRunningOpportContainers();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setRunningOpportContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRunningOpportContainers(int runningOpportContainers)\n{\r\n    maybeInitBuilder();\r\n    builder.setRunningOpportContainers(runningOpportContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getOpportMemoryUsed",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getOpportMemoryUsed()\n{\r\n    YarnServerCommonProtos.OpportunisticContainersStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getOpportMemoryUsed();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setOpportMemoryUsed",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setOpportMemoryUsed(long opportMemoryUsed)\n{\r\n    maybeInitBuilder();\r\n    builder.setOpportMemoryUsed(opportMemoryUsed);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getOpportCoresUsed",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getOpportCoresUsed()\n{\r\n    YarnServerCommonProtos.OpportunisticContainersStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getOpportCoresUsed();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setOpportCoresUsed",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setOpportCoresUsed(int opportCoresUsed)\n{\r\n    maybeInitBuilder();\r\n    builder.setOpportCoresUsed(opportCoresUsed);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getQueuedOpportContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getQueuedOpportContainers()\n{\r\n    YarnServerCommonProtos.OpportunisticContainersStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getQueuedOpportContainers();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setQueuedOpportContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setQueuedOpportContainers(int queuedOpportContainers)\n{\r\n    maybeInitBuilder();\r\n    builder.setQueuedOpportContainers(queuedOpportContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getWaitQueueLength",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getWaitQueueLength()\n{\r\n    YarnServerCommonProtos.OpportunisticContainersStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getWaitQueueLength();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setWaitQueueLength",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setWaitQueueLength(int waitQueueLength)\n{\r\n    maybeInitBuilder();\r\n    builder.setWaitQueueLength(waitQueueLength);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getEstimatedQueueWaitTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getEstimatedQueueWaitTime()\n{\r\n    YarnServerCommonProtos.OpportunisticContainersStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getEstimatedQueueWaitTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setEstimatedQueueWaitTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setEstimatedQueueWaitTime(int queueWaitTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setEstimatedQueueWaitTime(queueWaitTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getOpportQueueCapacity",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getOpportQueueCapacity()\n{\r\n    YarnServerCommonProtos.OpportunisticContainersStatusProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getOpportQueueCapacity();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setOpportQueueCapacity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setOpportQueueCapacity(int maxOpportQueueLength)\n{\r\n    maybeInitBuilder();\r\n    builder.setOpportQueueCapacity(maxOpportQueueLength);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AppCollectorDataProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    AppCollectorDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.appId == null && p.hasAppId()) {\r\n        this.appId = convertFromProtoFormat(p.getAppId());\r\n    }\r\n    return this.appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getCollectorAddr",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getCollectorAddr()\n{\r\n    AppCollectorDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.collectorAddr == null && p.hasAppCollectorAddr()) {\r\n        this.collectorAddr = p.getAppCollectorAddr();\r\n    }\r\n    return this.collectorAddr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId id)\n{\r\n    maybeInitBuilder();\r\n    if (id == null) {\r\n        builder.clearAppId();\r\n    }\r\n    this.appId = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setCollectorAddr",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCollectorAddr(String collectorAddr)\n{\r\n    maybeInitBuilder();\r\n    if (collectorAddr == null) {\r\n        builder.clearAppCollectorAddr();\r\n    }\r\n    this.collectorAddr = collectorAddr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getRMIdentifier",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getRMIdentifier()\n{\r\n    AppCollectorDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.rmIdentifier == null && p.hasRmIdentifier()) {\r\n        this.rmIdentifier = p.getRmIdentifier();\r\n    }\r\n    if (this.rmIdentifier != null) {\r\n        return this.rmIdentifier;\r\n    } else {\r\n        return AppCollectorData.DEFAULT_TIMESTAMP_VALUE;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setRMIdentifier",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRMIdentifier(long rmId)\n{\r\n    maybeInitBuilder();\r\n    this.rmIdentifier = rmId;\r\n    builder.setRmIdentifier(rmId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getVersion()\n{\r\n    AppCollectorDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.version == null && p.hasRmIdentifier()) {\r\n        this.version = p.getRmIdentifier();\r\n    }\r\n    if (this.version != null) {\r\n        return this.version;\r\n    } else {\r\n        return AppCollectorData.DEFAULT_TIMESTAMP_VALUE;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setVersion(long version)\n{\r\n    maybeInitBuilder();\r\n    this.version = version;\r\n    builder.setVersion(version);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getCollectorToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token getCollectorToken()\n{\r\n    AppCollectorDataProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.collectorToken != null) {\r\n        return this.collectorToken;\r\n    }\r\n    if (!p.hasAppCollectorToken()) {\r\n        return null;\r\n    }\r\n    this.collectorToken = new TokenPBImpl(p.getAppCollectorToken());\r\n    return this.collectorToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setCollectorToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setCollectorToken(Token token)\n{\r\n    maybeInitBuilder();\r\n    if (token == null) {\r\n        builder.clearAppCollectorToken();\r\n    }\r\n    this.collectorToken = token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = AppCollectorDataProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.appId != null) {\r\n        builder.setAppId(convertToProtoFormat(this.appId));\r\n    }\r\n    if (this.collectorAddr != null) {\r\n        builder.setAppCollectorAddr(this.collectorAddr);\r\n    }\r\n    if (this.rmIdentifier != null) {\r\n        builder.setRmIdentifier(this.rmIdentifier);\r\n    }\r\n    if (this.version != null) {\r\n        builder.setVersion(this.version);\r\n    }\r\n    if (this.collectorToken != null) {\r\n        builder.setAppCollectorToken(((TokenPBImpl) this.collectorToken).getProto());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnServerCommonServiceProtos.DistributedSchedulingAllocateResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = YarnServerCommonServiceProtos.DistributedSchedulingAllocateResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodesForScheduling != null) {\r\n        builder.clearNodesForScheduling();\r\n        Iterable<YarnServerCommonServiceProtos.RemoteNodeProto> iterable = getNodeIdProtoIterable(this.nodesForScheduling);\r\n        builder.addAllNodesForScheduling(iterable);\r\n    }\r\n    if (this.allocateResponse != null) {\r\n        builder.setAllocateResponse(((AllocateResponsePBImpl) this.allocateResponse).getProto());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAllocateResponse",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAllocateResponse(AllocateResponse response)\n{\r\n    maybeInitBuilder();\r\n    if (allocateResponse == null) {\r\n        builder.clearAllocateResponse();\r\n    }\r\n    this.allocateResponse = response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAllocateResponse",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AllocateResponse getAllocateResponse()\n{\r\n    if (this.allocateResponse != null) {\r\n        return this.allocateResponse;\r\n    }\r\n    YarnServerCommonServiceProtos.DistributedSchedulingAllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAllocateResponse()) {\r\n        return null;\r\n    }\r\n    this.allocateResponse = new AllocateResponsePBImpl(p.getAllocateResponse());\r\n    return this.allocateResponse;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodesForScheduling",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setNodesForScheduling(List<RemoteNode> nodesForScheduling)\n{\r\n    maybeInitBuilder();\r\n    if (nodesForScheduling == null || nodesForScheduling.isEmpty()) {\r\n        if (this.nodesForScheduling != null) {\r\n            this.nodesForScheduling.clear();\r\n        }\r\n        builder.clearNodesForScheduling();\r\n        return;\r\n    }\r\n    this.nodesForScheduling = new ArrayList<>();\r\n    this.nodesForScheduling.addAll(nodesForScheduling);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodesForScheduling",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<RemoteNode> getNodesForScheduling()\n{\r\n    if (nodesForScheduling != null) {\r\n        return nodesForScheduling;\r\n    }\r\n    initLocalNodesForSchedulingList();\r\n    return nodesForScheduling;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLocalNodesForSchedulingList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLocalNodesForSchedulingList()\n{\r\n    YarnServerCommonServiceProtos.DistributedSchedulingAllocateResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<YarnServerCommonServiceProtos.RemoteNodeProto> list = p.getNodesForSchedulingList();\r\n    nodesForScheduling = new ArrayList<>();\r\n    if (list != null) {\r\n        for (YarnServerCommonServiceProtos.RemoteNodeProto t : list) {\r\n            nodesForScheduling.add(new RemoteNodePBImpl(t));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeIdProtoIterable",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Iterable<RemoteNodeProto> getNodeIdProtoIterable(final List<RemoteNode> nodeList)\n{\r\n    maybeInitBuilder();\r\n    return new Iterable<RemoteNodeProto>() {\r\n\r\n        @Override\r\n        public synchronized Iterator<RemoteNodeProto> iterator() {\r\n            return new Iterator<RemoteNodeProto>() {\r\n\r\n                Iterator<RemoteNode> iter = nodeList.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public RemoteNodeProto next() {\r\n                    return ((RemoteNodePBImpl) iter.next()).getProto();\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UnRegisterNodeManagerResponse newInstance()\n{\r\n    return Records.newRecord(UnRegisterNodeManagerResponse.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Version newInstance(int majorVersion, int minorVersion)\n{\r\n    Version version = Records.newRecord(Version.class);\r\n    version.setMajorVersion(majorVersion);\r\n    version.setMinorVersion(minorVersion);\r\n    return version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records",
  "methodName" : "getMajorVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMajorVersion()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records",
  "methodName" : "setMajorVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMajorVersion(int majorVersion)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records",
  "methodName" : "getMinorVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMinorVersion()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records",
  "methodName" : "setMinorVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMinorVersion(int minorVersion)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    return getMajorVersion() + \".\" + getMinorVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records",
  "methodName" : "isCompatibleTo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isCompatibleTo(Version version)\n{\r\n    return getMajorVersion() == version.getMajorVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + getMajorVersion();\r\n    result = prime * result + getMinorVersion();\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj)\r\n        return true;\r\n    if (obj == null)\r\n        return false;\r\n    if (getClass() != obj.getClass())\r\n        return false;\r\n    Version other = (Version) obj;\r\n    if (this.getMajorVersion() == other.getMajorVersion() && this.getMinorVersion() == other.getMinorVersion()) {\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security\\http",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void init(FilterConfig filterConfig) throws ServletException\n{\r\n    filterConfig.getServletContext().setAttribute(DelegationTokenAuthenticationFilter.DELEGATION_TOKEN_SECRET_MANAGER_ATTR, manager);\r\n    super.init(filterConfig);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security\\http",
  "methodName" : "doFilter",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException\n{\r\n    HttpServletRequest req = (HttpServletRequest) request;\r\n    String newHeader = req.getHeader(DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER);\r\n    if (newHeader == null || newHeader.isEmpty()) {\r\n        final String oldHeader = req.getHeader(OLD_HEADER);\r\n        if (oldHeader != null && !oldHeader.isEmpty()) {\r\n            request = new HttpServletRequestWrapper(req) {\r\n\r\n                @Override\r\n                public String getHeader(String name) {\r\n                    if (name.equals(DelegationTokenAuthenticator.DELEGATION_TOKEN_HEADER)) {\r\n                        return oldHeader;\r\n                    }\r\n                    return super.getHeader(name);\r\n                }\r\n            };\r\n        }\r\n    }\r\n    super.doFilter(request, response, filterChain);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security\\http",
  "methodName" : "setDelegationTokenSecretManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDelegationTokenSecretManager(AbstractDelegationTokenSecretManager<?> manager)\n{\r\n    RMAuthenticationFilter.manager = manager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AllocateRequest getAllocateRequest()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAllocateRequest(AllocateRequest allocateRequest)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAllocatedContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Container> getAllocatedContainers()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAllocatedContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAllocatedContainers(List<Container> containers)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "reinitialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void reinitialize(FederationPolicyInitializationContext federationPolicyContext) throws FederationPolicyInitializationException\n{\r\n    FederationPolicyInitializationContextValidator.validate(federationPolicyContext, this.getClass().getCanonicalName());\r\n    setPolicyContext(federationPolicyContext);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "getHomeSubcluster",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SubClusterId getHomeSubcluster(ApplicationSubmissionContext appSubmissionContext, List<SubClusterId> blackListSubClusters) throws YarnException\n{\r\n    validate(appSubmissionContext);\r\n    throw new FederationPolicyException(\"The policy configured for this queue\" + \" (\" + appSubmissionContext.getQueue() + \") reject all routing \" + \"requests by construction. Application \" + appSubmissionContext.getApplicationId() + \" cannot be routed to any RM.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\util\\timeline",
  "methodName" : "setTimelineFilters",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void setTimelineFilters(Configuration conf, String configuredInitializers, Set<String> defaultInitializers)\n{\r\n    Set<String> ignoreInitializers = new LinkedHashSet<>();\r\n    ignoreInitializers.add(AuthenticationFilterInitializer.class.getName());\r\n    ignoreInitializers.add(ProxyUserAuthenticationFilterInitializer.class.getName());\r\n    String[] parts = configuredInitializers.split(\",\");\r\n    Set<String> target = new LinkedHashSet<String>();\r\n    for (String filterInitializer : parts) {\r\n        filterInitializer = filterInitializer.trim();\r\n        if (ignoreInitializers.contains(filterInitializer) || filterInitializer.isEmpty()) {\r\n            continue;\r\n        }\r\n        target.add(filterInitializer);\r\n    }\r\n    target.addAll(defaultInitializers);\r\n    String actualInitializers = org.apache.commons.lang3.StringUtils.join(target, \",\");\r\n    LOG.info(\"Filter initializers set for timeline service: \" + actualInitializers);\r\n    conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\util\\timeline",
  "methodName" : "addTimelineAuthFilter",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addTimelineAuthFilter(String initializers, Set<String> defaultInitializers, TimelineDelgationTokenSecretManagerService delegationTokenMgrService)\n{\r\n    TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(delegationTokenMgrService.getTimelineDelegationTokenSecretManager());\r\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class.getName())) {\r\n        defaultInitializers.add(TimelineAuthenticationFilterInitializer.class.getName());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newLocalResource",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "LocalResource newLocalResource(URL url, LocalResourceType type, LocalResourceVisibility visibility, long size, long timestamp, boolean shouldBeUploadedToSharedCache)\n{\r\n    LocalResource resource = recordFactory.newRecordInstance(LocalResource.class);\r\n    resource.setResource(url);\r\n    resource.setType(type);\r\n    resource.setVisibility(visibility);\r\n    resource.setSize(size);\r\n    resource.setTimestamp(timestamp);\r\n    resource.setShouldBeUploadedToSharedCache(shouldBeUploadedToSharedCache);\r\n    return resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newLocalResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LocalResource newLocalResource(URI uri, LocalResourceType type, LocalResourceVisibility visibility, long size, long timestamp, boolean shouldBeUploadedToSharedCache)\n{\r\n    return newLocalResource(URL.fromURI(uri), type, visibility, size, timestamp, shouldBeUploadedToSharedCache);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newApplicationId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationId newApplicationId(RecordFactory recordFactory, long clustertimestamp, CharSequence id)\n{\r\n    return ApplicationId.newInstance(clustertimestamp, Integer.parseInt(id.toString()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newApplicationId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationId newApplicationId(RecordFactory recordFactory, long clusterTimeStamp, int id)\n{\r\n    return ApplicationId.newInstance(clusterTimeStamp, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newApplicationId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationId newApplicationId(long clusterTimeStamp, int id)\n{\r\n    return ApplicationId.newInstance(clusterTimeStamp, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptId newApplicationAttemptId(ApplicationId appId, int attemptId)\n{\r\n    return ApplicationAttemptId.newInstance(appId, attemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "convert",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationId convert(long clustertimestamp, CharSequence id)\n{\r\n    return ApplicationId.newInstance(clustertimestamp, Integer.parseInt(id.toString()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId newContainerId(ApplicationAttemptId appAttemptId, long containerId)\n{\r\n    return ContainerId.newContainerId(appAttemptId, containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newContainerId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerId newContainerId(int appId, int appAttemptId, long timestamp, long id)\n{\r\n    ApplicationId applicationId = newApplicationId(timestamp, appId);\r\n    ApplicationAttemptId applicationAttemptId = newApplicationAttemptId(applicationId, appAttemptId);\r\n    ContainerId cId = newContainerId(applicationAttemptId, id);\r\n    return cId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newContainerToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token newContainerToken(ContainerId cId, int containerVersion, String host, int port, String user, Resource r, long expiryTime, int masterKeyId, byte[] password, long rmIdentifier) throws IOException\n{\r\n    ContainerTokenIdentifier identifier = new ContainerTokenIdentifier(cId, containerVersion, host + \":\" + port, user, r, expiryTime, masterKeyId, rmIdentifier, Priority.newInstance(0), 0, null, CommonNodeLabelsManager.NO_LABEL, ContainerType.TASK, ExecutionType.GUARANTEED);\r\n    return newContainerToken(BuilderUtils.newNodeId(host, port), password, identifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId newContainerId(RecordFactory recordFactory, ApplicationId appId, ApplicationAttemptId appAttemptId, int containerId)\n{\r\n    return ContainerId.newContainerId(appAttemptId, containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newNodeId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeId newNodeId(String host, int port)\n{\r\n    return NodeId.newInstance(host, port);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newNodeReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeReport newNodeReport(NodeId nodeId, NodeState nodeState, String httpAddress, String rackName, Resource used, Resource capability, int numContainers, String healthReport, long lastHealthReportTime)\n{\r\n    return newNodeReport(nodeId, nodeState, httpAddress, rackName, used, capability, numContainers, healthReport, lastHealthReportTime, null, null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newNodeReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeReport newNodeReport(NodeId nodeId, NodeState nodeState, String httpAddress, String rackName, Resource used, Resource capability, int numContainers, String healthReport, long lastHealthReportTime, Set<String> nodeLabels, Integer decommissioningTimeout, NodeUpdateType nodeUpdateType)\n{\r\n    return newNodeReport(nodeId, nodeState, httpAddress, rackName, used, capability, numContainers, healthReport, lastHealthReportTime, nodeLabels, null, null, decommissioningTimeout, nodeUpdateType, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newNodeReport",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "NodeReport newNodeReport(NodeId nodeId, NodeState nodeState, String httpAddress, String rackName, Resource used, Resource capability, int numContainers, String healthReport, long lastHealthReportTime, Set<String> nodeLabels, ResourceUtilization containersUtilization, ResourceUtilization nodeUtilization, Integer decommissioningTimeout, NodeUpdateType nodeUpdateType, Set<NodeAttribute> attrs)\n{\r\n    NodeReport nodeReport = recordFactory.newRecordInstance(NodeReport.class);\r\n    nodeReport.setNodeId(nodeId);\r\n    nodeReport.setNodeState(nodeState);\r\n    nodeReport.setHttpAddress(httpAddress);\r\n    nodeReport.setRackName(rackName);\r\n    nodeReport.setUsed(used);\r\n    nodeReport.setCapability(capability);\r\n    nodeReport.setNumContainers(numContainers);\r\n    nodeReport.setHealthReport(healthReport);\r\n    nodeReport.setLastHealthReportTime(lastHealthReportTime);\r\n    nodeReport.setNodeLabels(nodeLabels);\r\n    nodeReport.setAggregatedContainersUtilization(containersUtilization);\r\n    nodeReport.setNodeUtilization(nodeUtilization);\r\n    nodeReport.setDecommissioningTimeout(decommissioningTimeout);\r\n    nodeReport.setNodeUpdateType(nodeUpdateType);\r\n    nodeReport.setNodeAttributes(attrs);\r\n    return nodeReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerStatus newContainerStatus(ContainerId containerId, ContainerState containerState, String diagnostics, int exitStatus, Resource capability)\n{\r\n    return newContainerStatus(containerId, containerState, diagnostics, exitStatus, capability, ExecutionType.GUARANTEED);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ContainerStatus newContainerStatus(ContainerId containerId, ContainerState containerState, String diagnostics, int exitStatus, Resource capability, ExecutionType executionType)\n{\r\n    ContainerStatus containerStatus = recordFactory.newRecordInstance(ContainerStatus.class);\r\n    containerStatus.setState(containerState);\r\n    containerStatus.setContainerId(containerId);\r\n    containerStatus.setDiagnostics(diagnostics);\r\n    containerStatus.setExitStatus(exitStatus);\r\n    containerStatus.setCapability(capability);\r\n    containerStatus.setExecutionType(executionType);\r\n    return containerStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newContainer",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Container newContainer(ContainerId containerId, NodeId nodeId, String nodeHttpAddress, Resource resource, Priority priority, Token containerToken, ExecutionType executionType, long allocationRequestId)\n{\r\n    Container container = recordFactory.newRecordInstance(Container.class);\r\n    container.setId(containerId);\r\n    container.setNodeId(nodeId);\r\n    container.setNodeHttpAddress(nodeHttpAddress);\r\n    container.setResource(resource);\r\n    container.setPriority(priority);\r\n    container.setContainerToken(containerToken);\r\n    container.setExecutionType(executionType);\r\n    container.setAllocationRequestId(allocationRequestId);\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Container newContainer(ContainerId containerId, NodeId nodeId, String nodeHttpAddress, Resource resource, Priority priority, Token containerToken)\n{\r\n    return newContainer(containerId, nodeId, nodeHttpAddress, resource, priority, containerToken, ExecutionType.GUARANTEED, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Container newContainer(ContainerId containerId, NodeId nodeId, String nodeHttpAddress, Resource resource, Priority priority, Token containerToken, long allocationRequestId)\n{\r\n    return newContainer(containerId, nodeId, nodeHttpAddress, resource, priority, containerToken, ExecutionType.GUARANTEED, allocationRequestId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newToken",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "T newToken(Class<T> tokenClass, byte[] identifier, String kind, byte[] password, String service)\n{\r\n    T token = recordFactory.newRecordInstance(tokenClass);\r\n    token.setIdentifier(ByteBuffer.wrap(identifier));\r\n    token.setKind(kind);\r\n    token.setPassword(ByteBuffer.wrap(password));\r\n    token.setService(service);\r\n    return token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Token newDelegationToken(byte[] identifier, String kind, byte[] password, String service)\n{\r\n    return newToken(Token.class, identifier, kind, password, service);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newClientToAMToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Token newClientToAMToken(byte[] identifier, String kind, byte[] password, String service)\n{\r\n    return newToken(Token.class, identifier, kind, password, service);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Token newAMRMToken(byte[] identifier, String kind, byte[] password, String service)\n{\r\n    return newToken(Token.class, identifier, kind, password, service);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newContainerToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token newContainerToken(NodeId nodeId, byte[] password, ContainerTokenIdentifier tokenIdentifier)\n{\r\n    InetSocketAddress addr = NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\r\n    Token containerToken = newToken(Token.class, tokenIdentifier.getBytes(), ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil.buildTokenService(addr).toString());\r\n    return containerToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newContainerTokenIdentifier",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ContainerTokenIdentifier newContainerTokenIdentifier(Token containerToken) throws IOException\n{\r\n    org.apache.hadoop.security.token.Token<ContainerTokenIdentifier> token = new org.apache.hadoop.security.token.Token<ContainerTokenIdentifier>(containerToken.getIdentifier().array(), containerToken.getPassword().array(), new Text(containerToken.getKind()), new Text(containerToken.getService()));\r\n    return token.decodeIdentifier();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newContainerLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ContainerLaunchContext newContainerLaunchContext(Map<String, LocalResource> localResources, Map<String, String> environment, List<String> commands, Map<String, ByteBuffer> serviceData, ByteBuffer tokens, Map<ApplicationAccessType, String> acls)\n{\r\n    ContainerLaunchContext container = recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    container.setLocalResources(localResources);\r\n    container.setEnvironment(environment);\r\n    container.setCommands(commands);\r\n    container.setServiceData(serviceData);\r\n    container.setTokens(tokens);\r\n    container.setApplicationACLs(acls);\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority newPriority(int p)\n{\r\n    Priority priority = recordFactory.newRecordInstance(Priority.class);\r\n    priority.setPriority(p);\r\n    return priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ResourceRequest newResourceRequest(Priority priority, String hostName, Resource capability, int numContainers)\n{\r\n    ResourceRequest request = recordFactory.newRecordInstance(ResourceRequest.class);\r\n    request.setPriority(priority);\r\n    request.setResourceName(hostName);\r\n    request.setCapability(capability);\r\n    request.setNumContainers(numContainers);\r\n    request.setExecutionTypeRequest(ExecutionTypeRequest.newInstance());\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ResourceRequest newResourceRequest(Priority priority, String hostName, Resource capability, int numContainers, String label)\n{\r\n    ResourceRequest request = recordFactory.newRecordInstance(ResourceRequest.class);\r\n    request.setPriority(priority);\r\n    request.setResourceName(hostName);\r\n    request.setCapability(capability);\r\n    request.setNumContainers(numContainers);\r\n    request.setNodeLabelExpression(label);\r\n    request.setExecutionTypeRequest(ExecutionTypeRequest.newInstance());\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "ApplicationReport newApplicationReport(ApplicationId applicationId, ApplicationAttemptId applicationAttemptId, String user, String queue, String name, String host, int rpcPort, Token clientToAMToken, YarnApplicationState state, String diagnostics, String url, long startTime, long launchTime, long finishTime, FinalApplicationStatus finalStatus, ApplicationResourceUsageReport appResources, String origTrackingUrl, float progress, String appType, Token amRmToken, Set<String> tags, Priority priority)\n{\r\n    ApplicationReport report = recordFactory.newRecordInstance(ApplicationReport.class);\r\n    report.setApplicationId(applicationId);\r\n    report.setCurrentApplicationAttemptId(applicationAttemptId);\r\n    report.setUser(user);\r\n    report.setQueue(queue);\r\n    report.setName(name);\r\n    report.setHost(host);\r\n    report.setRpcPort(rpcPort);\r\n    report.setClientToAMToken(clientToAMToken);\r\n    report.setYarnApplicationState(state);\r\n    report.setDiagnostics(diagnostics);\r\n    report.setTrackingUrl(url);\r\n    report.setStartTime(startTime);\r\n    report.setLaunchTime(launchTime);\r\n    report.setFinishTime(finishTime);\r\n    report.setFinalApplicationStatus(finalStatus);\r\n    report.setApplicationResourceUsageReport(appResources);\r\n    report.setOriginalTrackingUrl(origTrackingUrl);\r\n    report.setProgress(progress);\r\n    report.setApplicationType(appType);\r\n    report.setAMRMToken(amRmToken);\r\n    report.setApplicationTags(tags);\r\n    report.setPriority(priority);\r\n    return report;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newApplicationSubmissionContext",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "ApplicationSubmissionContext newApplicationSubmissionContext(ApplicationId applicationId, String applicationName, String queue, Priority priority, ContainerLaunchContext amContainer, boolean isUnmanagedAM, boolean cancelTokensWhenComplete, int maxAppAttempts, Resource resource, String applicationType)\n{\r\n    ApplicationSubmissionContext context = recordFactory.newRecordInstance(ApplicationSubmissionContext.class);\r\n    context.setApplicationId(applicationId);\r\n    context.setApplicationName(applicationName);\r\n    context.setQueue(queue);\r\n    context.setPriority(priority);\r\n    context.setAMContainerSpec(amContainer);\r\n    context.setUnmanagedAM(isUnmanagedAM);\r\n    context.setCancelTokensWhenComplete(cancelTokensWhenComplete);\r\n    context.setMaxAppAttempts(maxAppAttempts);\r\n    context.setResource(resource);\r\n    context.setApplicationType(applicationType);\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newApplicationSubmissionContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationSubmissionContext newApplicationSubmissionContext(ApplicationId applicationId, String applicationName, String queue, Priority priority, ContainerLaunchContext amContainer, boolean isUnmanagedAM, boolean cancelTokensWhenComplete, int maxAppAttempts, Resource resource)\n{\r\n    return newApplicationSubmissionContext(applicationId, applicationName, queue, priority, amContainer, isUnmanagedAM, cancelTokensWhenComplete, maxAppAttempts, resource, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newApplicationResourceUsageReport",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ApplicationResourceUsageReport newApplicationResourceUsageReport(int numUsedContainers, int numReservedContainers, Resource usedResources, Resource reservedResources, Resource neededResources, Map<String, Long> resourceSecondsMap, Map<String, Long> preemptedResourceSecondsMap)\n{\r\n    ApplicationResourceUsageReport report = recordFactory.newRecordInstance(ApplicationResourceUsageReport.class);\r\n    report.setNumUsedContainers(numUsedContainers);\r\n    report.setNumReservedContainers(numReservedContainers);\r\n    report.setUsedResources(usedResources);\r\n    report.setReservedResources(reservedResources);\r\n    report.setNeededResources(neededResources);\r\n    report.setResourceSecondsMap(resourceSecondsMap);\r\n    report.setPreemptedResourceSecondsMap(preemptedResourceSecondsMap);\r\n    return report;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newResource",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Resource newResource(long memory, int vCores)\n{\r\n    Resource resource = recordFactory.newRecordInstance(Resource.class);\r\n    resource.setMemorySize(memory);\r\n    resource.setVirtualCores(vCores);\r\n    return resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newEmptyResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource newEmptyResource()\n{\r\n    return recordFactory.newRecordInstance(Resource.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newURL",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "URL newURL(String scheme, String host, int port, String file)\n{\r\n    URL url = recordFactory.newRecordInstance(URL.class);\r\n    url.setScheme(scheme);\r\n    url.setHost(host);\r\n    url.setPort(port);\r\n    url.setFile(file);\r\n    return url;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newAllocateResponse",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "AllocateResponse newAllocateResponse(int responseId, List<ContainerStatus> completedContainers, List<Container> allocatedContainers, List<NodeReport> updatedNodes, Resource availResources, AMCommand command, int numClusterNodes, PreemptionMessage preempt)\n{\r\n    AllocateResponse response = recordFactory.newRecordInstance(AllocateResponse.class);\r\n    response.setNumClusterNodes(numClusterNodes);\r\n    response.setResponseId(responseId);\r\n    response.setCompletedContainersStatuses(completedContainers);\r\n    response.setAllocatedContainers(allocatedContainers);\r\n    response.setUpdatedNodes(updatedNodes);\r\n    response.setAvailableResources(availResources);\r\n    response.setAMCommand(command);\r\n    response.setPreemptionMessage(preempt);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "parseCredentials",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Credentials parseCredentials(ApplicationSubmissionContext application) throws IOException\n{\r\n    Credentials credentials = new Credentials();\r\n    DataInputByteBuffer dibb = new DataInputByteBuffer();\r\n    ByteBuffer tokens = application.getAMContainerSpec().getTokens();\r\n    if (tokens != null) {\r\n        dibb.reset(tokens);\r\n        credentials.readTokenStorageStream(dibb);\r\n        tokens.rewind();\r\n    }\r\n    return credentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "parseTokensConf",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Configuration parseTokensConf(ApplicationSubmissionContext context) throws IOException\n{\r\n    ByteBuffer tokensConf = context.getAMContainerSpec().getTokensConf();\r\n    if (tokensConf == null) {\r\n        return null;\r\n    }\r\n    DataInputByteBuffer dibb = new DataInputByteBuffer();\r\n    dibb.reset(tokensConf);\r\n    Configuration appConf = new Configuration(false);\r\n    appConf.readFields(dibb);\r\n    tokensConf.rewind();\r\n    return appConf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerId()\n{\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAllocatedMB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAllocatedMB()\n{\r\n    return allocatedMB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAllocatedVCores",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAllocatedVCores()\n{\r\n    return allocatedVCores;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAssignedNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAssignedNodeId()\n{\r\n    return assignedNodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getPriority()\n{\r\n    return priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getStartedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getStartedTime()\n{\r\n    return startedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getFinishedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFinishedTime()\n{\r\n    return finishedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getElapsedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getElapsedTime()\n{\r\n    return elapsedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticsInfo()\n{\r\n    return diagnosticsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getLogUrl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getLogUrl()\n{\r\n    return logUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getContainerExitStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getContainerExitStatus()\n{\r\n    return containerExitStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getContainerState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerState getContainerState()\n{\r\n    return containerState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getNodeHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNodeHttpAddress()\n{\r\n    return nodeHttpAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNodeId()\n{\r\n    return nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAllocatedResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Long> getAllocatedResources()\n{\r\n    return Collections.unmodifiableMap(allocatedResources);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getExposedPorts()\n{\r\n    return exposedPorts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "hasCustomResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean hasCustomResources()\n{\r\n    return allocatedResources.size() > 2;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "createNewMasterKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MasterKeyData createNewMasterKey()\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        return new MasterKeyData(serialNo++, generateSecret());\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "getCurrentKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MasterKey getCurrentKey()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.currentMasterKey.getMasterKey();\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "createPassword",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "byte[] createPassword(ContainerTokenIdentifier identifier)\n{\r\n    LOG.debug(\"Creating password for {} for user {} to be run on NM {}\", identifier.getContainerID(), identifier.getUser(), identifier.getNmHostAddress());\r\n    this.readLock.lock();\r\n    try {\r\n        return createPassword(identifier.getBytes(), this.currentMasterKey.getSecretKey());\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "retrievePassword",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "byte[] retrievePassword(ContainerTokenIdentifier identifier) throws SecretManager.InvalidToken\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return retrievePasswordInternal(identifier, this.currentMasterKey);\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "retrievePasswordInternal",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] retrievePasswordInternal(ContainerTokenIdentifier identifier, MasterKeyData masterKey) throws org.apache.hadoop.security.token.SecretManager.InvalidToken\n{\r\n    LOG.debug(\"Retrieving password for {} for user {} to be run on NM {}\", identifier.getContainerID(), identifier.getUser(), identifier.getNmHostAddress());\r\n    return createPassword(identifier.getBytes(), masterKey.getSecretKey());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "createIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerTokenIdentifier createIdentifier()\n{\r\n    return new ContainerTokenIdentifier();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SetSubClusterPolicyConfigurationRequest newInstance(SubClusterPolicyConfiguration policy)\n{\r\n    SetSubClusterPolicyConfigurationRequest request = Records.newRecord(SetSubClusterPolicyConfigurationRequest.class);\r\n    request.setPolicyConfiguration(policy);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterPolicyConfiguration getPolicyConfiguration()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPolicyConfiguration(SubClusterPolicyConfiguration policyConfiguration)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UnRegisterNodeManagerResponseProto getProto()\n{\r\n    if (rebuild) {\r\n        mergeLocalToProto();\r\n    }\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    proto = builder.build();\r\n    rebuild = false;\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = UnRegisterNodeManagerResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "reinitialize",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void reinitialize(FederationPolicyInitializationContext policyContext) throws FederationPolicyInitializationException\n{\r\n    WeightedPolicyInfo tempPolicy = getPolicyInfo();\r\n    super.reinitialize(policyContext);\r\n    for (Float weight : getPolicyInfo().getRouterPolicyWeights().values()) {\r\n        if (weight != 0 && weight != 1) {\r\n            setPolicyInfo(tempPolicy);\r\n            throw new FederationPolicyInitializationException(this.getClass().getCanonicalName() + \" policy expects all weights to be either \" + \"\\\"0\\\" or \\\"1\\\"\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "getHomeSubcluster",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "SubClusterId getHomeSubcluster(ApplicationSubmissionContext appSubmissionContext, List<SubClusterId> blacklist) throws YarnException\n{\r\n    validate(appSubmissionContext);\r\n    Map<SubClusterId, SubClusterInfo> activeSubclusters = getActiveSubclusters();\r\n    FederationPolicyUtils.validateSubClusterAvailability(new ArrayList<SubClusterId>(activeSubclusters.keySet()), blacklist);\r\n    Map<SubClusterIdInfo, Float> weights = getPolicyInfo().getRouterPolicyWeights();\r\n    SubClusterIdInfo chosen = null;\r\n    long currBestMem = -1;\r\n    for (Map.Entry<SubClusterId, SubClusterInfo> entry : activeSubclusters.entrySet()) {\r\n        if (blacklist != null && blacklist.contains(entry.getKey())) {\r\n            continue;\r\n        }\r\n        SubClusterIdInfo id = new SubClusterIdInfo(entry.getKey());\r\n        if (weights.containsKey(id) && weights.get(id) > 0) {\r\n            long availableMemory = getAvailableMemory(entry.getValue());\r\n            if (availableMemory > currBestMem) {\r\n                currBestMem = availableMemory;\r\n                chosen = id;\r\n            }\r\n        }\r\n    }\r\n    if (chosen == null) {\r\n        throw new FederationPolicyException(\"Zero Active Subcluster with weight 1.\");\r\n    }\r\n    return chosen.toId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "getAvailableMemory",
  "errType" : [ "JSONException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getAvailableMemory(SubClusterInfo value) throws YarnException\n{\r\n    try {\r\n        long mem = -1;\r\n        JSONObject obj = new JSONObject(value.getCapability());\r\n        mem = obj.getJSONObject(\"clusterMetrics\").getLong(\"availableMB\");\r\n        return mem;\r\n    } catch (JSONException j) {\r\n        throw new YarnException(\"FederationSubCluserInfo cannot be parsed\", j);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    long secretKeyInterval = conf.getLong(YarnConfiguration.TIMELINE_DELEGATION_KEY_UPDATE_INTERVAL, YarnConfiguration.DEFAULT_TIMELINE_DELEGATION_KEY_UPDATE_INTERVAL);\r\n    long tokenMaxLifetime = conf.getLong(YarnConfiguration.TIMELINE_DELEGATION_TOKEN_MAX_LIFETIME, YarnConfiguration.DEFAULT_TIMELINE_DELEGATION_TOKEN_MAX_LIFETIME);\r\n    long tokenRenewInterval = conf.getLong(YarnConfiguration.TIMELINE_DELEGATION_TOKEN_RENEW_INTERVAL, YarnConfiguration.DEFAULT_TIMELINE_DELEGATION_TOKEN_RENEW_INTERVAL);\r\n    secretManager = createTimelineDelegationTokenSecretManager(secretKeyInterval, tokenMaxLifetime, tokenRenewInterval, delegationTokenRemovalScanInterval);\r\n    super.init(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "createTimelineDelegationTokenSecretManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractDelegationTokenSecretManager<TimelineDelegationTokenIdentifier> createTimelineDelegationTokenSecretManager(long secretKeyInterval, long tokenMaxLifetime, long tokenRenewInterval, long tokenRemovalScanInterval)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    secretManager.startThreads();\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    secretManager.stopThreads();\r\n    super.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "getTimelineDelegationTokenSecretManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractDelegationTokenSecretManager<TimelineDelegationTokenIdentifier> getTimelineDelegationTokenSecretManager()\n{\r\n    return secretManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainerTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MasterKey getContainerTokenMasterKey()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setContainerTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerTokenMasterKey(MasterKey secretKey)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MasterKey getNMTokenMasterKey()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNMTokenMasterKey(MasterKey secretKey)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodeAction",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeAction getNodeAction()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodeAction",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeAction(NodeAction nodeAction)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getRMIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRMIdentifier()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setRMIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRMIdentifier(long rmIdentifier)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getDiagnosticsMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticsMessage()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setDiagnosticsMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiagnosticsMessage(String diagnosticsMessage)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setRMVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRMVersion(String version)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getRMVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRMVersion()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getResource()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResource(Resource resource)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAreNodeLabelsAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getAreNodeLabelsAcceptedByRM()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAreNodeLabelsAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAreNodeLabelsAcceptedByRM(boolean areNodeLabelsAcceptedByRM)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAreNodeAttributesAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getAreNodeAttributesAcceptedByRM()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAreNodeAttributesAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAreNodeAttributesAcceptedByRM(boolean areNodeAttributesAcceptedByRM)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerQueuingLimitProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ContainerQueuingLimitProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getMaxQueueWaitTimeInMs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getMaxQueueWaitTimeInMs()\n{\r\n    ContainerQueuingLimitProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getMaxQueueWaitTimeInMs();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setMaxQueueWaitTimeInMs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMaxQueueWaitTimeInMs(int waitTime)\n{\r\n    maybeInitBuilder();\r\n    builder.setMaxQueueWaitTimeInMs(waitTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getMaxQueueLength",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getMaxQueueLength()\n{\r\n    ContainerQueuingLimitProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getMaxQueueLength();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setMaxQueueLength",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMaxQueueLength(int queueLength)\n{\r\n    maybeInitBuilder();\r\n    builder.setMaxQueueLength(queueLength);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "notify",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SCMUploaderNotifyResponseProto notify(RpcController controller, SCMUploaderNotifyRequestProto proto) throws ServiceException\n{\r\n    SCMUploaderNotifyRequestPBImpl request = new SCMUploaderNotifyRequestPBImpl(proto);\r\n    try {\r\n        SCMUploaderNotifyResponse response = real.notify(request);\r\n        return ((SCMUploaderNotifyResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "canUpload",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SCMUploaderCanUploadResponseProto canUpload(RpcController controller, SCMUploaderCanUploadRequestProto proto) throws ServiceException\n{\r\n    SCMUploaderCanUploadRequestPBImpl request = new SCMUploaderCanUploadRequestPBImpl(proto);\r\n    try {\r\n        SCMUploaderCanUploadResponse response = real.canUpload(request);\r\n        return ((SCMUploaderCanUploadResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAppAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppAttemptId()\n{\r\n    return appAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHost()\n{\r\n    return host;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getRpcPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getRpcPort()\n{\r\n    return rpcPort;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTrackingUrl()\n{\r\n    return trackingUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getOriginalTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getOriginalTrackingUrl()\n{\r\n    return originalTrackingUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticsInfo()\n{\r\n    return diagnosticsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAppAttemptState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnApplicationAttemptState getAppAttemptState()\n{\r\n    return appAttemptState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAmContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAmContainerId()\n{\r\n    return amContainerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getStartedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getStartedTime()\n{\r\n    return startedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getFinishedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFinishedTime()\n{\r\n    return finishedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "registerService",
  "errType" : [ "KeeperException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void registerService(String path, String data) throws IOException, InterruptedException\n{\r\n    try {\r\n        zkClient.create(path, data.getBytes(Charset.forName(\"UTF-8\")), ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);\r\n    } catch (KeeperException ke) {\r\n        throw new IOException(ke);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "unregisterService",
  "errType" : [ "KeeperException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void unregisterService(String path) throws IOException, InterruptedException\n{\r\n    try {\r\n        zkClient.delete(path, -1);\r\n    } catch (KeeperException ke) {\r\n        throw new IOException(ke);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "listServices",
  "errType" : [ "KeeperException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> listServices(String path) throws IOException, InterruptedException\n{\r\n    List<String> children = null;\r\n    try {\r\n        children = zkClient.getChildren(path, false);\r\n    } catch (KeeperException ke) {\r\n        throw new IOException(ke);\r\n    }\r\n    return children;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "getServiceData",
  "errType" : [ "KeeperException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getServiceData(String path) throws IOException, InterruptedException\n{\r\n    String data;\r\n    try {\r\n        Stat stat = new Stat();\r\n        byte[] byteData = zkClient.getData(path, false, stat);\r\n        data = new String(byteData, Charset.forName(\"UTF-8\"));\r\n    } catch (KeeperException ke) {\r\n        throw new IOException(ke);\r\n    }\r\n    return data;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SubClusterDeregisterRequest newInstance(SubClusterId subClusterId, SubClusterState subClusterState)\n{\r\n    SubClusterDeregisterRequest registerRequest = Records.newRecord(SubClusterDeregisterRequest.class);\r\n    registerRequest.setSubClusterId(subClusterId);\r\n    registerRequest.setState(subClusterState);\r\n    return registerRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId getSubClusterId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSubClusterId(SubClusterId subClusterId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterState getState()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setState(SubClusterState state)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReportNewCollectorInfoRequest newInstance(List<AppCollectorData> appCollectorsList)\n{\r\n    ReportNewCollectorInfoRequest request = Records.newRecord(ReportNewCollectorInfoRequest.class);\r\n    request.setAppCollectorsList(appCollectorsList);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReportNewCollectorInfoRequest newInstance(ApplicationId id, String collectorAddr, Token token)\n{\r\n    ReportNewCollectorInfoRequest request = Records.newRecord(ReportNewCollectorInfoRequest.class);\r\n    request.setAppCollectorsList(Arrays.asList(AppCollectorData.newInstance(id, collectorAddr, token)));\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAppCollectorsList",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<AppCollectorData> getAppCollectorsList()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAppCollectorsList",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAppCollectorsList(List<AppCollectorData> appCollectorsList)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationHomeSubClusterRequest newInstance(ApplicationId appId)\n{\r\n    GetApplicationHomeSubClusterRequest appMapping = Records.newRecord(GetApplicationHomeSubClusterRequest.class);\r\n    appMapping.setApplicationId(appId);\r\n    return appMapping;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "reinitialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void reinitialize(FederationPolicyInitializationContext policyContext) throws FederationPolicyInitializationException\n{\r\n    FederationPolicyInitializationContextValidator.validate(policyContext, this.getClass().getCanonicalName());\r\n    setPolicyContext(policyContext);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "splitResourceRequests",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<SubClusterId, List<ResourceRequest>> splitResourceRequests(List<ResourceRequest> resourceRequests, Set<SubClusterId> timedOutSubClusters) throws YarnException\n{\r\n    Map<SubClusterId, SubClusterInfo> activeSubclusters = getActiveSubclusters();\r\n    Map<SubClusterId, List<ResourceRequest>> answer = new HashMap<>();\r\n    for (SubClusterId subClusterId : activeSubclusters.keySet()) {\r\n        answer.put(subClusterId, resourceRequests);\r\n    }\r\n    return answer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClusterInfoResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetSubClusterInfoResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.subClusterInfo != null) {\r\n        builder.setSubClusterInfo(convertToProtoFormat(this.subClusterInfo));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterInfo getSubClusterInfo()\n{\r\n    GetSubClusterInfoResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.subClusterInfo != null) {\r\n        return this.subClusterInfo;\r\n    }\r\n    if (!p.hasSubClusterInfo()) {\r\n        return null;\r\n    }\r\n    this.subClusterInfo = convertFromProtoFormat(p.getSubClusterInfo());\r\n    return this.subClusterInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setSubClusterInfo(SubClusterInfo subClusterInfo)\n{\r\n    maybeInitBuilder();\r\n    if (subClusterInfo == null) {\r\n        builder.clearSubClusterInfo();\r\n    }\r\n    this.subClusterInfo = subClusterInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterInfo convertFromProtoFormat(SubClusterInfoProto clusterInfo)\n{\r\n    return new SubClusterInfoPBImpl(clusterInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterInfoProto convertToProtoFormat(SubClusterInfo clusterInfo)\n{\r\n    return ((SubClusterInfoPBImpl) clusterInfo).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "reportNewCollectorInfo",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReportNewCollectorInfoResponseProto reportNewCollectorInfo(RpcController arg0, ReportNewCollectorInfoRequestProto proto) throws ServiceException\n{\r\n    ReportNewCollectorInfoRequestPBImpl request = new ReportNewCollectorInfoRequestPBImpl(proto);\r\n    try {\r\n        ReportNewCollectorInfoResponse response = real.reportNewCollectorInfo(request);\r\n        return ((ReportNewCollectorInfoResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "getTimelineCollectorContext",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetTimelineCollectorContextResponseProto getTimelineCollectorContext(RpcController controller, GetTimelineCollectorContextRequestProto proto) throws ServiceException\n{\r\n    GetTimelineCollectorContextRequestPBImpl request = new GetTimelineCollectorContextRequestPBImpl(proto);\r\n    try {\r\n        GetTimelineCollectorContextResponse response = real.getTimelineCollectorContext(request);\r\n        return ((GetTimelineCollectorContextResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "VersionProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = VersionProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records\\impl\\pb",
  "methodName" : "getMajorVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getMajorVersion()\n{\r\n    VersionProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getMajorVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records\\impl\\pb",
  "methodName" : "setMajorVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMajorVersion(int major)\n{\r\n    maybeInitBuilder();\r\n    builder.setMajorVersion(major);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records\\impl\\pb",
  "methodName" : "getMinorVersion",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getMinorVersion()\n{\r\n    VersionProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getMinorVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\records\\impl\\pb",
  "methodName" : "setMinorVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setMinorVersion(int minor)\n{\r\n    maybeInitBuilder();\r\n    builder.setMinorVersion(minor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "createAMHeartbeatRequestHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMHeartbeatRequestHandler createAMHeartbeatRequestHandler(Configuration config, ApplicationId appId, AMRMClientRelayer relayer)\n{\r\n    return new AMHeartbeatRequestHandler(config, appId, relayer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "launchUAM",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token<AMRMTokenIdentifier> launchUAM() throws YarnException, IOException\n{\r\n    this.connectionInitiated = true;\r\n    Token<AMRMTokenIdentifier> amrmToken = initializeUnmanagedAM(this.applicationId);\r\n    createUAMProxy(amrmToken);\r\n    return amrmToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "reAttachUAM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void reAttachUAM(Token<AMRMTokenIdentifier> amrmToken) throws IOException, YarnException\n{\r\n    this.connectionInitiated = true;\r\n    createUAMProxy(amrmToken);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "createUAMProxy",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createUAMProxy(Token<AMRMTokenIdentifier> amrmToken) throws IOException\n{\r\n    this.userUgi = UserGroupInformation.createProxyUser(this.applicationId.toString(), UserGroupInformation.getCurrentUser());\r\n    this.rmProxyRelayer.setRMClient(createRMProxy(ApplicationMasterProtocol.class, this.conf, this.userUgi, amrmToken));\r\n    this.heartbeatHandler.setUGI(this.userUgi);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    this.registerRequest = request;\r\n    LOG.info(\"Registering the Unmanaged application master {}\", this.applicationId);\r\n    RegisterApplicationMasterResponse response = this.rmProxyRelayer.registerApplicationMaster(this.registerRequest);\r\n    this.heartbeatHandler.resetLastResponseId();\r\n    for (Container container : response.getContainersFromPreviousAttempts()) {\r\n        LOG.debug(\"RegisterUAM returned existing running container {}\", container.getId());\r\n    }\r\n    for (NMToken nmToken : response.getNMTokensFromPreviousAttempts()) {\r\n        LOG.debug(\"RegisterUAM returned existing NM token for node {}\", nmToken.getNodeId());\r\n    }\r\n    LOG.info(\"RegisterUAM returned {} existing running container and {} NM tokens\", response.getContainersFromPreviousAttempts().size(), response.getNMTokensFromPreviousAttempts().size());\r\n    this.heartbeatHandler.setDaemon(true);\r\n    this.heartbeatHandler.start();\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "finishApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(FinishApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    if (this.userUgi == null) {\r\n        if (this.connectionInitiated) {\r\n            LOG.warn(\"Unmanaged AM still not successfully launched/registered yet.\" + \" Stopping the UAM heartbeat thread anyways.\");\r\n            return FinishApplicationMasterResponse.newInstance(false);\r\n        } else {\r\n            throw new YarnException(\"finishApplicationMaster should not \" + \"be called before createAndRegister\");\r\n        }\r\n    }\r\n    FinishApplicationMasterResponse response = this.rmProxyRelayer.finishApplicationMaster(request);\r\n    if (response.getIsUnregistered()) {\r\n        shutDownConnections();\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "forceKillApplication",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "KillApplicationResponse forceKillApplication() throws IOException, YarnException\n{\r\n    shutDownConnections();\r\n    KillApplicationRequest request = KillApplicationRequest.newInstance(this.applicationId);\r\n    if (this.rmClient == null) {\r\n        this.rmClient = createRMProxy(ApplicationClientProtocol.class, this.conf, UserGroupInformation.createRemoteUser(this.submitter), null);\r\n    }\r\n    return this.rmClient.forceKillApplication(request);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "allocateAsync",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void allocateAsync(AllocateRequest request, AsyncCallback<AllocateResponse> callback) throws YarnException\n{\r\n    this.heartbeatHandler.allocateAsync(request, callback);\r\n    if (this.userUgi == null) {\r\n        if (this.connectionInitiated) {\r\n            LOG.info(\"Unmanaged AM still not successfully launched/registered yet.\" + \" Saving the allocate request and send later.\");\r\n        } else {\r\n            throw new YarnException(\"AllocateAsync should not be called before launchUAM\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "shutDownConnections",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void shutDownConnections()\n{\r\n    this.heartbeatHandler.shutdown();\r\n    this.rmProxyRelayer.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getAppId()\n{\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "getAMRMClientRelayer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMClientRelayer getAMRMClientRelayer()\n{\r\n    return this.rmProxyRelayer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "createRMProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T createRMProxy(Class<T> protocol, Configuration config, UserGroupInformation user, Token<AMRMTokenIdentifier> token) throws IOException\n{\r\n    return AMRMClientUtils.createRMProxy(config, protocol, user, token);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "initializeUnmanagedAM",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Token<AMRMTokenIdentifier> initializeUnmanagedAM(ApplicationId appId) throws IOException, YarnException\n{\r\n    try {\r\n        UserGroupInformation appSubmitter = UserGroupInformation.createRemoteUser(this.submitter);\r\n        this.rmClient = createRMProxy(ApplicationClientProtocol.class, this.conf, appSubmitter, null);\r\n        submitUnmanagedApp(appId);\r\n        monitorCurrentAppAttempt(appId, EnumSet.of(YarnApplicationState.ACCEPTED, YarnApplicationState.RUNNING, YarnApplicationState.KILLED, YarnApplicationState.FAILED, YarnApplicationState.FINISHED), YarnApplicationAttemptState.LAUNCHED);\r\n        return getUAMToken();\r\n    } finally {\r\n        this.rmClient = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "submitUnmanagedApp",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void submitUnmanagedApp(ApplicationId appId) throws YarnException, IOException\n{\r\n    SubmitApplicationRequest submitRequest = this.recordFactory.newRecordInstance(SubmitApplicationRequest.class);\r\n    ApplicationSubmissionContext context = this.recordFactory.newRecordInstance(ApplicationSubmissionContext.class);\r\n    context.setApplicationId(appId);\r\n    context.setApplicationName(APP_NAME + \"-\" + appNameSuffix);\r\n    if (StringUtils.isBlank(this.queueName)) {\r\n        context.setQueue(this.conf.get(DEFAULT_QUEUE_CONFIG, YarnConfiguration.DEFAULT_QUEUE_NAME));\r\n    } else {\r\n        context.setQueue(this.queueName);\r\n    }\r\n    ContainerLaunchContext amContainer = this.recordFactory.newRecordInstance(ContainerLaunchContext.class);\r\n    Resource resource = BuilderUtils.newResource(1024, 1);\r\n    context.setResource(resource);\r\n    context.setAMContainerSpec(amContainer);\r\n    submitRequest.setApplicationSubmissionContext(context);\r\n    context.setUnmanagedAM(true);\r\n    context.setKeepContainersAcrossApplicationAttempts(this.keepContainersAcrossApplicationAttempts);\r\n    LOG.info(\"Submitting unmanaged application {}\", appId);\r\n    this.rmClient.submitApplication(submitRequest);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "monitorCurrentAppAttempt",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "ApplicationAttemptReport monitorCurrentAppAttempt(ApplicationId appId, Set<YarnApplicationState> appStates, YarnApplicationAttemptState attemptState) throws YarnException, IOException\n{\r\n    long startTime = System.currentTimeMillis();\r\n    ApplicationAttemptId appAttemptId = null;\r\n    while (true) {\r\n        if (appAttemptId == null) {\r\n            ApplicationReport report = getApplicationReport(appId);\r\n            YarnApplicationState state = report.getYarnApplicationState();\r\n            if (appStates.contains(state)) {\r\n                if (state != YarnApplicationState.ACCEPTED) {\r\n                    throw new YarnRuntimeException(\"Received non-accepted application state: \" + state + \" for \" + appId + \". This is likely because this is not the first \" + \"app attempt in home sub-cluster, and AMRMProxy HA \" + \"(yarn.nodemanager.amrmproxy.ha.enable) is not enabled.\");\r\n                }\r\n                appAttemptId = getApplicationReport(appId).getCurrentApplicationAttemptId();\r\n            } else {\r\n                LOG.info(\"Current application state of {} is {}, will retry later.\", appId, state);\r\n            }\r\n        }\r\n        if (appAttemptId != null) {\r\n            GetApplicationAttemptReportRequest req = this.recordFactory.newRecordInstance(GetApplicationAttemptReportRequest.class);\r\n            req.setApplicationAttemptId(appAttemptId);\r\n            ApplicationAttemptReport attemptReport = this.rmClient.getApplicationAttemptReport(req).getApplicationAttemptReport();\r\n            if (attemptState.equals(attemptReport.getYarnApplicationAttemptState())) {\r\n                return attemptReport;\r\n            }\r\n            LOG.info(\"Current attempt state of \" + appAttemptId + \" is \" + attemptReport.getYarnApplicationAttemptState() + \", waiting for current attempt to reach \" + attemptState);\r\n        }\r\n        try {\r\n            Thread.sleep(this.asyncApiPollIntervalMillis);\r\n        } catch (InterruptedException e) {\r\n            LOG.warn(\"Interrupted while waiting for current attempt of \" + appId + \" to reach \" + attemptState);\r\n        }\r\n        if (System.currentTimeMillis() - startTime > AM_STATE_WAIT_TIMEOUT_MS) {\r\n            throw new RuntimeException(\"Timeout for waiting current attempt of \" + appId + \" to reach \" + attemptState);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "getUAMToken",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Token<AMRMTokenIdentifier> getUAMToken() throws IOException, YarnException\n{\r\n    Token<AMRMTokenIdentifier> token = null;\r\n    org.apache.hadoop.yarn.api.records.Token amrmToken = getApplicationReport(this.applicationId).getAMRMToken();\r\n    if (amrmToken != null) {\r\n        token = ConverterUtils.convertFromYarn(amrmToken, (Text) null);\r\n    } else {\r\n        LOG.warn(\"AMRMToken not found in the application report for application: {}\", this.applicationId);\r\n    }\r\n    return token;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ApplicationReport getApplicationReport(ApplicationId appId) throws YarnException, IOException\n{\r\n    GetApplicationReportRequest request = this.recordFactory.newRecordInstance(GetApplicationReportRequest.class);\r\n    request.setApplicationId(appId);\r\n    return this.rmClient.getApplicationReport(request).getApplicationReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "getRequestQueueSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getRequestQueueSize()\n{\r\n    return this.heartbeatHandler.getRequestQueueSize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "drainHeartbeatThread",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void drainHeartbeatThread()\n{\r\n    this.heartbeatHandler.drainHeartbeatThread();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "isHeartbeatThreadAlive",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isHeartbeatThreadAlive()\n{\r\n    return this.heartbeatHandler.isAlive();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newNodeHeartbeatResponse",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "NodeHeartbeatResponse newNodeHeartbeatResponse(NodeAction action, String diagnosticsMessage)\n{\r\n    NodeHeartbeatResponse response = recordFactory.newRecordInstance(NodeHeartbeatResponse.class);\r\n    response.setNodeAction(action);\r\n    response.setDiagnosticsMessage(diagnosticsMessage);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newNodeHeartbeatResponse",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "NodeHeartbeatResponse newNodeHeartbeatResponse(int responseId, NodeAction action, List<ContainerId> containersToCleanUp, List<ApplicationId> applicationsToCleanUp, MasterKey containerTokenMasterKey, MasterKey nmTokenMasterKey, long nextHeartbeatInterval)\n{\r\n    NodeHeartbeatResponse response = recordFactory.newRecordInstance(NodeHeartbeatResponse.class);\r\n    response.setResponseId(responseId);\r\n    response.setNodeAction(action);\r\n    response.setContainerTokenMasterKey(containerTokenMasterKey);\r\n    response.setNMTokenMasterKey(nmTokenMasterKey);\r\n    response.setNextHeartBeatInterval(nextHeartbeatInterval);\r\n    if (containersToCleanUp != null) {\r\n        response.addAllContainersToCleanup(containersToCleanUp);\r\n    }\r\n    if (applicationsToCleanUp != null) {\r\n        response.addAllApplicationsToCleanup(applicationsToCleanUp);\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "newSystemCredentialsForAppsProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SystemCredentialsForAppsProto newSystemCredentialsForAppsProto(ApplicationId applicationId, ByteBuffer credentials)\n{\r\n    SystemCredentialsForAppsProto systemCredentialsForAppsProto = SystemCredentialsForAppsProto.newBuilder().setAppId(ProtoUtils.convertToProtoFormat(applicationId)).setCredentialsForApp(ProtoUtils.BYTE_STRING_INTERNER.intern(ProtoUtils.convertToProtoFormat(credentials.duplicate()))).build();\r\n    return systemCredentialsForAppsProto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<ApplicationId, ByteBuffer> convertFromProtoFormat(Collection<SystemCredentialsForAppsProto> systemCredentials)\n{\r\n    Map<ApplicationId, ByteBuffer> systemCredentialsForApps = new HashMap<ApplicationId, ByteBuffer>(systemCredentials.size());\r\n    for (SystemCredentialsForAppsProto proto : systemCredentials) {\r\n        systemCredentialsForApps.put(ProtoUtils.convertFromProtoFormat(proto.getAppId()), ProtoUtils.convertFromProtoFormat(proto.getCredentialsForApp()));\r\n    }\r\n    return systemCredentialsForApps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<SystemCredentialsForAppsProto> convertToProtoFormat(Map<ApplicationId, ByteBuffer> systemCredentialsForApps)\n{\r\n    List<SystemCredentialsForAppsProto> systemCredentials = new ArrayList<SystemCredentialsForAppsProto>(systemCredentialsForApps.size());\r\n    for (Map.Entry<ApplicationId, ByteBuffer> entry : systemCredentialsForApps.entrySet()) {\r\n        SystemCredentialsForAppsProto proto = newSystemCredentialsForAppsProto(entry.getKey(), entry.getValue());\r\n        systemCredentials.add(proto);\r\n    }\r\n    return systemCredentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppId()\n{\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getCurrentAppAttemptId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getCurrentAppAttemptId()\n{\r\n    return currentAppAttemptId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getQueue()\n{\r\n    return queue;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHost()\n{\r\n    return host;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getRpcPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getRpcPort()\n{\r\n    return rpcPort;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAppState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnApplicationState getAppState()\n{\r\n    return appState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getRunningContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getRunningContainers()\n{\r\n    return runningContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAllocatedCpuVcores",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAllocatedCpuVcores()\n{\r\n    return allocatedCpuVcores;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAllocatedMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAllocatedMemoryMB()\n{\r\n    return allocatedMemoryMB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAllocatedGpus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAllocatedGpus()\n{\r\n    return allocatedGpus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getReservedCpuVcores",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getReservedCpuVcores()\n{\r\n    return reservedCpuVcores;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getReservedMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getReservedMemoryMB()\n{\r\n    return reservedMemoryMB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getReservedGpus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getReservedGpus()\n{\r\n    return reservedGpus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getProgress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getProgress()\n{\r\n    return progress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getDiagnosticsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticsInfo()\n{\r\n    return diagnosticsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getOriginalTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getOriginalTrackingUrl()\n{\r\n    return originalTrackingUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTrackingUrl()\n{\r\n    return trackingUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getFinalAppStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FinalApplicationStatus getFinalAppStatus()\n{\r\n    return finalAppStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getSubmittedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSubmittedTime()\n{\r\n    return submittedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getLaunchTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLaunchTime()\n{\r\n    return launchTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getStartedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getStartedTime()\n{\r\n    return startedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getFinishedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFinishedTime()\n{\r\n    return finishedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getElapsedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getElapsedTime()\n{\r\n    return elapsedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getApplicationTags",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getApplicationTags()\n{\r\n    return applicationTags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "isUnmanagedApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isUnmanagedApp()\n{\r\n    return unmanagedApplication;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getPriority()\n{\r\n    return priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAppNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAppNodeLabelExpression()\n{\r\n    return appNodeLabelExpression;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAmNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAmNodeLabelExpression()\n{\r\n    return amNodeLabelExpression;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAggregateResourceAllocation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAggregateResourceAllocation()\n{\r\n    return aggregateResourceAllocation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getAggregatePreemptedResourceAllocation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAggregatePreemptedResourceAllocation()\n{\r\n    return aggregatePreemptedResourceAllocation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterDeregisterRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SubClusterDeregisterRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterId getSubClusterId()\n{\r\n    SubClusterDeregisterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasSubClusterId()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getSubClusterId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setSubClusterId(SubClusterId subClusterId)\n{\r\n    maybeInitBuilder();\r\n    if (subClusterId == null) {\r\n        builder.clearSubClusterId();\r\n        return;\r\n    }\r\n    builder.setSubClusterId(convertToProtoFormat(subClusterId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterState getState()\n{\r\n    SubClusterDeregisterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasState()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setState(SubClusterState state)\n{\r\n    maybeInitBuilder();\r\n    if (state == null) {\r\n        builder.clearState();\r\n        return;\r\n    }\r\n    builder.setState(convertToProtoFormat(state));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId convertFromProtoFormat(SubClusterIdProto sc)\n{\r\n    return new SubClusterIdPBImpl(sc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterIdProto convertToProtoFormat(SubClusterId sc)\n{\r\n    return ((SubClusterIdPBImpl) sc).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterState convertFromProtoFormat(SubClusterStateProto state)\n{\r\n    return SubClusterState.valueOf(state.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterStateProto convertToProtoFormat(SubClusterState state)\n{\r\n    return SubClusterStateProto.valueOf(state.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReportNewCollectorInfoResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RemoteNode newInstance(NodeId nodeId, String httpAddress)\n{\r\n    RemoteNode remoteNode = Records.newRecord(RemoteNode.class);\r\n    remoteNode.setNodeId(nodeId);\r\n    remoteNode.setHttpAddress(httpAddress);\r\n    return remoteNode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "RemoteNode newInstance(NodeId nodeId, String httpAddress, String rackName)\n{\r\n    RemoteNode remoteNode = Records.newRecord(RemoteNode.class);\r\n    remoteNode.setNodeId(nodeId);\r\n    remoteNode.setHttpAddress(httpAddress);\r\n    remoteNode.setRackName(rackName);\r\n    return remoteNode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "RemoteNode newInstance(NodeId nodeId, String httpAddress, String rackName, String nodePartition)\n{\r\n    RemoteNode remoteNode = Records.newRecord(RemoteNode.class);\r\n    remoteNode.setNodeId(nodeId);\r\n    remoteNode.setHttpAddress(httpAddress);\r\n    remoteNode.setRackName(rackName);\r\n    remoteNode.setNodePartition(nodePartition);\r\n    return remoteNode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId getNodeId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeId(NodeId nodeId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHttpAddress()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setHttpAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHttpAddress(String httpAddress)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getRackName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRackName()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setRackName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRackName(String rackName)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodePartition",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNodePartition()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodePartition",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodePartition(String nodePartition)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int compareTo(RemoteNode other)\n{\r\n    return this.getNodeId().compareTo(other.getNodeId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String toString()\n{\r\n    return \"RemoteNode{\" + \"nodeId=\" + getNodeId() + \", \" + \"rackName=\" + getRackName() + \", \" + \"httpAddress=\" + getHttpAddress() + \", \" + \"partition=\" + getNodePartition() + \"}\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "getAMRMPolicy",
  "errType" : [ "ClassCastException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FederationAMRMProxyPolicy getAMRMPolicy(FederationPolicyInitializationContext federationPolicyContext, FederationAMRMProxyPolicy oldInstance) throws FederationPolicyInitializationException\n{\r\n    if (amrmProxyFederationPolicy == null) {\r\n        throw new FederationPolicyInitializationException(\"The parameter \" + \"amrmProxyFederationPolicy should be initialized in \" + this.getClass().getSimpleName() + \" constructor.\");\r\n    }\r\n    try {\r\n        return (FederationAMRMProxyPolicy) internalPolicyGetter(federationPolicyContext, oldInstance, amrmProxyFederationPolicy);\r\n    } catch (ClassCastException e) {\r\n        throw new FederationPolicyInitializationException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "getRouterPolicy",
  "errType" : [ "ClassCastException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FederationRouterPolicy getRouterPolicy(FederationPolicyInitializationContext federationPolicyContext, FederationRouterPolicy oldInstance) throws FederationPolicyInitializationException\n{\r\n    if (routerFederationPolicy == null) {\r\n        throw new FederationPolicyInitializationException(\"The policy \" + \"type should be initialized in \" + this.getClass().getSimpleName() + \" constructor.\");\r\n    }\r\n    try {\r\n        return (FederationRouterPolicy) internalPolicyGetter(federationPolicyContext, oldInstance, routerFederationPolicy);\r\n    } catch (ClassCastException e) {\r\n        throw new FederationPolicyInitializationException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "serializeConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterPolicyConfiguration serializeConf() throws FederationPolicyInitializationException\n{\r\n    ByteBuffer buf = ByteBuffer.allocate(0);\r\n    return SubClusterPolicyConfiguration.newInstance(getQueue(), this.getClass().getCanonicalName(), buf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getQueue()\n{\r\n    return queue;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setQueue(String queue)\n{\r\n    this.queue = queue;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "internalPolicyGetter",
  "errType" : [ "InstantiationException", "IllegalAccessException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ConfigurableFederationPolicy internalPolicyGetter(final FederationPolicyInitializationContext federationPolicyContext, ConfigurableFederationPolicy oldInstance, Class policy) throws FederationPolicyInitializationException\n{\r\n    FederationPolicyInitializationContextValidator.validate(federationPolicyContext, this.getClass().getCanonicalName());\r\n    if (oldInstance == null || !oldInstance.getClass().equals(policy)) {\r\n        try {\r\n            oldInstance = (ConfigurableFederationPolicy) policy.newInstance();\r\n        } catch (InstantiationException e) {\r\n            throw new FederationPolicyInitializationException(e);\r\n        } catch (IllegalAccessException e) {\r\n            throw new FederationPolicyInitializationException(e);\r\n        }\r\n    }\r\n    FederationPolicyInitializationContext modifiedContext = updateContext(federationPolicyContext, oldInstance.getClass().getCanonicalName());\r\n    oldInstance.reinitialize(modifiedContext);\r\n    return oldInstance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "updateContext",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "FederationPolicyInitializationContext updateContext(FederationPolicyInitializationContext federationPolicyContext, String type)\n{\r\n    SubClusterPolicyConfiguration newConf = SubClusterPolicyConfiguration.newInstance(federationPolicyContext.getSubClusterPolicyConfiguration());\r\n    newConf.setType(type);\r\n    return new FederationPolicyInitializationContext(newConf, federationPolicyContext.getFederationSubclusterResolver(), federationPolicyContext.getFederationStateStoreFacade(), federationPolicyContext.getHomeSubcluster());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetTimelineCollectorContextResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetTimelineCollectorContextResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getUserId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getUserId()\n{\r\n    GetTimelineCollectorContextResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasUserId()) {\r\n        return null;\r\n    }\r\n    return p.getUserId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setUserId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUserId(String userId)\n{\r\n    maybeInitBuilder();\r\n    if (userId == null) {\r\n        builder.clearUserId();\r\n        return;\r\n    }\r\n    builder.setUserId(userId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFlowName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getFlowName()\n{\r\n    GetTimelineCollectorContextResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasFlowName()) {\r\n        return null;\r\n    }\r\n    return p.getFlowName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFlowName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setFlowName(String flowName)\n{\r\n    maybeInitBuilder();\r\n    if (flowName == null) {\r\n        builder.clearFlowName();\r\n        return;\r\n    }\r\n    builder.setFlowName(flowName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getFlowVersion()\n{\r\n    GetTimelineCollectorContextResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasFlowVersion()) {\r\n        return null;\r\n    }\r\n    return p.getFlowVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFlowVersion",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setFlowVersion(String flowVersion)\n{\r\n    maybeInitBuilder();\r\n    if (flowVersion == null) {\r\n        builder.clearFlowVersion();\r\n        return;\r\n    }\r\n    builder.setFlowVersion(flowVersion);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getFlowRunId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getFlowRunId()\n{\r\n    GetTimelineCollectorContextResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getFlowRunId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setFlowRunId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFlowRunId(long flowRunId)\n{\r\n    maybeInitBuilder();\r\n    builder.setFlowRunId(flowRunId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClusterInfoRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetSubClusterInfoRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterId getSubClusterId()\n{\r\n    GetSubClusterInfoRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasSubClusterId()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getSubClusterId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setSubClusterId(SubClusterId subClusterId)\n{\r\n    maybeInitBuilder();\r\n    if (subClusterId == null) {\r\n        builder.clearSubClusterId();\r\n        return;\r\n    }\r\n    builder.setSubClusterId(convertToProtoFormat(subClusterId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId convertFromProtoFormat(SubClusterIdProto sc)\n{\r\n    return new SubClusterIdPBImpl(sc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterIdProto convertToProtoFormat(SubClusterId sc)\n{\r\n    return ((SubClusterIdPBImpl) sc).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterIdProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SubClusterIdProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getId()\n{\r\n    SubClusterIdProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setId(String subClusterId)\n{\r\n    maybeInitBuilder();\r\n    if (subClusterId == null) {\r\n        builder.clearId();\r\n        return;\r\n    }\r\n    builder.setId(subClusterId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "init",
  "errType" : [ "ClassNotFoundException", "SQLException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void init(Configuration conf) throws YarnException\n{\r\n    driverClass = conf.get(YarnConfiguration.FEDERATION_STATESTORE_SQL_JDBC_CLASS, YarnConfiguration.DEFAULT_FEDERATION_STATESTORE_SQL_JDBC_CLASS);\r\n    maximumPoolSize = conf.getInt(YarnConfiguration.FEDERATION_STATESTORE_SQL_MAXCONNECTIONS, YarnConfiguration.DEFAULT_FEDERATION_STATESTORE_SQL_MAXCONNECTIONS);\r\n    userName = conf.get(YarnConfiguration.FEDERATION_STATESTORE_SQL_USERNAME);\r\n    password = conf.get(YarnConfiguration.FEDERATION_STATESTORE_SQL_PASSWORD);\r\n    url = conf.get(YarnConfiguration.FEDERATION_STATESTORE_SQL_URL);\r\n    try {\r\n        Class.forName(driverClass);\r\n    } catch (ClassNotFoundException e) {\r\n        FederationStateStoreUtils.logAndThrowException(LOG, \"Driver class not found.\", e);\r\n    }\r\n    dataSource = new HikariDataSource();\r\n    dataSource.setDataSourceClassName(driverClass);\r\n    FederationStateStoreUtils.setUsername(dataSource, userName);\r\n    FederationStateStoreUtils.setPassword(dataSource, password);\r\n    FederationStateStoreUtils.setProperty(dataSource, FederationStateStoreUtils.FEDERATION_STORE_URL, url);\r\n    dataSource.setMaximumPoolSize(maximumPoolSize);\r\n    LOG.info(\"Initialized connection pool to the Federation StateStore \" + \"database at address: \" + url);\r\n    try {\r\n        conn = getConnection();\r\n        LOG.debug(\"Connection created\");\r\n    } catch (SQLException e) {\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Not able to get Connection\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "registerSubCluster",
  "errType" : [ "SQLException" ],
  "containingMethodsNum" : 26,
  "sourceCodeText" : "SubClusterRegisterResponse registerSubCluster(SubClusterRegisterRequest registerSubClusterRequest) throws YarnException\n{\r\n    FederationMembershipStateStoreInputValidator.validate(registerSubClusterRequest);\r\n    CallableStatement cstmt = null;\r\n    SubClusterInfo subClusterInfo = registerSubClusterRequest.getSubClusterInfo();\r\n    SubClusterId subClusterId = subClusterInfo.getSubClusterId();\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_REGISTER_SUBCLUSTER);\r\n        cstmt.setString(1, subClusterId.getId());\r\n        cstmt.setString(2, subClusterInfo.getAMRMServiceAddress());\r\n        cstmt.setString(3, subClusterInfo.getClientRMServiceAddress());\r\n        cstmt.setString(4, subClusterInfo.getRMAdminServiceAddress());\r\n        cstmt.setString(5, subClusterInfo.getRMWebServiceAddress());\r\n        cstmt.setString(6, subClusterInfo.getState().toString());\r\n        cstmt.setLong(7, subClusterInfo.getLastStartTime());\r\n        cstmt.setString(8, subClusterInfo.getCapability());\r\n        cstmt.registerOutParameter(9, java.sql.Types.INTEGER);\r\n        long startTime = clock.getTime();\r\n        cstmt.executeUpdate();\r\n        long stopTime = clock.getTime();\r\n        if (cstmt.getInt(9) == 0) {\r\n            String errMsg = \"SubCluster \" + subClusterId + \" was not registered into the StateStore\";\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        if (cstmt.getInt(9) != 1) {\r\n            String errMsg = \"Wrong behavior during registration of SubCluster \" + subClusterId + \" into the StateStore\";\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        LOG.info(\"Registered the SubCluster \" + subClusterId + \" into the StateStore\");\r\n        FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to register the SubCluster \" + subClusterId + \" into the StateStore\", e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt);\r\n    }\r\n    return SubClusterRegisterResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "deregisterSubCluster",
  "errType" : [ "SQLException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "SubClusterDeregisterResponse deregisterSubCluster(SubClusterDeregisterRequest subClusterDeregisterRequest) throws YarnException\n{\r\n    FederationMembershipStateStoreInputValidator.validate(subClusterDeregisterRequest);\r\n    CallableStatement cstmt = null;\r\n    SubClusterId subClusterId = subClusterDeregisterRequest.getSubClusterId();\r\n    SubClusterState state = subClusterDeregisterRequest.getState();\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_DEREGISTER_SUBCLUSTER);\r\n        cstmt.setString(1, subClusterId.getId());\r\n        cstmt.setString(2, state.toString());\r\n        cstmt.registerOutParameter(3, java.sql.Types.INTEGER);\r\n        long startTime = clock.getTime();\r\n        cstmt.executeUpdate();\r\n        long stopTime = clock.getTime();\r\n        if (cstmt.getInt(3) == 0) {\r\n            String errMsg = \"SubCluster \" + subClusterId + \" not found\";\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        if (cstmt.getInt(3) != 1) {\r\n            String errMsg = \"Wrong behavior during deregistration of SubCluster \" + subClusterId + \" from the StateStore\";\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        LOG.info(\"Deregistered the SubCluster \" + subClusterId + \" state to \" + state.toString());\r\n        FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to deregister the sub-cluster \" + subClusterId + \" state to \" + state.toString(), e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt);\r\n    }\r\n    return SubClusterDeregisterResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "subClusterHeartbeat",
  "errType" : [ "SQLException" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "SubClusterHeartbeatResponse subClusterHeartbeat(SubClusterHeartbeatRequest subClusterHeartbeatRequest) throws YarnException\n{\r\n    FederationMembershipStateStoreInputValidator.validate(subClusterHeartbeatRequest);\r\n    CallableStatement cstmt = null;\r\n    SubClusterId subClusterId = subClusterHeartbeatRequest.getSubClusterId();\r\n    SubClusterState state = subClusterHeartbeatRequest.getState();\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_SUBCLUSTER_HEARTBEAT);\r\n        cstmt.setString(1, subClusterId.getId());\r\n        cstmt.setString(2, state.toString());\r\n        cstmt.setString(3, subClusterHeartbeatRequest.getCapability());\r\n        cstmt.registerOutParameter(4, java.sql.Types.INTEGER);\r\n        long startTime = clock.getTime();\r\n        cstmt.executeUpdate();\r\n        long stopTime = clock.getTime();\r\n        if (cstmt.getInt(4) == 0) {\r\n            String errMsg = \"SubCluster \" + subClusterId.toString() + \" does not exist; cannot heartbeat\";\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        if (cstmt.getInt(4) != 1) {\r\n            String errMsg = \"Wrong behavior during the heartbeat of SubCluster \" + subClusterId;\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        LOG.info(\"Heartbeated the StateStore for the specified SubCluster \" + subClusterId);\r\n        FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to heartbeat the StateStore for the specified SubCluster \" + subClusterId, e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt);\r\n    }\r\n    return SubClusterHeartbeatResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getSubCluster",
  "errType" : [ "SQLException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 35,
  "sourceCodeText" : "GetSubClusterInfoResponse getSubCluster(GetSubClusterInfoRequest subClusterRequest) throws YarnException\n{\r\n    FederationMembershipStateStoreInputValidator.validate(subClusterRequest);\r\n    CallableStatement cstmt = null;\r\n    SubClusterInfo subClusterInfo = null;\r\n    SubClusterId subClusterId = subClusterRequest.getSubClusterId();\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_GET_SUBCLUSTER);\r\n        cstmt.setString(1, subClusterId.getId());\r\n        cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\r\n        cstmt.registerOutParameter(3, java.sql.Types.VARCHAR);\r\n        cstmt.registerOutParameter(4, java.sql.Types.VARCHAR);\r\n        cstmt.registerOutParameter(5, java.sql.Types.VARCHAR);\r\n        cstmt.registerOutParameter(6, java.sql.Types.TIMESTAMP);\r\n        cstmt.registerOutParameter(7, java.sql.Types.VARCHAR);\r\n        cstmt.registerOutParameter(8, java.sql.Types.BIGINT);\r\n        cstmt.registerOutParameter(9, java.sql.Types.VARCHAR);\r\n        long startTime = clock.getTime();\r\n        cstmt.execute();\r\n        long stopTime = clock.getTime();\r\n        String amRMAddress = cstmt.getString(2);\r\n        String clientRMAddress = cstmt.getString(3);\r\n        String rmAdminAddress = cstmt.getString(4);\r\n        String webAppAddress = cstmt.getString(5);\r\n        if ((amRMAddress == null) || (clientRMAddress == null)) {\r\n            LOG.warn(\"The queried SubCluster: {} does not exist.\", subClusterId);\r\n            return null;\r\n        }\r\n        Timestamp heartBeatTimeStamp = cstmt.getTimestamp(6, utcCalendar);\r\n        long lastHeartBeat = heartBeatTimeStamp != null ? heartBeatTimeStamp.getTime() : 0;\r\n        SubClusterState state = SubClusterState.fromString(cstmt.getString(7));\r\n        long lastStartTime = cstmt.getLong(8);\r\n        String capability = cstmt.getString(9);\r\n        subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress, lastHeartBeat, state, lastStartTime, capability);\r\n        FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n        try {\r\n            FederationMembershipStateStoreInputValidator.checkSubClusterInfo(subClusterInfo);\r\n        } catch (FederationStateStoreInvalidInputException e) {\r\n            String errMsg = \"SubCluster \" + subClusterId.toString() + \" does not exist\";\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        LOG.debug(\"Got the information about the specified SubCluster {}\", subClusterInfo);\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to obtain the SubCluster information for \" + subClusterId, e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt);\r\n    }\r\n    return GetSubClusterInfoResponse.newInstance(subClusterInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getSubClusters",
  "errType" : [ "SQLException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "GetSubClustersInfoResponse getSubClusters(GetSubClustersInfoRequest subClustersRequest) throws YarnException\n{\r\n    CallableStatement cstmt = null;\r\n    ResultSet rs = null;\r\n    List<SubClusterInfo> subClusters = new ArrayList<SubClusterInfo>();\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_GET_SUBCLUSTERS);\r\n        long startTime = clock.getTime();\r\n        rs = cstmt.executeQuery();\r\n        long stopTime = clock.getTime();\r\n        while (rs.next()) {\r\n            String subClusterName = rs.getString(1);\r\n            String amRMAddress = rs.getString(2);\r\n            String clientRMAddress = rs.getString(3);\r\n            String rmAdminAddress = rs.getString(4);\r\n            String webAppAddress = rs.getString(5);\r\n            long lastHeartBeat = rs.getTimestamp(6, utcCalendar).getTime();\r\n            SubClusterState state = SubClusterState.fromString(rs.getString(7));\r\n            long lastStartTime = rs.getLong(8);\r\n            String capability = rs.getString(9);\r\n            SubClusterId subClusterId = SubClusterId.newInstance(subClusterName);\r\n            SubClusterInfo subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress, lastHeartBeat, state, lastStartTime, capability);\r\n            FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n            try {\r\n                FederationMembershipStateStoreInputValidator.checkSubClusterInfo(subClusterInfo);\r\n            } catch (FederationStateStoreInvalidInputException e) {\r\n                String errMsg = \"SubCluster \" + subClusterId.toString() + \" is not valid\";\r\n                FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n            }\r\n            if (!subClustersRequest.getFilterInactiveSubClusters() || subClusterInfo.getState().isActive()) {\r\n                subClusters.add(subClusterInfo);\r\n            }\r\n        }\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to obtain the information for all the SubClusters \", e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt, null, rs);\r\n    }\r\n    return GetSubClustersInfoResponse.newInstance(subClusters);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "addApplicationHomeSubCluster",
  "errType" : [ "SQLException" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "AddApplicationHomeSubClusterResponse addApplicationHomeSubCluster(AddApplicationHomeSubClusterRequest request) throws YarnException\n{\r\n    FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    CallableStatement cstmt = null;\r\n    String subClusterHome = null;\r\n    ApplicationId appId = request.getApplicationHomeSubCluster().getApplicationId();\r\n    SubClusterId subClusterId = request.getApplicationHomeSubCluster().getHomeSubCluster();\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_ADD_APPLICATION_HOME_SUBCLUSTER);\r\n        cstmt.setString(1, appId.toString());\r\n        cstmt.setString(2, subClusterId.getId());\r\n        cstmt.registerOutParameter(3, java.sql.Types.VARCHAR);\r\n        cstmt.registerOutParameter(4, java.sql.Types.INTEGER);\r\n        long startTime = clock.getTime();\r\n        cstmt.executeUpdate();\r\n        long stopTime = clock.getTime();\r\n        subClusterHome = cstmt.getString(3);\r\n        SubClusterId subClusterIdHome = SubClusterId.newInstance(subClusterHome);\r\n        FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n        if (subClusterId.equals(subClusterIdHome)) {\r\n            if (cstmt.getInt(4) == 0) {\r\n                LOG.info(\"The application {} was not inserted in the StateStore because it\" + \" was already present in SubCluster {}\", appId, subClusterHome);\r\n            } else if (cstmt.getInt(4) != 1) {\r\n                String errMsg = \"Wrong behavior during the insertion of SubCluster \" + subClusterId;\r\n                FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n            }\r\n            LOG.info(\"Insert into the StateStore the application: \" + appId + \" in SubCluster:  \" + subClusterHome);\r\n        } else {\r\n            if (cstmt.getInt(4) != 0) {\r\n                String errMsg = \"The application \" + appId + \" does exist but was overwritten\";\r\n                FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n            }\r\n            LOG.info(\"Application: \" + appId + \" already present with SubCluster:  \" + subClusterHome);\r\n        }\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to insert the newly generated application \" + request.getApplicationHomeSubCluster().getApplicationId(), e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt);\r\n    }\r\n    return AddApplicationHomeSubClusterResponse.newInstance(SubClusterId.newInstance(subClusterHome));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "updateApplicationHomeSubCluster",
  "errType" : [ "SQLException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "UpdateApplicationHomeSubClusterResponse updateApplicationHomeSubCluster(UpdateApplicationHomeSubClusterRequest request) throws YarnException\n{\r\n    FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    CallableStatement cstmt = null;\r\n    ApplicationId appId = request.getApplicationHomeSubCluster().getApplicationId();\r\n    SubClusterId subClusterId = request.getApplicationHomeSubCluster().getHomeSubCluster();\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_UPDATE_APPLICATION_HOME_SUBCLUSTER);\r\n        cstmt.setString(1, appId.toString());\r\n        cstmt.setString(2, subClusterId.getId());\r\n        cstmt.registerOutParameter(3, java.sql.Types.INTEGER);\r\n        long startTime = clock.getTime();\r\n        cstmt.executeUpdate();\r\n        long stopTime = clock.getTime();\r\n        if (cstmt.getInt(3) == 0) {\r\n            String errMsg = \"Application \" + appId + \" does not exist\";\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        if (cstmt.getInt(3) != 1) {\r\n            String errMsg = \"Wrong behavior during the update of SubCluster \" + subClusterId;\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        LOG.info(\"Update the SubCluster to {} for application {} in the StateStore\", subClusterId, appId);\r\n        FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to update the application \" + request.getApplicationHomeSubCluster().getApplicationId(), e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt);\r\n    }\r\n    return UpdateApplicationHomeSubClusterResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getApplicationHomeSubCluster",
  "errType" : [ "SQLException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "GetApplicationHomeSubClusterResponse getApplicationHomeSubCluster(GetApplicationHomeSubClusterRequest request) throws YarnException\n{\r\n    FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    CallableStatement cstmt = null;\r\n    SubClusterId homeRM = null;\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_GET_APPLICATION_HOME_SUBCLUSTER);\r\n        cstmt.setString(1, request.getApplicationId().toString());\r\n        cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\r\n        long startTime = clock.getTime();\r\n        cstmt.execute();\r\n        long stopTime = clock.getTime();\r\n        if (cstmt.getString(2) != null) {\r\n            homeRM = SubClusterId.newInstance(cstmt.getString(2));\r\n        } else {\r\n            String errMsg = \"Application \" + request.getApplicationId() + \" does not exist\";\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        LOG.debug(\"Got the information about the specified application {}.\" + \" The AM is running in {}\", request.getApplicationId(), homeRM);\r\n        FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to obtain the application information \" + \"for the specified application \" + request.getApplicationId(), e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt);\r\n    }\r\n    return GetApplicationHomeSubClusterResponse.newInstance(ApplicationHomeSubCluster.newInstance(request.getApplicationId(), homeRM));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getApplicationsHomeSubCluster",
  "errType" : [ "SQLException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "GetApplicationsHomeSubClusterResponse getApplicationsHomeSubCluster(GetApplicationsHomeSubClusterRequest request) throws YarnException\n{\r\n    CallableStatement cstmt = null;\r\n    ResultSet rs = null;\r\n    List<ApplicationHomeSubCluster> appsHomeSubClusters = new ArrayList<ApplicationHomeSubCluster>();\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_GET_APPLICATIONS_HOME_SUBCLUSTER);\r\n        long startTime = clock.getTime();\r\n        rs = cstmt.executeQuery();\r\n        long stopTime = clock.getTime();\r\n        while (rs.next()) {\r\n            String applicationId = rs.getString(1);\r\n            String homeSubCluster = rs.getString(2);\r\n            appsHomeSubClusters.add(ApplicationHomeSubCluster.newInstance(ApplicationId.fromString(applicationId), SubClusterId.newInstance(homeSubCluster)));\r\n        }\r\n        FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to obtain the information for all the applications \", e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt, null, rs);\r\n    }\r\n    return GetApplicationsHomeSubClusterResponse.newInstance(appsHomeSubClusters);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "deleteApplicationHomeSubCluster",
  "errType" : [ "SQLException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "DeleteApplicationHomeSubClusterResponse deleteApplicationHomeSubCluster(DeleteApplicationHomeSubClusterRequest request) throws YarnException\n{\r\n    FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    CallableStatement cstmt = null;\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_DELETE_APPLICATION_HOME_SUBCLUSTER);\r\n        cstmt.setString(1, request.getApplicationId().toString());\r\n        cstmt.registerOutParameter(2, java.sql.Types.INTEGER);\r\n        long startTime = clock.getTime();\r\n        cstmt.executeUpdate();\r\n        long stopTime = clock.getTime();\r\n        if (cstmt.getInt(2) == 0) {\r\n            String errMsg = \"Application \" + request.getApplicationId() + \" does not exist\";\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        if (cstmt.getInt(2) != 1) {\r\n            String errMsg = \"Wrong behavior during deleting the application \" + request.getApplicationId();\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        LOG.info(\"Delete from the StateStore the application: {}\", request.getApplicationId());\r\n        FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to delete the application \" + request.getApplicationId(), e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt);\r\n    }\r\n    return DeleteApplicationHomeSubClusterResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getPolicyConfiguration",
  "errType" : [ "SQLException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "GetSubClusterPolicyConfigurationResponse getPolicyConfiguration(GetSubClusterPolicyConfigurationRequest request) throws YarnException\n{\r\n    FederationPolicyStoreInputValidator.validate(request);\r\n    CallableStatement cstmt = null;\r\n    SubClusterPolicyConfiguration subClusterPolicyConfiguration = null;\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_GET_POLICY_CONFIGURATION);\r\n        cstmt.setString(1, request.getQueue());\r\n        cstmt.registerOutParameter(2, java.sql.Types.VARCHAR);\r\n        cstmt.registerOutParameter(3, java.sql.Types.VARBINARY);\r\n        long startTime = clock.getTime();\r\n        cstmt.executeUpdate();\r\n        long stopTime = clock.getTime();\r\n        if (cstmt.getString(2) != null && cstmt.getBytes(3) != null) {\r\n            subClusterPolicyConfiguration = SubClusterPolicyConfiguration.newInstance(request.getQueue(), cstmt.getString(2), ByteBuffer.wrap(cstmt.getBytes(3)));\r\n            LOG.debug(\"Selected from StateStore the policy for the queue: {}\", subClusterPolicyConfiguration);\r\n        } else {\r\n            LOG.warn(\"Policy for queue: {} does not exist.\", request.getQueue());\r\n            return null;\r\n        }\r\n        FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to select the policy for the queue :\" + request.getQueue(), e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt);\r\n    }\r\n    return GetSubClusterPolicyConfigurationResponse.newInstance(subClusterPolicyConfiguration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "setPolicyConfiguration",
  "errType" : [ "SQLException" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "SetSubClusterPolicyConfigurationResponse setPolicyConfiguration(SetSubClusterPolicyConfigurationRequest request) throws YarnException\n{\r\n    FederationPolicyStoreInputValidator.validate(request);\r\n    CallableStatement cstmt = null;\r\n    SubClusterPolicyConfiguration policyConf = request.getPolicyConfiguration();\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_SET_POLICY_CONFIGURATION);\r\n        cstmt.setString(1, policyConf.getQueue());\r\n        cstmt.setString(2, policyConf.getType());\r\n        cstmt.setBytes(3, getByteArray(policyConf.getParams()));\r\n        cstmt.registerOutParameter(4, java.sql.Types.INTEGER);\r\n        long startTime = clock.getTime();\r\n        cstmt.executeUpdate();\r\n        long stopTime = clock.getTime();\r\n        if (cstmt.getInt(4) == 0) {\r\n            String errMsg = \"The policy \" + policyConf.getQueue() + \" was not insert into the StateStore\";\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        if (cstmt.getInt(4) != 1) {\r\n            String errMsg = \"Wrong behavior during insert the policy \" + policyConf.getQueue();\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n        LOG.info(\"Insert into the state store the policy for the queue: \" + policyConf.getQueue());\r\n        FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to insert the newly generated policy for the queue :\" + policyConf.getQueue(), e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt);\r\n    }\r\n    return SetSubClusterPolicyConfigurationResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getPoliciesConfigurations",
  "errType" : [ "SQLException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "GetSubClusterPoliciesConfigurationsResponse getPoliciesConfigurations(GetSubClusterPoliciesConfigurationsRequest request) throws YarnException\n{\r\n    CallableStatement cstmt = null;\r\n    ResultSet rs = null;\r\n    List<SubClusterPolicyConfiguration> policyConfigurations = new ArrayList<SubClusterPolicyConfiguration>();\r\n    try {\r\n        cstmt = getCallableStatement(CALL_SP_GET_POLICIES_CONFIGURATIONS);\r\n        long startTime = clock.getTime();\r\n        rs = cstmt.executeQuery();\r\n        long stopTime = clock.getTime();\r\n        while (rs.next()) {\r\n            String queue = rs.getString(1);\r\n            String type = rs.getString(2);\r\n            byte[] policyInfo = rs.getBytes(3);\r\n            SubClusterPolicyConfiguration subClusterPolicyConfiguration = SubClusterPolicyConfiguration.newInstance(queue, type, ByteBuffer.wrap(policyInfo));\r\n            policyConfigurations.add(subClusterPolicyConfiguration);\r\n        }\r\n        FederationStateStoreClientMetrics.succeededStateStoreCall(stopTime - startTime);\r\n    } catch (SQLException e) {\r\n        FederationStateStoreClientMetrics.failedStateStoreCall();\r\n        FederationStateStoreUtils.logAndThrowRetriableException(LOG, \"Unable to obtain the policy information for all the queues.\", e);\r\n    } finally {\r\n        FederationStateStoreUtils.returnToPool(LOG, cstmt, null, rs);\r\n    }\r\n    return GetSubClusterPoliciesConfigurationsResponse.newInstance(policyConfigurations);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getCurrentVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Version getCurrentVersion()\n{\r\n    throw new NotImplementedException(\"Code is not implemented\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "loadVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Version loadVersion()\n{\r\n    throw new NotImplementedException(\"Code is not implemented\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void close() throws Exception\n{\r\n    if (dataSource != null) {\r\n        dataSource.close();\r\n        LOG.debug(\"Connection closed\");\r\n        FederationStateStoreClientMetrics.decrConnections();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getConnection",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Connection getConnection() throws SQLException\n{\r\n    FederationStateStoreClientMetrics.incrConnections();\r\n    return dataSource.getConnection();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getCallableStatement",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CallableStatement getCallableStatement(String procedure) throws SQLException\n{\r\n    return conn.prepareCall(procedure);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getByteArray",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] getByteArray(ByteBuffer bb)\n{\r\n    byte[] ba = new byte[bb.limit()];\r\n    bb.get(ba);\r\n    return ba;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "reinitialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void reinitialize(FederationPolicyInitializationContext federationPolicyContext) throws FederationPolicyInitializationException\n{\r\n    FederationPolicyInitializationContextValidator.validate(federationPolicyContext, this.getClass().getCanonicalName());\r\n    setPolicyContext(federationPolicyContext);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "getHomeSubcluster",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "SubClusterId getHomeSubcluster(ApplicationSubmissionContext appSubmissionContext, List<SubClusterId> blackListSubClusters) throws YarnException\n{\r\n    Map<SubClusterId, SubClusterInfo> activeSubclusters = getActiveSubclusters();\r\n    FederationPolicyUtils.validateSubClusterAvailability(new ArrayList<SubClusterId>(activeSubclusters.keySet()), blackListSubClusters);\r\n    if (blackListSubClusters != null) {\r\n        for (SubClusterId scId : blackListSubClusters) {\r\n            activeSubclusters.remove(scId);\r\n        }\r\n    }\r\n    validate(appSubmissionContext);\r\n    int chosenPosition = Math.abs(appSubmissionContext.getQueue().hashCode() % activeSubclusters.size());\r\n    List<SubClusterId> list = new ArrayList<>(activeSubclusters.keySet());\r\n    Collections.sort(list);\r\n    return list.get(chosenPosition);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClustersInfoRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetSubClustersInfoRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getFilterInactiveSubClusters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getFilterInactiveSubClusters()\n{\r\n    GetSubClustersInfoRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getFilterInactiveSubclusters();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setFilterInactiveSubClusters",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setFilterInactiveSubClusters(boolean filterInactiveSubClusters)\n{\r\n    maybeInitBuilder();\r\n    builder.setFilterInactiveSubclusters(filterInactiveSubClusters);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getSubClusterPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterPolicyConfiguration getSubClusterPolicyConfiguration()\n{\r\n    return federationPolicyConfiguration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setSubClusterPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSubClusterPolicyConfiguration(SubClusterPolicyConfiguration fedPolicyConfiguration)\n{\r\n    this.federationPolicyConfiguration = fedPolicyConfiguration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getFederationSubclusterResolver",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterResolver getFederationSubclusterResolver()\n{\r\n    return federationSubclusterResolver;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setFederationSubclusterResolver",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFederationSubclusterResolver(SubClusterResolver federationSubclusterResolver)\n{\r\n    this.federationSubclusterResolver = federationSubclusterResolver;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getFederationStateStoreFacade",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FederationStateStoreFacade getFederationStateStoreFacade()\n{\r\n    return federationStateStoreFacade;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setFederationStateStoreFacade",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFederationStateStoreFacade(FederationStateStoreFacade federationStateStoreFacade)\n{\r\n    this.federationStateStoreFacade = federationStateStoreFacade;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getHomeSubcluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId getHomeSubcluster()\n{\r\n    return homeSubcluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setHomeSubcluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHomeSubcluster(SubClusterId homeSubcluster)\n{\r\n    this.homeSubcluster = homeSubcluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClusterInfoRequest newInstance(SubClusterId subClusterId)\n{\r\n    GetSubClusterInfoRequest subClusterRequest = Records.newRecord(GetSubClusterInfoRequest.class);\r\n    subClusterRequest.setSubClusterId(subClusterId);\r\n    return subClusterRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId getSubClusterId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSubClusterId(SubClusterId subClusterId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationHomeSubClusterProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = ApplicationHomeSubClusterProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationId != null) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n    if (this.homeSubCluster != null) {\r\n        builder.setHomeSubCluster(convertToProtoFormat(this.homeSubCluster));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    ApplicationHomeSubClusterProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null) {\r\n        builder.clearApplicationId();\r\n        return;\r\n    }\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterId getHomeSubCluster()\n{\r\n    ApplicationHomeSubClusterProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.homeSubCluster != null) {\r\n        return this.homeSubCluster;\r\n    }\r\n    if (!p.hasHomeSubCluster()) {\r\n        return null;\r\n    }\r\n    this.homeSubCluster = convertFromProtoFormat(p.getHomeSubCluster());\r\n    return this.homeSubCluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setHomeSubCluster(SubClusterId homeSubCluster)\n{\r\n    maybeInitBuilder();\r\n    if (homeSubCluster == null) {\r\n        builder.clearHomeSubCluster();\r\n    }\r\n    this.homeSubCluster = homeSubCluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId convertFromProtoFormat(SubClusterIdProto subClusterId)\n{\r\n    return new SubClusterIdPBImpl(subClusterId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterIdProto convertToProtoFormat(SubClusterId subClusterId)\n{\r\n    return ((SubClusterIdPBImpl) subClusterId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId convertFromProtoFormat(ApplicationIdProto appId)\n{\r\n    return new ApplicationIdPBImpl(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId appId)\n{\r\n    return ((ApplicationIdPBImpl) appId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getContainerLogsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ContainerLogFileInfo> getContainerLogsInfo()\n{\r\n    return this.containerLogsInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getLogType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getLogType()\n{\r\n    return this.logType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainerId()\n{\r\n    return this.containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNodeId()\n{\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "registerApplicationMasterForDistributedScheduling",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnServerCommonServiceProtos.RegisterDistributedSchedulingAMResponseProto registerApplicationMasterForDistributedScheduling(RpcController controller, RegisterApplicationMasterRequestProto proto) throws ServiceException\n{\r\n    RegisterApplicationMasterRequestPBImpl request = new RegisterApplicationMasterRequestPBImpl(proto);\r\n    try {\r\n        RegisterDistributedSchedulingAMResponse response = real.registerApplicationMasterForDistributedScheduling(request);\r\n        return ((RegisterDistributedSchedulingAMResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "allocateForDistributedScheduling",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnServerCommonServiceProtos.DistributedSchedulingAllocateResponseProto allocateForDistributedScheduling(RpcController controller, YarnServerCommonServiceProtos.DistributedSchedulingAllocateRequestProto proto) throws ServiceException\n{\r\n    DistributedSchedulingAllocateRequestPBImpl request = new DistributedSchedulingAllocateRequestPBImpl(proto);\r\n    try {\r\n        DistributedSchedulingAllocateResponse response = real.allocateForDistributedScheduling(request);\r\n        return ((DistributedSchedulingAllocateResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "allocate",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnServiceProtos.AllocateResponseProto allocate(RpcController arg0, AllocateRequestProto proto) throws ServiceException\n{\r\n    AllocateRequestPBImpl request = new AllocateRequestPBImpl(proto);\r\n    try {\r\n        AllocateResponse response = real.allocate(request);\r\n        return ((AllocateResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "finishApplicationMaster",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnServiceProtos.FinishApplicationMasterResponseProto finishApplicationMaster(RpcController arg0, YarnServiceProtos.FinishApplicationMasterRequestProto proto) throws ServiceException\n{\r\n    FinishApplicationMasterRequestPBImpl request = new FinishApplicationMasterRequestPBImpl(proto);\r\n    try {\r\n        FinishApplicationMasterResponse response = real.finishApplicationMaster(request);\r\n        return ((FinishApplicationMasterResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "registerApplicationMaster",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnServiceProtos.RegisterApplicationMasterResponseProto registerApplicationMaster(RpcController arg0, RegisterApplicationMasterRequestProto proto) throws ServiceException\n{\r\n    RegisterApplicationMasterRequestPBImpl request = new RegisterApplicationMasterRequestPBImpl(proto);\r\n    try {\r\n        RegisterApplicationMasterResponse response = real.registerApplicationMaster(request);\r\n        return ((RegisterApplicationMasterResponsePBImpl) response).getProto();\r\n    } catch (YarnException e) {\r\n        throw new ServiceException(e);\r\n    } catch (IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterPolicyConfigurationProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SubClusterPolicyConfigurationProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getQueue()\n{\r\n    SubClusterPolicyConfigurationProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getQueue();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setQueue(String queueName)\n{\r\n    maybeInitBuilder();\r\n    if (queueName == null) {\r\n        builder.clearType();\r\n        return;\r\n    }\r\n    builder.setQueue(queueName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getType()\n{\r\n    SubClusterPolicyConfigurationProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getType();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setType",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setType(String policyType)\n{\r\n    maybeInitBuilder();\r\n    if (policyType == null) {\r\n        builder.clearType();\r\n        return;\r\n    }\r\n    builder.setType(policyType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getParams",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteBuffer getParams()\n{\r\n    SubClusterPolicyConfigurationProtoOrBuilder p = viaProto ? proto : builder;\r\n    return ProtoUtils.convertFromProtoFormat(p.getParams());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setParams",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setParams(ByteBuffer policyParams)\n{\r\n    maybeInitBuilder();\r\n    if (policyParams == null) {\r\n        builder.clearParams();\r\n        return;\r\n    }\r\n    builder.setParams(ProtoUtils.convertToProtoFormat(policyParams));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UnRegisterNodeManagerRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodeId != null) {\r\n        builder.setNodeId(convertToProtoFormat(this.nodeId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = UnRegisterNodeManagerRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    UnRegisterNodeManagerRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.nodeId != null) {\r\n        return this.nodeId;\r\n    }\r\n    if (!p.hasNodeId()) {\r\n        return null;\r\n    }\r\n    this.nodeId = convertFromProtoFormat(p.getNodeId());\r\n    return this.nodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeId(NodeId updatedNodeId)\n{\r\n    maybeInitBuilder();\r\n    if (updatedNodeId == null) {\r\n        builder.clearNodeId();\r\n    }\r\n    this.nodeId = updatedNodeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeIdPBImpl convertFromProtoFormat(NodeIdProto p)\n{\r\n    return new NodeIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeIdProto convertToProtoFormat(NodeId t)\n{\r\n    return ((NodeIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getMetrics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "OpportunisticSchedulerMetrics getMetrics()\n{\r\n    if (!isInitialized.get()) {\r\n        synchronized (OpportunisticSchedulerMetrics.class) {\r\n            if (INSTANCE == null) {\r\n                INSTANCE = new OpportunisticSchedulerMetrics();\r\n                registerMetrics();\r\n                isInitialized.set(true);\r\n            }\r\n        }\r\n    }\r\n    return INSTANCE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "resetMetrics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void resetMetrics()\n{\r\n    synchronized (OpportunisticSchedulerMetrics.class) {\r\n        isInitialized.set(false);\r\n        INSTANCE = null;\r\n        MetricsSystem ms = DefaultMetricsSystem.instance();\r\n        if (ms != null) {\r\n            ms.unregisterSource(\"OpportunisticSchedulerMetrics\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "registerMetrics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void registerMetrics()\n{\r\n    registry = new MetricsRegistry(RECORD_INFO);\r\n    registry.tag(RECORD_INFO, \"ResourceManager\");\r\n    MetricsSystem ms = DefaultMetricsSystem.instance();\r\n    if (ms != null) {\r\n        ms.register(\"OpportunisticSchedulerMetrics\", \"Metrics for the Yarn Opportunistic Scheduler\", INSTANCE);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getAllocatedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getAllocatedContainers()\n{\r\n    return allocatedOContainers.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getAggregatedAllocatedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAggregatedAllocatedContainers()\n{\r\n    return aggregateOContainersAllocated.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getAggregatedReleasedContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAggregatedReleasedContainers()\n{\r\n    return aggregateOContainersReleased.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getAggregatedNodeLocalContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAggregatedNodeLocalContainers()\n{\r\n    return aggregateNodeLocalOContainersAllocated.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getAggregatedRackLocalContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAggregatedRackLocalContainers()\n{\r\n    return aggregateRackLocalOContainersAllocated.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getAggregatedOffSwitchContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getAggregatedOffSwitchContainers()\n{\r\n    return aggregateOffSwitchOContainersAllocated.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "incrAllocatedOppContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void incrAllocatedOppContainers(int numContainers)\n{\r\n    allocatedOContainers.incr(numContainers);\r\n    aggregateOContainersAllocated.incr(numContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "incrReleasedOppContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void incrReleasedOppContainers(int numContainers)\n{\r\n    aggregateOContainersReleased.incr(numContainers);\r\n    allocatedOContainers.decr(numContainers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "incrNodeLocalOppContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrNodeLocalOppContainers()\n{\r\n    aggregateNodeLocalOContainersAllocated.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "incrRackLocalOppContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrRackLocalOppContainers()\n{\r\n    aggregateRackLocalOContainersAllocated.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "incrOffSwitchOppContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrOffSwitchOppContainers()\n{\r\n    aggregateOffSwitchOContainersAllocated.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "addAllocateOLatencyEntry",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addAllocateOLatencyEntry(long latency)\n{\r\n    allocateLatencyOQuantiles.add(latency);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getKerberosInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "KerberosInfo getKerberosInfo(Class<?> protocol, Configuration conf)\n{\r\n    if (!protocol.equals(ResourceTrackerPB.class)) {\r\n        return null;\r\n    }\r\n    return new KerberosInfo() {\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public String serverPrincipal() {\r\n            return YarnConfiguration.RM_PRINCIPAL;\r\n        }\r\n\r\n        @Override\r\n        public String clientPrincipal() {\r\n            return YarnConfiguration.NM_PRINCIPAL;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getTokenInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenInfo getTokenInfo(Class<?> protocol, Configuration conf)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RegisterNodeManagerRequest newInstance(NodeId nodeId, int httpPort, Resource resource, String nodeManagerVersionId, List<NMContainerStatus> containerStatuses, List<ApplicationId> runningApplications)\n{\r\n    return newInstance(nodeId, httpPort, resource, nodeManagerVersionId, containerStatuses, runningApplications, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RegisterNodeManagerRequest newInstance(NodeId nodeId, int httpPort, Resource resource, String nodeManagerVersionId, List<NMContainerStatus> containerStatuses, List<ApplicationId> runningApplications, Set<NodeLabel> nodeLabels)\n{\r\n    return newInstance(nodeId, httpPort, resource, nodeManagerVersionId, containerStatuses, runningApplications, nodeLabels, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RegisterNodeManagerRequest newInstance(NodeId nodeId, int httpPort, Resource resource, String nodeManagerVersionId, List<NMContainerStatus> containerStatuses, List<ApplicationId> runningApplications, Set<NodeLabel> nodeLabels, Resource physicalResource)\n{\r\n    return newInstance(nodeId, httpPort, resource, nodeManagerVersionId, containerStatuses, runningApplications, nodeLabels, physicalResource, null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "RegisterNodeManagerRequest newInstance(NodeId nodeId, int httpPort, Resource resource, String nodeManagerVersionId, List<NMContainerStatus> containerStatuses, List<ApplicationId> runningApplications, Set<NodeLabel> nodeLabels, Resource physicalResource, Set<NodeAttribute> nodeAttributes, NodeStatus nodeStatus)\n{\r\n    RegisterNodeManagerRequest request = Records.newRecord(RegisterNodeManagerRequest.class);\r\n    request.setHttpPort(httpPort);\r\n    request.setResource(resource);\r\n    request.setNodeId(nodeId);\r\n    request.setNMVersion(nodeManagerVersionId);\r\n    request.setContainerStatuses(containerStatuses);\r\n    request.setRunningApplications(runningApplications);\r\n    request.setNodeLabels(nodeLabels);\r\n    request.setPhysicalResource(physicalResource);\r\n    request.setNodeAttributes(nodeAttributes);\r\n    request.setNodeStatus(nodeStatus);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId getNodeId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getHttpPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getHttpPort()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getResource()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNMVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getNMVersion()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNMContainerStatuses",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<NMContainerStatus> getNMContainerStatuses()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<NodeLabel> getNodeLabels()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeLabels(Set<NodeLabel> nodeLabels)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getRunningApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationId> getRunningApplications()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeId(NodeId nodeId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setHttpPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHttpPort(int port)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResource(Resource resource)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNMVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNMVersion(String version)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setContainerStatuses",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerStatuses(List<NMContainerStatus> containerStatuses)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setRunningApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRunningApplications(List<ApplicationId> runningApplications)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getPhysicalResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getPhysicalResource()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setPhysicalResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPhysicalResource(Resource physicalResource)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getLogAggregationReportsForApps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<LogAggregationReport> getLogAggregationReportsForApps()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setLogAggregationReportsForApps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLogAggregationReportsForApps(List<LogAggregationReport> logAggregationReportsForApps)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<NodeAttribute> getNodeAttributes()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeAttributes(Set<NodeAttribute> nodeAttributes)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeStatus getNodeStatus()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeStatus(NodeStatus nodeStatus)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "registerNodeManager",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RegisterNodeManagerResponse registerNodeManager(RegisterNodeManagerRequest request) throws YarnException, IOException\n{\r\n    RegisterNodeManagerRequestProto requestProto = ((RegisterNodeManagerRequestPBImpl) request).getProto();\r\n    try {\r\n        return new RegisterNodeManagerResponsePBImpl(proxy.registerNodeManager(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "nodeHeartbeat",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "NodeHeartbeatResponse nodeHeartbeat(NodeHeartbeatRequest request) throws YarnException, IOException\n{\r\n    NodeHeartbeatRequestProto requestProto = ((NodeHeartbeatRequestPBImpl) request).getProto();\r\n    try {\r\n        return new NodeHeartbeatResponsePBImpl(proxy.nodeHeartbeat(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\client",
  "methodName" : "unRegisterNodeManager",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "UnRegisterNodeManagerResponse unRegisterNodeManager(UnRegisterNodeManagerRequest request) throws YarnException, IOException\n{\r\n    UnRegisterNodeManagerRequestProto requestProto = ((UnRegisterNodeManagerRequestPBImpl) request).getProto();\r\n    try {\r\n        return new UnRegisterNodeManagerResponsePBImpl(proxy.unRegisterNodeManager(null, requestProto));\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AddApplicationHomeSubClusterRequest newInstance(ApplicationHomeSubCluster applicationHomeSubCluster)\n{\r\n    AddApplicationHomeSubClusterRequest mapRequest = Records.newRecord(AddApplicationHomeSubClusterRequest.class);\r\n    mapRequest.setApplicationHomeSubCluster(applicationHomeSubCluster);\r\n    return mapRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHomeSubCluster getApplicationHomeSubCluster()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationHomeSubCluster(ApplicationHomeSubCluster applicationHomeSubCluster)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClusterPoliciesConfigurationsRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetSubClusterPoliciesConfigurationsRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RegisterNodeManagerResponseProto getProto()\n{\r\n    if (rebuild)\r\n        mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containerTokenMasterKey != null) {\r\n        builder.setContainerTokenMasterKey(convertToProtoFormat(this.containerTokenMasterKey));\r\n    }\r\n    if (this.nmTokenMasterKey != null) {\r\n        builder.setNmTokenMasterKey(convertToProtoFormat(this.nmTokenMasterKey));\r\n    }\r\n    if (this.resource != null) {\r\n        builder.setResource(convertToProtoFormat(this.resource));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    rebuild = false;\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = RegisterNodeManagerResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getResource()\n{\r\n    RegisterNodeManagerResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.resource != null) {\r\n        return this.resource;\r\n    }\r\n    if (!p.hasResource()) {\r\n        return null;\r\n    }\r\n    this.resource = convertFromProtoFormat(p.getResource());\r\n    return this.resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResource(Resource resource)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null) {\r\n        builder.clearResource();\r\n    }\r\n    this.resource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MasterKey getContainerTokenMasterKey()\n{\r\n    RegisterNodeManagerResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerTokenMasterKey != null) {\r\n        return this.containerTokenMasterKey;\r\n    }\r\n    if (!p.hasContainerTokenMasterKey()) {\r\n        return null;\r\n    }\r\n    this.containerTokenMasterKey = convertFromProtoFormat(p.getContainerTokenMasterKey());\r\n    return this.containerTokenMasterKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerTokenMasterKey(MasterKey masterKey)\n{\r\n    maybeInitBuilder();\r\n    if (masterKey == null)\r\n        builder.clearContainerTokenMasterKey();\r\n    this.containerTokenMasterKey = masterKey;\r\n    rebuild = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MasterKey getNMTokenMasterKey()\n{\r\n    RegisterNodeManagerResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.nmTokenMasterKey != null) {\r\n        return this.nmTokenMasterKey;\r\n    }\r\n    if (!p.hasNmTokenMasterKey()) {\r\n        return null;\r\n    }\r\n    this.nmTokenMasterKey = convertFromProtoFormat(p.getNmTokenMasterKey());\r\n    return this.nmTokenMasterKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNMTokenMasterKey(MasterKey masterKey)\n{\r\n    maybeInitBuilder();\r\n    if (masterKey == null)\r\n        builder.clearNmTokenMasterKey();\r\n    this.nmTokenMasterKey = masterKey;\r\n    rebuild = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getDiagnosticsMessage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDiagnosticsMessage()\n{\r\n    RegisterNodeManagerResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDiagnosticsMessage()) {\r\n        return null;\r\n    }\r\n    return p.getDiagnosticsMessage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setDiagnosticsMessage",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDiagnosticsMessage(String diagnosticsMessage)\n{\r\n    maybeInitBuilder();\r\n    if (diagnosticsMessage == null) {\r\n        builder.clearDiagnosticsMessage();\r\n        return;\r\n    }\r\n    builder.setDiagnosticsMessage((diagnosticsMessage));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getRMVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRMVersion()\n{\r\n    RegisterNodeManagerResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasRmVersion()) {\r\n        return null;\r\n    }\r\n    return p.getRmVersion();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setRMVersion",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRMVersion(String rmVersion)\n{\r\n    maybeInitBuilder();\r\n    if (rmVersion == null) {\r\n        builder.clearRmIdentifier();\r\n        return;\r\n    }\r\n    builder.setRmVersion(rmVersion);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeAction",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeAction getNodeAction()\n{\r\n    RegisterNodeManagerResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeAction()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getNodeAction());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeAction",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeAction(NodeAction nodeAction)\n{\r\n    maybeInitBuilder();\r\n    if (nodeAction == null) {\r\n        builder.clearNodeAction();\r\n    } else {\r\n        builder.setNodeAction(convertToProtoFormat(nodeAction));\r\n    }\r\n    rebuild = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getRMIdentifier",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getRMIdentifier()\n{\r\n    RegisterNodeManagerResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getRmIdentifier());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setRMIdentifier",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRMIdentifier(long rmIdentifier)\n{\r\n    maybeInitBuilder();\r\n    builder.setRmIdentifier(rmIdentifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAction convertFromProtoFormat(NodeActionProto p)\n{\r\n    return NodeAction.valueOf(p.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeActionProto convertToProtoFormat(NodeAction t)\n{\r\n    return NodeActionProto.valueOf(t.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MasterKeyPBImpl convertFromProtoFormat(MasterKeyProto p)\n{\r\n    return new MasterKeyPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MasterKeyProto convertToProtoFormat(MasterKey t)\n{\r\n    return ((MasterKeyPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource t)\n{\r\n    return ProtoUtils.convertToProtoFormat(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAreNodeLabelsAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getAreNodeLabelsAcceptedByRM()\n{\r\n    RegisterNodeManagerResponseProtoOrBuilder p = this.viaProto ? this.proto : this.builder;\r\n    return p.getAreNodeLabelsAcceptedByRM();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAreNodeLabelsAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAreNodeLabelsAcceptedByRM(boolean areNodeLabelsAcceptedByRM)\n{\r\n    maybeInitBuilder();\r\n    this.builder.setAreNodeLabelsAcceptedByRM(areNodeLabelsAcceptedByRM);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAreNodeAttributesAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getAreNodeAttributesAcceptedByRM()\n{\r\n    RegisterNodeManagerResponseProtoOrBuilder p = this.viaProto ? this.proto : this.builder;\r\n    return p.getAreNodeAttributesAcceptedByRM();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAreNodeAttributesAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAreNodeAttributesAcceptedByRM(boolean areNodeAttributesAcceptedByRM)\n{\r\n    maybeInitBuilder();\r\n    this.builder.setAreNodeAttributesAcceptedByRM(areNodeAttributesAcceptedByRM);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClusterPolicyConfigurationRequest newInstance(String queueName)\n{\r\n    GetSubClusterPolicyConfigurationRequest request = Records.newRecord(GetSubClusterPolicyConfigurationRequest.class);\r\n    request.setQueue(queueName);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getQueue()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setQueue(String queueName)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SetSubClusterPolicyConfigurationResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SetSubClusterPolicyConfigurationResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "getHomeSubcluster",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "SubClusterId getHomeSubcluster(ApplicationSubmissionContext appSubmissionContext, List<SubClusterId> blacklist) throws YarnException\n{\r\n    validate(appSubmissionContext);\r\n    Map<SubClusterId, SubClusterInfo> activeSubclusters = getActiveSubclusters();\r\n    FederationPolicyUtils.validateSubClusterAvailability(new ArrayList<SubClusterId>(activeSubclusters.keySet()), blacklist);\r\n    Map<SubClusterIdInfo, Float> weights = getPolicyInfo().getRouterPolicyWeights();\r\n    SubClusterId chosen = null;\r\n    Float currentBest = Float.MIN_VALUE;\r\n    for (SubClusterId id : activeSubclusters.keySet()) {\r\n        SubClusterIdInfo idInfo = new SubClusterIdInfo(id);\r\n        if (blacklist != null && blacklist.contains(id)) {\r\n            continue;\r\n        }\r\n        if (weights.containsKey(idInfo) && weights.get(idInfo) > currentBest) {\r\n            currentBest = weights.get(idInfo);\r\n            chosen = id;\r\n        }\r\n    }\r\n    if (chosen == null) {\r\n        throw new FederationPolicyException(\"No Active Subcluster with weight vector greater than zero\");\r\n    }\r\n    return chosen;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "createNewMasterKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MasterKeyData createNewMasterKey()\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        return new MasterKeyData(serialNo++, generateSecret());\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "getCurrentKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MasterKey getCurrentKey()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.currentMasterKey.getMasterKey();\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "createPassword",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "byte[] createPassword(NMTokenIdentifier identifier)\n{\r\n    LOG.debug(\"creating password for {} for user {} to run on NM {}\", identifier.getApplicationAttemptId(), identifier.getApplicationSubmitter(), identifier.getNodeId());\r\n    readLock.lock();\r\n    try {\r\n        return createPassword(identifier.getBytes(), currentMasterKey.getSecretKey());\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "retrievePassword",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "byte[] retrievePassword(NMTokenIdentifier identifier) throws org.apache.hadoop.security.token.SecretManager.InvalidToken\n{\r\n    readLock.lock();\r\n    try {\r\n        return retrivePasswordInternal(identifier, currentMasterKey);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "retrivePasswordInternal",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] retrivePasswordInternal(NMTokenIdentifier identifier, MasterKeyData masterKey)\n{\r\n    LOG.debug(\"retriving password for {} for user {} to run on NM {}\", identifier.getApplicationAttemptId(), identifier.getApplicationSubmitter(), identifier.getNodeId());\r\n    return createPassword(identifier.getBytes(), masterKey.getSecretKey());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "createIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMTokenIdentifier createIdentifier()\n{\r\n    return new NMTokenIdentifier();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "createNMToken",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Token createNMToken(ApplicationAttemptId applicationAttemptId, NodeId nodeId, String applicationSubmitter)\n{\r\n    byte[] password;\r\n    NMTokenIdentifier identifier;\r\n    this.readLock.lock();\r\n    try {\r\n        identifier = new NMTokenIdentifier(applicationAttemptId, nodeId, applicationSubmitter, this.currentMasterKey.getMasterKey().getKeyId());\r\n        password = this.createPassword(identifier);\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n    return newInstance(password, identifier);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\security",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Token newInstance(byte[] password, NMTokenIdentifier identifier)\n{\r\n    NodeId nodeId = identifier.getNodeId();\r\n    InetSocketAddress addr = NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\r\n    Token nmToken = Token.newInstance(identifier.getBytes(), NMTokenIdentifier.KIND.toString(), password, SecurityUtil.buildTokenService(addr).toString());\r\n    return nmToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "instantiatePolicyManager",
  "errType" : [ "ClassNotFoundException", "InstantiationException", "IllegalAccessException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FederationPolicyManager instantiatePolicyManager(String newType) throws FederationPolicyInitializationException\n{\r\n    FederationPolicyManager federationPolicyManager = null;\r\n    try {\r\n        Class<?> c = Class.forName(newType);\r\n        federationPolicyManager = (FederationPolicyManager) c.newInstance();\r\n    } catch (ClassNotFoundException e) {\r\n        throw new FederationPolicyInitializationException(e);\r\n    } catch (InstantiationException e) {\r\n        throw new FederationPolicyInitializationException(e);\r\n    } catch (IllegalAccessException e) {\r\n        throw new FederationPolicyInitializationException(e);\r\n    }\r\n    return federationPolicyManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "loadPolicyConfiguration",
  "errType" : [ "YarnException", "YarnException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "SubClusterPolicyConfiguration loadPolicyConfiguration(String queue, Configuration conf, FederationStateStoreFacade federationFacade)\n{\r\n    SubClusterPolicyConfiguration configuration = null;\r\n    if (queue != null) {\r\n        try {\r\n            configuration = federationFacade.getPolicyConfiguration(queue);\r\n        } catch (YarnException e) {\r\n            LOG.warn(\"Failed to get policy from FederationFacade with queue \" + queue + \": \" + e.getMessage());\r\n        }\r\n    }\r\n    if (configuration == null) {\r\n        LOG.info(\"No policy configured for queue {} in StateStore,\" + \" fallback to default queue\", queue);\r\n        queue = YarnConfiguration.DEFAULT_FEDERATION_POLICY_KEY;\r\n        try {\r\n            configuration = federationFacade.getPolicyConfiguration(queue);\r\n        } catch (YarnException e) {\r\n            LOG.warn(\"No fallback behavior defined in store, defaulting to XML \" + \"configuration fallback behavior.\");\r\n        }\r\n    }\r\n    if (configuration == null) {\r\n        LOG.info(\"No policy configured for default queue {} in StateStore,\" + \" fallback to local config\", queue);\r\n        String defaultFederationPolicyManager = conf.get(YarnConfiguration.FEDERATION_POLICY_MANAGER, YarnConfiguration.DEFAULT_FEDERATION_POLICY_MANAGER);\r\n        String defaultPolicyParamString = conf.get(YarnConfiguration.FEDERATION_POLICY_MANAGER_PARAMS, YarnConfiguration.DEFAULT_FEDERATION_POLICY_MANAGER_PARAMS);\r\n        ByteBuffer defaultPolicyParam = ByteBuffer.wrap(defaultPolicyParamString.getBytes(StandardCharsets.UTF_8));\r\n        configuration = SubClusterPolicyConfiguration.newInstance(queue, defaultFederationPolicyManager, defaultPolicyParam);\r\n    }\r\n    return configuration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "loadAMRMPolicy",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "FederationAMRMProxyPolicy loadAMRMPolicy(String queue, FederationAMRMProxyPolicy oldPolicy, Configuration conf, FederationStateStoreFacade federationFacade, SubClusterId homeSubClusterId) throws FederationPolicyInitializationException\n{\r\n    SubClusterPolicyConfiguration configuration = loadPolicyConfiguration(queue, conf, federationFacade);\r\n    FederationPolicyInitializationContext context = new FederationPolicyInitializationContext(configuration, federationFacade.getSubClusterResolver(), federationFacade, homeSubClusterId);\r\n    LOG.info(\"Creating policy manager of type: \" + configuration.getType());\r\n    FederationPolicyManager federationPolicyManager = instantiatePolicyManager(configuration.getType());\r\n    federationPolicyManager.setQueue(configuration.getQueue());\r\n    return federationPolicyManager.getAMRMPolicy(context, oldPolicy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "validateSubClusterAvailability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validateSubClusterAvailability(List<SubClusterId> activeSubClusters, List<SubClusterId> blackListSubClusters) throws FederationPolicyException\n{\r\n    if (activeSubClusters != null && !activeSubClusters.isEmpty()) {\r\n        if (blackListSubClusters == null) {\r\n            return;\r\n        }\r\n        for (SubClusterId scId : activeSubClusters) {\r\n            if (!blackListSubClusters.contains(scId)) {\r\n                return;\r\n            }\r\n        }\r\n    }\r\n    throw new FederationPolicyException(FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getWeightedRandom",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "int getWeightedRandom(ArrayList<Float> weights)\n{\r\n    int i;\r\n    float totalWeight = 0;\r\n    for (i = 0; i < weights.size(); i++) {\r\n        if (weights.get(i) > 0) {\r\n            totalWeight += weights.get(i);\r\n        }\r\n    }\r\n    if (totalWeight == 0) {\r\n        return -1;\r\n    }\r\n    float samplePoint = rand.nextFloat() * totalWeight;\r\n    int lastIndex = 0;\r\n    for (i = 0; i < weights.size(); i++) {\r\n        if (weights.get(i) > 0) {\r\n            if (samplePoint <= weights.get(i)) {\r\n                return i;\r\n            } else {\r\n                lastIndex = i;\r\n                samplePoint -= weights.get(i);\r\n            }\r\n        }\r\n    }\r\n    return lastIndex;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setRand",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setRand(long seed)\n{\r\n    rand.setSeed(seed);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerQueuingLimit newInstance()\n{\r\n    ContainerQueuingLimit containerQueuingLimit = Records.newRecord(ContainerQueuingLimit.class);\r\n    containerQueuingLimit.setMaxQueueLength(-1);\r\n    containerQueuingLimit.setMaxQueueWaitTimeInMs(-1);\r\n    return containerQueuingLimit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getMaxQueueLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMaxQueueLength()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setMaxQueueLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMaxQueueLength(int queueLength)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getMaxQueueWaitTimeInMs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMaxQueueWaitTimeInMs()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setMaxQueueWaitTimeInMs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMaxQueueWaitTimeInMs(int waitTime)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "init",
  "errType" : [ "IOException", "Exception" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void init(Configuration conf) throws YarnException\n{\r\n    LOG.info(\"Initializing ZooKeeper connection\");\r\n    baseZNode = conf.get(YarnConfiguration.FEDERATION_STATESTORE_ZK_PARENT_PATH, YarnConfiguration.DEFAULT_FEDERATION_STATESTORE_ZK_PARENT_PATH);\r\n    try {\r\n        this.zkManager = new ZKCuratorManager(conf);\r\n        this.zkManager.start();\r\n    } catch (IOException e) {\r\n        LOG.error(\"Cannot initialize the ZK connection\", e);\r\n    }\r\n    membershipZNode = getNodePath(baseZNode, ROOT_ZNODE_NAME_MEMBERSHIP);\r\n    appsZNode = getNodePath(baseZNode, ROOT_ZNODE_NAME_APPLICATION);\r\n    policiesZNode = getNodePath(baseZNode, ROOT_ZNODE_NAME_POLICY);\r\n    try {\r\n        List<ACL> zkAcl = ZKCuratorManager.getZKAcls(conf);\r\n        zkManager.createRootDirRecursively(membershipZNode, zkAcl);\r\n        zkManager.createRootDirRecursively(appsZNode, zkAcl);\r\n        zkManager.createRootDirRecursively(policiesZNode, zkAcl);\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot create base directories: \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close() throws Exception\n{\r\n    if (zkManager != null) {\r\n        zkManager.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "addApplicationHomeSubCluster",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "AddApplicationHomeSubClusterResponse addApplicationHomeSubCluster(AddApplicationHomeSubClusterRequest request) throws YarnException\n{\r\n    FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    ApplicationHomeSubCluster app = request.getApplicationHomeSubCluster();\r\n    ApplicationId appId = app.getApplicationId();\r\n    SubClusterId homeSubCluster = app.getHomeSubCluster();\r\n    try {\r\n        putApp(appId, homeSubCluster, false);\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot add application home subcluster for \" + appId;\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    try {\r\n        homeSubCluster = getApp(appId);\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot check app home subcluster for \" + appId;\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    return AddApplicationHomeSubClusterResponse.newInstance(homeSubCluster);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "updateApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "UpdateApplicationHomeSubClusterResponse updateApplicationHomeSubCluster(UpdateApplicationHomeSubClusterRequest request) throws YarnException\n{\r\n    FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    ApplicationHomeSubCluster app = request.getApplicationHomeSubCluster();\r\n    ApplicationId appId = app.getApplicationId();\r\n    SubClusterId homeSubCluster = getApp(appId);\r\n    if (homeSubCluster == null) {\r\n        String errMsg = \"Application \" + appId + \" does not exist\";\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    SubClusterId newSubClusterId = request.getApplicationHomeSubCluster().getHomeSubCluster();\r\n    putApp(appId, newSubClusterId, true);\r\n    return UpdateApplicationHomeSubClusterResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "GetApplicationHomeSubClusterResponse getApplicationHomeSubCluster(GetApplicationHomeSubClusterRequest request) throws YarnException\n{\r\n    FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    ApplicationId appId = request.getApplicationId();\r\n    SubClusterId homeSubCluster = getApp(appId);\r\n    if (homeSubCluster == null) {\r\n        String errMsg = \"Application \" + appId + \" does not exist\";\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    return GetApplicationHomeSubClusterResponse.newInstance(ApplicationHomeSubCluster.newInstance(appId, homeSubCluster));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getApplicationsHomeSubCluster",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "GetApplicationsHomeSubClusterResponse getApplicationsHomeSubCluster(GetApplicationsHomeSubClusterRequest request) throws YarnException\n{\r\n    List<ApplicationHomeSubCluster> result = new ArrayList<>();\r\n    try {\r\n        for (String child : zkManager.getChildren(appsZNode)) {\r\n            ApplicationId appId = ApplicationId.fromString(child);\r\n            SubClusterId homeSubCluster = getApp(appId);\r\n            ApplicationHomeSubCluster app = ApplicationHomeSubCluster.newInstance(appId, homeSubCluster);\r\n            result.add(app);\r\n        }\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot get apps: \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    return GetApplicationsHomeSubClusterResponse.newInstance(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "deleteApplicationHomeSubCluster",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "DeleteApplicationHomeSubClusterResponse deleteApplicationHomeSubCluster(DeleteApplicationHomeSubClusterRequest request) throws YarnException\n{\r\n    FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    ApplicationId appId = request.getApplicationId();\r\n    String appZNode = getNodePath(appsZNode, appId.toString());\r\n    boolean exists = false;\r\n    try {\r\n        exists = zkManager.exists(appZNode);\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot check app: \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    if (!exists) {\r\n        String errMsg = \"Application \" + appId + \" does not exist\";\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    try {\r\n        zkManager.delete(appZNode);\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot delete app: \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    return DeleteApplicationHomeSubClusterResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "registerSubCluster",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "SubClusterRegisterResponse registerSubCluster(SubClusterRegisterRequest request) throws YarnException\n{\r\n    FederationMembershipStateStoreInputValidator.validate(request);\r\n    SubClusterInfo subClusterInfo = request.getSubClusterInfo();\r\n    SubClusterId subclusterId = subClusterInfo.getSubClusterId();\r\n    long currentTime = getCurrentTime();\r\n    subClusterInfo.setLastHeartBeat(currentTime);\r\n    try {\r\n        putSubclusterInfo(subclusterId, subClusterInfo, true);\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot register subcluster: \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    return SubClusterRegisterResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "deregisterSubCluster",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "SubClusterDeregisterResponse deregisterSubCluster(SubClusterDeregisterRequest request) throws YarnException\n{\r\n    FederationMembershipStateStoreInputValidator.validate(request);\r\n    SubClusterId subClusterId = request.getSubClusterId();\r\n    SubClusterState state = request.getState();\r\n    SubClusterInfo subClusterInfo = getSubclusterInfo(subClusterId);\r\n    if (subClusterInfo == null) {\r\n        String errMsg = \"SubCluster \" + subClusterId + \" not found\";\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    } else {\r\n        subClusterInfo.setState(state);\r\n        putSubclusterInfo(subClusterId, subClusterInfo, true);\r\n    }\r\n    return SubClusterDeregisterResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "subClusterHeartbeat",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "SubClusterHeartbeatResponse subClusterHeartbeat(SubClusterHeartbeatRequest request) throws YarnException\n{\r\n    FederationMembershipStateStoreInputValidator.validate(request);\r\n    SubClusterId subClusterId = request.getSubClusterId();\r\n    SubClusterInfo subClusterInfo = getSubclusterInfo(subClusterId);\r\n    if (subClusterInfo == null) {\r\n        String errMsg = \"SubCluster \" + subClusterId + \" does not exist; cannot heartbeat\";\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    long currentTime = getCurrentTime();\r\n    subClusterInfo.setLastHeartBeat(currentTime);\r\n    subClusterInfo.setState(request.getState());\r\n    subClusterInfo.setCapability(request.getCapability());\r\n    putSubclusterInfo(subClusterId, subClusterInfo, true);\r\n    return SubClusterHeartbeatResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getSubCluster",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "GetSubClusterInfoResponse getSubCluster(GetSubClusterInfoRequest request) throws YarnException\n{\r\n    FederationMembershipStateStoreInputValidator.validate(request);\r\n    SubClusterId subClusterId = request.getSubClusterId();\r\n    SubClusterInfo subClusterInfo = null;\r\n    try {\r\n        subClusterInfo = getSubclusterInfo(subClusterId);\r\n        if (subClusterInfo == null) {\r\n            LOG.warn(\"The queried SubCluster: {} does not exist.\", subClusterId);\r\n            return null;\r\n        }\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot get subcluster: \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    return GetSubClusterInfoResponse.newInstance(subClusterInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getSubClusters",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "GetSubClustersInfoResponse getSubClusters(GetSubClustersInfoRequest request) throws YarnException\n{\r\n    List<SubClusterInfo> result = new ArrayList<>();\r\n    try {\r\n        for (String child : zkManager.getChildren(membershipZNode)) {\r\n            SubClusterId subClusterId = SubClusterId.newInstance(child);\r\n            SubClusterInfo info = getSubclusterInfo(subClusterId);\r\n            if (!request.getFilterInactiveSubClusters() || info.getState().isActive()) {\r\n                result.add(info);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot get subclusters: \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    return GetSubClustersInfoResponse.newInstance(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getPolicyConfiguration",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "GetSubClusterPolicyConfigurationResponse getPolicyConfiguration(GetSubClusterPolicyConfigurationRequest request) throws YarnException\n{\r\n    FederationPolicyStoreInputValidator.validate(request);\r\n    String queue = request.getQueue();\r\n    SubClusterPolicyConfiguration policy = null;\r\n    try {\r\n        policy = getPolicy(queue);\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot get policy: \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    if (policy == null) {\r\n        LOG.warn(\"Policy for queue: {} does not exist.\", queue);\r\n        return null;\r\n    }\r\n    return GetSubClusterPolicyConfigurationResponse.newInstance(policy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "setPolicyConfiguration",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "SetSubClusterPolicyConfigurationResponse setPolicyConfiguration(SetSubClusterPolicyConfigurationRequest request) throws YarnException\n{\r\n    FederationPolicyStoreInputValidator.validate(request);\r\n    SubClusterPolicyConfiguration policy = request.getPolicyConfiguration();\r\n    try {\r\n        String queue = policy.getQueue();\r\n        putPolicy(queue, policy, true);\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot set policy: \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    return SetSubClusterPolicyConfigurationResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getPoliciesConfigurations",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "GetSubClusterPoliciesConfigurationsResponse getPoliciesConfigurations(GetSubClusterPoliciesConfigurationsRequest request) throws YarnException\n{\r\n    List<SubClusterPolicyConfiguration> result = new ArrayList<>();\r\n    try {\r\n        for (String child : zkManager.getChildren(policiesZNode)) {\r\n            SubClusterPolicyConfiguration policy = getPolicy(child);\r\n            if (policy == null) {\r\n                LOG.warn(\"Policy for queue: {} does not exist.\", child);\r\n                continue;\r\n            }\r\n            result.add(policy);\r\n        }\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot get policies: \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    return GetSubClusterPoliciesConfigurationsResponse.newInstance(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getCurrentVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Version getCurrentVersion()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "loadVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Version loadVersion()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getApp",
  "errType" : [ "InvalidProtocolBufferException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SubClusterId getApp(final ApplicationId appId) throws YarnException\n{\r\n    String appZNode = getNodePath(appsZNode, appId.toString());\r\n    SubClusterId subClusterId = null;\r\n    byte[] data = get(appZNode);\r\n    if (data != null) {\r\n        try {\r\n            subClusterId = new SubClusterIdPBImpl(SubClusterIdProto.parseFrom(data));\r\n        } catch (InvalidProtocolBufferException e) {\r\n            String errMsg = \"Cannot parse application at \" + appZNode;\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n    }\r\n    return subClusterId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "putApp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void putApp(final ApplicationId appId, final SubClusterId subClusterId, boolean update) throws YarnException\n{\r\n    String appZNode = getNodePath(appsZNode, appId.toString());\r\n    SubClusterIdProto proto = ((SubClusterIdPBImpl) subClusterId).getProto();\r\n    byte[] data = proto.toByteArray();\r\n    put(appZNode, data, update);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getSubclusterInfo",
  "errType" : [ "InvalidProtocolBufferException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SubClusterInfo getSubclusterInfo(final SubClusterId subclusterId) throws YarnException\n{\r\n    String memberZNode = getNodePath(membershipZNode, subclusterId.toString());\r\n    SubClusterInfo policy = null;\r\n    byte[] data = get(memberZNode);\r\n    if (data != null) {\r\n        try {\r\n            policy = new SubClusterInfoPBImpl(SubClusterInfoProto.parseFrom(data));\r\n        } catch (InvalidProtocolBufferException e) {\r\n            String errMsg = \"Cannot parse subcluster info at \" + memberZNode;\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n    }\r\n    return policy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "putSubclusterInfo",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void putSubclusterInfo(final SubClusterId subclusterId, final SubClusterInfo subClusterInfo, final boolean update) throws YarnException\n{\r\n    String memberZNode = getNodePath(membershipZNode, subclusterId.toString());\r\n    SubClusterInfoProto proto = ((SubClusterInfoPBImpl) subClusterInfo).getProto();\r\n    byte[] data = proto.toByteArray();\r\n    put(memberZNode, data, update);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getPolicy",
  "errType" : [ "InvalidProtocolBufferException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SubClusterPolicyConfiguration getPolicy(final String queue) throws YarnException\n{\r\n    String policyZNode = getNodePath(policiesZNode, queue);\r\n    SubClusterPolicyConfiguration policy = null;\r\n    byte[] data = get(policyZNode);\r\n    if (data != null) {\r\n        try {\r\n            policy = new SubClusterPolicyConfigurationPBImpl(SubClusterPolicyConfigurationProto.parseFrom(data));\r\n        } catch (InvalidProtocolBufferException e) {\r\n            String errMsg = \"Cannot parse policy at \" + policyZNode;\r\n            FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n        }\r\n    }\r\n    return policy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "putPolicy",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void putPolicy(final String queue, final SubClusterPolicyConfiguration policy, boolean update) throws YarnException\n{\r\n    String policyZNode = getNodePath(policiesZNode, queue);\r\n    SubClusterPolicyConfigurationProto proto = ((SubClusterPolicyConfigurationPBImpl) policy).getProto();\r\n    byte[] data = proto.toByteArray();\r\n    put(policyZNode, data, update);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "get",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "byte[] get(String znode) throws YarnException\n{\r\n    boolean exists = false;\r\n    try {\r\n        exists = zkManager.exists(znode);\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot find znode \" + znode;\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    if (!exists) {\r\n        LOG.error(\"{} does not exist\", znode);\r\n        return null;\r\n    }\r\n    byte[] data = null;\r\n    try {\r\n        data = zkManager.getData(znode);\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot get data from znode \" + znode + \": \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    return data;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "put",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void put(String znode, byte[] data, boolean update) throws YarnException\n{\r\n    boolean created = false;\r\n    try {\r\n        created = zkManager.create(znode);\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot create znode \" + znode + \": \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    if (!created) {\r\n        LOG.debug(\"{} not created\", znode);\r\n        if (!update) {\r\n            LOG.info(\"{} already existed and we are not updating\", znode);\r\n            return;\r\n        }\r\n    }\r\n    try {\r\n        zkManager.setData(znode, data, -1);\r\n    } catch (Exception e) {\r\n        String errMsg = \"Cannot write data into znode \" + znode + \": \" + e.getMessage();\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getCurrentTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getCurrentTime()\n{\r\n    Calendar cal = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\"));\r\n    return cal.getTimeInMillis();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SubClusterPolicyConfiguration newInstance(String queue, String policyType, ByteBuffer policyParams)\n{\r\n    SubClusterPolicyConfiguration policy = Records.newRecord(SubClusterPolicyConfiguration.class);\r\n    policy.setQueue(queue);\r\n    policy.setType(policyType);\r\n    policy.setParams(policyParams);\r\n    return policy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SubClusterPolicyConfiguration newInstance(SubClusterPolicyConfiguration conf)\n{\r\n    SubClusterPolicyConfiguration policy = Records.newRecord(SubClusterPolicyConfiguration.class);\r\n    policy.setQueue(conf.getQueue());\r\n    policy.setType(conf.getType());\r\n    policy.setParams(conf.getParams());\r\n    return policy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getQueue()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setQueue(String queueName)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getType()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setType(String policyType)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getParams",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ByteBuffer getParams()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setParams",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setParams(ByteBuffer policyParams)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    return 31 * getParams().hashCode() + getType().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    SubClusterPolicyConfiguration other = (SubClusterPolicyConfiguration) obj;\r\n    if (!this.getType().equals(other.getType())) {\r\n        return false;\r\n    }\r\n    if (!this.getParams().equals(other.getParams())) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(getType()).append(\" : \").append(getParams());\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationsHomeSubClusterResponse newInstance(List<ApplicationHomeSubCluster> appsHomeSubClusters)\n{\r\n    GetApplicationsHomeSubClusterResponse mapResponse = Records.newRecord(GetApplicationsHomeSubClusterResponse.class);\r\n    mapResponse.setAppsHomeSubClusters(appsHomeSubClusters);\r\n    return mapResponse;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getAppsHomeSubClusters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationHomeSubCluster> getAppsHomeSubClusters()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setAppsHomeSubClusters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAppsHomeSubClusters(List<ApplicationHomeSubCluster> appsHomeSubClusters)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeHealthStatusProto getProto()\n{\r\n    mergeLocalToProto();\r\n    this.proto = this.viaProto ? this.proto : this.builder.build();\r\n    this.viaProto = true;\r\n    return this.proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (this.viaProto)\r\n        maybeInitBuilder();\r\n    this.proto = this.builder.build();\r\n    this.viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (this.viaProto || this.builder == null) {\r\n        this.builder = NodeHealthStatusProto.newBuilder(this.proto);\r\n    }\r\n    this.viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getIsNodeHealthy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getIsNodeHealthy()\n{\r\n    NodeHealthStatusProtoOrBuilder p = this.viaProto ? this.proto : this.builder;\r\n    return p.getIsNodeHealthy();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setIsNodeHealthy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setIsNodeHealthy(boolean isNodeHealthy)\n{\r\n    maybeInitBuilder();\r\n    this.builder.setIsNodeHealthy(isNodeHealthy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getHealthReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getHealthReport()\n{\r\n    NodeHealthStatusProtoOrBuilder p = this.viaProto ? this.proto : this.builder;\r\n    if (!p.hasHealthReport()) {\r\n        return null;\r\n    }\r\n    return (p.getHealthReport());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setHealthReport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHealthReport(String healthReport)\n{\r\n    maybeInitBuilder();\r\n    if (healthReport == null) {\r\n        this.builder.clearHealthReport();\r\n        return;\r\n    }\r\n    this.builder.setHealthReport((healthReport));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getLastHealthReportTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getLastHealthReportTime()\n{\r\n    NodeHealthStatusProtoOrBuilder p = this.viaProto ? this.proto : this.builder;\r\n    return (p.getLastHealthReportTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setLastHealthReportTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLastHealthReportTime(long lastHealthReport)\n{\r\n    maybeInitBuilder();\r\n    this.builder.setLastHealthReportTime((lastHealthReport));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validate(SubClusterRegisterRequest request) throws FederationStateStoreInvalidInputException\n{\r\n    if (request == null) {\r\n        String message = \"Missing SubClusterRegister Request.\" + \" Please try again by specifying a\" + \" SubCluster Register Information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkSubClusterInfo(request.getSubClusterInfo());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void validate(SubClusterDeregisterRequest request) throws FederationStateStoreInvalidInputException\n{\r\n    if (request == null) {\r\n        String message = \"Missing SubClusterDeregister Request.\" + \" Please try again by specifying a\" + \" SubCluster Deregister Information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkSubClusterId(request.getSubClusterId());\r\n    checkSubClusterState(request.getState());\r\n    if (!request.getState().isFinal()) {\r\n        String message = \"Invalid non-final state: \" + request.getState();\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void validate(SubClusterHeartbeatRequest request) throws FederationStateStoreInvalidInputException\n{\r\n    if (request == null) {\r\n        String message = \"Missing SubClusterHeartbeat Request.\" + \" Please try again by specifying a\" + \" SubCluster Heartbeat Information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkSubClusterId(request.getSubClusterId());\r\n    checkTimestamp(request.getLastHeartBeat());\r\n    checkCapability(request.getCapability());\r\n    checkSubClusterState(request.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validate(GetSubClusterInfoRequest request) throws FederationStateStoreInvalidInputException\n{\r\n    if (request == null) {\r\n        String message = \"Missing GetSubClusterInfo Request.\" + \" Please try again by specifying a Get SubCluster information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkSubClusterId(request.getSubClusterId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "checkSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void checkSubClusterInfo(SubClusterInfo subClusterInfo) throws FederationStateStoreInvalidInputException\n{\r\n    if (subClusterInfo == null) {\r\n        String message = \"Missing SubCluster Information.\" + \" Please try again by specifying SubCluster Information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkSubClusterId(subClusterInfo.getSubClusterId());\r\n    checkAddress(subClusterInfo.getAMRMServiceAddress());\r\n    checkAddress(subClusterInfo.getClientRMServiceAddress());\r\n    checkAddress(subClusterInfo.getRMAdminServiceAddress());\r\n    checkAddress(subClusterInfo.getRMWebServiceAddress());\r\n    checkTimestamp(subClusterInfo.getLastHeartBeat());\r\n    checkTimestamp(subClusterInfo.getLastStartTime());\r\n    checkSubClusterState(subClusterInfo.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "checkTimestamp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void checkTimestamp(long timestamp) throws FederationStateStoreInvalidInputException\n{\r\n    if (timestamp < 0) {\r\n        String message = \"Invalid timestamp information.\" + \" Please try again by specifying valid Timestamp Information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "checkCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void checkCapability(String capability) throws FederationStateStoreInvalidInputException\n{\r\n    if (capability == null || capability.isEmpty()) {\r\n        String message = \"Invalid capability information.\" + \" Please try again by specifying valid Capability Information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "checkSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void checkSubClusterId(SubClusterId subClusterId) throws FederationStateStoreInvalidInputException\n{\r\n    if (subClusterId == null) {\r\n        String message = \"Missing SubCluster Id information.\" + \" Please try again by specifying Subcluster Id information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    if (subClusterId.getId().isEmpty()) {\r\n        String message = \"Invalid SubCluster Id information.\" + \" Please try again by specifying valid Subcluster Id.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "checkAddress",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void checkAddress(String address) throws FederationStateStoreInvalidInputException\n{\r\n    if (address == null || address.isEmpty()) {\r\n        String message = \"Missing SubCluster Endpoint information.\" + \" Please try again by specifying SubCluster Endpoint information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    boolean hasScheme = address.contains(\"://\");\r\n    URI uri = null;\r\n    try {\r\n        uri = hasScheme ? URI.create(address) : URI.create(\"dummyscheme://\" + address);\r\n    } catch (IllegalArgumentException e) {\r\n        String message = \"The provided SubCluster Endpoint does not contain a\" + \" valid host:port authority: \" + address;\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    String host = uri.getHost();\r\n    int port = uri.getPort();\r\n    String path = uri.getPath();\r\n    if ((host == null) || (port < 0) || (!hasScheme && path != null && !path.isEmpty())) {\r\n        String message = \"The provided SubCluster Endpoint does not contain a\" + \" valid host:port authority: \" + address;\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "checkSubClusterState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void checkSubClusterState(SubClusterState state) throws FederationStateStoreInvalidInputException\n{\r\n    if (state == null) {\r\n        String message = \"Missing SubCluster State information.\" + \" Please try again by specifying SubCluster State information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getAllApplications",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<String> getAllApplications()\n{\r\n    List<String> applications = null;\r\n    try {\r\n        applications = listDirRegistry(this.registry, this.user, getRegistryKey(null, null), false);\r\n    } catch (YarnException e) {\r\n        LOG.warn(\"Unexpected exception from listDirRegistry\", e);\r\n    }\r\n    if (applications == null) {\r\n        return new ArrayList<>();\r\n    }\r\n    return applications;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "cleanAllApplications",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cleanAllApplications()\n{\r\n    try {\r\n        removeKeyRegistry(this.registry, this.user, getRegistryKey(null, null), true, false);\r\n    } catch (YarnException e) {\r\n        LOG.warn(\"Unexpected exception from removeKeyRegistry\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "writeAMRMTokenForUAM",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "boolean writeAMRMTokenForUAM(ApplicationId appId, String subClusterId, Token<AMRMTokenIdentifier> token)\n{\r\n    Map<String, Token<AMRMTokenIdentifier>> subClusterTokenMap = this.appSubClusterTokenMap.get(appId);\r\n    if (subClusterTokenMap == null) {\r\n        subClusterTokenMap = new ConcurrentHashMap<>();\r\n        this.appSubClusterTokenMap.put(appId, subClusterTokenMap);\r\n    }\r\n    boolean update = !token.equals(subClusterTokenMap.get(subClusterId));\r\n    if (!update) {\r\n        LOG.debug(\"Same amrmToken received from {}, skip writing registry for {}\", subClusterId, appId);\r\n        return update;\r\n    }\r\n    LOG.info(\"Writing/Updating amrmToken for {} to registry for {}\", subClusterId, appId);\r\n    try {\r\n        writeRegistry(this.registry, this.user, getRegistryKey(appId, subClusterId), token.encodeToUrlString(), true);\r\n        subClusterTokenMap.put(subClusterId, token);\r\n    } catch (YarnException | IOException e) {\r\n        LOG.error(\"Failed writing AMRMToken to registry for subcluster \" + subClusterId, e);\r\n    }\r\n    return update;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "loadStateFromRegistry",
  "errType" : [ "YarnException", "Exception" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Map<String, Token<AMRMTokenIdentifier>> loadStateFromRegistry(ApplicationId appId)\n{\r\n    Map<String, Token<AMRMTokenIdentifier>> retMap = new HashMap<>();\r\n    List<String> subclusters = null;\r\n    try {\r\n        subclusters = listDirRegistry(this.registry, this.user, getRegistryKey(appId, null), false);\r\n    } catch (YarnException e) {\r\n        LOG.warn(\"Unexpected exception from listDirRegistry\", e);\r\n    }\r\n    if (subclusters == null) {\r\n        LOG.info(\"Application {} does not exist in registry\", appId);\r\n        return retMap;\r\n    }\r\n    for (String scId : subclusters) {\r\n        LOG.info(\"Reading amrmToken for subcluster {} for {}\", scId, appId);\r\n        String key = getRegistryKey(appId, scId);\r\n        try {\r\n            String tokenString = readRegistry(this.registry, this.user, key, true);\r\n            if (tokenString == null) {\r\n                throw new YarnException(\"Null string from readRegistry key \" + key);\r\n            }\r\n            Token<AMRMTokenIdentifier> amrmToken = new Token<>();\r\n            amrmToken.decodeFromUrlString(tokenString);\r\n            amrmToken.setService(new Text());\r\n            retMap.put(scId, amrmToken);\r\n        } catch (Exception e) {\r\n            LOG.error(\"Failed reading registry key \" + key + \", skipping subcluster \" + scId, e);\r\n        }\r\n    }\r\n    this.appSubClusterTokenMap.put(appId, new ConcurrentHashMap<>(retMap));\r\n    return retMap;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "removeAppFromRegistry",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void removeAppFromRegistry(ApplicationId appId)\n{\r\n    Map<String, Token<AMRMTokenIdentifier>> subClusterTokenMap = this.appSubClusterTokenMap.get(appId);\r\n    LOG.info(\"Removing all registry entries for {}\", appId);\r\n    if (subClusterTokenMap == null || subClusterTokenMap.size() == 0) {\r\n        return;\r\n    }\r\n    String key = getRegistryKey(appId, null);\r\n    try {\r\n        removeKeyRegistry(this.registry, this.user, key, true, true);\r\n        subClusterTokenMap.clear();\r\n    } catch (YarnException e) {\r\n        LOG.error(\"Failed removing registry directory key \" + key, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getRegistryKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRegistryKey(ApplicationId appId, String fileName)\n{\r\n    if (appId == null) {\r\n        return this.registryBaseDir;\r\n    }\r\n    if (fileName == null) {\r\n        return this.registryBaseDir + appId.toString();\r\n    }\r\n    return this.registryBaseDir + appId.toString() + \"/\" + fileName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "readRegistry",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String readRegistry(final RegistryOperations registryImpl, UserGroupInformation ugi, final String key, final boolean throwIfFails) throws YarnException\n{\r\n    String result = ugi.doAs(new PrivilegedAction<String>() {\r\n\r\n        @Override\r\n        public String run() {\r\n            try {\r\n                ServiceRecord value = registryImpl.resolve(key);\r\n                if (value != null) {\r\n                    return value.description;\r\n                }\r\n            } catch (Throwable e) {\r\n                if (throwIfFails) {\r\n                    LOG.error(\"Registry resolve key \" + key + \" failed\", e);\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    });\r\n    if (result == null && throwIfFails) {\r\n        throw new YarnException(\"Registry resolve key \" + key + \" failed\");\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "removeKeyRegistry",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeKeyRegistry(final RegistryOperations registryImpl, UserGroupInformation ugi, final String key, final boolean recursive, final boolean throwIfFails) throws YarnException\n{\r\n    boolean success = ugi.doAs(new PrivilegedAction<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean run() {\r\n            try {\r\n                registryImpl.delete(key, recursive);\r\n                return true;\r\n            } catch (Throwable e) {\r\n                if (throwIfFails) {\r\n                    LOG.error(\"Registry remove key \" + key + \" failed\", e);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n    if (!success && throwIfFails) {\r\n        throw new YarnException(\"Registry remove key \" + key + \" failed\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "writeRegistry",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void writeRegistry(final RegistryOperations registryImpl, UserGroupInformation ugi, final String key, final String value, final boolean throwIfFails) throws YarnException\n{\r\n    final ServiceRecord recordValue = new ServiceRecord();\r\n    recordValue.description = value;\r\n    boolean success = ugi.doAs(new PrivilegedAction<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean run() {\r\n            try {\r\n                registryImpl.bind(key, recordValue, BindFlags.OVERWRITE);\r\n                return true;\r\n            } catch (Throwable e) {\r\n                if (throwIfFails) {\r\n                    LOG.error(\"Registry write key \" + key + \" failed\", e);\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n    if (!success && throwIfFails) {\r\n        throw new YarnException(\"Registry write key \" + key + \" failed\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "listDirRegistry",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> listDirRegistry(final RegistryOperations registryImpl, UserGroupInformation ugi, final String key, final boolean throwIfFails) throws YarnException\n{\r\n    List<String> result = ugi.doAs(new PrivilegedAction<List<String>>() {\r\n\r\n        @Override\r\n        public List<String> run() {\r\n            try {\r\n                return registryImpl.list(key);\r\n            } catch (Throwable e) {\r\n                if (throwIfFails) {\r\n                    LOG.error(\"Registry list key \" + key + \" failed\", e);\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n    });\r\n    if (result == null && throwIfFails) {\r\n        throw new YarnException(\"Registry list key \" + key + \" failed\");\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void validate(WeightedPolicyInfo newPolicyInfo) throws FederationPolicyInitializationException\n{\r\n    super.validate(newPolicyInfo);\r\n    Map<SubClusterIdInfo, Float> newWeights = newPolicyInfo.getAMRMPolicyWeights();\r\n    if (newWeights == null || newWeights.size() < 1) {\r\n        throw new FederationPolicyInitializationException(\"Weight vector cannot be null/empty.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "notifyOfResponse",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void notifyOfResponse(SubClusterId subClusterId, AllocateResponse response) throws YarnException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void validate(FederationPolicyInitializationContext policyContext, String myType) throws FederationPolicyInitializationException\n{\r\n    if (myType == null) {\r\n        throw new FederationPolicyInitializationException(\"The myType parameter\" + \" should not be null.\");\r\n    }\r\n    if (policyContext == null) {\r\n        throw new FederationPolicyInitializationException(\"The FederationPolicyInitializationContext provided is null. Cannot\" + \" reinitalize \" + \"successfully.\");\r\n    }\r\n    if (policyContext.getFederationStateStoreFacade() == null) {\r\n        throw new FederationPolicyInitializationException(\"The FederationStateStoreFacade provided is null. Cannot\" + \" reinitalize successfully.\");\r\n    }\r\n    if (policyContext.getFederationSubclusterResolver() == null) {\r\n        throw new FederationPolicyInitializationException(\"The FederationSubclusterResolver provided is null. Cannot\" + \" reinitalize successfully.\");\r\n    }\r\n    if (policyContext.getSubClusterPolicyConfiguration() == null) {\r\n        throw new FederationPolicyInitializationException(\"The SubClusterPolicyConfiguration provided is null. Cannot \" + \"reinitalize successfully.\");\r\n    }\r\n    String intendedType = policyContext.getSubClusterPolicyConfiguration().getType();\r\n    if (!myType.equals(intendedType)) {\r\n        throw new FederationPolicyInitializationException(\"The FederationPolicyConfiguration carries a type (\" + intendedType + \") different then mine (\" + myType + \"). Cannot reinitialize successfully.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init(Configuration conf)\n{\r\n    membership = new ConcurrentHashMap<SubClusterId, SubClusterInfo>();\r\n    applications = new ConcurrentHashMap<ApplicationId, SubClusterId>();\r\n    policies = new ConcurrentHashMap<String, SubClusterPolicyConfiguration>();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void close()\n{\r\n    membership = null;\r\n    applications = null;\r\n    policies = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "registerSubCluster",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "SubClusterRegisterResponse registerSubCluster(SubClusterRegisterRequest request) throws YarnException\n{\r\n    FederationMembershipStateStoreInputValidator.validate(request);\r\n    SubClusterInfo subClusterInfo = request.getSubClusterInfo();\r\n    long currentTime = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\")).getTimeInMillis();\r\n    SubClusterInfo subClusterInfoToSave = SubClusterInfo.newInstance(subClusterInfo.getSubClusterId(), subClusterInfo.getAMRMServiceAddress(), subClusterInfo.getClientRMServiceAddress(), subClusterInfo.getRMAdminServiceAddress(), subClusterInfo.getRMWebServiceAddress(), currentTime, subClusterInfo.getState(), subClusterInfo.getLastStartTime(), subClusterInfo.getCapability());\r\n    membership.put(subClusterInfo.getSubClusterId(), subClusterInfoToSave);\r\n    return SubClusterRegisterResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "deregisterSubCluster",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "SubClusterDeregisterResponse deregisterSubCluster(SubClusterDeregisterRequest request) throws YarnException\n{\r\n    FederationMembershipStateStoreInputValidator.validate(request);\r\n    SubClusterInfo subClusterInfo = membership.get(request.getSubClusterId());\r\n    if (subClusterInfo == null) {\r\n        String errMsg = \"SubCluster \" + request.getSubClusterId().toString() + \" not found\";\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    } else {\r\n        subClusterInfo.setState(request.getState());\r\n    }\r\n    return SubClusterDeregisterResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "subClusterHeartbeat",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "SubClusterHeartbeatResponse subClusterHeartbeat(SubClusterHeartbeatRequest request) throws YarnException\n{\r\n    FederationMembershipStateStoreInputValidator.validate(request);\r\n    SubClusterId subClusterId = request.getSubClusterId();\r\n    SubClusterInfo subClusterInfo = membership.get(subClusterId);\r\n    if (subClusterInfo == null) {\r\n        String errMsg = \"SubCluster \" + subClusterId.toString() + \" does not exist; cannot heartbeat\";\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    long currentTime = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\")).getTimeInMillis();\r\n    subClusterInfo.setLastHeartBeat(currentTime);\r\n    subClusterInfo.setState(request.getState());\r\n    subClusterInfo.setCapability(request.getCapability());\r\n    return SubClusterHeartbeatResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getSubCluster",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "GetSubClusterInfoResponse getSubCluster(GetSubClusterInfoRequest request) throws YarnException\n{\r\n    FederationMembershipStateStoreInputValidator.validate(request);\r\n    SubClusterId subClusterId = request.getSubClusterId();\r\n    if (!membership.containsKey(subClusterId)) {\r\n        LOG.warn(\"The queried SubCluster: {} does not exist.\", subClusterId);\r\n        return null;\r\n    }\r\n    return GetSubClusterInfoResponse.newInstance(membership.get(subClusterId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getSubClusters",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "GetSubClustersInfoResponse getSubClusters(GetSubClustersInfoRequest request) throws YarnException\n{\r\n    List<SubClusterInfo> result = new ArrayList<SubClusterInfo>();\r\n    for (SubClusterInfo info : membership.values()) {\r\n        if (!request.getFilterInactiveSubClusters() || info.getState().isActive()) {\r\n            result.add(info);\r\n        }\r\n    }\r\n    return GetSubClustersInfoResponse.newInstance(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "addApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "AddApplicationHomeSubClusterResponse addApplicationHomeSubCluster(AddApplicationHomeSubClusterRequest request) throws YarnException\n{\r\n    FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    ApplicationId appId = request.getApplicationHomeSubCluster().getApplicationId();\r\n    if (!applications.containsKey(appId)) {\r\n        applications.put(appId, request.getApplicationHomeSubCluster().getHomeSubCluster());\r\n    }\r\n    return AddApplicationHomeSubClusterResponse.newInstance(applications.get(appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "updateApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "UpdateApplicationHomeSubClusterResponse updateApplicationHomeSubCluster(UpdateApplicationHomeSubClusterRequest request) throws YarnException\n{\r\n    FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    ApplicationId appId = request.getApplicationHomeSubCluster().getApplicationId();\r\n    if (!applications.containsKey(appId)) {\r\n        String errMsg = \"Application \" + appId + \" does not exist\";\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    applications.put(appId, request.getApplicationHomeSubCluster().getHomeSubCluster());\r\n    return UpdateApplicationHomeSubClusterResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "GetApplicationHomeSubClusterResponse getApplicationHomeSubCluster(GetApplicationHomeSubClusterRequest request) throws YarnException\n{\r\n    FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    ApplicationId appId = request.getApplicationId();\r\n    if (!applications.containsKey(appId)) {\r\n        String errMsg = \"Application \" + appId + \" does not exist\";\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    return GetApplicationHomeSubClusterResponse.newInstance(ApplicationHomeSubCluster.newInstance(appId, applications.get(appId)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getApplicationsHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "GetApplicationsHomeSubClusterResponse getApplicationsHomeSubCluster(GetApplicationsHomeSubClusterRequest request) throws YarnException\n{\r\n    List<ApplicationHomeSubCluster> result = new ArrayList<ApplicationHomeSubCluster>();\r\n    for (Entry<ApplicationId, SubClusterId> e : applications.entrySet()) {\r\n        result.add(ApplicationHomeSubCluster.newInstance(e.getKey(), e.getValue()));\r\n    }\r\n    GetApplicationsHomeSubClusterResponse.newInstance(result);\r\n    return GetApplicationsHomeSubClusterResponse.newInstance(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "deleteApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "DeleteApplicationHomeSubClusterResponse deleteApplicationHomeSubCluster(DeleteApplicationHomeSubClusterRequest request) throws YarnException\n{\r\n    FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    ApplicationId appId = request.getApplicationId();\r\n    if (!applications.containsKey(appId)) {\r\n        String errMsg = \"Application \" + appId + \" does not exist\";\r\n        FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\r\n    }\r\n    applications.remove(appId);\r\n    return DeleteApplicationHomeSubClusterResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "GetSubClusterPolicyConfigurationResponse getPolicyConfiguration(GetSubClusterPolicyConfigurationRequest request) throws YarnException\n{\r\n    FederationPolicyStoreInputValidator.validate(request);\r\n    String queue = request.getQueue();\r\n    if (!policies.containsKey(queue)) {\r\n        LOG.warn(\"Policy for queue: {} does not exist.\", queue);\r\n        return null;\r\n    }\r\n    return GetSubClusterPolicyConfigurationResponse.newInstance(policies.get(queue));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "setPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SetSubClusterPolicyConfigurationResponse setPolicyConfiguration(SetSubClusterPolicyConfigurationRequest request) throws YarnException\n{\r\n    FederationPolicyStoreInputValidator.validate(request);\r\n    policies.put(request.getPolicyConfiguration().getQueue(), request.getPolicyConfiguration());\r\n    return SetSubClusterPolicyConfigurationResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getPoliciesConfigurations",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetSubClusterPoliciesConfigurationsResponse getPoliciesConfigurations(GetSubClusterPoliciesConfigurationsRequest request) throws YarnException\n{\r\n    ArrayList<SubClusterPolicyConfiguration> result = new ArrayList<SubClusterPolicyConfiguration>();\r\n    for (SubClusterPolicyConfiguration policy : policies.values()) {\r\n        result.add(policy);\r\n    }\r\n    return GetSubClusterPoliciesConfigurationsResponse.newInstance(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getCurrentVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Version getCurrentVersion()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "loadVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Version loadVersion()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeHeartbeatResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.containersToCleanup != null) {\r\n        addContainersToCleanupToProto();\r\n    }\r\n    if (this.applicationsToCleanup != null) {\r\n        addApplicationsToCleanupToProto();\r\n    }\r\n    if (this.containersToBeRemovedFromNM != null) {\r\n        addContainersToBeRemovedFromNMToProto();\r\n    }\r\n    if (this.containerTokenMasterKey != null) {\r\n        builder.setContainerTokenMasterKey(convertToProtoFormat(this.containerTokenMasterKey));\r\n    }\r\n    if (this.nmTokenMasterKey != null) {\r\n        builder.setNmTokenMasterKey(convertToProtoFormat(this.nmTokenMasterKey));\r\n    }\r\n    if (this.containerQueuingLimit != null) {\r\n        builder.setContainerQueuingLimit(convertToProtoFormat(this.containerQueuingLimit));\r\n    }\r\n    if (this.containersToUpdate != null) {\r\n        addContainersToUpdateToProto();\r\n    }\r\n    if (this.containersToDecrease != null) {\r\n        addContainersToDecreaseToProto();\r\n    }\r\n    if (this.containersToSignal != null) {\r\n        addContainersToSignalToProto();\r\n    }\r\n    if (this.resource != null) {\r\n        builder.setResource(convertToProtoFormat(this.resource));\r\n    }\r\n    if (this.appCollectorsMap != null) {\r\n        addAppCollectorsMapToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addAppCollectorsMapToProto",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void addAppCollectorsMapToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearAppCollectors();\r\n    for (Map.Entry<ApplicationId, AppCollectorData> entry : appCollectorsMap.entrySet()) {\r\n        AppCollectorData data = entry.getValue();\r\n        AppCollectorDataProto.Builder appCollectorDataBuilder = AppCollectorDataProto.newBuilder().setAppId(ProtoUtils.convertToProtoFormat(entry.getKey())).setAppCollectorAddr(data.getCollectorAddr()).setRmIdentifier(data.getRMIdentifier()).setVersion(data.getVersion());\r\n        if (data.getCollectorToken() != null) {\r\n            appCollectorDataBuilder.setAppCollectorToken(convertToProtoFormat(data.getCollectorToken()));\r\n        }\r\n        builder.addAppCollectors(appCollectorDataBuilder);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NodeHeartbeatResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResponseId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getResponseId()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getResponseId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResponseId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResponseId(int responseId)\n{\r\n    maybeInitBuilder();\r\n    builder.setResponseId((responseId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getResource()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.resource != null) {\r\n        return this.resource;\r\n    }\r\n    if (!p.hasResource()) {\r\n        return null;\r\n    }\r\n    this.resource = convertFromProtoFormat(p.getResource());\r\n    return this.resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setResource(Resource resource)\n{\r\n    maybeInitBuilder();\r\n    if (resource == null) {\r\n        builder.clearResource();\r\n    }\r\n    this.resource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MasterKey getContainerTokenMasterKey()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerTokenMasterKey != null) {\r\n        return this.containerTokenMasterKey;\r\n    }\r\n    if (!p.hasContainerTokenMasterKey()) {\r\n        return null;\r\n    }\r\n    this.containerTokenMasterKey = convertFromProtoFormat(p.getContainerTokenMasterKey());\r\n    return this.containerTokenMasterKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerTokenMasterKey(MasterKey masterKey)\n{\r\n    maybeInitBuilder();\r\n    if (masterKey == null)\r\n        builder.clearContainerTokenMasterKey();\r\n    this.containerTokenMasterKey = masterKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MasterKey getNMTokenMasterKey()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.nmTokenMasterKey != null) {\r\n        return this.nmTokenMasterKey;\r\n    }\r\n    if (!p.hasNmTokenMasterKey()) {\r\n        return null;\r\n    }\r\n    this.nmTokenMasterKey = convertFromProtoFormat(p.getNmTokenMasterKey());\r\n    return this.nmTokenMasterKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNMTokenMasterKey(MasterKey masterKey)\n{\r\n    maybeInitBuilder();\r\n    if (masterKey == null)\r\n        builder.clearNmTokenMasterKey();\r\n    this.nmTokenMasterKey = masterKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainerQueuingLimit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerQueuingLimit getContainerQueuingLimit()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.containerQueuingLimit != null) {\r\n        return this.containerQueuingLimit;\r\n    }\r\n    if (!p.hasContainerQueuingLimit()) {\r\n        return null;\r\n    }\r\n    this.containerQueuingLimit = convertFromProtoFormat(p.getContainerQueuingLimit());\r\n    return this.containerQueuingLimit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setContainerQueuingLimit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setContainerQueuingLimit(ContainerQueuingLimit containerQueuingLimit)\n{\r\n    maybeInitBuilder();\r\n    if (containerQueuingLimit == null) {\r\n        builder.clearContainerQueuingLimit();\r\n    }\r\n    this.containerQueuingLimit = containerQueuingLimit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeAction",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeAction getNodeAction()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeAction()) {\r\n        return null;\r\n    }\r\n    return (convertFromProtoFormat(p.getNodeAction()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeAction",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setNodeAction(NodeAction nodeAction)\n{\r\n    maybeInitBuilder();\r\n    if (nodeAction == null) {\r\n        builder.clearNodeAction();\r\n        return;\r\n    }\r\n    builder.setNodeAction(convertToProtoFormat(nodeAction));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getDiagnosticsMessage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDiagnosticsMessage()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDiagnosticsMessage()) {\r\n        return null;\r\n    }\r\n    return p.getDiagnosticsMessage();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setDiagnosticsMessage",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDiagnosticsMessage(String diagnosticsMessage)\n{\r\n    maybeInitBuilder();\r\n    if (diagnosticsMessage == null) {\r\n        builder.clearDiagnosticsMessage();\r\n        return;\r\n    }\r\n    builder.setDiagnosticsMessage((diagnosticsMessage));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainersToCleanup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerId> getContainersToCleanup()\n{\r\n    initContainersToCleanup();\r\n    return this.containersToCleanup;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainersToBeRemovedFromNM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerId> getContainersToBeRemovedFromNM()\n{\r\n    initContainersToBeRemovedFromNM();\r\n    return this.containersToBeRemovedFromNM;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initContainersToCleanup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initContainersToCleanup()\n{\r\n    if (this.containersToCleanup != null) {\r\n        return;\r\n    }\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerIdProto> list = p.getContainersToCleanupList();\r\n    this.containersToCleanup = new ArrayList<ContainerId>();\r\n    for (ContainerIdProto c : list) {\r\n        this.containersToCleanup.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initContainersToBeRemovedFromNM",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initContainersToBeRemovedFromNM()\n{\r\n    if (this.containersToBeRemovedFromNM != null) {\r\n        return;\r\n    }\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerIdProto> list = p.getContainersToBeRemovedFromNmList();\r\n    this.containersToBeRemovedFromNM = new ArrayList<ContainerId>();\r\n    for (ContainerIdProto c : list) {\r\n        this.containersToBeRemovedFromNM.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addAllContainersToCleanup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addAllContainersToCleanup(final List<ContainerId> containersToCleanup)\n{\r\n    if (containersToCleanup == null)\r\n        return;\r\n    initContainersToCleanup();\r\n    this.containersToCleanup.addAll(containersToCleanup);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addContainersToBeRemovedFromNM",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addContainersToBeRemovedFromNM(final List<ContainerId> containers)\n{\r\n    if (containers == null)\r\n        return;\r\n    initContainersToBeRemovedFromNM();\r\n    this.containersToBeRemovedFromNM.addAll(containers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addContainersToCleanupToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addContainersToCleanupToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainersToCleanup();\r\n    if (containersToCleanup == null)\r\n        return;\r\n    Iterable<ContainerIdProto> iterable = new Iterable<ContainerIdProto>() {\r\n\r\n        @Override\r\n        public Iterator<ContainerIdProto> iterator() {\r\n            return new Iterator<ContainerIdProto>() {\r\n\r\n                Iterator<ContainerId> iter = containersToCleanup.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ContainerIdProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllContainersToCleanup(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addContainersToBeRemovedFromNMToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addContainersToBeRemovedFromNMToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainersToBeRemovedFromNm();\r\n    if (containersToBeRemovedFromNM == null)\r\n        return;\r\n    Iterable<ContainerIdProto> iterable = new Iterable<ContainerIdProto>() {\r\n\r\n        @Override\r\n        public Iterator<ContainerIdProto> iterator() {\r\n            return new Iterator<ContainerIdProto>() {\r\n\r\n                Iterator<ContainerId> iter = containersToBeRemovedFromNM.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ContainerIdProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllContainersToBeRemovedFromNm(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationsToCleanup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationId> getApplicationsToCleanup()\n{\r\n    initApplicationsToCleanup();\r\n    return this.applicationsToCleanup;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initApplicationsToCleanup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initApplicationsToCleanup()\n{\r\n    if (this.applicationsToCleanup != null) {\r\n        return;\r\n    }\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ApplicationIdProto> list = p.getApplicationsToCleanupList();\r\n    this.applicationsToCleanup = new ArrayList<ApplicationId>();\r\n    for (ApplicationIdProto c : list) {\r\n        this.applicationsToCleanup.add(ProtoUtils.convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addAllApplicationsToCleanup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addAllApplicationsToCleanup(final List<ApplicationId> applicationsToCleanup)\n{\r\n    if (applicationsToCleanup == null)\r\n        return;\r\n    initApplicationsToCleanup();\r\n    this.applicationsToCleanup.addAll(applicationsToCleanup);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addApplicationsToCleanupToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addApplicationsToCleanupToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearApplicationsToCleanup();\r\n    if (applicationsToCleanup == null)\r\n        return;\r\n    Iterable<ApplicationIdProto> iterable = new Iterable<ApplicationIdProto>() {\r\n\r\n        @Override\r\n        public Iterator<ApplicationIdProto> iterator() {\r\n            return new Iterator<ApplicationIdProto>() {\r\n\r\n                Iterator<ApplicationId> iter = applicationsToCleanup.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ApplicationIdProto next() {\r\n                    return ProtoUtils.convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllApplicationsToCleanup(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initContainersToUpdate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initContainersToUpdate()\n{\r\n    if (this.containersToUpdate != null) {\r\n        return;\r\n    }\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerProto> list = p.getContainersToUpdateList();\r\n    this.containersToUpdate = new ArrayList<>();\r\n    for (ContainerProto c : list) {\r\n        this.containersToUpdate.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainersToUpdate",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Container> getContainersToUpdate()\n{\r\n    initContainersToUpdate();\r\n    return this.containersToUpdate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addAllContainersToUpdate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addAllContainersToUpdate(final Collection<Container> containersToBeUpdated)\n{\r\n    if (containersToBeUpdated == null) {\r\n        return;\r\n    }\r\n    initContainersToUpdate();\r\n    this.containersToUpdate.addAll(containersToBeUpdated);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addContainersToUpdateToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addContainersToUpdateToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainersToUpdate();\r\n    if (this.containersToUpdate == null) {\r\n        return;\r\n    }\r\n    Iterable<ContainerProto> iterable = new Iterable<ContainerProto>() {\r\n\r\n        @Override\r\n        public Iterator<ContainerProto> iterator() {\r\n            return new Iterator<ContainerProto>() {\r\n\r\n                private Iterator<Container> iter = containersToUpdate.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ContainerProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllContainersToUpdate(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initContainersToDecrease",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initContainersToDecrease()\n{\r\n    if (this.containersToDecrease != null) {\r\n        return;\r\n    }\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ContainerProto> list = p.getContainersToDecreaseList();\r\n    this.containersToDecrease = new ArrayList<>();\r\n    for (ContainerProto c : list) {\r\n        this.containersToDecrease.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainersToDecrease",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Container> getContainersToDecrease()\n{\r\n    initContainersToDecrease();\r\n    return this.containersToDecrease;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addAllContainersToDecrease",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addAllContainersToDecrease(final Collection<Container> containersToDecrease)\n{\r\n    if (containersToDecrease == null) {\r\n        return;\r\n    }\r\n    initContainersToDecrease();\r\n    this.containersToDecrease.addAll(containersToDecrease);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addContainersToDecreaseToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addContainersToDecreaseToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainersToDecrease();\r\n    if (this.containersToDecrease == null) {\r\n        return;\r\n    }\r\n    Iterable<ContainerProto> iterable = new Iterable<ContainerProto>() {\r\n\r\n        @Override\r\n        public Iterator<ContainerProto> iterator() {\r\n            return new Iterator<ContainerProto>() {\r\n\r\n                private Iterator<Container> iter = containersToDecrease.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ContainerProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllContainersToDecrease(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAppCollectors",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ApplicationId, AppCollectorData> getAppCollectors()\n{\r\n    if (this.appCollectorsMap != null) {\r\n        return this.appCollectorsMap;\r\n    }\r\n    initAppCollectorsMap();\r\n    return appCollectorsMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initAppCollectorsMap",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void initAppCollectorsMap()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<AppCollectorDataProto> list = p.getAppCollectorsList();\r\n    if (!list.isEmpty()) {\r\n        this.appCollectorsMap = new HashMap<>();\r\n        for (AppCollectorDataProto c : list) {\r\n            ApplicationId appId = ProtoUtils.convertFromProtoFormat(c.getAppId());\r\n            Token collectorToken = null;\r\n            if (c.hasAppCollectorToken()) {\r\n                collectorToken = convertFromProtoFormat(c.getAppCollectorToken());\r\n            }\r\n            AppCollectorData data = AppCollectorData.newInstance(appId, c.getAppCollectorAddr(), c.getRmIdentifier(), c.getVersion(), collectorToken);\r\n            this.appCollectorsMap.put(appId, data);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setSystemCredentialsForApps",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setSystemCredentialsForApps(Collection<SystemCredentialsForAppsProto> systemCredentialsForAppsProto)\n{\r\n    maybeInitBuilder();\r\n    builder.clearSystemCredentialsForApps();\r\n    if (systemCredentialsForAppsProto != null) {\r\n        builder.addAllSystemCredentialsForApps(systemCredentialsForAppsProto);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getSystemCredentialsForApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<SystemCredentialsForAppsProto> getSystemCredentialsForApps()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getSystemCredentialsForAppsList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAppCollectors",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAppCollectors(Map<ApplicationId, AppCollectorData> appCollectors)\n{\r\n    if (appCollectors == null || appCollectors.isEmpty()) {\r\n        return;\r\n    }\r\n    maybeInitBuilder();\r\n    this.appCollectorsMap = new HashMap<>();\r\n    this.appCollectorsMap.putAll(appCollectors);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNextHeartBeatInterval",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNextHeartBeatInterval()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getNextHeartBeatInterval());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNextHeartBeatInterval",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNextHeartBeatInterval(long nextHeartBeatInterval)\n{\r\n    maybeInitBuilder();\r\n    builder.setNextHeartBeatInterval(nextHeartBeatInterval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerIdPBImpl convertFromProtoFormat(ContainerIdProto p)\n{\r\n    return new ContainerIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerIdProto convertToProtoFormat(ContainerId t)\n{\r\n    return ((ContainerIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourcePBImpl convertFromProtoFormat(ResourceProto p)\n{\r\n    return new ResourcePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceProto convertToProtoFormat(Resource t)\n{\r\n    return ProtoUtils.convertToProtoFormat(t);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAction convertFromProtoFormat(NodeActionProto p)\n{\r\n    return NodeAction.valueOf(p.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeActionProto convertToProtoFormat(NodeAction t)\n{\r\n    return NodeActionProto.valueOf(t.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MasterKeyPBImpl convertFromProtoFormat(MasterKeyProto p)\n{\r\n    return new MasterKeyPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MasterKeyProto convertToProtoFormat(MasterKey t)\n{\r\n    return ((MasterKeyPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerPBImpl convertFromProtoFormat(ContainerProto p)\n{\r\n    return new ContainerPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerProto convertToProtoFormat(Container t)\n{\r\n    return ((ContainerPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAreNodeLabelsAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getAreNodeLabelsAcceptedByRM()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = this.viaProto ? this.proto : this.builder;\r\n    return p.getAreNodeLabelsAcceptedByRM();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAreNodeLabelsAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAreNodeLabelsAcceptedByRM(boolean areNodeLabelsAcceptedByRM)\n{\r\n    maybeInitBuilder();\r\n    this.builder.setAreNodeLabelsAcceptedByRM(areNodeLabelsAcceptedByRM);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAreNodeAttributesAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getAreNodeAttributesAcceptedByRM()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = this.viaProto ? this.proto : this.builder;\r\n    return p.getAreNodeAttributesAcceptedByRM();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAreNodeAttributesAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAreNodeAttributesAcceptedByRM(boolean areNodeAttributesAcceptedByRM)\n{\r\n    maybeInitBuilder();\r\n    this.builder.setAreNodeAttributesAcceptedByRM(areNodeAttributesAcceptedByRM);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getContainersToSignalList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<SignalContainerRequest> getContainersToSignalList()\n{\r\n    initContainersToSignal();\r\n    return this.containersToSignal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initContainersToSignal",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initContainersToSignal()\n{\r\n    if (this.containersToSignal != null) {\r\n        return;\r\n    }\r\n    NodeHeartbeatResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<SignalContainerRequestProto> list = p.getContainersToSignalList();\r\n    this.containersToSignal = new ArrayList<SignalContainerRequest>();\r\n    for (SignalContainerRequestProto c : list) {\r\n        this.containersToSignal.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addAllContainersToSignal",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addAllContainersToSignal(final List<SignalContainerRequest> containersToSignal)\n{\r\n    if (containersToSignal == null)\r\n        return;\r\n    initContainersToSignal();\r\n    this.containersToSignal.addAll(containersToSignal);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addContainersToSignalToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addContainersToSignalToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearContainersToSignal();\r\n    if (containersToSignal == null)\r\n        return;\r\n    Iterable<SignalContainerRequestProto> iterable = new Iterable<SignalContainerRequestProto>() {\r\n\r\n        @Override\r\n        public Iterator<SignalContainerRequestProto> iterator() {\r\n            return new Iterator<SignalContainerRequestProto>() {\r\n\r\n                Iterator<SignalContainerRequest> iter = containersToSignal.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public SignalContainerRequestProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllContainersToSignal(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerQueuingLimit convertFromProtoFormat(ContainerQueuingLimitProto p)\n{\r\n    return new ContainerQueuingLimitPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerQueuingLimitProto convertToProtoFormat(ContainerQueuingLimit c)\n{\r\n    return ((ContainerQueuingLimitPBImpl) c).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SignalContainerRequestPBImpl convertFromProtoFormat(SignalContainerRequestProto p)\n{\r\n    return new SignalContainerRequestPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SignalContainerRequestProto convertToProtoFormat(SignalContainerRequest t)\n{\r\n    return ((SignalContainerRequestPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token t)\n{\r\n    return ((TokenPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenPBImpl convertFromProtoFormat(TokenProto p)\n{\r\n    return new TokenPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setTokenSequenceNo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTokenSequenceNo(long tokenSequenceNo)\n{\r\n    maybeInitBuilder();\r\n    this.builder.setTokenSequenceNo(tokenSequenceNo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getTokenSequenceNo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTokenSequenceNo()\n{\r\n    NodeHeartbeatResponseProtoOrBuilder p = this.viaProto ? this.proto : this.builder;\r\n    return p.getTokenSequenceNo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ApplicationHomeSubCluster newInstance(ApplicationId appId, SubClusterId homeSubCluster)\n{\r\n    ApplicationHomeSubCluster appMapping = Records.newRecord(ApplicationHomeSubCluster.class);\r\n    appMapping.setApplicationId(appId);\r\n    appMapping.setHomeSubCluster(homeSubCluster);\r\n    return appMapping;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId getHomeSubCluster()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHomeSubCluster(SubClusterId homeSubCluster)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    ApplicationHomeSubCluster other = (ApplicationHomeSubCluster) obj;\r\n    if (!this.getApplicationId().equals(other.getApplicationId())) {\r\n        return false;\r\n    }\r\n    return this.getHomeSubCluster().equals(other.getHomeSubCluster());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getApplicationId().hashCode() * 31 + getHomeSubCluster().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    return \"ApplicationHomeSubCluster [getApplicationId()=\" + getApplicationId() + \", getHomeSubCluster()=\" + getHomeSubCluster() + \"]\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "setMaxAllocationsPerAMHeartbeat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMaxAllocationsPerAMHeartbeat(int maxAllocationsPerAMHeartbeat)\n{\r\n    this.maxAllocationsPerAMHeartbeat = maxAllocationsPerAMHeartbeat;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getMaxAllocationsPerAMHeartbeat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getMaxAllocationsPerAMHeartbeat()\n{\r\n    return this.maxAllocationsPerAMHeartbeat;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "allocateContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Container> allocateContainers(ResourceBlacklistRequest blackList, List<ResourceRequest> oppResourceReqs, ApplicationAttemptId applicationAttemptId, OpportunisticContainerContext opportContext, long rmIdentifier, String appSubmitter) throws YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "updateBlacklist",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updateBlacklist(ResourceBlacklistRequest blackList, OpportunisticContainerContext oppContext)\n{\r\n    if (blackList != null) {\r\n        oppContext.getBlacklist().removeAll(blackList.getBlacklistRemovals());\r\n        oppContext.getBlacklist().addAll(blackList.getBlacklistAdditions());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "matchAllocation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void matchAllocation(List<Map<Resource, List<Allocation>>> allocations, List<Container> allocatedContainers, OpportunisticContainerContext oppContext)\n{\r\n    for (Map<Resource, List<Allocation>> allocation : allocations) {\r\n        for (Map.Entry<Resource, List<Allocation>> e : allocation.entrySet()) {\r\n            oppContext.matchAllocationToOutstandingRequest(e.getKey(), e.getValue());\r\n            for (Allocation alloc : e.getValue()) {\r\n                allocatedContainers.add(alloc.getContainer());\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getTotalAllocations",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getTotalAllocations(List<Map<Resource, List<Allocation>>> allocations)\n{\r\n    int totalAllocs = 0;\r\n    for (Map<Resource, List<Allocation>> allocation : allocations) {\r\n        for (List<Allocation> allocs : allocation.values()) {\r\n            totalAllocs += allocs.size();\r\n        }\r\n    }\r\n    return totalAllocs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "createContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Container createContainer(long rmIdentifier, AllocationParams appParams, ContainerIdGenerator idCounter, ApplicationAttemptId id, String userName, Map<Resource, List<Allocation>> allocations, String location, ResourceRequest anyAsk, RemoteNode rNode) throws YarnException\n{\r\n    Container container = buildContainer(rmIdentifier, appParams, idCounter, anyAsk, id, userName, rNode);\r\n    List<Allocation> allocList = allocations.get(anyAsk.getCapability());\r\n    if (allocList == null) {\r\n        allocList = new ArrayList<>();\r\n        allocations.put(anyAsk.getCapability(), allocList);\r\n    }\r\n    allocList.add(new Allocation(container, location));\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "buildContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Container buildContainer(long rmIdentifier, AllocationParams appParams, ContainerIdGenerator idCounter, ResourceRequest rr, ApplicationAttemptId id, String userName, RemoteNode node) throws YarnException\n{\r\n    ContainerId cId = ContainerId.newContainerId(id, idCounter.generateContainerId());\r\n    Resource capability = normalizeCapability(appParams, rr);\r\n    return createContainer(rmIdentifier, appParams.getContainerTokenExpiryInterval(), SchedulerRequestKey.create(rr), userName, node, cId, capability);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "createContainer",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Container createContainer(long rmIdentifier, long tokenExpiry, SchedulerRequestKey schedulerKey, String userName, RemoteNode node, ContainerId cId, Resource capability)\n{\r\n    long currTime = System.currentTimeMillis();\r\n    ContainerTokenIdentifier containerTokenIdentifier = new ContainerTokenIdentifier(cId, 0, node.getNodeId().toString(), userName, capability, currTime + tokenExpiry, tokenSecretManager.getCurrentKey().getKeyId(), rmIdentifier, schedulerKey.getPriority(), currTime, null, getRemoteNodePartition(node), ContainerType.TASK, ExecutionType.OPPORTUNISTIC, schedulerKey.getAllocationRequestId());\r\n    byte[] pwd = tokenSecretManager.createPassword(containerTokenIdentifier);\r\n    Token containerToken = newContainerToken(node.getNodeId(), pwd, containerTokenIdentifier);\r\n    Container container = BuilderUtils.newContainer(cId, node.getNodeId(), node.getHttpAddress(), capability, schedulerKey.getPriority(), containerToken, containerTokenIdentifier.getExecutionType(), schedulerKey.getAllocationRequestId());\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "normalizeCapability",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource normalizeCapability(AllocationParams appParams, ResourceRequest ask)\n{\r\n    return Resources.normalize(RESOURCE_CALCULATOR, ask.getCapability(), appParams.minResource, appParams.maxResource, appParams.incrementResource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "newContainerToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token newContainerToken(NodeId nodeId, byte[] password, ContainerTokenIdentifier tokenIdentifier)\n{\r\n    InetSocketAddress addr = NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\r\n    Token containerToken = Token.newInstance(tokenIdentifier.getBytes(), ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil.buildTokenService(addr).toString());\r\n    return containerToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "partitionAskList",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "PartitionedResourceRequests partitionAskList(List<ResourceRequest> askList)\n{\r\n    PartitionedResourceRequests partitionedRequests = new PartitionedResourceRequests();\r\n    for (ResourceRequest rr : askList) {\r\n        if (rr.getExecutionTypeRequest().getExecutionType() == ExecutionType.OPPORTUNISTIC) {\r\n            partitionedRequests.getOpportunistic().add(rr);\r\n        } else {\r\n            partitionedRequests.getGuaranteed().add(rr);\r\n        }\r\n    }\r\n    return partitionedRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getRequestPartition",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getRequestPartition(EnrichedResourceRequest enrichedRR)\n{\r\n    String partition = enrichedRR.getRequest().getNodeLabelExpression();\r\n    if (partition == null) {\r\n        partition = CommonNodeLabelsManager.NO_LABEL;\r\n    }\r\n    return partition;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getRemoteNodePartition",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getRemoteNodePartition(RemoteNode node)\n{\r\n    String partition = node.getNodePartition();\r\n    if (partition == null) {\r\n        partition = CommonNodeLabelsManager.NO_LABEL;\r\n    }\r\n    return partition;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateApplicationHomeSubClusterRequest newInstance(ApplicationHomeSubCluster applicationHomeSubCluster)\n{\r\n    UpdateApplicationHomeSubClusterRequest updateApplicationRequest = Records.newRecord(UpdateApplicationHomeSubClusterRequest.class);\r\n    updateApplicationRequest.setApplicationHomeSubCluster(applicationHomeSubCluster);\r\n    return updateApplicationRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHomeSubCluster getApplicationHomeSubCluster()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationHomeSubCluster(ApplicationHomeSubCluster applicationHomeSubCluster)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "render",
  "errType" : [ "Exception", "Exception", "Exception" ],
  "containingMethodsNum" : 32,
  "sourceCodeText" : "void render(Block html)\n{\r\n    String webUiType = $(WEB_UI_TYPE);\r\n    String aid = $(APPLICATION_ID);\r\n    if (aid.isEmpty()) {\r\n        puts(\"Bad request: requires Application ID\");\r\n        return;\r\n    }\r\n    try {\r\n        appID = Apps.toAppID(aid);\r\n    } catch (Exception e) {\r\n        puts(\"Invalid Application ID: \" + aid);\r\n        return;\r\n    }\r\n    UserGroupInformation callerUGI = getCallerUGI();\r\n    ApplicationReport appReport;\r\n    try {\r\n        final GetApplicationReportRequest request = GetApplicationReportRequest.newInstance(appID);\r\n        if (callerUGI == null) {\r\n            appReport = getApplicationReport(request);\r\n        } else {\r\n            appReport = callerUGI.doAs(new PrivilegedExceptionAction<ApplicationReport>() {\r\n\r\n                @Override\r\n                public ApplicationReport run() throws Exception {\r\n                    return getApplicationReport(request);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        String message = \"Failed to read the application \" + appID + \".\";\r\n        LOG.error(message, e);\r\n        html.p().__(message).__();\r\n        return;\r\n    }\r\n    if (appReport == null) {\r\n        puts(\"Application not found: \" + aid);\r\n        return;\r\n    }\r\n    AppInfo app = new AppInfo(appReport);\r\n    setTitle(join(\"Application \", aid));\r\n    Collection<ApplicationAttemptReport> attempts;\r\n    try {\r\n        final GetApplicationAttemptsRequest request = GetApplicationAttemptsRequest.newInstance(appID);\r\n        if (callerUGI == null) {\r\n            attempts = getApplicationAttemptsReport(request);\r\n        } else {\r\n            attempts = callerUGI.doAs(new PrivilegedExceptionAction<Collection<ApplicationAttemptReport>>() {\r\n\r\n                @Override\r\n                public Collection<ApplicationAttemptReport> run() throws Exception {\r\n                    return getApplicationAttemptsReport(request);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        String message = \"Failed to read the attempts of the application \" + appID + \".\";\r\n        LOG.error(message, e);\r\n        html.p().__(message).__();\r\n        return;\r\n    }\r\n    boolean unsecuredUIForSecuredCluster = UserGroupInformation.isSecurityEnabled() && this.unsecuredUI;\r\n    if (webUiType != null && webUiType.equals(YarnWebParams.RM_WEB_UI) && conf.getBoolean(YarnConfiguration.RM_WEBAPP_UI_ACTIONS_ENABLED, YarnConfiguration.DEFAULT_RM_WEBAPP_UI_ACTIONS_ENABLED) && !unsecuredUIForSecuredCluster && !Apps.isApplicationFinalState(app.getAppState())) {\r\n        html.div().button().$onclick(\"confirmAction()\").b(\"Kill Application\").__().__();\r\n        StringBuilder script = new StringBuilder();\r\n        script.append(\"function confirmAction() {\").append(\" b = confirm(\\\"Are you sure?\\\");\").append(\" if (b == true) {\").append(\" $.ajax({\").append(\" type: 'PUT',\").append(\" url: '/ws/v1/cluster/apps/\").append(aid).append(\"/state',\").append(\" contentType: 'application/json',\").append(getCSRFHeaderString(conf)).append(\" data: '{\\\"state\\\":\\\"KILLED\\\"}',\").append(\" dataType: 'json'\").append(\" }).done(function(data){\").append(\" setTimeout(function(){\").append(\" location.href = '/cluster/app/\").append(aid).append(\"';\").append(\" }, 1000);\").append(\" }).fail(function(data){\").append(\" console.log(data);\").append(\" });\").append(\" }\").append(\"}\");\r\n        html.script().$type(\"text/javascript\").__(script.toString()).__();\r\n    }\r\n    String schedulerPath = WebAppUtils.getResolvedRMWebAppURLWithScheme(conf) + \"/cluster/scheduler?openQueues=\" + app.getQueue();\r\n    generateOverviewTable(app, schedulerPath, webUiType, appReport);\r\n    createApplicationMetricsTable(html);\r\n    html.__(InfoBlock.class);\r\n    generateApplicationTable(html, callerUGI, attempts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "generateOverviewTable",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void generateOverviewTable(AppInfo app, String schedulerPath, String webUiType, ApplicationReport appReport)\n{\r\n    ResponseInfo overviewTable = info(\"Application Overview\").__(\"User:\", schedulerPath, app.getUser()).__(\"Name:\", app.getName()).__(\"Application Type:\", app.getType()).__(\"Application Tags:\", app.getApplicationTags() == null ? \"\" : app.getApplicationTags()).__(\"Application Priority:\", clarifyAppPriority(app.getPriority())).__(\"YarnApplicationState:\", app.getAppState() == null ? UNAVAILABLE : clarifyAppState(app.getAppState())).__(\"Queue:\", schedulerPath, app.getQueue()).__(\"FinalStatus Reported by AM:\", clairfyAppFinalStatus(app.getFinalAppStatus())).__(\"Started:\", Times.format(app.getStartedTime())).__(\"Launched:\", Times.format(app.getLaunchTime())).__(\"Finished:\", Times.format(app.getFinishedTime())).__(\"Elapsed:\", StringUtils.formatTime(app.getElapsedTime())).__(\"Tracking URL:\", app.getTrackingUrl() == null || app.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(app.getTrackingUrl()), app.getTrackingUrl() == null || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : Apps.isApplicationFinalState(app.getAppState()) ? \"History\" : \"ApplicationMaster\");\r\n    if (webUiType != null && webUiType.equals(YarnWebParams.RM_WEB_UI)) {\r\n        LogAggregationStatus status = getLogAggregationStatus();\r\n        if (status == null) {\r\n            overviewTable.__(\"Log Aggregation Status:\", \"N/A\");\r\n        } else if (status == LogAggregationStatus.DISABLED || status == LogAggregationStatus.NOT_START || status == LogAggregationStatus.SUCCEEDED) {\r\n            overviewTable.__(\"Log Aggregation Status:\", status.name());\r\n        } else {\r\n            overviewTable.__(\"Log Aggregation Status:\", root_url(\"logaggregationstatus\", app.getAppId()), status.name());\r\n        }\r\n        long timeout = appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME).getRemainingTime();\r\n        if (timeout < 0) {\r\n            overviewTable.__(\"Application Timeout (Remaining Time):\", \"Unlimited\");\r\n        } else {\r\n            overviewTable.__(\"Application Timeout (Remaining Time):\", String.format(\"%d seconds\", timeout));\r\n        }\r\n    }\r\n    overviewTable.__(\"Diagnostics:\", app.getDiagnosticsInfo() == null ? \"\" : app.getDiagnosticsInfo());\r\n    overviewTable.__(\"Unmanaged Application:\", app.isUnmanagedApp());\r\n    overviewTable.__(\"Application Node Label expression:\", app.getAppNodeLabelExpression() == null ? \"<Not set>\" : app.getAppNodeLabelExpression());\r\n    overviewTable.__(\"AM container Node Label expression:\", app.getAmNodeLabelExpression() == null ? \"<Not set>\" : app.getAmNodeLabelExpression());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "generateApplicationTable",
  "errType" : [ "Exception", "ContainerNotFoundException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void generateApplicationTable(Block html, UserGroupInformation callerUGI, Collection<ApplicationAttemptReport> attempts)\n{\r\n    TBODY<TABLE<Hamlet>> tbody = html.table(\"#attempts\").thead().tr().th(\".id\", \"Attempt ID\").th(\".started\", \"Started\").th(\".node\", \"Node\").th(\".logs\", \"Logs\").__().__().tbody();\r\n    StringBuilder attemptsTableData = new StringBuilder(\"[\\n\");\r\n    for (final ApplicationAttemptReport appAttemptReport : attempts) {\r\n        AppAttemptInfo appAttempt = new AppAttemptInfo(appAttemptReport);\r\n        ContainerReport containerReport;\r\n        try {\r\n            final GetContainerReportRequest request = GetContainerReportRequest.newInstance(appAttemptReport.getAMContainerId());\r\n            if (callerUGI == null) {\r\n                containerReport = getContainerReport(request);\r\n            } else {\r\n                containerReport = callerUGI.doAs(new PrivilegedExceptionAction<ContainerReport>() {\r\n\r\n                    @Override\r\n                    public ContainerReport run() throws Exception {\r\n                        ContainerReport report = null;\r\n                        if (request.getContainerId() != null) {\r\n                            try {\r\n                                report = getContainerReport(request);\r\n                            } catch (ContainerNotFoundException ex) {\r\n                                LOG.warn(ex.getMessage());\r\n                            }\r\n                        }\r\n                        return report;\r\n                    }\r\n                });\r\n            }\r\n        } catch (Exception e) {\r\n            String message = \"Failed to read the AM container of the application attempt \" + appAttemptReport.getApplicationAttemptId() + \".\";\r\n            LOG.error(message, e);\r\n            html.p().__(message).__();\r\n            return;\r\n        }\r\n        long startTime = 0L;\r\n        String logsLink = null;\r\n        String nodeLink = null;\r\n        if (containerReport != null) {\r\n            ContainerInfo container = new ContainerInfo(containerReport);\r\n            startTime = container.getStartedTime();\r\n            logsLink = containerReport.getLogUrl();\r\n            nodeLink = containerReport.getNodeHttpAddress();\r\n        }\r\n        attemptsTableData.append(\"[\\\"<a href='\").append(url(\"appattempt\", appAttempt.getAppAttemptId())).append(\"'>\").append(appAttempt.getAppAttemptId()).append(\"</a>\\\",\\\"\").append(startTime).append(\"\\\",\\\"<a \").append(nodeLink == null ? \"#\" : \"href='\" + nodeLink).append(\"'>\").append(nodeLink == null ? \"N/A\" : StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(nodeLink))).append(\"</a>\\\",\\\"<a \").append(logsLink == null ? \"#\" : \"href='\" + logsLink).append(\"'>\").append(logsLink == null ? \"N/A\" : \"Logs\").append(\"</a>\\\"],\\n\");\r\n    }\r\n    if (attemptsTableData.charAt(attemptsTableData.length() - 2) == ',') {\r\n        attemptsTableData.delete(attemptsTableData.length() - 2, attemptsTableData.length() - 1);\r\n    }\r\n    attemptsTableData.append(\"]\");\r\n    html.script().$type(\"text/javascript\").__(\"var attemptsTableData=\" + attemptsTableData).__();\r\n    tbody.__().__();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainerReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerReport getContainerReport(final GetContainerReportRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getContainerReport(request).getContainerReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApplicationAttemptsReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationAttemptReport> getApplicationAttemptsReport(final GetApplicationAttemptsRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getApplicationAttempts(request).getApplicationAttemptList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationReport getApplicationReport(final GetApplicationReportRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getApplicationReport(request).getApplicationReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "clarifyAppState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String clarifyAppState(YarnApplicationState state)\n{\r\n    String ret = state.toString();\r\n    switch(state) {\r\n        case NEW:\r\n            return ret + \": waiting for application to be initialized\";\r\n        case NEW_SAVING:\r\n            return ret + \": waiting for application to be persisted in state-store.\";\r\n        case SUBMITTED:\r\n            return ret + \": waiting for application to be accepted by scheduler.\";\r\n        case ACCEPTED:\r\n            return ret + \": waiting for AM container to be allocated, launched and\" + \" register with RM.\";\r\n        case RUNNING:\r\n            return ret + \": AM has registered with RM and started running.\";\r\n        default:\r\n            return ret;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "clarifyAppPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String clarifyAppPriority(int priority)\n{\r\n    return priority + \" (Higher Integer value indicates higher priority)\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "clairfyAppFinalStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String clairfyAppFinalStatus(FinalApplicationStatus status)\n{\r\n    if (status == FinalApplicationStatus.UNDEFINED) {\r\n        return \"Application has not completed yet.\";\r\n    }\r\n    return status.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createApplicationMetricsTable",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void createApplicationMetricsTable(Block html)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getLogAggregationStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LogAggregationStatus getLogAggregationStatus()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getCSRFHeaderString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getCSRFHeaderString(Configuration conf)\n{\r\n    String ret = \"\";\r\n    if (conf.getBoolean(YarnConfiguration.RM_CSRF_ENABLED, false)) {\r\n        ret = \" headers : { '\";\r\n        Map<String, String> filterParams = RestCsrfPreventionFilter.getFilterParams(conf, YarnConfiguration.RM_CSRF_PREFIX);\r\n        if (filterParams.containsKey(RestCsrfPreventionFilter.CUSTOM_HEADER_PARAM)) {\r\n            ret += filterParams.get(RestCsrfPreventionFilter.CUSTOM_HEADER_PARAM);\r\n        } else {\r\n            ret += RestCsrfPreventionFilter.HEADER_DEFAULT;\r\n        }\r\n        ret += \"' : 'null' },\";\r\n    }\r\n    return ret;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterDeregisterResponse newInstance()\n{\r\n    SubClusterDeregisterResponse response = Records.newRecord(SubClusterDeregisterResponse.class);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getResource()\n{\r\n    return this.resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getExeType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ExecutionType getExeType()\n{\r\n    return this.execType;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (!(obj instanceof SchedulerRequestKey)) {\r\n        return false;\r\n    }\r\n    if (!(obj instanceof ResourceRequestSetKey)) {\r\n        return super.equals(obj);\r\n    }\r\n    ResourceRequestSetKey other = (ResourceRequestSetKey) obj;\r\n    return super.equals(other) && this.resource.equals(other.resource) && this.execType.equals(other.execType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int hashCode()\n{\r\n    return ((super.hashCode() * 37 + this.resource.hashCode()) * 41) + this.execType.hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int compareTo(SchedulerRequestKey other)\n{\r\n    int ret = super.compareTo(other);\r\n    if (ret != 0) {\r\n        return ret;\r\n    }\r\n    if (!(other instanceof ResourceRequestSetKey)) {\r\n        return ret;\r\n    }\r\n    ResourceRequestSetKey otherKey = (ResourceRequestSetKey) other;\r\n    ret = this.resource.compareTo(otherKey.resource);\r\n    if (ret != 0) {\r\n        return ret;\r\n    }\r\n    return this.execType.compareTo(otherKey.execType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String toString()\n{\r\n    return \"[id:\" + getAllocationRequestId() + \" p:\" + getPriority().getPriority() + (this.execType.equals(ExecutionType.GUARANTEED) ? \" G\" : \" O\" + \" r:\" + this.resource + \"]\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\failover",
  "methodName" : "createRMProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T createRMProxy(Configuration configuration, Class<T> protocol, SubClusterId subClusterId, UserGroupInformation user) throws IOException\n{\r\n    return createRMProxy(configuration, protocol, subClusterId, user, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\failover",
  "methodName" : "createRMProxy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "T createRMProxy(Configuration configuration, final Class<T> protocol, SubClusterId subClusterId, UserGroupInformation user, Token<? extends TokenIdentifier> token) throws IOException\n{\r\n    final YarnConfiguration config = new YarnConfiguration(configuration);\r\n    updateConfForFederation(config, subClusterId.getId());\r\n    return AMRMClientUtils.createRMProxy(config, protocol, user, token);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\failover",
  "methodName" : "updateConfForFederation",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void updateConfForFederation(Configuration conf, String subClusterId)\n{\r\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, subClusterId);\r\n    conf.setBoolean(YarnConfiguration.FEDERATION_ENABLED, true);\r\n    conf.setClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER, FederationRMFailoverProxyProvider.class, RMFailoverProxyProvider.class);\r\n    if (HAUtil.isHAEnabled(conf)) {\r\n        conf.setBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, true);\r\n        conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, false);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterHeartbeatRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SubClusterHeartbeatRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.subClusterId != null) {\r\n        builder.setSubClusterId(convertToProtoFormat(this.subClusterId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterId getSubClusterId()\n{\r\n    SubClusterHeartbeatRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.subClusterId != null) {\r\n        return this.subClusterId;\r\n    }\r\n    if (!p.hasSubClusterId()) {\r\n        return null;\r\n    }\r\n    this.subClusterId = convertFromProtoFormat(p.getSubClusterId());\r\n    return this.subClusterId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setSubClusterId(SubClusterId subClusterId)\n{\r\n    maybeInitBuilder();\r\n    if (subClusterId == null) {\r\n        builder.clearSubClusterId();\r\n    }\r\n    this.subClusterId = subClusterId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getLastHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getLastHeartBeat()\n{\r\n    SubClusterHeartbeatRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getLastHeartBeat();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setLastHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLastHeartBeat(long time)\n{\r\n    maybeInitBuilder();\r\n    builder.setLastHeartBeat(time);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterState getState()\n{\r\n    SubClusterHeartbeatRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasState()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setState(SubClusterState state)\n{\r\n    maybeInitBuilder();\r\n    if (state == null) {\r\n        builder.clearState();\r\n        return;\r\n    }\r\n    builder.setState(convertToProtoFormat(state));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getCapability()\n{\r\n    SubClusterHeartbeatRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasCapability()) ? p.getCapability() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setCapability",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setCapability(String capability)\n{\r\n    maybeInitBuilder();\r\n    if (capability == null) {\r\n        builder.clearCapability();\r\n        return;\r\n    }\r\n    builder.setCapability(capability);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId convertFromProtoFormat(SubClusterIdProto clusterId)\n{\r\n    return new SubClusterIdPBImpl(clusterId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterIdProto convertToProtoFormat(SubClusterId clusterId)\n{\r\n    return ((SubClusterIdPBImpl) clusterId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterState convertFromProtoFormat(SubClusterStateProto state)\n{\r\n    return SubClusterState.valueOf(state.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterStateProto convertToProtoFormat(SubClusterState state)\n{\r\n    return SubClusterStateProto.valueOf(state.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api",
  "methodName" : "createRMProxy",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "T createRMProxy(final Configuration configuration, final Class<T> protocol) throws IOException\n{\r\n    long rmConnectWait = configuration.getLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\r\n    long rmRetryInterval = configuration.getLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS, YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\r\n    long nmRmConnectWait = configuration.getLong(YarnConfiguration.NM_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, rmConnectWait);\r\n    long nmRmRetryInterval = configuration.getLong(YarnConfiguration.NM_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS, rmRetryInterval);\r\n    ServerRMProxy<T> serverRMProxy = new ServerRMProxy<>();\r\n    return createRMProxy(configuration, protocol, serverRMProxy, nmRmConnectWait, nmRmRetryInterval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api",
  "methodName" : "getRMAddress",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "InetSocketAddress getRMAddress(YarnConfiguration conf, Class<?> protocol)\n{\r\n    if (protocol == ResourceTracker.class) {\r\n        return conf.getSocketAddr(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS, YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS, YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\r\n    } else if (protocol == DistributedSchedulingAMProtocol.class) {\r\n        return conf.getSocketAddr(YarnConfiguration.RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_ADDRESS, YarnConfiguration.DEFAULT_RM_SCHEDULER_PORT);\r\n    } else {\r\n        String message = \"Unsupported protocol found when creating the proxy \" + \"connection to ResourceManager: \" + ((protocol != null) ? protocol.getClass().getName() : \"null\");\r\n        LOG.error(message);\r\n        throw new IllegalStateException(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api",
  "methodName" : "checkAllowedProtocols",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void checkAllowedProtocols(Class<?> protocol)\n{\r\n    Preconditions.checkArgument(protocol.isAssignableFrom(ServerRMProtocols.class), \"ResourceManager does not support this protocol\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "initializeFacadeInternal",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initializeFacadeInternal(Configuration config)\n{\r\n    this.conf = config;\r\n    try {\r\n        this.stateStore = (FederationStateStore) createRetryInstance(this.conf, YarnConfiguration.FEDERATION_STATESTORE_CLIENT_CLASS, YarnConfiguration.DEFAULT_FEDERATION_STATESTORE_CLIENT_CLASS, FederationStateStore.class, createRetryPolicy(conf));\r\n        this.stateStore.init(conf);\r\n        this.subclusterResolver = createInstance(conf, YarnConfiguration.FEDERATION_CLUSTER_RESOLVER_CLASS, YarnConfiguration.DEFAULT_FEDERATION_CLUSTER_RESOLVER_CLASS, SubClusterResolver.class);\r\n        this.subclusterResolver.load();\r\n        initCache();\r\n    } catch (YarnException ex) {\r\n        LOG.error(\"Failed to initialize the FederationStateStoreFacade object\", ex);\r\n        throw new RuntimeException(ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "reinitialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void reinitialize(FederationStateStore store, Configuration config)\n{\r\n    this.conf = config;\r\n    this.stateStore = store;\r\n    clearCache();\r\n    initCache();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "createRetryPolicy",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "RetryPolicy createRetryPolicy(Configuration conf)\n{\r\n    RetryPolicy basePolicy = RetryPolicies.exponentialBackoffRetry(conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES, Integer.SIZE), conf.getLong(YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS, YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS), TimeUnit.MILLISECONDS);\r\n    Map<Class<? extends Exception>, RetryPolicy> exceptionToPolicyMap = new HashMap<Class<? extends Exception>, RetryPolicy>();\r\n    exceptionToPolicyMap.put(FederationStateStoreRetriableException.class, basePolicy);\r\n    exceptionToPolicyMap.put(CacheLoaderException.class, basePolicy);\r\n    exceptionToPolicyMap.put(PoolInitializationException.class, basePolicy);\r\n    RetryPolicy retryPolicy = RetryPolicies.retryByException(RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\r\n    return retryPolicy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "isCachingEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isCachingEnabled()\n{\r\n    return (cacheTimeToLive > 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "initCache",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void initCache()\n{\r\n    cacheTimeToLive = conf.getInt(YarnConfiguration.FEDERATION_CACHE_TIME_TO_LIVE_SECS, YarnConfiguration.DEFAULT_FEDERATION_CACHE_TIME_TO_LIVE_SECS);\r\n    if (isCachingEnabled()) {\r\n        CachingProvider jcacheProvider = Caching.getCachingProvider();\r\n        CacheManager jcacheManager = jcacheProvider.getCacheManager();\r\n        this.cache = jcacheManager.getCache(this.getClass().getSimpleName());\r\n        if (this.cache == null) {\r\n            LOG.info(\"Creating a JCache Manager with name \" + this.getClass().getSimpleName());\r\n            Duration cacheExpiry = new Duration(TimeUnit.SECONDS, cacheTimeToLive);\r\n            CompleteConfiguration<Object, Object> configuration = new MutableConfiguration<Object, Object>().setStoreByValue(false).setReadThrough(true).setExpiryPolicyFactory(new FactoryBuilder.SingletonFactory<ExpiryPolicy>(new CreatedExpiryPolicy(cacheExpiry))).setCacheLoaderFactory(new FactoryBuilder.SingletonFactory<CacheLoader<Object, Object>>(new CacheLoaderImpl<Object, Object>()));\r\n            this.cache = jcacheManager.createCache(this.getClass().getSimpleName(), configuration);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "clearCache",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void clearCache()\n{\r\n    CachingProvider jcacheProvider = Caching.getCachingProvider();\r\n    CacheManager jcacheManager = jcacheProvider.getCacheManager();\r\n    jcacheManager.destroyCache(this.getClass().getSimpleName());\r\n    this.cache = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FederationStateStoreFacade getInstance()\n{\r\n    return FACADE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getSubCluster",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SubClusterInfo getSubCluster(final SubClusterId subClusterId) throws YarnException\n{\r\n    if (isCachingEnabled()) {\r\n        return getSubClusters(false).get(subClusterId);\r\n    } else {\r\n        GetSubClusterInfoResponse response = stateStore.getSubCluster(GetSubClusterInfoRequest.newInstance(subClusterId));\r\n        if (response == null) {\r\n            return null;\r\n        } else {\r\n            return response.getSubClusterInfo();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getSubCluster",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SubClusterInfo getSubCluster(final SubClusterId subClusterId, final boolean flushCache) throws YarnException\n{\r\n    if (flushCache && isCachingEnabled()) {\r\n        LOG.info(\"Flushing subClusters from cache and rehydrating from store,\" + \" most likely on account of RM failover.\");\r\n        cache.remove(buildGetSubClustersCacheRequest(false));\r\n    }\r\n    return getSubCluster(subClusterId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getSubClusters",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<SubClusterId, SubClusterInfo> getSubClusters(final boolean filterInactiveSubClusters) throws YarnException\n{\r\n    try {\r\n        if (isCachingEnabled()) {\r\n            return (Map<SubClusterId, SubClusterInfo>) cache.get(buildGetSubClustersCacheRequest(filterInactiveSubClusters));\r\n        } else {\r\n            return buildSubClusterInfoMap(stateStore.getSubClusters(GetSubClustersInfoRequest.newInstance(filterInactiveSubClusters)));\r\n        }\r\n    } catch (Throwable ex) {\r\n        throw new YarnException(ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SubClusterPolicyConfiguration getPolicyConfiguration(final String queue) throws YarnException\n{\r\n    if (isCachingEnabled()) {\r\n        return getPoliciesConfigurations().get(queue);\r\n    } else {\r\n        GetSubClusterPolicyConfigurationResponse response = stateStore.getPolicyConfiguration(GetSubClusterPolicyConfigurationRequest.newInstance(queue));\r\n        if (response == null) {\r\n            return null;\r\n        } else {\r\n            return response.getPolicyConfiguration();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getPoliciesConfigurations",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<String, SubClusterPolicyConfiguration> getPoliciesConfigurations() throws YarnException\n{\r\n    try {\r\n        if (isCachingEnabled()) {\r\n            return (Map<String, SubClusterPolicyConfiguration>) cache.get(buildGetPoliciesConfigurationsCacheRequest());\r\n        } else {\r\n            return buildPolicyConfigMap(stateStore.getPoliciesConfigurations(GetSubClusterPoliciesConfigurationsRequest.newInstance()));\r\n        }\r\n    } catch (Throwable ex) {\r\n        throw new YarnException(ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "addApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterId addApplicationHomeSubCluster(ApplicationHomeSubCluster appHomeSubCluster) throws YarnException\n{\r\n    AddApplicationHomeSubClusterResponse response = stateStore.addApplicationHomeSubCluster(AddApplicationHomeSubClusterRequest.newInstance(appHomeSubCluster));\r\n    return response.getHomeSubCluster();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "updateApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void updateApplicationHomeSubCluster(ApplicationHomeSubCluster appHomeSubCluster) throws YarnException\n{\r\n    stateStore.updateApplicationHomeSubCluster(UpdateApplicationHomeSubClusterRequest.newInstance(appHomeSubCluster));\r\n    return;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterId getApplicationHomeSubCluster(ApplicationId appId) throws YarnException\n{\r\n    GetApplicationHomeSubClusterResponse response = stateStore.getApplicationHomeSubCluster(GetApplicationHomeSubClusterRequest.newInstance(appId));\r\n    return response.getApplicationHomeSubCluster().getHomeSubCluster();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getSubClusterResolver",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterResolver getSubClusterResolver()\n{\r\n    return this.subclusterResolver;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return this.conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "createRetryInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Object createRetryInstance(Configuration conf, String configuredClassName, String defaultValue, Class<T> type, RetryPolicy retryPolicy)\n{\r\n    return RetryProxy.create(type, createInstance(conf, configuredClassName, defaultValue, type), retryPolicy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "createInstance",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "T createInstance(Configuration conf, String configuredClassName, String defaultValue, Class<T> type)\n{\r\n    String className = conf.get(configuredClassName, defaultValue);\r\n    try {\r\n        Class<?> clusterResolverClass = conf.getClassByName(className);\r\n        if (type.isAssignableFrom(clusterResolverClass)) {\r\n            return (T) ReflectionUtils.newInstance(clusterResolverClass, conf);\r\n        } else {\r\n            throw new YarnRuntimeException(\"Class: \" + className + \" not instance of \" + type.getCanonicalName());\r\n        }\r\n    } catch (ClassNotFoundException e) {\r\n        throw new YarnRuntimeException(\"Could not instantiate : \" + className, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "buildSubClusterInfoMap",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<SubClusterId, SubClusterInfo> buildSubClusterInfoMap(final GetSubClustersInfoResponse response)\n{\r\n    List<SubClusterInfo> subClusters = response.getSubClusters();\r\n    Map<SubClusterId, SubClusterInfo> subClustersMap = new HashMap<>(subClusters.size());\r\n    for (SubClusterInfo subCluster : subClusters) {\r\n        subClustersMap.put(subCluster.getSubClusterId(), subCluster);\r\n    }\r\n    return subClustersMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "buildGetSubClustersCacheRequest",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Object buildGetSubClustersCacheRequest(final boolean filterInactiveSubClusters)\n{\r\n    final String cacheKey = buildCacheKey(getClass().getSimpleName(), GET_SUBCLUSTERS_CACHEID, Boolean.toString(filterInactiveSubClusters));\r\n    CacheRequest<String, Map<SubClusterId, SubClusterInfo>> cacheRequest = new CacheRequest<String, Map<SubClusterId, SubClusterInfo>>(cacheKey, new Func<String, Map<SubClusterId, SubClusterInfo>>() {\r\n\r\n        @Override\r\n        public Map<SubClusterId, SubClusterInfo> invoke(String key) throws Exception {\r\n            GetSubClustersInfoResponse subClusters = stateStore.getSubClusters(GetSubClustersInfoRequest.newInstance(filterInactiveSubClusters));\r\n            return buildSubClusterInfoMap(subClusters);\r\n        }\r\n    });\r\n    return cacheRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "buildPolicyConfigMap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, SubClusterPolicyConfiguration> buildPolicyConfigMap(GetSubClusterPoliciesConfigurationsResponse response)\n{\r\n    List<SubClusterPolicyConfiguration> policyConfigs = response.getPoliciesConfigs();\r\n    Map<String, SubClusterPolicyConfiguration> queuePolicyConfigs = new HashMap<>();\r\n    for (SubClusterPolicyConfiguration policyConfig : policyConfigs) {\r\n        queuePolicyConfigs.put(policyConfig.getQueue(), policyConfig);\r\n    }\r\n    return queuePolicyConfigs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "buildGetPoliciesConfigurationsCacheRequest",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Object buildGetPoliciesConfigurationsCacheRequest()\n{\r\n    final String cacheKey = buildCacheKey(getClass().getSimpleName(), GET_POLICIES_CONFIGURATIONS_CACHEID, null);\r\n    CacheRequest<String, Map<String, SubClusterPolicyConfiguration>> cacheRequest = new CacheRequest<String, Map<String, SubClusterPolicyConfiguration>>(cacheKey, new Func<String, Map<String, SubClusterPolicyConfiguration>>() {\r\n\r\n        @Override\r\n        public Map<String, SubClusterPolicyConfiguration> invoke(String key) throws Exception {\r\n            GetSubClusterPoliciesConfigurationsResponse policyConfigs = stateStore.getPoliciesConfigurations(GetSubClusterPoliciesConfigurationsRequest.newInstance());\r\n            return buildPolicyConfigMap(policyConfigs);\r\n        }\r\n    });\r\n    return cacheRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "buildCacheKey",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String buildCacheKey(String typeName, String methodName, String argName)\n{\r\n    StringBuilder buffer = new StringBuilder();\r\n    buffer.append(typeName).append(\".\").append(methodName);\r\n    if (argName != null) {\r\n        buffer.append(\"::\");\r\n        buffer.append(argName);\r\n    }\r\n    return buffer.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "reinitialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void reinitialize(FederationPolicyInitializationContext policyContext) throws FederationPolicyInitializationException\n{\r\n    FederationPolicyInitializationContextValidator.validate(policyContext, this.getClass().getCanonicalName());\r\n    setPolicyContext(policyContext);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "splitResourceRequests",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<SubClusterId, List<ResourceRequest>> splitResourceRequests(List<ResourceRequest> resourceRequests, Set<SubClusterId> timedOutSubClusters) throws YarnException\n{\r\n    throw new FederationPolicyException(\"The policy configured for this queue \" + \"rejects all routing requests by construction.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "toId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterId toId()\n{\r\n    return SubClusterId.newInstance(id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other instanceof SubClusterIdInfo) {\r\n        if (((SubClusterIdInfo) other).id.equals(this.id)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return id.hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void validate(WeightedPolicyInfo newPolicyInfo) throws FederationPolicyInitializationException\n{\r\n    super.validate(newPolicyInfo);\r\n    Map<SubClusterIdInfo, Float> newWeights = newPolicyInfo.getRouterPolicyWeights();\r\n    if (newWeights == null || newWeights.size() < 1) {\r\n        throw new FederationPolicyInitializationException(\"Weight vector cannot be null/empty.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validate(ApplicationSubmissionContext appSubmissionContext) throws FederationPolicyException\n{\r\n    if (appSubmissionContext == null) {\r\n        throw new FederationPolicyException(\"Cannot route an application with null context.\");\r\n    }\r\n    String queue = appSubmissionContext.getQueue();\r\n    if (queue == null) {\r\n        appSubmissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SCMUploaderNotifyResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getAccepted",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean getAccepted()\n{\r\n    SCMUploaderNotifyResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasAccepted()) ? p.getAccepted() : true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setAccepted",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAccepted(boolean b)\n{\r\n    maybeInitBuilder();\r\n    builder.setAccepted(b);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SCMUploaderNotifyResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\failover",
  "methodName" : "init",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void init(Configuration configuration, RMProxy<T> proxy, Class<T> proto)\n{\r\n    this.rmProxy = proxy;\r\n    this.protocol = proto;\r\n    this.rmProxy.checkAllowedProtocols(this.protocol);\r\n    String clusterId = configuration.get(YarnConfiguration.RM_CLUSTER_ID);\r\n    Preconditions.checkNotNull(clusterId, \"Missing RM ClusterId\");\r\n    this.subClusterId = SubClusterId.newInstance(clusterId);\r\n    this.facade = FederationStateStoreFacade.getInstance();\r\n    if (configuration instanceof YarnConfiguration) {\r\n        this.conf = (YarnConfiguration) configuration;\r\n    }\r\n    federationFailoverEnabled = conf.getBoolean(YarnConfiguration.FEDERATION_FAILOVER_ENABLED, YarnConfiguration.DEFAULT_FEDERATION_FAILOVER_ENABLED);\r\n    flushFacadeCacheForYarnRMAddr = conf.getBoolean(YarnConfiguration.FEDERATION_FLUSH_CACHE_FOR_RM_ADDR, YarnConfiguration.DEFAULT_FEDERATION_FLUSH_CACHE_FOR_RM_ADDR);\r\n    conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES, YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES));\r\n    conf.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY, conf.getInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS, YarnConfiguration.DEFAULT_CLIENT_FAILOVER_RETRIES_ON_SOCKET_TIMEOUTS));\r\n    try {\r\n        this.originalUser = UserGroupInformation.getCurrentUser();\r\n        LOG.info(\"Initialized Federation proxy for user: {}\", this.originalUser.getUserName());\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Could not get information of requester, ignoring for now.\");\r\n        this.originalUser = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\failover",
  "methodName" : "createRMProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T createRMProxy(InetSocketAddress rmAddress) throws IOException\n{\r\n    return rmProxy.getProxy(conf, protocol, rmAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\failover",
  "methodName" : "getProxyInternal",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "T getProxyInternal(boolean isFailover)\n{\r\n    SubClusterInfo subClusterInfo;\r\n    T proxy = this.current;\r\n    try {\r\n        LOG.info(\"Failing over to the ResourceManager for SubClusterId: {}\", subClusterId);\r\n        subClusterInfo = facade.getSubCluster(subClusterId, this.flushFacadeCacheForYarnRMAddr && isFailover);\r\n        updateRMAddress(subClusterInfo);\r\n        if (this.originalUser == null) {\r\n            InetSocketAddress rmAddress = rmProxy.getRMAddress(conf, protocol);\r\n            LOG.info(\"Connecting to {} subClusterId {} with protocol {}\" + \" without a proxy user\", rmAddress, subClusterId, protocol.getSimpleName());\r\n            proxy = createRMProxy(rmAddress);\r\n        } else {\r\n            proxy = this.originalUser.doAs(new PrivilegedExceptionAction<T>() {\r\n\r\n                @Override\r\n                public T run() throws IOException {\r\n                    InetSocketAddress rmAddress = rmProxy.getRMAddress(conf, protocol);\r\n                    LOG.info(\"Connecting to {} subClusterId {} with protocol {} as user {}\", rmAddress, subClusterId, protocol.getSimpleName(), originalUser);\r\n                    return createRMProxy(rmAddress);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.error(\"Exception while trying to create proxy to the ResourceManager\" + \" for SubClusterId: {}\", subClusterId, e);\r\n        if (proxy == null) {\r\n            throw new YarnRuntimeException(String.format(\"Create initial proxy to the ResourceManager for\" + \" SubClusterId %s failed\", subClusterId), e);\r\n        }\r\n    }\r\n    return proxy;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\failover",
  "methodName" : "updateRMAddress",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void updateRMAddress(SubClusterInfo subClusterInfo)\n{\r\n    if (subClusterInfo != null) {\r\n        if (protocol == ApplicationClientProtocol.class) {\r\n            conf.set(YarnConfiguration.RM_ADDRESS, subClusterInfo.getClientRMServiceAddress());\r\n        } else if (protocol == ApplicationMasterProtocol.class) {\r\n            conf.set(YarnConfiguration.RM_SCHEDULER_ADDRESS, subClusterInfo.getAMRMServiceAddress());\r\n        } else if (protocol == ResourceManagerAdministrationProtocol.class) {\r\n            conf.set(YarnConfiguration.RM_ADMIN_ADDRESS, subClusterInfo.getRMAdminServiceAddress());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\failover",
  "methodName" : "getProxy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ProxyInfo<T> getProxy()\n{\r\n    if (current == null) {\r\n        current = getProxyInternal(false);\r\n    }\r\n    return new ProxyInfo<T>(current, subClusterId.getId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\failover",
  "methodName" : "performFailover",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void performFailover(T currentProxy)\n{\r\n    current = getProxyInternal(federationFailoverEnabled);\r\n    if (current != currentProxy) {\r\n        closeInternal(currentProxy);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\failover",
  "methodName" : "getInterface",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Class<T> getInterface()\n{\r\n    return protocol;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\failover",
  "methodName" : "closeInternal",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void closeInternal(T currentProxy)\n{\r\n    if (currentProxy != null) {\r\n        if (currentProxy instanceof Closeable) {\r\n            try {\r\n                ((Closeable) currentProxy).close();\r\n            } catch (IOException e) {\r\n                LOG.warn(\"Exception while trying to close proxy\", e);\r\n            }\r\n        } else {\r\n            RPC.stopProxy(currentProxy);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\failover",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    closeInternal(current);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClusterPolicyConfigurationResponse newInstance(SubClusterPolicyConfiguration policy)\n{\r\n    GetSubClusterPolicyConfigurationResponse response = Records.newRecord(GetSubClusterPolicyConfigurationResponse.class);\r\n    response.setPolicyConfiguration(policy);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterPolicyConfiguration getPolicyConfiguration()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPolicyConfiguration(SubClusterPolicyConfiguration policyConfiguration)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FederationStateStoreClientMetrics getInstance()\n{\r\n    return S_INSTANCE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "failedStateStoreCall",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void failedStateStoreCall()\n{\r\n    String methodName = Thread.currentThread().getStackTrace()[2].getMethodName();\r\n    MutableCounterLong methodMetric = API_TO_FAILED_CALLS.get(methodName);\r\n    if (methodMetric == null) {\r\n        LOG.error(UNKOWN_FAIL_ERROR_MSG, methodName);\r\n        return;\r\n    }\r\n    totalFailedCalls.incr();\r\n    methodMetric.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "succeededStateStoreCall",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void succeededStateStoreCall(long duration)\n{\r\n    String methodName = Thread.currentThread().getStackTrace()[2].getMethodName();\r\n    MutableRate methodMetric = API_TO_SUCCESSFUL_CALLS.get(methodName);\r\n    MutableQuantiles methodQuantileMetric = API_TO_QUANTILE_METRICS.get(methodName);\r\n    if (methodMetric == null || methodQuantileMetric == null) {\r\n        LOG.error(UNKNOWN_SUCCESS_ERROR_MSG, methodName);\r\n        return;\r\n    }\r\n    totalSucceededCalls.add(duration);\r\n    methodMetric.add(duration);\r\n    methodQuantileMetric.add(duration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "incrConnections",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrConnections()\n{\r\n    totalConnections.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "decrConnections",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void decrConnections()\n{\r\n    totalConnections.decr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "getMetrics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void getMetrics(MetricsCollector collector, boolean all)\n{\r\n    REGISTRY.snapshot(collector.addRecord(REGISTRY.info()), all);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "getNumFailedCallsForMethod",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNumFailedCallsForMethod(String methodName)\n{\r\n    return API_TO_FAILED_CALLS.get(methodName).value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "getNumSucceessfulCallsForMethod",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNumSucceessfulCallsForMethod(String methodName)\n{\r\n    return API_TO_SUCCESSFUL_CALLS.get(methodName).lastStat().numSamples();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "getLatencySucceessfulCallsForMethod",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "double getLatencySucceessfulCallsForMethod(String methodName)\n{\r\n    return API_TO_SUCCESSFUL_CALLS.get(methodName).lastStat().mean();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "getNumFailedCalls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNumFailedCalls()\n{\r\n    return totalFailedCalls.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "getNumSucceededCalls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNumSucceededCalls()\n{\r\n    return totalSucceededCalls.lastStat().numSamples();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "getLatencySucceededCalls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "double getLatencySucceededCalls()\n{\r\n    return totalSucceededCalls.lastStat().mean();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "getNumConnections",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumConnections()\n{\r\n    return totalConnections.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return this.volumeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return this.volumeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (!(obj instanceof VolumeId)) {\r\n        return false;\r\n    }\r\n    return StringUtils.equalsIgnoreCase(volumeId, ((VolumeId) obj).getId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    HashCodeBuilder hc = new HashCodeBuilder();\r\n    hc.append(volumeId);\r\n    return hc.toHashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DeleteApplicationHomeSubClusterResponse newInstance()\n{\r\n    DeleteApplicationHomeSubClusterResponse response = Records.newRecord(DeleteApplicationHomeSubClusterResponse.class);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClusterPolicyConfigurationResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetSubClusterPolicyConfigurationResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.subClusterPolicy != null && !((SubClusterPolicyConfigurationPBImpl) this.subClusterPolicy).getProto().equals(builder.getPolicyConfiguration())) {\r\n        builder.setPolicyConfiguration(convertToProtoFormat(this.subClusterPolicy));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterPolicyConfiguration getPolicyConfiguration()\n{\r\n    GetSubClusterPolicyConfigurationResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.subClusterPolicy != null) {\r\n        return this.subClusterPolicy;\r\n    }\r\n    if (!p.hasPolicyConfiguration()) {\r\n        return null;\r\n    }\r\n    this.subClusterPolicy = convertFromProtoFormat(p.getPolicyConfiguration());\r\n    return this.subClusterPolicy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPolicyConfiguration(SubClusterPolicyConfiguration policyConfiguration)\n{\r\n    maybeInitBuilder();\r\n    if (policyConfiguration == null) {\r\n        builder.clearPolicyConfiguration();\r\n    }\r\n    this.subClusterPolicy = policyConfiguration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterPolicyConfiguration convertFromProtoFormat(SubClusterPolicyConfigurationProto policy)\n{\r\n    return new SubClusterPolicyConfigurationPBImpl(policy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterPolicyConfigurationProto convertToProtoFormat(SubClusterPolicyConfiguration policy)\n{\r\n    return ((SubClusterPolicyConfigurationPBImpl) policy).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "seek",
  "errType" : [ "DBException", "RuntimeException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void seek(byte[] key) throws DBException\n{\r\n    try {\r\n        iter.seek(key);\r\n    } catch (DBException e) {\r\n        throw e;\r\n    } catch (RuntimeException e) {\r\n        throw new DBException(e.getMessage(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "seekToFirst",
  "errType" : [ "DBException", "RuntimeException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void seekToFirst() throws DBException\n{\r\n    try {\r\n        iter.seekToFirst();\r\n    } catch (DBException e) {\r\n        throw e;\r\n    } catch (RuntimeException e) {\r\n        throw new DBException(e.getMessage(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "seekToLast",
  "errType" : [ "DBException", "RuntimeException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void seekToLast() throws DBException\n{\r\n    try {\r\n        iter.seekToLast();\r\n    } catch (DBException e) {\r\n        throw e;\r\n    } catch (RuntimeException e) {\r\n        throw new DBException(e.getMessage(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "hasNext",
  "errType" : [ "DBException", "RuntimeException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean hasNext() throws DBException\n{\r\n    try {\r\n        return iter.hasNext();\r\n    } catch (DBException e) {\r\n        throw e;\r\n    } catch (RuntimeException e) {\r\n        throw new DBException(e.getMessage(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "next",
  "errType" : [ "DBException", "RuntimeException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map.Entry<byte[], byte[]> next() throws DBException\n{\r\n    try {\r\n        return iter.next();\r\n    } catch (DBException e) {\r\n        throw e;\r\n    } catch (RuntimeException e) {\r\n        throw new DBException(e.getMessage(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "peekNext",
  "errType" : [ "DBException", "RuntimeException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map.Entry<byte[], byte[]> peekNext() throws DBException\n{\r\n    try {\r\n        return iter.peekNext();\r\n    } catch (DBException e) {\r\n        throw e;\r\n    } catch (RuntimeException e) {\r\n        throw new DBException(e.getMessage(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "hasPrev",
  "errType" : [ "DBException", "RuntimeException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean hasPrev() throws DBException\n{\r\n    try {\r\n        return iter.hasPrev();\r\n    } catch (DBException e) {\r\n        throw e;\r\n    } catch (RuntimeException e) {\r\n        throw new DBException(e.getMessage(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "prev",
  "errType" : [ "DBException", "RuntimeException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map.Entry<byte[], byte[]> prev() throws DBException\n{\r\n    try {\r\n        return iter.prev();\r\n    } catch (DBException e) {\r\n        throw e;\r\n    } catch (RuntimeException e) {\r\n        throw new DBException(e.getMessage(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "peekPrev",
  "errType" : [ "DBException", "RuntimeException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map.Entry<byte[], byte[]> peekPrev() throws DBException\n{\r\n    try {\r\n        return iter.peekPrev();\r\n    } catch (DBException e) {\r\n        throw e;\r\n    } catch (RuntimeException e) {\r\n        throw new DBException(e.getMessage(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "remove",
  "errType" : [ "DBException", "RuntimeException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void remove() throws DBException\n{\r\n    try {\r\n        iter.remove();\r\n    } catch (DBException e) {\r\n        throw e;\r\n    } catch (RuntimeException e) {\r\n        throw new DBException(e.getMessage(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "close",
  "errType" : [ "RuntimeException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    try {\r\n        iter.close();\r\n    } catch (RuntimeException e) {\r\n        throw new IOException(e.getMessage(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    this.conf = conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return this.conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "getSubClusterForNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterId getSubClusterForNode(String nodename) throws YarnException\n{\r\n    return super.getSubClusterForNode(nodename.toUpperCase());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "load",
  "errType" : [ "Exception", "InvalidPathException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void load()\n{\r\n    String fileName = this.conf.get(YarnConfiguration.FEDERATION_MACHINE_LIST, \"\");\r\n    try {\r\n        if (fileName == null || fileName.trim().length() == 0) {\r\n            LOG.info(\"The machine list file path is not specified in the configuration\");\r\n            return;\r\n        }\r\n        Path file = null;\r\n        BufferedReader reader = null;\r\n        try {\r\n            file = Paths.get(fileName);\r\n        } catch (InvalidPathException e) {\r\n            LOG.info(\"The configured machine list file path {} does not exist\", fileName);\r\n            return;\r\n        }\r\n        try {\r\n            reader = Files.newBufferedReader(file, StandardCharsets.UTF_8);\r\n            String line = null;\r\n            while ((line = reader.readLine()) != null) {\r\n                String[] tokens = line.split(\",\");\r\n                if (tokens.length == 3) {\r\n                    String nodeName = tokens[NODE_NAME_INDEX].trim().toUpperCase();\r\n                    SubClusterId subClusterId = SubClusterId.newInstance(tokens[SUBCLUSTER_ID_INDEX].trim());\r\n                    String rackName = tokens[RACK_NAME_INDEX].trim().toUpperCase();\r\n                    if (LOG.isDebugEnabled()) {\r\n                        LOG.debug(\"Loading node into resolver: {} --> {}\", nodeName, subClusterId);\r\n                        LOG.debug(\"Loading rack into resolver: {} --> {} \", rackName, subClusterId);\r\n                    }\r\n                    this.getNodeToSubCluster().put(nodeName, subClusterId);\r\n                    loadRackToSubCluster(rackName, subClusterId);\r\n                } else {\r\n                    LOG.warn(\"Skipping malformed line in machine list: \" + line);\r\n                }\r\n            }\r\n        } finally {\r\n            if (reader != null) {\r\n                reader.close();\r\n            }\r\n        }\r\n        LOG.info(\"Successfully loaded file {}\", fileName);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Failed to parse file \" + fileName, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "loadRackToSubCluster",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void loadRackToSubCluster(String rackName, SubClusterId subClusterId)\n{\r\n    String rackNameUpper = rackName.toUpperCase();\r\n    if (!this.getRackToSubClusters().containsKey(rackNameUpper)) {\r\n        this.getRackToSubClusters().put(rackNameUpper, new HashSet<SubClusterId>());\r\n    }\r\n    this.getRackToSubClusters().get(rackNameUpper).add(subClusterId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "getSubClustersForRack",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<SubClusterId> getSubClustersForRack(String rackname) throws YarnException\n{\r\n    return super.getSubClustersForRack(rackname.toUpperCase());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "getSubClusterForNode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterId getSubClusterForNode(String nodename) throws YarnException\n{\r\n    SubClusterId subClusterId = this.nodeToSubCluster.get(nodename);\r\n    if (subClusterId == null) {\r\n        throw new YarnException(\"Cannot find subClusterId for node \" + nodename);\r\n    }\r\n    return subClusterId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "getSubClustersForRack",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<SubClusterId> getSubClustersForRack(String rackname) throws YarnException\n{\r\n    if (!rackToSubClusters.containsKey(rackname)) {\r\n        throw new YarnException(\"Cannot resolve rack \" + rackname);\r\n    }\r\n    return rackToSubClusters.get(rackname);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "getNodeToSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, SubClusterId> getNodeToSubCluster()\n{\r\n    return nodeToSubCluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "getRackToSubClusters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Set<SubClusterId>> getRackToSubClusters()\n{\r\n    return rackToSubClusters;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MasterKeyProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = MasterKeyProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getKeyId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getKeyId()\n{\r\n    MasterKeyProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.getKeyId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setKeyId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setKeyId(int id)\n{\r\n    maybeInitBuilder();\r\n    builder.setKeyId((id));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "getBytes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ByteBuffer getBytes()\n{\r\n    MasterKeyProtoOrBuilder p = viaProto ? proto : builder;\r\n    return convertFromProtoFormat(p.getBytes());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "setBytes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setBytes(ByteBuffer bytes)\n{\r\n    maybeInitBuilder();\r\n    builder.setBytes(convertToProtoFormat(bytes));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getKeyId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj)\r\n        return true;\r\n    if (!(obj instanceof MasterKey)) {\r\n        return false;\r\n    }\r\n    MasterKey other = (MasterKey) obj;\r\n    if (this.getKeyId() != other.getKeyId()) {\r\n        return false;\r\n    }\r\n    if (!this.getBytes().equals(other.getBytes())) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DistributedSchedulingAllocateResponse newInstance(AllocateResponse allResp)\n{\r\n    DistributedSchedulingAllocateResponse response = Records.newRecord(DistributedSchedulingAllocateResponse.class);\r\n    response.setAllocateResponse(allResp);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAllocateResponse",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAllocateResponse(AllocateResponse response)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAllocateResponse",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AllocateResponse getAllocateResponse()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodesForScheduling",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodesForScheduling(List<RemoteNode> nodesForScheduling)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodesForScheduling",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<RemoteNode> getNodesForScheduling()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "reinitialize",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void reinitialize(FederationPolicyInitializationContext policyContext) throws FederationPolicyInitializationException\n{\r\n    FederationPolicyInitializationContextValidator.validate(policyContext, this.getClass().getCanonicalName());\r\n    setPolicyContext(policyContext);\r\n    this.homeSubcluster = policyContext.getHomeSubcluster();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "splitResourceRequests",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<SubClusterId, List<ResourceRequest>> splitResourceRequests(List<ResourceRequest> resourceRequests, Set<SubClusterId> timedOutSubClusters) throws YarnException\n{\r\n    if (homeSubcluster == null) {\r\n        throw new FederationPolicyException(\"No home subcluster available\");\r\n    }\r\n    Map<SubClusterId, SubClusterInfo> active = getActiveSubclusters();\r\n    if (!active.containsKey(homeSubcluster)) {\r\n        throw new FederationPolicyException(\"The local subcluster \" + homeSubcluster + \" is not active\");\r\n    }\r\n    List<ResourceRequest> resourceRequestsCopy = new ArrayList<>(resourceRequests);\r\n    return Collections.singletonMap(homeSubcluster, resourceRequestsCopy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getResponseId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getResponseId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodeAction",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeAction getNodeAction()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainersToCleanup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ContainerId> getContainersToCleanup()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainersToBeRemovedFromNM",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ContainerId> getContainersToBeRemovedFromNM()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getApplicationsToCleanup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationId> getApplicationsToCleanup()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAppCollectors",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<ApplicationId, AppCollectorData> getAppCollectors()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAppCollectors",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAppCollectors(Map<ApplicationId, AppCollectorData> appCollectorsMap)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setResponseId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResponseId(int responseId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodeAction",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeAction(NodeAction action)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainerTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MasterKey getContainerTokenMasterKey()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setContainerTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerTokenMasterKey(MasterKey secretKey)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MasterKey getNMTokenMasterKey()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNMTokenMasterKey(MasterKey secretKey)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "addAllContainersToCleanup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void addAllContainersToCleanup(List<ContainerId> containers)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "addContainersToBeRemovedFromNM",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void addContainersToBeRemovedFromNM(List<ContainerId> containers)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "addAllApplicationsToCleanup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void addAllApplicationsToCleanup(List<ApplicationId> applications)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainersToSignalList",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<SignalContainerRequest> getContainersToSignalList()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "addAllContainersToSignal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void addAllContainersToSignal(List<SignalContainerRequest> containers)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNextHeartBeatInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getNextHeartBeatInterval()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNextHeartBeatInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNextHeartBeatInterval(long nextHeartBeatInterval)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getDiagnosticsMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticsMessage()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setDiagnosticsMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiagnosticsMessage(String diagnosticsMessage)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAreNodeLabelsAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getAreNodeLabelsAcceptedByRM()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAreNodeLabelsAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAreNodeLabelsAcceptedByRM(boolean areNodeLabelsAcceptedByRM)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getResource()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResource(Resource resource)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainersToUpdate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Container> getContainersToUpdate()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "addAllContainersToUpdate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void addAllContainersToUpdate(Collection<Container> containersToUpdate)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainerQueuingLimit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerQueuingLimit getContainerQueuingLimit()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setContainerQueuingLimit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerQueuingLimit(ContainerQueuingLimit containerQueuingLimit)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getContainersToDecrease",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Container> getContainersToDecrease()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "addAllContainersToDecrease",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void addAllContainersToDecrease(Collection<Container> containersToDecrease)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAreNodeAttributesAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getAreNodeAttributesAcceptedByRM()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAreNodeAttributesAcceptedByRM",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAreNodeAttributesAcceptedByRM(boolean areNodeAttributesAcceptedByRM)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setTokenSequenceNo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTokenSequenceNo(long tokenSequenceNo)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getTokenSequenceNo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTokenSequenceNo()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setSystemCredentialsForApps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSystemCredentialsForApps(Collection<SystemCredentialsForAppsProto> systemCredentials)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getSystemCredentialsForApps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Collection<SystemCredentialsForAppsProto> getSystemCredentialsForApps()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetSubClusterPoliciesConfigurationsRequest newInstance()\n{\r\n    return Records.newRecord(GetSubClusterPoliciesConfigurationsRequest.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationHomeSubClusterRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetApplicationHomeSubClusterRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationId != null) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    GetApplicationHomeSubClusterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (applicationId != null) {\r\n        return applicationId;\r\n    }\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)\n{\r\n    maybeInitBuilder();\r\n    if (applicationId == null) {\r\n        builder.clearApplicationId();\r\n        return;\r\n    }\r\n    this.applicationId = applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId convertFromProtoFormat(ApplicationIdProto appId)\n{\r\n    return new ApplicationIdPBImpl(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId appId)\n{\r\n    return ((ApplicationIdPBImpl) appId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AddApplicationHomeSubClusterResponse newInstance(SubClusterId homeSubCluster)\n{\r\n    AddApplicationHomeSubClusterResponse response = Records.newRecord(AddApplicationHomeSubClusterResponse.class);\r\n    response.setHomeSubCluster(homeSubCluster);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHomeSubCluster(SubClusterId homeSubCluster)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId getHomeSubCluster()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void init()\n{\r\n    factory = new LogAggregationFileControllerFactory(yarnConf);\r\n    base = JOINER.join(WebAppUtils.getHttpSchemePrefix(yarnConf), WebAppUtils.getTimelineReaderWebAppURLWithoutScheme(yarnConf), RESOURCE_URI_STR_V2);\r\n    defaultClusterid = yarnConf.get(YarnConfiguration.RM_CLUSTER_ID, YarnConfiguration.DEFAULT_RM_CLUSTER_ID);\r\n    LOG.info(\"Initialized LogWeService with clusterid \" + defaultClusterid + \" for URI: \" + base);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createTimelineWebClient",
  "errType" : [ "AuthenticationException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Client createTimelineWebClient()\n{\r\n    ClientConfig cfg = new DefaultClientConfig();\r\n    cfg.getClasses().add(YarnJacksonJaxbJsonProvider.class);\r\n    Client client = new Client(new URLConnectionClientHandler(new HttpURLConnectionFactory() {\r\n\r\n        @Override\r\n        public HttpURLConnection getHttpURLConnection(URL url) throws IOException {\r\n            AuthenticatedURL.Token token = new AuthenticatedURL.Token();\r\n            HttpURLConnection conn = null;\r\n            try {\r\n                conn = new AuthenticatedURL().openConnection(url, token);\r\n                LOG.info(\"LogWeService:Connecetion created.\");\r\n            } catch (AuthenticationException e) {\r\n                throw new IOException(e);\r\n            }\r\n            return conn;\r\n        }\r\n    }), cfg);\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "initForReadableEndpoints",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initForReadableEndpoints(HttpServletResponse response)\n{\r\n    response.setContentType(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainerLogsInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Response getContainerLogsInfo(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr, @QueryParam(YarnWebServiceParams.NM_ID) String nmId, @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE) @DefaultValue(\"false\") boolean redirectedFromNode, @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId, @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION) @DefaultValue(\"false\") boolean manualRedirection)\n{\r\n    initForReadableEndpoints(res);\r\n    WrappedLogMetaRequest.Builder logMetaRequestBuilder = LogServlet.createRequestFromContainerId(containerIdStr);\r\n    return logServlet.getContainerLogsInfo(req, logMetaRequestBuilder, nmId, redirectedFromNode, clusterId, manualRedirection);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getNodeHttpAddress",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String getNodeHttpAddress(HttpServletRequest req, String appId, String appAttemptId, String containerId, String clusterId)\n{\r\n    UserGroupInformation callerUGI = LogWebServiceUtils.getUser(req);\r\n    String cId = clusterId != null ? clusterId : defaultClusterid;\r\n    MultivaluedMap<String, String> params = new MultivaluedMapImpl();\r\n    params.add(\"fields\", \"INFO\");\r\n    String path = JOINER.join(\"clusters/\", cId, \"/apps/\", appId, \"/entities/\", TimelineEntityType.YARN_CONTAINER.toString(), \"/\", containerId);\r\n    TimelineEntity conEntity = null;\r\n    try {\r\n        if (callerUGI == null) {\r\n            conEntity = getEntity(path, params);\r\n        } else {\r\n            setUserName(params, callerUGI.getShortUserName());\r\n            conEntity = callerUGI.doAs(new PrivilegedExceptionAction<TimelineEntity>() {\r\n\r\n                @Override\r\n                public TimelineEntity run() throws Exception {\r\n                    return getEntity(path, params);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        LogWebServiceUtils.rewrapAndThrowException(e);\r\n    }\r\n    if (conEntity == null) {\r\n        return null;\r\n    }\r\n    return (String) conEntity.getInfo().get(ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApp",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "BasicAppInfo getApp(HttpServletRequest req, String appId, String clusterId)\n{\r\n    UserGroupInformation callerUGI = LogWebServiceUtils.getUser(req);\r\n    String cId = clusterId != null ? clusterId : defaultClusterid;\r\n    MultivaluedMap<String, String> params = new MultivaluedMapImpl();\r\n    params.add(\"fields\", \"INFO\");\r\n    String path = JOINER.join(\"clusters/\", cId, \"/apps/\", appId);\r\n    TimelineEntity appEntity = null;\r\n    try {\r\n        if (callerUGI == null) {\r\n            appEntity = getEntity(path, params);\r\n        } else {\r\n            setUserName(params, callerUGI.getShortUserName());\r\n            appEntity = callerUGI.doAs(new PrivilegedExceptionAction<TimelineEntity>() {\r\n\r\n                @Override\r\n                public TimelineEntity run() throws Exception {\r\n                    return getEntity(path, params);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        LogWebServiceUtils.rewrapAndThrowException(e);\r\n    }\r\n    if (appEntity == null) {\r\n        return null;\r\n    }\r\n    String appOwner = (String) appEntity.getInfo().get(ApplicationMetricsConstants.USER_ENTITY_INFO);\r\n    String state = (String) appEntity.getInfo().get(ApplicationMetricsConstants.STATE_EVENT_INFO);\r\n    YarnApplicationState appState = YarnApplicationState.valueOf(state);\r\n    return new BasicAppInfo(appState, appOwner);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainerLogFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response getContainerLogFile(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr, @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size, @QueryParam(YarnWebServiceParams.NM_ID) String nmId, @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE) boolean redirectedFromNode, @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId, @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION) @DefaultValue(\"false\") boolean manualRedirection)\n{\r\n    return getLogs(req, res, containerIdStr, filename, format, size, nmId, redirectedFromNode, clusterId, manualRedirection);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getLogs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Response getLogs(@Context HttpServletRequest req, @Context HttpServletResponse res, @PathParam(YarnWebServiceParams.CONTAINER_ID) String containerIdStr, @PathParam(YarnWebServiceParams.CONTAINER_LOG_FILE_NAME) String filename, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_FORMAT) String format, @QueryParam(YarnWebServiceParams.RESPONSE_CONTENT_SIZE) String size, @QueryParam(YarnWebServiceParams.NM_ID) String nmId, @QueryParam(YarnWebServiceParams.REDIRECTED_FROM_NODE) @DefaultValue(\"false\") boolean redirectedFromNode, @QueryParam(YarnWebServiceParams.CLUSTER_ID) String clusterId, @QueryParam(YarnWebServiceParams.MANUAL_REDIRECTION) @DefaultValue(\"false\") boolean manualRedirection)\n{\r\n    initForReadableEndpoints(res);\r\n    return logServlet.getLogFile(req, containerIdStr, filename, format, size, nmId, redirectedFromNode, clusterId, manualRedirection);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getEntity",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "TimelineEntity getEntity(String path, MultivaluedMap<String, String> params) throws IOException\n{\r\n    ClientResponse resp = getClient().resource(base).path(path).queryParams(params).accept(MediaType.APPLICATION_JSON).type(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    if (resp == null || resp.getStatusInfo().getStatusCode() != ClientResponse.Status.OK.getStatusCode()) {\r\n        String msg = \"Response from the timeline reader server is \" + ((resp == null) ? \"null\" : \"not successful,\" + \" HTTP error code: \" + resp.getStatus() + \", Server response:\\n\" + resp.getEntity(String.class));\r\n        LOG.error(msg);\r\n        throw new IOException(msg);\r\n    }\r\n    TimelineEntity entity = resp.getEntity(TimelineEntity.class);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Client getClient()\n{\r\n    if (webTimelineClient == null) {\r\n        synchronized (LogWebService.class) {\r\n            if (webTimelineClient == null) {\r\n                webTimelineClient = createTimelineWebClient();\r\n            }\r\n        }\r\n    }\r\n    return webTimelineClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "setUserName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUserName(MultivaluedMap<String, String> params, String user)\n{\r\n    if (!UserGroupInformation.isSecurityEnabled()) {\r\n        params.add(\"user.name\", user);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClustersInfoResponse newInstance(List<SubClusterInfo> subClusters)\n{\r\n    GetSubClustersInfoResponse subClusterInfos = Records.newRecord(GetSubClustersInfoResponse.class);\r\n    subClusterInfos.setSubClusters(subClusters);\r\n    return subClusterInfos;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getSubClusters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<SubClusterInfo> getSubClusters()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setSubClusters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSubClusters(List<SubClusterInfo> subClusters)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetTimelineCollectorContextRequest newInstance(ApplicationId appId)\n{\r\n    GetTimelineCollectorContextRequest request = Records.newRecord(GetTimelineCollectorContextRequest.class);\r\n    request.setApplicationId(appId);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationId(ApplicationId appId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterRegisterRequest newInstance(SubClusterInfo subClusterInfo)\n{\r\n    SubClusterRegisterRequest registerSubClusterRequest = Records.newRecord(SubClusterRegisterRequest.class);\r\n    registerSubClusterRequest.setSubClusterInfo(subClusterInfo);\r\n    return registerSubClusterRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterInfo getSubClusterInfo()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSubClusterInfo(SubClusterInfo subClusterInfo)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "NodeHealthStatus newInstance(boolean isNodeHealthy, String healthReport, long lastHealthReport)\n{\r\n    NodeHealthStatus status = Records.newRecord(NodeHealthStatus.class);\r\n    status.setIsNodeHealthy(isNodeHealthy);\r\n    status.setHealthReport(healthReport);\r\n    status.setLastHealthReportTime(lastHealthReport);\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getIsNodeHealthy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getIsNodeHealthy()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setIsNodeHealthy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setIsNodeHealthy(boolean isNodeHealthy)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getHealthReport",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHealthReport()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setHealthReport",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHealthReport(String healthReport)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getLastHealthReportTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLastHealthReportTime()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setLastHealthReportTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLastHealthReportTime(long lastHealthReport)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UnRegisterNodeManagerRequest newInstance(NodeId nodeId)\n{\r\n    UnRegisterNodeManagerRequest nodeHeartbeatRequest = Records.newRecord(UnRegisterNodeManagerRequest.class);\r\n    nodeHeartbeatRequest.setNodeId(nodeId);\r\n    return nodeHeartbeatRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId getNodeId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeId(NodeId nodeId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "setAuthFilterConfig",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setAuthFilterConfig(Configuration conf)\n{\r\n    filterConfig = new HashMap<String, String>();\r\n    for (Map.Entry<String, String> entry : conf.getPropsWithPrefix(ProxyUsers.CONF_HADOOP_PROXYUSER).entrySet()) {\r\n        filterConfig.put(\"proxyuser\" + entry.getKey(), entry.getValue());\r\n    }\r\n    Map<String, String> timelineAuthProps = AuthenticationFilterInitializer.getFilterConfigMap(conf, TIMELINE_HTTP_AUTH_PREFIX);\r\n    filterConfig.putAll(timelineAuthProps);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "getFilterConfig",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, String> getFilterConfig()\n{\r\n    return filterConfig;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "initFilter",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void initFilter(FilterContainer container, Configuration conf)\n{\r\n    setAuthFilterConfig(conf);\r\n    String authType = filterConfig.get(AuthenticationFilter.AUTH_TYPE);\r\n    if (authType.equals(PseudoAuthenticationHandler.TYPE)) {\r\n        filterConfig.put(AuthenticationFilter.AUTH_TYPE, PseudoDelegationTokenAuthenticationHandler.class.getName());\r\n    } else if (authType.equals(KerberosAuthenticationHandler.TYPE)) {\r\n        filterConfig.put(AuthenticationFilter.AUTH_TYPE, KerberosDelegationTokenAuthenticationHandler.class.getName());\r\n    }\r\n    filterConfig.put(DelegationTokenAuthenticationHandler.TOKEN_KIND, TimelineDelegationTokenIdentifier.KIND_NAME.toString());\r\n    container.addGlobalFilter(\"Timeline Authentication Filter\", TimelineAuthenticationFilter.class.getName(), filterConfig);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationHomeSubClusterResponse newInstance(ApplicationHomeSubCluster applicationHomeSubCluster)\n{\r\n    GetApplicationHomeSubClusterResponse mapResponse = Records.newRecord(GetApplicationHomeSubClusterResponse.class);\r\n    mapResponse.setApplicationHomeSubCluster(applicationHomeSubCluster);\r\n    return mapResponse;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHomeSubCluster getApplicationHomeSubCluster()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationHomeSubCluster(ApplicationHomeSubCluster applicationHomeSubCluster)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AddApplicationHomeSubClusterRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = AddApplicationHomeSubClusterRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationHomeSubCluster getApplicationHomeSubCluster()\n{\r\n    AddApplicationHomeSubClusterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAppSubclusterMap()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getAppSubclusterMap());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationHomeSubCluster(ApplicationHomeSubCluster applicationInfo)\n{\r\n    maybeInitBuilder();\r\n    if (applicationInfo == null) {\r\n        builder.clearAppSubclusterMap();\r\n        return;\r\n    }\r\n    builder.setAppSubclusterMap(convertToProtoFormat(applicationInfo));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHomeSubCluster convertFromProtoFormat(ApplicationHomeSubClusterProto sc)\n{\r\n    return new ApplicationHomeSubClusterPBImpl(sc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationHomeSubClusterProto convertToProtoFormat(ApplicationHomeSubCluster sc)\n{\r\n    return ((ApplicationHomeSubClusterPBImpl) sc).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeHeartbeatRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.nodeStatus != null) {\r\n        builder.setNodeStatus(convertToProtoFormat(this.nodeStatus));\r\n    }\r\n    if (this.lastKnownContainerTokenMasterKey != null) {\r\n        builder.setLastKnownContainerTokenMasterKey(convertToProtoFormat(this.lastKnownContainerTokenMasterKey));\r\n    }\r\n    if (this.lastKnownNMTokenMasterKey != null) {\r\n        builder.setLastKnownNmTokenMasterKey(convertToProtoFormat(this.lastKnownNMTokenMasterKey));\r\n    }\r\n    if (this.labels != null) {\r\n        builder.clearNodeLabels();\r\n        Builder newBuilder = NodeLabelsProto.newBuilder();\r\n        for (NodeLabel label : labels) {\r\n            newBuilder.addNodeLabels(convertToProtoFormat(label));\r\n        }\r\n        builder.setNodeLabels(newBuilder.build());\r\n    }\r\n    if (this.attributes != null) {\r\n        builder.clearNodeAttributes();\r\n        YarnServerCommonServiceProtos.NodeAttributesProto.Builder attBuilder = YarnServerCommonServiceProtos.NodeAttributesProto.newBuilder();\r\n        for (NodeAttribute attribute : attributes) {\r\n            attBuilder.addNodeAttributes(convertToProtoFormat(attribute));\r\n        }\r\n        builder.setNodeAttributes(attBuilder.build());\r\n    }\r\n    if (this.logAggregationReportsForApps != null) {\r\n        addLogAggregationStatusForAppsToProto();\r\n    }\r\n    if (this.registeringCollectors != null) {\r\n        addRegisteringCollectorsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addLogAggregationStatusForAppsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addLogAggregationStatusForAppsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearLogAggregationReportsForApps();\r\n    if (this.logAggregationReportsForApps == null) {\r\n        return;\r\n    }\r\n    Iterable<LogAggregationReportProto> it = new Iterable<LogAggregationReportProto>() {\r\n\r\n        @Override\r\n        public Iterator<LogAggregationReportProto> iterator() {\r\n            return new Iterator<LogAggregationReportProto>() {\r\n\r\n                private Iterator<LogAggregationReport> iter = logAggregationReportsForApps.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public LogAggregationReportProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllLogAggregationReportsForApps(it);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationReportProto convertToProtoFormat(LogAggregationReport value)\n{\r\n    return ((LogAggregationReportPBImpl) value).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "addRegisteringCollectorsToProto",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void addRegisteringCollectorsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearRegisteringCollectors();\r\n    for (Map.Entry<ApplicationId, AppCollectorData> entry : registeringCollectors.entrySet()) {\r\n        AppCollectorData data = entry.getValue();\r\n        AppCollectorDataProto.Builder appCollectorDataBuilder = AppCollectorDataProto.newBuilder().setAppId(convertToProtoFormat(entry.getKey())).setAppCollectorAddr(data.getCollectorAddr()).setRmIdentifier(data.getRMIdentifier()).setVersion(data.getVersion());\r\n        if (data.getCollectorToken() != null) {\r\n            appCollectorDataBuilder.setAppCollectorToken(convertToProtoFormat(data.getCollectorToken()));\r\n        }\r\n        builder.addRegisteringCollectors(appCollectorDataBuilder);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = NodeHeartbeatRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeStatus getNodeStatus()\n{\r\n    NodeHeartbeatRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.nodeStatus != null) {\r\n        return this.nodeStatus;\r\n    }\r\n    if (!p.hasNodeStatus()) {\r\n        return null;\r\n    }\r\n    this.nodeStatus = convertFromProtoFormat(p.getNodeStatus());\r\n    return this.nodeStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeStatus(NodeStatus nodeStatus)\n{\r\n    maybeInitBuilder();\r\n    if (nodeStatus == null)\r\n        builder.clearNodeStatus();\r\n    this.nodeStatus = nodeStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLastKnownContainerTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MasterKey getLastKnownContainerTokenMasterKey()\n{\r\n    NodeHeartbeatRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.lastKnownContainerTokenMasterKey != null) {\r\n        return this.lastKnownContainerTokenMasterKey;\r\n    }\r\n    if (!p.hasLastKnownContainerTokenMasterKey()) {\r\n        return null;\r\n    }\r\n    this.lastKnownContainerTokenMasterKey = convertFromProtoFormat(p.getLastKnownContainerTokenMasterKey());\r\n    return this.lastKnownContainerTokenMasterKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLastKnownContainerTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLastKnownContainerTokenMasterKey(MasterKey masterKey)\n{\r\n    maybeInitBuilder();\r\n    if (masterKey == null)\r\n        builder.clearLastKnownContainerTokenMasterKey();\r\n    this.lastKnownContainerTokenMasterKey = masterKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLastKnownNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MasterKey getLastKnownNMTokenMasterKey()\n{\r\n    NodeHeartbeatRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.lastKnownNMTokenMasterKey != null) {\r\n        return this.lastKnownNMTokenMasterKey;\r\n    }\r\n    if (!p.hasLastKnownNmTokenMasterKey()) {\r\n        return null;\r\n    }\r\n    this.lastKnownNMTokenMasterKey = convertFromProtoFormat(p.getLastKnownNmTokenMasterKey());\r\n    return this.lastKnownNMTokenMasterKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLastKnownNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLastKnownNMTokenMasterKey(MasterKey masterKey)\n{\r\n    maybeInitBuilder();\r\n    if (masterKey == null)\r\n        builder.clearLastKnownNmTokenMasterKey();\r\n    this.lastKnownNMTokenMasterKey = masterKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getRegisteringCollectors",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<ApplicationId, AppCollectorData> getRegisteringCollectors()\n{\r\n    if (this.registeringCollectors != null) {\r\n        return this.registeringCollectors;\r\n    }\r\n    initRegisteredCollectors();\r\n    return registeringCollectors;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initRegisteredCollectors",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void initRegisteredCollectors()\n{\r\n    NodeHeartbeatRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<AppCollectorDataProto> list = p.getRegisteringCollectorsList();\r\n    if (!list.isEmpty()) {\r\n        this.registeringCollectors = new HashMap<>();\r\n        for (AppCollectorDataProto c : list) {\r\n            ApplicationId appId = convertFromProtoFormat(c.getAppId());\r\n            Token collectorToken = null;\r\n            if (c.hasAppCollectorToken()) {\r\n                collectorToken = convertFromProtoFormat(c.getAppCollectorToken());\r\n            }\r\n            AppCollectorData data = AppCollectorData.newInstance(appId, c.getAppCollectorAddr(), c.getRmIdentifier(), c.getVersion(), collectorToken);\r\n            this.registeringCollectors.put(appId, data);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setRegisteringCollectors",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRegisteringCollectors(Map<ApplicationId, AppCollectorData> registeredCollectors)\n{\r\n    if (registeredCollectors == null || registeredCollectors.isEmpty()) {\r\n        return;\r\n    }\r\n    maybeInitBuilder();\r\n    this.registeringCollectors = new HashMap<>();\r\n    this.registeringCollectors.putAll(registeredCollectors);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeStatusPBImpl convertFromProtoFormat(NodeStatusProto p)\n{\r\n    return new NodeStatusPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeStatusProto convertToProtoFormat(NodeStatus t)\n{\r\n    return ((NodeStatusPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MasterKeyPBImpl convertFromProtoFormat(MasterKeyProto p)\n{\r\n    return new MasterKeyPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MasterKeyProto convertToProtoFormat(MasterKey t)\n{\r\n    return ((MasterKeyPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenPBImpl convertFromProtoFormat(TokenProto p)\n{\r\n    return new TokenPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TokenProto convertToProtoFormat(Token t)\n{\r\n    return ((TokenPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<NodeLabel> getNodeLabels()\n{\r\n    initNodeLabels();\r\n    return this.labels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeLabels(Set<NodeLabel> nodeLabels)\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeLabels();\r\n    this.labels = nodeLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initNodeLabels()\n{\r\n    if (this.labels != null) {\r\n        return;\r\n    }\r\n    NodeHeartbeatRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeLabels()) {\r\n        labels = null;\r\n        return;\r\n    }\r\n    NodeLabelsProto nodeLabels = p.getNodeLabels();\r\n    labels = new HashSet<NodeLabel>();\r\n    for (NodeLabelProto nlp : nodeLabels.getNodeLabelsList()) {\r\n        labels.add(convertFromProtoFormat(nlp));\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeLabelPBImpl convertFromProtoFormat(NodeLabelProto p)\n{\r\n    return new NodeLabelPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeLabelProto convertToProtoFormat(NodeLabel t)\n{\r\n    return ((NodeLabelPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<NodeAttribute> getNodeAttributes()\n{\r\n    initNodeAttributes();\r\n    return this.attributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initNodeAttributes()\n{\r\n    if (this.attributes != null) {\r\n        return;\r\n    }\r\n    NodeHeartbeatRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasNodeAttributes()) {\r\n        return;\r\n    }\r\n    YarnServerCommonServiceProtos.NodeAttributesProto nodeAttributes = p.getNodeAttributes();\r\n    attributes = new HashSet<>();\r\n    for (NodeAttributeProto attributeProto : nodeAttributes.getNodeAttributesList()) {\r\n        attributes.add(convertFromProtoFormat(attributeProto));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setNodeAttributes(Set<NodeAttribute> nodeAttributes)\n{\r\n    maybeInitBuilder();\r\n    builder.clearNodeAttributes();\r\n    this.attributes = nodeAttributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeAttributePBImpl convertFromProtoFormat(NodeAttributeProto p)\n{\r\n    return new NodeAttributePBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeAttributeProto convertToProtoFormat(NodeAttribute attribute)\n{\r\n    return ((NodeAttributePBImpl) attribute).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLogAggregationReportsForApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<LogAggregationReport> getLogAggregationReportsForApps()\n{\r\n    if (this.logAggregationReportsForApps != null) {\r\n        return this.logAggregationReportsForApps;\r\n    }\r\n    initLogAggregationReportsForApps();\r\n    return logAggregationReportsForApps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "initLogAggregationReportsForApps",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initLogAggregationReportsForApps()\n{\r\n    NodeHeartbeatRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<LogAggregationReportProto> list = p.getLogAggregationReportsForAppsList();\r\n    this.logAggregationReportsForApps = new ArrayList<LogAggregationReport>();\r\n    for (LogAggregationReportProto c : list) {\r\n        this.logAggregationReportsForApps.add(convertFromProtoFormat(c));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LogAggregationReport convertFromProtoFormat(LogAggregationReportProto logAggregationReport)\n{\r\n    return new LogAggregationReportPBImpl(logAggregationReport);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLogAggregationReportsForApps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setLogAggregationReportsForApps(List<LogAggregationReport> logAggregationStatusForApps)\n{\r\n    if (logAggregationStatusForApps == null) {\r\n        builder.clearLogAggregationReportsForApps();\r\n    }\r\n    this.logAggregationReportsForApps = logAggregationStatusForApps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setTokenSequenceNo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setTokenSequenceNo(long tokenSequenceNo)\n{\r\n    maybeInitBuilder();\r\n    this.builder.setTokenSequenceNo(tokenSequenceNo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getTokenSequenceNo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getTokenSequenceNo()\n{\r\n    NodeHeartbeatRequestProtoOrBuilder p = this.viaProto ? this.proto : this.builder;\r\n    return p.getTokenSequenceNo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterRegisterResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterHeartbeatRequest newInstance(SubClusterId subClusterId, SubClusterState state, String capability)\n{\r\n    return newInstance(subClusterId, 0, state, capability);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "SubClusterHeartbeatRequest newInstance(SubClusterId subClusterId, long lastHeartBeat, SubClusterState state, String capability)\n{\r\n    SubClusterHeartbeatRequest subClusterHeartbeatRequest = Records.newRecord(SubClusterHeartbeatRequest.class);\r\n    subClusterHeartbeatRequest.setSubClusterId(subClusterId);\r\n    subClusterHeartbeatRequest.setLastHeartBeat(lastHeartBeat);\r\n    subClusterHeartbeatRequest.setState(state);\r\n    subClusterHeartbeatRequest.setCapability(capability);\r\n    return subClusterHeartbeatRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId getSubClusterId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSubClusterId(SubClusterId subClusterId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getLastHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLastHeartBeat()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setLastHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLastHeartBeat(long time)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterState getState()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setState(SubClusterState state)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getCapability",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getCapability()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setCapability",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCapability(String capability)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String toString()\n{\r\n    return \"SubClusterHeartbeatRequest [getSubClusterId() = \" + getSubClusterId() + \", getState() = \" + getState() + \", getLastHeartBeat = \" + getLastHeartBeat() + \", getCapability() = \" + getCapability() + \"]\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "AppCollectorData newInstance(ApplicationId id, String collectorAddr, long rmIdentifier, long version, Token token)\n{\r\n    AppCollectorData appCollectorData = Records.newRecord(AppCollectorData.class);\r\n    appCollectorData.setApplicationId(id);\r\n    appCollectorData.setCollectorAddr(collectorAddr);\r\n    appCollectorData.setRMIdentifier(rmIdentifier);\r\n    appCollectorData.setVersion(version);\r\n    appCollectorData.setCollectorToken(token);\r\n    return appCollectorData;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppCollectorData newInstance(ApplicationId id, String collectorAddr, long rmIdentifier, long version)\n{\r\n    return newInstance(id, collectorAddr, rmIdentifier, version, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppCollectorData newInstance(ApplicationId id, String collectorAddr, Token token)\n{\r\n    return newInstance(id, collectorAddr, DEFAULT_TIMESTAMP_VALUE, DEFAULT_TIMESTAMP_VALUE, token);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppCollectorData newInstance(ApplicationId id, String collectorAddr)\n{\r\n    return newInstance(id, collectorAddr, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "happensBefore",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean happensBefore(AppCollectorData dataA, AppCollectorData dataB)\n{\r\n    if (dataA == null && dataB == null) {\r\n        return false;\r\n    } else if (dataA == null || dataB == null) {\r\n        return dataA == null;\r\n    }\r\n    return (dataA.getRMIdentifier() < dataB.getRMIdentifier()) || ((dataA.getRMIdentifier() == dataB.getRMIdentifier()) && (dataA.getVersion() < dataB.getVersion()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "isStamped",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isStamped()\n{\r\n    return (getRMIdentifier() != DEFAULT_TIMESTAMP_VALUE) || (getVersion() != DEFAULT_TIMESTAMP_VALUE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationId(ApplicationId id)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getCollectorAddr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getCollectorAddr()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setCollectorAddr",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCollectorAddr(String addr)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getRMIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getRMIdentifier()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setRMIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRMIdentifier(long rmId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getVersion()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVersion(long version)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getCollectorToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Token getCollectorToken()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setCollectorToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCollectorToken(Token token)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterRegisterResponse newInstance()\n{\r\n    SubClusterRegisterResponse response = Records.newRecord(SubClusterRegisterResponse.class);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = AddApplicationHomeSubClusterResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AddApplicationHomeSubClusterResponseProto getProto()\n{\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setHomeSubCluster(SubClusterId homeSubCluster)\n{\r\n    maybeInitBuilder();\r\n    if (homeSubCluster == null) {\r\n        builder.clearHomeSubCluster();\r\n        return;\r\n    }\r\n    builder.setHomeSubCluster(convertToProtoFormat(homeSubCluster));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterId getHomeSubCluster()\n{\r\n    AddApplicationHomeSubClusterResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasHomeSubCluster()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getHomeSubCluster());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId convertFromProtoFormat(SubClusterIdProto sc)\n{\r\n    return new SubClusterIdPBImpl(sc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterIdProto convertToProtoFormat(SubClusterId sc)\n{\r\n    return ((SubClusterIdPBImpl) sc).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "setVolumeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVolumeId(VolumeId volumeId)\n{\r\n    this.volumeId = volumeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "setVolumeName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVolumeName(String volumeName)\n{\r\n    this.volumeName = volumeName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "setVolumeCapabilityRange",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVolumeCapabilityRange(VolumeCapabilityRange capability)\n{\r\n    this.volumeCapabilityRange = capability;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "setDriverName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDriverName(String driverName)\n{\r\n    this.driverName = driverName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "setMountPoint",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMountPoint(String mountPoint)\n{\r\n    this.mountPoint = mountPoint;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "isProvisionedVolume",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isProvisionedVolume()\n{\r\n    return this.volumeId != null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "getVolumeId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "VolumeId getVolumeId()\n{\r\n    return volumeId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "getVolumeName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVolumeName()\n{\r\n    return volumeName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "getVolumeCapabilityRange",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "VolumeCapabilityRange getVolumeCapabilityRange()\n{\r\n    return volumeCapabilityRange;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "getDriverName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDriverName()\n{\r\n    return driverName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "getMountPoint",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getMountPoint()\n{\r\n    return mountPoint;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "newBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "VolumeSpecBuilder newBuilder()\n{\r\n    return new VolumeSpecBuilder();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "fromResource",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "List<VolumeMetaData> fromResource(ResourceInformation resourceInfo) throws InvalidVolumeException\n{\r\n    List<VolumeMetaData> volumeMetaData = new ArrayList<>();\r\n    if (resourceInfo != null) {\r\n        if (resourceInfo.getTags() != null && resourceInfo.getTags().contains(CsiConstants.CSI_VOLUME_RESOURCE_TAG)) {\r\n            VolumeSpecBuilder builder = VolumeMetaData.newBuilder();\r\n            if (resourceInfo.getAttributes().containsKey(CsiConstants.CSI_VOLUME_ID)) {\r\n                String id = resourceInfo.getAttributes().get(CsiConstants.CSI_VOLUME_ID);\r\n                builder.volumeId(new VolumeId(id));\r\n            }\r\n            if (resourceInfo.getAttributes().containsKey(CsiConstants.CSI_VOLUME_NAME)) {\r\n                builder.volumeName(resourceInfo.getAttributes().get(CsiConstants.CSI_VOLUME_NAME));\r\n            }\r\n            if (resourceInfo.getAttributes().containsKey(CsiConstants.CSI_DRIVER_NAME)) {\r\n                builder.driverName(resourceInfo.getAttributes().get(CsiConstants.CSI_DRIVER_NAME));\r\n            }\r\n            if (resourceInfo.getAttributes().containsKey(CsiConstants.CSI_VOLUME_MOUNT)) {\r\n                builder.mountPoint(resourceInfo.getAttributes().get(CsiConstants.CSI_VOLUME_MOUNT));\r\n            }\r\n            VolumeCapabilityRange volumeCapabilityRange = VolumeCapabilityRange.newBuilder().minCapacity(resourceInfo.getValue()).unit(resourceInfo.getUnits()).build();\r\n            builder.capability(volumeCapabilityRange);\r\n            volumeMetaData.add(builder.build());\r\n        }\r\n    }\r\n    return volumeMetaData;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "String toString()\n{\r\n    JsonObject json = new JsonObject();\r\n    if (!Strings.isNullOrEmpty(volumeName)) {\r\n        json.addProperty(CsiConstants.CSI_VOLUME_NAME, volumeName);\r\n    }\r\n    if (volumeId != null) {\r\n        json.addProperty(CsiConstants.CSI_VOLUME_ID, volumeId.toString());\r\n    }\r\n    if (volumeCapabilityRange != null) {\r\n        json.addProperty(CsiConstants.CSI_VOLUME_CAPABILITY, volumeCapabilityRange.toString());\r\n    }\r\n    if (!Strings.isNullOrEmpty(driverName)) {\r\n        json.addProperty(CsiConstants.CSI_DRIVER_NAME, driverName);\r\n    }\r\n    if (!Strings.isNullOrEmpty(mountPoint)) {\r\n        json.addProperty(CsiConstants.CSI_VOLUME_MOUNT, mountPoint);\r\n    }\r\n    return json.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DeleteApplicationHomeSubClusterRequest newInstance(ApplicationId applicationId)\n{\r\n    DeleteApplicationHomeSubClusterRequest deleteApplicationRequest = Records.newRecord(DeleteApplicationHomeSubClusterRequest.class);\r\n    deleteApplicationRequest.setApplicationId(applicationId);\r\n    return deleteApplicationRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationId(ApplicationId applicationId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterId newInstance(String subClusterId)\n{\r\n    SubClusterId id = Records.newRecord(SubClusterId.class);\r\n    id.setId(subClusterId);\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String subClusterId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    SubClusterId other = (SubClusterId) obj;\r\n    return this.getId().equals(other.getId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getId().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int compareTo(SubClusterId other)\n{\r\n    return getId().compareTo(other.getId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(getId());\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void add(AppInfo appinfo)\n{\r\n    app.add(appinfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getApps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ArrayList<AppInfo> getApps()\n{\r\n    return app;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "getMinCapacity",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getMinCapacity()\n{\r\n    return minCapacity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "getMaxCapacity",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getMaxCapacity()\n{\r\n    return maxCapacity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "getUnit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUnit()\n{\r\n    return unit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"MinCapability: \" + minCapacity + unit + \", MaxCapability: \" + maxCapacity + unit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\volume\\csi",
  "methodName" : "newBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "VolumeCapabilityBuilder newBuilder()\n{\r\n    return new VolumeCapabilityBuilder();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClusterPoliciesConfigurationsResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetSubClusterPoliciesConfigurationsResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.subClusterPolicies != null) {\r\n        addSubClusterPoliciesConfigurationsToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getPoliciesConfigs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<SubClusterPolicyConfiguration> getPoliciesConfigs()\n{\r\n    initSubClusterPoliciesConfigurationsList();\r\n    return this.subClusterPolicies;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setPoliciesConfigs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPoliciesConfigs(List<SubClusterPolicyConfiguration> policyConfigurations)\n{\r\n    maybeInitBuilder();\r\n    if (policyConfigurations == null) {\r\n        builder.clearPoliciesConfigurations();\r\n    }\r\n    this.subClusterPolicies = policyConfigurations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "initSubClusterPoliciesConfigurationsList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initSubClusterPoliciesConfigurationsList()\n{\r\n    if (this.subClusterPolicies != null) {\r\n        return;\r\n    }\r\n    GetSubClusterPoliciesConfigurationsResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<SubClusterPolicyConfigurationProto> subClusterPoliciesList = p.getPoliciesConfigurationsList();\r\n    subClusterPolicies = new ArrayList<SubClusterPolicyConfiguration>();\r\n    for (SubClusterPolicyConfigurationProto r : subClusterPoliciesList) {\r\n        subClusterPolicies.add(convertFromProtoFormat(r));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "addSubClusterPoliciesConfigurationsToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addSubClusterPoliciesConfigurationsToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearPoliciesConfigurations();\r\n    if (subClusterPolicies == null) {\r\n        return;\r\n    }\r\n    Iterable<SubClusterPolicyConfigurationProto> iterable = new Iterable<SubClusterPolicyConfigurationProto>() {\r\n\r\n        @Override\r\n        public Iterator<SubClusterPolicyConfigurationProto> iterator() {\r\n            return new Iterator<SubClusterPolicyConfigurationProto>() {\r\n\r\n                private Iterator<SubClusterPolicyConfiguration> iter = subClusterPolicies.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public SubClusterPolicyConfigurationProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllPoliciesConfigurations(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterPolicyConfiguration convertFromProtoFormat(SubClusterPolicyConfigurationProto policy)\n{\r\n    return new SubClusterPolicyConfigurationPBImpl(policy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterPolicyConfigurationProto convertToProtoFormat(SubClusterPolicyConfiguration policy)\n{\r\n    return ((SubClusterPolicyConfigurationPBImpl) policy).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getAccepted",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getAccepted()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setAccepted",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAccepted(boolean b)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "OpportunisticContainersStatus newInstance()\n{\r\n    return Records.newRecord(OpportunisticContainersStatus.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getRunningOpportContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getRunningOpportContainers()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setRunningOpportContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRunningOpportContainers(int runningOpportContainers)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getOpportMemoryUsed",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getOpportMemoryUsed()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setOpportMemoryUsed",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOpportMemoryUsed(long opportMemoryUsed)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getOpportCoresUsed",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getOpportCoresUsed()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setOpportCoresUsed",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOpportCoresUsed(int opportCoresUsed)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getQueuedOpportContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getQueuedOpportContainers()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setQueuedOpportContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setQueuedOpportContainers(int queuedOpportContainers)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getWaitQueueLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getWaitQueueLength()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setWaitQueueLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setWaitQueueLength(int waitQueueLength)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getEstimatedQueueWaitTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getEstimatedQueueWaitTime()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setEstimatedQueueWaitTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setEstimatedQueueWaitTime(int queueWaitTime)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "getOpportQueueCapacity",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getOpportQueueCapacity()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\records",
  "methodName" : "setOpportQueueCapacity",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOpportQueueCapacity(int queueCapacity)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "render",
  "errType" : null,
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void render(Block html)\n{\r\n    boolean isAdmin = false;\r\n    UserGroupInformation callerUGI = this.getCallerUGI();\r\n    if (adminAclsManager.areACLsEnabled()) {\r\n        if (callerUGI != null && adminAclsManager.isAdmin(callerUGI)) {\r\n            isAdmin = true;\r\n        }\r\n    } else {\r\n        isAdmin = true;\r\n    }\r\n    if (!isAdmin) {\r\n        html.div().p().__(\"This page is for admins only.\").__().__();\r\n        return;\r\n    }\r\n    if (GenericsUtil.isLog4jLogger(ErrorsAndWarningsBlock.class)) {\r\n        html.__(ErrorMetrics.class);\r\n        html.__(WarningMetrics.class);\r\n        html.div().button().$onclick(\"reloadPage()\").b(\"View data for the last \").__().select().$id(\"cutoff\").option().$value(\"60\").__(\"1 min\").__().option().$value(\"300\").__(\"5 min\").__().option().$value(\"900\").__(\"15 min\").__().option().$value(\"3600\").__(\"1 hour\").__().option().$value(\"21600\").__(\"6 hours\").__().option().$value(\"43200\").__(\"12 hours\").__().option().$value(\"86400\").__(\"24 hours\").__().__().__();\r\n        String script = \"function reloadPage() {\" + \" var timePeriod = $(\\\"#cutoff\\\").val();\" + \" document.location.href = '/cluster/errors-and-warnings?cutoff=' + timePeriod\" + \"}\";\r\n        script = script + \"; function toggleContent(element) {\" + \"  $(element).parent().siblings('.toggle-content').fadeToggle();\" + \"}\";\r\n        html.script().$type(\"text/javascript\").__(script).__();\r\n        html.style(\".toggle-content { display: none; }\");\r\n        Log4jWarningErrorMetricsAppender appender = Log4jWarningErrorMetricsAppender.findAppender();\r\n        if (appender == null) {\r\n            return;\r\n        }\r\n        List<Long> cutoff = new ArrayList<>();\r\n        Hamlet.TBODY<Hamlet.TABLE<Hamlet>> errorsTable = html.table(\"#messages\").thead().tr().th(\".message\", \"Message\").th(\".type\", \"Type\").th(\".count\", \"Count\").th(\".lasttime\", \"Latest Message Time\").__().__().tbody();\r\n        cutoff.add((Time.now() - cutoffPeriodSeconds * 1000) / 1000);\r\n        List<Map<String, Log4jWarningErrorMetricsAppender.Element>> errorsData = appender.getErrorMessagesAndCounts(cutoff);\r\n        List<Map<String, Log4jWarningErrorMetricsAppender.Element>> warningsData = appender.getWarningMessagesAndCounts(cutoff);\r\n        Map<String, List<Map<String, Log4jWarningErrorMetricsAppender.Element>>> sources = new HashMap<>();\r\n        sources.put(\"Error\", errorsData);\r\n        sources.put(\"Warning\", warningsData);\r\n        int maxDisplayLength = 80;\r\n        for (Map.Entry<String, List<Map<String, Log4jWarningErrorMetricsAppender.Element>>> source : sources.entrySet()) {\r\n            String type = source.getKey();\r\n            List<Map<String, Log4jWarningErrorMetricsAppender.Element>> data = source.getValue();\r\n            if (data.size() > 0) {\r\n                Map<String, Log4jWarningErrorMetricsAppender.Element> map = data.get(0);\r\n                for (Map.Entry<String, Log4jWarningErrorMetricsAppender.Element> entry : map.entrySet()) {\r\n                    String message = entry.getKey();\r\n                    Hamlet.TR<Hamlet.TBODY<Hamlet.TABLE<Hamlet>>> row = errorsTable.tr();\r\n                    Hamlet.TD<Hamlet.TR<Hamlet.TBODY<Hamlet.TABLE<Hamlet>>>> cell = row.td();\r\n                    if (message.length() > maxDisplayLength || message.contains(\"\\n\")) {\r\n                        String displayMessage = entry.getKey().split(\"\\n\")[0];\r\n                        if (displayMessage.length() > maxDisplayLength) {\r\n                            displayMessage = displayMessage.substring(0, maxDisplayLength);\r\n                        }\r\n                        cell.pre().a().$href(\"#\").$onclick(\"toggleContent(this);\").$style(\"white-space: pre\").__(displayMessage).__().__().div().$class(\"toggle-content\").pre().__(message).__().__().__();\r\n                    } else {\r\n                        cell.pre().__(message).__().__();\r\n                    }\r\n                    Log4jWarningErrorMetricsAppender.Element ele = entry.getValue();\r\n                    row.td(type).td(String.valueOf(ele.count)).td(Times.format(ele.timestampSeconds * 1000)).__();\r\n                }\r\n            }\r\n        }\r\n        errorsTable.__().__();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "builder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Builder builder()\n{\r\n    return new Builder();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getAppId(ApplicationId appId, ApplicationAttemptId applicationAttemptId, ContainerId containerId)\n{\r\n    if (appId == null) {\r\n        if (applicationAttemptId == null) {\r\n            return containerId.getApplicationAttemptId().getApplicationId().toString();\r\n        } else {\r\n            return applicationAttemptId.getApplicationId().toString();\r\n        }\r\n    }\r\n    return appId.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getAppId()\n{\r\n    return getAppId(appId, applicationAttemptId, containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getAppAttemptId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getAppAttemptId()\n{\r\n    if (applicationAttemptId == null) {\r\n        if (containerId != null) {\r\n            return containerId.getApplicationAttemptId().toString();\r\n        } else {\r\n            return null;\r\n        }\r\n    } else {\r\n        return applicationAttemptId.toString();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainerLogMetas",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<ContainerLogMeta> getContainerLogMetas() throws IOException\n{\r\n    ApplicationId applicationId = ApplicationId.fromString(getAppId());\r\n    ContainerLogsRequest request = new ContainerLogsRequest();\r\n    request.setAppId(applicationId);\r\n    request.setAppAttemptId(applicationAttemptId);\r\n    if (containerId != null) {\r\n        request.setContainerId(containerId.toString());\r\n    }\r\n    request.setAppOwner(appOwner);\r\n    request.setNodeId(nodeId);\r\n    return factory.getFileControllerForRead(applicationId, appOwner).readAggregatedLogsMeta(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterRegisterRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SubClusterRegisterRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.subClusterInfo != null) {\r\n        builder.setSubClusterInfo(convertToProtoFormat(this.subClusterInfo));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterInfo getSubClusterInfo()\n{\r\n    SubClusterRegisterRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.subClusterInfo != null) {\r\n        return this.subClusterInfo;\r\n    }\r\n    if (!p.hasSubClusterInfo()) {\r\n        return null;\r\n    }\r\n    this.subClusterInfo = convertFromProtoFormat(p.getSubClusterInfo());\r\n    return this.subClusterInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setSubClusterInfo(SubClusterInfo subClusterInfo)\n{\r\n    maybeInitBuilder();\r\n    if (subClusterInfo == null) {\r\n        builder.clearSubClusterInfo();\r\n    }\r\n    this.subClusterInfo = subClusterInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterInfo convertFromProtoFormat(SubClusterInfoProto clusterInfo)\n{\r\n    return new SubClusterInfoPBImpl(clusterInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterInfoProto convertToProtoFormat(SubClusterInfo clusterInfo)\n{\r\n    return ((SubClusterInfoPBImpl) clusterInfo).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcache",
  "methodName" : "getCacheDepth",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getCacheDepth(Configuration conf)\n{\r\n    int cacheDepth = conf.getInt(YarnConfiguration.SHARED_CACHE_NESTED_LEVEL, YarnConfiguration.DEFAULT_SHARED_CACHE_NESTED_LEVEL);\r\n    if (cacheDepth <= 0) {\r\n        LOG.warn(\"Specified cache depth was less than or equal to zero.\" + \" Using default value instead. Default: {}, Specified: {}\", YarnConfiguration.DEFAULT_SHARED_CACHE_NESTED_LEVEL, cacheDepth);\r\n        cacheDepth = YarnConfiguration.DEFAULT_SHARED_CACHE_NESTED_LEVEL;\r\n    }\r\n    return cacheDepth;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcache",
  "methodName" : "getCacheEntryPath",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getCacheEntryPath(int cacheDepth, String cacheRoot, String checksum)\n{\r\n    if (cacheDepth <= 0) {\r\n        throw new IllegalArgumentException(\"The cache depth must be greater than 0. Passed value: \" + cacheDepth);\r\n    }\r\n    if (checksum.length() < cacheDepth) {\r\n        throw new IllegalArgumentException(\"The checksum passed was too short: \" + checksum);\r\n    }\r\n    StringBuilder sb = new StringBuilder(cacheRoot);\r\n    for (int i = 0; i < cacheDepth; i++) {\r\n        sb.append(Path.SEPARATOR_CHAR).append(checksum.charAt(i));\r\n    }\r\n    sb.append(Path.SEPARATOR_CHAR).append(checksum);\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\sharedcache",
  "methodName" : "getCacheEntryGlobPattern",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getCacheEntryGlobPattern(int depth)\n{\r\n    StringBuilder pattern = new StringBuilder();\r\n    for (int i = 0; i < depth; i++) {\r\n        pattern.append(\"*/\");\r\n    }\r\n    pattern.append(\"*\");\r\n    return pattern.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    if (this.threadpool == null) {\r\n        this.threadpool = Executors.newCachedThreadPool();\r\n    }\r\n    this.unmanagedAppMasterMap = new ConcurrentHashMap<>();\r\n    this.appIdMap = new ConcurrentHashMap<>();\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "serviceStop",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    ExecutorCompletionService<KillApplicationResponse> completionService = new ExecutorCompletionService<>(this.threadpool);\r\n    if (this.unmanagedAppMasterMap.isEmpty()) {\r\n        return;\r\n    }\r\n    Set<String> addressList = new HashSet<>(this.unmanagedAppMasterMap.keySet());\r\n    LOG.warn(\"Abnormal shutdown of UAMPoolManager, still {} UAMs in map\", addressList.size());\r\n    for (final String uamId : addressList) {\r\n        completionService.submit(new Callable<KillApplicationResponse>() {\r\n\r\n            @Override\r\n            public KillApplicationResponse call() throws Exception {\r\n                try {\r\n                    LOG.info(\"Force-killing UAM id \" + uamId + \" for application \" + appIdMap.get(uamId));\r\n                    return unmanagedAppMasterMap.remove(uamId).forceKillApplication();\r\n                } catch (Exception e) {\r\n                    LOG.error(\"Failed to kill unmanaged application master\", e);\r\n                    return null;\r\n                }\r\n            }\r\n        });\r\n    }\r\n    for (int i = 0; i < addressList.size(); ++i) {\r\n        try {\r\n            Future<KillApplicationResponse> future = completionService.take();\r\n            future.get();\r\n        } catch (Exception e) {\r\n            LOG.error(\"Failed to kill unmanaged application master\", e);\r\n        }\r\n    }\r\n    this.appIdMap.clear();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "createAndRegisterNewUAM",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String createAndRegisterNewUAM(RegisterApplicationMasterRequest registerRequest, Configuration conf, String queueName, String submitter, String appNameSuffix, boolean keepContainersAcrossApplicationAttempts, String rmName) throws YarnException, IOException\n{\r\n    ApplicationId appId = null;\r\n    ApplicationClientProtocol rmClient;\r\n    try {\r\n        UserGroupInformation appSubmitter = UserGroupInformation.createRemoteUser(submitter);\r\n        rmClient = AMRMClientUtils.createRMProxy(conf, ApplicationClientProtocol.class, appSubmitter, null);\r\n        GetNewApplicationResponse response = rmClient.getNewApplication(GetNewApplicationRequest.newInstance());\r\n        if (response == null) {\r\n            throw new YarnException(\"getNewApplication got null response\");\r\n        }\r\n        appId = response.getApplicationId();\r\n        LOG.info(\"Received new application ID {} from RM\", appId);\r\n    } finally {\r\n        rmClient = null;\r\n    }\r\n    launchUAM(appId.toString(), conf, appId, queueName, submitter, appNameSuffix, keepContainersAcrossApplicationAttempts, rmName);\r\n    registerApplicationMaster(appId.toString(), registerRequest);\r\n    return appId.toString();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "launchUAM",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Token<AMRMTokenIdentifier> launchUAM(String uamId, Configuration conf, ApplicationId appId, String queueName, String submitter, String appNameSuffix, boolean keepContainersAcrossApplicationAttempts, String rmName) throws YarnException, IOException\n{\r\n    if (this.unmanagedAppMasterMap.containsKey(uamId)) {\r\n        throw new YarnException(\"UAM \" + uamId + \" already exists\");\r\n    }\r\n    UnmanagedApplicationManager uam = createUAM(conf, appId, queueName, submitter, appNameSuffix, keepContainersAcrossApplicationAttempts, rmName);\r\n    this.unmanagedAppMasterMap.put(uamId, uam);\r\n    Token<AMRMTokenIdentifier> amrmToken = null;\r\n    try {\r\n        LOG.info(\"Launching UAM id {} for application {}\", uamId, appId);\r\n        amrmToken = uam.launchUAM();\r\n    } catch (Exception e) {\r\n        this.unmanagedAppMasterMap.remove(uamId);\r\n        throw e;\r\n    }\r\n    this.appIdMap.put(uamId, uam.getAppId());\r\n    return amrmToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "reAttachUAM",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void reAttachUAM(String uamId, Configuration conf, ApplicationId appId, String queueName, String submitter, String appNameSuffix, Token<AMRMTokenIdentifier> uamToken, String rmName) throws YarnException, IOException\n{\r\n    if (this.unmanagedAppMasterMap.containsKey(uamId)) {\r\n        throw new YarnException(\"UAM \" + uamId + \" already exists\");\r\n    }\r\n    UnmanagedApplicationManager uam = createUAM(conf, appId, queueName, submitter, appNameSuffix, true, rmName);\r\n    this.unmanagedAppMasterMap.put(uamId, uam);\r\n    try {\r\n        LOG.info(\"Reattaching UAM id {} for application {}\", uamId, appId);\r\n        uam.reAttachUAM(uamToken);\r\n    } catch (Exception e) {\r\n        this.unmanagedAppMasterMap.remove(uamId);\r\n        throw e;\r\n    }\r\n    this.appIdMap.put(uamId, uam.getAppId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "createUAM",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "UnmanagedApplicationManager createUAM(Configuration conf, ApplicationId appId, String queueName, String submitter, String appNameSuffix, boolean keepContainersAcrossApplicationAttempts, String rmName)\n{\r\n    return new UnmanagedApplicationManager(conf, appId, queueName, submitter, appNameSuffix, keepContainersAcrossApplicationAttempts, rmName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(String uamId, RegisterApplicationMasterRequest registerRequest) throws YarnException, IOException\n{\r\n    if (!this.unmanagedAppMasterMap.containsKey(uamId)) {\r\n        throw new YarnException(\"UAM \" + uamId + \" does not exist\");\r\n    }\r\n    LOG.info(\"Registering UAM id {} for application {}\", uamId, this.appIdMap.get(uamId));\r\n    return this.unmanagedAppMasterMap.get(uamId).registerApplicationMaster(registerRequest);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "allocateAsync",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void allocateAsync(String uamId, AllocateRequest request, AsyncCallback<AllocateResponse> callback) throws YarnException, IOException\n{\r\n    if (!this.unmanagedAppMasterMap.containsKey(uamId)) {\r\n        throw new YarnException(\"UAM \" + uamId + \" does not exist\");\r\n    }\r\n    this.unmanagedAppMasterMap.get(uamId).allocateAsync(request, callback);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "finishApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(String uamId, FinishApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    if (!this.unmanagedAppMasterMap.containsKey(uamId)) {\r\n        throw new YarnException(\"UAM \" + uamId + \" does not exist\");\r\n    }\r\n    LOG.info(\"Finishing UAM id {} for application {}\", uamId, this.appIdMap.get(uamId));\r\n    FinishApplicationMasterResponse response = this.unmanagedAppMasterMap.get(uamId).finishApplicationMaster(request);\r\n    if (response.getIsUnregistered()) {\r\n        this.unmanagedAppMasterMap.remove(uamId);\r\n        this.appIdMap.remove(uamId);\r\n        LOG.info(\"UAM id {} is unregistered\", uamId);\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "shutDownConnections",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void shutDownConnections(String uamId) throws YarnException\n{\r\n    if (!this.unmanagedAppMasterMap.containsKey(uamId)) {\r\n        throw new YarnException(\"UAM \" + uamId + \" does not exist\");\r\n    }\r\n    LOG.info(\"Shutting down UAM id {} for application {} without killing the UAM\", uamId, this.appIdMap.get(uamId));\r\n    this.unmanagedAppMasterMap.remove(uamId).shutDownConnections();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "shutDownConnections",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void shutDownConnections() throws YarnException\n{\r\n    for (String uamId : this.unmanagedAppMasterMap.keySet()) {\r\n        shutDownConnections(uamId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "getAllUAMIds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getAllUAMIds()\n{\r\n    return new HashSet<String>(this.unmanagedAppMasterMap.keySet());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "hasUAMId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean hasUAMId(String uamId)\n{\r\n    return this.unmanagedAppMasterMap.containsKey(uamId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "getAMRMClientRelayer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AMRMClientRelayer getAMRMClientRelayer(String uamId) throws YarnException\n{\r\n    if (!this.unmanagedAppMasterMap.containsKey(uamId)) {\r\n        throw new YarnException(\"UAM \" + uamId + \" does not exist\");\r\n    }\r\n    return this.unmanagedAppMasterMap.get(uamId).getAMRMClientRelayer();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "getRequestQueueSize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getRequestQueueSize(String uamId) throws YarnException\n{\r\n    if (!this.unmanagedAppMasterMap.containsKey(uamId)) {\r\n        throw new YarnException(\"UAM \" + uamId + \" does not exist\");\r\n    }\r\n    return this.unmanagedAppMasterMap.get(uamId).getRequestQueueSize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "drainUAMHeartbeats",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void drainUAMHeartbeats()\n{\r\n    for (UnmanagedApplicationManager uam : this.unmanagedAppMasterMap.values()) {\r\n        uam.drainHeartbeatThread();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterHeartbeatResponse newInstance()\n{\r\n    SubClusterHeartbeatResponse response = Records.newRecord(SubClusterHeartbeatResponse.class);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "render",
  "errType" : [ "IllegalArgumentException", "Exception", "RuntimeException", "Exception" ],
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void render(Block html)\n{\r\n    String attemptid = $(APPLICATION_ATTEMPT_ID);\r\n    if (attemptid.isEmpty()) {\r\n        puts(\"Bad request: requires application attempt ID\");\r\n        return;\r\n    }\r\n    try {\r\n        appAttemptId = ApplicationAttemptId.fromString(attemptid);\r\n    } catch (IllegalArgumentException e) {\r\n        puts(\"Invalid application attempt ID: \" + attemptid);\r\n        return;\r\n    }\r\n    UserGroupInformation callerUGI = getCallerUGI();\r\n    ApplicationAttemptReport appAttemptReport;\r\n    try {\r\n        final GetApplicationAttemptReportRequest request = GetApplicationAttemptReportRequest.newInstance(appAttemptId);\r\n        if (callerUGI == null) {\r\n            appAttemptReport = getApplicationAttemptReport(request);\r\n        } else {\r\n            appAttemptReport = callerUGI.doAs(new PrivilegedExceptionAction<ApplicationAttemptReport>() {\r\n\r\n                @Override\r\n                public ApplicationAttemptReport run() throws Exception {\r\n                    return getApplicationAttemptReport(request);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        String message = \"Failed to read the application attempt \" + appAttemptId + \".\";\r\n        LOG.error(message, e);\r\n        html.p().__(message).__();\r\n        return;\r\n    }\r\n    if (appAttemptReport == null) {\r\n        puts(\"Application Attempt not found: \" + attemptid);\r\n        return;\r\n    }\r\n    boolean exceptionWhenGetContainerReports = false;\r\n    Collection<ContainerReport> containers = null;\r\n    try {\r\n        final GetContainersRequest request = GetContainersRequest.newInstance(appAttemptId);\r\n        if (callerUGI == null) {\r\n            containers = getContainers(request);\r\n        } else {\r\n            containers = callerUGI.doAs(new PrivilegedExceptionAction<Collection<ContainerReport>>() {\r\n\r\n                @Override\r\n                public Collection<ContainerReport> run() throws Exception {\r\n                    return getContainers(request);\r\n                }\r\n            });\r\n        }\r\n    } catch (RuntimeException e) {\r\n        exceptionWhenGetContainerReports = true;\r\n    } catch (Exception e) {\r\n        exceptionWhenGetContainerReports = true;\r\n    }\r\n    AppAttemptInfo appAttempt = new AppAttemptInfo(appAttemptReport);\r\n    setTitle(join(\"Application Attempt \", attemptid));\r\n    String node = \"N/A\";\r\n    if (appAttempt.getHost() != null && appAttempt.getRpcPort() >= 0 && appAttempt.getRpcPort() < 65536) {\r\n        node = appAttempt.getHost() + \":\" + appAttempt.getRpcPort();\r\n    }\r\n    generateOverview(appAttemptReport, containers, appAttempt, node);\r\n    if (exceptionWhenGetContainerReports) {\r\n        html.p().__(\"Sorry, Failed to get containers for application attempt\" + attemptid + \".\").__();\r\n        return;\r\n    }\r\n    createAttemptHeadRoomTable(html);\r\n    html.__(InfoBlock.class);\r\n    createTablesForAttemptMetrics(html);\r\n    TBODY<TABLE<Hamlet>> tbody = html.table(\"#containers\").$style(\"width:100%\").thead().tr().th(\".id\", \"Container ID\").th(\".node\", \"Node\").th(\".exitstatus\", \"Container Exit Status\").th(\".logs\", \"Logs\").__().__().tbody();\r\n    StringBuilder containersTableData = new StringBuilder(\"[\\n\");\r\n    for (ContainerReport containerReport : containers) {\r\n        ContainerInfo container = new ContainerInfo(containerReport);\r\n        containersTableData.append(\"[\\\"<a href='\").append(url(\"container\", container.getContainerId())).append(\"'>\").append(container.getContainerId()).append(\"</a>\\\",\\\"<a \").append(container.getNodeHttpAddress() == null ? \"#\" : \"href='\" + container.getNodeHttpAddress()).append(\"'>\").append(container.getNodeHttpAddress() == null ? \"N/A\" : StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(container.getNodeHttpAddress()))).append(\"</a>\\\",\\\"\").append(container.getContainerExitStatus()).append(\"\\\",\\\"<a href='\").append(container.getLogUrl() == null ? \"#\" : container.getLogUrl()).append(\"'>\").append(container.getLogUrl() == null ? \"N/A\" : \"Logs\").append(\"</a>\\\"],\\n\");\r\n    }\r\n    if (containersTableData.charAt(containersTableData.length() - 2) == ',') {\r\n        containersTableData.delete(containersTableData.length() - 2, containersTableData.length() - 1);\r\n    }\r\n    containersTableData.append(\"]\");\r\n    html.script().$type(\"text/javascript\").__(\"var containersTableData=\" + containersTableData).__();\r\n    tbody.__().__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ContainerReport> getContainers(final GetContainersRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getContainers(request).getContainerList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptReport getApplicationAttemptReport(final GetApplicationAttemptReportRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getApplicationAttemptReport(request).getApplicationAttemptReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "generateOverview",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void generateOverview(ApplicationAttemptReport appAttemptReport, Collection<ContainerReport> containers, AppAttemptInfo appAttempt, String node)\n{\r\n    String amContainerId = appAttempt.getAmContainerId();\r\n    info(\"Application Attempt Overview\").__(\"Application Attempt State:\", appAttempt.getAppAttemptState() == null ? UNAVAILABLE : appAttempt.getAppAttemptState()).__(\"AM Container:\", amContainerId == null || containers == null || !hasAMContainer(appAttemptReport.getAMContainerId(), containers) ? null : root_url(\"container\", amContainerId), amContainerId == null ? \"N/A\" : amContainerId).__(\"Node:\", node).__(\"Tracking URL:\", appAttempt.getTrackingUrl() == null || appAttempt.getTrackingUrl().equals(UNAVAILABLE) ? null : root_url(appAttempt.getTrackingUrl()), appAttempt.getTrackingUrl() == null || appAttempt.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : appAttempt.getAppAttemptState() == YarnApplicationAttemptState.FINISHED || appAttempt.getAppAttemptState() == YarnApplicationAttemptState.FAILED || appAttempt.getAppAttemptState() == YarnApplicationAttemptState.KILLED ? \"History\" : \"ApplicationMaster\").__(\"Diagnostics Info:\", appAttempt.getDiagnosticsInfo() == null ? \"\" : appAttempt.getDiagnosticsInfo());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "hasAMContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean hasAMContainer(ContainerId containerId, Collection<ContainerReport> containers)\n{\r\n    for (ContainerReport container : containers) {\r\n        if (containerId.equals(container.getContainerId())) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createAttemptHeadRoomTable",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void createAttemptHeadRoomTable(Block html)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createTablesForAttemptMetrics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void createTablesForAttemptMetrics(Block html)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "getPaths",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<RemoteLogPathEntry> getPaths()\n{\r\n    return paths;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp\\dao",
  "methodName" : "setPaths",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPaths(List<RemoteLogPathEntry> paths)\n{\r\n    this.paths = paths;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationHomeSubClusterResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetApplicationHomeSubClusterResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationHomeSubCluster getApplicationHomeSubCluster()\n{\r\n    GetApplicationHomeSubClusterResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAppSubclusterMap()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getAppSubclusterMap());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setApplicationHomeSubCluster(ApplicationHomeSubCluster applicationInfo)\n{\r\n    maybeInitBuilder();\r\n    if (applicationInfo == null) {\r\n        builder.clearAppSubclusterMap();\r\n        return;\r\n    }\r\n    builder.setAppSubclusterMap(convertToProtoFormat(applicationInfo));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHomeSubCluster convertFromProtoFormat(ApplicationHomeSubClusterProto sc)\n{\r\n    return new ApplicationHomeSubClusterPBImpl(sc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationHomeSubClusterProto convertToProtoFormat(ApplicationHomeSubCluster sc)\n{\r\n    return ((ApplicationHomeSubClusterPBImpl) sc).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "render",
  "errType" : [ "IllegalArgumentException", "Exception" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void render(Block html)\n{\r\n    String containerid = $(CONTAINER_ID);\r\n    if (containerid.isEmpty()) {\r\n        puts(\"Bad request: requires container ID\");\r\n        return;\r\n    }\r\n    ContainerId containerId = null;\r\n    try {\r\n        containerId = ContainerId.fromString(containerid);\r\n    } catch (IllegalArgumentException e) {\r\n        puts(\"Invalid container ID: \" + containerid);\r\n        return;\r\n    }\r\n    UserGroupInformation callerUGI = getCallerUGI();\r\n    ContainerReport containerReport = null;\r\n    try {\r\n        final GetContainerReportRequest request = GetContainerReportRequest.newInstance(containerId);\r\n        if (callerUGI == null) {\r\n            containerReport = getContainerReport(request);\r\n        } else {\r\n            containerReport = callerUGI.doAs(new PrivilegedExceptionAction<ContainerReport>() {\r\n\r\n                @Override\r\n                public ContainerReport run() throws Exception {\r\n                    return getContainerReport(request);\r\n                }\r\n            });\r\n        }\r\n    } catch (Exception e) {\r\n        String message = \"Failed to read the container \" + containerid + \".\";\r\n        LOG.error(message, e);\r\n        html.p().__(message).__();\r\n        return;\r\n    }\r\n    if (containerReport == null) {\r\n        puts(\"Container not found: \" + containerid);\r\n        return;\r\n    }\r\n    ContainerInfo container = new ContainerInfo(containerReport);\r\n    setTitle(join(\"Container \", containerid));\r\n    info(\"Container Overview\").__(\"Container State:\", container.getContainerState() == null ? UNAVAILABLE : container.getContainerState()).__(\"Exit Status:\", container.getContainerExitStatus()).__(\"Node:\", container.getNodeHttpAddress() == null ? \"#\" : container.getNodeHttpAddress(), container.getNodeHttpAddress() == null ? \"N/A\" : container.getNodeHttpAddress()).__(\"Priority:\", container.getPriority()).__(\"Started:\", Times.format(container.getStartedTime())).__(\"Elapsed:\", StringUtils.formatTime(Times.elapsed(container.getStartedTime(), container.getFinishedTime()))).__(\"Resource:\", getResources(container)).__(\"Logs:\", container.getLogUrl() == null ? \"#\" : container.getLogUrl(), container.getLogUrl() == null ? \"N/A\" : \"Logs\").__(\"Diagnostics:\", container.getDiagnosticsInfo() == null ? \"\" : container.getDiagnosticsInfo());\r\n    html.__(InfoBlock.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getResources",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String getResources(ContainerInfo container)\n{\r\n    Map<String, Long> allocatedResources = container.getAllocatedResources();\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(getResourceAsString(ResourceInformation.MEMORY_URI, allocatedResources.get(ResourceInformation.MEMORY_URI))).append(\", \");\r\n    sb.append(getResourceAsString(ResourceInformation.VCORES_URI, allocatedResources.get(ResourceInformation.VCORES_URI)));\r\n    if (container.hasCustomResources()) {\r\n        container.getAllocatedResources().forEach((key, value) -> {\r\n            if (!key.equals(ResourceInformation.MEMORY_URI) && !key.equals(ResourceInformation.VCORES_URI)) {\r\n                sb.append(\", \");\r\n                sb.append(getResourceAsString(key, value));\r\n            }\r\n        });\r\n    }\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getResourceAsString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getResourceAsString(String resourceName, long value)\n{\r\n    final String translatedResourceName;\r\n    switch(resourceName) {\r\n        case ResourceInformation.MEMORY_URI:\r\n            translatedResourceName = \"Memory\";\r\n            break;\r\n        case ResourceInformation.VCORES_URI:\r\n            translatedResourceName = \"VCores\";\r\n            break;\r\n        default:\r\n            translatedResourceName = resourceName;\r\n            break;\r\n    }\r\n    return String.valueOf(value) + \" \" + translatedResourceName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getContainerReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerReport getContainerReport(final GetContainerReportRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getContainerReport(request).getContainerReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterInfo newInstance(SubClusterId subClusterId, String amRMServiceAddress, String clientRMServiceAddress, String rmAdminServiceAddress, String rmWebServiceAddress, SubClusterState state, long lastStartTime, String capability)\n{\r\n    return newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, 0, state, lastStartTime, capability);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "SubClusterInfo newInstance(SubClusterId subClusterId, String amRMServiceAddress, String clientRMServiceAddress, String rmAdminServiceAddress, String rmWebServiceAddress, long lastHeartBeat, SubClusterState state, long lastStartTime, String capability)\n{\r\n    SubClusterInfo subClusterInfo = Records.newRecord(SubClusterInfo.class);\r\n    subClusterInfo.setSubClusterId(subClusterId);\r\n    subClusterInfo.setAMRMServiceAddress(amRMServiceAddress);\r\n    subClusterInfo.setClientRMServiceAddress(clientRMServiceAddress);\r\n    subClusterInfo.setRMAdminServiceAddress(rmAdminServiceAddress);\r\n    subClusterInfo.setRMWebServiceAddress(rmWebServiceAddress);\r\n    subClusterInfo.setLastHeartBeat(lastHeartBeat);\r\n    subClusterInfo.setState(state);\r\n    subClusterInfo.setLastStartTime(lastStartTime);\r\n    subClusterInfo.setCapability(capability);\r\n    return subClusterInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId getSubClusterId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSubClusterId(SubClusterId subClusterId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getAMRMServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAMRMServiceAddress()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setAMRMServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAMRMServiceAddress(String amRMServiceAddress)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getClientRMServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getClientRMServiceAddress()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setClientRMServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setClientRMServiceAddress(String clientRMServiceAddress)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getRMAdminServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRMAdminServiceAddress()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setRMAdminServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRMAdminServiceAddress(String rmAdminServiceAddress)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getRMWebServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRMWebServiceAddress()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setRMWebServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRMWebServiceAddress(String rmWebServiceAddress)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getLastHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLastHeartBeat()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setLastHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLastHeartBeat(long time)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterState getState()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setState(SubClusterState state)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getLastStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLastStartTime()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setLastStartTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLastStartTime(long lastStartTime)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getCapability",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getCapability()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setCapability",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCapability(String capability)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String toString()\n{\r\n    return \"SubClusterInfo [getSubClusterId() = \" + getSubClusterId() + \", getAMRMServiceAddress() = \" + getAMRMServiceAddress() + \", getClientRMServiceAddress() = \" + getClientRMServiceAddress() + \", getRMAdminServiceAddress() = \" + getRMAdminServiceAddress() + \", getRMWebServiceAddress() = \" + getRMWebServiceAddress() + \", getState() = \" + getState() + \", getLastStartTime() = \" + getLastStartTime() + \", getCapability() = \" + getCapability() + \"]\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "boolean equals(Object obj)\n{\r\n    if (this == obj) {\r\n        return true;\r\n    }\r\n    if (obj == null) {\r\n        return false;\r\n    }\r\n    if (getClass() != obj.getClass()) {\r\n        return false;\r\n    }\r\n    SubClusterInfo other = (SubClusterInfo) obj;\r\n    if (!this.getSubClusterId().equals(other.getSubClusterId())) {\r\n        return false;\r\n    }\r\n    if (!this.getAMRMServiceAddress().equals(other.getAMRMServiceAddress())) {\r\n        return false;\r\n    }\r\n    if (!this.getClientRMServiceAddress().equals(other.getClientRMServiceAddress())) {\r\n        return false;\r\n    }\r\n    if (!this.getRMAdminServiceAddress().equals(other.getRMAdminServiceAddress())) {\r\n        return false;\r\n    }\r\n    if (!this.getRMWebServiceAddress().equals(other.getRMWebServiceAddress())) {\r\n        return false;\r\n    }\r\n    if (!this.getState().equals(other.getState())) {\r\n        return false;\r\n    }\r\n    return this.getLastStartTime() == other.getLastStartTime();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "int hashCode()\n{\r\n    final int prime = 31;\r\n    int result = 1;\r\n    result = prime * result + ((getSubClusterId() == null) ? 0 : getSubClusterId().hashCode());\r\n    result = prime * result + ((getAMRMServiceAddress() == null) ? 0 : getAMRMServiceAddress().hashCode());\r\n    result = prime * result + ((getClientRMServiceAddress() == null) ? 0 : getClientRMServiceAddress().hashCode());\r\n    result = prime * result + ((getRMAdminServiceAddress() == null) ? 0 : getRMAdminServiceAddress().hashCode());\r\n    result = prime * result + ((getRMWebServiceAddress() == null) ? 0 : getRMWebServiceAddress().hashCode());\r\n    result = prime * result + ((getState() == null) ? 0 : getState().hashCode());\r\n    result = prime * result + (int) (getLastStartTime() ^ (getLastStartTime() >>> 32));\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetTimelineCollectorContextRequestProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (appId != null) {\r\n        builder.setAppId(convertToProtoFormat(this.appId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetTimelineCollectorContextRequestProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    if (this.appId != null) {\r\n        return this.appId;\r\n    }\r\n    GetTimelineCollectorContextRequestProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasAppId()) {\r\n        return null;\r\n    }\r\n    this.appId = convertFromProtoFormat(p.getAppId());\r\n    return this.appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId id)\n{\r\n    maybeInitBuilder();\r\n    if (id == null) {\r\n        builder.clearAppId();\r\n    }\r\n    this.appId = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(YarnProtos.ApplicationIdProto p)\n{\r\n    return new ApplicationIdPBImpl(p);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnProtos.ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LogAggregationReportProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null)\r\n        return false;\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.applicationId != null && !((ApplicationIdPBImpl) this.applicationId).getProto().equals(builder.getApplicationId())) {\r\n        builder.setApplicationId(convertToProtoFormat(this.applicationId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto)\r\n        maybeInitBuilder();\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = LogAggregationReportProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId()\n{\r\n    if (this.applicationId != null) {\r\n        return this.applicationId;\r\n    }\r\n    LogAggregationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasApplicationId()) {\r\n        return null;\r\n    }\r\n    this.applicationId = convertFromProtoFormat(p.getApplicationId());\r\n    return this.applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setApplicationId(ApplicationId appId)\n{\r\n    maybeInitBuilder();\r\n    if (appId == null)\r\n        builder.clearApplicationId();\r\n    this.applicationId = appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationIdProto convertToProtoFormat(ApplicationId t)\n{\r\n    return ((ApplicationIdPBImpl) t).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationIdPBImpl convertFromProtoFormat(ApplicationIdProto applicationId)\n{\r\n    return new ApplicationIdPBImpl(applicationId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getLogAggregationStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LogAggregationStatus getLogAggregationStatus()\n{\r\n    LogAggregationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasLogAggregationStatus()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getLogAggregationStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setLogAggregationStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setLogAggregationStatus(LogAggregationStatus logAggregationStatus)\n{\r\n    maybeInitBuilder();\r\n    if (logAggregationStatus == null) {\r\n        builder.clearLogAggregationStatus();\r\n        return;\r\n    }\r\n    builder.setLogAggregationStatus(convertToProtoFormat(logAggregationStatus));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationStatus convertFromProtoFormat(LogAggregationStatusProto s)\n{\r\n    return ProtoUtils.convertFromProtoFormat(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "LogAggregationStatusProto convertToProtoFormat(LogAggregationStatus s)\n{\r\n    return ProtoUtils.convertToProtoFormat(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "getDiagnosticMessage",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getDiagnosticMessage()\n{\r\n    LogAggregationReportProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasDiagnostics()) {\r\n        return null;\r\n    }\r\n    return p.getDiagnostics();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords\\impl\\pb",
  "methodName" : "setDiagnosticMessage",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDiagnosticMessage(String diagnosticMessage)\n{\r\n    maybeInitBuilder();\r\n    if (diagnosticMessage == null) {\r\n        builder.clearDiagnostics();\r\n        return;\r\n    }\r\n    builder.setDiagnostics(diagnosticMessage);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "registerNodeManager",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RegisterNodeManagerResponseProto registerNodeManager(RpcController controller, RegisterNodeManagerRequestProto proto) throws ServiceException\n{\r\n    RegisterNodeManagerRequestPBImpl request = new RegisterNodeManagerRequestPBImpl(proto);\r\n    try {\r\n        RegisterNodeManagerResponse response = real.registerNodeManager(request);\r\n        return ((RegisterNodeManagerResponsePBImpl) response).getProto();\r\n    } catch (YarnException | IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "nodeHeartbeat",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeHeartbeatResponseProto nodeHeartbeat(RpcController controller, NodeHeartbeatRequestProto proto) throws ServiceException\n{\r\n    NodeHeartbeatRequestPBImpl request = new NodeHeartbeatRequestPBImpl(proto);\r\n    try {\r\n        NodeHeartbeatResponse response = real.nodeHeartbeat(request);\r\n        return ((NodeHeartbeatResponsePBImpl) response).getProto();\r\n    } catch (YarnException | IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\impl\\pb\\service",
  "methodName" : "unRegisterNodeManager",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UnRegisterNodeManagerResponseProto unRegisterNodeManager(RpcController controller, UnRegisterNodeManagerRequestProto proto) throws ServiceException\n{\r\n    UnRegisterNodeManagerRequestPBImpl request = new UnRegisterNodeManagerRequestPBImpl(proto);\r\n    try {\r\n        UnRegisterNodeManagerResponse response = real.unRegisterNodeManager(request);\r\n        return ((UnRegisterNodeManagerResponsePBImpl) response).getProto();\r\n    } catch (YarnException | IOException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setAMRegistrationRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAMRegistrationRequest(RegisterApplicationMasterRequest registerRequest)\n{\r\n    this.amRegistrationRequest = registerRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getRMIdentifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRMIdentifier()\n{\r\n    return this.rmId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setRMClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRMClient(ApplicationMasterProtocol client)\n{\r\n    this.rmClient = client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "shutdown",
  "errType" : [ "HadoopIllegalArgumentException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void shutdown()\n{\r\n    synchronized (this) {\r\n        if (this.shutdown) {\r\n            LOG.warn(\"Shutdown called twice for AMRMClientRelayer for RM \" + this.rmId);\r\n            return;\r\n        }\r\n        this.shutdown = true;\r\n        for (Map.Entry<ResourceRequestSetKey, ResourceRequestSet> entry : this.remotePendingAsks.entrySet()) {\r\n            ResourceRequestSetKey key = entry.getKey();\r\n            if (key.getAllocationRequestId() == 0) {\r\n                this.metrics.decrClientPending(this.rmId, AMRMClientRelayerMetrics.getRequestType(key.getExeType()), entry.getValue().getNumContainers());\r\n            } else {\r\n                this.askTimeStamp.remove(key.getAllocationRequestId());\r\n                Integer pending = this.pendingCountForMetrics.remove(key.getAllocationRequestId());\r\n                if (pending == null) {\r\n                    throw new YarnRuntimeException(\"pendingCountForMetrics not found for key \" + key + \" during shutdown\");\r\n                }\r\n                this.metrics.decrClientPending(this.rmId, AMRMClientRelayerMetrics.getRequestType(key.getExeType()), pending);\r\n            }\r\n        }\r\n        for (UpdateContainerRequest req : remotePendingChange.values()) {\r\n            this.metrics.decrClientPending(rmId, req.getContainerUpdateType(), 1);\r\n        }\r\n    }\r\n    if (this.rmClient != null) {\r\n        try {\r\n            RPC.stopProxy(this.rmClient);\r\n            this.rmClient = null;\r\n        } catch (HadoopIllegalArgumentException e) {\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    this.amRegistrationRequest = request;\r\n    return this.rmClient.registerApplicationMaster(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "reRegisterApplicationMaster",
  "errType" : [ "InvalidApplicationMasterRequestException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void reRegisterApplicationMaster(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    try {\r\n        registerApplicationMaster(request);\r\n    } catch (InvalidApplicationMasterRequestException e) {\r\n        if (e.getMessage().contains(AMRMClientUtils.APP_ALREADY_REGISTERED_MESSAGE)) {\r\n            LOG.info(\"Concurrent thread successfully re-registered, moving on.\");\r\n        } else {\r\n            throw e;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "finishApplicationMaster",
  "errType" : [ "ApplicationMasterNotRegisteredException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(FinishApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    try {\r\n        return this.rmClient.finishApplicationMaster(request);\r\n    } catch (ApplicationMasterNotRegisteredException e) {\r\n        LOG.warn(\"Out of sync with RM \" + rmId + \" for \" + this.appId + \", hence resyncing.\");\r\n        reRegisterApplicationMaster(this.amRegistrationRequest);\r\n        return finishApplicationMaster(request);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "addNewAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void addNewAllocateRequest(AllocateRequest allocateRequest) throws YarnException\n{\r\n    addNewAsks(allocateRequest.getAskList());\r\n    if (allocateRequest.getReleaseList() != null) {\r\n        this.remotePendingRelease.addAll(allocateRequest.getReleaseList());\r\n        this.release.addAll(allocateRequest.getReleaseList());\r\n    }\r\n    if (allocateRequest.getResourceBlacklistRequest() != null) {\r\n        if (allocateRequest.getResourceBlacklistRequest().getBlacklistAdditions() != null) {\r\n            this.remoteBlacklistedNodes.addAll(allocateRequest.getResourceBlacklistRequest().getBlacklistAdditions());\r\n            this.blacklistAdditions.addAll(allocateRequest.getResourceBlacklistRequest().getBlacklistAdditions());\r\n        }\r\n        if (allocateRequest.getResourceBlacklistRequest().getBlacklistRemovals() != null) {\r\n            this.remoteBlacklistedNodes.removeAll(allocateRequest.getResourceBlacklistRequest().getBlacklistRemovals());\r\n            this.blacklistRemovals.addAll(allocateRequest.getResourceBlacklistRequest().getBlacklistRemovals());\r\n        }\r\n    }\r\n    if (allocateRequest.getUpdateRequests() != null) {\r\n        for (UpdateContainerRequest update : allocateRequest.getUpdateRequests()) {\r\n            UpdateContainerRequest req = this.remotePendingChange.put(update.getContainerId(), update);\r\n            this.changeTimeStamp.put(update.getContainerId(), System.currentTimeMillis());\r\n            if (req == null) {\r\n                this.metrics.incrClientPending(rmId, update.getContainerUpdateType(), 1);\r\n            } else if (req.getContainerUpdateType() != update.getContainerUpdateType()) {\r\n                this.metrics.decrClientPending(rmId, req.getContainerUpdateType(), 1);\r\n                this.metrics.incrClientPending(rmId, update.getContainerUpdateType(), 1);\r\n            }\r\n            this.change.put(update.getContainerId(), update);\r\n        }\r\n    }\r\n    if (allocateRequest.getSchedulingRequests() != null) {\r\n        AMRMClientUtils.addToOutstandingSchedulingRequests(allocateRequest.getSchedulingRequests(), this.remotePendingSchedRequest);\r\n        this.schedulingRequest.addAll(allocateRequest.getSchedulingRequests());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "allocate",
  "errType" : [ "ApplicationMasterNotRegisteredException", "Throwable" ],
  "containingMethodsNum" : 34,
  "sourceCodeText" : "AllocateResponse allocate(AllocateRequest allocateRequest) throws YarnException, IOException\n{\r\n    AllocateResponse allocateResponse = null;\r\n    long startTime = System.currentTimeMillis();\r\n    synchronized (this) {\r\n        if (this.shutdown) {\r\n            throw new YarnException(\"Allocate called after AMRMClientRelayer for \" + \"RM \" + rmId + \" shutdown.\");\r\n        }\r\n        addNewAllocateRequest(allocateRequest);\r\n        ArrayList<ResourceRequest> askList = new ArrayList<>(ask.size());\r\n        for (ResourceRequest r : ask) {\r\n            askList.add(ResourceRequest.clone(r));\r\n        }\r\n        allocateRequest = AllocateRequest.newBuilder().responseId(allocateRequest.getResponseId()).progress(allocateRequest.getProgress()).askList(askList).releaseList(new ArrayList<>(this.release)).resourceBlacklistRequest(ResourceBlacklistRequest.newInstance(new ArrayList<>(this.blacklistAdditions), new ArrayList<>(this.blacklistRemovals))).updateRequests(new ArrayList<>(this.change.values())).schedulingRequests(new ArrayList<>(this.schedulingRequest)).build();\r\n        if (this.resetResponseId != -1) {\r\n            LOG.info(\"Override allocate responseId from \" + allocateRequest.getResponseId() + \" to \" + this.resetResponseId + \" for \" + this.appId);\r\n            allocateRequest.setResponseId(this.resetResponseId);\r\n        }\r\n    }\r\n    try {\r\n        allocateResponse = this.rmClient.allocate(allocateRequest);\r\n        this.resetResponseId = -1;\r\n    } catch (ApplicationMasterNotRegisteredException e) {\r\n        LOG.warn(\"ApplicationMaster is out of sync with RM \" + rmId + \" for \" + this.appId + \", hence resyncing.\");\r\n        this.metrics.incrRMMasterSlaveSwitch(this.rmId);\r\n        synchronized (this) {\r\n            for (ResourceRequestSet requestSet : this.remotePendingAsks.values()) {\r\n                for (ResourceRequest rr : requestSet.getRRs()) {\r\n                    addResourceRequestToAsk(rr);\r\n                }\r\n            }\r\n            this.release.addAll(this.remotePendingRelease);\r\n            this.blacklistAdditions.addAll(this.remoteBlacklistedNodes);\r\n            this.change.putAll(this.remotePendingChange);\r\n            for (List<SchedulingRequest> reqs : this.remotePendingSchedRequest.values()) {\r\n                this.schedulingRequest.addAll(reqs);\r\n            }\r\n        }\r\n        reRegisterApplicationMaster(this.amRegistrationRequest);\r\n        allocateRequest.setResponseId(0);\r\n        allocateResponse = allocate(allocateRequest);\r\n        return allocateResponse;\r\n    } catch (Throwable t) {\r\n        this.metrics.addHeartbeatFailure(this.rmId, System.currentTimeMillis() - startTime);\r\n        if (t instanceof InvalidApplicationMasterRequestException) {\r\n            int responseId = AMRMClientUtils.parseExpectedResponseIdFromException(t.getMessage());\r\n            if (responseId != -1) {\r\n                this.resetResponseId = responseId;\r\n                LOG.info(\"ResponseId out of sync with RM, expect \" + responseId + \" but \" + allocateRequest.getResponseId() + \" used by \" + this.appId + \". Will override in the next allocate.\");\r\n            } else {\r\n                LOG.warn(\"Failed to parse expected responseId out of exception for \" + this.appId);\r\n            }\r\n        }\r\n        throw t;\r\n    }\r\n    synchronized (this) {\r\n        if (this.shutdown) {\r\n            throw new YarnException(\"Allocate call succeeded for \" + this.appId + \" after AMRMClientRelayer for RM \" + rmId + \" shutdown.\");\r\n        }\r\n        updateMetrics(allocateResponse, startTime);\r\n        AMRMClientUtils.removeFromOutstandingSchedulingRequests(allocateResponse.getAllocatedContainers(), this.remotePendingSchedRequest);\r\n        AMRMClientUtils.removeFromOutstandingSchedulingRequests(allocateResponse.getContainersFromPreviousAttempts(), this.remotePendingSchedRequest);\r\n        this.ask.clear();\r\n        this.release.clear();\r\n        this.blacklistAdditions.clear();\r\n        this.blacklistRemovals.clear();\r\n        this.change.clear();\r\n        this.schedulingRequest.clear();\r\n        return allocateResponse;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "updateMetrics",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void updateMetrics(AllocateResponse allocateResponse, long startTime)\n{\r\n    this.metrics.addHeartbeatSuccess(this.rmId, System.currentTimeMillis() - startTime);\r\n    if (allocateResponse.getAllocatedContainers() != null) {\r\n        for (Container container : allocateResponse.getAllocatedContainers()) {\r\n            if (this.knownContainers.add(container.getId())) {\r\n                this.metrics.addFulfilledQPS(this.rmId, AMRMClientRelayerMetrics.getRequestType(container.getExecutionType()), 1);\r\n                if (container.getAllocationRequestId() != 0) {\r\n                    Integer count = this.pendingCountForMetrics.get(container.getAllocationRequestId());\r\n                    if (count != null && count > 0) {\r\n                        this.pendingCountForMetrics.put(container.getAllocationRequestId(), --count);\r\n                        this.metrics.decrClientPending(this.rmId, AMRMClientRelayerMetrics.getRequestType(container.getExecutionType()), 1);\r\n                        this.metrics.addFulfillLatency(this.rmId, AMRMClientRelayerMetrics.getRequestType(container.getExecutionType()), System.currentTimeMillis() - this.askTimeStamp.get(container.getAllocationRequestId()));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (allocateResponse.getCompletedContainersStatuses() != null) {\r\n        for (ContainerStatus container : allocateResponse.getCompletedContainersStatuses()) {\r\n            this.remotePendingRelease.remove(container.getContainerId());\r\n            UpdateContainerRequest req = this.remotePendingChange.remove(container.getContainerId());\r\n            if (req != null) {\r\n                this.metrics.decrClientPending(rmId, req.getContainerUpdateType(), 1);\r\n            }\r\n            this.knownContainers.remove(container.getContainerId());\r\n        }\r\n    }\r\n    if (allocateResponse.getUpdatedContainers() != null) {\r\n        for (UpdatedContainer updatedContainer : allocateResponse.getUpdatedContainers()) {\r\n            UpdateContainerRequest req = this.remotePendingChange.remove(updatedContainer.getContainer().getId());\r\n            if (req != null) {\r\n                this.metrics.decrClientPending(rmId, req.getContainerUpdateType(), 1);\r\n                this.metrics.addFulfillLatency(rmId, req.getContainerUpdateType(), System.currentTimeMillis() - this.changeTimeStamp.remove(req.getContainerId()));\r\n                this.metrics.addFulfilledQPS(rmId, req.getContainerUpdateType(), 1);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "addNewAsks",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void addNewAsks(List<ResourceRequest> asks) throws YarnException\n{\r\n    Set<ResourceRequestSetKey> touchedKeys = new HashSet<>();\r\n    Set<ResourceRequestSetKey> nonZeroNewKeys = new HashSet<>();\r\n    for (ResourceRequest rr : asks) {\r\n        addResourceRequestToAsk(rr);\r\n        ResourceRequestSetKey key = new ResourceRequestSetKey(rr);\r\n        touchedKeys.add(key);\r\n        ResourceRequestSet askSet = this.remotePendingAsks.get(key);\r\n        if (askSet == null) {\r\n            askSet = new ResourceRequestSet(key);\r\n            this.remotePendingAsks.put(key, askSet);\r\n            if (key.getAllocationRequestId() != 0) {\r\n                nonZeroNewKeys.add(key);\r\n            }\r\n        }\r\n        int numContainers = askSet.getNumContainers();\r\n        askSet.addAndOverrideRR(rr);\r\n        int deltaContainers = askSet.getNumContainers() - numContainers;\r\n        if (key.getAllocationRequestId() == 0) {\r\n            if (deltaContainers != 0) {\r\n                this.metrics.incrClientPending(this.rmId, AMRMClientRelayerMetrics.getRequestType(key.getExeType()), deltaContainers);\r\n                if (deltaContainers > 0) {\r\n                    this.metrics.addRequestedQPS(this.rmId, AMRMClientRelayerMetrics.getRequestType(key.getExeType()), deltaContainers);\r\n                }\r\n            }\r\n        } else {\r\n            if (deltaContainers > 0 && numContainers != 0) {\r\n                throw new YarnException(\"Received new ask (\" + askSet.getNumContainers() + \") on top of existing (\" + numContainers + \") in key \" + key);\r\n            }\r\n        }\r\n    }\r\n    for (ResourceRequestSetKey key : touchedKeys) {\r\n        ResourceRequestSet askSet = this.remotePendingAsks.get(key);\r\n        if (askSet.getNumContainers() == 0) {\r\n            this.remotePendingAsks.remove(key);\r\n        } else {\r\n            askSet.cleanupZeroNonAnyRR();\r\n        }\r\n    }\r\n    for (ResourceRequestSetKey key : nonZeroNewKeys) {\r\n        if (remotePendingAsks.containsKey(key)) {\r\n            this.askTimeStamp.put(key.getAllocationRequestId(), System.currentTimeMillis());\r\n            int count = this.remotePendingAsks.get(key).getNumContainers();\r\n            this.pendingCountForMetrics.put(key.getAllocationRequestId(), count);\r\n            this.metrics.incrClientPending(this.rmId, AMRMClientRelayerMetrics.getRequestType(key.getExeType()), count);\r\n            this.metrics.addRequestedQPS(this.rmId, AMRMClientRelayerMetrics.getRequestType(key.getExeType()), count);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "addResourceRequestToAsk",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addResourceRequestToAsk(ResourceRequest remoteRequest)\n{\r\n    this.ask.remove(remoteRequest);\r\n    this.ask.add(remoteRequest);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getRemotePendingAsks",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<ResourceRequestSetKey, ResourceRequestSet> getRemotePendingAsks()\n{\r\n    return this.remotePendingAsks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "fetchData",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void fetchData() throws YarnException, IOException, InterruptedException\n{\r\n    reqAppStates = EnumSet.noneOf(YarnApplicationState.class);\r\n    String reqStateString = $(APP_STATE);\r\n    if (reqStateString != null && !reqStateString.isEmpty()) {\r\n        String[] appStateStrings = reqStateString.split(\",\");\r\n        for (String stateString : appStateStrings) {\r\n            reqAppStates.add(YarnApplicationState.valueOf(stateString.trim()));\r\n        }\r\n    }\r\n    callerUGI = getCallerUGI();\r\n    final GetApplicationsRequest request = GetApplicationsRequest.newInstance(reqAppStates);\r\n    String appsNumStr = $(APPS_NUM);\r\n    if (appsNumStr != null && !appsNumStr.isEmpty()) {\r\n        long appsNum = Long.parseLong(appsNumStr);\r\n        request.setLimit(appsNum);\r\n    }\r\n    String appStartedTimeBegainStr = $(APP_START_TIME_BEGIN);\r\n    long appStartedTimeBegain = 0;\r\n    if (appStartedTimeBegainStr != null && !appStartedTimeBegainStr.isEmpty()) {\r\n        appStartedTimeBegain = Long.parseLong(appStartedTimeBegainStr);\r\n        if (appStartedTimeBegain < 0) {\r\n            throw new BadRequestException(\"app.started-time.begin must be greater than 0\");\r\n        }\r\n    }\r\n    String appStartedTimeEndStr = $(APP_START_TIME_END);\r\n    long appStartedTimeEnd = Long.MAX_VALUE;\r\n    if (appStartedTimeEndStr != null && !appStartedTimeEndStr.isEmpty()) {\r\n        appStartedTimeEnd = Long.parseLong(appStartedTimeEndStr);\r\n        if (appStartedTimeEnd < 0) {\r\n            throw new BadRequestException(\"app.started-time.end must be greater than 0\");\r\n        }\r\n    }\r\n    if (appStartedTimeBegain > appStartedTimeEnd) {\r\n        throw new BadRequestException(\"app.started-time.end must be greater than app.started-time.begin\");\r\n    }\r\n    request.setStartRange(Range.between(appStartedTimeBegain, appStartedTimeEnd));\r\n    if (callerUGI == null) {\r\n        appReports = getApplicationReport(request);\r\n    } else {\r\n        appReports = callerUGI.doAs(new PrivilegedExceptionAction<Collection<ApplicationReport>>() {\r\n\r\n            @Override\r\n            public Collection<ApplicationReport> run() throws Exception {\r\n                return getApplicationReport(request);\r\n            }\r\n        });\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationReport> getApplicationReport(final GetApplicationsRequest request) throws YarnException, IOException\n{\r\n    return appBaseProt.getApplications(request).getApplicationList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "render",
  "errType" : [ "YarnException|IOException|InterruptedException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void render(Block html)\n{\r\n    setTitle(\"Applications\");\r\n    try {\r\n        fetchData();\r\n    } catch (YarnException | IOException | InterruptedException e) {\r\n        String message = \"Failed to read the applications.\";\r\n        LOG.error(message, e);\r\n        html.p().__(message).__();\r\n        return;\r\n    }\r\n    renderData(html);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "renderData",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void renderData(Block html)\n{\r\n    TBODY<TABLE<Hamlet>> tbody = html.table(\"#apps\").thead().tr().th(\".id\", \"ID\").th(\".user\", \"User\").th(\".name\", \"Name\").th(\".type\", \"Application Type\").th(\".apptag\", \"Application Tags\").th(\".queue\", \"Queue\").th(\".priority\", \"Application Priority\").th(\".starttime\", \"StartTime\").th(\".launchtime\", \"LaunchTime\").th(\".finishtime\", \"FinishTime\").th(\".state\", \"State\").th(\".finalstatus\", \"FinalStatus\").th(\".progress\", \"Progress\").th(\".ui\", \"Tracking UI\").__().__().tbody();\r\n    StringBuilder appsTableData = new StringBuilder(\"[\\n\");\r\n    for (ApplicationReport appReport : appReports) {\r\n        if (!reqAppStates.isEmpty() && !reqAppStates.contains(appReport.getYarnApplicationState())) {\r\n            continue;\r\n        }\r\n        AppInfo app = new AppInfo(appReport);\r\n        String percent = StringUtils.format(\"%.1f\", app.getProgress());\r\n        appsTableData.append(\"[\\\"<a href='\").append(url(\"app\", app.getAppId())).append(\"'>\").append(app.getAppId()).append(\"</a>\\\",\\\"\").append(StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app.getUser()))).append(\"\\\",\\\"\").append(StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app.getName()))).append(\"\\\",\\\"\").append(StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app.getType()))).append(\"\\\",\\\"\").append(StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app.getApplicationTags() == null ? \"\" : app.getApplicationTags()))).append(\"\\\",\\\"\").append(StringEscapeUtils.escapeEcmaScript(StringEscapeUtils.escapeHtml4(app.getQueue()))).append(\"\\\",\\\"\").append(String.valueOf(app.getPriority())).append(\"\\\",\\\"\").append(app.getStartedTime()).append(\"\\\",\\\"\").append(app.getLaunchTime()).append(\"\\\",\\\"\").append(app.getFinishedTime()).append(\"\\\",\\\"\").append(app.getAppState() == null ? UNAVAILABLE : app.getAppState()).append(\"\\\",\\\"\").append(app.getFinalAppStatus()).append(\"\\\",\\\"\").append(\"<br title='\").append(percent).append(\"'> <div class='\").append(C_PROGRESSBAR).append(\"' title='\").append(join(percent, '%')).append(\"'> \").append(\"<div class='\").append(C_PROGRESSBAR_VALUE).append(\"' style='\").append(join(\"width:\", percent, '%')).append(\"'> </div> </div>\").append(\"\\\",\\\"<a \");\r\n        String trackingURL = app.getTrackingUrl() == null || app.getTrackingUrl().equals(UNAVAILABLE) ? null : app.getTrackingUrl();\r\n        String trackingUI = app.getTrackingUrl() == null || app.getTrackingUrl().equals(UNAVAILABLE) ? \"Unassigned\" : Apps.isApplicationFinalState(app.getAppState()) ? \"History\" : \"ApplicationMaster\";\r\n        appsTableData.append(trackingURL == null ? \"#\" : \"href='\" + trackingURL).append(\"'>\").append(trackingUI).append(\"</a>\\\"],\\n\");\r\n    }\r\n    if (appsTableData.charAt(appsTableData.length() - 2) == ',') {\r\n        appsTableData.delete(appsTableData.length() - 2, appsTableData.length() - 1);\r\n    }\r\n    appsTableData.append(\"]\");\r\n    html.script().$type(\"text/javascript\").__(\"var appsTableData=\" + appsTableData).__();\r\n    tbody.__().__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validate(GetSubClusterPolicyConfigurationRequest request) throws FederationStateStoreInvalidInputException\n{\r\n    if (request == null) {\r\n        String message = \"Missing GetSubClusterPolicyConfiguration Request.\" + \" Please try again by specifying a policy selection information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkQueue(request.getQueue());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validate(SetSubClusterPolicyConfigurationRequest request) throws FederationStateStoreInvalidInputException\n{\r\n    if (request == null) {\r\n        String message = \"Missing SetSubClusterPolicyConfiguration Request.\" + \" Please try again by specifying an policy insertion information.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkSubClusterPolicyConfiguration(request.getPolicyConfiguration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "checkSubClusterPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void checkSubClusterPolicyConfiguration(SubClusterPolicyConfiguration policyConfiguration) throws FederationStateStoreInvalidInputException\n{\r\n    if (policyConfiguration == null) {\r\n        String message = \"Missing SubClusterPolicyConfiguration.\" + \" Please try again by specifying a SubClusterPolicyConfiguration.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n    checkQueue(policyConfiguration.getQueue());\r\n    checkType(policyConfiguration.getType());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "checkQueue",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void checkQueue(String queue) throws FederationStateStoreInvalidInputException\n{\r\n    if (queue == null || queue.isEmpty()) {\r\n        String message = \"Missing Queue. Please try again by specifying a Queue.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "checkType",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void checkType(String type) throws FederationStateStoreInvalidInputException\n{\r\n    if (type == null || type.isEmpty()) {\r\n        String message = \"Missing Policy Type.\" + \" Please try again by specifying a Policy Type.\";\r\n        LOG.warn(message);\r\n        throw new FederationStateStoreInvalidInputException(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationsHomeSubClusterResponseProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = GetApplicationsHomeSubClusterResponseProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.appsHomeSubCluster != null) {\r\n        addSubClustersInfoToProto();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return getProto().hashCode();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean equals(Object other)\n{\r\n    if (other == null) {\r\n        return false;\r\n    }\r\n    if (other.getClass().isAssignableFrom(this.getClass())) {\r\n        return this.getProto().equals(this.getClass().cast(other).getProto());\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getAppsHomeSubClusters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationHomeSubCluster> getAppsHomeSubClusters()\n{\r\n    initSubClustersInfoList();\r\n    return appsHomeSubCluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setAppsHomeSubClusters",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAppsHomeSubClusters(List<ApplicationHomeSubCluster> appsHomeSubClusters)\n{\r\n    maybeInitBuilder();\r\n    if (appsHomeSubClusters == null) {\r\n        builder.clearAppSubclusterMap();\r\n        return;\r\n    }\r\n    this.appsHomeSubCluster = appsHomeSubClusters;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "initSubClustersInfoList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initSubClustersInfoList()\n{\r\n    if (this.appsHomeSubCluster != null) {\r\n        return;\r\n    }\r\n    GetApplicationsHomeSubClusterResponseProtoOrBuilder p = viaProto ? proto : builder;\r\n    List<ApplicationHomeSubClusterProto> subClusterInfosList = p.getAppSubclusterMapList();\r\n    appsHomeSubCluster = new ArrayList<ApplicationHomeSubCluster>();\r\n    for (ApplicationHomeSubClusterProto r : subClusterInfosList) {\r\n        appsHomeSubCluster.add(convertFromProtoFormat(r));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "addSubClustersInfoToProto",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addSubClustersInfoToProto()\n{\r\n    maybeInitBuilder();\r\n    builder.clearAppSubclusterMap();\r\n    if (appsHomeSubCluster == null) {\r\n        return;\r\n    }\r\n    Iterable<ApplicationHomeSubClusterProto> iterable = new Iterable<ApplicationHomeSubClusterProto>() {\r\n\r\n        @Override\r\n        public Iterator<ApplicationHomeSubClusterProto> iterator() {\r\n            return new Iterator<ApplicationHomeSubClusterProto>() {\r\n\r\n                private Iterator<ApplicationHomeSubCluster> iter = appsHomeSubCluster.iterator();\r\n\r\n                @Override\r\n                public boolean hasNext() {\r\n                    return iter.hasNext();\r\n                }\r\n\r\n                @Override\r\n                public ApplicationHomeSubClusterProto next() {\r\n                    return convertToProtoFormat(iter.next());\r\n                }\r\n\r\n                @Override\r\n                public void remove() {\r\n                    throw new UnsupportedOperationException();\r\n                }\r\n            };\r\n        }\r\n    };\r\n    builder.addAllAppSubclusterMap(iterable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationHomeSubCluster convertFromProtoFormat(ApplicationHomeSubClusterProto sc)\n{\r\n    return new ApplicationHomeSubClusterPBImpl(sc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationHomeSubClusterProto convertToProtoFormat(ApplicationHomeSubCluster sc)\n{\r\n    return ((ApplicationHomeSubClusterPBImpl) sc).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getUploadable",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getUploadable()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setUploadable",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUploadable(boolean b)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClusterInfoResponse newInstance(SubClusterInfo subClusterInfo)\n{\r\n    GetSubClusterInfoResponse registerSubClusterRequest = Records.newRecord(GetSubClusterInfoResponse.class);\r\n    registerSubClusterRequest.setSubClusterInfo(subClusterInfo);\r\n    return registerSubClusterRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterInfo getSubClusterInfo()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSubClusterInfo(SubClusterInfo subClusterInfo)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getProto",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterInfoProto getProto()\n{\r\n    mergeLocalToProto();\r\n    proto = viaProto ? proto : builder.build();\r\n    viaProto = true;\r\n    return proto;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToProto",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void mergeLocalToProto()\n{\r\n    if (viaProto) {\r\n        maybeInitBuilder();\r\n    }\r\n    mergeLocalToBuilder();\r\n    proto = builder.build();\r\n    viaProto = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "maybeInitBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void maybeInitBuilder()\n{\r\n    if (viaProto || builder == null) {\r\n        builder = SubClusterInfoProto.newBuilder(proto);\r\n    }\r\n    viaProto = false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "mergeLocalToBuilder",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mergeLocalToBuilder()\n{\r\n    if (this.subClusterId != null) {\r\n        builder.setSubClusterId(convertToProtoFormat(this.subClusterId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return TextFormat.shortDebugString(getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterId getSubClusterId()\n{\r\n    SubClusterInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (this.subClusterId != null) {\r\n        return this.subClusterId;\r\n    }\r\n    if (!p.hasSubClusterId()) {\r\n        return null;\r\n    }\r\n    this.subClusterId = convertFromProtoFormat(p.getSubClusterId());\r\n    return this.subClusterId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setSubClusterId(SubClusterId subClusterId)\n{\r\n    maybeInitBuilder();\r\n    if (subClusterId == null) {\r\n        builder.clearSubClusterId();\r\n    }\r\n    this.subClusterId = subClusterId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getAMRMServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getAMRMServiceAddress()\n{\r\n    SubClusterInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasAMRMServiceAddress()) ? p.getAMRMServiceAddress() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setAMRMServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setAMRMServiceAddress(String amRMServiceAddress)\n{\r\n    maybeInitBuilder();\r\n    if (amRMServiceAddress == null) {\r\n        builder.clearAMRMServiceAddress();\r\n        return;\r\n    }\r\n    builder.setAMRMServiceAddress(amRMServiceAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getClientRMServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getClientRMServiceAddress()\n{\r\n    SubClusterInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasClientRMServiceAddress()) ? p.getClientRMServiceAddress() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setClientRMServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setClientRMServiceAddress(String clientRMServiceAddress)\n{\r\n    maybeInitBuilder();\r\n    if (clientRMServiceAddress == null) {\r\n        builder.clearClientRMServiceAddress();\r\n        return;\r\n    }\r\n    builder.setClientRMServiceAddress(clientRMServiceAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getRMAdminServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRMAdminServiceAddress()\n{\r\n    SubClusterInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasRMAdminServiceAddress()) ? p.getRMAdminServiceAddress() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setRMAdminServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRMAdminServiceAddress(String rmAdminServiceAddress)\n{\r\n    maybeInitBuilder();\r\n    if (rmAdminServiceAddress == null) {\r\n        builder.clearRMAdminServiceAddress();\r\n        return;\r\n    }\r\n    builder.setRMAdminServiceAddress(rmAdminServiceAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getRMWebServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRMWebServiceAddress()\n{\r\n    SubClusterInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasRMWebServiceAddress()) ? p.getRMWebServiceAddress() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setRMWebServiceAddress",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setRMWebServiceAddress(String rmWebServiceAddress)\n{\r\n    maybeInitBuilder();\r\n    if (rmWebServiceAddress == null) {\r\n        builder.clearRMWebServiceAddress();\r\n        return;\r\n    }\r\n    builder.setRMWebServiceAddress(rmWebServiceAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getLastHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getLastHeartBeat()\n{\r\n    SubClusterInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return p.getLastHeartBeat();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setLastHeartBeat",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLastHeartBeat(long time)\n{\r\n    maybeInitBuilder();\r\n    builder.setLastHeartBeat(time);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterState getState()\n{\r\n    SubClusterInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    if (!p.hasState()) {\r\n        return null;\r\n    }\r\n    return convertFromProtoFormat(p.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setState(SubClusterState state)\n{\r\n    maybeInitBuilder();\r\n    if (state == null) {\r\n        builder.clearState();\r\n        return;\r\n    }\r\n    builder.setState(convertToProtoFormat(state));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getLastStartTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getLastStartTime()\n{\r\n    SubClusterInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasLastStartTime()) ? p.getLastStartTime() : 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setLastStartTime",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setLastStartTime(long lastStartTime)\n{\r\n    Preconditions.checkNotNull(builder);\r\n    builder.setLastStartTime(lastStartTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "getCapability",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getCapability()\n{\r\n    SubClusterInfoProtoOrBuilder p = viaProto ? proto : builder;\r\n    return (p.hasCapability()) ? p.getCapability() : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "setCapability",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setCapability(String capability)\n{\r\n    maybeInitBuilder();\r\n    if (capability == null) {\r\n        builder.clearCapability();\r\n        return;\r\n    }\r\n    builder.setCapability(capability);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId convertFromProtoFormat(SubClusterIdProto clusterId)\n{\r\n    return new SubClusterIdPBImpl(clusterId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterIdProto convertToProtoFormat(SubClusterId clusterId)\n{\r\n    return ((SubClusterIdPBImpl) clusterId).getProto();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertFromProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterState convertFromProtoFormat(SubClusterStateProto state)\n{\r\n    return SubClusterState.valueOf(state.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records\\impl\\pb",
  "methodName" : "convertToProtoFormat",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterStateProto convertToProtoFormat(SubClusterState state)\n{\r\n    return SubClusterStateProto.valueOf(state.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SetSubClusterPolicyConfigurationResponse newInstance()\n{\r\n    return Records.newRecord(SetSubClusterPolicyConfigurationResponse.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "NodeHeartbeatRequest newInstance(NodeStatus nodeStatus, MasterKey lastKnownContainerTokenMasterKey, MasterKey lastKnownNMTokenMasterKey, Set<NodeLabel> nodeLabels)\n{\r\n    NodeHeartbeatRequest nodeHeartbeatRequest = Records.newRecord(NodeHeartbeatRequest.class);\r\n    nodeHeartbeatRequest.setNodeStatus(nodeStatus);\r\n    nodeHeartbeatRequest.setLastKnownContainerTokenMasterKey(lastKnownContainerTokenMasterKey);\r\n    nodeHeartbeatRequest.setLastKnownNMTokenMasterKey(lastKnownNMTokenMasterKey);\r\n    nodeHeartbeatRequest.setNodeLabels(nodeLabels);\r\n    return nodeHeartbeatRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "NodeHeartbeatRequest newInstance(NodeStatus nodeStatus, MasterKey lastKnownContainerTokenMasterKey, MasterKey lastKnownNMTokenMasterKey, Set<NodeLabel> nodeLabels, Map<ApplicationId, AppCollectorData> registeringCollectors)\n{\r\n    NodeHeartbeatRequest nodeHeartbeatRequest = Records.newRecord(NodeHeartbeatRequest.class);\r\n    nodeHeartbeatRequest.setNodeStatus(nodeStatus);\r\n    nodeHeartbeatRequest.setLastKnownContainerTokenMasterKey(lastKnownContainerTokenMasterKey);\r\n    nodeHeartbeatRequest.setLastKnownNMTokenMasterKey(lastKnownNMTokenMasterKey);\r\n    nodeHeartbeatRequest.setNodeLabels(nodeLabels);\r\n    nodeHeartbeatRequest.setRegisteringCollectors(registeringCollectors);\r\n    return nodeHeartbeatRequest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeHeartbeatRequest newInstance(NodeStatus nodeStatus, MasterKey lastKnownContainerTokenMasterKey, MasterKey lastKnownNMTokenMasterKey, Set<NodeLabel> nodeLabels, Set<NodeAttribute> nodeAttributes, Map<ApplicationId, AppCollectorData> registeringCollectors)\n{\r\n    NodeHeartbeatRequest request = NodeHeartbeatRequest.newInstance(nodeStatus, lastKnownContainerTokenMasterKey, lastKnownNMTokenMasterKey, nodeLabels, registeringCollectors);\r\n    request.setNodeAttributes(nodeAttributes);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeStatus getNodeStatus()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeStatus(NodeStatus status)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getLastKnownContainerTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MasterKey getLastKnownContainerTokenMasterKey()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setLastKnownContainerTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLastKnownContainerTokenMasterKey(MasterKey secretKey)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getLastKnownNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MasterKey getLastKnownNMTokenMasterKey()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setLastKnownNMTokenMasterKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLastKnownNMTokenMasterKey(MasterKey secretKey)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<NodeLabel> getNodeLabels()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeLabels(Set<NodeLabel> nodeLabels)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getLogAggregationReportsForApps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<LogAggregationReport> getLogAggregationReportsForApps()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setLogAggregationReportsForApps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLogAggregationReportsForApps(List<LogAggregationReport> logAggregationReportsForApps)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getRegisteringCollectors",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<ApplicationId, AppCollectorData> getRegisteringCollectors()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setRegisteringCollectors",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRegisteringCollectors(Map<ApplicationId, AppCollectorData> appCollectorsMap)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<NodeAttribute> getNodeAttributes()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeAttributes(Set<NodeAttribute> nodeAttributes)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setTokenSequenceNo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTokenSequenceNo(long tokenSequenceNo)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getTokenSequenceNo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTokenSequenceNo()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "reinitialize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void reinitialize(FederationPolicyInitializationContext policyContext) throws FederationPolicyInitializationException\n{\r\n    FederationPolicyInitializationContextValidator.validate(policyContext, this.getClass().getCanonicalName());\r\n    setPolicyContext(policyContext);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "getHomeSubcluster",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "SubClusterId getHomeSubcluster(ApplicationSubmissionContext appSubmissionContext, List<SubClusterId> blackListSubClusters) throws YarnException\n{\r\n    validate(appSubmissionContext);\r\n    Map<SubClusterId, SubClusterInfo> activeSubclusters = getActiveSubclusters();\r\n    List<SubClusterId> list = new ArrayList<>(activeSubclusters.keySet());\r\n    FederationPolicyUtils.validateSubClusterAvailability(list, blackListSubClusters);\r\n    if (blackListSubClusters != null) {\r\n        for (SubClusterId scId : blackListSubClusters) {\r\n            list.remove(scId);\r\n        }\r\n    }\r\n    return list.get(rand.nextInt(list.size()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "addAndOverrideRR",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addAndOverrideRR(ResourceRequest ask) throws YarnException\n{\r\n    if (!this.key.equals(new ResourceRequestSetKey(ask))) {\r\n        throw new YarnException(\"None compatible asks: \\n\" + ask + \"\\n\" + this.key);\r\n    }\r\n    this.asks.put(ask.getResourceName(), ask);\r\n    if (this.key.getExeType().equals(ExecutionType.GUARANTEED)) {\r\n        if (ask.getResourceName().equals(ResourceRequest.ANY)) {\r\n            this.numContainers = ask.getNumContainers();\r\n        }\r\n    } else {\r\n        this.numContainers = ask.getNumContainers();\r\n    }\r\n    if (this.numContainers < 0) {\r\n        throw new YarnException(\"numContainers becomes \" + this.numContainers + \" when adding ask \" + ask + \"\\n requestSet: \" + toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "addAndOverrideRRSet",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addAndOverrideRRSet(ResourceRequestSet requestSet) throws YarnException\n{\r\n    if (requestSet == null) {\r\n        return;\r\n    }\r\n    for (ResourceRequest rr : requestSet.getRRs()) {\r\n        addAndOverrideRR(rr);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "cleanupZeroNonAnyRR",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void cleanupZeroNonAnyRR()\n{\r\n    Iterator<Entry<String, ResourceRequest>> iter = this.asks.entrySet().iterator();\r\n    while (iter.hasNext()) {\r\n        Entry<String, ResourceRequest> entry = iter.next();\r\n        if (entry.getKey().equals(ResourceRequest.ANY)) {\r\n            continue;\r\n        }\r\n        if (entry.getValue().getNumContainers() == 0) {\r\n            iter.remove();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getAsks",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, ResourceRequest> getAsks()\n{\r\n    return this.asks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getRRs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<ResourceRequest> getRRs()\n{\r\n    return this.asks.values();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "getNumContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getNumContainers()\n{\r\n    return this.numContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "setNumContainers",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setNumContainers(int newValue) throws YarnException\n{\r\n    if (this.numContainers == 0) {\r\n        throw new YarnException(\"should not set numContainers to \" + newValue + \" for a cancel requestSet: \" + toString());\r\n    }\r\n    int oldValue = this.numContainers;\r\n    this.numContainers = newValue;\r\n    if (this.key.getExeType().equals(ExecutionType.OPPORTUNISTIC)) {\r\n        Map<String, ResourceRequest> newAsks = new HashMap<>();\r\n        for (ResourceRequest rr : this.asks.values()) {\r\n            ResourceRequest clone = ResourceRequest.clone(rr);\r\n            clone.setNumContainers(newValue);\r\n            newAsks.put(clone.getResourceName(), clone);\r\n        }\r\n        this.asks = newAsks;\r\n    } else {\r\n        ResourceRequest rr = this.asks.get(ResourceRequest.ANY);\r\n        if (rr == null) {\r\n            throw new YarnException(\"No ANY RR found in requestSet with numContainers=\" + oldValue);\r\n        }\r\n        ResourceRequest clone = ResourceRequest.clone(rr);\r\n        clone.setNumContainers(newValue);\r\n        this.asks.put(ResourceRequest.ANY, clone);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(\"{\" + this.key.toString());\r\n    for (Entry<String, ResourceRequest> entry : this.asks.entrySet()) {\r\n        builder.append(\" \" + entry.getValue().getNumContainers() + \":\" + entry.getKey());\r\n    }\r\n    builder.append(\"}\");\r\n    return builder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpdateApplicationHomeSubClusterResponse newInstance()\n{\r\n    UpdateApplicationHomeSubClusterResponse response = Records.newRecord(UpdateApplicationHomeSubClusterResponse.class);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "LogAggregationReport newInstance(ApplicationId appId, LogAggregationStatus status, String diagnosticMessage)\n{\r\n    LogAggregationReport report = Records.newRecord(LogAggregationReport.class);\r\n    report.setApplicationId(appId);\r\n    report.setLogAggregationStatus(status);\r\n    report.setDiagnosticMessage(diagnosticMessage);\r\n    return report;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId getApplicationId()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setApplicationId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationId(ApplicationId appId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getLogAggregationStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LogAggregationStatus getLogAggregationStatus()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setLogAggregationStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLogAggregationStatus(LogAggregationStatus logAggregationStatus)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "getDiagnosticMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnosticMessage()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "setDiagnosticMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiagnosticMessage(String diagnosticMessage)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "shutdown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void shutdown()\n{\r\n    this.keepRunning = false;\r\n    this.interrupt();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "run",
  "errType" : [ "InterruptedException", "Throwable" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void run()\n{\r\n    while (keepRunning) {\r\n        AsyncAllocateRequestInfo requestInfo;\r\n        try {\r\n            this.isThreadWaiting = true;\r\n            requestInfo = this.requestQueue.take();\r\n            this.isThreadWaiting = false;\r\n            if (requestInfo == null) {\r\n                throw new YarnException(\"Null requestInfo taken from request queue\");\r\n            }\r\n            if (!this.keepRunning) {\r\n                break;\r\n            }\r\n            AllocateRequest request = requestInfo.getRequest();\r\n            if (request == null) {\r\n                throw new YarnException(\"Null allocateRequest from requestInfo\");\r\n            }\r\n            LOG.debug(\"Sending Heartbeat to RM. AskList:{}\", ((request.getAskList() == null) ? \" empty\" : request.getAskList().size()));\r\n            request.setResponseId(lastResponseId);\r\n            AllocateResponse response = rmProxyRelayer.allocate(request);\r\n            if (response == null) {\r\n                throw new YarnException(\"Null allocateResponse from allocate\");\r\n            }\r\n            lastResponseId = response.getResponseId();\r\n            if (response.getAMRMToken() != null) {\r\n                LOG.debug(\"Received new AMRMToken\");\r\n                YarnServerSecurityUtils.updateAMRMToken(response.getAMRMToken(), userUgi, conf);\r\n            }\r\n            LOG.debug(\"Received Heartbeat reply from RM. Allocated Containers:{}\", ((response.getAllocatedContainers() == null) ? \" empty\" : response.getAllocatedContainers().size()));\r\n            if (requestInfo.getCallback() == null) {\r\n                throw new YarnException(\"Null callback from requestInfo\");\r\n            }\r\n            requestInfo.getCallback().callback(response);\r\n        } catch (InterruptedException ex) {\r\n            LOG.debug(\"Interrupted while waiting for queue\", ex);\r\n        } catch (Throwable ex) {\r\n            LOG.warn(\"Error occurred while processing heart beat for \" + applicationId, ex);\r\n        }\r\n    }\r\n    LOG.info(\"AMHeartbeatRequestHandler thread for {} is exiting\", applicationId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "resetLastResponseId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void resetLastResponseId()\n{\r\n    this.lastResponseId = 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setUGI",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUGI(UserGroupInformation ugi)\n{\r\n    this.userUgi = ugi;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "allocateAsync",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void allocateAsync(AllocateRequest request, AsyncCallback<AllocateResponse> callback) throws YarnException\n{\r\n    try {\r\n        this.requestQueue.put(new AsyncAllocateRequestInfo(request, callback));\r\n    } catch (InterruptedException ex) {\r\n        LOG.debug(\"Interrupted while waiting to put on response queue\", ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "drainHeartbeatThread",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void drainHeartbeatThread()\n{\r\n    while (!this.isThreadWaiting || this.requestQueue.size() > 0) {\r\n        try {\r\n            Thread.sleep(10);\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getRequestQueueSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getRequestQueueSize()\n{\r\n    return this.requestQueue.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "AMRMClientRelayerMetrics getInstance()\n{\r\n    if (!isInitialized.get()) {\r\n        synchronized (AMRMClientRelayerMetrics.class) {\r\n            if (instance == null) {\r\n                instance = new AMRMClientRelayerMetrics();\r\n                DefaultMetricsSystem.instance().register(RECORD_INFO.name(), RECORD_INFO.description(), instance);\r\n                isInitialized.set(true);\r\n            }\r\n        }\r\n    }\r\n    return instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getRequestType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RequestType getRequestType(ExecutionType execType)\n{\r\n    if (execType == null || execType.equals(ExecutionType.GUARANTEED)) {\r\n        return RequestType.Guaranteed;\r\n    }\r\n    return RequestType.Opportunistic;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getPendingMetric",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "MutableGaugeLong getPendingMetric(String instanceId, RequestType type)\n{\r\n    synchronized (rmClientPending) {\r\n        if (!rmClientPending.containsKey(instanceId)) {\r\n            rmClientPending.put(instanceId, new ConcurrentHashMap<RequestType, MutableGaugeLong>());\r\n        }\r\n        if (!rmClientPending.get(instanceId).containsKey(type)) {\r\n            rmClientPending.get(instanceId).put(type, registry.newGauge(type.toString() + \"Pending\" + instanceId, \"Remove pending of \" + type + \" for \" + instanceId, 0L));\r\n        }\r\n    }\r\n    return rmClientPending.get(instanceId).get(type);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "incrClientPending",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrClientPending(String instanceId, RequestType type, int diff)\n{\r\n    getPendingMetric(instanceId, type).incr(diff);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "decrClientPending",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void decrClientPending(String instanceId, RequestType type, int diff)\n{\r\n    getPendingMetric(instanceId, type).decr(diff);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "setClientPending",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setClientPending(String instanceId, RequestType type, int val)\n{\r\n    getPendingMetric(instanceId, type).set(val);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getFulfillLatencyMetric",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "MutableQuantiles getFulfillLatencyMetric(String instanceId, RequestType type)\n{\r\n    synchronized (fulfillLatency) {\r\n        if (!fulfillLatency.containsKey(instanceId)) {\r\n            fulfillLatency.put(instanceId, new ConcurrentHashMap<RequestType, MutableQuantiles>());\r\n        }\r\n        if (!fulfillLatency.get(instanceId).containsKey(type)) {\r\n            fulfillLatency.get(instanceId).put(type, registry.newQuantiles(type.toString() + \"FulfillLatency\" + instanceId, \"FulfillLatency of \" + type + \" for \" + instanceId, \"ops\", \"latency\", 60));\r\n        }\r\n    }\r\n    return fulfillLatency.get(instanceId).get(type);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "addFulfillLatency",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addFulfillLatency(String instanceId, RequestType type, long latency)\n{\r\n    getFulfillLatencyMetric(instanceId, type).add(latency);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "addFulfillLatency",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addFulfillLatency(String instanceId, ContainerUpdateType type, long latency)\n{\r\n    switch(type) {\r\n        case DEMOTE_EXECUTION_TYPE:\r\n            addFulfillLatency(instanceId, RequestType.Demote, latency);\r\n            break;\r\n        case PROMOTE_EXECUTION_TYPE:\r\n            addFulfillLatency(instanceId, RequestType.Promote, latency);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getRequestedQPSMetric",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "MutableGaugeLong getRequestedQPSMetric(String instanceId, RequestType type)\n{\r\n    synchronized (requestedQps) {\r\n        if (!requestedQps.containsKey(instanceId)) {\r\n            requestedQps.put(instanceId, new ConcurrentHashMap<RequestType, MutableGaugeLong>());\r\n        }\r\n        if (!requestedQps.get(instanceId).containsKey(type)) {\r\n            requestedQps.get(instanceId).put(type, registry.newGauge(info(type.toString() + \"RequestedOps\" + instanceId, \"Requested operations of \" + type + \" for \" + instanceId), 0L));\r\n        }\r\n    }\r\n    return requestedQps.get(instanceId).get(type);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "addRequestedQPS",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addRequestedQPS(String instanceId, RequestType type, long numEntries)\n{\r\n    getRequestedQPSMetric(instanceId, type).incr(numEntries);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getFulfilledQPSMetric",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "MutableGaugeLong getFulfilledQPSMetric(String instanceId, RequestType type)\n{\r\n    synchronized (fulfilledQps) {\r\n        if (!fulfilledQps.containsKey(instanceId)) {\r\n            fulfilledQps.put(instanceId, new ConcurrentHashMap<RequestType, MutableGaugeLong>());\r\n        }\r\n        if (!fulfilledQps.get(instanceId).containsKey(type)) {\r\n            fulfilledQps.get(instanceId).put(type, registry.newGauge(info(type.toString() + \"FulfilledOps\" + instanceId, \"Fulfilled operations of \" + type + \" for \" + instanceId), 0L));\r\n        }\r\n    }\r\n    return fulfilledQps.get(instanceId).get(type);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "addFulfilledQPS",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addFulfilledQPS(String instanceId, RequestType type, long numEntries)\n{\r\n    getFulfilledQPSMetric(instanceId, type).incr(numEntries);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "addFulfilledQPS",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addFulfilledQPS(String instanceId, ContainerUpdateType type, long latency)\n{\r\n    switch(type) {\r\n        case DEMOTE_EXECUTION_TYPE:\r\n            addFulfilledQPS(instanceId, RequestType.Demote, latency);\r\n            break;\r\n        case PROMOTE_EXECUTION_TYPE:\r\n            addFulfilledQPS(instanceId, RequestType.Promote, latency);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "incrClientPending",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void incrClientPending(String scId, ContainerUpdateType type, int diff)\n{\r\n    switch(type) {\r\n        case DEMOTE_EXECUTION_TYPE:\r\n            incrClientPending(scId, RequestType.Demote, diff);\r\n            break;\r\n        case PROMOTE_EXECUTION_TYPE:\r\n            incrClientPending(scId, RequestType.Promote, diff);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "decrClientPending",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void decrClientPending(String scId, ContainerUpdateType type, int diff)\n{\r\n    switch(type) {\r\n        case DEMOTE_EXECUTION_TYPE:\r\n            decrClientPending(scId, RequestType.Demote, diff);\r\n            break;\r\n        case PROMOTE_EXECUTION_TYPE:\r\n            decrClientPending(scId, RequestType.Promote, diff);\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getRMMasterSlaveSwitchMetric",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MutableGaugeLong getRMMasterSlaveSwitchMetric(String instanceId)\n{\r\n    synchronized (rmMasterSlaveSwitch) {\r\n        if (!rmMasterSlaveSwitch.containsKey(instanceId)) {\r\n            rmMasterSlaveSwitch.put(instanceId, registry.newGauge(info(\"RMMasterSlaveSwitch\" + instanceId, \"Number of RM master slave switch\"), 0L));\r\n        }\r\n    }\r\n    return rmMasterSlaveSwitch.get(instanceId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "incrRMMasterSlaveSwitch",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrRMMasterSlaveSwitch(String instanceId)\n{\r\n    getRMMasterSlaveSwitchMetric(instanceId).incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getHeartbeatLatencyMetric",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MutableQuantiles getHeartbeatLatencyMetric(String instanceId)\n{\r\n    synchronized (heartbeatLatency) {\r\n        if (!heartbeatLatency.containsKey(instanceId)) {\r\n            heartbeatLatency.put(instanceId, registry.newQuantiles(\"HeartbeatLatency\" + instanceId, \"HeartbeatLatency for \" + instanceId, \"ops\", \"latency\", 60));\r\n        }\r\n    }\r\n    return heartbeatLatency.get(instanceId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getHeartbeatFailureMetric",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MutableGaugeLong getHeartbeatFailureMetric(String instanceId)\n{\r\n    synchronized (heartbeatFailure) {\r\n        if (!heartbeatFailure.containsKey(instanceId)) {\r\n            heartbeatFailure.put(instanceId, registry.newGauge(info(\"HeartbeatFailure\" + instanceId, \"Number of Heartbeat Failures\"), 0L));\r\n        }\r\n    }\r\n    return heartbeatFailure.get(instanceId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "addHeartbeatFailure",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addHeartbeatFailure(String instanceId, long latency)\n{\r\n    getHeartbeatFailureMetric(instanceId).incr();\r\n    getHeartbeatLatencyMetric(instanceId).add(latency);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getHeartbeatSuccessMetric",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MutableGaugeLong getHeartbeatSuccessMetric(String instanceId)\n{\r\n    synchronized (heartbeatSuccess) {\r\n        if (!heartbeatSuccess.containsKey(instanceId)) {\r\n            heartbeatSuccess.put(instanceId, registry.newGauge(info(\"HeartbeatSuccess\" + instanceId, \"Number of Heartbeat\"), 0L));\r\n        }\r\n    }\r\n    return heartbeatSuccess.get(instanceId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "addHeartbeatSuccess",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addHeartbeatSuccess(String instanceId, long latency)\n{\r\n    getHeartbeatSuccessMetric(instanceId).incr();\r\n    getHeartbeatLatencyMetric(instanceId).add(latency);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getMetrics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void getMetrics(MetricsCollector builder, boolean all)\n{\r\n    registry.snapshot(builder.addRecord(registry.info().name()), all);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "newInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetSubClustersInfoRequest newInstance(boolean filterInactiveSubClusters)\n{\r\n    GetSubClustersInfoRequest request = Records.newRecord(GetSubClustersInfoRequest.class);\r\n    request.setFilterInactiveSubClusters(filterInactiveSubClusters);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "getFilterInactiveSubClusters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getFilterInactiveSubClusters()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setFilterInactiveSubClusters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFilterInactiveSubClusters(boolean filterInactiveSubClusters)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]