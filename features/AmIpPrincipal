[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    Configuration config = new YarnConfiguration(conf);\r\n    doSecureLogin(conf);\r\n    proxy = new WebAppProxy();\r\n    addService(proxy);\r\n    DefaultMetricsSystem.initialize(\"WebAppProxyServer\");\r\n    JvmMetrics jm = JvmMetrics.initSingleton(\"WebAppProxyServer\", null);\r\n    pauseMonitor = new JvmPauseMonitor();\r\n    addService(pauseMonitor);\r\n    jm.setPauseMonitor(pauseMonitor);\r\n    super.serviceInit(config);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    super.serviceStop();\r\n    DefaultMetricsSystem.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "doSecureLogin",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void doSecureLogin(Configuration conf) throws IOException\n{\r\n    InetSocketAddress socAddr = getBindAddress(conf);\r\n    SecurityUtil.login(conf, YarnConfiguration.PROXY_KEYTAB, YarnConfiguration.PROXY_PRINCIPAL, socAddr.getHostName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getBindAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "InetSocketAddress getBindAddress(Configuration conf)\n{\r\n    return conf.getSocketAddr(YarnConfiguration.PROXY_BIND_HOST, YarnConfiguration.PROXY_ADDRESS, YarnConfiguration.DEFAULT_PROXY_ADDRESS, YarnConfiguration.DEFAULT_PROXY_PORT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "main",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\r\n    StringUtils.startupShutdownMessage(WebAppProxyServer.class, args, LOG);\r\n    try {\r\n        YarnConfiguration configuration = new YarnConfiguration();\r\n        new GenericOptionsParser(configuration, args);\r\n        WebAppProxyServer proxyServer = startServer(configuration);\r\n        proxyServer.proxy.join();\r\n    } catch (Throwable t) {\r\n        ExitUtil.terminate(-1, t);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "startServer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "WebAppProxyServer startServer(Configuration configuration) throws Exception\n{\r\n    WebAppProxyServer proxy = new WebAppProxyServer();\r\n    ShutdownHookManager.get().addShutdownHook(new CompositeServiceShutdownHook(proxy), SHUTDOWN_HOOK_PRIORITY);\r\n    proxy.init(configuration);\r\n    proxy.start();\r\n    return proxy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "getUserPrincipal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Principal getUserPrincipal()\n{\r\n    return principal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "getRemoteUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getRemoteUser()\n{\r\n    return principal.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "isUserInRole",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isUserInRole(String role)\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "initFilter",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void initFilter(FilterContainer container, Configuration conf)\n{\r\n    Map<String, String> params = new HashMap<>();\r\n    List<String> proxies = WebAppUtils.getProxyHostsAndPortsForAmFilter(conf);\r\n    StringBuilder sb = new StringBuilder();\r\n    for (String proxy : proxies) {\r\n        sb.append(proxy.split(\":\")[0]).append(AmIpFilter.PROXY_HOSTS_DELIMITER);\r\n    }\r\n    sb.setLength(sb.length() - 1);\r\n    params.put(AmIpFilter.PROXY_HOSTS, sb.toString());\r\n    String prefix = WebAppUtils.getHttpSchemePrefix(conf);\r\n    String proxyBase = getApplicationWebProxyBase();\r\n    sb = new StringBuilder();\r\n    for (String proxy : proxies) {\r\n        sb.append(prefix).append(proxy).append(proxyBase).append(AmIpFilter.PROXY_HOSTS_DELIMITER);\r\n    }\r\n    sb.setLength(sb.length() - 1);\r\n    params.put(AmIpFilter.PROXY_URI_BASES, sb.toString());\r\n    YarnConfiguration yarnConf = new YarnConfiguration(conf);\r\n    Collection<String> rmIds = getRmIds(yarnConf);\r\n    if (rmIds != null) {\r\n        List<String> urls = new ArrayList<>();\r\n        for (String rmId : rmIds) {\r\n            String url = getUrlByRmId(yarnConf, rmId);\r\n            urls.add(url);\r\n        }\r\n        if (!urls.isEmpty()) {\r\n            params.put(RM_HA_URLS, StringUtils.join(\",\", urls));\r\n        }\r\n    }\r\n    container.addFilter(FILTER_NAME, FILTER_CLASS, params);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "getRmIds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<String> getRmIds(Configuration conf)\n{\r\n    return conf.getStringCollection(YarnConfiguration.RM_HA_IDS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "getUrlByRmId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getUrlByRmId(Configuration conf, String rmId)\n{\r\n    String addressPropertyPrefix = YarnConfiguration.useHttps(conf) ? YarnConfiguration.RM_WEBAPP_HTTPS_ADDRESS : YarnConfiguration.RM_WEBAPP_ADDRESS;\r\n    String host = conf.get(HAUtil.addSuffix(addressPropertyPrefix, rmId));\r\n    return host;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "getApplicationWebProxyBase",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getApplicationWebProxyBase()\n{\r\n    return System.getenv(ApplicationConstants.APPLICATION_WEB_PROXY_BASE_ENV);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "init",
  "errType" : [ "MalformedURLException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void init(FilterConfig conf) throws ServletException\n{\r\n    if (conf.getInitParameter(PROXY_HOST) != null && conf.getInitParameter(PROXY_URI_BASE) != null) {\r\n        proxyHosts = new String[] { conf.getInitParameter(PROXY_HOST) };\r\n        proxyUriBases = new HashMap<>(1);\r\n        proxyUriBases.put(\"dummy\", conf.getInitParameter(PROXY_URI_BASE));\r\n    } else {\r\n        proxyHosts = conf.getInitParameter(PROXY_HOSTS).split(PROXY_HOSTS_DELIMITER);\r\n        String[] proxyUriBasesArr = conf.getInitParameter(PROXY_URI_BASES).split(PROXY_URI_BASES_DELIMITER);\r\n        proxyUriBases = new HashMap<>(proxyUriBasesArr.length);\r\n        for (String proxyUriBase : proxyUriBasesArr) {\r\n            try {\r\n                URL url = new URL(proxyUriBase);\r\n                proxyUriBases.put(url.getHost() + \":\" + url.getPort(), proxyUriBase);\r\n            } catch (MalformedURLException e) {\r\n                LOG.warn(\"{} does not appear to be a valid URL\", proxyUriBase, e);\r\n            }\r\n        }\r\n    }\r\n    if (conf.getInitParameter(AmFilterInitializer.RM_HA_URLS) != null) {\r\n        rmUrls = conf.getInitParameter(AmFilterInitializer.RM_HA_URLS).split(\",\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "getProxyAddresses",
  "errType" : [ "UnknownHostException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Set<String> getProxyAddresses() throws ServletException\n{\r\n    long now = Time.monotonicNow();\r\n    synchronized (this) {\r\n        if (proxyAddresses == null || (lastUpdate + updateInterval) <= now) {\r\n            proxyAddresses = new HashSet<>();\r\n            for (String proxyHost : proxyHosts) {\r\n                try {\r\n                    for (InetAddress add : InetAddress.getAllByName(proxyHost)) {\r\n                        LOG.debug(\"proxy address is: {}\", add.getHostAddress());\r\n                        proxyAddresses.add(add.getHostAddress());\r\n                    }\r\n                    lastUpdate = now;\r\n                } catch (UnknownHostException e) {\r\n                    LOG.warn(\"Could not locate {} - skipping\", proxyHost, e);\r\n                }\r\n            }\r\n            if (proxyAddresses.isEmpty()) {\r\n                throw new ServletException(\"Could not locate any of the proxy hosts\");\r\n            }\r\n        }\r\n        return proxyAddresses;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "destroy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void destroy()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "doFilter",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws IOException, ServletException\n{\r\n    ProxyUtils.rejectNonHttpRequests(req);\r\n    HttpServletRequest httpReq = (HttpServletRequest) req;\r\n    HttpServletResponse httpResp = (HttpServletResponse) resp;\r\n    LOG.debug(\"Remote address for request is: {}\", httpReq.getRemoteAddr());\r\n    if (!getProxyAddresses().contains(httpReq.getRemoteAddr())) {\r\n        StringBuilder redirect = new StringBuilder(findRedirectUrl());\r\n        redirect.append(httpReq.getRequestURI());\r\n        int insertPoint = redirect.indexOf(PROXY_PATH);\r\n        if (insertPoint >= 0) {\r\n            insertPoint += PROXY_PATH.length();\r\n            redirect.insert(insertPoint, \"/redirect\");\r\n        }\r\n        String queryString = httpReq.getQueryString();\r\n        if (queryString != null && !queryString.isEmpty()) {\r\n            redirect.append(\"?\");\r\n            redirect.append(queryString);\r\n        }\r\n        ProxyUtils.sendRedirect(httpReq, httpResp, redirect.toString());\r\n    } else {\r\n        String user = null;\r\n        if (httpReq.getCookies() != null) {\r\n            for (Cookie c : httpReq.getCookies()) {\r\n                if (WebAppProxyServlet.PROXY_USER_COOKIE_NAME.equals(c.getName())) {\r\n                    user = c.getValue();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (user == null) {\r\n            LOG.debug(\"Could not find {} cookie, so user will not be set\", WebAppProxyServlet.PROXY_USER_COOKIE_NAME);\r\n            chain.doFilter(req, resp);\r\n        } else {\r\n            AmIpPrincipal principal = new AmIpPrincipal(user);\r\n            ServletRequest requestWrapper = new AmIpServletRequestWrapper(httpReq, principal);\r\n            chain.doFilter(requestWrapper, resp);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "findRedirectUrl",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String findRedirectUrl() throws ServletException\n{\r\n    String addr = null;\r\n    if (proxyUriBases.size() == 1) {\r\n        addr = proxyUriBases.values().iterator().next();\r\n    } else if (rmUrls != null) {\r\n        for (String url : rmUrls) {\r\n            String host = proxyUriBases.get(url);\r\n            if (isValidUrl(host)) {\r\n                addr = host;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (addr == null) {\r\n        throw new ServletException(\"Could not determine the proxy server for redirection\");\r\n    }\r\n    return addr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "isValidUrl",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean isValidUrl(String url)\n{\r\n    boolean isValid = false;\r\n    try {\r\n        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\r\n        conn.connect();\r\n        isValid = conn.getResponseCode() == HttpURLConnection.HTTP_OK;\r\n        if (!isValid && UserGroupInformation.isSecurityEnabled()) {\r\n            isValid = (conn.getResponseCode() == HttpURLConnection.HTTP_UNAUTHORIZED) || (conn.getResponseCode() == HttpURLConnection.HTTP_FORBIDDEN);\r\n            return isValid;\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.warn(\"Failed to connect to \" + url + \": \" + e.toString());\r\n    }\r\n    return isValid;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy\\amfilter",
  "methodName" : "setUpdateInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUpdateInterval(long updateInterval)\n{\r\n    AmIpFilter.updateInterval = updateInterval;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void init() throws GeneralSecurityException, IOException\n{\r\n    createCACertAndKeyPair();\r\n    initInternal();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void init(X509Certificate caCert, PrivateKey caPrivateKey) throws GeneralSecurityException, IOException\n{\r\n    if (caCert == null || caPrivateKey == null || !verifyCertAndKeys(caCert, caPrivateKey)) {\r\n        LOG.warn(\"Could not verify Certificate, Public Key, and Private Key: \" + \"regenerating\");\r\n        createCACertAndKeyPair();\r\n    } else {\r\n        this.caCert = caCert;\r\n        this.caKeyPair = new KeyPair(caCert.getPublicKey(), caPrivateKey);\r\n    }\r\n    initInternal();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "initInternal",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void initInternal() throws GeneralSecurityException, IOException\n{\r\n    defaultTrustManager = null;\r\n    TrustManagerFactory factory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());\r\n    factory.init((KeyStore) null);\r\n    for (TrustManager manager : factory.getTrustManagers()) {\r\n        if (manager instanceof X509TrustManager) {\r\n            defaultTrustManager = (X509TrustManager) manager;\r\n            break;\r\n        }\r\n    }\r\n    if (defaultTrustManager == null) {\r\n        throw new YarnRuntimeException(\"Could not find default X509 Trust Manager\");\r\n    }\r\n    this.x509KeyManager = createKeyManager();\r\n    this.hostnameVerifier = createHostnameVerifier();\r\n    this.childTrustStore = createTrustStore(\"client\", caCert);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "createCert",
  "errType" : [ "OperatorCreationException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "X509Certificate createCert(boolean isCa, String issuerStr, String subjectStr, Date from, Date to, PublicKey publicKey, PrivateKey privateKey) throws GeneralSecurityException, IOException\n{\r\n    X500Name issuer = new X500Name(issuerStr);\r\n    X500Name subject = new X500Name(subjectStr);\r\n    SubjectPublicKeyInfo subPubKeyInfo = SubjectPublicKeyInfo.getInstance(publicKey.getEncoded());\r\n    X509v3CertificateBuilder certBuilder = new X509v3CertificateBuilder(issuer, new BigInteger(64, srand), from, to, subject, subPubKeyInfo);\r\n    AlgorithmIdentifier digAlgId = new DefaultDigestAlgorithmIdentifierFinder().find(SIG_ALG_ID);\r\n    ContentSigner contentSigner;\r\n    try {\r\n        contentSigner = new BcRSAContentSignerBuilder(SIG_ALG_ID, digAlgId).build(PrivateKeyFactory.createKey(privateKey.getEncoded()));\r\n    } catch (OperatorCreationException oce) {\r\n        throw new GeneralSecurityException(oce);\r\n    }\r\n    if (isCa) {\r\n        certBuilder.addExtension(Extension.basicConstraints, true, new BasicConstraints(0));\r\n    } else {\r\n        certBuilder.addExtension(Extension.basicConstraints, true, new BasicConstraints(false));\r\n        certBuilder.addExtension(Extension.authorityKeyIdentifier, false, new JcaX509ExtensionUtils().createAuthorityKeyIdentifier(caCert));\r\n    }\r\n    X509CertificateHolder certHolder = certBuilder.build(contentSigner);\r\n    X509Certificate cert = new JcaX509CertificateConverter().setProvider(\"BC\").getCertificate(certHolder);\r\n    LOG.info(\"Created Certificate for {}\", subject);\r\n    return cert;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "createCACertAndKeyPair",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void createCACertAndKeyPair() throws GeneralSecurityException, IOException\n{\r\n    Date from = new Date();\r\n    Date to = new GregorianCalendar(2037, Calendar.DECEMBER, 31).getTime();\r\n    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\r\n    keyGen.initialize(2048);\r\n    caKeyPair = keyGen.genKeyPair();\r\n    String subject = \"OU=YARN-\" + UUID.randomUUID();\r\n    caCert = createCert(true, subject, subject, from, to, caKeyPair.getPublic(), caKeyPair.getPrivate());\r\n    LOG.debug(\"CA Certificate: \\n{}\", caCert);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "createChildKeyStore",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "byte[] createChildKeyStore(ApplicationId appId, String ksPassword) throws Exception\n{\r\n    Date from = new Date();\r\n    Date to = from;\r\n    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\r\n    keyGen.initialize(2048);\r\n    KeyPair keyPair = keyGen.genKeyPair();\r\n    String issuer = caCert.getSubjectX500Principal().getName();\r\n    String subject = \"CN=\" + appId;\r\n    X509Certificate cert = createCert(false, issuer, subject, from, to, keyPair.getPublic(), caKeyPair.getPrivate());\r\n    if (LOG.isTraceEnabled()) {\r\n        LOG.trace(\"Certificate for {}: \\n{}\", appId, cert);\r\n    }\r\n    KeyStore keyStore = createChildKeyStore(ksPassword, \"server\", keyPair.getPrivate(), cert);\r\n    return keyStoreToBytes(keyStore, ksPassword);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getChildTrustStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] getChildTrustStore(String password) throws GeneralSecurityException, IOException\n{\r\n    return keyStoreToBytes(childTrustStore, password);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "createEmptyKeyStore",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "KeyStore createEmptyKeyStore() throws GeneralSecurityException, IOException\n{\r\n    KeyStore ks = KeyStore.getInstance(\"JKS\");\r\n    ks.load(null, null);\r\n    return ks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "createChildKeyStore",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "KeyStore createChildKeyStore(String password, String alias, Key privateKey, Certificate cert) throws GeneralSecurityException, IOException\n{\r\n    KeyStore ks = createEmptyKeyStore();\r\n    ks.setKeyEntry(alias, privateKey, password.toCharArray(), new Certificate[] { cert, caCert });\r\n    return ks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "generateKeyStorePassword",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String generateKeyStorePassword()\n{\r\n    return RandomStringUtils.random(16, 0, 0, true, true, null, srand);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "keyStoreToBytes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] keyStoreToBytes(KeyStore ks, String password) throws GeneralSecurityException, IOException\n{\r\n    try (ByteArrayOutputStream out = new ByteArrayOutputStream()) {\r\n        ks.store(out, password.toCharArray());\r\n        return out.toByteArray();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "createTrustStore",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "KeyStore createTrustStore(String alias, Certificate cert) throws GeneralSecurityException, IOException\n{\r\n    KeyStore ks = createEmptyKeyStore();\r\n    ks.setCertificateEntry(alias, cert);\r\n    return ks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "createSSLContext",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SSLContext createSSLContext(ApplicationId appId) throws GeneralSecurityException\n{\r\n    TrustManager[] trustManagers = new TrustManager[] { createTrustManager(appId) };\r\n    KeyManager[] keyManagers = new KeyManager[] { x509KeyManager };\r\n    SSLContext sc = SSLContext.getInstance(\"SSL\");\r\n    sc.init(keyManagers, trustManagers, new SecureRandom());\r\n    return sc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "createTrustManager",
  "errType" : [ "CertificateException|NoSuchAlgorithmException|InvalidKeyException|NoSuchProviderException|SignatureException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "X509TrustManager createTrustManager(ApplicationId appId)\n{\r\n    return new X509TrustManager() {\r\n\r\n        @Override\r\n        public java.security.cert.X509Certificate[] getAcceptedIssuers() {\r\n            return defaultTrustManager.getAcceptedIssuers();\r\n        }\r\n\r\n        @Override\r\n        public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {\r\n        }\r\n\r\n        @Override\r\n        public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) throws CertificateException {\r\n            boolean issuedByRM = false;\r\n            if (certs.length == 2) {\r\n                try {\r\n                    certs[0].verify(caKeyPair.getPublic());\r\n                    certs[1].verify(caKeyPair.getPublic());\r\n                    issuedByRM = true;\r\n                } catch (CertificateException | NoSuchAlgorithmException | InvalidKeyException | NoSuchProviderException | SignatureException e) {\r\n                    LOG.debug(\"Could not verify certificate with RM CA, falling \" + \"back to default\", e);\r\n                    defaultTrustManager.checkServerTrusted(certs, authType);\r\n                }\r\n            } else {\r\n                LOG.debug(\"Certificate not issued by RM CA, falling back to \" + \"default\");\r\n                defaultTrustManager.checkServerTrusted(certs, authType);\r\n            }\r\n            if (issuedByRM) {\r\n                if (!certs[0].getSubjectX500Principal().getName().equals(\"CN=\" + appId)) {\r\n                    throw new CertificateException(\"Expected to find Subject X500 Principal with CN=\" + appId + \" but found \" + certs[0].getSubjectX500Principal().getName());\r\n                }\r\n                LOG.debug(\"Verified certificate signed by RM CA\");\r\n            }\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getX509KeyManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "X509KeyManager getX509KeyManager()\n{\r\n    return x509KeyManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "createKeyManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "X509KeyManager createKeyManager()\n{\r\n    return new X509KeyManager() {\r\n\r\n        @Override\r\n        public String[] getClientAliases(String s, Principal[] principals) {\r\n            return new String[] { \"client\" };\r\n        }\r\n\r\n        @Override\r\n        public String chooseClientAlias(String[] strings, Principal[] principals, Socket socket) {\r\n            return \"client\";\r\n        }\r\n\r\n        @Override\r\n        public String[] getServerAliases(String s, Principal[] principals) {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public String chooseServerAlias(String s, Principal[] principals, Socket socket) {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public X509Certificate[] getCertificateChain(String s) {\r\n            return new X509Certificate[] { caCert };\r\n        }\r\n\r\n        @Override\r\n        public PrivateKey getPrivateKey(String s) {\r\n            return caKeyPair.getPrivate();\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getHostnameVerifier",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "HostnameVerifier getHostnameVerifier()\n{\r\n    return hostnameVerifier;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "createHostnameVerifier",
  "errType" : [ "SSLPeerUnverifiedException", "CertificateException|NoSuchAlgorithmException|InvalidKeyException|SignatureException|NoSuchProviderException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "HostnameVerifier createHostnameVerifier()\n{\r\n    HostnameVerifier defaultHostnameVerifier = new DefaultHostnameVerifier(PublicSuffixMatcherLoader.getDefault());\r\n    return new HostnameVerifier() {\r\n\r\n        @Override\r\n        public boolean verify(String host, SSLSession sslSession) {\r\n            try {\r\n                Certificate[] certs = sslSession.getPeerCertificates();\r\n                if (certs.length == 2) {\r\n                    certs[0].verify(caKeyPair.getPublic());\r\n                    LOG.debug(\"Verified certificate signed by RM CA, \" + \"skipping hostname verification\");\r\n                    return true;\r\n                }\r\n            } catch (SSLPeerUnverifiedException e) {\r\n                return false;\r\n            } catch (CertificateException | NoSuchAlgorithmException | InvalidKeyException | SignatureException | NoSuchProviderException e) {\r\n                LOG.debug(\"Could not verify certificate with RM CA, \" + \"falling back to default hostname verification\", e);\r\n            }\r\n            return defaultHostnameVerifier.verify(host, sslSession);\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "setDefaultTrustManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDefaultTrustManager(X509TrustManager trustManager)\n{\r\n    this.defaultTrustManager = trustManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getCaCert",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "X509Certificate getCaCert()\n{\r\n    return caCert;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getCaKeyPair",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "KeyPair getCaKeyPair()\n{\r\n    return caKeyPair;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "verifyCertAndKeys",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "boolean verifyCertAndKeys(X509Certificate cert, PrivateKey privateKey) throws GeneralSecurityException\n{\r\n    PublicKey publicKey = cert.getPublicKey();\r\n    byte[] data = new byte[2000];\r\n    srand.nextBytes(data);\r\n    Signature signer = Signature.getInstance(\"SHA512withRSA\");\r\n    signer.initSign(privateKey);\r\n    signer.update(data);\r\n    byte[] sig = signer.sign();\r\n    signer = Signature.getInstance(\"SHA512withRSA\");\r\n    signer.initVerify(publicKey);\r\n    signer.update(data);\r\n    return signer.verify(sig);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    String auth = conf.get(CommonConfigurationKeys.HADOOP_SECURITY_AUTHENTICATION);\r\n    if (auth == null || \"simple\".equals(auth)) {\r\n        isSecurityEnabled = false;\r\n    } else if (\"kerberos\".equals(auth)) {\r\n        isSecurityEnabled = true;\r\n    } else {\r\n        LOG.warn(\"Unrecognized attribute value for \" + CommonConfigurationKeys.HADOOP_SECURITY_AUTHENTICATION + \" of \" + auth);\r\n    }\r\n    String proxy = WebAppUtils.getProxyHostAndPort(conf);\r\n    String[] proxyParts = proxy.split(\":\");\r\n    proxyHost = proxyParts[0];\r\n    fetcher = new AppReportFetcher(conf);\r\n    bindAddress = conf.get(YarnConfiguration.PROXY_ADDRESS);\r\n    if (bindAddress == null || bindAddress.isEmpty()) {\r\n        throw new YarnRuntimeException(YarnConfiguration.PROXY_ADDRESS + \" is not set so the proxy will not run.\");\r\n    }\r\n    String[] parts = StringUtils.split(bindAddress, ':');\r\n    port = 0;\r\n    if (parts.length == 2) {\r\n        bindAddress = parts[0];\r\n        port = Integer.parseInt(parts[1]);\r\n    }\r\n    String bindHost = conf.getTrimmed(YarnConfiguration.PROXY_BIND_HOST, null);\r\n    if (bindHost != null) {\r\n        LOG.debug(\"{} is set, will be used to run proxy.\", YarnConfiguration.PROXY_BIND_HOST);\r\n        bindAddress = bindHost;\r\n    }\r\n    LOG.info(\"Instantiating Proxy at {}:{}\", bindAddress, port);\r\n    acl = new AccessControlList(conf.get(YarnConfiguration.YARN_ADMIN_ACL, YarnConfiguration.DEFAULT_YARN_ADMIN_ACL));\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "serviceStart",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    try {\r\n        Configuration conf = getConfig();\r\n        HttpServer2.Builder b = new HttpServer2.Builder().setName(\"proxy\").addEndpoint(URI.create(WebAppUtils.getHttpSchemePrefix(conf) + bindAddress + \":\" + port)).setFindPort(port == 0).setConf(getConfig()).setACL(acl);\r\n        if (YarnConfiguration.useHttps(conf)) {\r\n            WebAppUtils.loadSslConfiguration(b);\r\n        }\r\n        proxyServer = b.build();\r\n        proxyServer.addServlet(ProxyUriUtils.PROXY_SERVLET_NAME, ProxyUriUtils.PROXY_PATH_SPEC, WebAppProxyServlet.class);\r\n        proxyServer.setAttribute(FETCHER_ATTRIBUTE, fetcher);\r\n        proxyServer.setAttribute(IS_SECURITY_ENABLED_ATTRIBUTE, isSecurityEnabled);\r\n        proxyServer.setAttribute(PROXY_HOST_ATTRIBUTE, proxyHost);\r\n        proxyServer.start();\r\n    } catch (IOException e) {\r\n        LOG.error(\"Could not start proxy web server\", e);\r\n        throw e;\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "serviceStop",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (proxyServer != null) {\r\n        try {\r\n            proxyServer.stop();\r\n        } catch (Exception e) {\r\n            LOG.error(\"Error stopping proxy web server\", e);\r\n            throw new YarnRuntimeException(\"Error stopping proxy web server\", e);\r\n        }\r\n    }\r\n    if (this.fetcher != null) {\r\n        this.fetcher.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "join",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void join()\n{\r\n    if (proxyServer != null) {\r\n        try {\r\n            proxyServer.join();\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getBindAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getBindAddress()\n{\r\n    return bindAddress + \":\" + port;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConf(YarnConfiguration conf)\n{\r\n    this.conf = conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "notFound",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void notFound(HttpServletResponse resp, String message) throws IOException\n{\r\n    ProxyUtils.notFound(resp, message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "warnUserPage",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void warnUserPage(HttpServletResponse resp, String link, String user, ApplicationId id) throws IOException\n{\r\n    resp.addCookie(makeCheckCookie(id, false));\r\n    resp.setContentType(MimeType.HTML);\r\n    Page p = new Page(resp.getWriter());\r\n    p.html().h1(\"WARNING: The following page may not be safe!\").h3().__(\"click \").a(link, \"here\").__(\" to continue to an Application Master web interface owned by \", user).__().__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "checkHttpsStrictAndNotProvided",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean checkHttpsStrictAndNotProvided(HttpServletResponse resp, URI link, YarnConfiguration conf) throws IOException\n{\r\n    String httpsPolicy = conf.get(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY, YarnConfiguration.DEFAULT_RM_APPLICATION_HTTPS_POLICY);\r\n    boolean required = httpsPolicy.equals(\"STRICT\");\r\n    boolean provided = link.getScheme().equals(\"https\");\r\n    if (required && !provided) {\r\n        resp.setContentType(MimeType.HTML);\r\n        Page p = new Page(resp.getWriter());\r\n        p.html().h1(\"HTTPS must be used\").h3().__(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY, \"is set to STRICT, which means that the tracking URL \", \"must be an HTTPS URL, but it is not.\").__(\"The tracking URL is: \", link).__().__();\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "proxyLink",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 39,
  "sourceCodeText" : "void proxyLink(final HttpServletRequest req, final HttpServletResponse resp, final URI link, final Cookie c, final String proxyHost, final HTTP method, final ApplicationId appId) throws IOException\n{\r\n    HttpClientBuilder httpClientBuilder = HttpClientBuilder.create();\r\n    String httpsPolicy = conf.get(YarnConfiguration.RM_APPLICATION_HTTPS_POLICY, YarnConfiguration.DEFAULT_RM_APPLICATION_HTTPS_POLICY);\r\n    boolean connectionTimeoutEnabled = conf.getBoolean(YarnConfiguration.RM_PROXY_TIMEOUT_ENABLED, YarnConfiguration.DEFALUT_RM_PROXY_TIMEOUT_ENABLED);\r\n    int connectionTimeout = conf.getInt(YarnConfiguration.RM_PROXY_CONNECTION_TIMEOUT, YarnConfiguration.DEFAULT_RM_PROXY_CONNECTION_TIMEOUT);\r\n    if (httpsPolicy.equals(\"LENIENT\") || httpsPolicy.equals(\"STRICT\")) {\r\n        ProxyCA proxyCA = getProxyCA();\r\n        if (proxyCA != null) {\r\n            try {\r\n                httpClientBuilder.setSSLContext(proxyCA.createSSLContext(appId));\r\n                httpClientBuilder.setSSLHostnameVerifier(proxyCA.getHostnameVerifier());\r\n            } catch (Exception e) {\r\n                throw new IOException(e);\r\n            }\r\n        }\r\n    }\r\n    InetAddress localAddress = InetAddress.getByName(proxyHost);\r\n    LOG.debug(\"local InetAddress for proxy host: {}\", localAddress);\r\n    httpClientBuilder.setDefaultRequestConfig(connectionTimeoutEnabled ? RequestConfig.custom().setCircularRedirectsAllowed(true).setLocalAddress(localAddress).setConnectionRequestTimeout(connectionTimeout).setSocketTimeout(connectionTimeout).setConnectTimeout(connectionTimeout).build() : RequestConfig.custom().setCircularRedirectsAllowed(true).setLocalAddress(localAddress).build());\r\n    HttpRequestBase base = null;\r\n    if (method.equals(HTTP.GET)) {\r\n        base = new HttpGet(link);\r\n    } else if (method.equals(HTTP.PUT)) {\r\n        base = new HttpPut(link);\r\n        StringBuilder sb = new StringBuilder();\r\n        BufferedReader reader = new BufferedReader(new InputStreamReader(req.getInputStream(), \"UTF-8\"));\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            sb.append(line);\r\n        }\r\n        ((HttpPut) base).setEntity(new StringEntity(sb.toString()));\r\n    } else {\r\n        resp.setStatus(HttpServletResponse.SC_METHOD_NOT_ALLOWED);\r\n        return;\r\n    }\r\n    @SuppressWarnings(\"unchecked\")\r\n    Enumeration<String> names = req.getHeaderNames();\r\n    while (names.hasMoreElements()) {\r\n        String name = names.nextElement();\r\n        if (PASS_THROUGH_HEADERS.contains(name)) {\r\n            String value = req.getHeader(name);\r\n            LOG.debug(\"REQ HEADER: {} : {}\", name, value);\r\n            base.setHeader(name, value);\r\n        }\r\n    }\r\n    String user = req.getRemoteUser();\r\n    if (user != null && !user.isEmpty()) {\r\n        base.setHeader(\"Cookie\", PROXY_USER_COOKIE_NAME + \"=\" + URLEncoder.encode(user, \"ASCII\"));\r\n    }\r\n    OutputStream out = resp.getOutputStream();\r\n    HttpClient client = httpClientBuilder.build();\r\n    try {\r\n        HttpResponse httpResp = client.execute(base);\r\n        resp.setStatus(httpResp.getStatusLine().getStatusCode());\r\n        for (Header header : httpResp.getAllHeaders()) {\r\n            resp.setHeader(header.getName(), header.getValue());\r\n        }\r\n        if (c != null) {\r\n            resp.addCookie(c);\r\n        }\r\n        InputStream in = httpResp.getEntity().getContent();\r\n        if (in != null) {\r\n            IOUtils.copyBytes(in, out, 4096, true);\r\n        }\r\n    } finally {\r\n        base.releaseConnection();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getCheckCookieName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getCheckCookieName(ApplicationId id)\n{\r\n    return \"checked_\" + id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "makeCheckCookie",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Cookie makeCheckCookie(ApplicationId id, boolean isSet)\n{\r\n    Cookie c = new Cookie(getCheckCookieName(id), String.valueOf(isSet));\r\n    c.setHttpOnly(true);\r\n    c.setPath(ProxyUriUtils.getPath(id));\r\n    c.setMaxAge(60 * 60 * 2);\r\n    return c;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "isSecurityEnabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isSecurityEnabled()\n{\r\n    Boolean b = (Boolean) getServletContext().getAttribute(WebAppProxy.IS_SECURITY_ENABLED_ATTRIBUTE);\r\n    return b != null ? b : false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FetchedAppReport getApplicationReport(ApplicationId id) throws IOException, YarnException\n{\r\n    return ((AppReportFetcher) getServletContext().getAttribute(WebAppProxy.FETCHER_ATTRIBUTE)).getApplicationReport(id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getProxyCA",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ProxyCA getProxyCA()\n{\r\n    return ((ProxyCA) getServletContext().getAttribute(WebAppProxy.PROXY_CA));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getProxyHost",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getProxyHost() throws IOException\n{\r\n    return ((String) getServletContext().getAttribute(WebAppProxy.PROXY_HOST_ATTRIBUTE));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "doGet",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n{\r\n    methodAction(req, resp, HTTP.GET);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "doPut",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void doPut(final HttpServletRequest req, final HttpServletResponse resp) throws ServletException, IOException\n{\r\n    methodAction(req, resp, HTTP.PUT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "methodAction",
  "errType" : [ "URISyntaxException|YarnException", "ApplicationNotFoundException" ],
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void methodAction(final HttpServletRequest req, final HttpServletResponse resp, final HTTP method) throws ServletException, IOException\n{\r\n    try {\r\n        String userApprovedParamS = req.getParameter(ProxyUriUtils.PROXY_APPROVAL_PARAM);\r\n        boolean userWasWarned = false;\r\n        boolean userApproved = Boolean.parseBoolean(userApprovedParamS);\r\n        boolean securityEnabled = isSecurityEnabled();\r\n        boolean isRedirect = false;\r\n        String pathInfo = req.getPathInfo();\r\n        final String remoteUser = req.getRemoteUser();\r\n        String[] parts = null;\r\n        if (pathInfo != null) {\r\n            if (pathInfo.startsWith(REDIRECT)) {\r\n                pathInfo = pathInfo.substring(REDIRECT.length());\r\n                isRedirect = true;\r\n            }\r\n            parts = pathInfo.split(\"/\", 3);\r\n        }\r\n        if ((parts == null) || (parts.length < 2)) {\r\n            LOG.warn(\"{} gave an invalid proxy path {}\", remoteUser, pathInfo);\r\n            notFound(resp, \"Your path appears to be formatted incorrectly.\");\r\n            return;\r\n        }\r\n        String appId = parts[1];\r\n        String rest = parts.length > 2 ? parts[2] : \"\";\r\n        ApplicationId id = Apps.toAppID(appId);\r\n        if (id == null) {\r\n            LOG.warn(\"{} attempting to access {} that is invalid\", remoteUser, appId);\r\n            notFound(resp, appId + \" appears to be formatted incorrectly.\");\r\n            return;\r\n        }\r\n        if (isRedirect && handleRedirect(appId, req, resp)) {\r\n            return;\r\n        }\r\n        if (securityEnabled) {\r\n            String cookieName = getCheckCookieName(id);\r\n            Cookie[] cookies = req.getCookies();\r\n            if (cookies != null) {\r\n                for (Cookie c : cookies) {\r\n                    if (cookieName.equals(c.getName())) {\r\n                        userWasWarned = true;\r\n                        userApproved = userApproved || Boolean.parseBoolean(c.getValue());\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        boolean checkUser = securityEnabled && (!userWasWarned || !userApproved);\r\n        FetchedAppReport fetchedAppReport;\r\n        try {\r\n            fetchedAppReport = getFetchedAppReport(id);\r\n        } catch (ApplicationNotFoundException e) {\r\n            fetchedAppReport = null;\r\n        }\r\n        ApplicationReport applicationReport = null;\r\n        if (fetchedAppReport != null) {\r\n            applicationReport = fetchedAppReport.getApplicationReport();\r\n        }\r\n        if (applicationReport == null) {\r\n            LOG.warn(\"{} attempting to access {} that was not found\", remoteUser, id);\r\n            URI toFetch = ProxyUriUtils.getUriFromTrackingPlugins(id, this.trackingUriPlugins);\r\n            if (toFetch != null) {\r\n                ProxyUtils.sendRedirect(req, resp, toFetch.toString());\r\n                return;\r\n            }\r\n            notFound(resp, \"Application \" + appId + \" could not be found \" + \"in RM or history server\");\r\n            return;\r\n        }\r\n        URI trackingUri = getTrackingUri(req, resp, id, applicationReport.getOriginalTrackingUrl(), fetchedAppReport.getAppReportSource());\r\n        if (trackingUri == null) {\r\n            return;\r\n        }\r\n        if (checkHttpsStrictAndNotProvided(resp, trackingUri, conf)) {\r\n            return;\r\n        }\r\n        String runningUser = applicationReport.getUser();\r\n        if (checkUser && !runningUser.equals(remoteUser)) {\r\n            LOG.info(\"Asking {} if they want to connect to the \" + \"app master GUI of {} owned by {}\", remoteUser, appId, runningUser);\r\n            warnUserPage(resp, ProxyUriUtils.getPathAndQuery(id, rest, req.getQueryString(), true), runningUser, id);\r\n            return;\r\n        }\r\n        URI toFetch = buildTrackingUrl(trackingUri, req, rest);\r\n        LOG.info(\"{} is accessing unchecked {}\" + \" which is the app master GUI of {} owned by {}\", remoteUser, toFetch, appId, runningUser);\r\n        switch(applicationReport.getYarnApplicationState()) {\r\n            case KILLED:\r\n            case FINISHED:\r\n            case FAILED:\r\n                ProxyUtils.sendRedirect(req, resp, toFetch.toString());\r\n                return;\r\n            default:\r\n        }\r\n        Cookie c = null;\r\n        if (userWasWarned && userApproved) {\r\n            c = makeCheckCookie(id, true);\r\n        }\r\n        proxyLink(req, resp, toFetch, c, getProxyHost(), method, id);\r\n    } catch (URISyntaxException | YarnException e) {\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "buildTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "URI buildTrackingUrl(URI trackingUri, final HttpServletRequest req, String rest) throws UriBuilderException\n{\r\n    UriBuilder builder = UriBuilder.fromUri(trackingUri);\r\n    String queryString = req.getQueryString();\r\n    if (queryString != null) {\r\n        List<NameValuePair> queryPairs = URLEncodedUtils.parse(queryString, null);\r\n        for (NameValuePair pair : queryPairs) {\r\n            builder.queryParam(pair.getName(), pair.getValue());\r\n        }\r\n    }\r\n    return builder.path(rest).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getTrackingUri",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "URI getTrackingUri(HttpServletRequest req, HttpServletResponse resp, ApplicationId id, String originalUri, AppReportSource appReportSource) throws IOException, URISyntaxException\n{\r\n    URI trackingUri = null;\r\n    if ((originalUri == null) || originalUri.equals(\"N/A\") || originalUri.equals(\"\")) {\r\n        if (appReportSource == AppReportSource.RM) {\r\n            LOG.debug(\"Original tracking url is '{}'. Redirecting to RM app page\", originalUri == null ? \"NULL\" : originalUri);\r\n            ProxyUtils.sendRedirect(req, resp, StringHelper.pjoin(rmAppPageUrlBase, id.toString()));\r\n        } else if (appReportSource == AppReportSource.AHS) {\r\n            LOG.debug(\"Original tracking url is '{}'. Redirecting to AHS app page\", originalUri == null ? \"NULL\" : originalUri);\r\n            ProxyUtils.sendRedirect(req, resp, StringHelper.pjoin(ahsAppPageUrlBase, id.toString()));\r\n        }\r\n    } else if (ProxyUriUtils.getSchemeFromUrl(originalUri).isEmpty()) {\r\n        trackingUri = ProxyUriUtils.getUriFromAMUrl(WebAppUtils.getHttpSchemePrefix(conf), originalUri);\r\n    } else {\r\n        trackingUri = new URI(originalUri);\r\n    }\r\n    return trackingUri;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getFetchedAppReport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "FetchedAppReport getFetchedAppReport(ApplicationId id) throws IOException, YarnException\n{\r\n    FetchedAppReport fetchedAppReport = getApplicationReport(id);\r\n    if (fetchedAppReport != null) {\r\n        if ((fetchedAppReport.getAppReportSource() != AppReportSource.RM) && (fetchedAppReport.getAppReportSource() != AppReportSource.AHS)) {\r\n            throw new UnsupportedOperationException(\"Application report not \" + \"fetched from RM or history server.\");\r\n        }\r\n    }\r\n    return fetchedAppReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "handleRedirect",
  "errType" : [ "SocketException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean handleRedirect(String id, HttpServletRequest req, HttpServletResponse resp) throws IOException\n{\r\n    boolean badRedirect = false;\r\n    try {\r\n        badRedirect = NetUtils.getLocalInetAddress(req.getRemoteHost()) != null;\r\n    } catch (SocketException ex) {\r\n    }\r\n    if (badRedirect) {\r\n        LOG.error(\"The AM's web app redirected the RM web proxy's request back \" + \"to the web proxy. The typical cause is that the AM is resolving \" + \"the RM's address as something other than what it expects. Check \" + \"your network configuration and the value of the \" + \"yarn.web-proxy.address property. Once the host resolution issue \" + \"has been resolved, you will likely need to delete the \" + \"misbehaving application, \" + id);\r\n        String redirect = StringHelper.pjoin(failurePageUrlBase, id);\r\n        LOG.error(\"REDIRECT: sending redirect to \" + redirect);\r\n        ProxyUtils.sendRedirect(req, resp, redirect);\r\n    }\r\n    return badRedirect;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "readObject",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void readObject(ObjectInputStream input) throws IOException, ClassNotFoundException\n{\r\n    input.defaultReadObject();\r\n    conf = new YarnConfiguration();\r\n    this.trackingUriPlugins = conf.getInstances(YarnConfiguration.YARN_TRACKING_URL_GENERATOR, TrackingUriPlugin.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getAHSProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationHistoryProtocol getAHSProxy(Configuration configuration) throws IOException\n{\r\n    return AHSProxy.createAHSProxy(configuration, ApplicationHistoryProtocol.class, configuration.getSocketAddr(YarnConfiguration.TIMELINE_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_PORT));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getApplicationReport",
  "errType" : [ "ApplicationNotFoundException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "FetchedAppReport getApplicationReport(ApplicationId appId) throws YarnException, IOException\n{\r\n    GetApplicationReportRequest request = recordFactory.newRecordInstance(GetApplicationReportRequest.class);\r\n    request.setApplicationId(appId);\r\n    ApplicationReport appReport;\r\n    FetchedAppReport fetchedAppReport;\r\n    try {\r\n        appReport = applicationsManager.getApplicationReport(request).getApplicationReport();\r\n        fetchedAppReport = new FetchedAppReport(appReport, AppReportSource.RM);\r\n    } catch (ApplicationNotFoundException e) {\r\n        if (!isAHSEnabled) {\r\n            throw e;\r\n        }\r\n        appReport = historyManager.getApplicationReport(request).getApplicationReport();\r\n        fetchedAppReport = new FetchedAppReport(appReport, AppReportSource.AHS);\r\n    }\r\n    return fetchedAppReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void stop()\n{\r\n    if (this.applicationsManager != null) {\r\n        RPC.stopProxy(this.applicationsManager);\r\n    }\r\n    if (this.historyManager != null) {\r\n        RPC.stopProxy(this.historyManager);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "uriEncode",
  "errType" : [ "UnsupportedEncodingException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String uriEncode(Object o)\n{\r\n    try {\r\n        assert (o != null) : \"o cannot be null\";\r\n        return URLEncoder.encode(o.toString(), \"UTF-8\");\r\n    } catch (UnsupportedEncodingException e) {\r\n        throw new RuntimeException(\"UTF-8 is not supported by this system?\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getPath(ApplicationId id)\n{\r\n    return getPath(id, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getPath(ApplicationId id, boolean redirected)\n{\r\n    if (id == null) {\r\n        throw new IllegalArgumentException(\"Application id cannot be null \");\r\n    }\r\n    if (redirected) {\r\n        return ujoin(PROXY_BASE, REDIRECT, uriEncode(id));\r\n    } else {\r\n        return ujoin(PROXY_BASE, uriEncode(id));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getPath(ApplicationId id, String path)\n{\r\n    return getPath(id, path, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getPath(ApplicationId id, String path, boolean redirected)\n{\r\n    if (path == null) {\r\n        return getPath(id, redirected);\r\n    } else {\r\n        return ujoin(getPath(id, redirected), path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getPathAndQuery",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getPathAndQuery(ApplicationId id, String path, String query, boolean approved)\n{\r\n    StringBuilder newp = new StringBuilder();\r\n    newp.append(getPath(id, path));\r\n    boolean first = appendQuery(newp, query, true);\r\n    if (approved) {\r\n        appendQuery(newp, PROXY_APPROVAL_PARAM + \"=true\", first);\r\n    }\r\n    return newp.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "appendQuery",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean appendQuery(StringBuilder builder, String query, boolean first)\n{\r\n    if (query != null && !query.isEmpty()) {\r\n        if (first && !query.startsWith(\"?\")) {\r\n            builder.append('?');\r\n        }\r\n        if (!first && !query.startsWith(\"&\")) {\r\n            builder.append('&');\r\n        }\r\n        builder.append(query);\r\n        return false;\r\n    }\r\n    return first;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getProxyUri",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "URI getProxyUri(URI originalUri, URI proxyUri, ApplicationId id)\n{\r\n    try {\r\n        String path = getPath(id, originalUri == null ? \"/\" : originalUri.getPath());\r\n        return new URI(proxyUri.getScheme(), proxyUri.getAuthority(), path, originalUri == null ? null : originalUri.getQuery(), originalUri == null ? null : originalUri.getFragment());\r\n    } catch (URISyntaxException e) {\r\n        throw new RuntimeException(\"Could not proxify \" + originalUri, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getUriFromAMUrl",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URI getUriFromAMUrl(String scheme, String noSchemeUrl) throws URISyntaxException\n{\r\n    if (getSchemeFromUrl(noSchemeUrl).isEmpty()) {\r\n        return new URI(scheme + noSchemeUrl);\r\n    } else {\r\n        return new URI(noSchemeUrl);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getUriFromTrackingPlugins",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URI getUriFromTrackingPlugins(ApplicationId id, List<TrackingUriPlugin> trackingUriPlugins) throws URISyntaxException\n{\r\n    URI toRet = null;\r\n    for (TrackingUriPlugin plugin : trackingUriPlugins) {\r\n        toRet = plugin.getTrackingUri(id);\r\n        if (toRet != null) {\r\n            return toRet;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "getSchemeFromUrl",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getSchemeFromUrl(String url)\n{\r\n    int index = 0;\r\n    if (url != null) {\r\n        index = url.indexOf(\"://\");\r\n    }\r\n    if (index > 0) {\r\n        return url.substring(0, index);\r\n    } else {\r\n        return \"\";\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "sendRedirect",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void sendRedirect(HttpServletRequest request, HttpServletResponse response, String target) throws IOException\n{\r\n    LOG.debug(\"Redirecting {} {} to {}\", request.getMethod(), request.getRequestURI(), target);\r\n    String location = response.encodeRedirectURL(target);\r\n    response.setStatus(HttpServletResponse.SC_FOUND);\r\n    response.setHeader(LOCATION, location);\r\n    response.setContentType(MimeType.HTML);\r\n    PrintWriter writer = response.getWriter();\r\n    Page p = new Page(writer);\r\n    p.html().head().title(\"Moved\").__().body().h1(\"Moved\").div().__(\"Content has moved \").a(location, \"here\").__().__().__();\r\n    writer.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "notFound",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void notFound(HttpServletResponse resp, String message) throws IOException\n{\r\n    resp.setStatus(HttpServletResponse.SC_NOT_FOUND);\r\n    resp.setContentType(MimeType.HTML);\r\n    Page p = new Page(resp.getWriter());\r\n    p.html().h1(message).__();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-web-proxy\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\webproxy",
  "methodName" : "rejectNonHttpRequests",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void rejectNonHttpRequests(ServletRequest req) throws ServletException\n{\r\n    if (!(req instanceof HttpServletRequest)) {\r\n        throw new ServletException(E_HTTP_HTTPS_ONLY);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]