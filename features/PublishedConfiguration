[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "isEmpty",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isEmpty()\n{\r\n    return entries.isEmpty();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "setUpdated",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setUpdated(long updated)\n{\r\n    this.updated = updated;\r\n    this.updatedTime = new Date(updated).toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getUpdated",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getUpdated()\n{\r\n    return updated;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "putValues",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void putValues(Iterable<Map.Entry<String, String>> entries)\n{\r\n    this.entries = new HashMap<String, String>();\r\n    for (Map.Entry<String, String> entry : entries) {\r\n        this.entries.put(entry.getKey(), entry.getValue());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "asConfiguration",
  "errType" : [ "BadConfigException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Configuration asConfiguration()\n{\r\n    Configuration conf = new Configuration(false);\r\n    try {\r\n        ConfigHelper.addConfigMap(conf, entries, \"\");\r\n    } catch (BadConfigException e) {\r\n        throw new RuntimeException(e.toString());\r\n    }\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "asConfigurationXML",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String asConfigurationXML() throws IOException\n{\r\n    return ConfigHelper.toXml(asConfiguration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "asProperties",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Properties asProperties()\n{\r\n    Properties props = new Properties();\r\n    props.putAll(entries);\r\n    return props;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "asJson",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String asJson() throws IOException\n{\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(SerializationFeature.INDENT_OUTPUT, true);\r\n    String json = mapper.writeValueAsString(entries);\r\n    return json;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "shallowCopy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PublishedConfiguration shallowCopy()\n{\r\n    PublishedConfiguration that = new PublishedConfiguration();\r\n    that.description = this.description;\r\n    that.updated = this.updated;\r\n    that.updatedTime = this.updatedTime;\r\n    return that;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    final StringBuilder sb = new StringBuilder(\"PublishedConfiguration{\");\r\n    sb.append(\"description='\").append(description).append('\\'').append(\" entries = \").append(entries.size()).append('}');\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "createNumCompInstances",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createNumCompInstances(long count)\n{\r\n    for (int i = 0; i < count; i++) {\r\n        createOneCompInstance();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "createOneCompInstance",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void createOneCompInstance()\n{\r\n    ComponentInstanceId id = new ComponentInstanceId(instanceIdCounter.getAndIncrement(), componentSpec.getName());\r\n    while (componentSpec.getDecommissionedInstances().contains(id.getCompInstanceName())) {\r\n        id = new ComponentInstanceId(instanceIdCounter.getAndIncrement(), componentSpec.getName());\r\n    }\r\n    ComponentInstance instance = new ComponentInstance(this, id);\r\n    compInstances.put(instance.getCompInstanceName(), instance);\r\n    pendingInstances.add(instance);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "checkAndScheduleHealthThresholdMonitor",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void checkAndScheduleHealthThresholdMonitor()\n{\r\n    int healthThresholdPercent = YarnServiceConf.getInt(CONTAINER_HEALTH_THRESHOLD_PERCENT, DEFAULT_CONTAINER_HEALTH_THRESHOLD_PERCENT, componentSpec.getConfiguration(), scheduler.getConfig());\r\n    if (healthThresholdPercent == CONTAINER_HEALTH_THRESHOLD_PERCENT_DISABLED) {\r\n        LOG.info(\"No health threshold monitor enabled for component {}\", componentSpec.getName());\r\n        return;\r\n    }\r\n    if (healthThresholdPercent <= 0 || healthThresholdPercent > 100) {\r\n        LOG.error(\"Invalid health threshold percent {}% for component {}. Monitor not \" + \"enabled.\", healthThresholdPercent, componentSpec.getName());\r\n        return;\r\n    }\r\n    long window = YarnServiceConf.getLong(CONTAINER_HEALTH_THRESHOLD_WINDOW_SEC, DEFAULT_CONTAINER_HEALTH_THRESHOLD_WINDOW_SEC, componentSpec.getConfiguration(), scheduler.getConfig());\r\n    long initDelay = YarnServiceConf.getLong(CONTAINER_HEALTH_THRESHOLD_INIT_DELAY_SEC, DEFAULT_CONTAINER_HEALTH_THRESHOLD_INIT_DELAY_SEC, componentSpec.getConfiguration(), scheduler.getConfig());\r\n    long pollFrequency = YarnServiceConf.getLong(CONTAINER_HEALTH_THRESHOLD_POLL_FREQUENCY_SEC, DEFAULT_CONTAINER_HEALTH_THRESHOLD_POLL_FREQUENCY_SEC, componentSpec.getConfiguration(), scheduler.getConfig());\r\n    if (window <= 0) {\r\n        LOG.error(\"Invalid health monitor window {} secs for component {}. Monitor not \" + \"enabled.\", window, componentSpec.getName());\r\n        return;\r\n    }\r\n    if (initDelay < 0) {\r\n        LOG.error(\"Invalid health monitor init delay {} secs for component {}. \" + \"Monitor not enabled.\", initDelay, componentSpec.getName());\r\n        return;\r\n    }\r\n    if (pollFrequency <= 0) {\r\n        LOG.error(\"Invalid health monitor poll frequency {} secs for component {}. \" + \"Monitor not enabled.\", pollFrequency, componentSpec.getName());\r\n        return;\r\n    }\r\n    LOG.info(\"Scheduling the health threshold monitor for component {} with percent \" + \"= {}%, window = {} secs, poll freq = {} secs, init-delay = {} \" + \"secs\", componentSpec.getName(), healthThresholdPercent, window, pollFrequency, initDelay);\r\n    this.scheduler.executorService.scheduleAtFixedRate(new ComponentHealthThresholdMonitor(this, healthThresholdPercent, window), initDelay + 3, pollFrequency, TimeUnit.SECONDS);\r\n    setHealthThresholdMonitorEnabled(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "checkIfStable",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ComponentState checkIfStable(Component component)\n{\r\n    if (component.getRestartPolicyHandler().isLongLived()) {\r\n        return updateStateForLongRunningComponents(component);\r\n    } else {\r\n        return updateStateForTerminatingComponents(component);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "updateStateForTerminatingComponents",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ComponentState updateStateForTerminatingComponents(Component component)\n{\r\n    if (component.getNumRunningInstances() + component.getNumSucceededInstances() + component.getNumFailedInstances() < component.getComponentSpec().getNumberOfContainers()) {\r\n        component.setComponentState(org.apache.hadoop.yarn.service.api.records.ComponentState.FLEXING);\r\n        return FLEXING;\r\n    } else {\r\n        component.setComponentState(org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\r\n        return STABLE;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "updateStateForLongRunningComponents",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "ComponentState updateStateForLongRunningComponents(Component component)\n{\r\n    if (component.componentMetrics.containersReady.value() == component.getComponentSpec().getNumberOfContainers() && !component.doesNeedUpgrade()) {\r\n        component.setComponentState(org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\r\n        return STABLE;\r\n    } else if (component.doesNeedUpgrade()) {\r\n        component.setComponentState(org.apache.hadoop.yarn.service.api.records.ComponentState.NEEDS_UPGRADE);\r\n        return component.getState();\r\n    } else if (component.componentMetrics.containersReady.value() != component.getComponentSpec().getNumberOfContainers()) {\r\n        component.setComponentState(org.apache.hadoop.yarn.service.api.records.ComponentState.FLEXING);\r\n        return FLEXING;\r\n    }\r\n    return component.getState();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "checkAndUpdateComponentState",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void checkAndUpdateComponentState(Component component, boolean isIncrement)\n{\r\n    if (component.getRestartPolicyHandler().isLongLived()) {\r\n        if (isIncrement) {\r\n            if (!component.upgradeStatus.areContainersUpgrading() && !component.cancelUpgradeStatus.areContainersUpgrading() && component.componentMetrics.containersReady.value() == component.componentMetrics.containersDesired.value()) {\r\n                component.setComponentState(org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\r\n                component.context.getServiceManager().checkAndUpdateServiceState();\r\n            }\r\n        } else {\r\n            if (component.componentMetrics.containersReady.value() < component.componentMetrics.containersDesired.value()) {\r\n                component.setComponentState(org.apache.hadoop.yarn.service.api.records.ComponentState.FLEXING);\r\n            } else if (component.componentMetrics.containersReady.value() == component.componentMetrics.containersDesired.value()) {\r\n                component.setComponentState(org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE);\r\n            }\r\n            component.context.getServiceManager().checkAndUpdateServiceState();\r\n        }\r\n    } else {\r\n        component.context.getServiceManager().checkAndUpdateServiceState();\r\n    }\r\n    component.dispatcher.getEventHandler().handle(new ComponentEvent(component.getName(), ComponentEventType.CHECK_STABLE));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "removePendingInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removePendingInstance(ComponentInstance instance)\n{\r\n    pendingInstances.remove(instance);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "reInsertPendingInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void reInsertPendingInstance(ComponentInstance instance)\n{\r\n    pendingInstances.add(instance);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "releaseContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void releaseContainer(Container container)\n{\r\n    scheduler.getAmRMClient().releaseAssignedContainer(container.getId());\r\n    componentMetrics.surplusContainers.incr();\r\n    scheduler.getServiceMetrics().surplusContainers.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "assignContainerToCompInstance",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void assignContainerToCompInstance(Container container)\n{\r\n    if (pendingInstances.size() == 0) {\r\n        LOG.info(\"[COMPONENT {}]: No pending component instance left, release surplus container {}\", getName(), container.getId());\r\n        releaseContainer(container);\r\n        return;\r\n    }\r\n    ComponentInstance instance = pendingInstances.remove(0);\r\n    LOG.info(\"[COMPONENT {}]: {} allocated, num pending component instances reduced to {}\", getName(), container.getId(), pendingInstances.size());\r\n    instance.setContainer(container);\r\n    scheduler.addLiveCompInstance(container.getId(), instance);\r\n    LOG.info(\"[COMPONENT {}]: Assigned {} to component instance {} and launch on host {} \", getName(), container.getId(), instance.getCompInstanceName(), container.getNodeId());\r\n    Future<ProviderService.ResolvedLaunchParams> resolvedParamFuture;\r\n    if (!(upgradeStatus.isCompleted() && cancelUpgradeStatus.isCompleted())) {\r\n        UpgradeStatus status = !cancelUpgradeStatus.isCompleted() ? cancelUpgradeStatus : upgradeStatus;\r\n        resolvedParamFuture = scheduler.getContainerLaunchService().launchCompInstance(scheduler.getApp(), instance, container, createLaunchContext(status.getTargetSpec(), status.getTargetVersion()));\r\n    } else {\r\n        resolvedParamFuture = scheduler.getContainerLaunchService().launchCompInstance(scheduler.getApp(), instance, container, createLaunchContext(componentSpec, scheduler.getApp().getVersion()));\r\n    }\r\n    instance.updateResolvedLaunchParams(resolvedParamFuture);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "createLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerLaunchService.ComponentLaunchContext createLaunchContext(org.apache.hadoop.yarn.service.api.records.Component compSpec, String version)\n{\r\n    ContainerLaunchService.ComponentLaunchContext launchContext = new ContainerLaunchService.ComponentLaunchContext(compSpec.getName(), version);\r\n    launchContext.setArtifact(compSpec.getArtifact()).setConfiguration(compSpec.getConfiguration()).setLaunchCommand(compSpec.getLaunchCommand()).setRunPrivilegedContainer(compSpec.getRunPrivilegedContainer());\r\n    return launchContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "requestContainers",
  "errType" : null,
  "containingMethodsNum" : 37,
  "sourceCodeText" : "void requestContainers(long count)\n{\r\n    LOG.info(\"[COMPONENT {}] Requesting for {} container(s)\", componentSpec.getName(), count);\r\n    org.apache.hadoop.yarn.service.api.records.Resource componentResource = componentSpec.getResource();\r\n    Resource resource = Resource.newInstance(componentResource.calcMemoryMB(), componentResource.getCpus());\r\n    if (componentResource.getAdditional() != null) {\r\n        for (Map.Entry<String, ResourceInformation> entry : componentResource.getAdditional().entrySet()) {\r\n            String resourceName = entry.getKey();\r\n            if (resourceName.equals(org.apache.hadoop.yarn.api.records.ResourceInformation.MEMORY_URI) || resourceName.equals(org.apache.hadoop.yarn.api.records.ResourceInformation.VCORES_URI)) {\r\n                LOG.warn(\"Please set memory/vcore in the main section of resource, \" + \"ignoring this entry=\" + resourceName);\r\n                continue;\r\n            }\r\n            ResourceInformation specInfo = entry.getValue();\r\n            org.apache.hadoop.yarn.api.records.ResourceInformation ri = org.apache.hadoop.yarn.api.records.ResourceInformation.newInstance(entry.getKey(), specInfo.getUnit(), specInfo.getValue(), specInfo.getTags(), specInfo.getAttributes());\r\n            resource.setResourceInformation(resourceName, ri);\r\n        }\r\n    }\r\n    if (!scheduler.hasAtLeastOnePlacementConstraint()) {\r\n        for (int i = 0; i < count; i++) {\r\n            ContainerRequest request = ContainerRequest.newBuilder().capability(resource).priority(priority).allocationRequestId(allocateId).relaxLocality(true).build();\r\n            LOG.info(\"[COMPONENT {}] Submitting container request : {}\", componentSpec.getName(), request);\r\n            amrmClient.addContainerRequest(request);\r\n        }\r\n    } else {\r\n        PlacementPolicy placementPolicy = componentSpec.getPlacementPolicy();\r\n        Collection<SchedulingRequest> schedulingRequests = new HashSet<>();\r\n        PlacementConstraint finalConstraint = null;\r\n        if (placementPolicy != null) {\r\n            for (org.apache.hadoop.yarn.service.api.records.PlacementConstraint yarnServiceConstraint : placementPolicy.getConstraints()) {\r\n                List<TargetExpression> targetExpressions = new ArrayList<>();\r\n                if (!yarnServiceConstraint.getTargetTags().isEmpty()) {\r\n                    targetExpressions.add(PlacementTargets.allocationTag(yarnServiceConstraint.getTargetTags().toArray(new String[0])));\r\n                }\r\n                for (Map.Entry<String, List<String>> attribute : yarnServiceConstraint.getNodeAttributes().entrySet()) {\r\n                    targetExpressions.add(PlacementTargets.nodeAttribute(attribute.getKey(), attribute.getValue().toArray(new String[0])));\r\n                }\r\n                if (!yarnServiceConstraint.getNodePartitions().isEmpty()) {\r\n                    targetExpressions.add(PlacementTargets.nodePartition(yarnServiceConstraint.getNodePartitions().toArray(new String[0])));\r\n                }\r\n                PlacementConstraint constraint = null;\r\n                switch(yarnServiceConstraint.getType()) {\r\n                    case AFFINITY:\r\n                        constraint = getAffinityConstraint(yarnServiceConstraint, targetExpressions);\r\n                        break;\r\n                    case ANTI_AFFINITY:\r\n                        constraint = getAntiAffinityConstraint(yarnServiceConstraint, targetExpressions);\r\n                        break;\r\n                    case AFFINITY_WITH_CARDINALITY:\r\n                        constraint = PlacementConstraints.targetCardinality(yarnServiceConstraint.getScope().name().toLowerCase(), yarnServiceConstraint.getMinCardinality() == null ? 0 : yarnServiceConstraint.getMinCardinality().intValue(), yarnServiceConstraint.getMaxCardinality() == null ? Integer.MAX_VALUE : yarnServiceConstraint.getMaxCardinality().intValue(), targetExpressions.toArray(new TargetExpression[0])).build();\r\n                        break;\r\n                }\r\n                if (constraint == null) {\r\n                    LOG.info(\"[COMPONENT {}] Placement constraint: null \", componentSpec.getName());\r\n                    continue;\r\n                }\r\n                if (finalConstraint != null) {\r\n                    finalConstraint = PlacementConstraints.and(constraint.getConstraintExpr(), finalConstraint.getConstraintExpr()).build();\r\n                } else {\r\n                    finalConstraint = constraint;\r\n                }\r\n                LOG.debug(\"[COMPONENT {}] Placement constraint: {}\", componentSpec.getName(), constraint.getConstraintExpr().toString());\r\n            }\r\n        }\r\n        ResourceSizing resourceSizing = ResourceSizing.newInstance((int) count, resource);\r\n        LOG.debug(\"[COMPONENT {}] Resource sizing: {}\", componentSpec.getName(), resourceSizing);\r\n        SchedulingRequest request = SchedulingRequest.newBuilder().priority(priority).allocationRequestId(allocateId).allocationTags(Collections.singleton(componentSpec.getName())).executionType(ExecutionTypeRequest.newInstance(ExecutionType.GUARANTEED, true)).placementConstraintExpression(finalConstraint).resourceSizing(resourceSizing).build();\r\n        LOG.info(\"[COMPONENT {}] Submitting scheduling request: {}\", componentSpec.getName(), request);\r\n        schedulingRequests.add(request);\r\n        amrmClient.addSchedulingRequests(schedulingRequests);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getAffinityConstraint",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "PlacementConstraint getAffinityConstraint(org.apache.hadoop.yarn.service.api.records.PlacementConstraint yarnServiceConstraint, List<TargetExpression> targetExpressions)\n{\r\n    PlacementConstraint constraint = null;\r\n    if (!yarnServiceConstraint.getTargetTags().isEmpty() || !yarnServiceConstraint.getNodePartitions().isEmpty()) {\r\n        constraint = PlacementConstraints.targetIn(yarnServiceConstraint.getScope().getValue(), targetExpressions.toArray(new TargetExpression[0])).build();\r\n    }\r\n    if (!yarnServiceConstraint.getNodeAttributes().isEmpty()) {\r\n        constraint = PlacementConstraints.targetNodeAttribute(yarnServiceConstraint.getScope().getValue(), NodeAttributeOpCode.EQ, targetExpressions.toArray(new TargetExpression[0])).build();\r\n    }\r\n    return constraint;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getAntiAffinityConstraint",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "PlacementConstraint getAntiAffinityConstraint(org.apache.hadoop.yarn.service.api.records.PlacementConstraint yarnServiceConstraint, List<TargetExpression> targetExpressions)\n{\r\n    PlacementConstraint constraint = null;\r\n    if (!yarnServiceConstraint.getTargetTags().isEmpty() || !yarnServiceConstraint.getNodePartitions().isEmpty()) {\r\n        constraint = PlacementConstraints.targetNotIn(yarnServiceConstraint.getScope().getValue(), targetExpressions.toArray(new TargetExpression[0])).build();\r\n    }\r\n    if (!yarnServiceConstraint.getNodeAttributes().isEmpty()) {\r\n        constraint = PlacementConstraints.targetNodeAttribute(yarnServiceConstraint.getScope().getValue(), NodeAttributeOpCode.NE, targetExpressions.toArray(new TargetExpression[0])).build();\r\n    }\r\n    return constraint;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "setDesiredContainers",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setDesiredContainers(int n)\n{\r\n    int delta = n - scheduler.getServiceMetrics().containersDesired.value();\r\n    if (delta != 0) {\r\n        scheduler.getServiceMetrics().containersDesired.incr(delta);\r\n    }\r\n    componentMetrics.containersDesired.set(n);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "updateMetrics",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void updateMetrics(ContainerStatus status)\n{\r\n    if (status != null) {\r\n        switch(status.getExitStatus()) {\r\n            case SUCCESS:\r\n                componentMetrics.containersSucceeded.incr();\r\n                scheduler.getServiceMetrics().containersSucceeded.incr();\r\n                return;\r\n            case PREEMPTED:\r\n                componentMetrics.containersPreempted.incr();\r\n                scheduler.getServiceMetrics().containersPreempted.incr();\r\n                break;\r\n            case DISKS_FAILED:\r\n                componentMetrics.containersDiskFailure.incr();\r\n                scheduler.getServiceMetrics().containersDiskFailure.incr();\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n    componentMetrics.containersFailed.incr();\r\n    scheduler.getServiceMetrics().containersFailed.incr();\r\n    if (status != null && Apps.shouldCountTowardsNodeBlacklisting(status.getExitStatus())) {\r\n        String host = scheduler.getLiveInstances().get(status.getContainerId()).getNodeId().getHost();\r\n        failureTracker.incNodeFailure(host);\r\n        currentContainerFailure.getAndIncrement();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "doesNeedUpgrade",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean doesNeedUpgrade()\n{\r\n    return cancelUpgradeStatus.areContainersUpgrading() || upgradeStatus.areContainersUpgrading() || upgradeStatus.failed.get();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "areDependenciesReady",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean areDependenciesReady()\n{\r\n    List<String> dependencies = componentSpec.getDependencies();\r\n    if (ServiceUtils.isEmpty(dependencies)) {\r\n        return true;\r\n    }\r\n    for (String dependency : dependencies) {\r\n        Component dependentComponent = scheduler.getAllComponents().get(dependency);\r\n        if (dependentComponent == null) {\r\n            LOG.error(\"Couldn't find dependency {} for {} (should never happen)\", dependency, getName());\r\n            continue;\r\n        }\r\n        if (!dependentComponent.isReadyForDownstream()) {\r\n            LOG.info(\"[COMPONENT {}]: Dependency {} not satisfied, only {} of {}\" + \" instances are ready or the dependent component has not \" + \"completed \", getName(), dependency, dependentComponent.getNumReadyInstances(), dependentComponent.getNumDesiredInstances());\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getDependencyHostIpTokens",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "Map<String, String> getDependencyHostIpTokens()\n{\r\n    Map<String, String> tokens = new HashMap<>();\r\n    List<String> dependencies = componentSpec.getDependencies();\r\n    if (ServiceUtils.isEmpty(dependencies)) {\r\n        return tokens;\r\n    }\r\n    for (String dependency : dependencies) {\r\n        Collection<ComponentInstance> instances = scheduler.getAllComponents().get(dependency).getAllComponentInstances();\r\n        for (ComponentInstance instance : instances) {\r\n            if (instance.getContainerStatus() == null) {\r\n                continue;\r\n            }\r\n            if (ServiceUtils.isEmpty(instance.getContainerStatus().getIPs()) || ServiceUtils.isUnset(instance.getContainerStatus().getHost())) {\r\n                continue;\r\n            }\r\n            String ip = instance.getContainerStatus().getIPs().get(0);\r\n            String host = instance.getContainerStatus().getHost();\r\n            tokens.put(String.format(COMPONENT_INSTANCE_IP, instance.getCompInstanceName().toUpperCase()), ip);\r\n            tokens.put(String.format(COMPONENT_INSTANCE_HOST, instance.getCompInstanceName().toUpperCase()), host);\r\n        }\r\n    }\r\n    return tokens;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "incRunningContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void incRunningContainers()\n{\r\n    componentMetrics.containersRunning.incr();\r\n    scheduler.getServiceMetrics().containersRunning.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "decRunningContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void decRunningContainers()\n{\r\n    componentMetrics.containersRunning.decr();\r\n    scheduler.getServiceMetrics().containersRunning.decr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "incContainersReady",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void incContainersReady(boolean updateDefinition)\n{\r\n    componentMetrics.containersReady.incr();\r\n    scheduler.getServiceMetrics().containersReady.incr();\r\n    if (updateDefinition) {\r\n        checkAndUpdateComponentState(this, true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "decContainersReady",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void decContainersReady(boolean updateDefinition)\n{\r\n    componentMetrics.containersReady.decr();\r\n    scheduler.getServiceMetrics().containersReady.decr();\r\n    if (updateDefinition) {\r\n        checkAndUpdateComponentState(this, false);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getNumReadyInstances",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumReadyInstances()\n{\r\n    return componentMetrics.containersReady.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getNumRunningInstances",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumRunningInstances()\n{\r\n    return componentMetrics.containersRunning.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getNumDesiredInstances",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getNumDesiredInstances()\n{\r\n    return componentMetrics.containersDesired.value();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getComponentInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ComponentInstance getComponentInstance(String componentInstanceName)\n{\r\n    return compInstances.get(componentInstanceName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getAllComponentInstances",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<ComponentInstance> getAllComponentInstances()\n{\r\n    return compInstances.values();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getComponentSpec",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "org.apache.hadoop.yarn.service.api.records.Component getComponentSpec()\n{\r\n    return this.componentSpec;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "resetCompFailureCount",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void resetCompFailureCount()\n{\r\n    LOG.info(\"[COMPONENT {}]: Reset container failure count from {} to 0.\", getName(), currentContainerFailure.get());\r\n    currentContainerFailure.set(0);\r\n    failureTracker.resetContainerFailures();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getProbe",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Probe getProbe()\n{\r\n    return probe;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Priority getPriority()\n{\r\n    return priority;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getAllocateId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getAllocateId()\n{\r\n    return allocateId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getName()\n{\r\n    return componentSpec.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ComponentState getState()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.stateMachine.getCurrentState();\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "isUpgrading",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean isUpgrading()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return !(upgradeStatus.isCompleted() && cancelUpgradeStatus.isCompleted());\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getUpgradeStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpgradeStatus getUpgradeStatus()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return upgradeStatus;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getCancelUpgradeStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpgradeStatus getCancelUpgradeStatus()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return cancelUpgradeStatus;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getScheduler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceScheduler getScheduler()\n{\r\n    return scheduler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "handle",
  "errType" : [ "InvalidStateTransitionException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void handle(ComponentEvent event)\n{\r\n    writeLock.lock();\r\n    try {\r\n        ComponentState oldState = getState();\r\n        try {\r\n            stateMachine.doTransition(event.getType(), event);\r\n        } catch (InvalidStateTransitionException e) {\r\n            LOG.error(MessageFormat.format(\"[COMPONENT {0}]: Invalid event {1} at {2}\", componentSpec.getName(), event.getType(), oldState), e);\r\n        }\r\n        if (oldState != getState()) {\r\n            LOG.info(\"[COMPONENT {}] Transitioned from {} to {} on {} event.\", componentSpec.getName(), oldState, getState(), event.getType());\r\n        }\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "setComponentState",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setComponentState(org.apache.hadoop.yarn.service.api.records.ComponentState state)\n{\r\n    org.apache.hadoop.yarn.service.api.records.ComponentState curState = componentSpec.getState();\r\n    if (!curState.equals(state)) {\r\n        componentSpec.setState(state);\r\n        LOG.info(\"[COMPONENT {}] spec state changed from {} -> {}\", componentSpec.getName(), curState, state);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceContext getContext()\n{\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getPendingInstances",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ComponentInstance> getPendingInstances()\n{\r\n    return pendingInstances;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "isHealthThresholdMonitorEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isHealthThresholdMonitorEnabled()\n{\r\n    return healthThresholdMonitorEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "setHealthThresholdMonitorEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHealthThresholdMonitorEnabled(boolean healthThresholdMonitorEnabled)\n{\r\n    this.healthThresholdMonitorEnabled = healthThresholdMonitorEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getSucceededInstances",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<ComponentInstance> getSucceededInstances()\n{\r\n    return succeededInstances.values();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getNumSucceededInstances",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNumSucceededInstances()\n{\r\n    return succeededInstances.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getNumFailedInstances",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getNumFailedInstances()\n{\r\n    return failedInstances.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getFailedInstances",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<ComponentInstance> getFailedInstances()\n{\r\n    return failedInstances.values();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "markAsSucceeded",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void markAsSucceeded(ComponentInstance instance)\n{\r\n    removeFailedInstanceIfExists(instance);\r\n    succeededInstances.put(instance.getCompInstanceName(), instance);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "markAsFailed",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void markAsFailed(ComponentInstance instance)\n{\r\n    removeSuccessfulInstanceIfExists(instance);\r\n    failedInstances.put(instance.getCompInstanceName(), instance);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "removeFailedInstanceIfExists",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean removeFailedInstanceIfExists(ComponentInstance instance)\n{\r\n    if (failedInstances.containsKey(instance.getCompInstanceName())) {\r\n        failedInstances.remove(instance.getCompInstanceName());\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "removeSuccessfulInstanceIfExists",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean removeSuccessfulInstanceIfExists(ComponentInstance instance)\n{\r\n    if (succeededInstances.containsKey(instance.getCompInstanceName())) {\r\n        succeededInstances.remove(instance.getCompInstanceName());\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "isReadyForDownstream",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isReadyForDownstream()\n{\r\n    return getRestartPolicyHandler().isReadyForDownStream(this);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getRestartPolicyHandler",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ComponentRestartPolicy getRestartPolicyHandler(RestartPolicyEnum restartPolicyEnum)\n{\r\n    if (RestartPolicyEnum.NEVER == restartPolicyEnum) {\r\n        return NeverRestartPolicy.getInstance();\r\n    } else if (RestartPolicyEnum.ON_FAILURE == restartPolicyEnum) {\r\n        return OnFailureRestartPolicy.getInstance();\r\n    } else {\r\n        return AlwaysRestartPolicy.getInstance();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getRestartPolicyHandler",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ComponentRestartPolicy getRestartPolicyHandler()\n{\r\n    RestartPolicyEnum restartPolicyEnum = getComponentSpec().getRestartPolicy();\r\n    return getRestartPolicyHandler(restartPolicyEnum);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getHostnameSuffix",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getHostnameSuffix()\n{\r\n    return ServiceApiUtil.getHostnameSuffix(context.service.getName(), scheduler.getConfig());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\tarball",
  "methodName" : "validateArtifact",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void validateArtifact(Artifact artifact, String compName, FileSystem fs) throws IOException\n{\r\n    if (artifact == null) {\r\n        throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_ARTIFACT_FOR_COMP_INVALID, compName));\r\n    }\r\n    if (StringUtils.isEmpty(artifact.getId())) {\r\n        throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_ARTIFACT_ID_FOR_COMP_INVALID, compName));\r\n    }\r\n    Path p = new Path(artifact.getId());\r\n    if (!fs.exists(p)) {\r\n        throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_ARTIFACT_PATH_FOR_COMP_INVALID, compName, Artifact.TypeEnum.TARBALL.name(), artifact.getId()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\tarball",
  "methodName" : "validateConfigFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validateConfigFile(ConfigFile configFile, String compName, FileSystem fileSystem) throws IOException\n{\r\n    if (Paths.get(configFile.getDestFile()).isAbsolute()) {\r\n        throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_CONFIGFILE_DEST_FILE_FOR_COMP_NOT_ABSOLUTE, compName, Artifact.TypeEnum.TARBALL.name(), configFile.getDestFile()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "constraints",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PlacementPolicy constraints(List<PlacementConstraint> constraints)\n{\r\n    this.constraints = constraints;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getConstraints",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<PlacementConstraint> getConstraints()\n{\r\n    return constraints;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setConstraints",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConstraints(List<PlacementConstraint> constraints)\n{\r\n    this.constraints = constraints;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    PlacementPolicy placementPolicy = (PlacementPolicy) o;\r\n    return Objects.equals(this.constraints, placementPolicy.constraints);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(constraints);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class PlacementPolicy {\\n\").append(\"    constraints: \").append(toIndentedString(constraints)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getKerberosInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "KerberosInfo getKerberosInfo(Class<?> protocol, Configuration conf)\n{\r\n    if (!protocol.equals(ClientAMProtocolPB.class)) {\r\n        return null;\r\n    }\r\n    return new KerberosInfo() {\r\n\r\n        @Override\r\n        public Class<? extends Annotation> annotationType() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public String serverPrincipal() {\r\n            return YarnServiceConstants.PRINCIPAL;\r\n        }\r\n\r\n        @Override\r\n        public String clientPrincipal() {\r\n            return null;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getTokenInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TokenInfo getTokenInfo(Class<?> protocol, Configuration conf)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "getLong",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getLong(String name, long defaultValue, Configuration userConf, org.apache.hadoop.conf.Configuration systemConf)\n{\r\n    return userConf.getPropertyLong(name, systemConf.getLong(name, defaultValue));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "getInt",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getInt(String name, int defaultValue, Configuration userConf, org.apache.hadoop.conf.Configuration systemConf)\n{\r\n    return userConf.getPropertyInt(name, systemConf.getInt(name, defaultValue));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "getBoolean",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getBoolean(String name, boolean defaultValue, Configuration userConf, org.apache.hadoop.conf.Configuration systemConf)\n{\r\n    return userConf.getPropertyBool(name, systemConf.getBoolean(name, defaultValue));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String get(String name, String defaultVal, Configuration userConf, org.apache.hadoop.conf.Configuration systemConf)\n{\r\n    return userConf.getProperty(name, systemConf.get(name, defaultVal));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    Configuration conf = getConfig();\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    String nodeHostString = getNMHostName();\r\n    InetSocketAddress address = new InetSocketAddress(nodeHostString, 0);\r\n    server = rpc.getServer(ClientAMProtocol.class, this, address, conf, context.secretManager, 1, YARN_SERVICE_AM_CLIENT_PORT_RANGE);\r\n    if (conf.getBoolean(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHORIZATION, false)) {\r\n        this.server.refreshServiceAcl(getConfig(), new ClientAMPolicyProvider());\r\n    }\r\n    server.start();\r\n    bindAddress = NetUtils.createSocketAddrForHost(nodeHostString, server.getListenerAddress().getPort());\r\n    LOG.info(\"Instantiated ClientAMService at \" + bindAddress);\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getNMHostName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getNMHostName() throws BadClusterStateException\n{\r\n    return ServiceUtils.mandatoryEnvVariable(ApplicationConstants.Environment.NM_HOST.name());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (server != null) {\r\n        server.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "flexComponents",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "FlexComponentsResponseProto flexComponents(FlexComponentsRequestProto request) throws IOException\n{\r\n    if (!request.getComponentsList().isEmpty()) {\r\n        for (ComponentCountProto component : request.getComponentsList()) {\r\n            ComponentEvent event = new ComponentEvent(component.getName(), FLEX).setDesired(component.getNumberOfContainers());\r\n            context.scheduler.getDispatcher().getEventHandler().handle(event);\r\n            LOG.info(\"Flexing component {} to {}\", component.getName(), component.getNumberOfContainers());\r\n        }\r\n    }\r\n    return FlexComponentsResponseProto.newBuilder().build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetStatusResponseProto getStatus(GetStatusRequestProto request) throws IOException, YarnException\n{\r\n    String stat = ServiceApiUtil.jsonSerDeser.toJson(context.service);\r\n    return GetStatusResponseProto.newBuilder().setStatus(stat).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "stop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "StopResponseProto stop(StopRequestProto requestProto) throws IOException, YarnException\n{\r\n    LOG.info(\"Stop the service by {}\", UserGroupInformation.getCurrentUser());\r\n    context.scheduler.getDiagnostics().append(\"Stopped by user \" + UserGroupInformation.getCurrentUser());\r\n    context.scheduler.setGracefulStop(FinalApplicationStatus.ENDED);\r\n    Thread thread = new Thread() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                Thread.sleep(2000);\r\n                ExitUtil.terminate(0);\r\n            } catch (InterruptedException e) {\r\n                LOG.error(\"Interrupted while stopping\", e);\r\n            }\r\n        }\r\n    };\r\n    thread.start();\r\n    return StopResponseProto.newBuilder().build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getBindAddress",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "InetSocketAddress getBindAddress()\n{\r\n    return bindAddress;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "upgrade",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "UpgradeServiceResponseProto upgrade(UpgradeServiceRequestProto request) throws IOException\n{\r\n    try {\r\n        LOG.info(\"Upgrading service to version {} by {}\", request.getVersion(), UserGroupInformation.getCurrentUser());\r\n        context.getServiceManager().processUpgradeRequest(request.getVersion(), request.getAutoFinalize(), request.getExpressUpgrade());\r\n        return UpgradeServiceResponseProto.newBuilder().build();\r\n    } catch (Exception ex) {\r\n        return UpgradeServiceResponseProto.newBuilder().setError(ex.getMessage()).build();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "restart",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RestartServiceResponseProto restart(RestartServiceRequestProto request) throws IOException, YarnException\n{\r\n    ServiceEvent event = new ServiceEvent(ServiceEventType.START);\r\n    context.scheduler.getDispatcher().getEventHandler().handle(event);\r\n    LOG.info(\"Restart service by {}\", UserGroupInformation.getCurrentUser());\r\n    return RestartServiceResponseProto.newBuilder().build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "upgrade",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "CompInstancesUpgradeResponseProto upgrade(CompInstancesUpgradeRequestProto request) throws IOException, YarnException\n{\r\n    if (!request.getContainerIdsList().isEmpty()) {\r\n        for (String containerId : request.getContainerIdsList()) {\r\n            ComponentInstanceEvent event = new ComponentInstanceEvent(ContainerId.fromString(containerId), ComponentInstanceEventType.UPGRADE);\r\n            LOG.info(\"Upgrade container {}\", containerId);\r\n            context.scheduler.getDispatcher().getEventHandler().handle(event);\r\n        }\r\n    }\r\n    return CompInstancesUpgradeResponseProto.newBuilder().build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getCompInstances",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetCompInstancesResponseProto getCompInstances(GetCompInstancesRequestProto request) throws IOException\n{\r\n    List<ComponentContainers> containers = FilterUtils.filterInstances(context, request);\r\n    return GetCompInstancesResponseProto.newBuilder().setCompInstances(ServiceApiUtil.COMP_CONTAINERS_JSON_SERDE.toJson(containers.toArray(new ComponentContainers[containers.size()]))).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "cancelUpgrade",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "CancelUpgradeResponseProto cancelUpgrade(CancelUpgradeRequestProto request) throws IOException, YarnException\n{\r\n    LOG.info(\"Cancel service upgrade by {}\", UserGroupInformation.getCurrentUser());\r\n    ServiceEvent event = new ServiceEvent(ServiceEventType.CANCEL_UPGRADE);\r\n    context.scheduler.getDispatcher().getEventHandler().handle(event);\r\n    return CancelUpgradeResponseProto.newBuilder().build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "decommissionCompInstances",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "DecommissionCompInstancesResponseProto decommissionCompInstances(DecommissionCompInstancesRequestProto request) throws IOException, YarnException\n{\r\n    if (!request.getCompInstancesList().isEmpty()) {\r\n        for (String instance : request.getCompInstancesList()) {\r\n            String componentName = ServiceApiUtil.parseComponentName(instance);\r\n            ComponentEvent event = new ComponentEvent(componentName, DECOMMISSION_INSTANCE).setInstanceName(instance);\r\n            context.scheduler.getDispatcher().getEventHandler().handle(event);\r\n            LOG.info(\"Decommissioning component {} instance {}\", componentName, instance);\r\n        }\r\n    }\r\n    return DecommissionCompInstancesResponseProto.newBuilder().build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\tarball",
  "methodName" : "createClientProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractClientProvider createClientProvider()\n{\r\n    return Client.PROVIDER;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\tarball",
  "methodName" : "createServerProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ProviderService createServerProvider()\n{\r\n    return Server.PROVIDER;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\tarball",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ProviderFactory getInstance()\n{\r\n    return FACTORY;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "addConfigMap",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addConfigMap(Configuration config, Map<String, String> map, String origin) throws BadConfigException\n{\r\n    addConfigMap(config, map.entrySet(), origin);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "addConfigMap",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addConfigMap(Configuration config, Iterable<Map.Entry<String, String>> map, String origin) throws BadConfigException\n{\r\n    for (Map.Entry<String, String> mapEntry : map) {\r\n        String key = mapEntry.getKey();\r\n        String value = mapEntry.getValue();\r\n        if (value == null) {\r\n            throw new BadConfigException(\"Null value for property \" + key);\r\n        }\r\n        config.set(key, value, origin);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "toXml",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toXml(Configuration conf) throws IOException\n{\r\n    StringWriter writer = new StringWriter();\r\n    conf.writeXml(writer);\r\n    return writer.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "registerDefaultResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "URL registerDefaultResource(String resource)\n{\r\n    URL resURL = getResourceUrl(resource);\r\n    if (resURL != null) {\r\n        Configuration.addDefaultResource(resource);\r\n    }\r\n    return resURL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "loadFromResource",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Configuration loadFromResource(String resource)\n{\r\n    Configuration conf = new Configuration(false);\r\n    URL resURL = getResourceUrl(resource);\r\n    if (resURL != null) {\r\n        log.debug(\"loaded resources from {}\", resURL);\r\n        conf.addResource(resource);\r\n    } else {\r\n        log.debug(\"failed to find {} on the classpath\", resource);\r\n    }\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getResourceUrl",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URL getResourceUrl(String resource)\n{\r\n    return ConfigHelper.class.getClassLoader().getResource(resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "resolveConfiguration",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Configuration resolveConfiguration(Iterable<Map.Entry<String, String>> keysource, Configuration valuesource)\n{\r\n    Configuration result = new Configuration(false);\r\n    for (Map.Entry<String, String> entry : keysource) {\r\n        String key = entry.getKey();\r\n        String value = valuesource.get(key);\r\n        Preconditions.checkState(value != null, \"no reference for \\\"%s\\\" in values\", key);\r\n        result.set(key, value);\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "setAppDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAppDir(Path appDir)\n{\r\n    this.appDir = appDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getAppDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getAppDir()\n{\r\n    return this.appDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getComponentDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getComponentDir(String serviceVersion, String compName)\n{\r\n    return new Path(new Path(getAppDir(), \"components\"), serviceVersion + \"/\" + compName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getBasePath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getBasePath()\n{\r\n    String tmpDir = configuration.get(\"hadoop.tmp.dir\");\r\n    String basePath = YarnServiceConstants.SERVICE_BASE_DIRECTORY + \"/\" + YarnServiceConstants.SERVICES_DIRECTORY;\r\n    return new Path(tmpDir, basePath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getComponentPublicResourceDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getComponentPublicResourceDir(String serviceVersion, String compName)\n{\r\n    return new Path(new Path(getBasePath(), getAppDir().getName() + \"/\" + \"components\"), serviceVersion + \"/\" + compName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "deleteComponentDir",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void deleteComponentDir(String serviceVersion, String compName) throws IOException\n{\r\n    Path path = getComponentDir(serviceVersion, compName);\r\n    if (fileSystem.exists(path)) {\r\n        fileSystem.delete(path, true);\r\n        LOG.debug(\"deleted dir {}\", path);\r\n    }\r\n    Path publicResourceDir = getComponentPublicResourceDir(serviceVersion, compName);\r\n    if (fileSystem.exists(publicResourceDir)) {\r\n        fileSystem.delete(publicResourceDir, true);\r\n        LOG.debug(\"deleted public resource dir {}\", publicResourceDir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "deleteComponentsVersionDirIfEmpty",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void deleteComponentsVersionDirIfEmpty(String serviceVersion) throws IOException\n{\r\n    Path path = new Path(new Path(getAppDir(), \"components\"), serviceVersion);\r\n    if (fileSystem.exists(path) && fileSystem.listStatus(path).length == 0) {\r\n        fileSystem.delete(path, true);\r\n        LOG.info(\"deleted dir {}\", path);\r\n    }\r\n    Path publicResourceDir = new Path(new Path(getBasePath(), getAppDir().getName() + \"/\" + \"components\"), serviceVersion);\r\n    if (fileSystem.exists(publicResourceDir) && fileSystem.listStatus(publicResourceDir).length == 0) {\r\n        fileSystem.delete(publicResourceDir, true);\r\n        LOG.info(\"deleted public resource dir {}\", publicResourceDir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "copy",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ConfigFile copy()\n{\r\n    ConfigFile copy = new ConfigFile();\r\n    copy.setType(this.getType());\r\n    copy.setSrcFile(this.getSrcFile());\r\n    copy.setDestFile(this.getDestFile());\r\n    copy.setVisibility(this.visibility);\r\n    if (this.getProperties() != null && !this.getProperties().isEmpty()) {\r\n        copy.getProperties().putAll(this.getProperties());\r\n    }\r\n    return copy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "type",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ConfigFile type(TypeEnum type)\n{\r\n    this.type = type;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TypeEnum getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setType(TypeEnum type)\n{\r\n    this.type = type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "destFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ConfigFile destFile(String destFile)\n{\r\n    this.destFile = destFile;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getDestFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDestFile()\n{\r\n    return destFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setDestFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDestFile(String destFile)\n{\r\n    this.destFile = destFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "srcFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ConfigFile srcFile(String srcFile)\n{\r\n    this.srcFile = srcFile;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getSrcFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getSrcFile()\n{\r\n    return srcFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setSrcFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSrcFile(String srcFile)\n{\r\n    this.srcFile = srcFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "visibility",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ConfigFile visibility(LocalResourceVisibility localrsrcVisibility)\n{\r\n    this.visibility = localrsrcVisibility;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getVisibility",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalResourceVisibility getVisibility()\n{\r\n    return visibility;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setVisibility",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVisibility(LocalResourceVisibility localrsrcVisibility)\n{\r\n    this.visibility = localrsrcVisibility;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "properties",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ConfigFile properties(Map<String, String> properties)\n{\r\n    this.properties = properties;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getProperties",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, String> getProperties()\n{\r\n    return properties;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setProperties",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setProperties(Map<String, String> properties)\n{\r\n    this.properties = properties;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getLong",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getLong(String name, long defaultValue)\n{\r\n    if (name == null) {\r\n        return defaultValue;\r\n    }\r\n    String value = properties.get(name.trim());\r\n    return Long.parseLong(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getBoolean",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getBoolean(String name, boolean defaultValue)\n{\r\n    if (name == null) {\r\n        return defaultValue;\r\n    }\r\n    return Boolean.valueOf(properties.get(name.trim()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    ConfigFile configFile = (ConfigFile) o;\r\n    return Objects.equals(this.type, configFile.type) && Objects.equals(this.destFile, configFile.destFile) && Objects.equals(this.srcFile, configFile.srcFile) && Objects.equals(this.visibility, configFile.visibility) && Objects.equals(this.properties, configFile.properties);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(type, destFile, srcFile, visibility, properties);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class ConfigFile {\\n\").append(\"    type: \").append(toIndentedString(type)).append(\"\\n\").append(\"    destFile: \").append(toIndentedString(destFile)).append(\"\\n\").append(\"    srcFile: \").append(toIndentedString(srcFile)).append(\"\\n\").append(\"    visibility: \").append(toIndentedString(visibility)).append(\"\\n\").append(\"    properties: \").append(toIndentedString(properties)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\service",
  "methodName" : "flexComponents",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FlexComponentsResponseProto flexComponents(RpcController controller, FlexComponentsRequestProto request) throws ServiceException\n{\r\n    try {\r\n        return real.flexComponents(request);\r\n    } catch (IOException | YarnException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\service",
  "methodName" : "getStatus",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetStatusResponseProto getStatus(RpcController controller, GetStatusRequestProto request) throws ServiceException\n{\r\n    try {\r\n        return real.getStatus(request);\r\n    } catch (IOException | YarnException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\service",
  "methodName" : "stop",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "org.apache.hadoop.yarn.proto.ClientAMProtocol.StopResponseProto stop(RpcController controller, org.apache.hadoop.yarn.proto.ClientAMProtocol.StopRequestProto request) throws ServiceException\n{\r\n    try {\r\n        return real.stop(request);\r\n    } catch (IOException | YarnException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\service",
  "methodName" : "upgradeService",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpgradeServiceResponseProto upgradeService(RpcController controller, UpgradeServiceRequestProto request) throws ServiceException\n{\r\n    try {\r\n        return real.upgrade(request);\r\n    } catch (IOException | YarnException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\service",
  "methodName" : "restartService",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RestartServiceResponseProto restartService(RpcController controller, RestartServiceRequestProto request) throws ServiceException\n{\r\n    try {\r\n        return real.restart(request);\r\n    } catch (IOException | YarnException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\service",
  "methodName" : "upgrade",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CompInstancesUpgradeResponseProto upgrade(RpcController controller, CompInstancesUpgradeRequestProto request) throws ServiceException\n{\r\n    try {\r\n        return real.upgrade(request);\r\n    } catch (IOException | YarnException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\service",
  "methodName" : "getCompInstances",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "GetCompInstancesResponseProto getCompInstances(RpcController controller, GetCompInstancesRequestProto request) throws ServiceException\n{\r\n    try {\r\n        return real.getCompInstances(request);\r\n    } catch (IOException | YarnException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\service",
  "methodName" : "cancelUpgrade",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "CancelUpgradeResponseProto cancelUpgrade(RpcController controller, CancelUpgradeRequestProto request) throws ServiceException\n{\r\n    try {\r\n        return real.cancelUpgrade(request);\r\n    } catch (IOException | YarnException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\service",
  "methodName" : "decommissionCompInstances",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DecommissionCompInstancesResponseProto decommissionCompInstances(RpcController controller, DecommissionCompInstancesRequestProto request) throws ServiceException\n{\r\n    try {\r\n        return real.decommissionCompInstances(request);\r\n    } catch (IOException | YarnException e) {\r\n        throw new ServiceException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "fromJson",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "T fromJson(String json) throws IOException, JsonParseException, JsonMappingException\n{\r\n    try {\r\n        return mapper.readValue(json, classType);\r\n    } catch (IOException e) {\r\n        log.error(\"Exception while parsing json : \" + e + \"\\n\" + json, e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "fromFile",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "T fromFile(File jsonFile) throws IOException, JsonParseException, JsonMappingException\n{\r\n    File absoluteFile = jsonFile.getAbsoluteFile();\r\n    try {\r\n        return mapper.readValue(absoluteFile, classType);\r\n    } catch (IOException e) {\r\n        log.error(\"Exception while parsing json file {}\", absoluteFile, e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "fromResource",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "T fromResource(String resource) throws IOException, JsonParseException, JsonMappingException\n{\r\n    try (InputStream resStream = this.getClass().getResourceAsStream(resource)) {\r\n        if (resStream == null) {\r\n            throw new FileNotFoundException(resource);\r\n        }\r\n        return (T) (mapper.readValue(resStream, classType));\r\n    } catch (IOException e) {\r\n        log.error(\"Exception while parsing json resource {}\", resource, e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "fromStream",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "T fromStream(InputStream stream) throws IOException\n{\r\n    try {\r\n        return (T) (mapper.readValue(stream, classType));\r\n    } catch (IOException e) {\r\n        log.error(\"Exception while parsing json input stream\", e);\r\n        throw e;\r\n    } finally {\r\n        IOUtils.closeStream(stream);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "fromInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T fromInstance(T instance) throws IOException\n{\r\n    return fromJson(toJson(instance));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "fromBytes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T fromBytes(byte[] b) throws IOException\n{\r\n    String json = new String(b, 0, b.length, StandardCharsets.UTF_8);\r\n    return fromJson(json);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "load",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "T load(FileSystem fs, Path path) throws IOException\n{\r\n    FSDataInputStream dataInputStream = fs.open(path);\r\n    return fromStream(dataInputStream);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "save",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void save(FileSystem fs, Path path, T instance, boolean overwrite) throws IOException\n{\r\n    FSDataOutputStream dataOutputStream = fs.create(path, overwrite);\r\n    writeJsonAsBytes(instance, dataOutputStream);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "save",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void save(T instance, File file) throws IOException\n{\r\n    writeJsonAsBytes(instance, new FileOutputStream(file.getAbsoluteFile()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "writeJsonAsBytes",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void writeJsonAsBytes(T instance, OutputStream dataOutputStream) throws IOException\n{\r\n    try {\r\n        String json = toJson(instance);\r\n        byte[] b = json.getBytes(StandardCharsets.UTF_8);\r\n        dataOutputStream.write(b);\r\n        dataOutputStream.flush();\r\n        dataOutputStream.close();\r\n    } finally {\r\n        IOUtils.closeStream(dataOutputStream);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "toJson",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toJson(T instance) throws JsonProcessingException\n{\r\n    mapper.configure(SerializationFeature.INDENT_OUTPUT, true);\r\n    return mapper.writeValueAsString(instance);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\defaultImpl",
  "methodName" : "createClientProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractClientProvider createClientProvider()\n{\r\n    return Client.PROVIDER;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\defaultImpl",
  "methodName" : "createServerProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ProviderService createServerProvider()\n{\r\n    return Server.PROVIDER;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\defaultImpl",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ProviderFactory getInstance()\n{\r\n    return FACTORY;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void add(Object... args)\n{\r\n    for (Object arg : args) {\r\n        argumentList.add(arg.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "size",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int size()\n{\r\n    return argumentList.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "addOutAndErrFiles",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void addOutAndErrFiles(String stdout, String stderr)\n{\r\n    Preconditions.checkNotNull(stdout, \"Null output file\");\r\n    Preconditions.checkState(!stdout.isEmpty(), \"output filename invalid\");\r\n    argumentList.add(\"1>\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + \"/\" + stdout);\r\n    if (stderr != null) {\r\n        argumentList.add(\"2>\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + \"/\" + stderr);\r\n    } else {\r\n        argumentList.add(\"2>&1\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "build",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String build()\n{\r\n    return ServiceUtils.join(argumentList, \" \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getServiceManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceManager getServiceManager()\n{\r\n    return serviceManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setServiceManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setServiceManager(ServiceManager serviceManager)\n{\r\n    this.serviceManager = Preconditions.checkNotNull(serviceManager);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service getService()\n{\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\docker",
  "methodName" : "validateArtifact",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void validateArtifact(Artifact artifact, String compName, FileSystem fileSystem)\n{\r\n    if (artifact == null) {\r\n        throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_ARTIFACT_FOR_COMP_INVALID, compName));\r\n    }\r\n    if (StringUtils.isEmpty(artifact.getId())) {\r\n        throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_ARTIFACT_ID_FOR_COMP_INVALID, compName));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\docker",
  "methodName" : "validateConfigFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void validateConfigFile(ConfigFile configFile, String compName, FileSystem fileSystem) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "createClientProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractClientProvider createClientProvider()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "createServerProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ProviderService createServerProvider()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "getProviderService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ProviderService getProviderService(Artifact artifact)\n{\r\n    return createServiceProviderFactory(artifact).createServerProvider();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "getClientProvider",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AbstractClientProvider getClientProvider(Artifact artifact)\n{\r\n    return createServiceProviderFactory(artifact).createClientProvider();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "createServiceProviderFactory",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ProviderFactory createServiceProviderFactory(Artifact artifact)\n{\r\n    if (artifact == null || artifact.getType() == null) {\r\n        LOG.debug(\"Loading service provider type default\");\r\n        return DefaultProviderFactory.getInstance();\r\n    }\r\n    LOG.debug(\"Loading service provider type {}\", artifact.getType());\r\n    switch(artifact.getType()) {\r\n        case DOCKER:\r\n            return DockerProviderFactory.getInstance();\r\n        case TARBALL:\r\n            return TarballProviderFactory.getInstance();\r\n        default:\r\n            throw new IllegalArgumentException(String.format(\"Resolution error, \" + \"%s should not be passed to createServiceProviderFactory\", artifact.getType()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    printSystemEnv();\r\n    context = new ServiceContext();\r\n    Path appDir = getAppDir();\r\n    context.serviceHdfsDir = appDir.toString();\r\n    context.tokens = recordTokensForContainers();\r\n    Credentials credentials = null;\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        credentials = UserGroupInformation.getCurrentUser().getCredentials();\r\n        doSecureLogin();\r\n    }\r\n    SliderFileSystem fs = new SliderFileSystem(conf);\r\n    fs.setAppDir(appDir);\r\n    context.fs = fs;\r\n    loadApplicationJson(context, fs);\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        if (credentials != null) {\r\n            UserGroupInformation.getCurrentUser().addCredentials(credentials);\r\n        }\r\n        removeHdfsDelegationToken(UserGroupInformation.getLoginUser());\r\n    }\r\n    for (Map.Entry<String, String> entry : context.service.getConfiguration().getProperties().entrySet()) {\r\n        conf.set(entry.getKey(), entry.getValue());\r\n    }\r\n    ContainerId amContainerId = getAMContainerId();\r\n    ApplicationAttemptId attemptId = amContainerId.getApplicationAttemptId();\r\n    LOG.info(\"Service AppAttemptId: \" + attemptId);\r\n    context.attemptId = attemptId;\r\n    conf.setLong(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS, -1);\r\n    conf.unset(YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS);\r\n    DefaultMetricsSystem.initialize(\"ServiceAppMaster\");\r\n    context.secretManager = new ClientToAMTokenSecretManager(attemptId, null);\r\n    ClientAMService clientAMService = createClientAMService();\r\n    context.clientAMService = clientAMService;\r\n    addService(clientAMService);\r\n    ServiceScheduler scheduler = createServiceScheduler(context);\r\n    addService(scheduler);\r\n    context.scheduler = scheduler;\r\n    ServiceMonitor monitor = new ServiceMonitor(\"Service Monitor\", context);\r\n    addService(monitor);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createClientAMService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ClientAMService createClientAMService()\n{\r\n    return new ClientAMService(context);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "recordTokensForContainers",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "ByteBuffer recordTokensForContainers() throws IOException\n{\r\n    Credentials copy = new Credentials(UserGroupInformation.getCurrentUser().getCredentials());\r\n    Iterator<Token<?>> iter = copy.getAllTokens().iterator();\r\n    while (iter.hasNext()) {\r\n        Token<?> token = iter.next();\r\n        LOG.info(token.toString());\r\n        if (token.getKind().equals(AMRMTokenIdentifier.KIND_NAME)) {\r\n            iter.remove();\r\n        }\r\n    }\r\n    DataOutputBuffer dob = new DataOutputBuffer();\r\n    try {\r\n        copy.writeTokenStorageToStream(dob);\r\n    } finally {\r\n        dob.close();\r\n    }\r\n    return ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "doSecureLogin",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void doSecureLogin() throws IOException, URISyntaxException\n{\r\n    File keytab = new File(String.format(KEYTAB_LOCATION, getServiceName()));\r\n    if (!keytab.exists()) {\r\n        LOG.info(\"No keytab localized at \" + keytab);\r\n        String preInstalledKeytab = context.service == null ? this.serviceKeytab : context.service.getKerberosPrincipal().getKeytab();\r\n        if (!StringUtils.isEmpty(preInstalledKeytab)) {\r\n            URI uri = new URI(preInstalledKeytab);\r\n            if (uri.getScheme().equals(\"file\")) {\r\n                keytab = new File(uri);\r\n                LOG.info(\"Using pre-installed keytab from localhost: \" + preInstalledKeytab);\r\n            }\r\n        }\r\n    }\r\n    if (!keytab.exists()) {\r\n        LOG.info(\"No keytab exists: \" + keytab);\r\n        return;\r\n    }\r\n    String principal = context.service == null ? this.servicePrincipalName : context.service.getKerberosPrincipal().getPrincipalName();\r\n    if (StringUtils.isEmpty((principal))) {\r\n        principal = UserGroupInformation.getLoginUser().getShortUserName();\r\n        LOG.info(\"No principal name specified.  Will use AM \" + \"login identity {} to attempt keytab-based login\", principal);\r\n    }\r\n    LOG.info(\"User before logged in is: \" + UserGroupInformation.getCurrentUser());\r\n    String principalName = SecurityUtil.getServerPrincipal(principal, ServiceUtils.getLocalHostName(getConfig()));\r\n    UserGroupInformation.loginUserFromKeytab(principalName, keytab.getAbsolutePath());\r\n    LOG.info(\"User after logged in is: \" + UserGroupInformation.getCurrentUser());\r\n    context.principal = principalName;\r\n    context.keytab = keytab.getAbsolutePath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "removeHdfsDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void removeHdfsDelegationToken(UserGroupInformation user)\n{\r\n    if (!user.isFromKeytab()) {\r\n        LOG.error(\"AM is not holding on a keytab in a secure deployment:\" + \" service will fail when tokens expire\");\r\n    }\r\n    Credentials credentials = user.getCredentials();\r\n    Iterator<Token<? extends TokenIdentifier>> iter = credentials.getAllTokens().iterator();\r\n    while (iter.hasNext()) {\r\n        Token<? extends TokenIdentifier> token = iter.next();\r\n        if (token.getKind().equals(DelegationTokenIdentifier.HDFS_DELEGATION_KIND)) {\r\n            LOG.info(\"Remove HDFS delegation token {}.\", token);\r\n            iter.remove();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getAMContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId getAMContainerId() throws BadClusterStateException\n{\r\n    return ContainerId.fromString(ServiceUtils.mandatoryEnvVariable(ApplicationConstants.Environment.CONTAINER_ID.name()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getAppDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getAppDir()\n{\r\n    return new Path(serviceDefPath).getParent();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getServiceName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getServiceName()\n{\r\n    return serviceName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createServiceScheduler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceScheduler createServiceScheduler(ServiceContext context) throws IOException, YarnException\n{\r\n    return new ServiceScheduler(context);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "loadApplicationJson",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void loadApplicationJson(ServiceContext context, SliderFileSystem fs) throws IOException\n{\r\n    context.service = ServiceApiUtil.loadServiceFrom(fs, new Path(serviceDefPath));\r\n    context.service.setState(ServiceState.ACCEPTED);\r\n    LOG.info(context.service.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    LOG.info(\"Starting service as user \" + UserGroupInformation.getCurrentUser());\r\n    UserGroupInformation.getLoginUser().doAs((PrivilegedExceptionAction<Void>) () -> {\r\n        super.serviceStart();\r\n        return null;\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    LOG.info(\"Stopping app master\");\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "checkAndUpdateServiceState",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void checkAndUpdateServiceState(ServiceScheduler scheduler)\n{\r\n    ServiceState curState = scheduler.getApp().getState();\r\n    boolean isStable = true;\r\n    for (org.apache.hadoop.yarn.service.api.records.Component comp : scheduler.getApp().getComponents()) {\r\n        if (comp.getState() != org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE) {\r\n            isStable = false;\r\n            break;\r\n        }\r\n    }\r\n    if (isStable) {\r\n        scheduler.getApp().setState(ServiceState.STABLE);\r\n    } else {\r\n        if (curState == ServiceState.STABLE) {\r\n            scheduler.getApp().setState(ServiceState.STARTED);\r\n        }\r\n    }\r\n    if (curState != scheduler.getApp().getState()) {\r\n        LOG.info(\"Service state changed from {} -> {}\", curState, scheduler.getApp().getState());\r\n    }\r\n    populateYarnSysFS(scheduler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "populateYarnSysFS",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void populateYarnSysFS(ServiceScheduler scheduler)\n{\r\n    Service service = scheduler.getApp();\r\n    scheduler.syncSysFs(service);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "printSystemEnv",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void printSystemEnv()\n{\r\n    for (Map.Entry<String, String> envs : System.getenv().entrySet()) {\r\n        LOG.info(\"{} = {}\", envs.getKey(), envs.getValue());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "main",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\r\n    org.apache.hadoop.util.StringUtils.startupShutdownMessage(ServiceMaster.class, args, LOG);\r\n    try {\r\n        ServiceMaster serviceMaster = new ServiceMaster(\"Service Master\");\r\n        ShutdownHookManager.get().addShutdownHook(new CompositeServiceShutdownHook(serviceMaster), 30);\r\n        YarnConfiguration conf = new YarnConfiguration();\r\n        Options opts = new Options();\r\n        opts.addOption(YARNFILE_OPTION, true, \"HDFS path to JSON service \" + \"specification\");\r\n        opts.getOption(YARNFILE_OPTION).setRequired(true);\r\n        opts.addOption(SERVICE_NAME_OPTION, true, \"Service name\");\r\n        opts.getOption(SERVICE_NAME_OPTION).setRequired(true);\r\n        opts.addOption(KEYTAB_OPTION, true, \"Service AM keytab\");\r\n        opts.addOption(PRINCIPAL_NAME_OPTION, true, \"Service AM keytab principal\");\r\n        GenericOptionsParser parser = new GenericOptionsParser(conf, opts, args);\r\n        CommandLine cmdLine = parser.getCommandLine();\r\n        serviceMaster.serviceDefPath = cmdLine.getOptionValue(YARNFILE_OPTION);\r\n        serviceMaster.serviceName = cmdLine.getOptionValue(SERVICE_NAME_OPTION);\r\n        serviceMaster.serviceKeytab = cmdLine.getOptionValue(KEYTAB_OPTION);\r\n        serviceMaster.servicePrincipalName = cmdLine.getOptionValue(PRINCIPAL_NAME_OPTION);\r\n        serviceMaster.init(conf);\r\n        serviceMaster.start();\r\n    } catch (Throwable t) {\r\n        LOG.error(\"Error starting service master\", t);\r\n        ExitUtil.terminate(1, \"Error starting service master\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "putMetrics",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void putMetrics(MetricsRecord record)\n{\r\n    if (serviceTimelinePublisher.isStopped()) {\r\n        log.warn(\"ServiceTimelinePublisher has stopped. \" + \"Not publishing any more metrics to ATS.\");\r\n        return;\r\n    }\r\n    boolean isServiceMetrics = false;\r\n    boolean isComponentMetrics = false;\r\n    String appId = null;\r\n    for (MetricsTag tag : record.tags()) {\r\n        if (tag.name().equals(\"type\") && tag.value().equals(\"service\")) {\r\n            isServiceMetrics = true;\r\n        } else if (tag.name().equals(\"type\") && tag.value().equals(\"component\")) {\r\n            isComponentMetrics = true;\r\n            break;\r\n        } else if (tag.name().equals(\"appId\")) {\r\n            appId = tag.value();\r\n        }\r\n    }\r\n    if (isServiceMetrics && appId != null) {\r\n        log.debug(\"Publishing service metrics. {}\", record);\r\n        serviceTimelinePublisher.publishMetrics(record.metrics(), appId, ServiceTimelineEntityType.SERVICE_ATTEMPT.toString(), record.timestamp());\r\n    } else if (isComponentMetrics) {\r\n        log.debug(\"Publishing Component metrics. {}\", record);\r\n        serviceTimelinePublisher.publishMetrics(record.metrics(), record.name(), ServiceTimelineEntityType.COMPONENT.toString(), record.timestamp());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init(SubsetConfiguration conf)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void flush()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "getJavaBinary",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getJavaBinary()\n{\r\n    return ApplicationConstants.Environment.JAVA_HOME.$$() + \"/bin/java\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "setJVMOpts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setJVMOpts(String jvmOpts)\n{\r\n    if (ServiceUtils.isSet(jvmOpts)) {\r\n        add(jvmOpts);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "enableJavaAssertions",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void enableJavaAssertions()\n{\r\n    add(\"-ea\");\r\n    add(\"-esa\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "sysprop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void sysprop(String property, String value)\n{\r\n    Preconditions.checkArgument(property != null, \"null property name\");\r\n    Preconditions.checkArgument(value != null, \"null value\");\r\n    add(\"-D\" + property + \"=\" + value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "forceIPv4",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "JavaCommandLineBuilder forceIPv4()\n{\r\n    sysprop(\"java.net.preferIPv4Stack\", \"true\");\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "headless",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "JavaCommandLineBuilder headless()\n{\r\n    sysprop(\"java.awt.headless\", \"true\");\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "addConfOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean addConfOption(Configuration conf, String key)\n{\r\n    return defineIfSet(key, conf.get(key));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "addConfOptions",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addConfOptions(Configuration conf, String... keys)\n{\r\n    for (String key : keys) {\r\n        addConfOption(conf, key);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "addPrefixedConfOptions",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int addPrefixedConfOptions(Configuration conf, String prefix)\n{\r\n    int copied = 0;\r\n    for (Map.Entry<String, String> entry : conf) {\r\n        if (entry.getKey().startsWith(prefix)) {\r\n            define(entry.getKey(), entry.getValue());\r\n            copied++;\r\n        }\r\n    }\r\n    return copied;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "addConfOptionToCLI",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String addConfOptionToCLI(Configuration conf, String key, String defVal)\n{\r\n    Preconditions.checkArgument(key != null, \"null key\");\r\n    String val = conf.get(key, defVal);\r\n    define(key, val);\r\n    return val;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "define",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void define(String key, String val)\n{\r\n    Preconditions.checkArgument(key != null, \"null key\");\r\n    Preconditions.checkArgument(val != null, \"null value\");\r\n    add(\"-D\", key + \"=\" + val);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "defineIfSet",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean defineIfSet(String key, String val)\n{\r\n    Preconditions.checkArgument(key != null, \"null key\");\r\n    if (val != null) {\r\n        define(key, val);\r\n        return true;\r\n    } else {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "addMandatoryConfOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addMandatoryConfOption(Configuration conf, String key) throws BadConfigException\n{\r\n    if (!addConfOption(conf, key)) {\r\n        throw new BadConfigException(\"Missing configuration option: \" + key);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "setYarnDockerMode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setYarnDockerMode(boolean yarnDockerMode)\n{\r\n    this.yarnDockerMode = yarnDockerMode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "getEnv",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, String> getEnv()\n{\r\n    return envVars;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "getCommands",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<String> getCommands()\n{\r\n    return commands;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "addLocalResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addLocalResource(String subPath, LocalResource resource)\n{\r\n    localResources.put(subPath, resource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "addLocalResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addLocalResource(String subPath, LocalResource resource, String mountPath)\n{\r\n    localResources.put(subPath, resource);\r\n    mountPaths.put(subPath, mountPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "addCommand",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addCommand(String cmd)\n{\r\n    commands.add(cmd);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "completeContainerLaunch",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "ContainerLaunchContext completeContainerLaunch() throws IOException\n{\r\n    String cmdStr = ServiceUtils.join(commands, \" \", false);\r\n    log.debug(\"Completed setting up container command {}\", cmdStr);\r\n    containerLaunchContext.setCommands(commands);\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Environment variables\");\r\n        for (Map.Entry<String, String> envPair : envVars.entrySet()) {\r\n            log.debug(\"    \\\"{}\\\"=\\\"{}\\\"\", envPair.getKey(), envPair.getValue());\r\n        }\r\n    }\r\n    containerLaunchContext.setEnvironment(envVars);\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"Service Data size\");\r\n        for (Map.Entry<String, ByteBuffer> entry : serviceData.entrySet()) {\r\n            log.debug(\"\\\"{}\\\"=> {} bytes of data\", entry.getKey(), entry.getValue().array().length);\r\n        }\r\n    }\r\n    containerLaunchContext.setServiceData(serviceData);\r\n    dumpLocalResources();\r\n    containerLaunchContext.setLocalResources(localResources);\r\n    if (context.tokens != null) {\r\n        containerLaunchContext.setTokens(context.tokens.duplicate());\r\n    }\r\n    if (yarnDockerMode) {\r\n        Map<String, String> env = containerLaunchContext.getEnvironment();\r\n        env.put(\"YARN_CONTAINER_RUNTIME_TYPE\", \"docker\");\r\n        env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_IMAGE\", dockerImage);\r\n        if (ServiceUtils.isSet(dockerNetwork)) {\r\n            env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\", dockerNetwork);\r\n        }\r\n        env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_HOSTNAME\", dockerHostname);\r\n        if (runPrivilegedContainer) {\r\n            env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_PRIVILEGED_CONTAINER\", \"true\");\r\n        }\r\n        if (!mountPaths.isEmpty()) {\r\n            StringBuilder sb = new StringBuilder();\r\n            if (env.get(ENV_DOCKER_CONTAINER_MOUNTS) != null) {\r\n                sb.append(env.get(ENV_DOCKER_CONTAINER_MOUNTS));\r\n            }\r\n            for (Entry<String, String> mount : mountPaths.entrySet()) {\r\n                if (sb.length() > 0) {\r\n                    sb.append(\",\");\r\n                }\r\n                sb.append(mount.getKey()).append(\":\").append(mount.getValue()).append(\":ro\");\r\n            }\r\n            env.put(ENV_DOCKER_CONTAINER_MOUNTS, sb.toString());\r\n        }\r\n        log.info(\"yarn docker env var has been set {}\", containerLaunchContext.getEnvironment().toString());\r\n    }\r\n    return containerLaunchContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "setRetryContext",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setRetryContext(int maxRetries, int retryInterval, long failuresValidityInterval)\n{\r\n    ContainerRetryContext retryContext = ContainerRetryContext.newInstance(ContainerRetryPolicy.RETRY_ON_ALL_ERRORS, null, maxRetries, retryInterval, failuresValidityInterval);\r\n    containerLaunchContext.setContainerRetryContext(retryContext);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "dumpLocalResources",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void dumpLocalResources()\n{\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(\"{} resources: \", localResources.size());\r\n        for (Map.Entry<String, LocalResource> entry : localResources.entrySet()) {\r\n            String key = entry.getKey();\r\n            LocalResource val = entry.getValue();\r\n            log.debug(\"{} = {}\", key, ServiceUtils.stringify(val.getResource()));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "propagateUsernameInInsecureCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void propagateUsernameInInsecureCluster() throws IOException\n{\r\n    String userName = UserGroupInformation.getCurrentUser().getUserName();\r\n    envVars.put(YarnServiceConstants.HADOOP_USER_NAME, userName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "setClasspath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setClasspath(ClasspathConstructor classpath)\n{\r\n    setEnv(CLASSPATH, classpath.buildClasspath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "setEnv",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setEnv(String var, String value)\n{\r\n    Preconditions.checkArgument(var != null, \"null variable name\");\r\n    Preconditions.checkArgument(value != null, \"null value\");\r\n    envVars.put(var, value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "putEnv",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void putEnv(Map<String, String> map)\n{\r\n    envVars.putAll(map);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "setDockerImage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDockerImage(String dockerImage)\n{\r\n    this.dockerImage = dockerImage;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "setDockerNetwork",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDockerNetwork(String dockerNetwork)\n{\r\n    this.dockerNetwork = dockerNetwork;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "setDockerHostname",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDockerHostname(String dockerHostname)\n{\r\n    this.dockerHostname = dockerHostname;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "setRunPrivilegedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRunPrivilegedContainer(boolean runPrivilegedContainer)\n{\r\n    this.runPrivilegedContainer = runPrivilegedContainer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "getDockerImage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDockerImage()\n{\r\n    return dockerImage;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentEvent setContainerId(ContainerId containerId)\n{\r\n    this.containerId = containerId;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentEventType getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getDesired",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getDesired()\n{\r\n    return desired;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "setDesired",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentEvent setDesired(long desired)\n{\r\n    this.desired = desired;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "setContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentEvent setContainer(Container container)\n{\r\n    this.container = container;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentInstance getInstance()\n{\r\n    return instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "setInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentEvent setInstance(ComponentInstance instance)\n{\r\n    this.instance = instance;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getInstanceName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getInstanceName()\n{\r\n    return instanceName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "setInstanceName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentEvent setInstanceName(String instanceName)\n{\r\n    this.instanceName = instanceName;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerStatus getStatus()\n{\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "setStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentEvent setStatus(ContainerStatus status)\n{\r\n    this.status = status;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getTargetSpec",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "org.apache.hadoop.yarn.service.api.records.Component getTargetSpec()\n{\r\n    return targetSpec;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "setTargetSpec",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ComponentEvent setTargetSpec(org.apache.hadoop.yarn.service.api.records.Component targetSpec)\n{\r\n    this.targetSpec = Preconditions.checkNotNull(targetSpec);\r\n    return this;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getUpgradeVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUpgradeVersion()\n{\r\n    return upgradeVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "setUpgradeVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentEvent setUpgradeVersion(String upgradeVersion)\n{\r\n    this.upgradeVersion = upgradeVersion;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "getProperty",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getProperty(Map<String, String> props, String name, String defaultValue) throws IOException\n{\r\n    String value = props.get(name);\r\n    if (StringUtils.isEmpty(value)) {\r\n        if (defaultValue == null) {\r\n            throw new IOException(name + \" not specified\");\r\n        }\r\n        return defaultValue;\r\n    }\r\n    return value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "getPropertyInt",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int getPropertyInt(Map<String, String> props, String name, Integer defaultValue) throws IOException\n{\r\n    String value = props.get(name);\r\n    if (StringUtils.isEmpty(value)) {\r\n        if (defaultValue == null) {\r\n            throw new IOException(name + \" not specified\");\r\n        }\r\n        return defaultValue;\r\n    }\r\n    return Integer.parseInt(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "getPropertyBool",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean getPropertyBool(Map<String, String> props, String name, boolean defaultValue)\n{\r\n    String value = props.get(name);\r\n    if (StringUtils.isEmpty(value)) {\r\n        return defaultValue;\r\n    }\r\n    return Boolean.parseBoolean(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "ping",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ProbeStatus ping(ComponentInstance instance)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "handle",
  "errType" : [ "InvalidStateTransitionException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void handle(ServiceEvent event)\n{\r\n    writeLock.lock();\r\n    try {\r\n        State oldState = getState();\r\n        try {\r\n            stateMachine.doTransition(event.getType(), event);\r\n        } catch (InvalidStateTransitionException e) {\r\n            LOG.error(MessageFormat.format(\"[SERVICE]: Invalid event {1} at {2}.\", event.getType(), oldState), e);\r\n        }\r\n        if (oldState != getState()) {\r\n            LOG.info(\"[SERVICE] Transitioned from {} to {} on {} event.\", oldState, getState(), event.getType());\r\n        }\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "State getState()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.stateMachine.getCurrentState();\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "upgradeNextCompIfAny",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void upgradeNextCompIfAny(boolean cancelUpgrade)\n{\r\n    if (!componentsToUpgrade.isEmpty()) {\r\n        org.apache.hadoop.yarn.service.api.records.Component component = componentsToUpgrade.get(0);\r\n        serviceSpec.getComponent(component.getName()).getContainers().forEach(container -> {\r\n            ComponentInstanceEvent upgradeEvent = new ComponentInstanceEvent(ContainerId.fromString(container.getId()), !cancelUpgrade ? ComponentInstanceEventType.UPGRADE : ComponentInstanceEventType.CANCEL_UPGRADE);\r\n            LOG.info(\"Upgrade container {} {}\", container.getId(), cancelUpgrade);\r\n            dispatcher.getEventHandler().handle(upgradeEvent);\r\n        });\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "dispatchNeedUpgradeEvents",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void dispatchNeedUpgradeEvents(boolean cancelUpgrade)\n{\r\n    if (componentsToUpgrade != null) {\r\n        componentsToUpgrade.forEach(component -> {\r\n            ComponentEvent needUpgradeEvent = new ComponentEvent(component.getName(), !cancelUpgrade ? ComponentEventType.UPGRADE : ComponentEventType.CANCEL_UPGRADE).setTargetSpec(component).setUpgradeVersion(upgradeVersion);\r\n            LOG.info(\"Upgrade component {} {}\", component.getName(), cancelUpgrade);\r\n            context.scheduler.getDispatcher().getEventHandler().handle(needUpgradeEvent);\r\n        });\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "finalizeUpgrade",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "boolean finalizeUpgrade(boolean cancelUpgrade)\n{\r\n    if (!cancelUpgrade) {\r\n        try {\r\n            Service targetSpec = ServiceApiUtil.loadServiceUpgrade(fs, getName(), upgradeVersion);\r\n            targetSpec.setId(serviceSpec.getId());\r\n            targetSpec.setState(ServiceState.STABLE);\r\n            Map<String, Component> allComps = scheduler.getAllComponents();\r\n            targetSpec.getComponents().forEach(compSpec -> {\r\n                Component comp = allComps.get(compSpec.getName());\r\n                compSpec.setState(comp.getComponentSpec().getState());\r\n            });\r\n            jsonSerDeser.save(fs.getFileSystem(), ServiceApiUtil.getServiceJsonPath(fs, getName()), targetSpec, true);\r\n        } catch (IOException e) {\r\n            LOG.error(\"Upgrade did not complete because unable to re-write the\" + \" service definition\", e);\r\n            return false;\r\n        }\r\n    }\r\n    try {\r\n        String upgradeVersionToDel = cancelUpgrade ? cancelledVersion : upgradeVersion;\r\n        LOG.info(\"[SERVICE]: delete upgrade dir version {}\", upgradeVersionToDel);\r\n        fs.deleteClusterUpgradeDir(getName(), upgradeVersionToDel);\r\n        for (String comp : compsAffectedByUpgrade) {\r\n            String compDirVersionToDel = cancelUpgrade ? cancelledVersion : serviceSpec.getVersion();\r\n            LOG.info(\"[SERVICE]: delete {} dir version {}\", comp, compDirVersionToDel);\r\n            fs.deleteComponentDir(compDirVersionToDel, comp);\r\n        }\r\n        if (cancelUpgrade) {\r\n            fs.deleteComponentsVersionDirIfEmpty(cancelledVersion);\r\n        } else {\r\n            fs.deleteComponentsVersionDirIfEmpty(serviceSpec.getVersion());\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Unable to delete upgrade definition for service {} \" + \"version {}\", getName(), upgradeVersion);\r\n    }\r\n    setServiceState(ServiceState.STABLE);\r\n    serviceSpec.setVersion(upgradeVersion);\r\n    upgradeVersion = null;\r\n    cancelledVersion = null;\r\n    compsAffectedByUpgrade.clear();\r\n    return true;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "checkIfStable",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ServiceState checkIfStable(Service service)\n{\r\n    for (org.apache.hadoop.yarn.service.api.records.Component comp : service.getComponents()) {\r\n        if (!comp.getState().equals(org.apache.hadoop.yarn.service.api.records.ComponentState.STABLE)) {\r\n            return service.getState();\r\n        }\r\n    }\r\n    return ServiceState.STABLE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "checkAndUpdateServiceState",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkAndUpdateServiceState()\n{\r\n    writeLock.lock();\r\n    try {\r\n        if (!getState().equals(State.UPGRADING)) {\r\n            ServiceMaster.checkAndUpdateServiceState(this.scheduler);\r\n        }\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "processUpgradeRequest",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void processUpgradeRequest(String upgradeVersion, boolean autoFinalize, boolean expressUpgrade) throws IOException\n{\r\n    Service targetSpec = ServiceApiUtil.loadServiceUpgrade(context.fs, context.service.getName(), upgradeVersion);\r\n    List<org.apache.hadoop.yarn.service.api.records.Component> compsNeedUpgradeList = resolveCompsToUpgrade(context.service, targetSpec);\r\n    ServiceEvent event = new ServiceEvent(ServiceEventType.UPGRADE).setVersion(upgradeVersion).setAutoFinalize(autoFinalize).setExpressUpgrade(expressUpgrade);\r\n    if (expressUpgrade) {\r\n        Map<String, org.apache.hadoop.yarn.service.api.records.Component> compsNeedUpgradeByName = new HashMap<>();\r\n        if (compsNeedUpgradeList != null) {\r\n            compsNeedUpgradeList.forEach(component -> compsNeedUpgradeByName.put(component.getName(), component));\r\n        }\r\n        List<String> resolvedComps = ServiceApiUtil.resolveCompsDependency(targetSpec);\r\n        List<org.apache.hadoop.yarn.service.api.records.Component> orderedCompUpgrade = new LinkedList<>();\r\n        resolvedComps.forEach(compName -> {\r\n            org.apache.hadoop.yarn.service.api.records.Component component = compsNeedUpgradeByName.get(compName);\r\n            if (component != null) {\r\n                orderedCompUpgrade.add(component);\r\n            }\r\n        });\r\n        event.setCompsToUpgrade(orderedCompUpgrade);\r\n    } else {\r\n        event.setCompsToUpgrade(compsNeedUpgradeList);\r\n    }\r\n    context.scheduler.getDispatcher().getEventHandler().handle(event);\r\n    if (autoFinalize && (compsNeedUpgradeList == null || compsNeedUpgradeList.isEmpty())) {\r\n        context.scheduler.getDispatcher().getEventHandler().handle(new ServiceEvent(ServiceEventType.CHECK_STABLE));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "resolveCompsToUpgrade",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<org.apache.hadoop.yarn.service.api.records.Component> resolveCompsToUpgrade(Service sourceSpec, Service targetSpec)\n{\r\n    List<org.apache.hadoop.yarn.service.api.records.Component> compsNeedUpgradeList = componentsFinder.findTargetComponentSpecs(sourceSpec, targetSpec);\r\n    if (compsNeedUpgradeList != null) {\r\n        compsNeedUpgradeList.removeIf(component -> {\r\n            org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum restartPolicy = component.getRestartPolicy();\r\n            final ComponentRestartPolicy restartPolicyHandler = Component.getRestartPolicyHandler(restartPolicy);\r\n            if (!restartPolicyHandler.allowUpgrades()) {\r\n                LOG.info(\"The component {} has a restart policy that doesnt \" + \"allow upgrades {} \", component.getName(), component.getRestartPolicy().toString());\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n    }\r\n    return compsNeedUpgradeList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setServiceState",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setServiceState(org.apache.hadoop.yarn.service.api.records.ServiceState state)\n{\r\n    org.apache.hadoop.yarn.service.api.records.ServiceState curState = serviceSpec.getState();\r\n    if (!curState.equals(state)) {\r\n        serviceSpec.setState(state);\r\n        LOG.info(\"[SERVICE] spec state changed from {} -> {}\", curState, state);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getName()\n{\r\n    return serviceSpec.getName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getServiceSpec",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service getServiceSpec()\n{\r\n    return serviceSpec;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\exceptions",
  "methodName" : "getExitCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getExitCode()\n{\r\n    return exitCode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "setPortRange",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void setPortRange(String input) throws BadConfigException\n{\r\n    Set<Integer> inputPorts = new TreeSet<Integer>();\r\n    String[] ranges = input.split(\",\");\r\n    for (String range : ranges) {\r\n        if (range.trim().isEmpty()) {\r\n            continue;\r\n        }\r\n        Matcher m = SINGLE_NUMBER.matcher(range.trim());\r\n        if (m.find()) {\r\n            inputPorts.add(Integer.parseInt(m.group()));\r\n            continue;\r\n        }\r\n        m = NUMBER_RANGE.matcher(range.trim());\r\n        if (m.find()) {\r\n            String[] boundaryValues = m.group(0).split(\"-\");\r\n            int start = Integer.parseInt(boundaryValues[0].trim());\r\n            int end = Integer.parseInt(boundaryValues[1].trim());\r\n            if (end < start) {\r\n                throw new BadConfigException(\"End of port range is before start: \" + range + \" in input: \" + input);\r\n            }\r\n            for (int i = start; i < end + 1; i++) {\r\n                inputPorts.add(i);\r\n            }\r\n            continue;\r\n        }\r\n        throw new BadConfigException(\"Bad port range: \" + range + \" in input: \" + input);\r\n    }\r\n    if (inputPorts.size() == 0) {\r\n        throw new BadConfigException(\"No ports found in range: \" + input);\r\n    }\r\n    this.remainingPortsToCheck = new ArrayList<Integer>(inputPorts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getRemainingPortsToCheck",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Integer> getRemainingPortsToCheck()\n{\r\n    return remainingPortsToCheck;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getAvailablePort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getAvailablePort() throws SliderException, IOException\n{\r\n    if (remainingPortsToCheck != null) {\r\n        return getAvailablePortViaPortArray();\r\n    } else {\r\n        return ServiceUtils.getOpenPort();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getAvailablePortViaPortArray",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int getAvailablePortViaPortArray() throws SliderException\n{\r\n    boolean found = false;\r\n    int availablePort = -1;\r\n    Iterator<Integer> portsToCheck = this.remainingPortsToCheck.iterator();\r\n    while (portsToCheck.hasNext() && !found) {\r\n        int portToCheck = portsToCheck.next();\r\n        found = ServiceUtils.isPortAvailable(portToCheck);\r\n        if (found) {\r\n            availablePort = portToCheck;\r\n            portsToCheck.remove();\r\n        }\r\n    }\r\n    if (availablePort < 0) {\r\n        throw new SliderException(SliderExitCodes.EXIT_BAD_CONFIGURATION, \"No available ports found in configured range {}\", remainingPortsToCheck);\r\n    }\r\n    return availablePort;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "DefaultProbe create() throws IOException\n{\r\n    return new DefaultProbe(Collections.emptyMap());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "DefaultProbe create(Map<String, String> props) throws IOException\n{\r\n    return new DefaultProbe(props);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "ping",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ProbeStatus ping(ComponentInstance instance)\n{\r\n    ProbeStatus status = new ProbeStatus();\r\n    ContainerStatus containerStatus = instance.getContainerStatus();\r\n    if (containerStatus == null || ServiceUtils.isEmpty(containerStatus.getIPs())) {\r\n        status.fail(this, new IOException(instance.getCompInstanceName() + \": IP is not available yet\"));\r\n        return status;\r\n    }\r\n    String hostname = instance.getHostname();\r\n    if (dnsCheckEnabled && !ServiceRegistryUtils.registryDNSLookupExists(dnsAddress, hostname)) {\r\n        status.fail(this, new IOException(instance.getCompInstanceName() + \": DNS checking is enabled, but \" + \"lookup for \" + hostname + \" is not available yet\"));\r\n        return status;\r\n    }\r\n    status.succeed(this);\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "isDnsCheckEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isDnsCheckEnabled()\n{\r\n    return dnsCheckEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getId()\n{\r\n    return Id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getCompName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getCompName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getCompInstanceName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getCompInstanceName()\n{\r\n    return getCompName() + \"-\" + getId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "setContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainerId(ContainerId containerId)\n{\r\n    this.containerId = containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    if (containerId == null) {\r\n        return \"[COMPINSTANCE \" + getCompInstanceName() + \"]\";\r\n    } else {\r\n        return \"[COMPINSTANCE \" + getCompInstanceName() + \" : \" + containerId + \"]\";\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    ComponentInstanceId that = (ComponentInstanceId) o;\r\n    if (getId() != that.getId())\r\n        return false;\r\n    return getCompName() != null ? getCompName().equals(that.getCompName()) : that.getCompName() == null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int hashCode()\n{\r\n    int result = (int) (getId() ^ (getId() >>> 32));\r\n    result = 31 * result + (getCompName() != null ? getCompName().hashCode() : 0);\r\n    return result;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int compareTo(ComponentInstanceId to)\n{\r\n    int delta = this.getCompName().compareTo(to.getCompName());\r\n    if (delta == 0) {\r\n        return Long.compare(this.getId(), to.getId());\r\n    } else if (delta < 0) {\r\n        return -1;\r\n    } else {\r\n        return 1;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "getTimestamp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getTimestamp()\n{\r\n    return timestamp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "setTimestamp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setTimestamp(long timestamp)\n{\r\n    this.timestamp = timestamp;\r\n    timestampText = new Date(timestamp).toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "isSuccess",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isSuccess()\n{\r\n    return success;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "setSuccess",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSuccess(boolean success)\n{\r\n    this.success = success;\r\n    realOutcome = success;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "getTimestampText",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTimestampText()\n{\r\n    return timestampText;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "getRealOutcome",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getRealOutcome()\n{\r\n    return realOutcome;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "getMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getMessage()\n{\r\n    return message;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "setMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMessage(String message)\n{\r\n    this.message = message;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "getThrown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Throwable getThrown()\n{\r\n    return thrown;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "setThrown",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setThrown(Throwable thrown)\n{\r\n    this.thrown = thrown;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "getOriginator",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Probe getOriginator()\n{\r\n    return originator;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "succeed",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void succeed(Probe probe)\n{\r\n    finish(probe, true, probe.getName(), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "fail",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void fail(Probe probe, Throwable thrown)\n{\r\n    finish(probe, false, \"Failure in \" + probe, thrown);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "finish",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void finish(Probe probe, boolean succeeded, String text, Throwable thrown)\n{\r\n    setTimestamp(System.currentTimeMillis());\r\n    setSuccess(succeeded);\r\n    originator = probe;\r\n    message = text;\r\n    this.thrown = thrown;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String toString()\n{\r\n    LogEntryBuilder builder = new LogEntryBuilder(\"Probe Status\");\r\n    builder.elt(\"time\", timestampText).elt(\"outcome\", (success ? \"success\" : \"failure\"));\r\n    if (success != realOutcome) {\r\n        builder.elt(\"originaloutcome\", (realOutcome ? \"success\" : \"failure\"));\r\n    }\r\n    builder.elt(\"message\", message);\r\n    if (thrown != null) {\r\n        builder.elt(\"exception\", thrown);\r\n    }\r\n    return builder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "markAsSuccessful",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void markAsSuccessful()\n{\r\n    success = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString(SerializedApplicationReport instance) throws JsonProcessingException\n{\r\n    synchronized (staticinstance) {\r\n        return staticinstance.toJson(instance);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "code",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Error code(Integer code)\n{\r\n    this.code = code;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Integer getCode()\n{\r\n    return code;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCode(Integer code)\n{\r\n    this.code = code;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "message",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Error message(String message)\n{\r\n    this.message = message;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getMessage()\n{\r\n    return message;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setMessage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMessage(String message)\n{\r\n    this.message = message;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "fields",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Error fields(String fields)\n{\r\n    this.fields = fields;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getFields",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFields()\n{\r\n    return fields;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setFields",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFields(String fields)\n{\r\n    this.fields = fields;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    Error error = (Error) o;\r\n    return Objects.equals(this.code, error.code) && Objects.equals(this.message, error.message) && Objects.equals(this.fields, error.fields);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(code, message, fields);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Error {\\n\").append(\"    code: \").append(toIndentedString(code)).append(\"\\n\").append(\"    message: \").append(toIndentedString(message)).append(\"\\n\").append(\"    fields: \").append(toIndentedString(fields)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "type",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReadinessCheck type(TypeEnum type)\n{\r\n    this.type = type;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TypeEnum getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setType(TypeEnum type)\n{\r\n    this.type = type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "properties",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReadinessCheck properties(Map<String, String> properties)\n{\r\n    this.properties = properties;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "putPropsItem",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReadinessCheck putPropsItem(String key, String propsItem)\n{\r\n    this.properties.put(key, propsItem);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getProperties",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, String> getProperties()\n{\r\n    return properties;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setProperties",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setProperties(Map<String, String> properties)\n{\r\n    this.properties = properties;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "artifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReadinessCheck artifact(Artifact artifact)\n{\r\n    this.artifact = artifact;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getArtifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Artifact getArtifact()\n{\r\n    return artifact;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setArtifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setArtifact(Artifact artifact)\n{\r\n    this.artifact = artifact;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    ReadinessCheck readinessCheck = (ReadinessCheck) o;\r\n    return Objects.equals(this.type, readinessCheck.type) && Objects.equals(this.properties, readinessCheck.properties) && Objects.equals(this.artifact, readinessCheck.artifact);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(type, properties, artifact);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class ReadinessCheck {\\n\").append(\"    type: \").append(toIndentedString(type)).append(\"\\n\").append(\"    properties: \").append(toIndentedString(properties)).append(\"\\n\").append(\"    artifact: \").append(toIndentedString(artifact)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "incNodeFailure",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void incNodeFailure(String host)\n{\r\n    int num = 0;\r\n    if (failureCountPerNode.containsKey(host)) {\r\n        num = failureCountPerNode.get(host);\r\n    }\r\n    num++;\r\n    failureCountPerNode.put(host, num);\r\n    if (num > maxFailurePerNode && !blackListedNodes.contains(host)) {\r\n        List<String> blacklists = new ArrayList<>();\r\n        blacklists.add(host);\r\n        blackListedNodes.add(host);\r\n        context.scheduler.getAmRMClient().updateBlacklist(blacklists, null);\r\n        LOG.info(\"[COMPONENT {}]: Failed {} times on this host, blacklisted {}.\" + \" Current list of blacklisted nodes: {}\", component.getName(), num, host, blackListedNodes);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "resetContainerFailures",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void resetContainerFailures()\n{\r\n    failureCountPerNode.clear();\r\n    context.scheduler.getAmRMClient().updateBlacklist(null, new ArrayList<>(blackListedNodes));\r\n    LOG.info(\"[COMPONENT {}]: Clearing blacklisted nodes {} \", component.getName(), blackListedNodes);\r\n    blackListedNodes.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "principalName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "KerberosPrincipal principalName(String principalName)\n{\r\n    this.principalName = principalName;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getPrincipalName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPrincipalName()\n{\r\n    return principalName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setPrincipalName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPrincipalName(String principalName)\n{\r\n    this.principalName = principalName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "keytab",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "KerberosPrincipal keytab(String keytab)\n{\r\n    this.keytab = keytab;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getKeytab",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getKeytab()\n{\r\n    return keytab;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setKeytab",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setKeytab(String keytab)\n{\r\n    this.keytab = keytab;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    KerberosPrincipal kerberosPrincipal = (KerberosPrincipal) o;\r\n    return Objects.equals(this.principalName, kerberosPrincipal.principalName) && Objects.equals(this.keytab, kerberosPrincipal.keytab);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(principalName, keytab);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class KerberosPrincipal {\\n\").append(\"    principalName: \").append(toIndentedString(principalName)).append(\"\\n\").append(\"    keytab: \").append(toIndentedString(keytab)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\defaultImpl",
  "methodName" : "processArtifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void processArtifact(AbstractLauncher launcher, ComponentInstance compInstance, SliderFileSystem fileSystem, Service service, ContainerLaunchService.ComponentLaunchContext compLaunchCtx) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    executorService = Executors.newCachedThreadPool();\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (executorService != null) {\r\n        executorService.shutdownNow();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "launchCompInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Future<ProviderService.ResolvedLaunchParams> launchCompInstance(Service service, ComponentInstance instance, Container container, ComponentLaunchContext componentLaunchContext)\n{\r\n    ContainerLauncher launcher = new ContainerLauncher(service, instance, container, componentLaunchContext, false);\r\n    return executorService.submit(launcher);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "reInitCompInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Future<ProviderService.ResolvedLaunchParams> reInitCompInstance(Service service, ComponentInstance instance, Container container, ComponentLaunchContext componentLaunchContext)\n{\r\n    ContainerLauncher reInitializer = new ContainerLauncher(service, instance, container, componentLaunchContext, true);\r\n    return executorService.submit(reInitializer);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceEventType getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVersion()\n{\r\n    return version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceEvent setVersion(String version)\n{\r\n    this.version = version;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "isAutoFinalize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isAutoFinalize()\n{\r\n    return autoFinalize;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setAutoFinalize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceEvent setAutoFinalize(boolean autoFinalize)\n{\r\n    this.autoFinalize = autoFinalize;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "isExpressUpgrade",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isExpressUpgrade()\n{\r\n    return expressUpgrade;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setExpressUpgrade",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceEvent setExpressUpgrade(boolean expressUpgrade)\n{\r\n    this.expressUpgrade = expressUpgrade;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getCompsToUpgrade",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Component> getCompsToUpgrade()\n{\r\n    return compsToUpgrade;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setCompsToUpgrade",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceEvent setCompsToUpgrade(List<Component> compsToUpgrade)\n{\r\n    this.compsToUpgrade = compsToUpgrade;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\registry",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\registry",
  "methodName" : "setSelfRegistration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSelfRegistration(ServiceRecord selfRegistration)\n{\r\n    this.selfRegistration = selfRegistration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\registry",
  "methodName" : "getSelfRegistrationPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getSelfRegistrationPath()\n{\r\n    return selfRegistrationPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\registry",
  "methodName" : "getAbsoluteSelfRegistrationPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getAbsoluteSelfRegistrationPath()\n{\r\n    if (selfRegistrationPath == null) {\r\n        return null;\r\n    }\r\n    String root = registryOperations.getConfig().getTrimmed(RegistryConstants.KEY_REGISTRY_ZK_ROOT, RegistryConstants.DEFAULT_ZK_REGISTRY_ROOT);\r\n    return RegistryPathUtils.join(root, selfRegistrationPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\registry",
  "methodName" : "putComponent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void putComponent(String componentName, ServiceRecord record) throws IOException\n{\r\n    putComponent(serviceClass, instanceName, componentName, record);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\registry",
  "methodName" : "putComponent",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void putComponent(String serviceClass, String serviceName, String componentName, ServiceRecord record) throws IOException\n{\r\n    String path = RegistryUtils.componentPath(user, serviceClass, serviceName, componentName);\r\n    String parentPath = RegistryPathUtils.parentOf(path);\r\n    if (!registryOperations.exists(parentPath)) {\r\n        registryOperations.mknode(parentPath, true);\r\n    }\r\n    registryOperations.bind(path, record, BindFlags.OVERWRITE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\registry",
  "methodName" : "getComponent",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ServiceRecord getComponent(String componentName) throws IOException\n{\r\n    String path = RegistryUtils.componentPath(user, serviceClass, instanceName, componentName);\r\n    LOG.info(\"Resolving path {}\", path);\r\n    return registryOperations.resolve(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\registry",
  "methodName" : "listComponents",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<String> listComponents() throws IOException\n{\r\n    String path = RegistryUtils.componentListPath(user, serviceClass, instanceName);\r\n    return registryOperations.list(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\registry",
  "methodName" : "putService",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String putService(String username, String serviceClass, String serviceName, ServiceRecord record, boolean deleteTreeFirst) throws IOException\n{\r\n    String path = RegistryUtils.servicePath(username, serviceClass, serviceName);\r\n    if (deleteTreeFirst) {\r\n        registryOperations.delete(path, true);\r\n    }\r\n    registryOperations.mknode(RegistryPathUtils.parentOf(path), true);\r\n    registryOperations.bind(path, record, BindFlags.OVERWRITE);\r\n    return path;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\registry",
  "methodName" : "registerSelf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String registerSelf(ServiceRecord record, boolean deleteTreeFirst) throws IOException\n{\r\n    selfRegistrationPath = putService(user, serviceClass, instanceName, record, deleteTreeFirst);\r\n    setSelfRegistration(record);\r\n    return selfRegistrationPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\registry",
  "methodName" : "deleteComponent",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void deleteComponent(ComponentInstanceId instanceId, String containerId) throws IOException\n{\r\n    String path = RegistryUtils.componentPath(user, serviceClass, instanceName, containerId);\r\n    LOG.info(instanceId + \": Deleting registry path \" + path);\r\n    registryOperations.delete(path, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\registry",
  "methodName" : "deleteChildren",
  "errType" : [ "PathNotFoundException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void deleteChildren(String path, boolean recursive) throws IOException\n{\r\n    List<String> childNames = null;\r\n    try {\r\n        childNames = registryOperations.list(path);\r\n    } catch (PathNotFoundException e) {\r\n        return;\r\n    }\r\n    for (String childName : childNames) {\r\n        String child = join(path, childName);\r\n        registryOperations.delete(child, recursive);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "replaceProps",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String replaceProps(Map<String, String> config, String content)\n{\r\n    Map<String, String> tokens = new HashMap<>();\r\n    for (Entry<String, String> entry : config.entrySet()) {\r\n        tokens.put(\"${\" + entry.getKey() + \"}\", entry.getValue());\r\n        tokens.put(\"{{\" + entry.getKey() + \"}}\", entry.getValue());\r\n    }\r\n    String value = content;\r\n    for (Map.Entry<String, String> token : tokens.entrySet()) {\r\n        value = value.replaceAll(Pattern.quote(token.getKey()), Matcher.quoteReplacement(token.getValue()));\r\n    }\r\n    return value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getMetrics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void getMetrics(MetricsCollector collector, boolean all)\n{\r\n    registry.snapshot(collector.addRecord(registry.info()), all);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "register",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ServiceMetrics register(String name, String description)\n{\r\n    ServiceMetrics metrics = new ServiceMetrics(info(name, description));\r\n    DefaultMetricsSystem.instance().register(name, description, metrics);\r\n    return metrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "tag",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tag(String name, String description, String value)\n{\r\n    registry.tag(name, description, value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "String toString()\n{\r\n    return \"ServiceMetrics{\" + \"containersRequested=\" + containersRequested.value() + \", containersRunning=\" + containersRunning.value() + \", containersDesired=\" + containersDesired.value() + \", containersSucceeded=\" + containersSucceeded.value() + \", containersFailed=\" + containersFailed.value() + \", containersPreempted=\" + containersPreempted.value() + \", surplusContainers=\" + surplusContainers.value() + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerId getContainerId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerStatus getStatus()\n{\r\n    return this.status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "setStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentInstanceEvent setStatus(ContainerStatus status)\n{\r\n    this.status = status;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "setShouldDestroy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setShouldDestroy()\n{\r\n    shouldDestroy = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "shouldDestroy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean shouldDestroy()\n{\r\n    return shouldDestroy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "registryPathForInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String registryPathForInstance(String instanceName)\n{\r\n    return RegistryUtils.servicePath(RegistryUtils.currentUser(), YarnServiceConstants.APP_TYPE, instanceName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "mkServiceHomePath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String mkServiceHomePath(String username, String serviceName)\n{\r\n    return mkUserHomePath(username) + \"/\" + serviceName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "mkUserHomePath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String mkUserHomePath(String username)\n{\r\n    return SVC_USERS + \"/\" + username;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "registryDNSLookupExists",
  "errType" : [ "UnknownHostException", "NameNotFoundException", "NamingException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean registryDNSLookupExists(String addr, String name)\n{\r\n    if (addr == null) {\r\n        try {\r\n            InetAddress.getByName(name);\r\n            return true;\r\n        } catch (UnknownHostException e) {\r\n            return false;\r\n        }\r\n    }\r\n    String dnsURI = String.format(\"dns://%s\", addr);\r\n    Hashtable<String, Object> env = new Hashtable<>();\r\n    env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.dns.DnsContextFactory\");\r\n    env.put(Context.PROVIDER_URL, dnsURI);\r\n    try {\r\n        DirContext ictx = new InitialDirContext(env);\r\n        Attributes attrs = ictx.getAttributes(name, new String[] { \"A\" });\r\n        if (attrs.size() > 0) {\r\n            return true;\r\n        }\r\n    } catch (NameNotFoundException e) {\r\n    } catch (NamingException e) {\r\n        LOG.error(\"Got exception when performing DNS lookup\", e);\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "toPlural",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toPlural(int val)\n{\r\n    return val != 1 ? \"s\" : \"\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "millisToHumanTime",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String millisToHumanTime(long milliseconds)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    Formatter formatter = new Formatter(sb, Locale.US);\r\n    long s = Math.abs(milliseconds / 1000);\r\n    long m = Math.abs(milliseconds % 1000);\r\n    if (milliseconds > 0) {\r\n        formatter.format(\"%d.%03ds\", s, m);\r\n    } else if (milliseconds == 0) {\r\n        formatter.format(\"0\");\r\n    } else {\r\n        formatter.format(\"-%d.%03ds\", s, m);\r\n    }\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "getProbe",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Probe getProbe(ReadinessCheck readinessCheck)\n{\r\n    try {\r\n        if (readinessCheck == null) {\r\n            return DefaultProbe.create();\r\n        }\r\n        if (readinessCheck.getType() == null) {\r\n            return DefaultProbe.create(readinessCheck.getProperties());\r\n        }\r\n        switch(readinessCheck.getType()) {\r\n            case HTTP:\r\n                return HttpProbe.create(readinessCheck.getProperties());\r\n            case PORT:\r\n                return PortProbe.create(readinessCheck.getProperties());\r\n            default:\r\n                return DefaultProbe.create(readinessCheck.getProperties());\r\n        }\r\n    } catch (Throwable t) {\r\n        throw new IllegalArgumentException(\"Error creating readiness check \" + t);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "addProviderJar",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean addProviderJar(Map<String, LocalResource> providerResources, Class providerClass, String jarName, SliderFileSystem sliderFileSystem, Path tempPath, String libdir, boolean miniClusterTestRun) throws IOException, SliderException\n{\r\n    try {\r\n        ServiceUtils.putJar(providerResources, sliderFileSystem, providerClass, tempPath, libdir, jarName);\r\n        return true;\r\n    } catch (FileNotFoundException e) {\r\n        if (miniClusterTestRun) {\r\n            return false;\r\n        } else {\r\n            throw e;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "addAllDependencyJars",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addAllDependencyJars(Map<String, LocalResource> providerResources, SliderFileSystem sliderFileSystem, Path tempPath, String libDir, String libLocalSrcDir) throws IOException, SliderException\n{\r\n    if (ServiceUtils.isSet(libLocalSrcDir)) {\r\n        File file = new File(libLocalSrcDir);\r\n        if (!file.exists() || !file.isDirectory()) {\r\n            throw new BadCommandArgumentsException(\"Supplied lib src dir %s is not valid\", libLocalSrcDir);\r\n        }\r\n    }\r\n    ServiceUtils.putAllJars(providerResources, sliderFileSystem, tempPath, libDir, libLocalSrcDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "substituteStrWithTokens",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String substituteStrWithTokens(String content, Map<String, String> tokensForSubstitution)\n{\r\n    for (Map.Entry<String, String> token : tokensForSubstitution.entrySet()) {\r\n        content = content.replaceAll(Pattern.quote(token.getKey()), token.getValue());\r\n    }\r\n    return content;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "replaceSpacesWithDelimiter",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String replaceSpacesWithDelimiter(String content, String delimiter)\n{\r\n    List<String> parts = new ArrayList<String>();\r\n    Matcher m = Pattern.compile(\"([^\\\"]\\\\S*|\\\".+?\\\")\\\\s*\").matcher(content);\r\n    while (m.find()) {\r\n        String part = m.group(1);\r\n        if (part.startsWith(\"\\\"\") && part.endsWith(\"\\\"\")) {\r\n            part = part.replaceAll(\"^\\\"|\\\"$\", \"\");\r\n        }\r\n        parts.add(part);\r\n    }\r\n    return String.join(delimiter, parts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "substituteMapWithTokens",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void substituteMapWithTokens(Map<String, String> configs, Map<String, String> tokenMap)\n{\r\n    for (Map.Entry<String, String> entry : configs.entrySet()) {\r\n        String value = entry.getValue();\r\n        if (tokenMap != null) {\r\n            for (Map.Entry<String, String> token : tokenMap.entrySet()) {\r\n                value = value.replaceAll(Pattern.quote(token.getKey()), token.getValue());\r\n            }\r\n        }\r\n        entry.setValue(value);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "initCompInstanceDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Path initCompInstanceDir(SliderFileSystem fs, ContainerLaunchService.ComponentLaunchContext compLaunchContext, ComponentInstance instance)\n{\r\n    Path compDir = fs.getComponentDir(compLaunchContext.getServiceVersion(), compLaunchContext.getName());\r\n    Path compInstanceDir = new Path(compDir, instance.getCompInstanceName());\r\n    instance.setCompInstanceDir(compInstanceDir);\r\n    return compInstanceDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "initCompPublicResourceDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path initCompPublicResourceDir(SliderFileSystem fs, ContainerLaunchService.ComponentLaunchContext compLaunchContext, ComponentInstance instance)\n{\r\n    Path compDir = fs.getComponentPublicResourceDir(compLaunchContext.getServiceVersion(), compLaunchContext.getName());\r\n    Path compPublicResourceDir = new Path(compDir, instance.getCompInstanceName());\r\n    return compPublicResourceDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "createConfigFileAndAddLocalResource",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void createConfigFileAndAddLocalResource(AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService.ComponentLaunchContext compLaunchContext, Map<String, String> tokensForSubstitution, ComponentInstance instance, ServiceContext context, ProviderService.ResolvedLaunchParams resolvedParams) throws IOException\n{\r\n    Path compInstanceDir = initCompInstanceDir(fs, compLaunchContext, instance);\r\n    if (!fs.getFileSystem().exists(compInstanceDir)) {\r\n        log.info(\"{} version {} : Creating dir on hdfs: {}\", instance.getCompInstanceId(), compLaunchContext.getServiceVersion(), compInstanceDir);\r\n        fs.getFileSystem().mkdirs(compInstanceDir, new FsPermission(FsAction.ALL, FsAction.NONE, FsAction.NONE));\r\n    } else {\r\n        log.info(\"Component instance conf dir already exists: \" + compInstanceDir);\r\n    }\r\n    Path compPublicResourceDir = initCompPublicResourceDir(fs, compLaunchContext, instance);\r\n    if (!fs.getFileSystem().exists(compPublicResourceDir)) {\r\n        log.info(\"{} version {} : Creating Public Resource dir on hdfs: {}\", instance.getCompInstanceId(), compLaunchContext.getServiceVersion(), compPublicResourceDir);\r\n        fs.getFileSystem().mkdirs(compPublicResourceDir, new FsPermission(FsAction.ALL, FsAction.READ_EXECUTE, FsAction.EXECUTE));\r\n    } else {\r\n        log.info(\"Component instance public resource dir already exists: \" + compPublicResourceDir);\r\n    }\r\n    log.debug(\"Tokens substitution for component instance: {}{}{}\" + instance.getCompInstanceName(), System.lineSeparator(), tokensForSubstitution);\r\n    for (ConfigFile originalFile : compLaunchContext.getConfiguration().getFiles()) {\r\n        if (isStaticFile(originalFile)) {\r\n            continue;\r\n        }\r\n        ConfigFile configFile = originalFile.copy();\r\n        String fileName = new Path(configFile.getDestFile()).getName();\r\n        for (Map.Entry<String, String> token : tokensForSubstitution.entrySet()) {\r\n            configFile.setDestFile(configFile.getDestFile().replaceAll(Pattern.quote(token.getKey()), token.getValue()));\r\n        }\r\n        Path remoteFile = null;\r\n        LocalResourceVisibility visibility = configFile.getVisibility();\r\n        if (visibility != null && visibility.equals(LocalResourceVisibility.PUBLIC)) {\r\n            remoteFile = new Path(compPublicResourceDir, fileName);\r\n        } else {\r\n            remoteFile = new Path(compInstanceDir, fileName);\r\n        }\r\n        if (!fs.getFileSystem().exists(remoteFile)) {\r\n            log.info(\"Saving config file on hdfs for component \" + instance.getCompInstanceName() + \": \" + configFile);\r\n            if (configFile.getSrcFile() != null) {\r\n                switch(configFile.getType()) {\r\n                    case HADOOP_XML:\r\n                        resolveHadoopXmlTemplateAndSaveOnHdfs(fs.getFileSystem(), tokensForSubstitution, configFile, remoteFile, context);\r\n                        break;\r\n                    case TEMPLATE:\r\n                        resolvePlainTemplateAndSaveOnHdfs(fs.getFileSystem(), tokensForSubstitution, configFile, remoteFile, context);\r\n                        break;\r\n                    default:\r\n                        log.info(\"Not supporting loading src_file for \" + configFile);\r\n                        break;\r\n                }\r\n            } else {\r\n                resolvePropsInConfigFileAndSaveOnHdfs(fs, tokensForSubstitution, instance, configFile, fileName, remoteFile);\r\n            }\r\n        }\r\n        LocalResource configResource = fs.createAmResource(remoteFile, LocalResourceType.FILE, configFile.getVisibility());\r\n        Path destFile = new Path(configFile.getDestFile());\r\n        String symlink = APP_CONF_DIR + \"/\" + fileName;\r\n        addLocalResource(launcher, symlink, configResource, destFile, resolvedParams);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "handleStaticFilesForLocalization",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void handleStaticFilesForLocalization(AbstractLauncher launcher, SliderFileSystem fs, ContainerLaunchService.ComponentLaunchContext componentLaunchCtx, ProviderService.ResolvedLaunchParams resolvedParams) throws IOException\n{\r\n    for (ConfigFile staticFile : componentLaunchCtx.getConfiguration().getFiles()) {\r\n        if (!isStaticFile(staticFile)) {\r\n            continue;\r\n        }\r\n        if (staticFile.getSrcFile() == null) {\r\n            throw new IOException(\"srcFile is null, please double check.\");\r\n        }\r\n        Path sourceFile = new Path(staticFile.getSrcFile());\r\n        if (!fs.getFileSystem().exists(sourceFile)) {\r\n            throw new IOException(\"srcFile=\" + sourceFile + \" doesn't exist, please double check.\");\r\n        }\r\n        FileStatus fileStatus = fs.getFileSystem().getFileStatus(sourceFile);\r\n        if (fileStatus.isDirectory()) {\r\n            throw new IOException(\"srcFile=\" + sourceFile + \" is a directory, which is not supported.\");\r\n        }\r\n        LocalResource localResource = fs.createAmResource(sourceFile, (staticFile.getType() == ConfigFile.TypeEnum.ARCHIVE ? LocalResourceType.ARCHIVE : LocalResourceType.FILE), staticFile.getVisibility());\r\n        Path destFile = new Path(sourceFile.getName());\r\n        if (staticFile.getDestFile() != null && !staticFile.getDestFile().isEmpty()) {\r\n            destFile = new Path(staticFile.getDestFile());\r\n        }\r\n        addLocalResource(launcher, destFile.getName(), localResource, destFile, resolvedParams);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "addLocalResource",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void addLocalResource(AbstractLauncher launcher, String symlink, LocalResource localResource, Path destFile, ProviderService.ResolvedLaunchParams resolvedParams)\n{\r\n    if (destFile.isAbsolute()) {\r\n        launcher.addLocalResource(symlink, localResource, destFile.toString());\r\n        log.info(\"Added file for localization: \" + symlink + \" -> \" + localResource.getResource().getFile() + \", dest mount path: \" + destFile);\r\n    } else {\r\n        launcher.addLocalResource(symlink, localResource);\r\n        log.info(\"Added file for localization: \" + symlink + \" -> \" + localResource.getResource().getFile());\r\n    }\r\n    resolvedParams.addResolvedRsrcPath(symlink, destFile.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "isStaticFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isStaticFile(ConfigFile file)\n{\r\n    return file.getType().equals(ConfigFile.TypeEnum.ARCHIVE) || file.getType().equals(ConfigFile.TypeEnum.STATIC);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "resolvePropsInConfigFileAndSaveOnHdfs",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void resolvePropsInConfigFileAndSaveOnHdfs(SliderFileSystem fs, Map<String, String> tokensForSubstitution, ComponentInstance instance, ConfigFile configFile, String fileName, Path remoteFile) throws IOException\n{\r\n    substituteMapWithTokens(configFile.getProperties(), tokensForSubstitution);\r\n    PublishedConfiguration publishedConfiguration = new PublishedConfiguration(fileName, configFile.getProperties().entrySet());\r\n    if (!fs.getFileSystem().exists(remoteFile)) {\r\n        PublishedConfigurationOutputter configurationOutputter = PublishedConfigurationOutputter.createOutputter(ConfigFormat.resolve(configFile.getType().toString()), publishedConfiguration);\r\n        try (FSDataOutputStream os = fs.getFileSystem().create(remoteFile)) {\r\n            configurationOutputter.save(os);\r\n            os.flush();\r\n        }\r\n    } else {\r\n        log.info(\"Component instance = \" + instance.getCompInstanceName() + \", config file already exists: \" + remoteFile);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "resolveHadoopXmlTemplateAndSaveOnHdfs",
  "errType" : [ "ExecutionException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void resolveHadoopXmlTemplateAndSaveOnHdfs(FileSystem fs, Map<String, String> tokensForSubstitution, ConfigFile configFile, Path remoteFile, ServiceContext context) throws IOException\n{\r\n    Map<String, String> conf;\r\n    try {\r\n        conf = (Map<String, String>) context.configCache.get(configFile);\r\n    } catch (ExecutionException e) {\r\n        log.info(\"Failed to load config file: \" + configFile, e);\r\n        return;\r\n    }\r\n    org.apache.hadoop.conf.Configuration confCopy = new org.apache.hadoop.conf.Configuration(false);\r\n    for (Map.Entry<String, String> entry : conf.entrySet()) {\r\n        confCopy.set(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Map.Entry<String, String> entry : configFile.getProperties().entrySet()) {\r\n        confCopy.set(entry.getKey(), entry.getValue());\r\n    }\r\n    for (Map.Entry<String, String> entry : confCopy) {\r\n        String val = entry.getValue();\r\n        if (val != null) {\r\n            for (Map.Entry<String, String> token : tokensForSubstitution.entrySet()) {\r\n                val = val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\r\n                confCopy.set(entry.getKey(), val);\r\n            }\r\n        }\r\n    }\r\n    try (OutputStream output = fs.create(remoteFile)) {\r\n        confCopy.writeXml(output);\r\n        log.info(\"Reading config from: \" + configFile.getSrcFile() + \", writing to: \" + remoteFile);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "resolvePlainTemplateAndSaveOnHdfs",
  "errType" : [ "ExecutionException", "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void resolvePlainTemplateAndSaveOnHdfs(FileSystem fs, Map<String, String> tokensForSubstitution, ConfigFile configFile, Path remoteFile, ServiceContext context)\n{\r\n    String content;\r\n    try {\r\n        content = (String) context.configCache.get(configFile);\r\n    } catch (ExecutionException e) {\r\n        log.info(\"Failed to load config file: \" + configFile, e);\r\n        return;\r\n    }\r\n    content = substituteStrWithTokens(content, tokensForSubstitution);\r\n    try (OutputStream output = fs.create(remoteFile)) {\r\n        org.apache.commons.io.IOUtils.write(content, output, StandardCharsets.UTF_8);\r\n    } catch (IOException e) {\r\n        log.info(\"Failed to create \" + remoteFile);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "initCompTokensForSubstitute",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Map<String, String> initCompTokensForSubstitute(ComponentInstance instance, Container container, ContainerLaunchService.ComponentLaunchContext componentLaunchContext)\n{\r\n    Map<String, String> tokens = new HashMap<>();\r\n    tokens.put(COMPONENT_NAME, componentLaunchContext.getName());\r\n    tokens.put(COMPONENT_NAME_LC, componentLaunchContext.getName().toLowerCase());\r\n    tokens.put(COMPONENT_INSTANCE_NAME, instance.getCompInstanceName());\r\n    tokens.put(CONTAINER_ID, container.getId().toString());\r\n    tokens.put(COMPONENT_ID, String.valueOf(instance.getCompInstanceId().getId()));\r\n    tokens.putAll(instance.getComponent().getDependencyHostIpTokens());\r\n    return tokens;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "id",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container id(String id)\n{\r\n    this.id = id;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "launchTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Container launchTime(Date launchTime)\n{\r\n    this.launchTime = launchTime == null ? null : (Date) launchTime.clone();\r\n    return this;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getLaunchTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Date getLaunchTime()\n{\r\n    return launchTime == null ? null : (Date) launchTime.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setLaunchTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setLaunchTime(Date launchTime)\n{\r\n    this.launchTime = launchTime == null ? null : (Date) launchTime.clone();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "ip",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container ip(String ip)\n{\r\n    this.ip = ip;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getIp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getIp()\n{\r\n    return ip;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setIp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setIp(String ip)\n{\r\n    this.ip = ip;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hostname",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container hostname(String hostname)\n{\r\n    this.hostname = hostname;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getHostname",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHostname()\n{\r\n    return hostname;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setHostname",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHostname(String hostname)\n{\r\n    this.hostname = hostname;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "bareHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container bareHost(String bareHost)\n{\r\n    this.bareHost = bareHost;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getBareHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getBareHost()\n{\r\n    return bareHost;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setBareHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setBareHost(String bareHost)\n{\r\n    this.bareHost = bareHost;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "state",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container state(ContainerState state)\n{\r\n    this.state = state;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerState getState()\n{\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setState(ContainerState state)\n{\r\n    this.state = state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "componentInstanceName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container componentInstanceName(String componentInstanceName)\n{\r\n    this.componentInstanceName = componentInstanceName;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getComponentInstanceName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getComponentInstanceName()\n{\r\n    return componentInstanceName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setComponentInstanceName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setComponentInstanceName(String componentInstanceName)\n{\r\n    this.componentInstanceName = componentInstanceName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "resource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container resource(Resource resource)\n{\r\n    this.resource = resource;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getResource()\n{\r\n    return resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResource(Resource resource)\n{\r\n    this.resource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "artifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container artifact(Artifact artifact)\n{\r\n    this.artifact = artifact;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getArtifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Artifact getArtifact()\n{\r\n    return artifact;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setArtifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setArtifact(Artifact artifact)\n{\r\n    this.artifact = artifact;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "privilegedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container privilegedContainer(Boolean privilegedContainer)\n{\r\n    this.privilegedContainer = privilegedContainer;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getPrivilegedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Boolean getPrivilegedContainer()\n{\r\n    return privilegedContainer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setPrivilegedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPrivilegedContainer(Boolean privilegedContainer)\n{\r\n    this.privilegedContainer = privilegedContainer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, List<Map<String, String>>> getExposedPorts()\n{\r\n    return exposedPorts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setExposedPorts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setExposedPorts(Map<String, List<Map<String, String>>> ports)\n{\r\n    this.exposedPorts = ports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getLocalizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<LocalizationStatus> getLocalizationStatuses()\n{\r\n    return localizationStatuses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setLocalizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLocalizationStatuses(List<LocalizationStatus> statuses)\n{\r\n    this.localizationStatuses = statuses;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "localizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container localizationStatuses(List<LocalizationStatus> statuses)\n{\r\n    this.localizationStatuses = statuses;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    Container container = (Container) o;\r\n    return Objects.equals(this.id, container.id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Container {\\n\");\r\n    sb.append(\"    id: \").append(toIndentedString(id)).append(\"\\n\").append(\"    launchTime: \").append(toIndentedString(launchTime)).append(\"\\n\").append(\"    ip: \").append(toIndentedString(ip)).append(\"\\n\").append(\"    hostname: \").append(toIndentedString(hostname)).append(\"\\n\").append(\"    bareHost: \").append(toIndentedString(bareHost)).append(\"\\n\").append(\"    state: \").append(toIndentedString(state)).append(\"\\n\").append(\"    componentInstanceName: \").append(toIndentedString(componentInstanceName)).append(\"\\n\").append(\"    resource: \").append(toIndentedString(resource)).append(\"\\n\").append(\"    artifact: \").append(toIndentedString(artifact)).append(\"\\n\").append(\"    privilegedContainer: \").append(toIndentedString(privilegedContainer)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "createProxy",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "T createProxy(final Configuration conf, final Class<T> protocol, final UserGroupInformation ugi, final YarnRPC rpc, final InetSocketAddress serverAddress)\n{\r\n    Configuration confClone = new Configuration(conf);\r\n    confClone.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_KEY, 0);\r\n    confClone.setInt(CommonConfigurationKeysPublic.IPC_CLIENT_CONNECT_MAX_RETRIES_ON_SOCKET_TIMEOUTS_KEY, 0);\r\n    RetryPolicy retryPolicy;\r\n    if (conf.getLong(YarnServiceConf.CLIENT_AM_RETRY_MAX_WAIT_MS, 0) == 0) {\r\n        retryPolicy = TRY_ONCE_THEN_FAIL;\r\n    } else {\r\n        retryPolicy = createRetryPolicy(conf, YarnServiceConf.CLIENT_AM_RETRY_MAX_WAIT_MS, YarnServiceConf.DEFAULT_CLIENT_AM_RETRY_MAX_WAIT_MS, YarnServiceConf.CLIENT_AM_RETRY_MAX_INTERVAL_MS, YarnServiceConf.DEFAULT_CLIENT_AM_RETRY_MAX_INTERVAL_MS);\r\n    }\r\n    return createRetriableProxy(confClone, protocol, ugi, rpc, serverAddress, retryPolicy);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "homePathForUser",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String homePathForUser(String username)\n{\r\n    Preconditions.checkArgument(username != null, \"null user\");\r\n    if (username.startsWith(RegistryConstants.PATH_USERS)) {\r\n        return username;\r\n    }\r\n    if (username.isEmpty()) {\r\n        return RegistryConstants.PATH_SYSTEM_SERVICES;\r\n    }\r\n    String convertedName = convertUsername(username);\r\n    return RegistryPathUtils.join(RegistryConstants.PATH_USERS, encodeForRegistry(convertedName));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "currentUsernameUnencoded",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String currentUsernameUnencoded()\n{\r\n    String env_hadoop_username = System.getenv(RegistryInternalConstants.HADOOP_USER_NAME);\r\n    return getCurrentUsernameUnencoded(env_hadoop_username);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "qualifyUser",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "String qualifyUser(String user)\n{\r\n    String t = user.trim();\r\n    if (t.startsWith(\"/\")) {\r\n        return t;\r\n    } else if (t.equals(\"~\")) {\r\n        return currentUsernameUnencoded();\r\n    } else if (t.startsWith(\"~\")) {\r\n        String convertedName = convertUsername(t.substring(1));\r\n        return RegistryPathUtils.join(RegistryConstants.PATH_USERS, encodeForRegistry(convertedName));\r\n    } else {\r\n        return \"/\" + t;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "lookupExternalRestAPI",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String lookupExternalRestAPI(String user, String serviceClass, String instance, String api) throws IOException\n{\r\n    String qualified = qualifyUser(user);\r\n    String path = servicePath(qualified, serviceClass, instance);\r\n    String restAPI = resolveExternalRestAPI(api, path);\r\n    if (restAPI == null) {\r\n        throw new PathNotFoundException(path + \" API \" + api);\r\n    }\r\n    return restAPI;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "resolveExternalRestAPI",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String resolveExternalRestAPI(String api, String path) throws IOException\n{\r\n    ServiceRecord record = operations.resolve(path);\r\n    return lookupRestAPI(record, api, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "lookupRestAPI",
  "errType" : [ "InvalidRecordException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String lookupRestAPI(ServiceRecord record, String api, boolean external) throws InvalidRecordException\n{\r\n    try {\r\n        String url = null;\r\n        Endpoint endpoint = getEndpoint(record, api, external);\r\n        List<String> addresses = RegistryTypeUtils.retrieveAddressesUriType(endpoint);\r\n        if (addresses != null && !addresses.isEmpty()) {\r\n            url = addresses.get(0);\r\n        }\r\n        return url;\r\n    } catch (InvalidRecordException e) {\r\n        log.debug(\"looking for API {}\", api, e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getEndpoint",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Endpoint getEndpoint(ServiceRecord record, String api, boolean external)\n{\r\n    return external ? record.getExternalEndpoint(api) : record.getInternalEndpoint(api);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "HttpProbe create(Map<String, String> props) throws IOException\n{\r\n    String urlString = getProperty(props, WEB_PROBE_URL, null);\r\n    new URL(urlString);\r\n    int timeout = getPropertyInt(props, WEB_PROBE_CONNECT_TIMEOUT, WEB_PROBE_CONNECT_TIMEOUT_DEFAULT);\r\n    int minSuccess = getPropertyInt(props, WEB_PROBE_MIN_SUCCESS, WEB_PROBE_MIN_SUCCESS_DEFAULT);\r\n    int maxSuccess = getPropertyInt(props, WEB_PROBE_MAX_SUCCESS, WEB_PROBE_MAX_SUCCESS_DEFAULT);\r\n    return new HttpProbe(urlString, timeout, minSuccess, maxSuccess, props);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "getConnection",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "HttpURLConnection getConnection(URL url, int timeout) throws IOException\n{\r\n    HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n    connection.setInstanceFollowRedirects(true);\r\n    connection.setConnectTimeout(timeout);\r\n    return connection;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "ping",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "ProbeStatus ping(ComponentInstance instance)\n{\r\n    ProbeStatus status = super.ping(instance);\r\n    if (!status.isSuccess()) {\r\n        return status;\r\n    }\r\n    String ip = instance.getContainerStatus().getIPs().get(0);\r\n    HttpURLConnection connection = null;\r\n    try {\r\n        URL url = new URL(urlString.replace(HOST_TOKEN, ip));\r\n        connection = getConnection(url, this.timeout);\r\n        int rc = connection.getResponseCode();\r\n        if (rc < min || rc > max) {\r\n            String error = \"Probe \" + url + \" error code: \" + rc;\r\n            log.info(error);\r\n            status.fail(this, new IOException(error));\r\n        } else {\r\n            status.succeed(this);\r\n        }\r\n    } catch (Throwable e) {\r\n        String error = \"Probe \" + urlString + \" failed for IP \" + ip + \": \" + e;\r\n        log.info(error, e);\r\n        status.fail(this, new IOException(error, e));\r\n    } finally {\r\n        if (connection != null) {\r\n            connection.disconnect();\r\n        }\r\n    }\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "buildConnectionString",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String buildConnectionString(String zkHosts, int port)\n{\r\n    String zkPort = Integer.toString(port);\r\n    String[] hostlist = zkHosts.split(\",\", 0);\r\n    String quorum = ServiceUtils.join(hostlist, \":\" + zkPort + \",\", false);\r\n    return quorum;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "splitToPairs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<String> splitToPairs(String hostPortQuorumList)\n{\r\n    String[] strings = StringUtils.getStrings(hostPortQuorumList);\r\n    int len = 0;\r\n    if (strings != null) {\r\n        len = strings.length;\r\n    }\r\n    List<String> tuples = new ArrayList<String>(len);\r\n    if (strings != null) {\r\n        for (String s : strings) {\r\n            tuples.add(s.trim());\r\n        }\r\n    }\r\n    return tuples;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "splitToHostsAndPorts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<HostAndPort> splitToHostsAndPorts(String hostPortQuorumList)\n{\r\n    String[] strings = StringUtils.getStrings(hostPortQuorumList);\r\n    int len = 0;\r\n    if (strings != null) {\r\n        len = strings.length;\r\n    }\r\n    List<HostAndPort> list = new ArrayList<HostAndPort>(len);\r\n    if (strings != null) {\r\n        for (String s : strings) {\r\n            list.add(HostAndPort.fromString(s.trim()).withDefaultPort(DEFAULT_PORT));\r\n        }\r\n    }\r\n    return list;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "buildHostsOnlyList",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String buildHostsOnlyList(List<HostAndPort> hostAndPorts)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    for (HostAndPort hostAndPort : hostAndPorts) {\r\n        sb.append(hostAndPort.getHost()).append(\",\");\r\n    }\r\n    if (sb.length() > 0) {\r\n        sb.delete(sb.length() - 1, sb.length());\r\n    }\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "buildQuorumEntry",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String buildQuorumEntry(HostAndPort hostAndPort, int defaultPort)\n{\r\n    String s = hostAndPort.toString();\r\n    if (hostAndPort.hasPort()) {\r\n        return s;\r\n    } else {\r\n        return s + \":\" + defaultPort;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "buildQuorum",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String buildQuorum(List<HostAndPort> hostAndPorts, int defaultPort)\n{\r\n    List<String> entries = new ArrayList<String>(hostAndPorts.size());\r\n    for (HostAndPort hostAndPort : hostAndPorts) {\r\n        entries.add(buildQuorumEntry(hostAndPort, defaultPort));\r\n    }\r\n    return ServiceUtils.join(entries, \",\", false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "convertToHostsOnlyList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String convertToHostsOnlyList(String quorum) throws BadConfigException\n{\r\n    List<HostAndPort> hostAndPorts = splitToHostsAndPortsStrictly(quorum);\r\n    return ZookeeperUtils.buildHostsOnlyList(hostAndPorts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "splitToHostsAndPortsStrictly",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<HostAndPort> splitToHostsAndPortsStrictly(String quorum) throws BadConfigException\n{\r\n    List<HostAndPort> hostAndPorts = ZookeeperUtils.splitToHostsAndPorts(quorum);\r\n    if (hostAndPorts.isEmpty()) {\r\n        throw new BadConfigException(\"empty zookeeper quorum\");\r\n    }\r\n    return hostAndPorts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getFirstPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getFirstPort(String quorum, int defVal) throws BadConfigException\n{\r\n    List<HostAndPort> hostAndPorts = splitToHostsAndPortsStrictly(quorum);\r\n    int port = hostAndPorts.get(0).getPortOrDefault(defVal);\r\n    return port;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "buildInstance",
  "errType" : null,
  "containingMethodsNum" : 41,
  "sourceCodeText" : "void buildInstance(ServiceContext context, Configuration configuration) throws YarnException, IOException\n{\r\n    app = context.service;\r\n    executorService = Executors.newScheduledThreadPool(10);\r\n    RegistryOperations registryClient = null;\r\n    if (UserGroupInformation.isSecurityEnabled() && !StringUtils.isEmpty(context.principal) && !StringUtils.isEmpty(context.keytab)) {\r\n        Configuration conf = getConfig();\r\n        String username = new HadoopKerberosName(context.principal.trim()).getServiceName();\r\n        LOG.info(\"Set registry user accounts: sasl:\" + username);\r\n        conf.set(KEY_REGISTRY_USER_ACCOUNTS, \"sasl:\" + username);\r\n        registryClient = RegistryOperationsFactory.createKerberosInstance(conf, \"Client\", context.principal, context.keytab);\r\n    } else {\r\n        registryClient = RegistryOperationsFactory.createInstance(\"ServiceScheduler\", configuration);\r\n    }\r\n    addIfService(registryClient);\r\n    yarnRegistryOperations = createYarnRegistryOperations(context, registryClient);\r\n    serviceMetrics = ServiceMetrics.register(app.getName(), \"Metrics for service\");\r\n    serviceMetrics.tag(\"type\", \"Metrics type [component or service]\", \"service\");\r\n    serviceMetrics.tag(\"appId\", \"Service id for service\", app.getId());\r\n    amRMClient = createAMRMClient();\r\n    addIfService(amRMClient);\r\n    nmClient = createNMClient();\r\n    nmClient.getClient().cleanupRunningContainersOnStop(false);\r\n    addIfService(nmClient);\r\n    dispatcher = createAsyncDispatcher();\r\n    dispatcher.register(ServiceEventType.class, new ServiceEventHandler());\r\n    dispatcher.register(ComponentEventType.class, new ComponentEventHandler());\r\n    dispatcher.register(ComponentInstanceEventType.class, new ComponentInstanceEventHandler());\r\n    dispatcher.setDrainEventsOnStop();\r\n    addIfService(dispatcher);\r\n    containerLaunchService = new ContainerLaunchService(context);\r\n    addService(containerLaunchService);\r\n    if (YarnConfiguration.timelineServiceV2Enabled(configuration)) {\r\n        TimelineV2Client timelineClient = TimelineV2Client.createTimelineClient(context.attemptId.getApplicationId());\r\n        amRMClient.registerTimelineV2Client(timelineClient);\r\n        serviceTimelinePublisher = new ServiceTimelinePublisher(timelineClient);\r\n        addService(serviceTimelinePublisher);\r\n        DefaultMetricsSystem.instance().register(\"ServiceMetricsSink\", \"For processing metrics to ATS\", new ServiceMetricsSink(serviceTimelinePublisher));\r\n        LOG.info(\"Timeline v2 is enabled.\");\r\n    }\r\n    initGlobalTokensForSubstitute(context);\r\n    ProviderUtils.substituteMapWithTokens(app.getQuicklinks(), globalTokens);\r\n    createConfigFileCache(context.fs.getFileSystem());\r\n    createAllComponents();\r\n    containerRecoveryTimeout = YarnServiceConf.getInt(YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS, YarnServiceConf.DEFAULT_CONTAINER_RECOVERY_TIMEOUT_MS, app.getConfiguration(), getConfig());\r\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\r\n        timelineServiceEnabled = true;\r\n    }\r\n    serviceManager = createServiceManager();\r\n    context.setServiceManager(serviceManager);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createYarnRegistryOperations",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnRegistryViewForProviders createYarnRegistryOperations(ServiceContext context, RegistryOperations registryClient)\n{\r\n    return new YarnRegistryViewForProviders(registryClient, RegistryUtils.currentUser(), YarnServiceConstants.APP_TYPE, app.getName(), context.attemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createServiceManager",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceManager createServiceManager()\n{\r\n    return new ServiceManager(context);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createAsyncDispatcher",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AsyncDispatcher createAsyncDispatcher()\n{\r\n    return new AsyncDispatcher(\"Component  dispatcher\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createNMClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NMClientAsync createNMClient()\n{\r\n    return NMClientAsync.createNMClientAsync(new NMClientCallback());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createAMRMClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AMRMClientAsync<AMRMClient.ContainerRequest> createAMRMClient()\n{\r\n    return AMRMClientAsync.createAMRMClientAsync(1000, new AMRMClientCallback());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setGracefulStop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setGracefulStop(FinalApplicationStatus applicationStatus)\n{\r\n    this.gracefulStop = true;\r\n    this.finalApplicationStatus = applicationStatus;\r\n    nmClient.getClient().cleanupRunningContainersOnStop(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "serviceInit",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    try {\r\n        buildInstance(context, conf);\r\n    } catch (YarnException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    LOG.info(\"Stopping service scheduler\");\r\n    if (executorService != null) {\r\n        executorService.shutdownNow();\r\n    }\r\n    DefaultMetricsSystem.shutdown();\r\n    if (gracefulStop) {\r\n        if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\r\n            final Map<ContainerId, ComponentInstance> liveInst = getLiveInstances();\r\n            for (Map.Entry<ContainerId, ComponentInstance> instance : liveInst.entrySet()) {\r\n                if (!ComponentInstance.isFinalState(instance.getValue().getContainerSpec().getState())) {\r\n                    LOG.info(\"{} Component instance state changed from {} to {}\", instance.getValue().getCompInstanceName(), instance.getValue().getContainerSpec().getState(), ContainerState.STOPPED);\r\n                    serviceTimelinePublisher.componentInstanceFinished(instance.getKey(), KILLED_AFTER_APP_COMPLETION, ContainerState.STOPPED, getDiagnostics().toString());\r\n                }\r\n            }\r\n            LOG.info(\"Service state changed to {}\", finalApplicationStatus);\r\n            serviceTimelinePublisher.serviceAttemptUnregistered(context, finalApplicationStatus, diagnostics.toString());\r\n        }\r\n        amRMClient.unregisterApplicationMaster(finalApplicationStatus, diagnostics.toString(), \"\");\r\n        LOG.info(\"Service {} unregistered with RM, with attemptId = {} \" + \", diagnostics = {} \", app.getName(), context.attemptId, diagnostics);\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n    InetSocketAddress bindAddress = context.clientAMService.getBindAddress();\r\n    RegisterApplicationMasterResponse response = amRMClient.registerApplicationMaster(bindAddress.getHostName(), bindAddress.getPort(), \"N/A\");\r\n    if (response.getResourceTypes() != null) {\r\n        ResourceUtils.reinitializeResources(response.getResourceTypes());\r\n    }\r\n    if (response.getClientToAMTokenMasterKey() != null && response.getClientToAMTokenMasterKey().remaining() != 0) {\r\n        context.secretManager.setMasterKey(response.getClientToAMTokenMasterKey().array());\r\n    }\r\n    registerServiceInstance(context.attemptId, app);\r\n    app.setState(ServiceState.STARTED);\r\n    ServiceApiUtil.checkServiceDependencySatisified(context.service);\r\n    recoverComponents(response);\r\n    for (Component component : componentsById.values()) {\r\n        if (component.areDependenciesReady()) {\r\n            LOG.info(\"Triggering initial evaluation of component {}\", component.getName());\r\n            ComponentEvent event = new ComponentEvent(component.getName(), FLEX).setDesired(component.getComponentSpec().getNumberOfContainers());\r\n            component.handle(event);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "recoverComponents",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void recoverComponents(RegisterApplicationMasterResponse response)\n{\r\n    List<Container> containersFromPrevAttempt = response.getContainersFromPreviousAttempts();\r\n    LOG.info(\"Received {} containers from previous attempt.\", containersFromPrevAttempt.size());\r\n    Map<String, ServiceRecord> existingRecords = new HashMap<>();\r\n    List<String> existingComps = null;\r\n    try {\r\n        existingComps = yarnRegistryOperations.listComponents();\r\n        LOG.info(\"Found {} containers from ZK registry: {}\", existingComps.size(), existingComps);\r\n    } catch (Exception e) {\r\n        LOG.info(\"Could not read component paths: {}\", e.getMessage());\r\n    }\r\n    if (existingComps != null) {\r\n        for (String existingComp : existingComps) {\r\n            try {\r\n                ServiceRecord record = yarnRegistryOperations.getComponent(existingComp);\r\n                existingRecords.put(existingComp, record);\r\n            } catch (Exception e) {\r\n                LOG.warn(\"Could not resolve record for component {}: {}\", existingComp, e);\r\n            }\r\n        }\r\n    }\r\n    for (Container container : containersFromPrevAttempt) {\r\n        LOG.info(\"Handling {} from previous attempt\", container.getId());\r\n        ServiceRecord record = existingRecords.remove(RegistryPathUtils.encodeYarnID(container.getId().toString()));\r\n        if (record != null) {\r\n            Component comp = componentsById.get(container.getAllocationRequestId());\r\n            ComponentEvent event = new ComponentEvent(comp.getName(), CONTAINER_RECOVERED).setContainer(container).setInstance(comp.getComponentInstance(record.description));\r\n            comp.handle(event);\r\n        } else {\r\n            LOG.info(\"Record not found in registry for container {} from previous\" + \" attempt, releasing\", container.getId());\r\n            amRMClient.releaseAssignedContainer(container.getId());\r\n        }\r\n    }\r\n    ApplicationId appId = ApplicationId.fromString(app.getId());\r\n    existingRecords.forEach((encodedContainerId, record) -> {\r\n        String componentName = record.get(YarnRegistryAttributes.YARN_COMPONENT);\r\n        if (componentName != null) {\r\n            Component component = componentsByName.get(componentName);\r\n            if (component != null) {\r\n                ComponentInstance compInstance = component.getComponentInstance(record.description);\r\n                ContainerId containerId = ContainerId.fromString(record.get(YarnRegistryAttributes.YARN_ID));\r\n                if (containerId.getApplicationAttemptId().getApplicationId().equals(appId)) {\r\n                    unRecoveredInstances.put(containerId, compInstance);\r\n                    component.removePendingInstance(compInstance);\r\n                }\r\n            }\r\n        }\r\n    });\r\n    if (unRecoveredInstances.size() > 0) {\r\n        executorService.schedule(() -> {\r\n            synchronized (unRecoveredInstances) {\r\n                unRecoveredInstances.forEach((containerId, instance) -> {\r\n                    LOG.info(\"{}, wait on container {} expired\", instance.getCompInstanceId(), containerId);\r\n                    instance.cleanupRegistryAndCompHdfsDir(containerId);\r\n                    Component component = componentsByName.get(instance.getCompName());\r\n                    component.requestContainers(1);\r\n                    component.reInsertPendingInstance(instance);\r\n                    amRMClient.releaseAssignedContainer(containerId);\r\n                });\r\n                unRecoveredInstances.clear();\r\n            }\r\n        }, containerRecoveryTimeout, TimeUnit.MILLISECONDS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "initGlobalTokensForSubstitute",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void initGlobalTokensForSubstitute(ServiceContext context)\n{\r\n    globalTokens.put(ServiceApiConstants.CLUSTER_ZK_QUORUM, getConfig().getTrimmed(KEY_REGISTRY_ZK_QUORUM, DEFAULT_REGISTRY_ZK_QUORUM));\r\n    String user = RegistryUtils.currentUser();\r\n    globalTokens.put(SERVICE_ZK_PATH, ServiceRegistryUtils.mkServiceHomePath(user, app.getName()));\r\n    globalTokens.put(ServiceApiConstants.USER, user);\r\n    String dnsDomain = getConfig().getTrimmed(KEY_DNS_DOMAIN);\r\n    if (dnsDomain != null && !dnsDomain.isEmpty()) {\r\n        globalTokens.put(ServiceApiConstants.DOMAIN, dnsDomain);\r\n    }\r\n    String clusterFs = getConfig().getTrimmed(FS_DEFAULT_NAME_KEY);\r\n    if (clusterFs != null && !clusterFs.isEmpty()) {\r\n        globalTokens.put(ServiceApiConstants.CLUSTER_FS_URI, clusterFs);\r\n        globalTokens.put(ServiceApiConstants.CLUSTER_FS_HOST, URI.create(clusterFs).getHost());\r\n    }\r\n    globalTokens.put(SERVICE_HDFS_DIR, context.serviceHdfsDir);\r\n    globalTokens.put(SERVICE_NAME_LC, app.getName().toLowerCase());\r\n    globalTokens.put(SERVICE_NAME, app.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createConfigFileCache",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createConfigFileCache(final FileSystem fileSystem)\n{\r\n    this.configFileCache = CacheBuilder.newBuilder().expireAfterAccess(10, TimeUnit.MINUTES).build(new CacheLoader<ConfigFile, Object>() {\r\n\r\n        @Override\r\n        public Object load(ConfigFile key) throws Exception {\r\n            switch(key.getType()) {\r\n                case HADOOP_XML:\r\n                    try (FSDataInputStream input = fileSystem.open(new Path(key.getSrcFile()))) {\r\n                        org.apache.hadoop.conf.Configuration confRead = new org.apache.hadoop.conf.Configuration(false);\r\n                        confRead.addResource(input);\r\n                        Map<String, String> map = new HashMap<>(confRead.size());\r\n                        for (Map.Entry<String, String> entry : confRead) {\r\n                            map.put(entry.getKey(), entry.getValue());\r\n                        }\r\n                        return map;\r\n                    }\r\n                case TEMPLATE:\r\n                    try (FSDataInputStream fileInput = fileSystem.open(new Path(key.getSrcFile()))) {\r\n                        return IOUtils.toString(fileInput, StandardCharsets.UTF_8);\r\n                    }\r\n                default:\r\n                    return null;\r\n            }\r\n        }\r\n    });\r\n    context.configCache = configFileCache;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "registerServiceInstance",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void registerServiceInstance(ApplicationAttemptId attemptId, Service service) throws IOException\n{\r\n    LOG.info(\"Registering \" + attemptId + \", \" + service.getName() + \" into registry\");\r\n    ServiceRecord serviceRecord = new ServiceRecord();\r\n    serviceRecord.set(YarnRegistryAttributes.YARN_ID, attemptId.getApplicationId().toString());\r\n    serviceRecord.set(YarnRegistryAttributes.YARN_PERSISTENCE, PersistencePolicies.APPLICATION);\r\n    serviceRecord.description = \"YarnServiceMaster\";\r\n    executorService.submit(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                yarnRegistryOperations.registerSelf(serviceRecord, false);\r\n                LOG.info(\"Registered service under {}; absolute path {}\", yarnRegistryOperations.getSelfRegistrationPath(), yarnRegistryOperations.getAbsoluteSelfRegistrationPath());\r\n                boolean isFirstAttempt = 1 == attemptId.getAttemptId();\r\n                if (isFirstAttempt) {\r\n                    yarnRegistryOperations.deleteChildren(yarnRegistryOperations.getSelfRegistrationPath(), true);\r\n                }\r\n            } catch (IOException e) {\r\n                LOG.error(\"Failed to register app \" + app.getName() + \" in registry\", e);\r\n            }\r\n        }\r\n    });\r\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\r\n        serviceTimelinePublisher.serviceAttemptRegistered(app, getConfig());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createAllComponents",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void createAllComponents()\n{\r\n    long allocateId = 0;\r\n    Collection<org.apache.hadoop.yarn.service.api.records.Component> sortedComponents = ServiceApiUtil.sortByDependencies(app.getComponents());\r\n    for (org.apache.hadoop.yarn.service.api.records.Component compSpec : sortedComponents) {\r\n        Component component = new Component(compSpec, allocateId, context);\r\n        componentsById.put(allocateId, component);\r\n        componentsByName.put(component.getName(), component);\r\n        allocateId++;\r\n        if (!hasAtLeastOnePlacementConstraint && compSpec.getPlacementPolicy() != null && compSpec.getPlacementPolicy().getConstraints() != null && !compSpec.getPlacementPolicy().getConstraints().isEmpty()) {\r\n            hasAtLeastOnePlacementConstraint = true;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getServiceMetrics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceMetrics getServiceMetrics()\n{\r\n    return serviceMetrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getAmRMClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMClientAsync<AMRMClient.ContainerRequest> getAmRMClient()\n{\r\n    return amRMClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getNmClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMClientAsync getNmClient()\n{\r\n    return nmClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "addLiveCompInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addLiveCompInstance(ContainerId containerId, ComponentInstance instance)\n{\r\n    liveInstances.put(containerId, instance);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "removeLiveCompInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeLiveCompInstance(ContainerId containerId)\n{\r\n    liveInstances.remove(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getYarnRegistryOperations",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnRegistryViewForProviders getYarnRegistryOperations()\n{\r\n    return yarnRegistryOperations;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getServiceTimelinePublisher",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceTimelinePublisher getServiceTimelinePublisher()\n{\r\n    return serviceTimelinePublisher;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getLiveInstances",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<ContainerId, ComponentInstance> getLiveInstances()\n{\r\n    return liveInstances;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getContainerLaunchService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerLaunchService getContainerLaunchService()\n{\r\n    return containerLaunchService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceContext getContext()\n{\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getAllComponents",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Component> getAllComponents()\n{\r\n    return componentsByName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service getApp()\n{\r\n    return app;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getDispatcher",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AsyncDispatcher getDispatcher()\n{\r\n    return dispatcher;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "BoundedAppender getDiagnostics()\n{\r\n    return diagnostics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "hasAtLeastOnePlacementConstraint",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean hasAtLeastOnePlacementConstraint()\n{\r\n    return hasAtLeastOnePlacementConstraint;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "terminateServiceIfNeeded",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean terminateServiceIfNeeded(Component component)\n{\r\n    boolean serviceIsTerminated = terminateServiceIfDominantComponentFinished(component) || terminateServiceIfAllComponentsFinished();\r\n    return serviceIsTerminated;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "terminateServiceIfDominantComponentFinished",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "boolean terminateServiceIfDominantComponentFinished(Component component)\n{\r\n    boolean shouldTerminate = false;\r\n    boolean componentIsDominant = component.getComponentSpec().getConfiguration().getPropertyBool(CONTAINER_STATE_REPORT_AS_SERVICE_STATE, false);\r\n    if (componentIsDominant) {\r\n        ComponentRestartPolicy restartPolicy = component.getRestartPolicyHandler();\r\n        if (restartPolicy.shouldTerminate(component)) {\r\n            shouldTerminate = true;\r\n            boolean isSucceeded = restartPolicy.hasCompletedSuccessfully(component);\r\n            org.apache.hadoop.yarn.service.api.records.ComponentState state = isSucceeded ? org.apache.hadoop.yarn.service.api.records.ComponentState.SUCCEEDED : org.apache.hadoop.yarn.service.api.records.ComponentState.FAILED;\r\n            LOG.info(\"{} Component state changed from {} to {}\", component.getName(), component.getComponentSpec().getState(), state);\r\n            component.getComponentSpec().setState(state);\r\n            LOG.info(\"Dominate component {} finished, exiting Service Master... \" + \", final status=\" + (isSucceeded ? \"Succeeded\" : \"Failed\"), component.getName());\r\n            terminateService(isSucceeded);\r\n        }\r\n    }\r\n    return shouldTerminate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "terminateServiceIfAllComponentsFinished",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "boolean terminateServiceIfAllComponentsFinished()\n{\r\n    boolean shouldTerminate = true;\r\n    Set<String> succeededComponents = new HashSet<>();\r\n    Set<String> failedComponents = new HashSet<>();\r\n    for (Component comp : getAllComponents().values()) {\r\n        ComponentRestartPolicy restartPolicy = comp.getRestartPolicyHandler();\r\n        if (restartPolicy.shouldTerminate(comp)) {\r\n            if (restartPolicy.hasCompletedSuccessfully(comp)) {\r\n                LOG.info(\"{} Component state changed from {} to {}\", comp.getName(), comp.getComponentSpec().getState(), org.apache.hadoop.yarn.service.api.records.ComponentState.SUCCEEDED);\r\n                comp.getComponentSpec().setState(org.apache.hadoop.yarn.service.api.records.ComponentState.SUCCEEDED);\r\n            } else {\r\n                LOG.info(\"{} Component state changed from {} to {}\", comp.getName(), comp.getComponentSpec().getState(), org.apache.hadoop.yarn.service.api.records.ComponentState.FAILED);\r\n                comp.getComponentSpec().setState(org.apache.hadoop.yarn.service.api.records.ComponentState.FAILED);\r\n            }\r\n            if (isTimelineServiceEnabled()) {\r\n                serviceTimelinePublisher.componentFinished(comp.getComponentSpec(), comp.getComponentSpec().getState(), systemClock.getTime());\r\n            }\r\n        } else {\r\n            shouldTerminate = false;\r\n            break;\r\n        }\r\n        long nFailed = comp.getNumFailedInstances();\r\n        if (nFailed > 0) {\r\n            failedComponents.add(comp.getName());\r\n        } else {\r\n            succeededComponents.add(comp.getName());\r\n        }\r\n    }\r\n    if (shouldTerminate) {\r\n        LOG.info(\"All component finished, exiting Service Master... \" + \", final status=\" + (failedComponents.isEmpty() ? \"Succeeded\" : \"Failed\"));\r\n        LOG.info(\"Succeeded components: [\" + org.apache.commons.lang3.StringUtils.join(succeededComponents, \",\") + \"]\");\r\n        LOG.info(\"Failed components: [\" + org.apache.commons.lang3.StringUtils.join(failedComponents, \",\") + \"]\");\r\n        terminateService(failedComponents.isEmpty());\r\n    }\r\n    return shouldTerminate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "terminateService",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void terminateService(boolean isSucceeded)\n{\r\n    int exitStatus = EXIT_SUCCESS;\r\n    if (isSucceeded) {\r\n        setGracefulStop(FinalApplicationStatus.SUCCEEDED);\r\n        app.setState(ServiceState.SUCCEEDED);\r\n    } else {\r\n        setGracefulStop(FinalApplicationStatus.FAILED);\r\n        app.setState(ServiceState.FAILED);\r\n        exitStatus = EXIT_FALSE;\r\n    }\r\n    getTerminationHandler().terminate(exitStatus);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getSystemClock",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Clock getSystemClock()\n{\r\n    return systemClock;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "isTimelineServiceEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isTimelineServiceEnabled()\n{\r\n    return timelineServiceEnabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getTerminationHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceUtils.ProcessTerminationHandler getTerminationHandler()\n{\r\n    return terminationHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "syncSysFs",
  "errType" : [ "IOException|URISyntaxException|InterruptedException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void syncSysFs(Service yarnApp)\n{\r\n    boolean success = true;\r\n    Configuration conf = getConfig();\r\n    String spec;\r\n    boolean useKerberos = UserGroupInformation.isSecurityEnabled();\r\n    boolean printSyncResult = false;\r\n    try {\r\n        String port = conf.get(\"yarn.nodemanager.webapp.address\").split(\":\")[1];\r\n        spec = ServiceApiUtil.jsonSerDeser.toJson(yarnApp);\r\n        for (org.apache.hadoop.yarn.service.api.records.Component c : yarnApp.getComponents()) {\r\n            Set<String> nodes = new HashSet<String>();\r\n            boolean update = Boolean.parseBoolean(c.getConfiguration().getEnv(ApplicationConstants.Environment.YARN_CONTAINER_RUNTIME_YARN_SYSFS_ENABLE.name()));\r\n            if (!update) {\r\n                continue;\r\n            }\r\n            printSyncResult = true;\r\n            for (org.apache.hadoop.yarn.service.api.records.Container container : c.getContainers()) {\r\n                String bareHost = container.getBareHost();\r\n                nodes.add(bareHost);\r\n            }\r\n            for (String bareHost : nodes) {\r\n                StringBuilder requestPath = new StringBuilder();\r\n                if (YarnConfiguration.useHttps(conf)) {\r\n                    requestPath.append(\"https://\");\r\n                } else {\r\n                    requestPath.append(\"http://\");\r\n                }\r\n                requestPath.append(bareHost).append(\":\").append(port).append(\"/ws/v1/node/yarn/sysfs/\").append(UserGroupInformation.getCurrentUser().getShortUserName()).append(\"/\").append(yarnApp.getId());\r\n                if (!useKerberos) {\r\n                    requestPath.append(\"?user.name=\").append(UserGroupInformation.getCurrentUser().getShortUserName());\r\n                }\r\n                Builder builder = HttpUtil.connect(requestPath.toString());\r\n                ClientResponse response = builder.put(ClientResponse.class, spec);\r\n                if (response.getStatus() != ClientResponse.Status.OK.getStatusCode()) {\r\n                    LOG.warn(\"Error synchronize YARN sysfs: \" + response.getEntity(String.class));\r\n                    success = false;\r\n                }\r\n            }\r\n        }\r\n        if (printSyncResult && success) {\r\n            LOG.info(\"YARN sysfs synchronized.\");\r\n        }\r\n    } catch (IOException | URISyntaxException | InterruptedException e) {\r\n        LOG.error(\"Fail to sync service spec: {}\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getUri",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUri()\n{\r\n    return uri;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setUri",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUri(String uri)\n{\r\n    this.uri = uri;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(\"BaseResource [uri=\").append(uri).append(\"]\");\r\n    return builder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getComponentName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getComponentName()\n{\r\n    return componentName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setComponentName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setComponentName(String name)\n{\r\n    this.componentName = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "name",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentContainers name(String name)\n{\r\n    this.componentName = name;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Container> getContainers()\n{\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainers(List<Container> containers)\n{\r\n    this.containers = containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "containers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentContainers containers(List<Container> compContainers)\n{\r\n    this.containers = compContainers;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "addContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addContainer(Container container)\n{\r\n    containers.add(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "elt",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LogEntryBuilder elt(String text)\n{\r\n    addComma();\r\n    builder.append(text);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "elt",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LogEntryBuilder elt(String name, Object value)\n{\r\n    addComma();\r\n    entry(name, value);\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "addComma",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addComma()\n{\r\n    if (!isEmpty()) {\r\n        builder.append(\", \");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "entry",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void entry(String name, Object value)\n{\r\n    builder.append(name).append('=');\r\n    if (value != null) {\r\n        builder.append('\"').append(value.toString()).append('\"');\r\n    } else {\r\n        builder.append(\"null\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return builder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "isEmpty",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isEmpty()\n{\r\n    return builder.length() == 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "postContainerReady",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void postContainerReady()\n{\r\n    if (timelineServiceEnabled) {\r\n        serviceTimelinePublisher.componentInstanceBecomeReady(containerSpec);\r\n    }\r\n    try {\r\n        List<org.apache.hadoop.yarn.api.records.LocalizationStatus> statusesFromNM = scheduler.getNmClient().getClient().getLocalizationStatuses(container.getId(), container.getNodeId());\r\n        if (statusesFromNM != null && !statusesFromNM.isEmpty()) {\r\n            updateLocalizationStatuses(statusesFromNM);\r\n        }\r\n    } catch (YarnException | IOException e) {\r\n        LOG.warn(\"{} failure getting localization statuses\", container.getId(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "handleComponentInstanceRelaunch",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void handleComponentInstanceRelaunch(ComponentInstance compInstance, ComponentInstanceEvent event, boolean failureBeforeLaunch, String containerDiag)\n{\r\n    Component comp = compInstance.getComponent();\r\n    boolean hasContainerFailed = failureBeforeLaunch || hasContainerFailed(event.getStatus());\r\n    ComponentRestartPolicy restartPolicy = comp.getRestartPolicyHandler();\r\n    ContainerState containerState = hasContainerFailed ? ContainerState.FAILED : ContainerState.SUCCEEDED;\r\n    if (compInstance.getContainerSpec() != null) {\r\n        compInstance.getContainerSpec().setState(containerState);\r\n    }\r\n    if (restartPolicy.shouldRelaunchInstance(compInstance, event.getStatus())) {\r\n        comp.requestContainers(1);\r\n        comp.reInsertPendingInstance(compInstance);\r\n        StringBuilder builder = new StringBuilder();\r\n        builder.append(compInstance.getCompInstanceId()).append(\": \").append(event.getContainerId()).append(\" completed. Reinsert back to pending list and requested \").append(\"a new container.\").append(System.lineSeparator()).append(\" exitStatus=\").append(failureBeforeLaunch || event.getStatus() == null ? null : event.getStatus().getExitStatus()).append(\", diagnostics=\").append(failureBeforeLaunch ? FAILED_BEFORE_LAUNCH_DIAG : (event.getStatus() != null ? event.getStatus().getDiagnostics() : UPGRADE_FAILED));\r\n        if (event.getStatus() != null && event.getStatus().getExitStatus() != 0) {\r\n            LOG.error(builder.toString());\r\n        } else {\r\n            LOG.info(builder.toString());\r\n        }\r\n        if (compInstance.timelineServiceEnabled) {\r\n            LOG.info(\"Publishing component instance status {} {} \", event.getContainerId(), containerState);\r\n            int exitStatus = failureBeforeLaunch || event.getStatus() == null ? ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\r\n            compInstance.serviceTimelinePublisher.componentInstanceFinished(event.getContainerId(), exitStatus, containerState, containerDiag);\r\n        }\r\n    } else {\r\n        if (hasContainerFailed) {\r\n            comp.markAsFailed(compInstance);\r\n        } else {\r\n            comp.markAsSucceeded(compInstance);\r\n        }\r\n        if (compInstance.timelineServiceEnabled) {\r\n            int exitStatus = failureBeforeLaunch || event.getStatus() == null ? ContainerExitStatus.INVALID : event.getStatus().getExitStatus();\r\n            compInstance.serviceTimelinePublisher.componentInstanceFinished(event.getContainerId(), exitStatus, containerState, containerDiag);\r\n        }\r\n        LOG.info(compInstance.getCompInstanceId() + (!hasContainerFailed ? \" succeeded\" : \" failed\") + \" without retry, exitStatus=\" + event.getStatus());\r\n        comp.getScheduler().terminateServiceIfNeeded(comp);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "hasContainerFailed",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean hasContainerFailed(ContainerStatus containerStatus)\n{\r\n    return containerStatus == null || containerStatus.getExitStatus() != ContainerExitStatus.SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "isFinalState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isFinalState(ContainerState state)\n{\r\n    return ContainerState.FAILED.equals(state) || ContainerState.STOPPED.equals(state) || ContainerState.SUCCEEDED.equals(state);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "cancelUpgrade",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void cancelUpgrade()\n{\r\n    LOG.info(\"{} cancelling upgrade\", container.getId());\r\n    setContainerState(ContainerState.UPGRADING);\r\n    Component.UpgradeStatus cancelStatus = component.getCancelUpgradeStatus();\r\n    reInitHelper(cancelStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "reInitHelper",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void reInitHelper(Component.UpgradeStatus upgradeStatus)\n{\r\n    cancelContainerStatusRetriever();\r\n    cancelLclRetriever();\r\n    setContainerStatus(container.getId(), null);\r\n    scheduler.executorService.submit(() -> cleanupRegistry(container.getId()));\r\n    Future<ProviderService.ResolvedLaunchParams> launchParamsFuture = scheduler.getContainerLaunchService().reInitCompInstance(scheduler.getApp(), this, this.container, this.component.createLaunchContext(upgradeStatus.getTargetSpec(), upgradeStatus.getTargetVersion()));\r\n    updateResolvedLaunchParams(launchParamsFuture);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "initializeStatusRetriever",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initializeStatusRetriever(ComponentInstanceEvent event, long initialDelay)\n{\r\n    boolean cancelOnSuccess = true;\r\n    if (getCompSpec().getArtifact() != null && getCompSpec().getArtifact().getType() == Artifact.TypeEnum.DOCKER) {\r\n        cancelOnSuccess = false;\r\n    }\r\n    LOG.info(\"{} retrieve status after {}\", compInstanceId, initialDelay);\r\n    containerStatusFuture = scheduler.executorService.scheduleAtFixedRate(new ContainerStatusRetriever(scheduler, event.getContainerId(), this, cancelOnSuccess), initialDelay, 1, TimeUnit.SECONDS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ComponentInstanceState getState()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.stateMachine.getCurrentState();\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getServiceVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getServiceVersion()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.serviceVersion;\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getContainerState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerState getContainerState()\n{\r\n    this.readLock.lock();\r\n    try {\r\n        return this.containerSpec.getState();\r\n    } finally {\r\n        this.readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "setContainerState",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setContainerState(ContainerState state)\n{\r\n    this.writeLock.lock();\r\n    try {\r\n        ContainerState curState = containerSpec.getState();\r\n        if (!curState.equals(state)) {\r\n            containerSpec.setState(state);\r\n            LOG.info(\"{} spec state state changed from {} -> {}\", getCompInstanceId(), curState, state);\r\n        }\r\n    } finally {\r\n        this.writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "handle",
  "errType" : [ "InvalidStateTransitionException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void handle(ComponentInstanceEvent event)\n{\r\n    writeLock.lock();\r\n    try {\r\n        ComponentInstanceState oldState = getState();\r\n        try {\r\n            stateMachine.doTransition(event.getType(), event);\r\n        } catch (InvalidStateTransitionException e) {\r\n            LOG.error(getCompInstanceId() + \": Invalid event \" + event.getType() + \" at \" + oldState, e);\r\n        }\r\n        if (oldState != getState()) {\r\n            LOG.info(getCompInstanceId() + \" Transitioned from \" + oldState + \" to \" + getState() + \" on \" + event.getType() + \" event\");\r\n        }\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "setContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setContainer(Container container)\n{\r\n    this.container = container;\r\n    this.compInstanceId.setContainerId(container.getId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getCompInstanceName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getCompInstanceName()\n{\r\n    return compInstanceId.getCompInstanceName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "updateLocalizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void updateLocalizationStatuses(List<org.apache.hadoop.yarn.api.records.LocalizationStatus> statuses)\n{\r\n    Map<String, String> resourcesCpy = new HashMap<>();\r\n    readLock.lock();\r\n    try {\r\n        if (resolvedParams == null || resolvedParams.didLaunchFail() || resolvedParams.getResolvedRsrcPaths() == null || resolvedParams.getResolvedRsrcPaths().isEmpty()) {\r\n            cancelLclRetriever();\r\n            return;\r\n        }\r\n        resourcesCpy.putAll(resolvedParams.getResolvedRsrcPaths());\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n    boolean allCompleted = true;\r\n    Map<String, LocalizationStatus> fromNM = new HashMap<>();\r\n    statuses.forEach(statusFromNM -> {\r\n        LocalizationStatus lstatus = new LocalizationStatus().destFile(statusFromNM.getResourceKey()).diagnostics(statusFromNM.getDiagnostics()).state(statusFromNM.getLocalizationState());\r\n        fromNM.put(statusFromNM.getResourceKey(), lstatus);\r\n    });\r\n    for (String resourceKey : resourcesCpy.keySet()) {\r\n        LocalizationStatus lstatus = fromNM.get(resourceKey);\r\n        if (lstatus == null || lstatus.getState().equals(LocalizationState.PENDING)) {\r\n            allCompleted = false;\r\n            break;\r\n        }\r\n    }\r\n    List<LocalizationStatus> statusList = new ArrayList<>();\r\n    statusList.addAll(fromNM.values());\r\n    this.containerSpec.setLocalizationStatuses(statusList);\r\n    if (allCompleted) {\r\n        cancelLclRetriever();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "updateResolvedLaunchParams",
  "errType" : [ "InterruptedException|ExecutionException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void updateResolvedLaunchParams(Future<ProviderService.ResolvedLaunchParams> future)\n{\r\n    writeLock.lock();\r\n    try {\r\n        this.resolvedParams = future.get();\r\n    } catch (InterruptedException | ExecutionException e) {\r\n        LOG.error(\"{} updating resolved params\", getCompInstanceId(), e);\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerStatus getContainerStatus()\n{\r\n    readLock.lock();\r\n    try {\r\n        return status;\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "setContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setContainerStatus(ContainerId containerId, ContainerStatus latestStatus)\n{\r\n    writeLock.lock();\r\n    try {\r\n        this.status = latestStatus;\r\n        org.apache.hadoop.yarn.service.api.records.Container containerRec = getCompSpec().getContainer(containerId.toString());\r\n        if (containerRec != null) {\r\n            if (latestStatus != null) {\r\n                containerRec.setIp(StringUtils.join(\",\", latestStatus.getIPs()));\r\n                containerRec.setHostname(latestStatus.getHost());\r\n            } else {\r\n                containerRec.setIp(null);\r\n                containerRec.setHostname(null);\r\n            }\r\n        }\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "updateContainerStatus",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void updateContainerStatus(ContainerStatus status)\n{\r\n    org.apache.hadoop.yarn.service.api.records.Container containerRec = getCompSpec().getContainer(status.getContainerId().toString());\r\n    boolean doRegistryUpdate = true;\r\n    if (containerRec != null) {\r\n        String existingIP = containerRec.getIp();\r\n        String newIP = StringUtils.join(\",\", status.getIPs());\r\n        if (existingIP != null && newIP.equals(existingIP)) {\r\n            doRegistryUpdate = false;\r\n        }\r\n    }\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    try {\r\n        Map<String, List<Map<String, String>>> ports = null;\r\n        ports = mapper.readValue(status.getExposedPorts(), new TypeReference<Map<String, List<Map<String, String>>>>() {\r\n        });\r\n        container.setExposedPorts(ports);\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Unable to process container ports mapping: {}\", e);\r\n    }\r\n    setContainerStatus(status.getContainerId(), status);\r\n    if (containerRec != null && timelineServiceEnabled && doRegistryUpdate) {\r\n        serviceTimelinePublisher.componentInstanceIPHostUpdated(containerRec);\r\n    }\r\n    if (doRegistryUpdate) {\r\n        cleanupRegistry(status.getContainerId());\r\n        LOG.info(getCompInstanceId() + \" new IP = \" + status.getIPs() + \", host = \" + status.getHost() + \", updating registry\");\r\n        updateServiceRecord(yarnRegistryOperations, status);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getCompName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getCompName()\n{\r\n    return compInstanceId.getCompName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "setCompInstanceDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCompInstanceDir(Path dir)\n{\r\n    this.compInstanceDir = dir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getComponent",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component getComponent()\n{\r\n    return component;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Container getContainer()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getCompInstanceId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentInstanceId getCompInstanceId()\n{\r\n    return compInstanceId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    return this.container.getNodeId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getCompSpec",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "org.apache.hadoop.yarn.service.api.records.Component getCompSpec()\n{\r\n    return component.getComponentSpec();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "ping",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ProbeStatus ping()\n{\r\n    if (component.getProbe() == null) {\r\n        ProbeStatus status = new ProbeStatus();\r\n        status.setSuccess(true);\r\n        return status;\r\n    }\r\n    return component.getProbe().ping(this);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "updateServiceRecord",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void updateServiceRecord(YarnRegistryViewForProviders yarnRegistry, ContainerStatus status)\n{\r\n    ServiceRecord record = new ServiceRecord();\r\n    String containerId = status.getContainerId().toString();\r\n    record.set(YARN_ID, containerId);\r\n    record.description = getCompInstanceName();\r\n    record.set(YARN_PERSISTENCE, PersistencePolicies.CONTAINER);\r\n    record.set(YARN_IP, status.getIPs().get(0));\r\n    record.set(YARN_HOSTNAME, status.getHost());\r\n    record.set(YARN_COMPONENT, component.getName());\r\n    try {\r\n        yarnRegistry.putComponent(RegistryPathUtils.encodeYarnID(containerId), record);\r\n    } catch (IOException e) {\r\n        LOG.error(\"Failed to update service record in registry: \" + containerId + \"\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "destroy",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void destroy()\n{\r\n    LOG.info(getCompInstanceId() + \": Flexed down by user, destroying.\");\r\n    diagnostics.append(getCompInstanceId() + \": Flexed down by user\");\r\n    if (getState() == STARTED) {\r\n        component.decRunningContainers();\r\n    }\r\n    if (getState() == READY) {\r\n        component.decContainersReady(true);\r\n        component.decRunningContainers();\r\n    }\r\n    getCompSpec().removeContainer(containerSpec);\r\n    if (container == null) {\r\n        LOG.info(getCompInstanceId() + \" no container is assigned when \" + \"destroying\");\r\n        return;\r\n    }\r\n    ContainerId containerId = container.getId();\r\n    scheduler.removeLiveCompInstance(containerId);\r\n    component.getScheduler().getAmRMClient().releaseAssignedContainer(containerId);\r\n    if (timelineServiceEnabled) {\r\n        serviceTimelinePublisher.componentInstanceFinished(containerId, KILLED_BY_APPMASTER, ContainerState.STOPPED, diagnostics.toString());\r\n    }\r\n    cancelContainerStatusRetriever();\r\n    scheduler.executorService.submit(() -> cleanupRegistryAndCompHdfsDir(containerId));\r\n    cancelLclRetriever();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "cleanupRegistry",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void cleanupRegistry(ContainerId containerId)\n{\r\n    String cid = RegistryPathUtils.encodeYarnID(containerId.toString());\r\n    try {\r\n        yarnRegistryOperations.deleteComponent(getCompInstanceId(), cid);\r\n    } catch (IOException e) {\r\n        LOG.error(getCompInstanceId() + \": Failed to delete registry\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "cleanupRegistryAndCompHdfsDir",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void cleanupRegistryAndCompHdfsDir(ContainerId containerId)\n{\r\n    cleanupRegistry(containerId);\r\n    try {\r\n        if (compInstanceDir != null && fs.exists(compInstanceDir)) {\r\n            boolean deleted = fs.delete(compInstanceDir, true);\r\n            if (!deleted) {\r\n                LOG.error(getCompInstanceId() + \": Failed to delete component instance dir: \" + compInstanceDir);\r\n            } else {\r\n                LOG.info(getCompInstanceId() + \": Deleted component instance dir: \" + compInstanceDir);\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.warn(getCompInstanceId() + \": Failed to delete directory\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "cancelContainerStatusRetriever",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void cancelContainerStatusRetriever()\n{\r\n    if (containerStatusFuture != null && !containerStatusFuture.isDone()) {\r\n        containerStatusFuture.cancel(true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "initializeLocalizationStatusRetriever",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void initializeLocalizationStatusRetriever(ContainerId containerId)\n{\r\n    LOG.info(\"{} retrieve localization statuses\", compInstanceId);\r\n    lclizationRetrieverFuture = scheduler.executorService.scheduleAtFixedRate(new LocalizationStatusRetriever(scheduler, containerId, this), 0, 1, TimeUnit.SECONDS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "cancelLclRetriever",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void cancelLclRetriever()\n{\r\n    if (lclizationRetrieverFuture != null && !lclizationRetrieverFuture.isDone()) {\r\n        LOG.info(\"{} cancelling localization retriever\", compInstanceId);\r\n        lclizationRetrieverFuture.cancel(true);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "isLclRetrieverActive",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isLclRetrieverActive()\n{\r\n    return lclizationRetrieverFuture != null && !lclizationRetrieverFuture.isCancelled() && !lclizationRetrieverFuture.isDone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getHostname",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getHostname()\n{\r\n    return getCompInstanceName() + getComponent().getHostnameSuffix();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "compareTo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int compareTo(ComponentInstance to)\n{\r\n    return getCompInstanceId().compareTo(to.getCompInstanceId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o)\r\n        return true;\r\n    if (o == null || getClass() != o.getClass())\r\n        return false;\r\n    ComponentInstance instance = (ComponentInstance) o;\r\n    if (containerStartedTime != instance.containerStartedTime)\r\n        return false;\r\n    return compInstanceId.equals(instance.compInstanceId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    int result = compInstanceId.hashCode();\r\n    result = 31 * result + (int) (containerStartedTime ^ (containerStartedTime >>> 32));\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "getContainerSpec",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "org.apache.hadoop.yarn.service.api.records.Container getContainerSpec()\n{\r\n    readLock.lock();\r\n    try {\r\n        return containerSpec;\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "start",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Duration start()\n{\r\n    start = now();\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    finish();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "finish",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void finish()\n{\r\n    finish = now();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "now",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long now()\n{\r\n    return System.nanoTime() / 1000000;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getInterval",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getInterval()\n{\r\n    return finish - start;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getLimitExceeded",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean getLimitExceeded()\n{\r\n    return limit >= 0 && ((now() - start) > limit);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(\"Duration\");\r\n    if (finish >= start) {\r\n        builder.append(\" finished at \").append(getInterval()).append(\" millis;\");\r\n    } else {\r\n        if (start > 0) {\r\n            builder.append(\" started but not yet finished;\");\r\n        } else {\r\n            builder.append(\" unstarted;\");\r\n        }\r\n    }\r\n    if (limit > 0) {\r\n        builder.append(\" limit: \").append(limit).append(\" millis\");\r\n        if (getLimitExceeded()) {\r\n            builder.append(\" -  exceeded\");\r\n        }\r\n    }\r\n    return builder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "name",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service name(String name)\n{\r\n    this.name = name;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "id",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service id(String id)\n{\r\n    this.id = id;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVersion()\n{\r\n    return version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVersion(String version)\n{\r\n    this.version = version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "version",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service version(String version)\n{\r\n    this.version = version;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getDescription",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDescription()\n{\r\n    return description;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setDescription",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDescription(String description)\n{\r\n    this.description = description;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "description",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service description(String description)\n{\r\n    this.description = description;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "artifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service artifact(Artifact artifact)\n{\r\n    this.artifact = artifact;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getArtifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Artifact getArtifact()\n{\r\n    return artifact;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setArtifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setArtifact(Artifact artifact)\n{\r\n    this.artifact = artifact;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "resource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service resource(Resource resource)\n{\r\n    this.resource = resource;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getResource()\n{\r\n    return resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResource(Resource resource)\n{\r\n    this.resource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "launchTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Service launchTime(Date launchTime)\n{\r\n    this.launchTime = launchTime == null ? null : (Date) launchTime.clone();\r\n    return this;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getLaunchTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Date getLaunchTime()\n{\r\n    return launchTime == null ? null : (Date) launchTime.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setLaunchTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setLaunchTime(Date launchTime)\n{\r\n    this.launchTime = launchTime == null ? null : (Date) launchTime.clone();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "numberOfRunningContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service numberOfRunningContainers(Long numberOfRunningContainers)\n{\r\n    this.numberOfRunningContainers = numberOfRunningContainers;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getNumberOfRunningContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getNumberOfRunningContainers()\n{\r\n    return numberOfRunningContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setNumberOfRunningContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNumberOfRunningContainers(Long numberOfRunningContainers)\n{\r\n    this.numberOfRunningContainers = numberOfRunningContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "lifetime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service lifetime(Long lifetime)\n{\r\n    this.lifetime = lifetime;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getLifetime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getLifetime()\n{\r\n    return lifetime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setLifetime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLifetime(Long lifetime)\n{\r\n    this.lifetime = lifetime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "components",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service components(List<Component> components)\n{\r\n    this.components = components;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getComponents",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Component> getComponents()\n{\r\n    return components;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setComponents",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setComponents(List<Component> components)\n{\r\n    this.components = components;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "addComponent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addComponent(Component component)\n{\r\n    components.add(component);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getComponent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Component getComponent(String name)\n{\r\n    for (Component component : components) {\r\n        if (component.getName().equals(name)) {\r\n            return component;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "configuration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service configuration(Configuration configuration)\n{\r\n    this.configuration = configuration;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConfiguration()\n{\r\n    return configuration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConfiguration(Configuration configuration)\n{\r\n    this.configuration = configuration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "state",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service state(ServiceState state)\n{\r\n    this.state = state;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceState getState()\n{\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setState(ServiceState state)\n{\r\n    this.state = state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "quicklinks",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service quicklinks(Map<String, String> quicklinks)\n{\r\n    this.quicklinks = quicklinks;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getQuicklinks",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, String> getQuicklinks()\n{\r\n    return quicklinks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setQuicklinks",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setQuicklinks(Map<String, String> quicklinks)\n{\r\n    this.quicklinks = quicklinks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "queue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service queue(String queue)\n{\r\n    this.queue = queue;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getQueue()\n{\r\n    return queue;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setQueue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setQueue(String queue)\n{\r\n    this.queue = queue;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getDependencies",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<String> getDependencies()\n{\r\n    return dependencies;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setDependencies",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDependencies(List<String> dependencies)\n{\r\n    this.dependencies = dependencies;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "kerberosPrincipal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service kerberosPrincipal(KerberosPrincipal kerberosPrincipal)\n{\r\n    this.kerberosPrincipal = kerberosPrincipal;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getKerberosPrincipal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "KerberosPrincipal getKerberosPrincipal()\n{\r\n    return kerberosPrincipal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setKerberosPrincipal",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setKerberosPrincipal(KerberosPrincipal kerberosPrincipal)\n{\r\n    this.kerberosPrincipal = kerberosPrincipal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "dockerClientConfig",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service dockerClientConfig(String dockerClientConfig)\n{\r\n    this.dockerClientConfig = dockerClientConfig;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getDockerClientConfig",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDockerClientConfig()\n{\r\n    return dockerClientConfig;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setDockerClientConfig",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDockerClientConfig(String dockerClientConfig)\n{\r\n    this.dockerClientConfig = dockerClientConfig;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    Service service = (Service) o;\r\n    return Objects.equals(this.name, service.name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Service {\\n\").append(\"    name: \").append(toIndentedString(name)).append(\"\\n\").append(\"    id: \").append(toIndentedString(id)).append(\"\\n\").append(\"    version: \").append(toIndentedString(version)).append(\"\\n\").append(\"    description: \").append(toIndentedString(description)).append(\"\\n\").append(\"    artifact: \").append(toIndentedString(artifact)).append(\"\\n\").append(\"    resource: \").append(toIndentedString(resource)).append(\"\\n\").append(\"    launchTime: \").append(toIndentedString(launchTime)).append(\"\\n\").append(\"    numberOfRunningContainers: \").append(toIndentedString(numberOfRunningContainers)).append(\"\\n\").append(\"    lifetime: \").append(toIndentedString(lifetime)).append(\"\\n\").append(\"    components: \").append(toIndentedString(components)).append(\"\\n\").append(\"    configuration: \").append(toIndentedString(configuration)).append(\"\\n\").append(\"    state: \").append(toIndentedString(state)).append(\"\\n\").append(\"    quicklinks: \").append(toIndentedString(quicklinks)).append(\"\\n\").append(\"    queue: \").append(toIndentedString(queue)).append(\"\\n\").append(\"    kerberosPrincipal: \").append(toIndentedString(kerberosPrincipal)).append(\"\\n\").append(\"    dockerClientConfig: \").append(toIndentedString(dockerClientConfig)).append(\"\\n\").append(\"    dependencies: \").append(toIndentedString(dependencies)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "save",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void save(File dest) throws IOException\n{\r\n    FileUtils.writeStringToFile(dest, asString(), StandardCharsets.UTF_8);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "save",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void save(OutputStream out) throws IOException\n{\r\n    IOUtils.write(asString(), out, Charsets.UTF_8);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "asString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String asString() throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createOutputter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "PublishedConfigurationOutputter createOutputter(ConfigFormat format, PublishedConfiguration owner)\n{\r\n    Preconditions.checkNotNull(owner);\r\n    switch(format) {\r\n        case XML:\r\n        case HADOOP_XML:\r\n            return new XmlOutputter(owner);\r\n        case PROPERTIES:\r\n            return new PropertiesOutputter(owner);\r\n        case JSON:\r\n            return new JsonOutputter(owner);\r\n        case TEMPLATE:\r\n            return new TemplateOutputter(owner);\r\n        case YAML:\r\n            return new YamlOutputter(owner);\r\n        default:\r\n            throw new RuntimeException(\"Unsupported format :\" + format);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "yarnApplicationClasspath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<String> yarnApplicationClasspath(Configuration config)\n{\r\n    String[] cp = config.getTrimmedStrings(YarnConfiguration.YARN_APPLICATION_CLASSPATH, YarnConfiguration.DEFAULT_YARN_CROSS_PLATFORM_APPLICATION_CLASSPATH);\r\n    return cp != null ? Arrays.asList(cp) : new ArrayList<String>(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return buildClasspath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "buildClasspath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String buildClasspath()\n{\r\n    return ServiceUtils.join(pathElements, CLASS_PATH_SEPARATOR, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "getPathElements",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getPathElements()\n{\r\n    return Collections.unmodifiableList(pathElements);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "append",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void append(String path)\n{\r\n    pathElements.add(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "insert",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void insert(String path)\n{\r\n    pathElements.add(0, path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "appendAll",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void appendAll(Collection<String> paths)\n{\r\n    pathElements.addAll(paths);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "insertAll",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void insertAll(Collection<String> paths)\n{\r\n    pathElements.addAll(0, paths);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "addLibDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addLibDir(String pathToLibDir)\n{\r\n    append(buildLibDir(pathToLibDir));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "insertLibDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void insertLibDir(String pathToLibDir)\n{\r\n    insert(buildLibDir(pathToLibDir));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "addClassDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addClassDirectory(String pathToDir)\n{\r\n    append(appendDirectoryTerminator(pathToDir));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "insertClassDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void insertClassDirectory(String pathToDir)\n{\r\n    insert(buildLibDir(appendDirectoryTerminator(pathToDir)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "addRemoteClasspathEnvVar",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addRemoteClasspathEnvVar()\n{\r\n    append(ApplicationConstants.Environment.CLASSPATH.$$());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "insertRemoteClasspathEnvVar",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void insertRemoteClasspathEnvVar()\n{\r\n    append(ApplicationConstants.Environment.CLASSPATH.$$());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "buildLibDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String buildLibDir(String pathToLibDir)\n{\r\n    String dir = appendDirectoryTerminator(pathToLibDir);\r\n    dir += \"*\";\r\n    return dir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "appendDirectoryTerminator",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String appendDirectoryTerminator(String pathToLibDir)\n{\r\n    String dir = pathToLibDir.trim();\r\n    if (!dir.endsWith(\"/\")) {\r\n        dir += \"/\";\r\n    }\r\n    return dir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "splitClasspath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Collection<String> splitClasspath(String localpath)\n{\r\n    String separator = System.getProperty(\"path.separator\");\r\n    return StringUtils.getStringCollection(localpath, separator);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "localJVMClasspath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<String> localJVMClasspath()\n{\r\n    return splitClasspath(System.getProperty(\"java.class.path\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "profile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource profile(String profile)\n{\r\n    this.profile = profile;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getProfile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getProfile()\n{\r\n    return profile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setProfile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setProfile(String profile)\n{\r\n    this.profile = profile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "cpus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource cpus(Integer cpus)\n{\r\n    this.cpus = cpus;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getCpus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Integer getCpus()\n{\r\n    return cpus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setCpus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCpus(Integer cpus)\n{\r\n    this.cpus = cpus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "memory",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource memory(String memory)\n{\r\n    this.memory = memory;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getMemory",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getMemory()\n{\r\n    return memory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setMemory",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMemory(String memory)\n{\r\n    this.memory = memory;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "calcMemoryMB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long calcMemoryMB()\n{\r\n    if (this.memory == null) {\r\n        return 0;\r\n    }\r\n    return Long.parseLong(memory);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setResourceInformations",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource setResourceInformations(Map<String, ResourceInformation> resourceInformations)\n{\r\n    this.additional = resourceInformations;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "resourceInformations",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource resourceInformations(Map<String, ResourceInformation> resourceInformations)\n{\r\n    this.additional = resourceInformations;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getAdditional",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, ResourceInformation> getAdditional()\n{\r\n    return additional;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    Resource resource = (Resource) o;\r\n    return Objects.equals(this.profile, resource.profile) && Objects.equals(this.cpus, resource.cpus) && Objects.equals(this.memory, resource.memory) && Objects.equals(this.additional, resource.additional);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(profile, cpus, memory, additional);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Resource {\\n\").append(\"    profile: \").append(toIndentedString(profile)).append(\"\\n\").append(\"    cpus: \").append(toIndentedString(cpus)).append(\"\\n\").append(\"    memory: \").append(toIndentedString(memory)).append(\"\\n\").append(\"    additional: \").append(toIndentedString(additional)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "clone",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Object clone() throws CloneNotSupportedException\n{\r\n    return super.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(org.apache.hadoop.conf.Configuration configuration) throws Exception\n{\r\n    addService(timelineClient);\r\n    super.serviceInit(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    stopped = true;\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "isStopped",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isStopped()\n{\r\n    return stopped;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "serviceAttemptRegistered",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void serviceAttemptRegistered(Service service, org.apache.hadoop.conf.Configuration systemConf)\n{\r\n    long currentTimeMillis = service.getLaunchTime() == null ? System.currentTimeMillis() : service.getLaunchTime().getTime();\r\n    TimelineEntity entity = createServiceAttemptEntity(service.getId());\r\n    entity.setCreatedTime(currentTimeMillis);\r\n    Map<String, Object> entityInfos = new HashMap<String, Object>();\r\n    entityInfos.put(ServiceTimelineMetricsConstants.NAME, service.getName());\r\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE, ServiceState.STARTED.toString());\r\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME, currentTimeMillis);\r\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS, service.getQuicklinks());\r\n    entity.addInfo(entityInfos);\r\n    TimelineEvent startEvent = new TimelineEvent();\r\n    startEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString());\r\n    startEvent.setTimestamp(currentTimeMillis);\r\n    entity.addEvent(startEvent);\r\n    putEntity(entity);\r\n    populateTimelineEntity(systemConf.iterator(), service.getId(), ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\r\n    publishContainerConf(service.getConfiguration(), service.getId(), ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\r\n    publishComponents(service.getComponents());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "serviceAttemptUpdated",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceAttemptUpdated(Service service)\n{\r\n    TimelineEntity entity = createServiceAttemptEntity(service.getId());\r\n    entity.addInfo(ServiceTimelineMetricsConstants.QUICK_LINKS, service.getQuicklinks());\r\n    putEntity(entity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "serviceAttemptUnregistered",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void serviceAttemptUnregistered(ServiceContext context, FinalApplicationStatus status, String diagnostics)\n{\r\n    TimelineEntity entity = createServiceAttemptEntity(context.attemptId.getApplicationId().toString());\r\n    Map<String, Object> entityInfos = new HashMap<String, Object>();\r\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE, status);\r\n    entityInfos.put(DIAGNOSTICS_INFO, diagnostics);\r\n    entity.addInfo(entityInfos);\r\n    TimelineEvent finishEvent = new TimelineEvent();\r\n    finishEvent.setId(ServiceTimelineEvent.SERVICE_ATTEMPT_UNREGISTERED.toString());\r\n    finishEvent.setTimestamp(System.currentTimeMillis());\r\n    entity.addEvent(finishEvent);\r\n    putEntity(entity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "componentInstanceStarted",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void componentInstanceStarted(Container container, ComponentInstance instance)\n{\r\n    TimelineEntity entity = createComponentInstanceEntity(container.getId());\r\n    entity.setCreatedTime(container.getLaunchTime().getTime());\r\n    Map<String, Object> entityInfos = new HashMap<String, Object>();\r\n    entityInfos.put(ServiceTimelineMetricsConstants.BARE_HOST, container.getBareHost());\r\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE, container.getState().toString());\r\n    entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_TIME, container.getLaunchTime().getTime());\r\n    entityInfos.put(ServiceTimelineMetricsConstants.COMPONENT_NAME, instance.getCompName());\r\n    entityInfos.put(ServiceTimelineMetricsConstants.COMPONENT_INSTANCE_NAME, instance.getCompInstanceName());\r\n    entity.addInfo(entityInfos);\r\n    TimelineEvent startEvent = new TimelineEvent();\r\n    startEvent.setId(ServiceTimelineEvent.COMPONENT_INSTANCE_REGISTERED.toString());\r\n    startEvent.setTimestamp(container.getLaunchTime().getTime());\r\n    entity.addEvent(startEvent);\r\n    putEntity(entity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "componentInstanceFinished",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void componentInstanceFinished(ContainerId containerId, int exitCode, ContainerState state, String diagnostics)\n{\r\n    TimelineEntity entity = createComponentInstanceEntity(containerId.toString());\r\n    Map<String, Object> entityInfos = new HashMap<String, Object>();\r\n    entityInfos.put(ServiceTimelineMetricsConstants.EXIT_STATUS_CODE, exitCode);\r\n    entityInfos.put(DIAGNOSTICS_INFO, diagnostics);\r\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE, state);\r\n    entity.addInfo(entityInfos);\r\n    TimelineEvent startEvent = new TimelineEvent();\r\n    startEvent.setId(ServiceTimelineEvent.COMPONENT_INSTANCE_UNREGISTERED.toString());\r\n    startEvent.setTimestamp(System.currentTimeMillis());\r\n    entity.addEvent(startEvent);\r\n    putEntity(entity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "componentInstanceIPHostUpdated",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void componentInstanceIPHostUpdated(Container container)\n{\r\n    TimelineEntity entity = createComponentInstanceEntity(container.getId());\r\n    Map<String, Object> entityInfos = new HashMap<String, Object>();\r\n    entityInfos.put(ServiceTimelineMetricsConstants.IP, container.getIp());\r\n    entityInfos.put(ServiceTimelineMetricsConstants.EXPOSED_PORTS, container.getExposedPorts());\r\n    entityInfos.put(ServiceTimelineMetricsConstants.HOSTNAME, container.getHostname());\r\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE, container.getState().toString());\r\n    entity.addInfo(entityInfos);\r\n    TimelineEvent updateEvent = new TimelineEvent();\r\n    updateEvent.setId(ServiceTimelineEvent.COMPONENT_INSTANCE_IP_HOST_UPDATE.toString());\r\n    updateEvent.setTimestamp(System.currentTimeMillis());\r\n    entity.addEvent(updateEvent);\r\n    putEntity(entity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "componentInstanceBecomeReady",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void componentInstanceBecomeReady(Container container)\n{\r\n    TimelineEntity entity = createComponentInstanceEntity(container.getId());\r\n    Map<String, Object> entityInfo = new HashMap<>();\r\n    entityInfo.put(ServiceTimelineMetricsConstants.STATE, READY);\r\n    entity.addInfo(entityInfo);\r\n    TimelineEvent updateEvent = new TimelineEvent();\r\n    updateEvent.setId(ServiceTimelineEvent.COMPONENT_INSTANCE_BECOME_READY.toString());\r\n    updateEvent.setTimestamp(System.currentTimeMillis());\r\n    entity.addEvent(updateEvent);\r\n    putEntity(entity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "publishComponents",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void publishComponents(List<Component> components)\n{\r\n    long currentTimeMillis = System.currentTimeMillis();\r\n    for (Component component : components) {\r\n        TimelineEntity entity = createComponentEntity(component.getName());\r\n        entity.setCreatedTime(currentTimeMillis);\r\n        Map<String, Object> entityInfos = new HashMap<String, Object>();\r\n        if (component.getArtifact() != null) {\r\n            entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_ID, component.getArtifact().getId());\r\n            entityInfos.put(ServiceTimelineMetricsConstants.ARTIFACT_TYPE, component.getArtifact().getType().toString());\r\n        }\r\n        if (component.getResource() != null) {\r\n            entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_CPU, component.getResource().getCpus());\r\n            entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_MEMORY, component.getResource().getMemory());\r\n            if (component.getResource().getProfile() != null) {\r\n                entityInfos.put(ServiceTimelineMetricsConstants.RESOURCE_PROFILE, component.getResource().getProfile());\r\n            }\r\n        }\r\n        if (component.getLaunchCommand() != null) {\r\n            entityInfos.put(ServiceTimelineMetricsConstants.LAUNCH_COMMAND, component.getLaunchCommand());\r\n        }\r\n        entityInfos.put(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER, component.getRunPrivilegedContainer().toString());\r\n        entity.addInfo(entityInfos);\r\n        putEntity(entity);\r\n        publishContainerConf(component.getConfiguration(), component.getName(), ServiceTimelineEntityType.COMPONENT.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "publishContainerConf",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void publishContainerConf(Configuration configuration, String entityId, String entityType)\n{\r\n    populateTimelineEntity(configuration.getEnv().entrySet().iterator(), entityId, entityType);\r\n    for (ConfigFile configFile : configuration.getFiles()) {\r\n        populateTimelineEntity(configFile.getProperties().entrySet().iterator(), entityId, entityType);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "populateTimelineEntity",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void populateTimelineEntity(Iterator<Entry<String, String>> iterator, String entityId, String entityType)\n{\r\n    int configSize = 0;\r\n    TimelineEntity entity = createTimelineEntity(entityId, entityType);\r\n    while (iterator.hasNext()) {\r\n        Entry<String, String> entry = iterator.next();\r\n        int size = entry.getKey().length() + entry.getValue().length();\r\n        configSize += size;\r\n        if (configSize > ATS_CONFIG_PUBLISH_SIZE_BYTES) {\r\n            if (entity.getConfigs().size() > 0) {\r\n                putEntity(entity);\r\n                entity = createTimelineEntity(entityId, entityType);\r\n            }\r\n            configSize = size;\r\n        }\r\n        entity.addConfig(entry.getKey(), entry.getValue());\r\n    }\r\n    if (configSize > 0) {\r\n        putEntity(entity);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "publishMetrics",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void publishMetrics(Iterable<AbstractMetric> metrics, String entityId, String entityType, long timestamp)\n{\r\n    TimelineEntity entity = createTimelineEntity(entityId, entityType);\r\n    Set<TimelineMetric> entityMetrics = new HashSet<TimelineMetric>();\r\n    for (AbstractMetric metric : metrics) {\r\n        TimelineMetric timelineMetric = new TimelineMetric();\r\n        timelineMetric.setId(metric.name());\r\n        timelineMetric.addValue(timestamp, metric.value());\r\n        entityMetrics.add(timelineMetric);\r\n    }\r\n    entity.setMetrics(entityMetrics);\r\n    putEntity(entity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "createServiceAttemptEntity",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity createServiceAttemptEntity(String serviceId)\n{\r\n    TimelineEntity entity = createTimelineEntity(serviceId, ServiceTimelineEntityType.SERVICE_ATTEMPT.toString());\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "createComponentInstanceEntity",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity createComponentInstanceEntity(String instanceId)\n{\r\n    TimelineEntity entity = createTimelineEntity(instanceId, ServiceTimelineEntityType.COMPONENT_INSTANCE.toString());\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "createComponentEntity",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineEntity createComponentEntity(String componentId)\n{\r\n    TimelineEntity entity = createTimelineEntity(componentId, ServiceTimelineEntityType.COMPONENT.toString());\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "createTimelineEntity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TimelineEntity createTimelineEntity(String entityId, String entityType)\n{\r\n    TimelineEntity entity = new TimelineEntity();\r\n    entity.setId(entityId);\r\n    entity.setType(entityType);\r\n    return entity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "putEntity",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void putEntity(TimelineEntity entity)\n{\r\n    try {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(\"Publishing the entity \" + entity + \", JSON-style content: \" + TimelineUtils.dumpTimelineRecordtoJSON(entity));\r\n        }\r\n        if (timelineClient != null) {\r\n            timelineClient.putEntitiesAsync(entity);\r\n        } else {\r\n            log.error(\"Seems like client has been removed before the entity \" + \"could be published for \" + entity);\r\n        }\r\n    } catch (Exception e) {\r\n        log.error(\"Error when publishing entity \" + entity, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "componentFinished",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void componentFinished(Component comp, ComponentState state, long finishTime)\n{\r\n    createComponentEntity(comp.getName());\r\n    TimelineEntity entity = createComponentEntity(comp.getName());\r\n    Map<String, Object> entityInfos = new HashMap<String, Object>();\r\n    entityInfos.put(ServiceTimelineMetricsConstants.STATE, state);\r\n    entity.addInfo(entityInfos);\r\n    TimelineEvent startEvent = new TimelineEvent();\r\n    startEvent.setId(ServiceTimelineEvent.COMPONENT_FINISHED.toString());\r\n    startEvent.setTimestamp(finishTime);\r\n    entity.addEvent(startEvent);\r\n    putEntity(entity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor",
  "methodName" : "run",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void run()\n{\r\n    LOG.debug(\"ComponentHealthThresholdMonitor run method\");\r\n    long desiredContainerCount = component.getNumDesiredInstances();\r\n    if (desiredContainerCount == 0) {\r\n        return;\r\n    }\r\n    long readyContainerCount = component.getNumReadyInstances();\r\n    float thresholdFraction = (float) healthThresholdPercent / 100;\r\n    float readyContainerFraction = (float) readyContainerCount / desiredContainerCount;\r\n    boolean healthChanged = false;\r\n    if (Math.abs(readyContainerFraction - prevReadyContainerFraction) > .0000001) {\r\n        prevReadyContainerFraction = readyContainerFraction;\r\n        healthChanged = true;\r\n    }\r\n    String readyContainerPercentStr = String.format(\"%.2f\", readyContainerFraction * 100);\r\n    if (readyContainerFraction < thresholdFraction) {\r\n        long currentTimestamp = System.nanoTime();\r\n        if (firstOccurrenceTimestamp == 0) {\r\n            firstOccurrenceTimestamp = currentTimestamp;\r\n            Date date = new Date();\r\n            LOG.info(\"[COMPONENT {}] Health has gone below threshold. Starting health \" + \"threshold timer at ts = {} ({})\", component.getName(), date.getTime(), date);\r\n        }\r\n        long elapsedTime = currentTimestamp - firstOccurrenceTimestamp;\r\n        long elapsedTimeSecs = TimeUnit.SECONDS.convert(elapsedTime, TimeUnit.NANOSECONDS);\r\n        LOG.warn(\"[COMPONENT {}] Current health {}% is below health threshold of \" + \"{}% for {} secs (threshold window = {} secs)\", component.getName(), readyContainerPercentStr, healthThresholdPercent, elapsedTimeSecs, healthThresholdWindowSecs);\r\n        if (elapsedTime > healthThresholdWindowNanos) {\r\n            LOG.warn(\"[COMPONENT {}] Current health {}% has been below health \" + \"threshold of {}% for {} secs (threshold window = {} secs)\", component.getName(), readyContainerPercentStr, healthThresholdPercent, elapsedTimeSecs, healthThresholdWindowSecs);\r\n            String exitDiag = String.format(\"Service is being killed because container health for component \" + \"%s was %s%% (health threshold = %d%%) for %d secs \" + \"(threshold window = %d secs)\", component.getName(), readyContainerPercentStr, healthThresholdPercent, elapsedTimeSecs, healthThresholdWindowSecs);\r\n            component.getScheduler().getDiagnostics().append(exitDiag);\r\n            LOG.warn(exitDiag);\r\n            try {\r\n                Thread.sleep(5000);\r\n            } catch (InterruptedException e) {\r\n                LOG.error(\"Interrupted on sleep while exiting.\", e);\r\n            }\r\n            ExitUtil.terminate(-1);\r\n        }\r\n    } else {\r\n        String logMsg = \"[COMPONENT {}] Health threshold = {}%, Current health \" + \"= {}% (Current Ready count = {}, Desired count = {})\";\r\n        if (healthChanged) {\r\n            LOG.info(logMsg, component.getName(), healthThresholdPercent, readyContainerPercentStr, readyContainerCount, desiredContainerCount);\r\n        } else {\r\n            LOG.debug(logMsg, component.getName(), healthThresholdPercent, readyContainerPercentStr, readyContainerCount, desiredContainerCount);\r\n        }\r\n        if (firstOccurrenceTimestamp != 0) {\r\n            Date date = new Date();\r\n            LOG.info(\"[COMPONENT {}] Health recovered above threshold at ts = {} ({})\", component.getName(), date.getTime(), date);\r\n            firstOccurrenceTimestamp = 0;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "toString",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    try {\r\n        return ApplicationReportSerDeser.toString(this);\r\n    } catch (IOException e) {\r\n        return super.toString();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "value",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceInformation value(Long value)\n{\r\n    this.value = value;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "tags",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceInformation tags(Set<String> resourceTags)\n{\r\n    this.tags = resourceTags;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getTags",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Set<String> getTags()\n{\r\n    return tags == null ? ImmutableSet.of() : tags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getAttributes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, String> getAttributes()\n{\r\n    return attributes == null ? ImmutableMap.of() : attributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "attributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceInformation attributes(Map<String, String> attributes)\n{\r\n    this.attributes = attributes;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getValue()\n{\r\n    return value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setValue(Long value)\n{\r\n    this.value = value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "unit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ResourceInformation unit(String unit)\n{\r\n    this.unit = unit;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getUnit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUnit()\n{\r\n    return unit == null ? \"\" : unit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setUnit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUnit(String unit)\n{\r\n    this.unit = unit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    ResourceInformation resourceInformation = (ResourceInformation) o;\r\n    return Objects.equals(this.value, resourceInformation.value) && Objects.equals(this.unit, resourceInformation.unit);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(value, unit);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class ResourceInformation {\\n\").append(\"    value: \").append(toIndentedString(value)).append(\"\\n\").append(\"    unit: \").append(toIndentedString(unit)).append(\"\\n\").append(\"    attributes: \").append(toIndentedString(attributes)).append(\"\\n\").append(\"    tags: \").append(toIndentedString(tags)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "name",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PlacementConstraint name(String name)\n{\r\n    this.name = name;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "type",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PlacementConstraint type(PlacementType type)\n{\r\n    this.type = type;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PlacementType getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setType(PlacementType type)\n{\r\n    this.type = type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "scope",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PlacementConstraint scope(PlacementScope scope)\n{\r\n    this.scope = scope;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getScope",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PlacementScope getScope()\n{\r\n    return scope;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setScope",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setScope(PlacementScope scope)\n{\r\n    this.scope = scope;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "targetTags",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PlacementConstraint targetTags(List<String> targetTags)\n{\r\n    this.targetTags = targetTags;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getTargetTags",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<String> getTargetTags()\n{\r\n    return targetTags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setTargetTags",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTargetTags(List<String> targetTags)\n{\r\n    this.targetTags = targetTags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "nodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PlacementConstraint nodeAttributes(Map<String, List<String>> nodeAttributes)\n{\r\n    this.nodeAttributes = nodeAttributes;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, List<String>> getNodeAttributes()\n{\r\n    return nodeAttributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodeAttributes(Map<String, List<String>> nodeAttributes)\n{\r\n    this.nodeAttributes = nodeAttributes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "nodePartitions",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PlacementConstraint nodePartitions(List<String> nodePartitions)\n{\r\n    this.nodePartitions = nodePartitions;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getNodePartitions",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<String> getNodePartitions()\n{\r\n    return nodePartitions;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setNodePartitions",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNodePartitions(List<String> nodePartitions)\n{\r\n    this.nodePartitions = nodePartitions;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "minCardinality",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PlacementConstraint minCardinality(Long minCardinality)\n{\r\n    this.minCardinality = minCardinality;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getMinCardinality",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getMinCardinality()\n{\r\n    return minCardinality;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setMinCardinality",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMinCardinality(Long minCardinality)\n{\r\n    this.minCardinality = minCardinality;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "maxCardinality",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PlacementConstraint maxCardinality(Long maxCardinality)\n{\r\n    this.maxCardinality = maxCardinality;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getMaxCardinality",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getMaxCardinality()\n{\r\n    return maxCardinality;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setMaxCardinality",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMaxCardinality(Long maxCardinality)\n{\r\n    this.maxCardinality = maxCardinality;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    PlacementConstraint placementConstraint = (PlacementConstraint) o;\r\n    return Objects.equals(this.name, placementConstraint.name) && Objects.equals(this.type, placementConstraint.type) && Objects.equals(this.scope, placementConstraint.scope) && Objects.equals(this.targetTags, placementConstraint.targetTags) && Objects.equals(this.nodeAttributes, placementConstraint.nodeAttributes) && Objects.equals(this.nodePartitions, placementConstraint.nodePartitions) && Objects.equals(this.minCardinality, placementConstraint.minCardinality) && Objects.equals(this.maxCardinality, placementConstraint.maxCardinality);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(name, type, scope, targetTags, nodeAttributes, nodePartitions, minCardinality, maxCardinality);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class PlacementConstraint {\\n\").append(\"    name: \").append(toIndentedString(name)).append(\"\\n\").append(\"    type: \").append(toIndentedString(type)).append(\"\\n\").append(\"    scope: \").append(toIndentedString(scope)).append(\"\\n\").append(\"    targetTags: \").append(toIndentedString(targetTags)).append(\"\\n\").append(\"    nodeAttributes: \").append(toIndentedString(nodeAttributes)).append(\"\\n\").append(\"    nodePartitions: \").append(toIndentedString(nodePartitions)).append(\"\\n\").append(\"    minCardinality: \").append(toIndentedString(minCardinality)).append(\"\\n\").append(\"    maxCardinality: \").append(toIndentedString(maxCardinality)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "setJsonSerDeser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setJsonSerDeser(JsonSerDeser jsd)\n{\r\n    jsonSerDeser = jsd;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validateAndResolveService",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 58,
  "sourceCodeText" : "void validateAndResolveService(Service service, SliderFileSystem fs, org.apache.hadoop.conf.Configuration conf) throws IOException\n{\r\n    boolean dnsEnabled = conf.getBoolean(RegistryConstants.KEY_DNS_ENABLED, RegistryConstants.DEFAULT_DNS_ENABLED);\r\n    if (dnsEnabled) {\r\n        if (RegistryUtils.currentUser().length() > RegistryConstants.MAX_FQDN_LABEL_LENGTH) {\r\n            throw new IllegalArgumentException(RestApiErrorMessages.ERROR_USER_NAME_INVALID);\r\n        }\r\n        userNamePattern.validate(RegistryUtils.currentUser());\r\n    }\r\n    if (StringUtils.isEmpty(service.getName())) {\r\n        throw new IllegalArgumentException(RestApiErrorMessages.ERROR_APPLICATION_NAME_INVALID);\r\n    }\r\n    if (StringUtils.isEmpty(service.getVersion())) {\r\n        throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_APPLICATION_VERSION_INVALID, service.getName()));\r\n    }\r\n    validateNameFormat(service.getName(), conf);\r\n    if (!hasComponent(service)) {\r\n        throw new IllegalArgumentException(\"No component specified for \" + service.getName());\r\n    }\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        validateKerberosPrincipal(service.getKerberosPrincipal());\r\n    }\r\n    try {\r\n        validateDockerClientConfiguration(service, conf);\r\n    } catch (IOException e) {\r\n        throw new IllegalArgumentException(e);\r\n    }\r\n    Configuration globalConf = service.getConfiguration();\r\n    Set<String> componentNames = new HashSet<>();\r\n    List<Component> componentsToRemove = new ArrayList<>();\r\n    List<Component> componentsToAdd = new ArrayList<>();\r\n    for (Component comp : service.getComponents()) {\r\n        int maxCompLength = RegistryConstants.MAX_FQDN_LABEL_LENGTH;\r\n        maxCompLength = maxCompLength - Long.toString(Long.MAX_VALUE).length();\r\n        if (dnsEnabled && comp.getName().length() > maxCompLength) {\r\n            throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_COMPONENT_NAME_INVALID, maxCompLength, comp.getName()));\r\n        }\r\n        if (service.getName().equals(comp.getName())) {\r\n            throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_COMPONENT_NAME_CONFLICTS_WITH_SERVICE_NAME, comp.getName(), service.getName()));\r\n        }\r\n        if (componentNames.contains(comp.getName())) {\r\n            throw new IllegalArgumentException(\"Component name collision: \" + comp.getName());\r\n        }\r\n        if (comp.getArtifact() != null && comp.getArtifact().getType() == Artifact.TypeEnum.SERVICE) {\r\n            if (StringUtils.isEmpty(comp.getArtifact().getId())) {\r\n                throw new IllegalArgumentException(RestApiErrorMessages.ERROR_ARTIFACT_ID_INVALID);\r\n            }\r\n            LOG.info(\"Marking {} for removal\", comp.getName());\r\n            componentsToRemove.add(comp);\r\n            List<Component> externalComponents = getComponents(fs, comp.getArtifact().getId());\r\n            for (Component c : externalComponents) {\r\n                Component override = service.getComponent(c.getName());\r\n                if (override != null && override.getArtifact() == null) {\r\n                    override.mergeFrom(c);\r\n                    LOG.info(\"Merging external component {} from external {}\", c.getName(), comp.getName());\r\n                } else {\r\n                    if (componentNames.contains(c.getName())) {\r\n                        throw new IllegalArgumentException(\"Component name collision: \" + c.getName());\r\n                    }\r\n                    componentNames.add(c.getName());\r\n                    componentsToAdd.add(c);\r\n                    LOG.info(\"Adding component {} from external {}\", c.getName(), comp.getName());\r\n                }\r\n            }\r\n        } else {\r\n            componentNames.add(comp.getName());\r\n            comp.getConfiguration().mergeFrom(globalConf);\r\n        }\r\n    }\r\n    service.getComponents().removeAll(componentsToRemove);\r\n    service.getComponents().addAll(componentsToAdd);\r\n    Artifact globalArtifact = service.getArtifact();\r\n    Resource globalResource = service.getResource();\r\n    for (Component comp : service.getComponents()) {\r\n        if (comp.getArtifact() == null && service.getArtifact() != null && service.getArtifact().getType() != Artifact.TypeEnum.SERVICE) {\r\n            comp.setArtifact(globalArtifact);\r\n        }\r\n        if (comp.getResource() == null) {\r\n            comp.setResource(globalResource);\r\n        }\r\n        if (comp.getDependencies() != null) {\r\n            for (String dependency : comp.getDependencies()) {\r\n                if (!componentNames.contains(dependency)) {\r\n                    throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_DEPENDENCY_INVALID, dependency, comp.getName()));\r\n                }\r\n            }\r\n        }\r\n        validateComponent(comp, fs.getFileSystem(), conf);\r\n    }\r\n    validatePlacementPolicy(service.getComponents(), componentNames);\r\n    sortByDependencies(service.getComponents());\r\n    if (service.getLifetime() == null) {\r\n        service.setLifetime(RestApiConstants.DEFAULT_UNLIMITED_LIFETIME);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validateJvmOpts",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void validateJvmOpts(String jvmOpts) throws IllegalArgumentException\n{\r\n    Pattern pattern = Pattern.compile(\"[!~#?@*&%${}()<>\\\\[\\\\]|\\\",`;]\");\r\n    Matcher matcher = pattern.matcher(jvmOpts);\r\n    if (matcher.find()) {\r\n        throw new IllegalArgumentException(RestApiErrorMessages.ERROR_JVM_OPTS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validateKerberosPrincipal",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void validateKerberosPrincipal(KerberosPrincipal kerberosPrincipal) throws IOException\n{\r\n    if (!StringUtils.isEmpty(kerberosPrincipal.getPrincipalName())) {\r\n        if (!kerberosPrincipal.getPrincipalName().contains(\"/\")) {\r\n            throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_KERBEROS_PRINCIPAL_NAME_FORMAT, kerberosPrincipal.getPrincipalName()));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validateDockerClientConfiguration",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void validateDockerClientConfiguration(Service service, org.apache.hadoop.conf.Configuration conf) throws IOException\n{\r\n    String dockerClientConfig = service.getDockerClientConfig();\r\n    if (!StringUtils.isEmpty(dockerClientConfig)) {\r\n        Path dockerClientConfigPath = new Path(dockerClientConfig);\r\n        FileSystem fs = dockerClientConfigPath.getFileSystem(conf);\r\n        LOG.info(\"The supplied Docker client config is \" + dockerClientConfig);\r\n        if (!fs.exists(dockerClientConfigPath)) {\r\n            throw new IOException(\"The supplied Docker client config does not exist: \" + dockerClientConfig);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validateComponent",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void validateComponent(Component comp, FileSystem fs, org.apache.hadoop.conf.Configuration conf) throws IOException\n{\r\n    validateNameFormat(comp.getName(), conf);\r\n    AbstractClientProvider compClientProvider = ProviderFactory.getClientProvider(comp.getArtifact());\r\n    compClientProvider.validateArtifact(comp.getArtifact(), comp.getName(), fs);\r\n    if (comp.getLaunchCommand() == null && (comp.getArtifact() == null || comp.getArtifact().getType() != Artifact.TypeEnum.DOCKER)) {\r\n        throw new IllegalArgumentException(RestApiErrorMessages.ERROR_ABSENT_LAUNCH_COMMAND);\r\n    }\r\n    validateServiceResource(comp.getResource(), comp);\r\n    if (comp.getNumberOfContainers() == null || comp.getNumberOfContainers() < 0) {\r\n        throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_CONTAINERS_COUNT_FOR_COMP_INVALID + \": \" + comp.getNumberOfContainers(), comp.getName()));\r\n    }\r\n    compClientProvider.validateConfigFiles(comp.getConfiguration().getFiles(), comp.getName(), fs);\r\n    MonitorUtils.getProbe(comp.getReadinessCheck());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validateNameFormat",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void validateNameFormat(String name, org.apache.hadoop.conf.Configuration conf)\n{\r\n    if (StringUtils.isEmpty(name)) {\r\n        throw new IllegalArgumentException(\"Name can not be empty!\");\r\n    }\r\n    if (name.contains(\"_\")) {\r\n        throw new IllegalArgumentException(\"Invalid format: \" + name + \", can not use '_', as DNS hostname does not allow '_'. Use '-' Instead. \");\r\n    }\r\n    boolean dnsEnabled = conf.getBoolean(RegistryConstants.KEY_DNS_ENABLED, RegistryConstants.DEFAULT_DNS_ENABLED);\r\n    if (dnsEnabled && name.length() > RegistryConstants.MAX_FQDN_LABEL_LENGTH) {\r\n        throw new IllegalArgumentException(String.format(\"Invalid format %s, must be no more than 63 characters \", name));\r\n    }\r\n    namePattern.validate(name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validatePlacementPolicy",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void validatePlacementPolicy(List<Component> components, Set<String> componentNames)\n{\r\n    for (Component comp : components) {\r\n        PlacementPolicy placementPolicy = comp.getPlacementPolicy();\r\n        if (placementPolicy != null) {\r\n            for (PlacementConstraint constraint : placementPolicy.getConstraints()) {\r\n                if (constraint.getType() == null) {\r\n                    throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_TYPE_NULL, constraint.getName() == null ? \"\" : constraint.getName() + \" \", comp.getName()));\r\n                }\r\n                if (constraint.getScope() == null) {\r\n                    throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_SCOPE_NULL, constraint.getName() == null ? \"\" : constraint.getName() + \" \", comp.getName()));\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getComponents",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<Component> getComponents(SliderFileSystem fs, String serviceName) throws IOException\n{\r\n    return loadService(fs, serviceName).getComponents();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "loadService",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Service loadService(SliderFileSystem fs, String serviceName) throws IOException\n{\r\n    Path serviceJson = getServiceJsonPath(fs, serviceName);\r\n    LOG.info(\"Loading service definition from \" + serviceJson);\r\n    return jsonSerDeser.load(fs.getFileSystem(), serviceJson);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "loadServiceUpgrade",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Service loadServiceUpgrade(SliderFileSystem fs, String serviceName, String version) throws IOException\n{\r\n    Path versionPath = fs.buildClusterUpgradeDirPath(serviceName, version);\r\n    Path versionedDef = new Path(versionPath, serviceName + \".json\");\r\n    LOG.info(\"Loading service definition from {}\", versionedDef);\r\n    return jsonSerDeser.load(fs.getFileSystem(), versionedDef);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "loadServiceFrom",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Service loadServiceFrom(SliderFileSystem fs, Path appDefPath) throws IOException\n{\r\n    LOG.info(\"Loading service definition from \" + appDefPath);\r\n    return jsonSerDeser.load(fs.getFileSystem(), appDefPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getServiceJsonPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getServiceJsonPath(SliderFileSystem fs, String serviceName)\n{\r\n    Path serviceDir = fs.buildClusterDirPath(serviceName);\r\n    return new Path(serviceDir, serviceName + \".json\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validateServiceResource",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void validateServiceResource(Resource resource, Component comp)\n{\r\n    if (resource == null) {\r\n        throw new IllegalArgumentException(comp == null ? RestApiErrorMessages.ERROR_RESOURCE_INVALID : String.format(RestApiErrorMessages.ERROR_RESOURCE_FOR_COMP_INVALID, comp.getName()));\r\n    }\r\n    if (StringUtils.isNotEmpty(resource.getProfile()) && (resource.getCpus() != null || StringUtils.isNotEmpty(resource.getMemory()))) {\r\n        throw new IllegalArgumentException(comp == null ? RestApiErrorMessages.ERROR_RESOURCE_PROFILE_MULTIPLE_VALUES_NOT_SUPPORTED : String.format(RestApiErrorMessages.ERROR_RESOURCE_PROFILE_MULTIPLE_VALUES_FOR_COMP_NOT_SUPPORTED, comp.getName()));\r\n    }\r\n    if (StringUtils.isNotEmpty(resource.getProfile())) {\r\n        throw new IllegalArgumentException(RestApiErrorMessages.ERROR_RESOURCE_PROFILE_NOT_SUPPORTED_YET);\r\n    }\r\n    String memory = resource.getMemory();\r\n    Integer cpus = resource.getCpus();\r\n    if (StringUtils.isEmpty(memory)) {\r\n        throw new IllegalArgumentException(comp == null ? RestApiErrorMessages.ERROR_RESOURCE_MEMORY_INVALID : String.format(RestApiErrorMessages.ERROR_RESOURCE_MEMORY_FOR_COMP_INVALID, comp.getName()));\r\n    }\r\n    if (cpus == null) {\r\n        throw new IllegalArgumentException(comp == null ? RestApiErrorMessages.ERROR_RESOURCE_CPUS_INVALID : String.format(RestApiErrorMessages.ERROR_RESOURCE_CPUS_FOR_COMP_INVALID, comp.getName()));\r\n    }\r\n    if (cpus <= 0) {\r\n        throw new IllegalArgumentException(comp == null ? RestApiErrorMessages.ERROR_RESOURCE_CPUS_INVALID_RANGE : String.format(RestApiErrorMessages.ERROR_RESOURCE_CPUS_FOR_COMP_INVALID_RANGE, comp.getName()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validateCompResourceSize",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void validateCompResourceSize(org.apache.hadoop.yarn.api.records.Resource maxResource, Service service) throws YarnException\n{\r\n    for (Component component : service.getComponents()) {\r\n        long mem = Long.parseLong(component.getResource().getMemory());\r\n        if (mem > maxResource.getMemorySize()) {\r\n            throw new YarnException(\"Component \" + component.getName() + \": specified memory size (\" + mem + \") is larger than configured max container memory \" + \"size (\" + maxResource.getMemorySize() + \")\");\r\n        }\r\n        int cpu = component.getResource().getCpus();\r\n        if (cpu > maxResource.getVirtualCores()) {\r\n            throw new YarnException(\"Component \" + component.getName() + \": specified number of \" + \"virtual core (\" + cpu + \") is larger than configured max \" + \"virtual core size (\" + maxResource.getVirtualCores() + \")\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "hasComponent",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean hasComponent(Service service)\n{\r\n    if (service.getComponents() == null || service.getComponents().isEmpty()) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "sortByDependencies",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Collection<Component> sortByDependencies(List<Component> components)\n{\r\n    Map<String, Component> sortedComponents = sortByDependencies(components, null);\r\n    return sortedComponents.values();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "sortByDependencies",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "Map<String, Component> sortByDependencies(List<Component> components, Map<String, Component> sortedComponents)\n{\r\n    if (sortedComponents == null) {\r\n        sortedComponents = new LinkedHashMap<>();\r\n    }\r\n    Map<String, Component> componentsToAdd = new LinkedHashMap<>();\r\n    List<Component> componentsSkipped = new ArrayList<>();\r\n    for (Component component : components) {\r\n        String name = component.getName();\r\n        if (sortedComponents.containsKey(name)) {\r\n            continue;\r\n        }\r\n        boolean dependenciesAlreadySorted = true;\r\n        if (!ServiceUtils.isEmpty(component.getDependencies())) {\r\n            for (String dependency : component.getDependencies()) {\r\n                if (!sortedComponents.containsKey(dependency)) {\r\n                    dependenciesAlreadySorted = false;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (dependenciesAlreadySorted) {\r\n            componentsToAdd.put(name, component);\r\n        } else {\r\n            componentsSkipped.add(component);\r\n        }\r\n    }\r\n    if (componentsToAdd.size() == 0) {\r\n        throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_DEPENDENCY_CYCLE, componentsSkipped));\r\n    }\r\n    sortedComponents.putAll(componentsToAdd);\r\n    if (sortedComponents.size() == components.size()) {\r\n        return sortedComponents;\r\n    }\r\n    return sortByDependencies(components, sortedComponents);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createDirAndPersistApp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createDirAndPersistApp(SliderFileSystem fs, Path appDir, Service service) throws IOException, SliderException\n{\r\n    FsPermission appDirPermission = new FsPermission(\"750\");\r\n    fs.createWithPermissions(appDir, appDirPermission);\r\n    Path appJson = writeAppDefinition(fs, appDir, service);\r\n    LOG.info(\"Persisted service {} version {} at {}\", service.getName(), service.getVersion(), appJson);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "writeAppDefinition",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path writeAppDefinition(SliderFileSystem fs, Path appDir, Service service) throws IOException\n{\r\n    Path appJson = new Path(appDir, service.getName() + \".json\");\r\n    jsonSerDeser.save(fs.getFileSystem(), appJson, service, true);\r\n    return appJson;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "writeAppDefinition",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path writeAppDefinition(SliderFileSystem fs, Service service) throws IOException\n{\r\n    Path appJson = getServiceJsonPath(fs, service.getName());\r\n    jsonSerDeser.save(fs.getFileSystem(), appJson, service, true);\r\n    return appJson;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getLiveContainers",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<Container> getLiveContainers(Service service, List<String> componentInstances) throws YarnException\n{\r\n    List<Container> result = new ArrayList<>();\r\n    Multimap<String, String> affectedComps = ArrayListMultimap.create();\r\n    for (String instanceName : componentInstances) {\r\n        affectedComps.put(ServiceApiUtil.parseComponentName(instanceName), instanceName);\r\n    }\r\n    service.getComponents().forEach(comp -> {\r\n        if (affectedComps.get(comp.getName()) != null) {\r\n            Collection<String> instanceNames = affectedComps.get(comp.getName());\r\n            comp.getContainers().forEach(container -> {\r\n                if (instanceNames.contains(container.getComponentInstanceName())) {\r\n                    result.add(container);\r\n                }\r\n            });\r\n        }\r\n    });\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validateInstancesUpgrade",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validateInstancesUpgrade(List<Container> liveContainers) throws YarnException\n{\r\n    for (Container liveContainer : liveContainers) {\r\n        if (!isUpgradable(liveContainer)) {\r\n            throw new YarnException(String.format(ERROR_COMP_INSTANCE_DOES_NOT_NEED_UPGRADE, liveContainer.getComponentInstanceName()));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "isUpgradable",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isUpgradable(Container container)\n{\r\n    return container.getState() != null && (container.getState().equals(ContainerState.NEEDS_UPGRADE) || container.getState().equals(ContainerState.FAILED_UPGRADE));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validateAndResolveCompsUpgrade",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<Container> validateAndResolveCompsUpgrade(Service liveService, Collection<String> compNames) throws YarnException\n{\r\n    Preconditions.checkNotNull(compNames);\r\n    HashSet<String> requestedComps = Sets.newHashSet(compNames);\r\n    List<Container> containerNeedUpgrade = new ArrayList<>();\r\n    for (Component liveComp : liveService.getComponents()) {\r\n        if (requestedComps.contains(liveComp.getName())) {\r\n            if (!liveComp.getState().equals(ComponentState.NEEDS_UPGRADE)) {\r\n                throw new YarnException(String.format(ERROR_COMP_DOES_NOT_NEED_UPGRADE, liveComp.getName()));\r\n            }\r\n            liveComp.getContainers().forEach(liveContainer -> {\r\n                if (isUpgradable(liveContainer)) {\r\n                    containerNeedUpgrade.add(liveContainer);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    return containerNeedUpgrade;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validateAndResolveCompsStable",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<Container> validateAndResolveCompsStable(Service liveService, Collection<String> compNames) throws YarnException\n{\r\n    Preconditions.checkNotNull(compNames);\r\n    HashSet<String> requestedComps = Sets.newHashSet(compNames);\r\n    List<Container> containerNeedUpgrade = new ArrayList<>();\r\n    for (Component liveComp : liveService.getComponents()) {\r\n        if (requestedComps.contains(liveComp.getName())) {\r\n            if (!liveComp.getState().equals(ComponentState.STABLE)) {\r\n                throw new YarnException(String.format(ERROR_COMP_DOES_NOT_NEED_UPGRADE, liveComp.getName()));\r\n            }\r\n            liveComp.getContainers().forEach(liveContainer -> {\r\n                if (liveContainer.getState().equals(ContainerState.READY)) {\r\n                    containerNeedUpgrade.add(liveContainer);\r\n                }\r\n            });\r\n        }\r\n    }\r\n    return containerNeedUpgrade;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getHostnameSuffix",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getHostnameSuffix(String serviceName, org.apache.hadoop.conf.Configuration conf)\n{\r\n    String domain = conf.get(RegistryConstants.KEY_DNS_DOMAIN);\r\n    String hostnameSuffix;\r\n    if (domain == null || domain.isEmpty()) {\r\n        hostnameSuffix = MessageFormat.format(\".{0}.{1}\", serviceName, RegistryUtils.currentUser());\r\n    } else {\r\n        hostnameSuffix = MessageFormat.format(\".{0}.{1}.{2}\", serviceName, RegistryUtils.currentUser(), domain);\r\n    }\r\n    return hostnameSuffix;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "parseAndValidateComponentInstanceName",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String parseAndValidateComponentInstanceName(String instanceOrHostname, String serviceName, org.apache.hadoop.conf.Configuration conf) throws IllegalArgumentException\n{\r\n    int idx = instanceOrHostname.indexOf('.');\r\n    String hostnameSuffix = getHostnameSuffix(serviceName, conf);\r\n    if (idx != -1) {\r\n        if (!instanceOrHostname.endsWith(hostnameSuffix)) {\r\n            throw new IllegalArgumentException(\"Specified hostname \" + instanceOrHostname + \" does not have the expected format \" + \"componentInstanceName\" + hostnameSuffix);\r\n        }\r\n        instanceOrHostname = instanceOrHostname.substring(0, instanceOrHostname.length() - hostnameSuffix.length());\r\n    }\r\n    idx = instanceOrHostname.indexOf('.');\r\n    if (idx != -1) {\r\n        throw new IllegalArgumentException(\"Specified hostname \" + instanceOrHostname + \" does not have the expected format \" + \"componentInstanceName\" + hostnameSuffix);\r\n    }\r\n    return instanceOrHostname;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "parseComponentName",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String parseComponentName(String componentInstanceName) throws YarnException\n{\r\n    int idx = componentInstanceName.indexOf('.');\r\n    if (idx != -1) {\r\n        componentInstanceName = componentInstanceName.substring(0, idx);\r\n    }\r\n    idx = componentInstanceName.lastIndexOf('-');\r\n    if (idx == -1) {\r\n        throw new YarnException(\"Invalid component instance (\" + componentInstanceName + \") name.\");\r\n    }\r\n    return componentInstanceName.substring(0, idx);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "$",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String $(String s)\n{\r\n    return \"${\" + s + \"}\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "resolveCompsDependency",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<String> resolveCompsDependency(Service service)\n{\r\n    List<String> components = new ArrayList<String>();\r\n    for (Component component : service.getComponents()) {\r\n        int depSize = component.getDependencies().size();\r\n        if (!components.contains(component.getName())) {\r\n            components.add(component.getName());\r\n        }\r\n        if (depSize != 0) {\r\n            for (String depComp : component.getDependencies()) {\r\n                if (!components.contains(depComp)) {\r\n                    components.add(0, depComp);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return components;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "serviceDependencySatisfied",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "boolean serviceDependencySatisfied(Service service)\n{\r\n    boolean result = true;\r\n    try {\r\n        List<String> dependencies = service.getDependencies();\r\n        org.apache.hadoop.conf.Configuration conf = new org.apache.hadoop.conf.Configuration();\r\n        if (dependencies != null && dependencies.size() > 0) {\r\n            ServiceClient sc = new ServiceClient();\r\n            sc.init(conf);\r\n            sc.start();\r\n            for (String dependent : dependencies) {\r\n                Service dependentService = sc.getStatus(dependent);\r\n                if (dependentService.getState() == null || !dependentService.getState().equals(ServiceState.STABLE)) {\r\n                    result = false;\r\n                    LOG.info(\"Service dependency is not satisfied for \" + \"service: {} state: {}\", dependent, dependentService.getState());\r\n                }\r\n            }\r\n            sc.close();\r\n        }\r\n    } catch (IOException | YarnException e) {\r\n        LOG.warn(\"Caught exception: \", e);\r\n        LOG.info(\"Service dependency is not satisified.\");\r\n        result = false;\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "checkServiceDependencySatisified",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void checkServiceDependencySatisified(Service service)\n{\r\n    while (!serviceDependencySatisfied(service)) {\r\n        try {\r\n            LOG.info(\"Waiting for service dependencies.\");\r\n            Thread.sleep(15000L);\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\client",
  "methodName" : "flexComponents",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FlexComponentsResponseProto flexComponents(FlexComponentsRequestProto request) throws IOException, YarnException\n{\r\n    try {\r\n        return proxy.flexComponents(null, request);\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\client",
  "methodName" : "getStatus",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetStatusResponseProto getStatus(GetStatusRequestProto request) throws IOException, YarnException\n{\r\n    try {\r\n        return proxy.getStatus(null, request);\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\client",
  "methodName" : "stop",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "StopResponseProto stop(StopRequestProto requestProto) throws IOException, YarnException\n{\r\n    try {\r\n        return proxy.stop(null, requestProto);\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\client",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (this.proxy != null) {\r\n        RPC.stopProxy(this.proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\client",
  "methodName" : "upgrade",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpgradeServiceResponseProto upgrade(UpgradeServiceRequestProto request) throws IOException, YarnException\n{\r\n    try {\r\n        return proxy.upgradeService(null, request);\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\client",
  "methodName" : "restart",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RestartServiceResponseProto restart(RestartServiceRequestProto request) throws IOException, YarnException\n{\r\n    try {\r\n        return proxy.restartService(null, request);\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\client",
  "methodName" : "upgrade",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CompInstancesUpgradeResponseProto upgrade(CompInstancesUpgradeRequestProto request) throws IOException, YarnException\n{\r\n    try {\r\n        return proxy.upgrade(null, request);\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\client",
  "methodName" : "getCompInstances",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetCompInstancesResponseProto getCompInstances(GetCompInstancesRequestProto request) throws IOException, YarnException\n{\r\n    try {\r\n        return proxy.getCompInstances(null, request);\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\client",
  "methodName" : "cancelUpgrade",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CancelUpgradeResponseProto cancelUpgrade(CancelUpgradeRequestProto request) throws IOException, YarnException\n{\r\n    try {\r\n        return proxy.cancelUpgrade(null, request);\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\impl\\pb\\client",
  "methodName" : "decommissionCompInstances",
  "errType" : [ "ServiceException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DecommissionCompInstancesResponseProto decommissionCompInstances(DecommissionCompInstancesRequestProto request) throws IOException, YarnException\n{\r\n    try {\r\n        return proxy.decommissionCompInstances(null, request);\r\n    } catch (ServiceException e) {\r\n        RPCUtil.unwrapAndThrowException(e);\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "createApplicationTags",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Set<String> createApplicationTags(String appName, String appVersion, String appDescription)\n{\r\n    Set<String> tags = new HashSet<>();\r\n    tags.add(ServiceUtils.createNameTag(appName));\r\n    if (appVersion != null) {\r\n        tags.add(ServiceUtils.createVersionTag(appVersion));\r\n    }\r\n    if (appDescription != null) {\r\n        tags.add(ServiceUtils.createDescriptionTag(appDescription));\r\n    }\r\n    return tags;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "validateArtifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void validateArtifact(Artifact artifact, String compName, FileSystem fileSystem) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "validateConfigFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void validateConfigFile(ConfigFile configFile, String compName, FileSystem fileSystem) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "validateConfigFiles",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void validateConfigFiles(List<ConfigFile> configFiles, String compName, FileSystem fs) throws IOException\n{\r\n    Set<String> destFileSet = new HashSet<>();\r\n    for (ConfigFile file : configFiles) {\r\n        if (file.getType() == null) {\r\n            throw new IllegalArgumentException(\"File type is empty\");\r\n        }\r\n        ConfigFile.TypeEnum fileType = file.getType();\r\n        if (fileType.equals(ConfigFile.TypeEnum.TEMPLATE)) {\r\n            if (StringUtils.isEmpty(file.getSrcFile()) && !file.getProperties().containsKey(CONTENT)) {\r\n                throw new IllegalArgumentException(MessageFormat.format(\"For {0} \" + \"format, either src_file must be specified in ConfigFile,\" + \" or the \\\"{1}\\\" key must be specified in \" + \"the 'properties' field of ConfigFile. \", ConfigFile.TypeEnum.TEMPLATE, CONTENT));\r\n            }\r\n        } else if (fileType.equals(ConfigFile.TypeEnum.STATIC) || fileType.equals(ConfigFile.TypeEnum.ARCHIVE)) {\r\n            if (!file.getProperties().isEmpty()) {\r\n                throw new IllegalArgumentException(String.format(\"For %s format, should not specify any 'properties.'\", fileType));\r\n            }\r\n            String srcFile = file.getSrcFile();\r\n            if (srcFile == null || srcFile.isEmpty()) {\r\n                throw new IllegalArgumentException(String.format(\"For %s format, should make sure that srcFile is specified\", fileType));\r\n            }\r\n            FileStatus fileStatus = fs.getFileStatus(new Path(srcFile));\r\n            if (fileStatus != null && fileStatus.isDirectory()) {\r\n                throw new IllegalArgumentException(\"srcFile=\" + srcFile + \" is a directory, which is not supported.\");\r\n            }\r\n        }\r\n        if (!StringUtils.isEmpty(file.getSrcFile())) {\r\n            Path p = new Path(file.getSrcFile());\r\n            if (!fs.exists(p)) {\r\n                throw new IllegalArgumentException(\"Specified src_file does not exist on \" + fs.getScheme() + \": \" + file.getSrcFile());\r\n            }\r\n        }\r\n        if (StringUtils.isEmpty(file.getDestFile())) {\r\n            throw new IllegalArgumentException(\"dest_file is empty.\");\r\n        }\r\n        if (destFileSet.contains(file.getDestFile())) {\r\n            throw new IllegalArgumentException(\"Duplicated ConfigFile exists: \" + file.getDestFile());\r\n        }\r\n        destFileSet.add(file.getDestFile());\r\n        java.nio.file.Path destPath = Paths.get(file.getDestFile());\r\n        if (!destPath.isAbsolute() && destPath.getNameCount() > 1) {\r\n            throw new IllegalArgumentException(\"Non-absolute dest_file has more \" + \"than one path element\");\r\n        }\r\n        validateConfigFile(file, compName, fs);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\docker",
  "methodName" : "processArtifact",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void processArtifact(AbstractLauncher launcher, ComponentInstance compInstance, SliderFileSystem fileSystem, Service service, ContainerLaunchService.ComponentLaunchContext compLaunchCtx) throws IOException\n{\r\n    launcher.setYarnDockerMode(true);\r\n    launcher.setDockerImage(compLaunchCtx.getArtifact().getId());\r\n    launcher.setDockerNetwork(compLaunchCtx.getConfiguration().getProperty(DOCKER_NETWORK));\r\n    launcher.setDockerHostname(compInstance.getHostname());\r\n    launcher.setRunPrivilegedContainer(compLaunchCtx.isRunPrivilegedContainer());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\docker",
  "methodName" : "checkUseEntryPoint",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean checkUseEntryPoint(ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n{\r\n    boolean overrideDisable = false;\r\n    String overrideDisableKey = Environment.YARN_CONTAINER_RUNTIME_DOCKER_RUN_OVERRIDE_DISABLE.name();\r\n    String overrideDisableValue = (compLaunchContext.getConfiguration().getEnv(overrideDisableKey) != null) ? compLaunchContext.getConfiguration().getEnv(overrideDisableKey) : System.getenv(overrideDisableKey);\r\n    overrideDisable = Boolean.parseBoolean(overrideDisableValue);\r\n    return overrideDisable;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\docker",
  "methodName" : "buildContainerLaunchCommand",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void buildContainerLaunchCommand(AbstractLauncher launcher, Service service, ComponentInstance instance, SliderFileSystem fileSystem, Configuration yarnConf, Container container, ContainerLaunchService.ComponentLaunchContext compLaunchContext, Map<String, String> tokensForSubstitution) throws IOException, SliderException\n{\r\n    boolean useEntryPoint = checkUseEntryPoint(compLaunchContext);\r\n    if (useEntryPoint) {\r\n        String launchCommand = compLaunchContext.getLaunchCommand();\r\n        if (!StringUtils.isEmpty(launchCommand)) {\r\n            if (launchCommand.contains(\" \")) {\r\n                launchCommand = ProviderUtils.replaceSpacesWithDelimiter(launchCommand, \",\");\r\n            }\r\n            launcher.addCommand(launchCommand);\r\n        }\r\n    } else {\r\n        String launchCommand = compLaunchContext.getLaunchCommand();\r\n        if (!StringUtils.isEmpty(launchCommand)) {\r\n            launchCommand = ProviderUtils.substituteStrWithTokens(launchCommand, tokensForSubstitution);\r\n            CommandLineBuilder operation = new CommandLineBuilder();\r\n            operation.add(launchCommand);\r\n            operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\r\n            launcher.addCommand(operation.build());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "id",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Artifact id(String id)\n{\r\n    this.id = id;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "type",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Artifact type(TypeEnum type)\n{\r\n    this.type = type;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TypeEnum getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setType(TypeEnum type)\n{\r\n    this.type = type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "uri",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Artifact uri(String uri)\n{\r\n    this.uri = uri;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getUri",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUri()\n{\r\n    return uri;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setUri",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUri(String uri)\n{\r\n    this.uri = uri;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    Artifact artifact = (Artifact) o;\r\n    return Objects.equals(this.id, artifact.id) && Objects.equals(this.type, artifact.type) && Objects.equals(this.uri, artifact.uri);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(id, type, uri);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Artifact {\\n\").append(\"    id: \").append(toIndentedString(id)).append(\"\\n\").append(\"    type: \").append(toIndentedString(type)).append(\"\\n\").append(\"    uri: \").append(toIndentedString(uri)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "OnFailureRestartPolicy getInstance()\n{\r\n    return INSTANCE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "isLongLived",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isLongLived()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "hasCompleted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean hasCompleted(Component component)\n{\r\n    if (hasCompletedSuccessfully(component)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "hasCompletedSuccessfully",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean hasCompletedSuccessfully(Component component)\n{\r\n    if (component.getNumSucceededInstances() == component.getNumDesiredInstances()) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "shouldRelaunchInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean shouldRelaunchInstance(ComponentInstance componentInstance, ContainerStatus containerStatus)\n{\r\n    if (ComponentInstance.hasContainerFailed(containerStatus)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "isReadyForDownStream",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean isReadyForDownStream(Component dependentComponent)\n{\r\n    if (dependentComponent.getNumReadyInstances() + dependentComponent.getNumSucceededInstances() + dependentComponent.getNumFailedInstances() < dependentComponent.getNumDesiredInstances()) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "allowUpgrades",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean allowUpgrades()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "shouldTerminate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean shouldTerminate(Component component)\n{\r\n    long nSucceeded = component.getNumSucceededInstances();\r\n    if (nSucceeded < component.getComponentSpec().getNumberOfContainers()) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "allowContainerRetriesForInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean allowContainerRetriesForInstance(ComponentInstance componentInstance)\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    executorService = Executors.newScheduledThreadPool(1);\r\n    this.conf = conf;\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    long readinessCheckInterval = YarnServiceConf.getLong(READINESS_CHECK_INTERVAL, DEFAULT_READINESS_CHECK_INTERVAL, context.service.getConfiguration(), conf);\r\n    executorService.scheduleAtFixedRate(new ReadinessChecker(), readinessCheckInterval, readinessCheckInterval, TimeUnit.SECONDS);\r\n    long failureResetInterval = YarnServiceConf.getLong(CONTAINER_FAILURE_WINDOW, DEFAULT_CONTAINER_FAILURE_WINDOW, context.service.getConfiguration(), conf);\r\n    executorService.scheduleAtFixedRate(new ContainerFailureReset(), failureResetInterval, failureResetInterval, TimeUnit.SECONDS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (executorService != null) {\r\n        executorService.shutdownNow();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getDestFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDestFile()\n{\r\n    return destFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setDestFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDestFile(String destFile)\n{\r\n    this.destFile = destFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "destFile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalizationStatus destFile(String fileName)\n{\r\n    this.destFile = fileName;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalizationState getState()\n{\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setState(LocalizationState localizationState)\n{\r\n    this.state = localizationState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "state",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalizationStatus state(LocalizationState localizationState)\n{\r\n    this.state = localizationState;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnostics()\n{\r\n    return diagnostics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiagnostics(String diag)\n{\r\n    this.diagnostics = diag;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "diagnostics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "LocalizationStatus diagnostics(String diag)\n{\r\n    this.diagnostics = diag;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getServices",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service[] getServices()\n{\r\n    return CLIENT_AM_SERVICE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AlwaysRestartPolicy getInstance()\n{\r\n    return INSTANCE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "isLongLived",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isLongLived()\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "hasCompleted",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean hasCompleted(Component component)\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "hasCompletedSuccessfully",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean hasCompletedSuccessfully(Component component)\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "shouldRelaunchInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean shouldRelaunchInstance(ComponentInstance componentInstance, ContainerStatus containerStatus)\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "isReadyForDownStream",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isReadyForDownStream(Component dependentComponent)\n{\r\n    if (dependentComponent.getNumReadyInstances() < dependentComponent.getNumDesiredInstances()) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "allowUpgrades",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean allowUpgrades()\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "shouldTerminate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean shouldTerminate(Component component)\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "allowContainerRetriesForInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean allowContainerRetriesForInstance(ComponentInstance componentInstance)\n{\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "filterInstances",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<ComponentContainers> filterInstances(ServiceContext context, ClientAMProtocol.GetCompInstancesRequestProto filterReq)\n{\r\n    Map<String, ComponentContainers> containersByComp = new HashMap<>();\r\n    Map<ContainerId, ComponentInstance> instances = context.scheduler.getLiveInstances();\r\n    instances.forEach(((containerId, instance) -> {\r\n        boolean include = true;\r\n        if (filterReq.getComponentNamesList() != null && !filterReq.getComponentNamesList().isEmpty()) {\r\n            if (!filterReq.getComponentNamesList().contains(instance.getComponent().getName())) {\r\n                include = false;\r\n            }\r\n        }\r\n        if (filterReq.getVersion() != null && !filterReq.getVersion().isEmpty()) {\r\n            String instanceServiceVersion = instance.getServiceVersion();\r\n            if (instanceServiceVersion == null || !instanceServiceVersion.equals(filterReq.getVersion())) {\r\n                include = false;\r\n            }\r\n        }\r\n        if (filterReq.getContainerStatesList() != null && !filterReq.getContainerStatesList().isEmpty()) {\r\n            if (!filterReq.getContainerStatesList().contains(instance.getContainerState().toString())) {\r\n                include = false;\r\n            }\r\n        }\r\n        if (include) {\r\n            ComponentContainers compContainers = containersByComp.computeIfAbsent(instance.getCompName(), k -> {\r\n                ComponentContainers result = new ComponentContainers();\r\n                result.setContainers(new ArrayList<>());\r\n                result.setComponentName(instance.getCompName());\r\n                return result;\r\n            });\r\n            compContainers.addContainer(instance.getContainerSpec());\r\n        }\r\n    }));\r\n    List<ComponentContainers> result = new ArrayList<>();\r\n    result.addAll(containersByComp.values());\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "generateToken",
  "errType" : [ "GSSException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String generateToken(String server) throws IOException, InterruptedException\n{\r\n    UserGroupInformation currentUser = UserGroupInformation.getCurrentUser();\r\n    LOG.debug(\"The user credential is {}\", currentUser);\r\n    String challenge = currentUser.doAs(new PrivilegedExceptionAction<String>() {\r\n\r\n        @Override\r\n        public String run() throws Exception {\r\n            try {\r\n                GSSManager manager = GSSManager.getInstance();\r\n                GSSName serverName = manager.createName(\"HTTP@\" + server, GSSName.NT_HOSTBASED_SERVICE);\r\n                GSSContext gssContext = manager.createContext(serverName.canonicalize(null), null, null, GSSContext.DEFAULT_LIFETIME);\r\n                gssContext.requestMutualAuth(true);\r\n                gssContext.requestCredDeleg(true);\r\n                byte[] inToken = new byte[0];\r\n                byte[] outToken = gssContext.initSecContext(inToken, 0, inToken.length);\r\n                gssContext.dispose();\r\n                LOG.debug(\"Got valid challenge for host {}\", serverName);\r\n                return new String(BASE_64_CODEC.encode(outToken), StandardCharsets.US_ASCII);\r\n            } catch (GSSException e) {\r\n                LOG.error(\"Error: \", e);\r\n                throw new AuthenticationException(e);\r\n            }\r\n        }\r\n    });\r\n    return challenge;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "connect",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Builder connect(String url) throws URISyntaxException, IOException, InterruptedException\n{\r\n    boolean useKerberos = UserGroupInformation.isSecurityEnabled();\r\n    URI resource = new URI(url);\r\n    Client client = Client.create();\r\n    Builder builder = client.resource(url).type(MediaType.APPLICATION_JSON);\r\n    if (useKerberos) {\r\n        String challenge = generateToken(resource.getHost());\r\n        builder.header(HttpHeaders.AUTHORIZATION, \"Negotiate \" + challenge);\r\n        LOG.debug(\"Authorization: Negotiate {}\", challenge);\r\n    }\r\n    return builder;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\tarball",
  "methodName" : "processArtifact",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void processArtifact(AbstractLauncher launcher, ComponentInstance instance, SliderFileSystem fileSystem, Service service, ContainerLaunchService.ComponentLaunchContext compLaunchCtx) throws IOException\n{\r\n    Path artifact = new Path(compLaunchCtx.getArtifact().getId());\r\n    if (!fileSystem.isFile(artifact)) {\r\n        throw new IOException(\"Package doesn't exist as a resource: \" + artifact);\r\n    }\r\n    log.info(\"Adding resource {}\", artifact);\r\n    LocalResourceType type = LocalResourceType.ARCHIVE;\r\n    LocalResource packageResource = fileSystem.createAmResource(artifact, type, LocalResourceVisibility.APPLICATION);\r\n    launcher.addLocalResource(APP_LIB_DIR, packageResource);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "PortProbe create(Map<String, String> props) throws IOException\n{\r\n    int port = getPropertyInt(props, PORT_PROBE_PORT, null);\r\n    if (port >= 65536) {\r\n        throw new IOException(PORT_PROBE_PORT + \" \" + port + \" is out of \" + \"range\");\r\n    }\r\n    int timeout = getPropertyInt(props, PORT_PROBE_CONNECT_TIMEOUT, PORT_PROBE_CONNECT_TIMEOUT_DEFAULT);\r\n    return new PortProbe(port, timeout, props);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "ping",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "ProbeStatus ping(ComponentInstance instance)\n{\r\n    ProbeStatus status = super.ping(instance);\r\n    if (!status.isSuccess()) {\r\n        return status;\r\n    }\r\n    String ip = instance.getContainerStatus().getIPs().get(0);\r\n    InetSocketAddress sockAddr = new InetSocketAddress(ip, port);\r\n    Socket socket = new Socket();\r\n    try {\r\n        if (log.isDebugEnabled()) {\r\n            log.debug(instance.getCompInstanceName() + \": Connecting \" + sockAddr.toString() + \", timeout=\" + MonitorUtils.millisToHumanTime(timeout));\r\n        }\r\n        socket.connect(sockAddr, timeout);\r\n        status.succeed(this);\r\n    } catch (Throwable e) {\r\n        String error = instance.getCompInstanceName() + \": Probe \" + sockAddr + \" failed\";\r\n        log.debug(error, e);\r\n        status.fail(this, new IOException(error, e));\r\n    } finally {\r\n        IOUtils.closeSocket(socket);\r\n    }\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\defaultImpl",
  "methodName" : "validateArtifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void validateArtifact(Artifact artifact, String compName, FileSystem fileSystem)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\defaultImpl",
  "methodName" : "validateConfigFile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validateConfigFile(ConfigFile configFile, String compName, FileSystem fileSystem) throws IOException\n{\r\n    if (Paths.get(configFile.getDestFile()).isAbsolute()) {\r\n        throw new IllegalArgumentException(String.format(RestApiErrorMessages.ERROR_CONFIGFILE_DEST_FILE_FOR_COMP_NOT_ABSOLUTE, compName, \"no\", configFile.getDestFile()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "isUnset",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isUnset(String s)\n{\r\n    return s == null || s.isEmpty();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "isSet",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isSet(String s)\n{\r\n    return !isUnset(s);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "isEmpty",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isEmpty(Collection l)\n{\r\n    return l == null || l.isEmpty();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "findContainingJarOrFail",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "File findContainingJarOrFail(Class clazz) throws IOException\n{\r\n    File localFile = ServiceUtils.findContainingJar(clazz);\r\n    if (null == localFile) {\r\n        throw new FileNotFoundException(\"Could not find JAR containing \" + clazz);\r\n    }\r\n    return localFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "findContainingJar",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "File findContainingJar(Class my_class) throws IOException\n{\r\n    ClassLoader loader = my_class.getClassLoader();\r\n    if (loader == null) {\r\n        throw new IOException(\"Class \" + my_class + \" does not have a classloader!\");\r\n    }\r\n    String class_file = my_class.getName().replaceAll(\"\\\\.\", \"/\") + \".class\";\r\n    Enumeration<URL> urlEnumeration = loader.getResources(class_file);\r\n    for (; urlEnumeration.hasMoreElements(); ) {\r\n        URL url = urlEnumeration.nextElement();\r\n        if (\"jar\".equals(url.getProtocol())) {\r\n            String toReturn = url.getPath();\r\n            if (toReturn.startsWith(\"file:\")) {\r\n                toReturn = toReturn.substring(\"file:\".length());\r\n            }\r\n            toReturn = toReturn.replaceAll(\"\\\\+\", \"%2B\");\r\n            toReturn = URLDecoder.decode(toReturn, \"UTF-8\");\r\n            String jarFilePath = toReturn.replaceAll(\"!.*$\", \"\");\r\n            return new File(jarFilePath);\r\n        } else {\r\n            log.info(\"could not locate JAR containing {} URL={}\", my_class, url);\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "copy",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void copy(Configuration conf, Path srcFile, Path destFile) throws IOException, BadClusterStateException\n{\r\n    FileSystem srcFS = FileSystem.get(srcFile.toUri(), conf);\r\n    if (!srcFS.exists(srcFile)) {\r\n        throw new FileNotFoundException(\"Source file not found \" + srcFile);\r\n    }\r\n    if (!srcFS.isFile(srcFile)) {\r\n        throw new FileNotFoundException(\"Source file not a file \" + srcFile);\r\n    }\r\n    FileSystem destFS = FileSystem.get(destFile.toUri(), conf);\r\n    FileUtil.copy(srcFS, srcFile, destFS, destFile, false, true, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "collectionToStringList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<String> collectionToStringList(Collection c)\n{\r\n    List<String> l = new ArrayList<>(c.size());\r\n    for (Object o : c) {\r\n        l.add(o.toString());\r\n    }\r\n    return l;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "join",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String join(Collection collection, String separator)\n{\r\n    return join(collection, separator, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "join",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String join(Collection collection, String separator, boolean trailing)\n{\r\n    StringBuilder b = new StringBuilder();\r\n    if (collection.isEmpty()) {\r\n        return trailing ? separator : \"\";\r\n    }\r\n    for (Object o : collection) {\r\n        b.append(o).append(separator);\r\n    }\r\n    int length = separator.length();\r\n    String s = b.toString();\r\n    return (trailing || s.isEmpty()) ? s : (b.substring(0, b.length() - length));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "join",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String join(String[] collection, String separator, boolean trailing)\n{\r\n    return join(Arrays.asList(collection), separator, trailing);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "mandatoryEnvVariable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String mandatoryEnvVariable(String key) throws BadClusterStateException\n{\r\n    String v = System.getenv(key);\r\n    if (v == null) {\r\n        throw new BadClusterStateException(\"Missing Environment variable \" + key);\r\n    }\r\n    return v;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "mergeMapsIgnoreDuplicateKeys",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Map<T1, T2> mergeMapsIgnoreDuplicateKeys(Map<T1, T2> first, Map<T1, T2> second)\n{\r\n    Preconditions.checkArgument(first != null, \"Null 'first' value\");\r\n    Preconditions.checkArgument(second != null, \"Null 'second' value\");\r\n    for (Map.Entry<T1, T2> entry : second.entrySet()) {\r\n        T1 key = entry.getKey();\r\n        if (!first.containsKey(key)) {\r\n            first.put(key, entry.getValue());\r\n        }\r\n    }\r\n    return first;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "stringifyMap",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String stringifyMap(Map<String, String> map)\n{\r\n    StringBuilder builder = new StringBuilder();\r\n    for (Map.Entry<String, String> entry : map.entrySet()) {\r\n        builder.append(entry.getKey()).append(\"=\\\"\").append(entry.getValue()).append(\"\\\"\\n\");\r\n    }\r\n    return builder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "stringify",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String stringify(org.apache.hadoop.yarn.api.records.URL url)\n{\r\n    StringBuilder builder = new StringBuilder();\r\n    builder.append(url.getScheme()).append(\"://\");\r\n    if (url.getHost() != null) {\r\n        builder.append(url.getHost()).append(\":\").append(url.getPort());\r\n    }\r\n    builder.append(url.getFile());\r\n    return builder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getOpenPort",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getOpenPort() throws IOException\n{\r\n    ServerSocket socket = null;\r\n    try {\r\n        socket = new ServerSocket(0);\r\n        return socket.getLocalPort();\r\n    } finally {\r\n        if (socket != null) {\r\n            socket.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "isPortAvailable",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isPortAvailable(int port)\n{\r\n    try {\r\n        ServerSocket socket = new ServerSocket(port);\r\n        socket.close();\r\n        return true;\r\n    } catch (IOException e) {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "buildEnvMap",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Map<String, String> buildEnvMap(org.apache.hadoop.yarn.service.api.records.Configuration conf, Map<String, String> tokenMap)\n{\r\n    if (tokenMap == null) {\r\n        return conf.getEnv();\r\n    }\r\n    Map<String, String> env = new HashMap<>();\r\n    for (Map.Entry<String, String> entry : conf.getEnv().entrySet()) {\r\n        String key = entry.getKey();\r\n        String val = entry.getValue();\r\n        for (Map.Entry<String, String> token : tokenMap.entrySet()) {\r\n            val = val.replaceAll(Pattern.quote(token.getKey()), token.getValue());\r\n        }\r\n        env.put(key, val);\r\n    }\r\n    return env;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getLibDirs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String[] getLibDirs()\n{\r\n    String libDirStr = System.getProperty(YarnServiceConstants.PROPERTY_LIB_DIR);\r\n    if (isUnset(libDirStr)) {\r\n        return ArrayUtils.EMPTY_STRING_ARRAY;\r\n    }\r\n    return StringUtils.split(libDirStr, ',');\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "putJar",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalResource putJar(Map<String, LocalResource> providerResources, SliderFileSystem sliderFileSystem, Class clazz, Path tempPath, String libdir, String jarName) throws IOException, SliderException\n{\r\n    LocalResource res = sliderFileSystem.submitJarWithClass(clazz, tempPath, libdir, jarName);\r\n    providerResources.put(libdir + \"/\" + jarName, res);\r\n    return res;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "putAllJars",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void putAllJars(Map<String, LocalResource> providerResources, SliderFileSystem sliderFileSystem, Path tempPath, String libDir, String srcPath) throws IOException, SliderException\n{\r\n    log.debug(\"Loading all dependencies from {}\", srcPath);\r\n    if (ServiceUtils.isSet(srcPath)) {\r\n        File srcFolder = new File(srcPath);\r\n        FilenameFilter jarFilter = createJarFilter();\r\n        File[] listOfJars = srcFolder.listFiles(jarFilter);\r\n        if (listOfJars == null || listOfJars.length == 0) {\r\n            return;\r\n        }\r\n        for (File jarFile : listOfJars) {\r\n            if (!jarFile.exists()) {\r\n                log.debug(\"File does not exist, skipping: \" + jarFile);\r\n                continue;\r\n            }\r\n            LocalResource res = sliderFileSystem.submitFile(jarFile, tempPath, libDir, jarFile.getName());\r\n            providerResources.put(libDir + \"/\" + jarFile.getName(), res);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createJarFilter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FilenameFilter createJarFilter()\n{\r\n    return new FilenameFilter() {\r\n\r\n        public boolean accept(File dir, String name) {\r\n            return name.toLowerCase(Locale.ENGLISH).endsWith(\".jar\");\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createLocalPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path createLocalPath(File file)\n{\r\n    return new Path(file.toURI());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "buildClasspath",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "ClasspathConstructor buildClasspath(String sliderConfDir, String libdir, SliderFileSystem sliderFileSystem, String configClassPath, boolean usingMiniMRCluster)\n{\r\n    ClasspathConstructor classpath = new ClasspathConstructor();\r\n    classpath.append(YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\r\n    if (usingMiniMRCluster) {\r\n        classpath.appendAll(classpath.localJVMClasspath());\r\n    } else {\r\n        if (sliderConfDir != null) {\r\n            classpath.addClassDirectory(sliderConfDir);\r\n        }\r\n        classpath.addLibDir(libdir);\r\n        if (sliderFileSystem.isFile(sliderFileSystem.getDependencyTarGzip())) {\r\n            classpath.addLibDir(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK);\r\n        }\r\n        classpath.addRemoteClasspathEnvVar();\r\n        classpath.append(ApplicationConstants.Environment.HADOOP_CONF_DIR.$$());\r\n    }\r\n    if (!configClassPath.isEmpty()) {\r\n        classpath.appendAll(Arrays.asList(configClassPath.split(\",\")));\r\n    }\r\n    return classpath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "tarGzipFolder",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void tarGzipFolder(String[] libDirs, File tarGzipFile, FilenameFilter filter) throws IOException\n{\r\n    log.info(\"Tar-gzipping folders {} to {}\", libDirs, tarGzipFile.getAbsolutePath());\r\n    try (TarArchiveOutputStream taos = new TarArchiveOutputStream(new GZIPOutputStream(new BufferedOutputStream(new FileOutputStream(tarGzipFile))))) {\r\n        for (String libDir : libDirs) {\r\n            File srcFolder = new File(libDir);\r\n            List<String> files = new ArrayList<>();\r\n            generateFileList(files, srcFolder, srcFolder, true, filter);\r\n            for (String file : files) {\r\n                File srcFile = new File(srcFolder, file);\r\n                TarArchiveEntry tarEntry = new TarArchiveEntry(srcFile, file);\r\n                taos.putArchiveEntry(tarEntry);\r\n                try (FileInputStream in = new FileInputStream(srcFile)) {\r\n                    org.apache.commons.io.IOUtils.copy(in, taos);\r\n                }\r\n                taos.flush();\r\n                taos.closeArchiveEntry();\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "generateFileList",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void generateFileList(List<String> fileList, File node, File rootFolder, Boolean relative, FilenameFilter filter)\n{\r\n    if (node.isFile()) {\r\n        String fileFullPath = node.toString();\r\n        if (relative) {\r\n            fileList.add(fileFullPath.substring(rootFolder.toString().length() + 1, fileFullPath.length()));\r\n        } else {\r\n            fileList.add(fileFullPath);\r\n        }\r\n    }\r\n    if (node.isDirectory()) {\r\n        String[] subNode = node.list(filter);\r\n        if (subNode == null || subNode.length == 0) {\r\n            return;\r\n        }\r\n        for (String filename : subNode) {\r\n            generateFileList(fileList, new File(node, filename), rootFolder, relative, filter);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createNameTag",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String createNameTag(String name)\n{\r\n    return \"Name: \" + name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createVersionTag",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String createVersionTag(String version)\n{\r\n    return \"Version: \" + version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createDescriptionTag",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String createDescriptionTag(String description)\n{\r\n    return \"Description: \" + description;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getLocalHostName",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getLocalHostName(@Nullable Configuration conf) throws UnknownHostException\n{\r\n    if (conf != null) {\r\n        String dnsInterface = conf.get(HADOOP_SECURITY_DNS_INTERFACE_KEY);\r\n        String nameServer = conf.get(HADOOP_SECURITY_DNS_NAMESERVER_KEY);\r\n        if (dnsInterface != null) {\r\n            return DNS.getDefaultHost(dnsInterface, nameServer, true);\r\n        } else if (nameServer != null) {\r\n            throw new IllegalArgumentException(HADOOP_SECURITY_DNS_NAMESERVER_KEY + \" requires \" + HADOOP_SECURITY_DNS_INTERFACE_KEY + \". Check your\" + \"configuration.\");\r\n        }\r\n    }\r\n    return InetAddress.getLocalHost().getCanonicalHostName();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "properties",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration properties(Map<String, String> properties)\n{\r\n    this.properties = properties;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getProperties",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, String> getProperties()\n{\r\n    return properties;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setProperties",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setProperties(Map<String, String> properties)\n{\r\n    this.properties = properties;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "env",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration env(Map<String, String> env)\n{\r\n    this.env = env;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getEnv",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, String> getEnv()\n{\r\n    return env;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setEnv",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setEnv(Map<String, String> env)\n{\r\n    this.env = env;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "files",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration files(List<ConfigFile> files)\n{\r\n    this.files = files;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getFiles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ConfigFile> getFiles()\n{\r\n    return files;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setFiles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFiles(List<ConfigFile> files)\n{\r\n    this.files = files;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getPropertyLong",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long getPropertyLong(String name, long defaultValue)\n{\r\n    String value = getProperty(name);\r\n    if (StringUtils.isEmpty(value)) {\r\n        return defaultValue;\r\n    }\r\n    return Long.parseLong(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getPropertyInt",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int getPropertyInt(String name, int defaultValue)\n{\r\n    String value = getProperty(name);\r\n    if (StringUtils.isEmpty(value)) {\r\n        return defaultValue;\r\n    }\r\n    return Integer.parseInt(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getPropertyBool",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean getPropertyBool(String name, boolean defaultValue)\n{\r\n    String value = getProperty(name);\r\n    if (StringUtils.isEmpty(value)) {\r\n        return defaultValue;\r\n    }\r\n    return Boolean.parseBoolean(value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getProperty",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getProperty(String name, String defaultValue)\n{\r\n    String value = getProperty(name);\r\n    if (StringUtils.isEmpty(value)) {\r\n        return defaultValue;\r\n    }\r\n    return value;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setProperty",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setProperty(String name, String value)\n{\r\n    properties.put(name, value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getProperty",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getProperty(String name)\n{\r\n    return properties.get(name.trim());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getEnv",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getEnv(String name)\n{\r\n    return env.get(name.trim());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    Configuration configuration = (Configuration) o;\r\n    return Objects.equals(this.properties, configuration.properties) && Objects.equals(this.env, configuration.env) && Objects.equals(this.files, configuration.files);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(properties, env, files);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Configuration {\\n\").append(\"    properties: \").append(toIndentedString(properties)).append(\"\\n\").append(\"    env: \").append(toIndentedString(env)).append(\"\\n\").append(\"    files: \").append(toIndentedString(files)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "mergeFrom",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void mergeFrom(Configuration that)\n{\r\n    ServiceUtils.mergeMapsIgnoreDuplicateKeys(this.properties, that.getProperties());\r\n    ServiceUtils.mergeMapsIgnoreDuplicateKeys(this.env, that.getEnv());\r\n    Map<String, ConfigFile> thatMap = new HashMap<>();\r\n    for (ConfigFile file : that.getFiles()) {\r\n        thatMap.put(file.getDestFile(), file.copy());\r\n    }\r\n    for (ConfigFile thisFile : files) {\r\n        if (thatMap.containsKey(thisFile.getDestFile())) {\r\n            ConfigFile thatFile = thatMap.get(thisFile.getDestFile());\r\n            ServiceUtils.mergeMapsIgnoreDuplicateKeys(thisFile.getProperties(), thatFile.getProperties());\r\n            thatMap.remove(thisFile.getDestFile());\r\n        }\r\n    }\r\n    for (ConfigFile thatFile : thatMap.values()) {\r\n        files.add(thatFile.copy());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "processArtifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void processArtifact(AbstractLauncher launcher, ComponentInstance compInstance, SliderFileSystem fileSystem, Service service, ContainerLaunchService.ComponentLaunchContext compLaunchCtx) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "buildContainerTokens",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<String, String> buildContainerTokens(ComponentInstance instance, Container container, ContainerLaunchService.ComponentLaunchContext compLaunchContext)\n{\r\n    Map<String, String> globalTokens = instance.getComponent().getScheduler().globalTokens;\r\n    Map<String, String> tokensForSubstitution = ProviderUtils.initCompTokensForSubstitute(instance, container, compLaunchContext);\r\n    tokensForSubstitution.putAll(globalTokens);\r\n    return tokensForSubstitution;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "buildContainerEnvironment",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void buildContainerEnvironment(AbstractLauncher launcher, Service service, ComponentInstance instance, SliderFileSystem fileSystem, Configuration yarnConf, Container container, ContainerLaunchService.ComponentLaunchContext compLaunchContext, Map<String, String> tokensForSubstitution) throws IOException, SliderException\n{\r\n    launcher.putEnv(ServiceUtils.buildEnvMap(compLaunchContext.getConfiguration(), tokensForSubstitution));\r\n    launcher.setEnv(\"WORK_DIR\", ApplicationConstants.Environment.PWD.$());\r\n    launcher.setEnv(\"LOG_DIR\", ApplicationConstants.LOG_DIR_EXPANSION_VAR);\r\n    if (System.getenv(HADOOP_USER_NAME) != null) {\r\n        launcher.setEnv(HADOOP_USER_NAME, System.getenv(HADOOP_USER_NAME));\r\n    }\r\n    launcher.setEnv(\"LANG\", \"en_US.UTF-8\");\r\n    launcher.setEnv(\"LC_ALL\", \"en_US.UTF-8\");\r\n    launcher.setEnv(\"LANGUAGE\", \"en_US.UTF-8\");\r\n    for (Entry<String, String> entry : launcher.getEnv().entrySet()) {\r\n        tokensForSubstitution.put($(entry.getKey()), entry.getValue());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "buildContainerLaunchCommand",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void buildContainerLaunchCommand(AbstractLauncher launcher, Service service, ComponentInstance instance, SliderFileSystem fileSystem, Configuration yarnConf, Container container, ContainerLaunchService.ComponentLaunchContext compLaunchContext, Map<String, String> tokensForSubstitution) throws IOException, SliderException\n{\r\n    String launchCommand = compLaunchContext.getLaunchCommand();\r\n    if (!StringUtils.isEmpty(launchCommand)) {\r\n        launchCommand = ProviderUtils.substituteStrWithTokens(launchCommand, tokensForSubstitution);\r\n        CommandLineBuilder operation = new CommandLineBuilder();\r\n        operation.add(launchCommand);\r\n        operation.addOutAndErrFiles(OUT_FILE, ERR_FILE);\r\n        launcher.addCommand(operation.build());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "buildContainerRetry",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void buildContainerRetry(AbstractLauncher launcher, Configuration yarnConf, ContainerLaunchService.ComponentLaunchContext compLaunchContext, ComponentInstance instance)\n{\r\n    ComponentRestartPolicy restartPolicy = instance.getComponent().getRestartPolicyHandler();\r\n    if (restartPolicy.allowContainerRetriesForInstance(instance)) {\r\n        launcher.setRetryContext(YarnServiceConf.getInt(CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_MAX, compLaunchContext.getConfiguration(), yarnConf), YarnServiceConf.getInt(CONTAINER_RETRY_INTERVAL, DEFAULT_CONTAINER_RETRY_INTERVAL, compLaunchContext.getConfiguration(), yarnConf), YarnServiceConf.getLong(CONTAINER_FAILURES_VALIDITY_INTERVAL, DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL, compLaunchContext.getConfiguration(), yarnConf));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "buildContainerLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ResolvedLaunchParams buildContainerLaunchContext(AbstractLauncher launcher, Service service, ComponentInstance instance, SliderFileSystem fileSystem, Configuration yarnConf, Container container, ContainerLaunchService.ComponentLaunchContext compLaunchContext) throws IOException, SliderException\n{\r\n    ResolvedLaunchParams resolved = new ResolvedLaunchParams();\r\n    processArtifact(launcher, instance, fileSystem, service, compLaunchContext);\r\n    ServiceContext context = instance.getComponent().getScheduler().getContext();\r\n    Map<String, String> tokensForSubstitution = buildContainerTokens(instance, container, compLaunchContext);\r\n    buildContainerEnvironment(launcher, service, instance, fileSystem, yarnConf, container, compLaunchContext, tokensForSubstitution);\r\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fileSystem, compLaunchContext, tokensForSubstitution, instance, context, resolved);\r\n    ProviderUtils.handleStaticFilesForLocalization(launcher, fileSystem, compLaunchContext, resolved);\r\n    buildContainerLaunchCommand(launcher, service, instance, fileSystem, yarnConf, container, compLaunchContext, tokensForSubstitution);\r\n    buildContainerRetry(launcher, yarnConf, compLaunchContext, instance);\r\n    return resolved;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "validate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void validate(String name)\n{\r\n    if (!matches(name)) {\r\n        throw new IllegalArgumentException(String.format(E_INVALID_NAME, name, pattern));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "matches",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean matches(String name)\n{\r\n    return valid.matcher(name).matches();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "diagnostics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceStatus diagnostics(String diagnostics)\n{\r\n    this.diagnostics = diagnostics;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDiagnostics()\n{\r\n    return diagnostics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setDiagnostics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDiagnostics(String diagnostics)\n{\r\n    this.diagnostics = diagnostics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "state",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceStatus state(ServiceState state)\n{\r\n    this.state = state;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceState getState()\n{\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setState(ServiceState state)\n{\r\n    this.state = state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "code",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceStatus code(Integer code)\n{\r\n    this.code = code;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Integer getCode()\n{\r\n    return code;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCode(Integer code)\n{\r\n    this.code = code;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    ServiceStatus serviceStatus = (ServiceStatus) o;\r\n    return Objects.equals(this.diagnostics, serviceStatus.diagnostics) && Objects.equals(this.state, serviceStatus.state) && Objects.equals(this.code, serviceStatus.code);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(diagnostics, state, code);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class ServiceStatus {\\n\").append(\"    diagnostics: \").append(toIndentedString(diagnostics)).append(\"\\n\").append(\"    state: \").append(toIndentedString(state)).append(\"\\n\").append(\"    code: \").append(toIndentedString(code)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getTempPathForCluster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getTempPathForCluster(String clustername)\n{\r\n    Path clusterDir = buildClusterDirPath(clustername);\r\n    return new Path(clusterDir, YarnServiceConstants.TMP_DIR_PREFIX);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getFileSystem",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileSystem getFileSystem()\n{\r\n    return fileSystem;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    final StringBuilder sb = new StringBuilder(\"CoreFileSystem{\");\r\n    sb.append(\"fileSystem=\").append(fileSystem.getUri()).append('}');\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "buildClusterDirPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path buildClusterDirPath(String clustername)\n{\r\n    Preconditions.checkNotNull(clustername);\r\n    Path path = getBaseApplicationPath();\r\n    return new Path(path, YarnServiceConstants.SERVICES_DIRECTORY + \"/\" + clustername);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "buildClusterUpgradeDirPath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Path buildClusterUpgradeDirPath(String clusterName, String version)\n{\r\n    Preconditions.checkNotNull(clusterName);\r\n    Preconditions.checkNotNull(version);\r\n    return new Path(buildClusterDirPath(clusterName), YarnServiceConstants.UPGRADE_DIR + \"/\" + version);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "deleteClusterUpgradeDir",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void deleteClusterUpgradeDir(String clusterName, String version) throws IOException\n{\r\n    Preconditions.checkNotNull(clusterName);\r\n    Preconditions.checkNotNull(version);\r\n    Path upgradeCluster = buildClusterUpgradeDirPath(clusterName, version);\r\n    fileSystem.delete(upgradeCluster, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "buildKeytabInstallationDirPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path buildKeytabInstallationDirPath(String keytabFolder)\n{\r\n    Preconditions.checkNotNull(keytabFolder);\r\n    Path path = getBaseApplicationPath();\r\n    return new Path(path, YarnServiceConstants.KEYTAB_DIR + \"/\" + keytabFolder);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "buildKeytabPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path buildKeytabPath(String keytabDir, String keytabName, String clusterName)\n{\r\n    Path homePath = getHomeDirectory();\r\n    Path baseKeytabDir;\r\n    if (keytabDir != null) {\r\n        baseKeytabDir = new Path(homePath, keytabDir);\r\n    } else {\r\n        baseKeytabDir = new Path(buildClusterDirPath(clusterName), YarnServiceConstants.KEYTAB_DIR);\r\n    }\r\n    return keytabName == null ? baseKeytabDir : new Path(baseKeytabDir, keytabName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "buildResourcePath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path buildResourcePath(String resourceFolder)\n{\r\n    Preconditions.checkNotNull(resourceFolder);\r\n    Path path = getBaseApplicationPath();\r\n    return new Path(path, YarnServiceConstants.RESOURCE_DIR + \"/\" + resourceFolder);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "buildResourcePath",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Path buildResourcePath(String dirName, String fileName)\n{\r\n    Preconditions.checkNotNull(dirName);\r\n    Preconditions.checkNotNull(fileName);\r\n    Path path = getBaseApplicationPath();\r\n    return new Path(path, YarnServiceConstants.RESOURCE_DIR + \"/\" + dirName + \"/\" + fileName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createWithPermissions",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void createWithPermissions(Path dir, FsPermission clusterPerms) throws IOException, BadClusterStateException\n{\r\n    if (fileSystem.isFile(dir)) {\r\n        throw new BadClusterStateException(\"Cannot create a directory over a file %s\", dir);\r\n    }\r\n    log.debug(\"mkdir {} with perms {}\", dir, clusterPerms);\r\n    fileSystem.getConf().set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, \"000\");\r\n    fileSystem.mkdirs(dir, clusterPerms);\r\n    fileSystem.setPermission(dir, clusterPerms);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "verifyClusterDirectoryNonexistent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void verifyClusterDirectoryNonexistent(String clustername, Path clusterDirectory) throws IOException, SliderException\n{\r\n    if (fileSystem.exists(clusterDirectory)) {\r\n        throw new SliderException(SliderExitCodes.EXIT_INSTANCE_EXISTS, ErrorStrings.PRINTF_E_INSTANCE_ALREADY_EXISTS, clustername, clusterDirectory);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "verifyDirectoryNonexistent",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyDirectoryNonexistent(Path clusterDirectory) throws IOException, SliderException\n{\r\n    if (fileSystem.exists(clusterDirectory)) {\r\n        log.error(\"Dir {} exists: {}\", clusterDirectory, listFSDir(clusterDirectory));\r\n        throw new SliderException(SliderExitCodes.EXIT_INSTANCE_EXISTS, ErrorStrings.PRINTF_E_INSTANCE_DIR_ALREADY_EXISTS, clusterDirectory);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "verifyDirectoryWriteAccess",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void verifyDirectoryWriteAccess(Path dirPath) throws IOException, SliderException\n{\r\n    verifyPathExists(dirPath);\r\n    Path tempFile = new Path(dirPath, \"tmp-file-for-checks\");\r\n    try {\r\n        FSDataOutputStream out;\r\n        out = fileSystem.create(tempFile, true);\r\n        IOUtils.closeStream(out);\r\n        fileSystem.delete(tempFile, false);\r\n    } catch (IOException e) {\r\n        log.warn(\"Failed to create file {}: {}\", tempFile, e);\r\n        throw new BadClusterStateException(e, \"Unable to write to directory %s : %s\", dirPath, e.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "verifyPathExists",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void verifyPathExists(Path path) throws IOException\n{\r\n    if (!fileSystem.exists(path)) {\r\n        throw new FileNotFoundException(path.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "verifyFileExists",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyFileExists(Path path) throws IOException\n{\r\n    FileStatus status = fileSystem.getFileStatus(path);\r\n    if (!status.isFile()) {\r\n        throw new FileNotFoundException(\"Not a file: \" + path.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "isFile",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isFile(Path path)\n{\r\n    if (path == null) {\r\n        return false;\r\n    }\r\n    boolean isFile = false;\r\n    try {\r\n        FileStatus status = fileSystem.getFileStatus(path);\r\n        if (status.isFile()) {\r\n            isFile = true;\r\n        }\r\n    } catch (IOException e) {\r\n    }\r\n    return isFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getBaseApplicationPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getBaseApplicationPath()\n{\r\n    String configuredBasePath = configuration.get(YarnServiceConf.YARN_SERVICE_BASE_PATH, getHomeDirectory() + \"/\" + YarnServiceConstants.SERVICE_BASE_DIRECTORY);\r\n    return new Path(configuredBasePath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getDependencyTarGzip",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getDependencyTarGzip()\n{\r\n    Path dependencyLibTarGzip = null;\r\n    String configuredDependencyTarballPath = configuration.get(YarnServiceConf.DEPENDENCY_TARBALL_PATH);\r\n    if (configuredDependencyTarballPath != null) {\r\n        dependencyLibTarGzip = new Path(configuredDependencyTarballPath);\r\n    }\r\n    if (dependencyLibTarGzip == null) {\r\n        dependencyLibTarGzip = new Path(String.format(YarnServiceConstants.DEPENDENCY_DIR, VersionInfo.getVersion()), YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\r\n    }\r\n    return dependencyLibTarGzip;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "getHomeDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getHomeDirectory()\n{\r\n    return fileSystem.getHomeDirectory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createAmResource",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "LocalResource createAmResource(Path destPath, LocalResourceType resourceType, LocalResourceVisibility visibility) throws IOException\n{\r\n    FileStatus destStatus = fileSystem.getFileStatus(destPath);\r\n    LocalResource amResource = Records.newRecord(LocalResource.class);\r\n    amResource.setType(resourceType);\r\n    if (visibility == null) {\r\n        visibility = LocalResourceVisibility.APPLICATION;\r\n    }\r\n    amResource.setVisibility(visibility);\r\n    amResource.setResource(URL.fromPath(fileSystem.resolvePath(destStatus.getPath())));\r\n    amResource.setTimestamp(destStatus.getModificationTime());\r\n    amResource.setSize(destStatus.getLen());\r\n    return amResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "submitDirectory",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<String, LocalResource> submitDirectory(Path srcDir, String destRelativeDir) throws IOException\n{\r\n    FileStatus[] fileset = fileSystem.listStatus(srcDir);\r\n    Map<String, LocalResource> localResources = new HashMap<String, LocalResource>(fileset.length);\r\n    for (FileStatus entry : fileset) {\r\n        LocalResource resource = createAmResource(entry.getPath(), LocalResourceType.FILE, LocalResourceVisibility.APPLICATION);\r\n        String relativePath = destRelativeDir + \"/\" + entry.getPath().getName();\r\n        localResources.put(relativePath, resource);\r\n    }\r\n    return localResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "submitJarWithClass",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "LocalResource submitJarWithClass(Class clazz, Path tempPath, String subdir, String jarName) throws IOException, SliderException\n{\r\n    File localFile = ServiceUtils.findContainingJarOrFail(clazz);\r\n    return submitFile(localFile, tempPath, subdir, jarName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "submitFile",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "LocalResource submitFile(File localFile, Path tempPath, String subdir, String destFileName) throws IOException\n{\r\n    Path src = new Path(localFile.toString());\r\n    Path subdirPath = new Path(tempPath, subdir);\r\n    fileSystem.mkdirs(subdirPath);\r\n    Path destPath = new Path(subdirPath, destFileName);\r\n    log.debug(\"Copying {} (size={} bytes) to {}\", localFile, localFile.length(), destPath);\r\n    fileSystem.copyFromLocalFile(false, true, src, destPath);\r\n    return createAmResource(destPath, LocalResourceType.FILE, LocalResourceVisibility.APPLICATION);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "submitTarGzipAndUpdate",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void submitTarGzipAndUpdate(Map<String, LocalResource> providerResources) throws IOException, BadClusterStateException\n{\r\n    Path dependencyLibTarGzip = getDependencyTarGzip();\r\n    LocalResource lc = createAmResource(dependencyLibTarGzip, LocalResourceType.ARCHIVE, LocalResourceVisibility.APPLICATION);\r\n    providerResources.put(YarnServiceConstants.DEPENDENCY_LOCALIZED_DIR_LINK, lc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "copyLocalFileToHdfs",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void copyLocalFileToHdfs(File localPath, Path destPath, FsPermission fp) throws IOException\n{\r\n    if (localPath == null || destPath == null) {\r\n        throw new IOException(\"Either localPath or destPath is null\");\r\n    }\r\n    fileSystem.getConf().set(CommonConfigurationKeys.FS_PERMISSIONS_UMASK_KEY, \"000\");\r\n    fileSystem.mkdirs(destPath.getParent(), fp);\r\n    log.info(\"Copying file {} to {}\", localPath.toURI(), destPath);\r\n    fileSystem.copyFromLocalFile(false, true, new Path(localPath.getPath()), destPath);\r\n    fileSystem.setPermission(destPath, fp);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "copyHdfsFileToLocal",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void copyHdfsFileToLocal(Path hdfsPath, File destFile) throws IOException\n{\r\n    if (hdfsPath == null || destFile == null) {\r\n        throw new IOException(\"Either hdfsPath or destPath is null\");\r\n    }\r\n    log.info(\"Copying file {} to {}\", hdfsPath.toUri(), destFile.toURI());\r\n    Path destPath = new Path(destFile.getPath());\r\n    fileSystem.copyToLocalFile(hdfsPath, destPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "listFSDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String listFSDir(Path path) throws IOException\n{\r\n    FileStatus[] stats = fileSystem.listStatus(path);\r\n    StringBuilder builder = new StringBuilder();\r\n    for (FileStatus stat : stats) {\r\n        builder.append(stat.getPath().toString()).append(\"\\t\").append(stat.getLen()).append(\"\\n\");\r\n    }\r\n    return builder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "cat",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String cat(Path path) throws IOException\n{\r\n    FileStatus status = fileSystem.getFileStatus(path);\r\n    byte[] b = new byte[(int) status.getLen()];\r\n    FSDataInputStream in = null;\r\n    try {\r\n        in = fileSystem.open(path);\r\n        int count = in.read(b);\r\n        return new String(b, 0, count, UTF_8);\r\n    } finally {\r\n        IOUtils.closeStream(in);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "restartPolicy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component restartPolicy(RestartPolicyEnum restartPolicyEnumVal)\n{\r\n    this.restartPolicy = restartPolicyEnumVal;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getRestartPolicy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RestartPolicyEnum getRestartPolicy()\n{\r\n    return restartPolicy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setRestartPolicy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRestartPolicy(RestartPolicyEnum restartPolicy)\n{\r\n    this.restartPolicy = restartPolicy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "name",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component name(String name)\n{\r\n    this.name = name;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "dependencies",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component dependencies(List<String> dependencies)\n{\r\n    this.dependencies = dependencies;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getDependencies",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<String> getDependencies()\n{\r\n    return dependencies;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setDependencies",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDependencies(List<String> dependencies)\n{\r\n    this.dependencies = dependencies;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "readinessCheck",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component readinessCheck(ReadinessCheck readinessCheck)\n{\r\n    this.readinessCheck = readinessCheck;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getReadinessCheck",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReadinessCheck getReadinessCheck()\n{\r\n    return readinessCheck;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setReadinessCheck",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setReadinessCheck(ReadinessCheck readinessCheck)\n{\r\n    this.readinessCheck = readinessCheck;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "artifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component artifact(Artifact artifact)\n{\r\n    this.artifact = artifact;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getArtifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Artifact getArtifact()\n{\r\n    return artifact;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setArtifact",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setArtifact(Artifact artifact)\n{\r\n    this.artifact = artifact;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "launchCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component launchCommand(String launchCommand)\n{\r\n    this.launchCommand = launchCommand;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getLaunchCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getLaunchCommand()\n{\r\n    return launchCommand;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setLaunchCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLaunchCommand(String launchCommand)\n{\r\n    this.launchCommand = launchCommand;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "resource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component resource(Resource resource)\n{\r\n    this.resource = resource;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getResource()\n{\r\n    return resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setResource(Resource resource)\n{\r\n    this.resource = resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "numberOfContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component numberOfContainers(Long numberOfContainers)\n{\r\n    this.numberOfContainers = numberOfContainers;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getNumberOfContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Long getNumberOfContainers()\n{\r\n    return numberOfContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setNumberOfContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNumberOfContainers(Long numberOfContainers)\n{\r\n    this.numberOfContainers = numberOfContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "decommissionedInstances",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component decommissionedInstances(List<String> decommissionedInstances)\n{\r\n    this.decommissionedInstances = decommissionedInstances;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getDecommissionedInstances",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<String> getDecommissionedInstances()\n{\r\n    return decommissionedInstances;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setDecommissionedInstances",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDecommissionedInstances(List<String> decommissionedInstances)\n{\r\n    this.decommissionedInstances = decommissionedInstances;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "addDecommissionedInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addDecommissionedInstance(String componentInstanceName)\n{\r\n    this.decommissionedInstances.add(componentInstanceName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Container> getContainers()\n{\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContainers(List<Container> containers)\n{\r\n    this.containers = containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "addContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addContainer(Container container)\n{\r\n    this.containers.add(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "removeContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeContainer(Container container)\n{\r\n    containers.remove(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Container getContainer(String id)\n{\r\n    for (Container container : containers) {\r\n        if (container.getId().equals(id)) {\r\n            return container;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getComponentInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Container getComponentInstance(String compInstanceName)\n{\r\n    for (Container container : containers) {\r\n        if (compInstanceName.equals(container.getComponentInstanceName())) {\r\n            return container;\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "runPrivilegedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component runPrivilegedContainer(Boolean runPrivilegedContainer)\n{\r\n    this.runPrivilegedContainer = runPrivilegedContainer;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getRunPrivilegedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Boolean getRunPrivilegedContainer()\n{\r\n    return runPrivilegedContainer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setRunPrivilegedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRunPrivilegedContainer(Boolean runPrivilegedContainer)\n{\r\n    this.runPrivilegedContainer = runPrivilegedContainer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "placementPolicy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component placementPolicy(PlacementPolicy placementPolicy)\n{\r\n    this.placementPolicy = placementPolicy;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getPlacementPolicy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PlacementPolicy getPlacementPolicy()\n{\r\n    return placementPolicy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setPlacementPolicy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPlacementPolicy(PlacementPolicy placementPolicy)\n{\r\n    this.placementPolicy = placementPolicy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "configuration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component configuration(Configuration configuration)\n{\r\n    this.configuration = configuration;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConfiguration()\n{\r\n    return configuration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConfiguration(Configuration configuration)\n{\r\n    this.configuration = configuration;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "quicklinks",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component quicklinks(List<String> quicklinks)\n{\r\n    this.quicklinks = quicklinks;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getQuicklinks",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<String> getQuicklinks()\n{\r\n    return quicklinks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setQuicklinks",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setQuicklinks(List<String> quicklinks)\n{\r\n    this.quicklinks = quicklinks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "state",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Component state(ComponentState state)\n{\r\n    this.state = state;\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "getState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ComponentState getState()\n{\r\n    return state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "setState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setState(ComponentState state)\n{\r\n    this.state = state;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "boolean equals(java.lang.Object o)\n{\r\n    if (this == o) {\r\n        return true;\r\n    }\r\n    if (o == null || getClass() != o.getClass()) {\r\n        return false;\r\n    }\r\n    Component component = (Component) o;\r\n    return Objects.equals(this.name, component.name) && Objects.equals(this.dependencies, component.dependencies) && Objects.equals(this.readinessCheck, component.readinessCheck) && Objects.equals(this.artifact, component.artifact) && Objects.equals(this.launchCommand, component.launchCommand) && Objects.equals(this.resource, component.resource) && Objects.equals(this.numberOfContainers, component.numberOfContainers) && Objects.equals(this.runPrivilegedContainer, component.runPrivilegedContainer) && Objects.equals(this.placementPolicy, component.placementPolicy) && Objects.equals(this.configuration, component.configuration) && Objects.equals(this.quicklinks, component.quicklinks) && Objects.equals(this.state, component.state);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(name, dependencies, readinessCheck, artifact, launchCommand, resource, numberOfContainers, runPrivilegedContainer, placementPolicy, configuration, quicklinks, state);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"class Component {\\n\").append(\"    name: \").append(toIndentedString(name)).append(\"\\n\").append(\"    state: \").append(toIndentedString(state)).append(\"\\n\").append(\"    dependencies: \").append(toIndentedString(dependencies)).append(\"\\n\").append(\"    readinessCheck: \").append(toIndentedString(readinessCheck)).append(\"\\n\").append(\"    artifact: \").append(toIndentedString(artifact)).append(\"\\n\").append(\"    launchCommand: \").append(toIndentedString(launchCommand)).append(\"\\n\").append(\"    resource: \").append(toIndentedString(resource)).append(\"\\n\").append(\"    numberOfContainers: \").append(toIndentedString(numberOfContainers)).append(\"\\n\").append(\"    containers: \").append(toIndentedString(containers)).append(\"\\n\").append(\"    runPrivilegedContainer: \").append(toIndentedString(runPrivilegedContainer)).append(\"\\n\").append(\"    placementPolicy: \").append(toIndentedString(placementPolicy)).append(\"\\n\").append(\"    configuration: \").append(toIndentedString(configuration)).append(\"\\n\").append(\"    quicklinks: \").append(toIndentedString(quicklinks)).append(\"\\n\").append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "toIndentedString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toIndentedString(java.lang.Object o)\n{\r\n    if (o == null) {\r\n        return \"null\";\r\n    }\r\n    return o.toString().replace(\"\\n\", \"\\n    \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "mergeFrom",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void mergeFrom(Component that)\n{\r\n    if (this.getArtifact() == null) {\r\n        this.setArtifact(that.getArtifact());\r\n    }\r\n    if (this.getResource() == null) {\r\n        this.setResource(that.getResource());\r\n    }\r\n    if (this.getNumberOfContainers() == null) {\r\n        this.setNumberOfContainers(that.getNumberOfContainers());\r\n    }\r\n    if (this.getLaunchCommand() == null) {\r\n        this.setLaunchCommand(that.getLaunchCommand());\r\n    }\r\n    this.getConfiguration().mergeFrom(that.getConfiguration());\r\n    if (this.getQuicklinks() == null) {\r\n        this.setQuicklinks(that.getQuicklinks());\r\n    }\r\n    if (this.getRunPrivilegedContainer() == null) {\r\n        this.setRunPrivilegedContainer(that.getRunPrivilegedContainer());\r\n    }\r\n    if (this.getDependencies() == null) {\r\n        this.setDependencies(that.getDependencies());\r\n    }\r\n    if (this.getPlacementPolicy() == null) {\r\n        this.setPlacementPolicy(that.getPlacementPolicy());\r\n    }\r\n    if (this.getReadinessCheck() == null) {\r\n        this.setReadinessCheck(that.getReadinessCheck());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\api\\records",
  "methodName" : "overwrite",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void overwrite(Component that)\n{\r\n    setArtifact(that.getArtifact());\r\n    setResource(that.resource);\r\n    setNumberOfContainers(that.getNumberOfContainers());\r\n    setLaunchCommand(that.getLaunchCommand());\r\n    setConfiguration(that.configuration);\r\n    setRunPrivilegedContainer(that.getRunPrivilegedContainer());\r\n    setDependencies(that.getDependencies());\r\n    setPlacementPolicy(that.getPlacementPolicy());\r\n    setReadinessCheck(that.getReadinessCheck());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\docker",
  "methodName" : "createClientProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AbstractClientProvider createClientProvider()\n{\r\n    return Client.PROVIDER;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\docker",
  "methodName" : "createServerProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ProviderService createServerProvider()\n{\r\n    return Server.PROVIDER;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\provider\\docker",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ProviderFactory getInstance()\n{\r\n    return FACTORY;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceInit(Configuration configuration) throws Exception\n{\r\n    fs = new SliderFileSystem(configuration);\r\n    yarnClient = YarnClient.createYarnClient();\r\n    rpc = YarnRPC.create(configuration);\r\n    addService(yarnClient);\r\n    super.serviceInit(configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (registryClient != null) {\r\n        registryClient.stop();\r\n    }\r\n    fs.getFileSystem().close();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "loadAppJsonFromLocalFS",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "Service loadAppJsonFromLocalFS(String fileName, String serviceName, Long lifetime, String queue) throws IOException, YarnException\n{\r\n    File file = new File(fileName);\r\n    if (!file.exists() && fileName.equals(file.getName())) {\r\n        String examplesDirStr = System.getenv(\"YARN_SERVICE_EXAMPLES_DIR\");\r\n        String[] examplesDirs;\r\n        if (examplesDirStr == null) {\r\n            String yarnHome = System.getenv(ApplicationConstants.Environment.HADOOP_YARN_HOME.key());\r\n            examplesDirs = new String[] { yarnHome + \"/share/hadoop/yarn/yarn-service-examples\", yarnHome + \"/yarn-service-examples\" };\r\n        } else {\r\n            examplesDirs = StringUtils.split(examplesDirStr, \":\");\r\n        }\r\n        for (String dir : examplesDirs) {\r\n            file = new File(MessageFormat.format(\"{0}/{1}/{2}.json\", dir, fileName, fileName));\r\n            if (file.exists()) {\r\n                break;\r\n            }\r\n            file = new File(MessageFormat.format(\"{0}/{1}.json\", dir, fileName));\r\n            if (file.exists()) {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    if (!file.exists()) {\r\n        throw new YarnException(\"File or example could not be found: \" + fileName);\r\n    }\r\n    Path filePath = new Path(file.getAbsolutePath());\r\n    LOG.info(\"Loading service definition from local FS: \" + filePath);\r\n    Service service = jsonSerDeser.load(FileSystem.getLocal(getConfig()), filePath);\r\n    if (!StringUtils.isEmpty(serviceName)) {\r\n        service.setName(serviceName);\r\n    }\r\n    if (lifetime != null && lifetime > 0) {\r\n        service.setLifetime(lifetime);\r\n    }\r\n    if (!StringUtils.isEmpty(queue)) {\r\n        service.setQueue(queue);\r\n    }\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionSave",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int actionSave(String fileName, String serviceName, Long lifetime, String queue) throws IOException, YarnException\n{\r\n    return actionBuild(loadAppJsonFromLocalFS(fileName, serviceName, lifetime, queue));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionBuild",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int actionBuild(Service service) throws YarnException, IOException\n{\r\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\r\n    Path appDir = checkAppNotExistOnHdfs(service, false);\r\n    ServiceApiUtil.createDirAndPersistApp(fs, appDir, service);\r\n    return EXIT_SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "upgradePrecheck",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "ApplicationReport upgradePrecheck(Service service) throws YarnException, IOException\n{\r\n    boolean upgradeEnabled = getConfig().getBoolean(YARN_SERVICE_UPGRADE_ENABLED, YARN_SERVICE_UPGRADE_ENABLED_DEFAULT);\r\n    if (!upgradeEnabled) {\r\n        throw new YarnException(ErrorStrings.SERVICE_UPGRADE_DISABLED);\r\n    }\r\n    Service persistedService = ServiceApiUtil.loadService(fs, service.getName());\r\n    if (!StringUtils.isEmpty(persistedService.getId())) {\r\n        cachedAppInfo.put(persistedService.getName(), new AppInfo(ApplicationId.fromString(persistedService.getId()), persistedService.getKerberosPrincipal().getPrincipalName()));\r\n    }\r\n    if (persistedService.getVersion().equals(service.getVersion())) {\r\n        String message = service.getName() + \" is already at version \" + service.getVersion() + \". There is nothing to upgrade.\";\r\n        LOG.error(message);\r\n        throw new YarnException(message);\r\n    }\r\n    boolean foundNotNeverComp = false;\r\n    for (Component comp : persistedService.getComponents()) {\r\n        if (!comp.getRestartPolicy().equals(Component.RestartPolicyEnum.NEVER)) {\r\n            foundNotNeverComp = true;\r\n            break;\r\n        }\r\n    }\r\n    if (!foundNotNeverComp) {\r\n        String message = \"All the components of the service \" + service.getName() + \" have \" + Component.RestartPolicyEnum.NEVER + \" restart policy, \" + \"so it cannot be upgraded.\";\r\n        LOG.error(message);\r\n        throw new YarnException(message);\r\n    }\r\n    Service liveService = getStatus(service.getName());\r\n    if (!liveService.getState().equals(ServiceState.STABLE)) {\r\n        String message = service.getName() + \" is at \" + liveService.getState() + \" state and upgrade can only be initiated when service is STABLE.\";\r\n        LOG.error(message);\r\n        throw new YarnException(message);\r\n    }\r\n    Path serviceUpgradeDir = checkAppNotExistOnHdfs(service, true);\r\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\r\n    ServiceApiUtil.createDirAndPersistApp(fs, serviceUpgradeDir, service);\r\n    ApplicationReport appReport = yarnClient.getApplicationReport(getAppId(service.getName()));\r\n    if (StringUtils.isEmpty(appReport.getHost())) {\r\n        throw new YarnException(service.getName() + \" AM hostname is empty\");\r\n    }\r\n    return appReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionUpgradeExpress",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int actionUpgradeExpress(String appName, File path) throws IOException, YarnException\n{\r\n    Service service = loadAppJsonFromLocalFS(path.getAbsolutePath(), appName, null, null);\r\n    service.setState(ServiceState.UPGRADING_AUTO_FINALIZE);\r\n    actionUpgradeExpress(service);\r\n    return EXIT_SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionUpgradeExpress",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "int actionUpgradeExpress(Service service) throws YarnException, IOException\n{\r\n    ApplicationReport appReport = upgradePrecheck(service);\r\n    ClientAMProtocol proxy = createAMProxy(service.getName(), appReport);\r\n    UpgradeServiceRequestProto.Builder requestBuilder = UpgradeServiceRequestProto.newBuilder();\r\n    requestBuilder.setVersion(service.getVersion());\r\n    if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\r\n        requestBuilder.setAutoFinalize(true);\r\n    }\r\n    if (service.getState().equals(ServiceState.EXPRESS_UPGRADING)) {\r\n        requestBuilder.setExpressUpgrade(true);\r\n        requestBuilder.setAutoFinalize(true);\r\n    }\r\n    UpgradeServiceResponseProto responseProto = proxy.upgrade(requestBuilder.build());\r\n    if (responseProto.hasError()) {\r\n        LOG.error(\"Service {} express upgrade to version {} failed because {}\", service.getName(), service.getVersion(), responseProto.getError());\r\n        throw new YarnException(\"Failed to express upgrade service \" + service.getName() + \" to version \" + service.getVersion() + \" because \" + responseProto.getError());\r\n    }\r\n    return EXIT_SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "initiateUpgrade",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int initiateUpgrade(String appName, String fileName, boolean autoFinalize) throws IOException, YarnException\n{\r\n    Service upgradeService = loadAppJsonFromLocalFS(fileName, appName, null, null);\r\n    if (autoFinalize) {\r\n        upgradeService.setState(ServiceState.UPGRADING_AUTO_FINALIZE);\r\n    } else {\r\n        upgradeService.setState(ServiceState.UPGRADING);\r\n    }\r\n    return initiateUpgrade(upgradeService);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "initiateUpgrade",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "int initiateUpgrade(Service service) throws YarnException, IOException\n{\r\n    ApplicationReport appReport = upgradePrecheck(service);\r\n    ClientAMProtocol proxy = createAMProxy(service.getName(), appReport);\r\n    UpgradeServiceRequestProto.Builder requestBuilder = UpgradeServiceRequestProto.newBuilder();\r\n    requestBuilder.setVersion(service.getVersion());\r\n    if (service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\r\n        requestBuilder.setAutoFinalize(true);\r\n    }\r\n    UpgradeServiceResponseProto responseProto = proxy.upgrade(requestBuilder.build());\r\n    if (responseProto.hasError()) {\r\n        LOG.error(\"Service {} upgrade to version {} failed because {}\", service.getName(), service.getVersion(), responseProto.getError());\r\n        throw new YarnException(\"Failed to upgrade service \" + service.getName() + \" to version \" + service.getVersion() + \" because \" + responseProto.getError());\r\n    }\r\n    return EXIT_SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionUpgradeInstances",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int actionUpgradeInstances(String appName, List<String> componentInstances) throws IOException, YarnException\n{\r\n    checkAppExistOnHdfs(appName);\r\n    Service persistedService = ServiceApiUtil.loadService(fs, appName);\r\n    List<Container> containersToUpgrade = ServiceApiUtil.getLiveContainers(persistedService, componentInstances);\r\n    ServiceApiUtil.validateInstancesUpgrade(containersToUpgrade);\r\n    return actionUpgrade(persistedService, containersToUpgrade);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionUpgradeComponents",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int actionUpgradeComponents(String appName, List<String> components) throws IOException, YarnException\n{\r\n    checkAppExistOnHdfs(appName);\r\n    Service persistedService = ServiceApiUtil.loadService(fs, appName);\r\n    List<Container> containersToUpgrade = ServiceApiUtil.validateAndResolveCompsUpgrade(persistedService, components);\r\n    return actionUpgrade(persistedService, containersToUpgrade);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionCancelUpgrade",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "int actionCancelUpgrade(String appName) throws IOException, YarnException\n{\r\n    Service liveService = getStatus(appName);\r\n    if (liveService == null || !ServiceState.isUpgrading(liveService.getState())) {\r\n        throw new YarnException(\"Service \" + appName + \" is not upgrading, \" + \"so nothing to cancel.\");\r\n    }\r\n    ApplicationReport appReport = yarnClient.getApplicationReport(getAppId(appName));\r\n    if (StringUtils.isEmpty(appReport.getHost())) {\r\n        throw new YarnException(appName + \" AM hostname is empty\");\r\n    }\r\n    ClientAMProtocol proxy = createAMProxy(appName, appReport);\r\n    proxy.cancelUpgrade(CancelUpgradeRequestProto.newBuilder().build());\r\n    return EXIT_SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionDecommissionInstances",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "int actionDecommissionInstances(String appName, List<String> componentInstances) throws IOException, YarnException\n{\r\n    checkAppExistOnHdfs(appName);\r\n    Service persistedService = ServiceApiUtil.loadService(fs, appName);\r\n    if (StringUtils.isEmpty(persistedService.getId())) {\r\n        throw new YarnException(persistedService.getName() + \" appId is null, may be not submitted \" + \"to YARN yet\");\r\n    }\r\n    cachedAppInfo.put(persistedService.getName(), new AppInfo(ApplicationId.fromString(persistedService.getId()), persistedService.getKerberosPrincipal().getPrincipalName()));\r\n    for (String instance : componentInstances) {\r\n        String componentName = ServiceApiUtil.parseComponentName(ServiceApiUtil.parseAndValidateComponentInstanceName(instance, appName, getConfig()));\r\n        Component component = persistedService.getComponent(componentName);\r\n        if (component == null) {\r\n            throw new IllegalArgumentException(instance + \" does not exist !\");\r\n        }\r\n        if (!component.getDecommissionedInstances().contains(instance)) {\r\n            component.addDecommissionedInstance(instance);\r\n            component.setNumberOfContainers(Math.max(0, component.getNumberOfContainers() - 1));\r\n        }\r\n    }\r\n    ServiceApiUtil.writeAppDefinition(fs, persistedService);\r\n    ApplicationReport appReport = yarnClient.getApplicationReport(ApplicationId.fromString(persistedService.getId()));\r\n    if (appReport.getYarnApplicationState() != RUNNING) {\r\n        String message = persistedService.getName() + \" is at \" + appReport.getYarnApplicationState() + \" state, decommission can only be \" + \"invoked when service is running\";\r\n        LOG.error(message);\r\n        throw new YarnException(message);\r\n    }\r\n    if (StringUtils.isEmpty(appReport.getHost())) {\r\n        throw new YarnException(persistedService.getName() + \" AM hostname is \" + \"empty\");\r\n    }\r\n    ClientAMProtocol proxy = createAMProxy(persistedService.getName(), appReport);\r\n    DecommissionCompInstancesRequestProto.Builder requestBuilder = DecommissionCompInstancesRequestProto.newBuilder();\r\n    requestBuilder.addAllCompInstances(componentInstances);\r\n    proxy.decommissionCompInstances(requestBuilder.build());\r\n    return EXIT_SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionCleanUp",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int actionCleanUp(String appName, String userName) throws IOException, YarnException\n{\r\n    if (cleanUpRegistry(appName, userName)) {\r\n        return EXIT_SUCCESS;\r\n    } else {\r\n        return EXIT_FALSE;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getInstances",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getInstances(String appName, List<String> components, String version, List<String> containerStates) throws IOException, YarnException\n{\r\n    GetCompInstancesResponseProto result = filterContainers(appName, components, version, containerStates);\r\n    return result.getCompInstances();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ComponentContainers[] getContainers(String appName, List<String> components, String version, List<ContainerState> containerStates) throws IOException, YarnException\n{\r\n    GetCompInstancesResponseProto result = filterContainers(appName, components, version, containerStates != null ? containerStates.stream().map(Enum::toString).collect(Collectors.toList()) : null);\r\n    return ServiceApiUtil.COMP_CONTAINERS_JSON_SERDE.fromJson(result.getCompInstances());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "filterContainers",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "GetCompInstancesResponseProto filterContainers(String appName, List<String> components, String version, List<String> containerStates) throws IOException, YarnException\n{\r\n    ApplicationReport appReport = yarnClient.getApplicationReport(getAppId(appName));\r\n    if (StringUtils.isEmpty(appReport.getHost())) {\r\n        throw new YarnException(appName + \" AM hostname is empty.\");\r\n    }\r\n    ClientAMProtocol proxy = createAMProxy(appName, appReport);\r\n    GetCompInstancesRequestProto.Builder req = GetCompInstancesRequestProto.newBuilder();\r\n    if (components != null && !components.isEmpty()) {\r\n        req.addAllComponentNames(components);\r\n    }\r\n    if (version != null) {\r\n        req.setVersion(version);\r\n    }\r\n    if (containerStates != null && !containerStates.isEmpty()) {\r\n        req.addAllContainerStates(containerStates);\r\n    }\r\n    return proxy.getCompInstances(req.build());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionUpgrade",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "int actionUpgrade(Service service, List<Container> compInstances) throws IOException, YarnException\n{\r\n    ApplicationReport appReport = yarnClient.getApplicationReport(getAppId(service.getName()));\r\n    if (appReport.getYarnApplicationState() != RUNNING) {\r\n        String message = service.getName() + \" is at \" + appReport.getYarnApplicationState() + \" state, upgrade can only be invoked when service is running.\";\r\n        LOG.error(message);\r\n        throw new YarnException(message);\r\n    }\r\n    if (StringUtils.isEmpty(appReport.getHost())) {\r\n        throw new YarnException(service.getName() + \" AM hostname is empty.\");\r\n    }\r\n    ClientAMProtocol proxy = createAMProxy(service.getName(), appReport);\r\n    List<String> containerIdsToUpgrade = new ArrayList<>();\r\n    compInstances.forEach(compInst -> containerIdsToUpgrade.add(compInst.getId()));\r\n    LOG.info(\"instances to upgrade {}\", containerIdsToUpgrade);\r\n    CompInstancesUpgradeRequestProto.Builder upgradeRequestBuilder = CompInstancesUpgradeRequestProto.newBuilder();\r\n    upgradeRequestBuilder.addAllContainerIds(containerIdsToUpgrade);\r\n    proxy.upgrade(upgradeRequestBuilder.build());\r\n    return EXIT_SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionLaunch",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int actionLaunch(String fileName, String serviceName, Long lifetime, String queue) throws IOException, YarnException\n{\r\n    actionCreate(loadAppJsonFromLocalFS(fileName, serviceName, lifetime, queue));\r\n    return EXIT_SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionCreate",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "ApplicationId actionCreate(Service service) throws IOException, YarnException\n{\r\n    String serviceName = service.getName();\r\n    ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\r\n    verifyNoLiveAppInRM(serviceName, \"create\");\r\n    Path appDir = checkAppNotExistOnHdfs(service, false);\r\n    ServiceApiUtil.createDirAndPersistApp(fs, appDir, service);\r\n    ApplicationId appId;\r\n    try {\r\n        appId = submitApp(service);\r\n    } catch (YarnException e) {\r\n        actionDestroy(serviceName);\r\n        throw e;\r\n    }\r\n    cachedAppInfo.put(serviceName, new AppInfo(appId, service.getKerberosPrincipal().getPrincipalName()));\r\n    service.setId(appId.toString());\r\n    ServiceApiUtil.writeAppDefinition(fs, appDir, service);\r\n    return appId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionFlex",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "int actionFlex(String serviceName, Map<String, String> componentCountStrings) throws YarnException, IOException\n{\r\n    Map<String, Long> componentCounts = new HashMap<>(componentCountStrings.size());\r\n    Service persistedService = ServiceApiUtil.loadService(fs, serviceName);\r\n    if (!StringUtils.isEmpty(persistedService.getId())) {\r\n        cachedAppInfo.put(persistedService.getName(), new AppInfo(ApplicationId.fromString(persistedService.getId()), persistedService.getKerberosPrincipal().getPrincipalName()));\r\n    } else {\r\n        throw new YarnException(persistedService.getName() + \" appId is null, may be not submitted to YARN yet\");\r\n    }\r\n    for (Map.Entry<String, String> entry : componentCountStrings.entrySet()) {\r\n        String compName = entry.getKey();\r\n        ServiceApiUtil.validateNameFormat(compName, getConfig());\r\n        Component component = persistedService.getComponent(compName);\r\n        if (component == null) {\r\n            throw new IllegalArgumentException(entry.getKey() + \" does not exist !\");\r\n        }\r\n        long numberOfContainers = parseNumberOfContainers(component, entry.getValue());\r\n        componentCounts.put(compName, numberOfContainers);\r\n    }\r\n    flexComponents(serviceName, componentCounts, persistedService);\r\n    return EXIT_SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "parseNumberOfContainers",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "long parseNumberOfContainers(Component component, String newNumber)\n{\r\n    long orig = component.getNumberOfContainers();\r\n    if (newNumber.startsWith(\"+\")) {\r\n        return orig + Long.parseLong(newNumber.substring(1));\r\n    } else if (newNumber.startsWith(\"-\")) {\r\n        long ret = orig - Long.parseLong(newNumber.substring(1));\r\n        if (ret < 0) {\r\n            LOG.warn(MessageFormat.format(\"[COMPONENT {0}]: component count goes to negative ({1}{2} = {3}),\" + \" ignore and reset it to 0.\", component.getName(), orig, newNumber, ret));\r\n            ret = 0;\r\n        }\r\n        return ret;\r\n    } else {\r\n        return Long.parseLong(newNumber);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "flexByRestService",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<String, Long> flexByRestService(String serviceName, Map<String, Long> componentCounts) throws YarnException, IOException\n{\r\n    Service persistedService = ServiceApiUtil.loadService(fs, serviceName);\r\n    if (StringUtils.isEmpty(persistedService.getId())) {\r\n        throw new YarnException(serviceName + \" appId is null, may be not submitted to YARN yet\");\r\n    }\r\n    cachedAppInfo.put(persistedService.getName(), new AppInfo(ApplicationId.fromString(persistedService.getId()), persistedService.getKerberosPrincipal().getPrincipalName()));\r\n    return flexComponents(serviceName, componentCounts, persistedService);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "flexComponents",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "Map<String, Long> flexComponents(String serviceName, Map<String, Long> componentCounts, Service persistedService) throws YarnException, IOException\n{\r\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\r\n    Map<String, Long> original = new HashMap<>(componentCounts.size());\r\n    ComponentCountProto.Builder countBuilder = ComponentCountProto.newBuilder();\r\n    FlexComponentsRequestProto.Builder requestBuilder = FlexComponentsRequestProto.newBuilder();\r\n    for (Component persistedComp : persistedService.getComponents()) {\r\n        String name = persistedComp.getName();\r\n        if (componentCounts.containsKey(persistedComp.getName())) {\r\n            original.put(name, persistedComp.getNumberOfContainers());\r\n            persistedComp.setNumberOfContainers(componentCounts.get(name));\r\n            countBuilder.setName(persistedComp.getName()).setNumberOfContainers(persistedComp.getNumberOfContainers());\r\n            requestBuilder.addComponents(countBuilder.build());\r\n        }\r\n    }\r\n    if (original.size() < componentCounts.size()) {\r\n        componentCounts.keySet().removeAll(original.keySet());\r\n        throw new YarnException(\"Components \" + componentCounts.keySet() + \" do not exist in app definition.\");\r\n    }\r\n    ServiceApiUtil.writeAppDefinition(fs, persistedService);\r\n    ApplicationId appId = getAppId(serviceName);\r\n    if (appId == null) {\r\n        String message = \"Application ID doesn't exist for \" + serviceName;\r\n        LOG.error(message);\r\n        throw new YarnException(message);\r\n    }\r\n    ApplicationReport appReport = yarnClient.getApplicationReport(appId);\r\n    if (appReport.getYarnApplicationState() != RUNNING) {\r\n        String message = serviceName + \" is at \" + appReport.getYarnApplicationState() + \" state, flex can only be invoked when service is running\";\r\n        LOG.error(message);\r\n        throw new YarnException(message);\r\n    }\r\n    Service liveService = getStatus(serviceName);\r\n    if (liveService.getState().equals(ServiceState.UPGRADING) || liveService.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\r\n        String message = serviceName + \" is at \" + liveService.getState() + \" state, flex can not be invoked when service is upgrading. \";\r\n        LOG.error(message);\r\n        throw new YarnException(message);\r\n    }\r\n    if (StringUtils.isEmpty(appReport.getHost())) {\r\n        throw new YarnException(serviceName + \" AM hostname is empty\");\r\n    }\r\n    ClientAMProtocol proxy = createAMProxy(serviceName, appReport);\r\n    proxy.flexComponents(requestBuilder.build());\r\n    for (Map.Entry<String, Long> entry : original.entrySet()) {\r\n        LOG.info(\"[COMPONENT {}]: number of containers changed from {} to {}\", entry.getKey(), entry.getValue(), componentCounts.get(entry.getKey()));\r\n    }\r\n    return original;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionStop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int actionStop(String serviceName) throws YarnException, IOException\n{\r\n    return actionStop(serviceName, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionStop",
  "errType" : [ "IOException|YarnException|InterruptedException" ],
  "containingMethodsNum" : 36,
  "sourceCodeText" : "int actionStop(String serviceName, boolean waitForAppStopped) throws YarnException, IOException\n{\r\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\r\n    ApplicationId currentAppId = getAppId(serviceName);\r\n    if (currentAppId == null) {\r\n        LOG.info(\"Application ID doesn't exist for service {}\", serviceName);\r\n        cleanUpRegistry(serviceName);\r\n        return EXIT_COMMAND_ARGUMENT_ERROR;\r\n    }\r\n    ApplicationReport report = yarnClient.getApplicationReport(currentAppId);\r\n    if (terminatedStates.contains(report.getYarnApplicationState())) {\r\n        LOG.info(\"Service {} is already in a terminated state {}\", serviceName, report.getYarnApplicationState());\r\n        cleanUpRegistry(serviceName);\r\n        return EXIT_COMMAND_ARGUMENT_ERROR;\r\n    }\r\n    if (preRunningStates.contains(report.getYarnApplicationState())) {\r\n        String msg = serviceName + \" is at \" + report.getYarnApplicationState() + \", forcefully killed by user!\";\r\n        yarnClient.killApplication(currentAppId, msg);\r\n        LOG.info(msg);\r\n        cleanUpRegistry(serviceName);\r\n        return EXIT_SUCCESS;\r\n    }\r\n    if (StringUtils.isEmpty(report.getHost())) {\r\n        throw new YarnException(serviceName + \" AM hostname is empty\");\r\n    }\r\n    LOG.info(\"Stopping service {}, with appId = {}\", serviceName, currentAppId);\r\n    try {\r\n        ClientAMProtocol proxy = createAMProxy(serviceName, report);\r\n        cachedAppInfo.remove(serviceName);\r\n        if (proxy != null) {\r\n            StopRequestProto request = StopRequestProto.newBuilder().build();\r\n            proxy.stop(request);\r\n            LOG.info(\"Service \" + serviceName + \" is being gracefully stopped...\");\r\n        } else {\r\n            yarnClient.killApplication(currentAppId, serviceName + \" is forcefully killed by user!\");\r\n            LOG.info(\"Forcefully kill the service: \" + serviceName);\r\n            cleanUpRegistry(serviceName);\r\n            return EXIT_SUCCESS;\r\n        }\r\n        if (!waitForAppStopped) {\r\n            cleanUpRegistry(serviceName);\r\n            return EXIT_SUCCESS;\r\n        }\r\n        long startTime = System.currentTimeMillis();\r\n        int pollCount = 0;\r\n        while (true) {\r\n            Thread.sleep(2000);\r\n            report = yarnClient.getApplicationReport(currentAppId);\r\n            if (terminatedStates.contains(report.getYarnApplicationState())) {\r\n                LOG.info(\"Service \" + serviceName + \" is stopped.\");\r\n                break;\r\n            }\r\n            if ((System.currentTimeMillis() - startTime) > 10000) {\r\n                LOG.info(\"Stop operation timeout stopping, forcefully kill the app \" + serviceName);\r\n                yarnClient.killApplication(currentAppId, \"Forcefully kill the app by user\");\r\n                break;\r\n            }\r\n            if (++pollCount % 10 == 0) {\r\n                LOG.info(\"Waiting for service \" + serviceName + \" to be stopped.\");\r\n            }\r\n        }\r\n    } catch (IOException | YarnException | InterruptedException e) {\r\n        LOG.info(\"Failed to stop \" + serviceName + \" gracefully due to: \" + e.getMessage() + \", forcefully kill the app.\");\r\n        yarnClient.killApplication(currentAppId, \"Forcefully kill the app\");\r\n    }\r\n    cleanUpRegistry(serviceName);\r\n    return EXIT_SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionDestroy",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "int actionDestroy(String serviceName) throws YarnException, IOException\n{\r\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\r\n    verifyNoLiveAppInRM(serviceName, \"destroy\");\r\n    Path appDir = fs.buildClusterDirPath(serviceName);\r\n    FileSystem fileSystem = fs.getFileSystem();\r\n    cachedAppInfo.remove(serviceName);\r\n    int ret = EXIT_SUCCESS;\r\n    if (fileSystem.exists(appDir)) {\r\n        if (fileSystem.delete(appDir, true)) {\r\n            LOG.info(\"Successfully deleted service dir for \" + serviceName + \": \" + appDir);\r\n        } else {\r\n            String message = \"Failed to delete service + \" + serviceName + \" at:  \" + appDir;\r\n            LOG.info(message);\r\n            throw new YarnException(message);\r\n        }\r\n    } else {\r\n        LOG.info(\"Service '\" + serviceName + \"' doesn't exist at hdfs path: \" + appDir);\r\n        ret = EXIT_NOT_FOUND;\r\n    }\r\n    Path publicResourceDir = new Path(fs.getBasePath(), serviceName);\r\n    if (fileSystem.exists(publicResourceDir)) {\r\n        if (fileSystem.delete(publicResourceDir, true)) {\r\n            LOG.info(\"Successfully deleted public resource dir for \" + serviceName + \": \" + publicResourceDir);\r\n        } else {\r\n            String message = \"Failed to delete public resource dir for service \" + serviceName + \" at:  \" + publicResourceDir;\r\n            LOG.info(message);\r\n            throw new YarnException(message);\r\n        }\r\n    }\r\n    try {\r\n        deleteZKNode(serviceName);\r\n    } catch (Exception e) {\r\n        throw new IOException(\"Could not delete zk node for \" + serviceName, e);\r\n    }\r\n    if (!cleanUpRegistry(serviceName)) {\r\n        if (ret == EXIT_SUCCESS) {\r\n            ret = EXIT_OTHER_FAILURE;\r\n        }\r\n    }\r\n    if (ret == EXIT_SUCCESS) {\r\n        LOG.info(\"Successfully destroyed service {}\", serviceName);\r\n        return ret;\r\n    } else if (ret == EXIT_NOT_FOUND) {\r\n        LOG.error(\"Error on destroy '\" + serviceName + \"': not found.\");\r\n        return ret;\r\n    } else {\r\n        LOG.error(\"Error on destroy '\" + serviceName + \"': error cleaning up \" + \"registry.\");\r\n        return ret;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "cleanUpRegistry",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean cleanUpRegistry(String serviceName, String user) throws SliderException\n{\r\n    String encodedName = RegistryUtils.registryUser(user);\r\n    String registryPath = RegistryUtils.servicePath(encodedName, YarnServiceConstants.APP_TYPE, serviceName);\r\n    return cleanUpRegistryPath(registryPath, serviceName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "cleanUpRegistry",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean cleanUpRegistry(String serviceName) throws SliderException\n{\r\n    String registryPath = ServiceRegistryUtils.registryPathForInstance(serviceName);\r\n    return cleanUpRegistryPath(registryPath, serviceName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "cleanUpRegistryPath",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean cleanUpRegistryPath(String registryPath, String serviceName) throws SliderException\n{\r\n    try {\r\n        if (getRegistryClient().exists(registryPath)) {\r\n            getRegistryClient().delete(registryPath, true);\r\n        } else {\r\n            LOG.info(\"Service '\" + serviceName + \"' doesn't exist at ZK registry path: \" + registryPath);\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Error deleting registry entry {}\", registryPath, e);\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getRegistryClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "RegistryOperations getRegistryClient() throws SliderException, IOException\n{\r\n    if (registryClient == null) {\r\n        registryClient = RegistryOperationsFactory.createInstance(\"ServiceClient\", getConfig());\r\n        registryClient.init(getConfig());\r\n        registryClient.start();\r\n    }\r\n    return registryClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "deleteZKNode",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean deleteZKNode(String serviceName) throws Exception\n{\r\n    CuratorFramework curatorFramework = getCuratorClient();\r\n    String user = RegistryUtils.currentUser();\r\n    String zkPath = ServiceRegistryUtils.mkServiceHomePath(user, serviceName);\r\n    if (curatorFramework.checkExists().forPath(zkPath) != null) {\r\n        curatorFramework.delete().deletingChildrenIfNeeded().forPath(zkPath);\r\n        LOG.info(\"Deleted zookeeper path: \" + zkPath);\r\n        return true;\r\n    } else {\r\n        LOG.info(\"Service '\" + serviceName + \"' doesn't exist at ZK path: \" + zkPath);\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getCuratorClient",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "CuratorFramework getCuratorClient() throws BadConfigException\n{\r\n    String registryQuorum = getConfig().get(RegistryConstants.KEY_REGISTRY_ZK_QUORUM);\r\n    if (ServiceUtils.isUnset(registryQuorum)) {\r\n        throw new BadConfigException(\"No Zookeeper quorum provided in the\" + \" configuration property \" + RegistryConstants.KEY_REGISTRY_ZK_QUORUM);\r\n    }\r\n    ZookeeperUtils.splitToHostsAndPortsStrictly(registryQuorum);\r\n    if (curatorClient == null) {\r\n        curatorClient = CuratorFrameworkFactory.builder().connectString(registryQuorum).sessionTimeoutMs(10000).retryPolicy(new RetryNTimes(5, 2000)).build();\r\n        curatorClient.start();\r\n    }\r\n    return curatorClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "verifyNoLiveAppInRM",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void verifyNoLiveAppInRM(String serviceName, String action) throws IOException, YarnException\n{\r\n    Set<String> types = new HashSet<>(1);\r\n    types.add(YarnServiceConstants.APP_TYPE);\r\n    Set<String> tags = null;\r\n    if (serviceName != null) {\r\n        tags = Collections.singleton(ServiceUtils.createNameTag(serviceName));\r\n    }\r\n    GetApplicationsRequest request = GetApplicationsRequest.newInstance();\r\n    request.setApplicationTypes(types);\r\n    request.setApplicationTags(tags);\r\n    request.setApplicationStates(liveStates);\r\n    String user = UserGroupInformation.getCurrentUser().getUserName();\r\n    if (user != null) {\r\n        request.setUsers(Collections.singleton(user));\r\n    }\r\n    List<ApplicationReport> reports = yarnClient.getApplications(request);\r\n    if (!reports.isEmpty()) {\r\n        String message = \"\";\r\n        if (action.equals(\"destroy\")) {\r\n            message = \"Failed to destroy service \" + serviceName + \", because it is still running.\";\r\n        } else {\r\n            message = \"Failed to \" + action + \" service \" + serviceName + \", because it already exists.\";\r\n        }\r\n        throw new YarnException(message);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "submitApp",
  "errType" : null,
  "containingMethodsNum" : 39,
  "sourceCodeText" : "ApplicationId submitApp(Service app) throws IOException, YarnException\n{\r\n    String serviceName = app.getName();\r\n    Configuration conf = getConfig();\r\n    Path appRootDir = fs.buildClusterDirPath(app.getName());\r\n    YarnClientApplication yarnApp = yarnClient.createApplication();\r\n    ApplicationSubmissionContext submissionContext = yarnApp.getApplicationSubmissionContext();\r\n    ServiceApiUtil.validateCompResourceSize(yarnApp.getNewApplicationResponse().getMaximumResourceCapability(), app);\r\n    submissionContext.setKeepContainersAcrossApplicationAttempts(true);\r\n    if (app.getLifetime() > 0) {\r\n        Map<ApplicationTimeoutType, Long> appTimeout = new HashMap<>();\r\n        appTimeout.put(ApplicationTimeoutType.LIFETIME, app.getLifetime());\r\n        submissionContext.setApplicationTimeouts(appTimeout);\r\n    }\r\n    submissionContext.setMaxAppAttempts(YarnServiceConf.getInt(YarnServiceConf.AM_RESTART_MAX, DEFAULT_AM_RESTART_MAX, app.getConfiguration(), conf));\r\n    submissionContext.setAttemptFailuresValidityInterval(YarnServiceConf.getLong(YarnServiceConf.AM_FAILURES_VALIDITY_INTERVAL, DEFAULT_AM_FAILURES_VALIDITY_INTERVAL, app.getConfiguration(), conf));\r\n    setLogAggregationContext(app, conf, submissionContext);\r\n    Map<String, LocalResource> localResources = new HashMap<>();\r\n    boolean hasAMLog4j = addAMLog4jResource(serviceName, conf, localResources);\r\n    addJarResource(serviceName, localResources);\r\n    addKeytabResourceIfSecure(fs, localResources, app);\r\n    addYarnSysFs(appRootDir, localResources, app);\r\n    if (LOG.isDebugEnabled()) {\r\n        printLocalResources(localResources);\r\n    }\r\n    Map<String, String> env = addAMEnv();\r\n    String cmdStr = buildCommandLine(app, conf, appRootDir, hasAMLog4j);\r\n    submissionContext.setResource(Resource.newInstance(YarnServiceConf.getLong(YarnServiceConf.AM_RESOURCE_MEM, YarnServiceConf.DEFAULT_KEY_AM_RESOURCE_MEM, app.getConfiguration(), conf), 1));\r\n    String queue = app.getQueue();\r\n    if (StringUtils.isEmpty(queue)) {\r\n        queue = conf.get(YARN_QUEUE, DEFAULT_YARN_QUEUE);\r\n    }\r\n    submissionContext.setQueue(queue);\r\n    submissionContext.setApplicationName(serviceName);\r\n    submissionContext.setApplicationType(YarnServiceConstants.APP_TYPE);\r\n    Set<String> appTags = AbstractClientProvider.createApplicationTags(serviceName, null, null);\r\n    if (!appTags.isEmpty()) {\r\n        submissionContext.setApplicationTags(appTags);\r\n    }\r\n    ContainerLaunchContext amLaunchContext = Records.newRecord(ContainerLaunchContext.class);\r\n    amLaunchContext.setCommands(Collections.singletonList(cmdStr));\r\n    amLaunchContext.setEnvironment(env);\r\n    amLaunchContext.setLocalResources(localResources);\r\n    addCredentials(amLaunchContext, app);\r\n    submissionContext.setAMContainerSpec(amLaunchContext);\r\n    yarnClient.submitApplication(submissionContext);\r\n    return submissionContext.getApplicationId();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "compressFiles",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "File compressFiles(Collection<File> files, File output, String bundleRoot) throws IOException\n{\r\n    try (FileOutputStream fos = new FileOutputStream(output);\r\n        TarArchiveOutputStream taos = new TarArchiveOutputStream(new BufferedOutputStream(fos))) {\r\n        taos.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\r\n        for (File f : files) {\r\n            addFilesToCompression(taos, f, \"sysfs\", bundleRoot);\r\n        }\r\n    }\r\n    return output;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "addFilesToCompression",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void addFilesToCompression(TarArchiveOutputStream taos, File file, String dir, String bundleRoot) throws IOException\n{\r\n    if (!file.isHidden()) {\r\n        if (!dir.equals(\".\")) {\r\n            if (File.separator.equals(\"\\\\\")) {\r\n                dir = dir.replaceAll(\"\\\\\\\\\", \"/\");\r\n            }\r\n        }\r\n        taos.putArchiveEntry(new TarArchiveEntry(file, dir + \"/\" + file.getName()));\r\n        if (file.isFile()) {\r\n            try (FileInputStream input = new FileInputStream(file)) {\r\n                IOUtils.copy(input, taos);\r\n                taos.closeArchiveEntry();\r\n            }\r\n        } else if (file.isDirectory()) {\r\n            if (!dir.equals(\".\")) {\r\n                taos.closeArchiveEntry();\r\n            }\r\n            File[] allFiles = file.listFiles();\r\n            if (allFiles != null) {\r\n                for (File childFile : allFiles) {\r\n                    addFilesToCompression(taos, childFile, file.getPath().substring(bundleRoot.length()), bundleRoot);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "addYarnSysFs",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void addYarnSysFs(Path path, Map<String, LocalResource> localResources, Service app) throws IOException\n{\r\n    List<Component> componentsWithYarnSysFS = new ArrayList<Component>();\r\n    for (Component c : app.getComponents()) {\r\n        boolean enabled = Boolean.parseBoolean(c.getConfiguration().getEnv(ApplicationConstants.Environment.YARN_CONTAINER_RUNTIME_YARN_SYSFS_ENABLE.name()));\r\n        if (enabled) {\r\n            componentsWithYarnSysFS.add(c);\r\n        }\r\n    }\r\n    if (componentsWithYarnSysFS.size() == 0) {\r\n        return;\r\n    }\r\n    String buffer = ServiceApiUtil.jsonSerDeser.toJson(app);\r\n    File testDir = new File(System.getProperty(\"java.io.tmpdir\"));\r\n    File tmpDir = Files.createTempDirectory(testDir.toPath(), System.currentTimeMillis() + \"-\").toFile();\r\n    if (tmpDir.exists()) {\r\n        String serviceJsonPath = tmpDir.getAbsolutePath() + \"/app.json\";\r\n        File localFile = new File(serviceJsonPath);\r\n        if (localFile.createNewFile()) {\r\n            try (Writer writer = new OutputStreamWriter(new FileOutputStream(localFile), StandardCharsets.UTF_8)) {\r\n                writer.write(buffer);\r\n            }\r\n        } else {\r\n            throw new IOException(\"Fail to write app.json to temp directory\");\r\n        }\r\n        File destinationFile = new File(tmpDir.getAbsolutePath() + \"/sysfs.tar\");\r\n        if (!destinationFile.createNewFile()) {\r\n            throw new IOException(\"Fail to localize sysfs.tar.\");\r\n        }\r\n        List<File> files = new ArrayList<File>();\r\n        files.add(localFile);\r\n        compressFiles(files, destinationFile, \"sysfs\");\r\n        LocalResource localResource = fs.submitFile(destinationFile, path, \".\", \"sysfs.tar\");\r\n        Path serviceJson = new Path(path, \"sysfs.tar\");\r\n        for (Component c : componentsWithYarnSysFS) {\r\n            ConfigFile e = new ConfigFile();\r\n            e.type(TypeEnum.ARCHIVE);\r\n            e.srcFile(serviceJson.toString());\r\n            e.destFile(\"/hadoop/yarn\");\r\n            if (!c.getConfiguration().getFiles().contains(e)) {\r\n                c.getConfiguration().getFiles().add(e);\r\n            }\r\n        }\r\n        localResources.put(\"sysfs\", localResource);\r\n        if (!tmpDir.delete()) {\r\n            LOG.warn(\"Failed to delete temp file: \" + tmpDir.getAbsolutePath());\r\n        }\r\n    } else {\r\n        throw new IOException(\"Fail to localize sysfs resource.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "setLogAggregationContext",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void setLogAggregationContext(Service app, Configuration conf, ApplicationSubmissionContext submissionContext)\n{\r\n    LogAggregationContext context = Records.newRecord(LogAggregationContext.class);\r\n    String finalLogInclude = YarnServiceConf.get(FINAL_LOG_INCLUSION_PATTERN, null, app.getConfiguration(), conf);\r\n    if (!StringUtils.isEmpty(finalLogInclude)) {\r\n        context.setIncludePattern(finalLogInclude);\r\n    }\r\n    String finalLogExclude = YarnServiceConf.get(FINAL_LOG_EXCLUSION_PATTERN, null, app.getConfiguration(), conf);\r\n    if (!StringUtils.isEmpty(finalLogExclude)) {\r\n        context.setExcludePattern(finalLogExclude);\r\n    }\r\n    String rollingLogInclude = YarnServiceConf.get(ROLLING_LOG_INCLUSION_PATTERN, null, app.getConfiguration(), conf);\r\n    if (!StringUtils.isEmpty(rollingLogInclude)) {\r\n        context.setRolledLogsIncludePattern(rollingLogInclude);\r\n    }\r\n    String rollingLogExclude = YarnServiceConf.get(ROLLING_LOG_EXCLUSION_PATTERN, null, app.getConfiguration(), conf);\r\n    if (!StringUtils.isEmpty(rollingLogExclude)) {\r\n        context.setRolledLogsExcludePattern(rollingLogExclude);\r\n    }\r\n    submissionContext.setLogAggregationContext(context);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "printLocalResources",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void printLocalResources(Map<String, LocalResource> map)\n{\r\n    LOG.debug(\"Added LocalResource for localization: \");\r\n    StringBuilder builder = new StringBuilder();\r\n    for (Map.Entry<String, LocalResource> entry : map.entrySet()) {\r\n        builder.append(entry.getKey()).append(\" -> \").append(entry.getValue().getResource().getFile()).append(System.lineSeparator());\r\n    }\r\n    LOG.debug(\"{}\", builder);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "buildCommandLine",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "String buildCommandLine(Service app, Configuration conf, Path appRootDir, boolean hasSliderAMLog4j) throws BadConfigException\n{\r\n    JavaCommandLineBuilder CLI = new JavaCommandLineBuilder();\r\n    CLI.forceIPv4().headless();\r\n    String jvmOpts = YarnServiceConf.get(YarnServiceConf.JVM_OPTS, \"\", app.getConfiguration(), conf);\r\n    if (!jvmOpts.contains(\"-Xmx\")) {\r\n        jvmOpts += DEFAULT_AM_JVM_XMX;\r\n    }\r\n    ServiceApiUtil.validateJvmOpts(jvmOpts);\r\n    CLI.setJVMOpts(jvmOpts);\r\n    if (hasSliderAMLog4j) {\r\n        CLI.sysprop(SYSPROP_LOG4J_CONFIGURATION, YARN_SERVICE_LOG4J_FILENAME);\r\n        CLI.sysprop(SYSPROP_LOG_DIR, ApplicationConstants.LOG_DIR_EXPANSION_VAR);\r\n    }\r\n    CLI.add(ServiceMaster.class.getCanonicalName());\r\n    CLI.add(\"-\" + ServiceMaster.YARNFILE_OPTION, new Path(appRootDir, app.getName() + \".json\"));\r\n    CLI.add(\"-\" + ServiceMaster.SERVICE_NAME_OPTION, app.getName());\r\n    if (app.getKerberosPrincipal() != null) {\r\n        if (!StringUtils.isEmpty(app.getKerberosPrincipal().getKeytab())) {\r\n            CLI.add(\"-\" + ServiceMaster.KEYTAB_OPTION, app.getKerberosPrincipal().getKeytab());\r\n        }\r\n        if (!StringUtils.isEmpty(app.getKerberosPrincipal().getPrincipalName())) {\r\n            CLI.add(\"-\" + ServiceMaster.PRINCIPAL_NAME_OPTION, app.getKerberosPrincipal().getPrincipalName());\r\n        }\r\n    }\r\n    CLI.addConfOptionToCLI(conf, RegistryConstants.KEY_REGISTRY_ZK_ROOT, RegistryConstants.DEFAULT_ZK_REGISTRY_ROOT);\r\n    CLI.addMandatoryConfOption(conf, RegistryConstants.KEY_REGISTRY_ZK_QUORUM);\r\n    CLI.addOutAndErrFiles(STDOUT_AM, STDERR_AM);\r\n    String cmdStr = CLI.build();\r\n    LOG.debug(\"AM launch command: {}\", cmdStr);\r\n    return cmdStr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "addAMEnv",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "Map<String, String> addAMEnv() throws IOException\n{\r\n    Map<String, String> env = new HashMap<>();\r\n    ClasspathConstructor classpath = buildClasspath(YarnServiceConstants.SUBMITTED_CONF_DIR, \"lib\", fs, getConfig().get(YarnServiceConf.YARN_SERVICE_CLASSPATH, \"\"), getConfig().getBoolean(YarnConfiguration.IS_MINI_YARN_CLUSTER, false));\r\n    env.put(\"CLASSPATH\", classpath.buildClasspath());\r\n    env.put(\"LANG\", \"en_US.UTF-8\");\r\n    env.put(\"LC_ALL\", \"en_US.UTF-8\");\r\n    env.put(\"LANGUAGE\", \"en_US.UTF-8\");\r\n    String jaas = System.getenv(\"HADOOP_JAAS_DEBUG\");\r\n    if (jaas != null) {\r\n        env.put(\"HADOOP_JAAS_DEBUG\", jaas);\r\n    }\r\n    if (!UserGroupInformation.isSecurityEnabled()) {\r\n        String userName = UserGroupInformation.getCurrentUser().getUserName();\r\n        LOG.debug(\"Run as user {}\", userName);\r\n        env.put(\"HADOOP_USER_NAME\", userName);\r\n    }\r\n    LOG.debug(\"AM env: \\n{}\", stringifyMap(env));\r\n    return env;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "addJarResource",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "Path addJarResource(String serviceName, Map<String, LocalResource> localResources) throws IOException, YarnException\n{\r\n    Path libPath = fs.buildClusterDirPath(serviceName);\r\n    ProviderUtils.addProviderJar(localResources, ServiceMaster.class, SERVICE_CORE_JAR, fs, libPath, \"lib\", false);\r\n    Path dependencyLibTarGzip = fs.getDependencyTarGzip();\r\n    if (actionDependency(null, false) == EXIT_SUCCESS) {\r\n        LOG.info(\"Loading lib tar from \" + dependencyLibTarGzip);\r\n        fs.submitTarGzipAndUpdate(localResources);\r\n    } else {\r\n        if (dependencyLibTarGzip != null) {\r\n            LOG.warn(\"Property {} has a value {}, but is not a valid file\", YarnServiceConf.DEPENDENCY_TARBALL_PATH, dependencyLibTarGzip);\r\n        }\r\n        String[] libs = ServiceUtils.getLibDirs();\r\n        LOG.info(\"Uploading all dependency jars to HDFS. For faster submission of\" + \" apps, set config property {} to the dependency tarball location.\" + \" Dependency tarball can be uploaded to any HDFS path directly\" + \" or by using command: yarn app -{} [<Destination Folder>]\", YarnServiceConf.DEPENDENCY_TARBALL_PATH, ApplicationCLI.ENABLE_FAST_LAUNCH);\r\n        for (String libDirProp : libs) {\r\n            ProviderUtils.addAllDependencyJars(localResources, fs, libPath, \"lib\", libDirProp);\r\n        }\r\n    }\r\n    return libPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "addAMLog4jResource",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "boolean addAMLog4jResource(String serviceName, Configuration conf, Map<String, LocalResource> localResources) throws IOException, BadClusterStateException\n{\r\n    boolean hasAMLog4j = false;\r\n    String hadoopConfDir = System.getenv(ApplicationConstants.Environment.HADOOP_CONF_DIR.name());\r\n    if (hadoopConfDir != null) {\r\n        File localFile = new File(hadoopConfDir, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\r\n        if (localFile.exists()) {\r\n            Path localFilePath = createLocalPath(localFile);\r\n            Path appDirPath = fs.buildClusterDirPath(serviceName);\r\n            Path remoteConfPath = new Path(appDirPath, YarnServiceConstants.SUBMITTED_CONF_DIR);\r\n            Path remoteFilePath = new Path(remoteConfPath, YarnServiceConstants.YARN_SERVICE_LOG4J_FILENAME);\r\n            copy(conf, localFilePath, remoteFilePath);\r\n            LocalResource localResource = fs.createAmResource(remoteConfPath, LocalResourceType.FILE, LocalResourceVisibility.APPLICATION);\r\n            localResources.put(localFilePath.getName(), localResource);\r\n            hasAMLog4j = true;\r\n        } else {\r\n            LOG.warn(\"AM log4j property file doesn't exist: \" + localFile);\r\n        }\r\n    }\r\n    return hasAMLog4j;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionStart",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int actionStart(String serviceName) throws YarnException, IOException\n{\r\n    actionStartAndGetId(serviceName);\r\n    return EXIT_SUCCESS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionStartAndGetId",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "ApplicationId actionStartAndGetId(String serviceName) throws YarnException, IOException\n{\r\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\r\n    Service liveService = getStatus(serviceName);\r\n    if (liveService == null || !liveService.getState().equals(ServiceState.UPGRADING)) {\r\n        Path appDir = checkAppExistOnHdfs(serviceName);\r\n        Service service = ServiceApiUtil.loadService(fs, serviceName);\r\n        ServiceApiUtil.validateAndResolveService(service, fs, getConfig());\r\n        verifyNoLiveAppInRM(serviceName, \"start\");\r\n        ApplicationId appId;\r\n        try {\r\n            appId = submitApp(service);\r\n        } catch (YarnException e) {\r\n            actionDestroy(serviceName);\r\n            throw e;\r\n        }\r\n        cachedAppInfo.put(serviceName, new AppInfo(appId, service.getKerberosPrincipal().getPrincipalName()));\r\n        service.setId(appId.toString());\r\n        Path appJson = ServiceApiUtil.writeAppDefinition(fs, appDir, service);\r\n        LOG.info(\"Persisted service \" + service.getName() + \" at \" + appJson);\r\n        return appId;\r\n    } else {\r\n        LOG.info(\"Finalize service {} upgrade\", serviceName);\r\n        ApplicationId appId = getAppId(serviceName);\r\n        ApplicationReport appReport = yarnClient.getApplicationReport(appId);\r\n        if (StringUtils.isEmpty(appReport.getHost())) {\r\n            throw new YarnException(serviceName + \" AM hostname is empty\");\r\n        }\r\n        ClientAMProtocol proxy = createAMProxy(serviceName, appReport);\r\n        RestartServiceRequestProto.Builder requestBuilder = RestartServiceRequestProto.newBuilder();\r\n        proxy.restart(requestBuilder.build());\r\n        return appId;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "checkAppNotExistOnHdfs",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Path checkAppNotExistOnHdfs(Service service, boolean isUpgrade) throws IOException, SliderException\n{\r\n    Path appDir = !isUpgrade ? fs.buildClusterDirPath(service.getName()) : fs.buildClusterUpgradeDirPath(service.getName(), service.getVersion());\r\n    fs.verifyDirectoryNonexistent(new Path(appDir, service.getName() + \".json\"));\r\n    return appDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "checkAppExistOnHdfs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path checkAppExistOnHdfs(String serviceName) throws IOException, SliderException\n{\r\n    Path appDir = fs.buildClusterDirPath(serviceName);\r\n    fs.verifyPathExists(new Path(appDir, serviceName + \".json\"));\r\n    return appDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "addCredentials",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void addCredentials(ContainerLaunchContext amContext, Service app) throws IOException\n{\r\n    Credentials allCreds = new Credentials();\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        String tokenRenewer = YarnClientUtils.getRmPrincipal(getConfig());\r\n        if (StringUtils.isEmpty(tokenRenewer)) {\r\n            throw new IOException(\"Can't get Master Kerberos principal for the RM to use as renewer\");\r\n        }\r\n        final org.apache.hadoop.security.token.Token<?>[] tokens = fs.getFileSystem().addDelegationTokens(tokenRenewer, allCreds);\r\n        if (LOG.isDebugEnabled()) {\r\n            if (tokens != null && tokens.length != 0) {\r\n                for (Token<?> token : tokens) {\r\n                    LOG.debug(\"Got DT: {}\", token);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (!StringUtils.isEmpty(app.getDockerClientConfig())) {\r\n        allCreds.addAll(DockerClientConfigHandler.readCredentialsFromConfigFile(new Path(app.getDockerClientConfig()), getConfig(), app.getName()));\r\n    }\r\n    if (allCreds.numberOfTokens() > 0) {\r\n        DataOutputBuffer dob = new DataOutputBuffer();\r\n        allCreds.writeTokenStorageToStream(dob);\r\n        ByteBuffer tokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n        amContext.setTokens(tokens);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "addKeytabResourceIfSecure",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void addKeytabResourceIfSecure(SliderFileSystem fileSystem, Map<String, LocalResource> localResource, Service service) throws IOException, YarnException\n{\r\n    if (!UserGroupInformation.isSecurityEnabled()) {\r\n        return;\r\n    }\r\n    String principalName = service.getKerberosPrincipal().getPrincipalName();\r\n    if (StringUtils.isEmpty(principalName)) {\r\n        LOG.warn(\"No Kerberos principal name specified for \" + service.getName());\r\n        return;\r\n    }\r\n    if (StringUtils.isEmpty(service.getKerberosPrincipal().getKeytab())) {\r\n        LOG.warn(\"No Kerberos keytab specified for \" + service.getName());\r\n        return;\r\n    }\r\n    URI keytabURI;\r\n    try {\r\n        keytabURI = new URI(service.getKerberosPrincipal().getKeytab());\r\n    } catch (URISyntaxException e) {\r\n        throw new YarnException(e);\r\n    }\r\n    if (\"file\".equals(keytabURI.getScheme())) {\r\n        LOG.info(\"Using a keytab from localhost: \" + keytabURI);\r\n    } else {\r\n        Path keytabPath = new Path(keytabURI);\r\n        if (!fileSystem.getFileSystem().exists(keytabPath)) {\r\n            LOG.warn(service.getName() + \"'s keytab (principalName = \" + principalName + \") doesn't exist at: \" + keytabPath);\r\n            return;\r\n        }\r\n        LocalResource keytabRes = fileSystem.createAmResource(keytabPath, LocalResourceType.FILE, LocalResourceVisibility.PRIVATE);\r\n        localResource.put(String.format(YarnServiceConstants.KEYTAB_LOCATION, service.getName()), keytabRes);\r\n        LOG.info(\"Adding \" + service.getName() + \"'s keytab for \" + \"localization, uri = \" + keytabPath);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "updateLifetime",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "String updateLifetime(String serviceName, long lifetime) throws YarnException, IOException\n{\r\n    ApplicationId currentAppId = getAppId(serviceName);\r\n    if (currentAppId == null) {\r\n        throw new YarnException(\"Application ID not found for \" + serviceName);\r\n    }\r\n    ApplicationReport report = yarnClient.getApplicationReport(currentAppId);\r\n    if (report == null) {\r\n        throw new YarnException(\"Service not found for \" + serviceName);\r\n    }\r\n    ApplicationId appId = report.getApplicationId();\r\n    LOG.info(\"Updating lifetime of an service: serviceName = \" + serviceName + \", appId = \" + appId + \", lifetime = \" + lifetime);\r\n    Map<ApplicationTimeoutType, String> map = new HashMap<>();\r\n    String newTimeout = Times.formatISO8601(System.currentTimeMillis() + lifetime * 1000);\r\n    map.put(ApplicationTimeoutType.LIFETIME, newTimeout);\r\n    UpdateApplicationTimeoutsRequest request = UpdateApplicationTimeoutsRequest.newInstance(appId, map);\r\n    yarnClient.updateApplicationTimeouts(request);\r\n    LOG.info(\"Successfully updated lifetime for an service: serviceName = \" + serviceName + \", appId = \" + appId + \". New expiry time in ISO8601 format is \" + newTimeout);\r\n    return newTimeout;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "convertState",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ServiceState convertState(YarnApplicationState state)\n{\r\n    switch(state) {\r\n        case NEW:\r\n        case NEW_SAVING:\r\n        case SUBMITTED:\r\n        case ACCEPTED:\r\n            return ServiceState.ACCEPTED;\r\n        case RUNNING:\r\n            return ServiceState.STARTED;\r\n        case FINISHED:\r\n        case KILLED:\r\n            return ServiceState.STOPPED;\r\n        case FAILED:\r\n            return ServiceState.FAILED;\r\n        default:\r\n            return ServiceState.ACCEPTED;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getStatusString",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getStatusString(String appIdOrName) throws IOException, YarnException\n{\r\n    try {\r\n        ApplicationId appId = ApplicationId.fromString(appIdOrName);\r\n        return getStatusByAppId(appId);\r\n    } catch (IllegalArgumentException e) {\r\n        Service status = getStatus(appIdOrName);\r\n        return ServiceApiUtil.jsonSerDeser.toJson(status);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getStatusByAppId",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String getStatusByAppId(ApplicationId appId) throws IOException, YarnException\n{\r\n    ApplicationReport appReport = yarnClient.getApplicationReport(appId);\r\n    if (appReport.getYarnApplicationState() != RUNNING) {\r\n        return \"\";\r\n    }\r\n    if (StringUtils.isEmpty(appReport.getHost())) {\r\n        return \"\";\r\n    }\r\n    ClientAMProtocol amProxy = createAMProxy(appReport.getName(), appReport);\r\n    GetStatusResponseProto response = amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\r\n    return response.getStatus();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getStatus",
  "errType" : [ "ApplicationNotFoundException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "Service getStatus(String serviceName) throws IOException, YarnException\n{\r\n    ServiceApiUtil.validateNameFormat(serviceName, getConfig());\r\n    Service appSpec = new Service();\r\n    appSpec.setName(serviceName);\r\n    appSpec.setState(ServiceState.STOPPED);\r\n    ApplicationId currentAppId = getAppId(serviceName);\r\n    if (currentAppId == null) {\r\n        LOG.info(\"Service {} does not have an application ID\", serviceName);\r\n        return appSpec;\r\n    }\r\n    appSpec.setId(currentAppId.toString());\r\n    ApplicationReport appReport = null;\r\n    try {\r\n        appReport = yarnClient.getApplicationReport(currentAppId);\r\n    } catch (ApplicationNotFoundException e) {\r\n        LOG.info(\"application ID {} doesn't exist\", currentAppId);\r\n        return appSpec;\r\n    }\r\n    if (appReport == null) {\r\n        LOG.warn(\"application ID {} is reported as null\", currentAppId);\r\n        return appSpec;\r\n    }\r\n    appSpec.setState(convertState(appReport.getYarnApplicationState()));\r\n    ApplicationTimeout lifetime = appReport.getApplicationTimeouts().get(ApplicationTimeoutType.LIFETIME);\r\n    if (lifetime != null) {\r\n        appSpec.setLifetime(lifetime.getRemainingTime());\r\n    }\r\n    if (appReport.getYarnApplicationState() != RUNNING) {\r\n        LOG.info(\"Service {} is at {} state\", serviceName, appReport.getYarnApplicationState());\r\n        return appSpec;\r\n    }\r\n    if (StringUtils.isEmpty(appReport.getHost())) {\r\n        LOG.warn(serviceName + \" AM hostname is empty\");\r\n        return appSpec;\r\n    }\r\n    ClientAMProtocol amProxy = createAMProxy(serviceName, appReport);\r\n    GetStatusResponseProto response = amProxy.getStatus(GetStatusRequestProto.newBuilder().build());\r\n    appSpec = jsonSerDeser.fromJson(response.getStatus());\r\n    if (lifetime != null) {\r\n        appSpec.setLifetime(lifetime.getRemainingTime());\r\n    }\r\n    return appSpec;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getYarnClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnClient getYarnClient()\n{\r\n    return this.yarnClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "enableFastLaunch",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int enableFastLaunch(String destinationFolder) throws IOException, YarnException\n{\r\n    return actionDependency(destinationFolder, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "actionDependency",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "int actionDependency(String destinationFolder, boolean overwrite)\n{\r\n    String currentUser = RegistryUtils.currentUser();\r\n    LOG.info(\"Running command as user {}\", currentUser);\r\n    Path dependencyLibTarGzip;\r\n    if (destinationFolder == null) {\r\n        dependencyLibTarGzip = fs.getDependencyTarGzip();\r\n    } else {\r\n        dependencyLibTarGzip = new Path(destinationFolder, YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\r\n    }\r\n    if (fs.isFile(dependencyLibTarGzip) && !overwrite) {\r\n        System.out.println(String.format(\"Dependency libs are already uploaded to %s.\", dependencyLibTarGzip.toUri()));\r\n        return EXIT_SUCCESS;\r\n    }\r\n    String[] libDirs = ServiceUtils.getLibDirs();\r\n    if (libDirs.length > 0) {\r\n        File tempLibTarGzipFile = null;\r\n        try {\r\n            if (!checkPermissions(dependencyLibTarGzip)) {\r\n                return EXIT_UNAUTHORIZED;\r\n            }\r\n            tempLibTarGzipFile = File.createTempFile(YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + \"_\", YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT);\r\n            tarGzipFolder(libDirs, tempLibTarGzipFile, createJarFilter());\r\n            fs.copyLocalFileToHdfs(tempLibTarGzipFile, dependencyLibTarGzip, new FsPermission(YarnServiceConstants.DEPENDENCY_DIR_PERMISSIONS));\r\n            LOG.info(\"To let apps use this tarball, in yarn-site set config \" + \"property {} to {}\", YarnServiceConf.DEPENDENCY_TARBALL_PATH, dependencyLibTarGzip);\r\n            return EXIT_SUCCESS;\r\n        } catch (IOException e) {\r\n            LOG.error(\"Got exception creating tarball and uploading to HDFS\", e);\r\n            return EXIT_EXCEPTION_THROWN;\r\n        } finally {\r\n            if (tempLibTarGzipFile != null) {\r\n                if (!tempLibTarGzipFile.delete()) {\r\n                    LOG.warn(\"Failed to delete tmp file {}\", tempLibTarGzipFile);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        return EXIT_FALSE;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "checkPermissions",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "boolean checkPermissions(Path dependencyLibTarGzip) throws IOException\n{\r\n    AccessControlList yarnAdminAcl = new AccessControlList(getConfig().get(YarnConfiguration.YARN_ADMIN_ACL, YarnConfiguration.DEFAULT_YARN_ADMIN_ACL));\r\n    AccessControlList dfsAdminAcl = new AccessControlList(getConfig().get(DFSConfigKeys.DFS_ADMIN, \" \"));\r\n    UserGroupInformation ugi = UserGroupInformation.getCurrentUser();\r\n    if (!yarnAdminAcl.isUserAllowed(ugi) && !dfsAdminAcl.isUserAllowed(ugi)) {\r\n        LOG.error(\"User must be on the {} or {} list to have permission to \" + \"upload AM dependency tarball\", YarnConfiguration.YARN_ADMIN_ACL, DFSConfigKeys.DFS_ADMIN);\r\n        return false;\r\n    }\r\n    Path parent = dependencyLibTarGzip.getParent();\r\n    while (parent != null) {\r\n        if (fs.getFileSystem().exists(parent)) {\r\n            FsPermission perm = fs.getFileSystem().getFileStatus(parent).getPermission();\r\n            if (!perm.getOtherAction().implies(FsAction.READ_EXECUTE)) {\r\n                LOG.error(\"Parent directory {} of {} tarball location {} does not \" + \"have world read/execute permission\", parent, YarnServiceConf.DEPENDENCY_TARBALL_PATH, dependencyLibTarGzip);\r\n                return false;\r\n            }\r\n        }\r\n        parent = parent.getParent();\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "createAMProxy",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ClientAMProtocol createAMProxy(String serviceName, ApplicationReport appReport) throws IOException, YarnException\n{\r\n    if (UserGroupInformation.isSecurityEnabled()) {\r\n        if (!cachedAppInfo.containsKey(serviceName)) {\r\n            Service persistedService = ServiceApiUtil.loadService(fs, serviceName);\r\n            cachedAppInfo.put(serviceName, new AppInfo(appReport.getApplicationId(), persistedService.getKerberosPrincipal().getPrincipalName()));\r\n        }\r\n        String principalName = cachedAppInfo.get(serviceName).principalName;\r\n        if (!StringUtils.isEmpty(principalName)) {\r\n            getConfig().set(PRINCIPAL, principalName);\r\n        } else {\r\n            throw new YarnException(\"No principal specified in the persisted \" + \"service definition, fail to connect to AM.\");\r\n        }\r\n    }\r\n    InetSocketAddress address = NetUtils.createSocketAddrForHost(appReport.getHost(), appReport.getRpcPort());\r\n    return ClientAMProxy.createProxy(getConfig(), ClientAMProtocol.class, UserGroupInformation.getCurrentUser(), rpc, address);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "setFileSystem",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFileSystem(SliderFileSystem fileSystem) throws IOException\n{\r\n    this.fs = fileSystem;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "setYarnClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setYarnClient(YarnClient yarnClient)\n{\r\n    this.yarnClient = yarnClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getAppId",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ApplicationId getAppId(String serviceName) throws IOException, YarnException\n{\r\n    if (cachedAppInfo.containsKey(serviceName)) {\r\n        return cachedAppInfo.get(serviceName).appId;\r\n    }\r\n    Service persistedService = ServiceApiUtil.loadService(fs, serviceName);\r\n    if (persistedService == null) {\r\n        throw new YarnException(\"Service \" + serviceName + \" doesn't exist on hdfs. Please check if the app exists in RM\");\r\n    }\r\n    if (persistedService.getId() == null) {\r\n        return null;\r\n    }\r\n    ApplicationId currentAppId = ApplicationId.fromString(persistedService.getId());\r\n    cachedAppInfo.put(serviceName, new AppInfo(currentAppId, persistedService.getKerberosPrincipal().getPrincipalName()));\r\n    return currentAppId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NeverRestartPolicy getInstance()\n{\r\n    return INSTANCE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "isLongLived",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isLongLived()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "hasCompleted",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean hasCompleted(Component component)\n{\r\n    if (component.getNumSucceededInstances() + component.getNumFailedInstances() < component.getNumDesiredInstances()) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "hasCompletedSuccessfully",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean hasCompletedSuccessfully(Component component)\n{\r\n    if (component.getNumSucceededInstances() == component.getNumDesiredInstances()) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "shouldRelaunchInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean shouldRelaunchInstance(ComponentInstance componentInstance, ContainerStatus containerStatus)\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "isReadyForDownStream",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean isReadyForDownStream(Component dependentComponent)\n{\r\n    if (dependentComponent.getNumReadyInstances() + dependentComponent.getNumSucceededInstances() + dependentComponent.getNumFailedInstances() < dependentComponent.getNumDesiredInstances()) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "allowUpgrades",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean allowUpgrades()\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "shouldTerminate",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean shouldTerminate(Component component)\n{\r\n    long nSucceeded = component.getNumSucceededInstances();\r\n    long nFailed = component.getNumFailedInstances();\r\n    if (nSucceeded + nFailed < component.getComponentSpec().getNumberOfContainers()) {\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\main\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "allowContainerRetriesForInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean allowContainerRetriesForInstance(ComponentInstance componentInstance)\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]