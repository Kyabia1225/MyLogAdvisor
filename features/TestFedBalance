[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "testLoadFedBalanceDefaultConf",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testLoadFedBalanceDefaultConf()\n{\r\n    Configuration conf = FedBalance.getDefaultConf();\r\n    assertNotNull(conf.get(SCHEDULER_JOURNAL_URI));\r\n    assertNotNull(conf.get(WORK_THREAD_NUM));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    CONF.setBoolean(DFSConfigKeys.DFS_NAMENODE_DELEGATION_TOKEN_ALWAYS_USE_KEY, true);\r\n    CONF.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, \"hdfs:///\");\r\n    CONF.setBoolean(DFS_NAMENODE_ACLS_ENABLED_KEY, true);\r\n    CONF.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, DEFAULT_BLOCK_SIZE);\r\n    CONF.setLong(DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY, 0);\r\n    CONF.setInt(WORK_THREAD_NUM, 1);\r\n    cluster = new MiniDFSCluster.Builder(CONF).numDataNodes(3).build();\r\n    cluster.waitClusterUp();\r\n    cluster.waitActive();\r\n    fs = cluster.getFileSystem();\r\n    String workPath = \"hdfs://\" + cluster.getNameNode().getHostAndPort() + \"/procedure\";\r\n    CONF.set(SCHEDULER_JOURNAL_URI, workPath);\r\n    fs.mkdirs(new Path(workPath));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close()\n{\r\n    if (cluster != null) {\r\n        cluster.shutdown();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "testShutdownScheduler",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testShutdownScheduler() throws Exception\n{\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(CONF);\r\n    scheduler.init(true);\r\n    BalanceJob.Builder builder = new BalanceJob.Builder<>();\r\n    builder.nextProcedure(new WaitProcedure(\"wait\", 1000, 5 * 1000));\r\n    BalanceJob job = builder.build();\r\n    scheduler.submit(job);\r\n    Thread.sleep(1000);\r\n    scheduler.shutDownAndWait(30 * 1000);\r\n    BalanceJournal journal = ReflectionUtils.newInstance(BalanceJournalInfoHDFS.class, CONF);\r\n    journal.clear(job);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "testSuccessfulJob",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testSuccessfulJob() throws Exception\n{\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(CONF);\r\n    scheduler.init(true);\r\n    try {\r\n        List<RecordProcedure> procedures = new ArrayList<>();\r\n        BalanceJob.Builder builder = new BalanceJob.Builder<RecordProcedure>();\r\n        for (int i = 0; i < 5; i++) {\r\n            RecordProcedure r = new RecordProcedure(\"record-\" + i, 1000L);\r\n            builder.nextProcedure(r);\r\n            procedures.add(r);\r\n        }\r\n        BalanceJob<RecordProcedure> job = builder.build();\r\n        scheduler.submit(job);\r\n        scheduler.waitUntilDone(job);\r\n        assertNull(job.getError());\r\n        assertEquals(5, RecordProcedure.getFinishList().size());\r\n        for (int i = 0; i < RecordProcedure.getFinishList().size(); i++) {\r\n            assertEquals(procedures.get(i), RecordProcedure.getFinishList().get(i));\r\n        }\r\n    } finally {\r\n        scheduler.shutDownAndWait(2);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "testFailedJob",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testFailedJob() throws Exception\n{\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(CONF);\r\n    scheduler.init(true);\r\n    try {\r\n        BalanceProcedure badProcedure = Mockito.mock(BalanceProcedure.class);\r\n        Mockito.doThrow(new IOException(\"Job failed exception.\")).when(badProcedure).execute();\r\n        Mockito.doReturn(\"bad-procedure\").when(badProcedure).name();\r\n        BalanceJob.Builder builder = new BalanceJob.Builder<>();\r\n        builder.nextProcedure(badProcedure);\r\n        BalanceJob job = builder.build();\r\n        scheduler.submit(job);\r\n        scheduler.waitUntilDone(job);\r\n        GenericTestUtils.assertExceptionContains(\"Job failed exception\", job.getError());\r\n    } finally {\r\n        scheduler.shutDownAndWait(2);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "testGetJobAfterRecover",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testGetJobAfterRecover() throws Exception\n{\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(CONF);\r\n    scheduler.init(true);\r\n    try {\r\n        BalanceJob.Builder builder = new BalanceJob.Builder<>();\r\n        String firstProcedure = \"wait0\";\r\n        WaitProcedure[] procedures = new WaitProcedure[5];\r\n        for (int i = 0; i < 5; i++) {\r\n            WaitProcedure procedure = new WaitProcedure(\"wait\" + i, 1000, 1000);\r\n            builder.nextProcedure(procedure).removeAfterDone(false);\r\n            procedures[i] = procedure;\r\n        }\r\n        BalanceJob job = builder.build();\r\n        scheduler.submit(job);\r\n        long randomSleepTime = Math.abs(new Random().nextInt()) % 5 * 1000 + 1000;\r\n        Thread.sleep(randomSleepTime);\r\n        scheduler.shutDownAndWait(2);\r\n        WaitProcedure recoverProcedure = (WaitProcedure) job.getCurProcedure();\r\n        int recoverIndex = -1;\r\n        for (int i = 0; i < procedures.length; i++) {\r\n            if (procedures[i].name().equals(recoverProcedure.name())) {\r\n                recoverIndex = i;\r\n                break;\r\n            }\r\n        }\r\n        scheduler = new BalanceProcedureScheduler(CONF);\r\n        scheduler.init(true);\r\n        scheduler.waitUntilDone(job);\r\n        BalanceJob recoverJob = scheduler.findJob(job);\r\n        assertNull(recoverJob.getError());\r\n        assertNotSame(job, recoverJob);\r\n        assertEquals(job, recoverJob);\r\n        Map<String, WaitProcedure> pTable = recoverJob.getProcedureTable();\r\n        List<WaitProcedure> recoveredProcedures = procedureTableToList(pTable, firstProcedure);\r\n        for (int i = 0; i < recoverIndex; i++) {\r\n            assertFalse(recoveredProcedures.get(i).getExecuted());\r\n        }\r\n        for (int i = recoverIndex; i < procedures.length; i++) {\r\n            assertTrue(recoveredProcedures.get(i).getExecuted());\r\n        }\r\n    } finally {\r\n        scheduler.shutDownAndWait(2);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "testRetry",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRetry() throws Exception\n{\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(CONF);\r\n    scheduler.init(true);\r\n    try {\r\n        BalanceJob.Builder builder = new BalanceJob.Builder<>();\r\n        RetryProcedure retryProcedure = new RetryProcedure(\"retry\", 1000, 3);\r\n        builder.nextProcedure(retryProcedure);\r\n        BalanceJob job = builder.build();\r\n        long start = Time.monotonicNow();\r\n        scheduler.submit(job);\r\n        scheduler.waitUntilDone(job);\r\n        assertNull(job.getError());\r\n        long duration = Time.monotonicNow() - start;\r\n        assertEquals(true, duration > 1000 * 3);\r\n        assertEquals(3, retryProcedure.getTotalRetry());\r\n    } finally {\r\n        scheduler.shutDownAndWait(2);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "testEmptyJob",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testEmptyJob() throws Exception\n{\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(CONF);\r\n    scheduler.init(true);\r\n    try {\r\n        BalanceJob job = new BalanceJob.Builder<>().build();\r\n        scheduler.submit(job);\r\n        scheduler.waitUntilDone(job);\r\n    } finally {\r\n        scheduler.shutDownAndWait(2);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "testJobSerializeAndDeserialize",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testJobSerializeAndDeserialize() throws Exception\n{\r\n    BalanceJob.Builder builder = new BalanceJob.Builder<RecordProcedure>();\r\n    for (int i = 0; i < 5; i++) {\r\n        RecordProcedure r = new RecordProcedure(\"record-\" + i, 1000L);\r\n        builder.nextProcedure(r);\r\n    }\r\n    builder.nextProcedure(new RetryProcedure(\"retry\", 1000, 3));\r\n    BalanceJob<RecordProcedure> job = builder.build();\r\n    job.setId(BalanceProcedureScheduler.allocateJobId());\r\n    ByteArrayOutputStream bao = new ByteArrayOutputStream();\r\n    job.write(new DataOutputStream(bao));\r\n    bao.flush();\r\n    ByteArrayInputStream bai = new ByteArrayInputStream(bao.toByteArray());\r\n    BalanceJob newJob = new BalanceJob.Builder<>().build();\r\n    newJob.readFields(new DataInputStream(bai));\r\n    assertEquals(job, newJob);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "testSchedulerDownAndRecoverJob",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testSchedulerDownAndRecoverJob() throws Exception\n{\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(CONF);\r\n    scheduler.init(true);\r\n    Path parent = new Path(\"/testSchedulerDownAndRecoverJob\");\r\n    try {\r\n        BalanceJob.Builder builder = new BalanceJob.Builder<>();\r\n        MultiPhaseProcedure multiPhaseProcedure = new MultiPhaseProcedure(\"retry\", 1000, 10, CONF, parent.toString());\r\n        builder.nextProcedure(multiPhaseProcedure);\r\n        BalanceJob job = builder.build();\r\n        scheduler.submit(job);\r\n        Thread.sleep(500);\r\n        scheduler.shutDownAndWait(2);\r\n        assertFalse(job.isJobDone());\r\n        int len = fs.listStatus(parent).length;\r\n        assertTrue(len > 0 && len < 10);\r\n        scheduler = new BalanceProcedureScheduler(CONF);\r\n        scheduler.init(true);\r\n        scheduler.waitUntilDone(job);\r\n        assertEquals(10, fs.listStatus(parent).length);\r\n        for (int i = 0; i < 10; i++) {\r\n            assertTrue(fs.exists(new Path(parent, \"phase-\" + i)));\r\n        }\r\n        BalanceJob recoverJob = scheduler.findJob(job);\r\n        assertNull(recoverJob.getError());\r\n        assertNotSame(job, recoverJob);\r\n        assertEquals(job, recoverJob);\r\n    } finally {\r\n        if (fs.exists(parent)) {\r\n            fs.delete(parent, true);\r\n        }\r\n        scheduler.shutDownAndWait(2);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "testRecoverJobFromJournal",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testRecoverJobFromJournal() throws Exception\n{\r\n    BalanceJournal journal = ReflectionUtils.newInstance(BalanceJournalInfoHDFS.class, CONF);\r\n    BalanceJob.Builder builder = new BalanceJob.Builder<RecordProcedure>();\r\n    BalanceProcedure wait0 = new WaitProcedure(\"wait0\", 1000, 5000);\r\n    BalanceProcedure wait1 = new WaitProcedure(\"wait1\", 1000, 1000);\r\n    builder.nextProcedure(wait0).nextProcedure(wait1);\r\n    BalanceJob job = builder.build();\r\n    job.setId(BalanceProcedureScheduler.allocateJobId());\r\n    job.setCurrentProcedure(wait1);\r\n    job.setLastProcedure(null);\r\n    journal.saveJob(job);\r\n    long start = Time.monotonicNow();\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(CONF);\r\n    scheduler.init(true);\r\n    try {\r\n        scheduler.waitUntilDone(job);\r\n        long duration = Time.monotonicNow() - start;\r\n        assertTrue(duration >= 1000 && duration < 5000);\r\n    } finally {\r\n        scheduler.shutDownAndWait(2);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "testClearJournalFail",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testClearJournalFail() throws Exception\n{\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(CONF);\r\n    scheduler.init(true);\r\n    BalanceJournal journal = Mockito.mock(BalanceJournal.class);\r\n    AtomicInteger count = new AtomicInteger(0);\r\n    Mockito.doAnswer(invocation -> {\r\n        if (count.incrementAndGet() == 1) {\r\n            throw new IOException(\"Mock clear failure\");\r\n        }\r\n        return null;\r\n    }).when(journal).clear(any(BalanceJob.class));\r\n    scheduler.setJournal(journal);\r\n    try {\r\n        BalanceJob.Builder builder = new BalanceJob.Builder<>();\r\n        builder.nextProcedure(new WaitProcedure(\"wait\", 1000, 1000));\r\n        BalanceJob job = builder.build();\r\n        scheduler.submit(job);\r\n        scheduler.waitUntilDone(job);\r\n        assertEquals(2, count.get());\r\n    } finally {\r\n        scheduler.shutDownAndWait(2);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "testJobRecoveryWhenWriteJournalFail",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testJobRecoveryWhenWriteJournalFail() throws Exception\n{\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(CONF);\r\n    scheduler.init(true);\r\n    try {\r\n        AtomicBoolean recoverFlag = new AtomicBoolean(true);\r\n        BalanceJob.Builder builder = new BalanceJob.Builder<>();\r\n        builder.nextProcedure(new WaitProcedure(\"wait\", 1000, 1000)).nextProcedure(new UnrecoverableProcedure(\"shutdown\", 1000, () -> {\r\n            cluster.restartNameNode(false);\r\n            return true;\r\n        })).nextProcedure(new UnrecoverableProcedure(\"recoverFlag\", 1000, () -> {\r\n            recoverFlag.set(false);\r\n            return true;\r\n        })).nextProcedure(new WaitProcedure(\"wait\", 1000, 1000));\r\n        BalanceJob job = builder.build();\r\n        scheduler.submit(job);\r\n        scheduler.waitUntilDone(job);\r\n        assertTrue(job.isJobDone());\r\n        assertNull(job.getError());\r\n        assertTrue(recoverFlag.get());\r\n    } finally {\r\n        scheduler.shutDownAndWait(2);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "procedureTableToList",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<T> procedureTableToList(Map<String, T> pTable, String first)\n{\r\n    List<T> procedures = new ArrayList<>();\r\n    T cur = pTable.get(first);\r\n    while (cur != null) {\r\n        procedures.add(cur);\r\n        cur = pTable.get(cur.nextProcedure());\r\n    }\r\n    return procedures;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "execute",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean execute() throws IOException\n{\r\n    if (currentPhase < totalPhase) {\r\n        LOG.info(\"Current phase {}\", currentPhase);\r\n        Path phase = new Path(path, \"phase-\" + currentPhase);\r\n        if (!fs.exists(phase)) {\r\n            fs.mkdirs(phase);\r\n        }\r\n        currentPhase++;\r\n        try {\r\n            Thread.sleep(100);\r\n        } catch (InterruptedException e) {\r\n        }\r\n        return false;\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    super.write(out);\r\n    out.writeInt(totalPhase);\r\n    out.writeInt(currentPhase);\r\n    conf.write(out);\r\n    Text.writeString(out, path.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    super.readFields(in);\r\n    totalPhase = in.readInt();\r\n    currentPhase = in.readInt();\r\n    conf = new Configuration(false);\r\n    conf.readFields(in);\r\n    path = new Path(Text.readString(in));\r\n    fs = path.getFileSystem(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "beforeClass",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void beforeClass() throws IOException\n{\r\n    conf = new Configuration();\r\n    cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build();\r\n    cluster.waitActive();\r\n    nnUri = FileSystem.getDefaultUri(conf).toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "afterClass",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void afterClass()\n{\r\n    if (cluster != null) {\r\n        cluster.shutdown();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "testTrashProcedure",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testTrashProcedure() throws Exception\n{\r\n    Path src = new Path(\"/\" + getMethodName() + \"-src\");\r\n    Path dst = new Path(\"/\" + getMethodName() + \"-dst\");\r\n    FileSystem fs = cluster.getFileSystem();\r\n    fs.mkdirs(src);\r\n    fs.mkdirs(new Path(src, \"dir\"));\r\n    assertTrue(fs.exists(src));\r\n    FedBalanceContext context = new FedBalanceContext.Builder(src, dst, TestDistCpProcedure.MOUNT, conf).setMapNum(10).setBandwidthLimit(1).setTrash(TrashOption.TRASH).build();\r\n    TrashProcedure trashProcedure = new TrashProcedure(\"trash-procedure\", null, 1000, context);\r\n    trashProcedure.moveToTrash();\r\n    assertFalse(fs.exists(src));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "testSeDeserialize",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSeDeserialize() throws Exception\n{\r\n    Path src = new Path(\"/\" + getMethodName() + \"-src\");\r\n    Path dst = new Path(\"/\" + getMethodName() + \"-dst\");\r\n    FedBalanceContext context = new FedBalanceContext.Builder(src, dst, TestDistCpProcedure.MOUNT, conf).setMapNum(10).setBandwidthLimit(1).setTrash(TrashOption.TRASH).build();\r\n    TrashProcedure trashProcedure = new TrashProcedure(\"trash-procedure\", null, 1000, context);\r\n    ByteArrayOutputStream bao = new ByteArrayOutputStream();\r\n    DataOutput dataOut = new DataOutputStream(bao);\r\n    trashProcedure.write(dataOut);\r\n    trashProcedure = new TrashProcedure();\r\n    trashProcedure.readFields(new DataInputStream(new ByteArrayInputStream(bao.toByteArray())));\r\n    assertEquals(context, trashProcedure.getContext());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "execute",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean execute() throws RetryException\n{\r\n    finish.add(this);\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getFinishList",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<RecordProcedure> getFinishList()\n{\r\n    return finish;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "execute",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean execute() throws RetryException, IOException\n{\r\n    if (handler != null) {\r\n        return handler.execute();\r\n    } else {\r\n        return true;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "execute",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean execute() throws RetryException\n{\r\n    if (retryTime > 0) {\r\n        retryTime--;\r\n        totalRetry++;\r\n        throw new RetryException();\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getTotalRetry",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getTotalRetry()\n{\r\n    return totalRetry;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    super.write(out);\r\n    out.writeInt(retryTime);\r\n    out.writeInt(totalRetry);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    super.readFields(in);\r\n    retryTime = in.readInt();\r\n    totalRetry = in.readInt();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "beforeClass",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void beforeClass() throws IOException\n{\r\n    DistCpProcedure.enableForTest();\r\n    conf = new Configuration();\r\n    conf.setLong(DFSConfigKeys.DFS_NAMENODE_MIN_BLOCK_SIZE_KEY, BLOCK_SIZE);\r\n    conf.setLong(DFSConfigKeys.DFS_BLOCK_SIZE_KEY, BLOCK_SIZE);\r\n    cluster = new MiniDFSCluster.Builder(conf).numDataNodes(2).build();\r\n    cluster.waitActive();\r\n    String workPath = \"hdfs://\" + cluster.getNameNode().getHostAndPort() + \"/procedure\";\r\n    conf.set(SCHEDULER_JOURNAL_URI, workPath);\r\n    nnUri = FileSystem.getDefaultUri(conf).toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "afterClass",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void afterClass()\n{\r\n    DistCpProcedure.disableForTest();\r\n    if (cluster != null) {\r\n        cluster.shutdown();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "testSuccessfulDistCpProcedure",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testSuccessfulDistCpProcedure() throws Exception\n{\r\n    String testRoot = nnUri + \"/user/foo/testdir.\" + getMethodName();\r\n    DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(URI.create(nnUri), conf);\r\n    createFiles(fs, testRoot, srcfiles);\r\n    Path src = new Path(testRoot, SRCDAT);\r\n    Path dst = new Path(testRoot, DSTDAT);\r\n    FsPermission originalPerm = new FsPermission(777);\r\n    fs.setPermission(src, originalPerm);\r\n    FedBalanceContext context = buildContext(src, dst, MOUNT);\r\n    DistCpProcedure dcProcedure = new DistCpProcedure(\"distcp-procedure\", null, 1000, context);\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(conf);\r\n    scheduler.init(true);\r\n    BalanceJob balanceJob = new BalanceJob.Builder<>().nextProcedure(dcProcedure).build();\r\n    scheduler.submit(balanceJob);\r\n    scheduler.waitUntilDone(balanceJob);\r\n    assertTrue(balanceJob.isJobDone());\r\n    if (balanceJob.getError() != null) {\r\n        throw balanceJob.getError();\r\n    }\r\n    assertNull(balanceJob.getError());\r\n    assertTrue(fs.exists(dst));\r\n    assertFalse(fs.exists(new Path(context.getSrc(), HdfsConstants.DOT_SNAPSHOT_DIR)));\r\n    assertFalse(fs.exists(new Path(context.getDst(), HdfsConstants.DOT_SNAPSHOT_DIR)));\r\n    assertEquals(originalPerm, fs.getFileStatus(dst).getPermission());\r\n    assertEquals(0, fs.getFileStatus(src).getPermission().toShort());\r\n    for (FileEntry e : srcfiles) {\r\n        if (!e.isDir) {\r\n            Path targetFile = new Path(testRoot, e.path.replace(SRCDAT, DSTDAT));\r\n            assertEquals(FILE_SIZE, fs.getFileStatus(targetFile).getLen());\r\n        }\r\n    }\r\n    cleanup(fs, new Path(testRoot));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "testInitDistCp",
  "errType" : [ "RetryException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testInitDistCp() throws Exception\n{\r\n    String testRoot = nnUri + \"/user/foo/testdir.\" + getMethodName();\r\n    DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(URI.create(nnUri), conf);\r\n    createFiles(fs, testRoot, srcfiles);\r\n    Path src = new Path(testRoot, SRCDAT);\r\n    Path dst = new Path(testRoot, DSTDAT);\r\n    fs.setPermission(src, FsPermission.createImmutable((short) 020));\r\n    FedBalanceContext context = buildContext(src, dst, MOUNT);\r\n    DistCpProcedure dcProcedure = new DistCpProcedure(\"distcp-procedure\", null, 1000, context);\r\n    try {\r\n        dcProcedure.initDistCp();\r\n    } catch (RetryException e) {\r\n    }\r\n    fs.delete(new Path(src, \"a\"), true);\r\n    executeProcedure(dcProcedure, Stage.DIFF_DISTCP, () -> dcProcedure.initDistCp());\r\n    assertTrue(fs.exists(dst));\r\n    assertTrue(fs.exists(new Path(dst, \"a\")));\r\n    cleanup(fs, new Path(testRoot));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "testDiffThreshold",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testDiffThreshold() throws Exception\n{\r\n    String testRoot = nnUri + \"/user/foo/testdir.\" + getMethodName();\r\n    DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(URI.create(nnUri), conf);\r\n    createFiles(fs, testRoot, srcfiles);\r\n    Path src = new Path(testRoot, SRCDAT);\r\n    Path dst = new Path(testRoot, DSTDAT);\r\n    FedBalanceContext context = buildContext(src, dst, MOUNT, 10);\r\n    DistCpProcedure dcProcedure = new DistCpProcedure(\"distcp-procedure\", null, 1000, context);\r\n    executeProcedure(dcProcedure, Stage.DIFF_DISTCP, () -> dcProcedure.initDistCp());\r\n    Path lastPath = new Path(src, \"a\");\r\n    for (int i = 0; i < 5; i++) {\r\n        Path newPath = new Path(src, \"a-\" + i);\r\n        fs.rename(lastPath, newPath);\r\n        lastPath = newPath;\r\n        assertTrue(dcProcedure.diffDistCpStageDone());\r\n        executeProcedure(dcProcedure, Stage.DISABLE_WRITE, () -> dcProcedure.diffDistCp());\r\n    }\r\n    cleanup(fs, new Path(testRoot));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "testDiffDistCp",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testDiffDistCp() throws Exception\n{\r\n    String testRoot = nnUri + \"/user/foo/testdir.\" + getMethodName();\r\n    DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(URI.create(nnUri), conf);\r\n    createFiles(fs, testRoot, srcfiles);\r\n    Path src = new Path(testRoot, SRCDAT);\r\n    Path dst = new Path(testRoot, DSTDAT);\r\n    FedBalanceContext context = buildContext(src, dst, MOUNT);\r\n    DistCpProcedure dcProcedure = new DistCpProcedure(\"distcp-procedure\", null, 1000, context);\r\n    executeProcedure(dcProcedure, Stage.DIFF_DISTCP, () -> dcProcedure.initDistCp());\r\n    assertTrue(fs.exists(dst));\r\n    fs.rename(new Path(src, \"a\"), new Path(\"/a\"));\r\n    executeProcedure(dcProcedure, Stage.FINISH, () -> dcProcedure.finalDistCp());\r\n    assertFalse(fs.exists(new Path(dst, \"a\")));\r\n    fs.rename(new Path(\"/a\"), new Path(src, \"a\"));\r\n    executeProcedure(dcProcedure, Stage.FINISH, () -> dcProcedure.finalDistCp());\r\n    assertTrue(fs.exists(new Path(dst, \"a\")));\r\n    OutputStream out = fs.append(new Path(src, \"a\"));\r\n    out.write(\"hello\".getBytes());\r\n    out.close();\r\n    long len = fs.getFileStatus(new Path(src, \"a\")).getLen();\r\n    executeProcedure(dcProcedure, Stage.FINISH, () -> dcProcedure.finalDistCp());\r\n    assertEquals(len, fs.getFileStatus(new Path(dst, \"a\")).getLen());\r\n    cleanup(fs, new Path(testRoot));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "testStageFinalDistCp",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testStageFinalDistCp() throws Exception\n{\r\n    String testRoot = nnUri + \"/user/foo/testdir.\" + getMethodName();\r\n    DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(URI.create(nnUri), conf);\r\n    createFiles(fs, testRoot, srcfiles);\r\n    Path src = new Path(testRoot, SRCDAT);\r\n    Path dst = new Path(testRoot, DSTDAT);\r\n    OutputStream out = fs.append(new Path(src, \"a\"));\r\n    FedBalanceContext context = buildContext(src, dst, MOUNT);\r\n    DistCpProcedure dcProcedure = new DistCpProcedure(\"distcp-procedure\", null, 1000, context);\r\n    executeProcedure(dcProcedure, Stage.DIFF_DISTCP, () -> dcProcedure.initDistCp());\r\n    executeProcedure(dcProcedure, Stage.FINISH, () -> dcProcedure.finalDistCp());\r\n    intercept(RemoteException.class, \"LeaseExpiredException\", \"Expect RemoteException(LeaseExpiredException).\", () -> out.close());\r\n    cleanup(fs, new Path(testRoot));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "testStageFinish",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testStageFinish() throws Exception\n{\r\n    String testRoot = nnUri + \"/user/foo/testdir.\" + getMethodName();\r\n    DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(URI.create(nnUri), conf);\r\n    Path src = new Path(testRoot, SRCDAT);\r\n    Path dst = new Path(testRoot, DSTDAT);\r\n    fs.mkdirs(src);\r\n    fs.mkdirs(dst);\r\n    fs.allowSnapshot(src);\r\n    fs.allowSnapshot(dst);\r\n    fs.createSnapshot(src, LAST_SNAPSHOT_NAME);\r\n    fs.createSnapshot(src, CURRENT_SNAPSHOT_NAME);\r\n    fs.createSnapshot(dst, LAST_SNAPSHOT_NAME);\r\n    FsPermission originalPerm = new FsPermission(777);\r\n    fs.setPermission(src, originalPerm);\r\n    FedBalanceContext context = buildContext(src, dst, MOUNT);\r\n    DistCpProcedure dcProcedure = new DistCpProcedure(\"distcp-procedure\", null, 1000, context);\r\n    dcProcedure.disableWrite(context);\r\n    dcProcedure.finish();\r\n    assertTrue(fs.exists(dst));\r\n    assertFalse(fs.exists(new Path(src, HdfsConstants.DOT_SNAPSHOT_DIR)));\r\n    assertFalse(fs.exists(new Path(dst, HdfsConstants.DOT_SNAPSHOT_DIR)));\r\n    assertEquals(originalPerm, fs.getFileStatus(dst).getPermission());\r\n    assertEquals(0, fs.getFileStatus(src).getPermission().toShort());\r\n    cleanup(fs, new Path(testRoot));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "testRecoveryByStage",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testRecoveryByStage() throws Exception\n{\r\n    String testRoot = nnUri + \"/user/foo/testdir.\" + getMethodName();\r\n    DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(URI.create(nnUri), conf);\r\n    createFiles(fs, testRoot, srcfiles);\r\n    Path src = new Path(testRoot, SRCDAT);\r\n    Path dst = new Path(testRoot, DSTDAT);\r\n    FedBalanceContext context = buildContext(src, dst, MOUNT);\r\n    final DistCpProcedure[] dcp = new DistCpProcedure[1];\r\n    dcp[0] = new DistCpProcedure(\"distcp-procedure\", null, 1000, context);\r\n    dcp[0] = serializeProcedure(dcp[0]);\r\n    executeProcedure(dcp[0], Stage.INIT_DISTCP, () -> dcp[0].preCheck());\r\n    dcp[0] = serializeProcedure(dcp[0]);\r\n    executeProcedure(dcp[0], Stage.DIFF_DISTCP, () -> dcp[0].initDistCp());\r\n    fs.delete(new Path(src, \"a\"), true);\r\n    dcp[0] = serializeProcedure(dcp[0]);\r\n    executeProcedure(dcp[0], Stage.DISABLE_WRITE, () -> dcp[0].diffDistCp());\r\n    dcp[0] = serializeProcedure(dcp[0]);\r\n    executeProcedure(dcp[0], Stage.FINAL_DISTCP, () -> dcp[0].disableWrite(context));\r\n    dcp[0] = serializeProcedure(dcp[0]);\r\n    OutputStream out = fs.append(new Path(src, \"b/c\"));\r\n    executeProcedure(dcp[0], Stage.FINISH, () -> dcp[0].finalDistCp());\r\n    intercept(RemoteException.class, \"LeaseExpiredException\", \"Expect RemoteException(LeaseExpiredException).\", () -> out.close());\r\n    dcp[0] = serializeProcedure(dcp[0]);\r\n    assertTrue(dcp[0].execute());\r\n    assertTrue(fs.exists(dst));\r\n    assertFalse(fs.exists(new Path(context.getSrc(), HdfsConstants.DOT_SNAPSHOT_DIR)));\r\n    assertFalse(fs.exists(new Path(context.getDst(), HdfsConstants.DOT_SNAPSHOT_DIR)));\r\n    cleanup(fs, new Path(testRoot));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "testShutdown",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testShutdown() throws Exception\n{\r\n    String testRoot = nnUri + \"/user/foo/testdir.\" + getMethodName();\r\n    DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(URI.create(nnUri), conf);\r\n    createFiles(fs, testRoot, srcfiles);\r\n    Path src = new Path(testRoot, SRCDAT);\r\n    Path dst = new Path(testRoot, DSTDAT);\r\n    FedBalanceContext context = buildContext(src, dst, MOUNT);\r\n    DistCpProcedure dcProcedure = new DistCpProcedure(\"distcp-procedure\", null, 1000, context);\r\n    BalanceProcedureScheduler scheduler = new BalanceProcedureScheduler(conf);\r\n    scheduler.init(true);\r\n    BalanceJob balanceJob = new BalanceJob.Builder<>().nextProcedure(dcProcedure).build();\r\n    scheduler.submit(balanceJob);\r\n    long sleep = Math.abs(new Random().nextLong()) % 10000;\r\n    Thread.sleep(sleep);\r\n    scheduler.shutDown();\r\n    cleanup(fs, new Path(testRoot));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "testDisableWrite",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testDisableWrite() throws Exception\n{\r\n    String testRoot = nnUri + \"/user/foo/testdir.\" + getMethodName();\r\n    DistributedFileSystem fs = (DistributedFileSystem) FileSystem.get(URI.create(nnUri), conf);\r\n    createFiles(fs, testRoot, srcfiles);\r\n    Path src = new Path(testRoot, SRCDAT);\r\n    Path dst = new Path(testRoot, DSTDAT);\r\n    FedBalanceContext context = buildContext(src, dst, MOUNT);\r\n    DistCpProcedure dcProcedure = new DistCpProcedure(\"distcp-procedure\", null, 1000, context);\r\n    assertNotEquals(0, fs.getFileStatus(src).getPermission().toShort());\r\n    executeProcedure(dcProcedure, Stage.FINAL_DISTCP, () -> dcProcedure.disableWrite(context));\r\n    assertEquals(0, fs.getFileStatus(src).getPermission().toShort());\r\n    cleanup(fs, new Path(testRoot));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "buildContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FedBalanceContext buildContext(Path src, Path dst, String mount)\n{\r\n    return buildContext(src, dst, mount, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "buildContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FedBalanceContext buildContext(Path src, Path dst, String mount, int diffThreshold)\n{\r\n    return new FedBalanceContext.Builder(src, dst, mount, conf).setMapNum(10).setBandwidthLimit(1).setTrash(TrashOption.TRASH).setDelayDuration(1000).setDiffThreshold(diffThreshold).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "executeProcedure",
  "errType" : [ "RetryException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void executeProcedure(DistCpProcedure procedure, Stage target, Call call) throws IOException\n{\r\n    Stage stage = Stage.PRE_CHECK;\r\n    procedure.updateStage(stage);\r\n    while (stage != target) {\r\n        try {\r\n            call.execute();\r\n        } catch (RetryException e) {\r\n        } finally {\r\n            stage = procedure.getStage();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "createFiles",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void createFiles(DistributedFileSystem fs, String topdir, FileEntry[] entries) throws IOException\n{\r\n    long seed = System.currentTimeMillis();\r\n    Random rand = new Random(seed);\r\n    short replicationFactor = 2;\r\n    for (FileEntry entry : entries) {\r\n        Path newPath = new Path(topdir + \"/\" + entry.getPath());\r\n        if (entry.isDirectory()) {\r\n            fs.mkdirs(newPath);\r\n        } else {\r\n            int bufSize = 128;\r\n            DFSTestUtil.createFile(fs, newPath, bufSize, FILE_SIZE, BLOCK_SIZE, replicationFactor, seed);\r\n        }\r\n        seed = System.currentTimeMillis() + rand.nextLong();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "serializeProcedure",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "DistCpProcedure serializeProcedure(DistCpProcedure dcp) throws IOException\n{\r\n    ByteArrayOutputStream bao = new ByteArrayOutputStream();\r\n    DataOutput dataOut = new DataOutputStream(bao);\r\n    dcp.write(dataOut);\r\n    dcp = new DistCpProcedure();\r\n    dcp.readFields(new DataInputStream(new ByteArrayInputStream(bao.toByteArray())));\r\n    return dcp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void cleanup(DistributedFileSystem dfs, Path root) throws IOException\n{\r\n    Path src = new Path(root, SRCDAT);\r\n    Path dst = new Path(root, DSTDAT);\r\n    DistCpProcedure.cleanupSnapshot(dfs, src);\r\n    DistCpProcedure.cleanupSnapshot(dfs, dst);\r\n    dfs.delete(root, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "execute",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean execute() throws IOException\n{\r\n    long startTime = Time.monotonicNow();\r\n    long timeLeft = waitTime;\r\n    while (timeLeft > 0) {\r\n        try {\r\n            Thread.sleep(timeLeft);\r\n        } catch (InterruptedException e) {\r\n            if (isSchedulerShutdown()) {\r\n                return false;\r\n            }\r\n        } finally {\r\n            timeLeft = waitTime - (Time.monotonicNow() - startTime);\r\n        }\r\n    }\r\n    executed = true;\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void write(DataOutput out) throws IOException\n{\r\n    super.write(out);\r\n    out.writeLong(waitTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "readFields",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void readFields(DataInput in) throws IOException\n{\r\n    super.readFields(in);\r\n    waitTime = in.readLong();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-federation-balance\\src\\test\\java\\org\\apache\\hadoop\\tools\\fedbalance\\procedure",
  "methodName" : "getExecuted",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean getExecuted()\n{\r\n    return executed;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]