[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "seek",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void seek(long pos) throws IOException\n{\r\n    if (pos < 0) {\r\n        throw new EOFException(FSExceptionMessages.NEGATIVE_SEEK);\r\n    }\r\n    if (in == null) {\r\n        throw new SwiftConnectionClosedException(FSExceptionMessages.STREAM_IS_CLOSED);\r\n    }\r\n    super.seek(pos);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "time",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long time()\n{\r\n    return System.currentTimeMillis();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "finished",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void finished()\n{\r\n    finished = time();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getDurationString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getDurationString()\n{\r\n    return humanTime(value());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "humanTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String humanTime(long time)\n{\r\n    long seconds = (time / 1000);\r\n    long minutes = (seconds / 60);\r\n    return String.format(\"%d:%02d:%03d\", minutes, seconds % 60, time % 1000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return getDurationString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "value",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long value()\n{\r\n    return finished - started;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    release(\"close()\", null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "release",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean release(String reason, Exception ex) throws IOException\n{\r\n    if (!released) {\r\n        reasonClosed = reason;\r\n        try {\r\n            LOG.debug(\"Releasing connection to {}:  {}\", uri, reason, ex);\r\n            if (req != null) {\r\n                if (!dataConsumed) {\r\n                    req.abort();\r\n                }\r\n                req.releaseConnection();\r\n            }\r\n            if (inStream != null) {\r\n                inStream.close();\r\n            }\r\n            return true;\r\n        } finally {\r\n            released = true;\r\n            dataConsumed = true;\r\n        }\r\n    } else {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "releaseAndRethrow",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "IOException releaseAndRethrow(String operation, IOException ex)\n{\r\n    try {\r\n        release(operation, ex);\r\n    } catch (IOException ioe) {\r\n        LOG.debug(\"Exception during release: {}\", operation, ioe);\r\n        if (ex == null) {\r\n            ex = ioe;\r\n        }\r\n    }\r\n    return ex;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "assumeNotReleased",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void assumeNotReleased() throws SwiftConnectionClosedException\n{\r\n    if (released || inStream == null) {\r\n        throw new SwiftConnectionClosedException(reasonClosed);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "available",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int available() throws IOException\n{\r\n    assumeNotReleased();\r\n    try {\r\n        return inStream.available();\r\n    } catch (IOException e) {\r\n        throw releaseAndRethrow(\"available() failed -\" + e, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "read",
  "errType" : [ "EOFException", "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int read() throws IOException\n{\r\n    assumeNotReleased();\r\n    int read = 0;\r\n    try {\r\n        read = inStream.read();\r\n    } catch (EOFException e) {\r\n        LOG.debug(\"EOF exception\", e);\r\n        read = -1;\r\n    } catch (IOException e) {\r\n        throw releaseAndRethrow(\"read()\", e);\r\n    }\r\n    if (read < 0) {\r\n        dataConsumed = true;\r\n        release(\"read() -all data consumed\", null);\r\n    }\r\n    return read;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "read",
  "errType" : [ "EOFException", "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "int read(byte[] b, int off, int len) throws IOException\n{\r\n    SwiftUtils.validateReadArgs(b, off, len);\r\n    if (len == 0) {\r\n        return 0;\r\n    }\r\n    assumeNotReleased();\r\n    int read;\r\n    try {\r\n        read = inStream.read(b, off, len);\r\n    } catch (EOFException e) {\r\n        LOG.debug(\"EOF exception\", e);\r\n        read = -1;\r\n    } catch (IOException e) {\r\n        throw releaseAndRethrow(\"read(b, off, \" + len + \")\", e);\r\n    }\r\n    if (read < 0) {\r\n        dataConsumed = true;\r\n        release(\"read() -all data consumed\", null);\r\n    }\r\n    return read;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "finalize",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void finalize()\n{\r\n    try {\r\n        if (release(\"finalize()\", constructionStack)) {\r\n            LOG.warn(\"input stream of {}\" + \" not closed properly -cleaned up in finalize()\", uri);\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.warn(\"Exception while releasing {} in finalizer\", uri, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"HttpInputStreamWithRelease working with \" + uri + \" released=\" + released + \" dataConsumed=\" + dataConsumed;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getPasswordCredentials",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "PasswordCredentials getPasswordCredentials()\n{\r\n    return passwordCredentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setPasswordCredentials",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPasswordCredentials(PasswordCredentials passwordCredentials)\n{\r\n    this.passwordCredentials = passwordCredentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"Authenticate as \" + \"tenant '\" + tenantName + \"' \" + passwordCredentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void add(String operation, Duration duration, boolean success)\n{\r\n    DurationStats durationStats;\r\n    String key = operation;\r\n    if (!success) {\r\n        key += \"-FAIL\";\r\n    }\r\n    synchronized (this) {\r\n        durationStats = statsTable.get(key);\r\n        if (durationStats == null) {\r\n            durationStats = new DurationStats(key);\r\n            statsTable.put(key, durationStats);\r\n        }\r\n    }\r\n    synchronized (durationStats) {\r\n        durationStats.add(duration);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getDurationStatistics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<DurationStats> getDurationStatistics()\n{\r\n    List<DurationStats> results = new ArrayList<DurationStats>(statsTable.size());\r\n    for (DurationStats stat : statsTable.values()) {\r\n        results.add(new DurationStats(stat));\r\n    }\r\n    return results;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "reset",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void reset()\n{\r\n    for (DurationStats stat : statsTable.values()) {\r\n        stat.reset();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getAccessKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAccessKey()\n{\r\n    return accessKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setAccessKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAccessKey(String accessKey)\n{\r\n    this.accessKey = accessKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getSecretKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getSecretKey()\n{\r\n    return secretKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setSecretKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSecretKey(String secretKey)\n{\r\n    this.secretKey = secretKey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return \"user \" + \"'\" + accessKey + '\\'' + \" with key of length \" + ((secretKey == null) ? 0 : secretKey.length());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getApiAccessKeyCredentials",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "KeystoneApiKeyCredentials getApiAccessKeyCredentials()\n{\r\n    return apiAccessKeyCredentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setApiAccessKeyCredentials",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApiAccessKeyCredentials(KeystoneApiKeyCredentials apiAccessKeyCredentials)\n{\r\n    this.apiAccessKeyCredentials = apiAccessKeyCredentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"KeyStoneAuthRequest as \" + \"tenant '\" + tenantName + \"' \" + apiAccessKeyCredentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "isDirectory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isDirectory()\n{\r\n    return super.isDirectory() || getLen() == 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "isFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isFile()\n{\r\n    return !this.isDirectory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(getClass().getSimpleName());\r\n    sb.append(\"{ \");\r\n    sb.append(\"path=\").append(getPath());\r\n    sb.append(\"; isDirectory=\").append(isDirectory());\r\n    sb.append(\"; length=\").append(getLen());\r\n    sb.append(\"; blocksize=\").append(getBlockSize());\r\n    sb.append(\"; modification_time=\").append(getModificationTime());\r\n    sb.append(\"}\");\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getEndpointURI",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "URI getEndpointURI()\n{\r\n    return endpointURI;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AccessToken getToken()\n{\r\n    return token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "setAuthDetails",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAuthDetails(URI endpoint, URI objectLocation, AccessToken authToken)\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(String.format(\"setAuth: endpoint=%s; objectURI=%s; token=%s\", endpoint, objectLocation, authToken));\r\n    }\r\n    synchronized (this) {\r\n        endpointURI = endpoint;\r\n        objectLocationURI = objectLocation;\r\n        token = authToken;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getOption",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getOption(Properties props, String key) throws SwiftConfigurationException\n{\r\n    String val = props.getProperty(key);\r\n    if (val == null) {\r\n        throw new SwiftConfigurationException(\"Undefined property: \" + key);\r\n    }\r\n    return val;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getData",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "HttpBodyContent getData(SwiftObjectPath path, long offset, long length) throws IOException\n{\r\n    if (offset < 0) {\r\n        throw new SwiftException(\"Invalid offset: \" + offset + \" in getDataAsInputStream( path=\" + path + \", offset=\" + offset + \", length =\" + length + \")\");\r\n    }\r\n    if (length <= 0) {\r\n        throw new SwiftException(\"Invalid length: \" + length + \" in getDataAsInputStream( path=\" + path + \", offset=\" + offset + \", length =\" + length + \")\");\r\n    }\r\n    final String range = String.format(SWIFT_RANGE_HEADER_FORMAT_PATTERN, offset, offset + length - 1);\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"getData:\" + range);\r\n    }\r\n    return getData(path, new BasicHeader(HEADER_RANGE, range), SwiftRestClient.NEWEST);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getContentLength",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getContentLength(URI uri) throws IOException\n{\r\n    preRemoteCommand(\"getContentLength\");\r\n    return perform(\"getContentLength\", uri, new HeadRequestProcessor<Long>() {\r\n\r\n        @Override\r\n        public Long extractResult(HttpHead req, HttpResponse resp) throws IOException {\r\n            return HttpResponseUtils.getContentLength(resp);\r\n        }\r\n\r\n        @Override\r\n        protected void setup(HttpHead req) throws IOException {\r\n            super.setup(req);\r\n            req.addHeader(NEWEST);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getContentLength",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getContentLength(SwiftObjectPath path) throws IOException\n{\r\n    return getContentLength(pathToURI(path));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getData",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "HttpBodyContent getData(SwiftObjectPath path, final Header... requestHeaders) throws IOException\n{\r\n    preRemoteCommand(\"getData\");\r\n    return doGet(pathToURI(path), requestHeaders);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getObjectLocation",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "byte[] getObjectLocation(SwiftObjectPath path, final Header... requestHeaders) throws IOException\n{\r\n    if (!isLocationAware()) {\r\n        return null;\r\n    }\r\n    preRemoteCommand(\"getObjectLocation\");\r\n    try {\r\n        return perform(\"getObjectLocation\", pathToObjectLocation(path), new GetRequestProcessor<byte[]>() {\r\n\r\n            @Override\r\n            protected int[] getAllowedStatusCodes() {\r\n                return new int[] { SC_OK, SC_FORBIDDEN, SC_NO_CONTENT };\r\n            }\r\n\r\n            @Override\r\n            public byte[] extractResult(HttpGet req, HttpResponse resp) throws IOException {\r\n                int statusCode = resp.getStatusLine().getStatusCode();\r\n                if (statusCode == SC_NOT_FOUND || statusCode == SC_FORBIDDEN || statusCode == SC_NO_CONTENT || resp.getEntity().getContent() == null) {\r\n                    return null;\r\n                }\r\n                final InputStream responseBodyAsStream = resp.getEntity().getContent();\r\n                final byte[] locationData = new byte[1024];\r\n                return responseBodyAsStream.read(locationData) > 0 ? locationData : null;\r\n            }\r\n\r\n            @Override\r\n            protected void setup(HttpGet req) throws SwiftInternalStateException {\r\n                setHeaders(req, requestHeaders);\r\n            }\r\n        });\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Failed to get the location of \" + path + \": \" + e, e);\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "pathToObjectLocation",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "URI pathToObjectLocation(SwiftObjectPath path) throws SwiftException\n{\r\n    URI uri;\r\n    String dataLocationURI = objectLocationURI.toString();\r\n    try {\r\n        if (path.toString().startsWith(\"/\")) {\r\n            dataLocationURI = dataLocationURI.concat(path.toUriPath());\r\n        } else {\r\n            dataLocationURI = dataLocationURI.concat(\"/\").concat(path.toUriPath());\r\n        }\r\n        uri = new URI(dataLocationURI);\r\n    } catch (URISyntaxException e) {\r\n        throw new SwiftException(e);\r\n    }\r\n    return uri;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "findObjectsByPrefix",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "byte[] findObjectsByPrefix(SwiftObjectPath path, final Header... requestHeaders) throws IOException\n{\r\n    preRemoteCommand(\"findObjectsByPrefix\");\r\n    URI uri;\r\n    String dataLocationURI = getEndpointURI().toString();\r\n    try {\r\n        String object = path.getObject();\r\n        if (object.startsWith(\"/\")) {\r\n            object = object.substring(1);\r\n        }\r\n        object = encodeUrl(object);\r\n        dataLocationURI = dataLocationURI.concat(\"/\").concat(path.getContainer()).concat(\"/?prefix=\").concat(object);\r\n        uri = new URI(dataLocationURI);\r\n    } catch (URISyntaxException e) {\r\n        throw new SwiftException(\"Bad URI: \" + dataLocationURI, e);\r\n    }\r\n    return perform(\"findObjectsByPrefix\", uri, new GetRequestProcessor<byte[]>() {\r\n\r\n        @Override\r\n        public byte[] extractResult(HttpGet req, HttpResponse resp) throws IOException {\r\n            if (resp.getStatusLine().getStatusCode() == SC_NOT_FOUND) {\r\n                throw new FileNotFoundException(\"Not found \" + req.getURI());\r\n            }\r\n            return HttpResponseUtils.getResponseBody(resp);\r\n        }\r\n\r\n        @Override\r\n        protected int[] getAllowedStatusCodes() {\r\n            return new int[] { SC_OK, SC_NOT_FOUND };\r\n        }\r\n\r\n        @Override\r\n        protected void setup(HttpGet req) throws SwiftInternalStateException {\r\n            setHeaders(req, requestHeaders);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "listDeepObjectsInDirectory",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "byte[] listDeepObjectsInDirectory(SwiftObjectPath path, boolean listDeep, final Header... requestHeaders) throws IOException\n{\r\n    preRemoteCommand(\"listDeepObjectsInDirectory\");\r\n    String endpoint = getEndpointURI().toString();\r\n    StringBuilder dataLocationURI = new StringBuilder();\r\n    dataLocationURI.append(endpoint);\r\n    String object = path.getObject();\r\n    if (object.startsWith(\"/\")) {\r\n        object = object.substring(1);\r\n    }\r\n    if (!object.endsWith(\"/\")) {\r\n        object = object.concat(\"/\");\r\n    }\r\n    if (object.equals(\"/\")) {\r\n        object = \"\";\r\n    }\r\n    dataLocationURI = dataLocationURI.append(\"/\").append(path.getContainer()).append(\"/?prefix=\").append(object).append(\"&format=json\");\r\n    if (listDeep == false) {\r\n        dataLocationURI.append(\"&delimiter=/\");\r\n    }\r\n    return findObjects(dataLocationURI.toString(), requestHeaders);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "findObjects",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "byte[] findObjects(String location, final Header[] requestHeaders) throws IOException\n{\r\n    URI uri;\r\n    preRemoteCommand(\"findObjects\");\r\n    try {\r\n        uri = new URI(location);\r\n    } catch (URISyntaxException e) {\r\n        throw new SwiftException(\"Bad URI: \" + location, e);\r\n    }\r\n    return perform(\"findObjects\", uri, new GetRequestProcessor<byte[]>() {\r\n\r\n        @Override\r\n        public byte[] extractResult(HttpGet req, HttpResponse resp) throws IOException {\r\n            if (resp.getStatusLine().getStatusCode() == SC_NOT_FOUND) {\r\n                throw new FileNotFoundException(\"Not found \" + req.getURI());\r\n            }\r\n            return HttpResponseUtils.getResponseBody(resp);\r\n        }\r\n\r\n        @Override\r\n        protected int[] getAllowedStatusCodes() {\r\n            return new int[] { SC_OK, SC_NOT_FOUND };\r\n        }\r\n\r\n        @Override\r\n        protected void setup(HttpGet req) throws SwiftInternalStateException {\r\n            setHeaders(req, requestHeaders);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "copyObject",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean copyObject(SwiftObjectPath src, final SwiftObjectPath dst, final Header... headers) throws IOException\n{\r\n    preRemoteCommand(\"copyObject\");\r\n    return perform(\"copy\", pathToURI(src), new CopyRequestProcessor<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean extractResult(CopyRequest req, HttpResponse resp) throws IOException {\r\n            return resp.getStatusLine().getStatusCode() != SC_NOT_FOUND;\r\n        }\r\n\r\n        @Override\r\n        protected void setup(CopyRequest req) throws SwiftInternalStateException {\r\n            setHeaders(req, headers);\r\n            req.addHeader(HEADER_DESTINATION, dst.toUriPath());\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "upload",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void upload(SwiftObjectPath path, final InputStream data, final long length, final Header... requestHeaders) throws IOException\n{\r\n    preRemoteCommand(\"upload\");\r\n    try {\r\n        perform(\"upload\", pathToURI(path), new PutRequestProcessor<byte[]>() {\r\n\r\n            @Override\r\n            public byte[] extractResult(HttpPut req, HttpResponse resp) throws IOException {\r\n                return HttpResponseUtils.getResponseBody(resp);\r\n            }\r\n\r\n            @Override\r\n            protected void setup(HttpPut req) throws SwiftInternalStateException {\r\n                req.setEntity(new InputStreamEntity(data, length));\r\n                setHeaders(req, requestHeaders);\r\n            }\r\n        });\r\n    } finally {\r\n        data.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "delete",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean delete(SwiftObjectPath path, final Header... requestHeaders) throws IOException\n{\r\n    preRemoteCommand(\"delete\");\r\n    return perform(\"\", pathToURI(path), new DeleteRequestProcessor<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean extractResult(HttpDelete req, HttpResponse resp) throws IOException {\r\n            return resp.getStatusLine().getStatusCode() == SC_NO_CONTENT;\r\n        }\r\n\r\n        @Override\r\n        protected void setup(HttpDelete req) throws SwiftInternalStateException {\r\n            setHeaders(req, requestHeaders);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "headRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Header[] headRequest(String reason, SwiftObjectPath path, final Header... requestHeaders) throws IOException\n{\r\n    preRemoteCommand(\"headRequest: \" + reason);\r\n    return perform(reason, pathToURI(path), new HeadRequestProcessor<Header[]>() {\r\n\r\n        @Override\r\n        public Header[] extractResult(HttpHead req, HttpResponse resp) throws IOException {\r\n            if (resp.getStatusLine().getStatusCode() == SC_NOT_FOUND) {\r\n                throw new FileNotFoundException(\"Not Found \" + req.getURI());\r\n            }\r\n            return resp.getAllHeaders();\r\n        }\r\n\r\n        @Override\r\n        protected void setup(HttpHead req) throws SwiftInternalStateException {\r\n            setHeaders(req, requestHeaders);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "putRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int putRequest(SwiftObjectPath path, final Header... requestHeaders) throws IOException\n{\r\n    preRemoteCommand(\"putRequest\");\r\n    return perform(pathToURI(path), new PutRequestProcessor<Integer>() {\r\n\r\n        @Override\r\n        public Integer extractResult(HttpPut req, HttpResponse resp) throws IOException {\r\n            return resp.getStatusLine().getStatusCode();\r\n        }\r\n\r\n        @Override\r\n        protected void setup(HttpPut req) throws SwiftInternalStateException {\r\n            setHeaders(req, requestHeaders);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "authenticate",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AccessToken authenticate() throws IOException\n{\r\n    final AuthenticationRequest authenticationRequest;\r\n    if (useKeystoneAuthentication) {\r\n        authenticationRequest = keystoneAuthRequest;\r\n    } else {\r\n        authenticationRequest = authRequest;\r\n    }\r\n    LOG.debug(\"started authentication\");\r\n    return perform(\"authentication\", authUri, new AuthenticationPost(authenticationRequest));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getAuthenticationRequst",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "StringEntity getAuthenticationRequst(AuthenticationRequest authenticationRequest) throws IOException\n{\r\n    final String data = JSONUtil.toJSON(new AuthenticationRequestWrapper(authenticationRequest));\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Authenticating with \" + authenticationRequest);\r\n    }\r\n    return new StringEntity(data, ContentType.create(\"application/json\", \"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "createDefaultContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createDefaultContainer() throws IOException\n{\r\n    createContainer(container);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "createContainer",
  "errType" : [ "FileNotFoundException", "FileNotFoundException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createContainer(String containerName) throws IOException\n{\r\n    SwiftObjectPath objectPath = new SwiftObjectPath(containerName, \"\");\r\n    try {\r\n        headRequest(\"createContainer\", objectPath, NEWEST);\r\n    } catch (FileNotFoundException ex) {\r\n        int status = 0;\r\n        try {\r\n            status = putRequest(objectPath);\r\n        } catch (FileNotFoundException e) {\r\n            status = SC_NOT_FOUND;\r\n        }\r\n        if (status == SC_BAD_REQUEST) {\r\n            throw new SwiftBadRequestException(\"Bad request -authentication failure or bad container name?\", status, \"PUT\", null);\r\n        }\r\n        if (!isStatusCodeExpected(status, SC_OK, SC_CREATED, SC_ACCEPTED, SC_NO_CONTENT)) {\r\n            throw new SwiftInvalidResponseException(\"Couldn't create container \" + containerName + \" for storing data in Swift.\" + \" Try to create container \" + containerName + \" manually \", status, \"PUT\", null);\r\n        } else {\r\n            throw ex;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "authIfNeeded",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void authIfNeeded() throws IOException\n{\r\n    if (getEndpointURI() == null) {\r\n        authenticate();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "preRemoteCommand",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void preRemoteCommand(String operation) throws IOException\n{\r\n    if (LOG.isTraceEnabled()) {\r\n        LOG.trace(\"Executing \" + operation);\r\n    }\r\n    authIfNeeded();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "perform",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "R perform(URI uri, HttpRequestProcessor<M, R> processor) throws IOException, SwiftBadRequestException, SwiftInternalStateException, SwiftInvalidResponseException, FileNotFoundException\n{\r\n    return perform(\"\", uri, processor);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "perform",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "R perform(String reason, URI uri, HttpRequestProcessor<M, R> processor) throws IOException, SwiftBadRequestException, SwiftInternalStateException, SwiftInvalidResponseException, FileNotFoundException\n{\r\n    checkNotNull(uri);\r\n    checkNotNull(processor);\r\n    final M req = processor.createRequest(uri.toString());\r\n    req.addHeader(HEADER_USER_AGENT, SWIFT_USER_AGENT);\r\n    HttpClientBuilder clientBuilder = HttpClientBuilder.create();\r\n    clientBuilder.setRetryHandler(new DefaultHttpRequestRetryHandler(retryCount, false));\r\n    RequestConfig.Builder requestConfigBuilder = RequestConfig.custom().setConnectTimeout(connectTimeout);\r\n    if (proxyHost != null) {\r\n        requestConfigBuilder.setProxy(new HttpHost(proxyHost, proxyPort));\r\n    }\r\n    clientBuilder.setDefaultRequestConfig(requestConfigBuilder.build());\r\n    clientBuilder.setDefaultSocketConfig(SocketConfig.custom().setSoTimeout(socketTimeout).build());\r\n    Duration duration = new Duration();\r\n    boolean success = false;\r\n    HttpResponse resp;\r\n    try {\r\n        CloseableHttpClient client = clientBuilder.build();\r\n        int statusCode = 0;\r\n        try {\r\n            resp = exec(client, req);\r\n            statusCode = checkNotNull(resp.getStatusLine().getStatusCode());\r\n        } catch (IOException e) {\r\n            throw ExceptionDiags.wrapException(uri.toString(), req.getMethod(), e);\r\n        }\r\n        int[] allowedStatusCodes = processor.getAllowedStatusCodes();\r\n        boolean validResponse = isStatusCodeExpected(statusCode, allowedStatusCodes);\r\n        if (!validResponse) {\r\n            IOException ioe = buildException(uri, req, resp, statusCode);\r\n            throw ioe;\r\n        }\r\n        R r = processor.extractResult(req, resp);\r\n        success = true;\r\n        return r;\r\n    } catch (IOException e) {\r\n        req.releaseConnection();\r\n        throw e;\r\n    } finally {\r\n        duration.finished();\r\n        durationStats.add(req.getMethod() + \" \" + reason, duration, success);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "buildException",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "IOException buildException(URI uri, M req, HttpResponse resp, int statusCode)\n{\r\n    IOException fault;\r\n    String errorMessage = String.format(\"Method %s on %s failed, status code: %d,\" + \" status line: %s\", req.getMethod(), uri, statusCode, resp.getStatusLine());\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(errorMessage);\r\n    }\r\n    switch(statusCode) {\r\n        case SC_NOT_FOUND:\r\n            fault = new FileNotFoundException(\"Operation \" + req.getMethod() + \" on \" + uri);\r\n            break;\r\n        case SC_BAD_REQUEST:\r\n            fault = new SwiftBadRequestException(\"Bad request against \" + uri, req.getMethod(), uri, resp);\r\n            break;\r\n        case SC_REQUESTED_RANGE_NOT_SATISFIABLE:\r\n            StringBuilder errorText = new StringBuilder(resp.getStatusLine().getReasonPhrase());\r\n            Header requestContentLen = req.getFirstHeader(HEADER_CONTENT_LENGTH);\r\n            if (requestContentLen != null) {\r\n                errorText.append(\" requested \").append(requestContentLen.getValue());\r\n            }\r\n            Header availableContentRange = resp.getFirstHeader(HEADER_CONTENT_RANGE);\r\n            if (availableContentRange != null) {\r\n                errorText.append(\" available \").append(availableContentRange.getValue());\r\n            }\r\n            fault = new EOFException(errorText.toString());\r\n            break;\r\n        case SC_UNAUTHORIZED:\r\n            fault = new SwiftAuthenticationFailedException(\"Operation not authorized- current access token =\" + getToken(), req.getMethod(), uri, resp);\r\n            break;\r\n        case SwiftProtocolConstants.SC_TOO_MANY_REQUESTS_429:\r\n        case SwiftProtocolConstants.SC_THROTTLED_498:\r\n            fault = new SwiftThrottledRequestException(\"Client is being throttled: too many requests\", req.getMethod(), uri, resp);\r\n            break;\r\n        default:\r\n            fault = new SwiftInvalidResponseException(errorMessage, req.getMethod(), uri, resp);\r\n    }\r\n    return fault;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "doGet",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HttpBodyContent doGet(final URI uri, final Header... requestHeaders) throws IOException\n{\r\n    return perform(\"\", uri, new GetRequestProcessor<HttpBodyContent>() {\r\n\r\n        @Override\r\n        public HttpBodyContent extractResult(HttpGet req, HttpResponse resp) throws IOException {\r\n            return new HttpBodyContent(new HttpInputStreamWithRelease(uri, req, resp), HttpResponseUtils.getContentLength(resp));\r\n        }\r\n\r\n        @Override\r\n        protected void setup(HttpGet req) throws SwiftInternalStateException {\r\n            setHeaders(req, requestHeaders);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getInstance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SwiftRestClient getInstance(URI filesystemURI, Configuration config) throws IOException\n{\r\n    return new SwiftRestClient(filesystemURI, config);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "pathToURI",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "URI pathToURI(SwiftObjectPath path, URI endpointURI) throws SwiftException\n{\r\n    checkNotNull(endpointURI, \"Null Endpoint -client is not authenticated\");\r\n    String dataLocationURI = endpointURI.toString();\r\n    try {\r\n        dataLocationURI = SwiftUtils.joinPaths(dataLocationURI, encodeUrl(path.toUriPath()));\r\n        return new URI(dataLocationURI);\r\n    } catch (URISyntaxException e) {\r\n        throw new SwiftException(\"Failed to create URI from \" + dataLocationURI, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "encodeUrl",
  "errType" : [ "UnsupportedEncodingException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String encodeUrl(String url) throws SwiftException\n{\r\n    if (url.matches(\".*\\\\s+.*\")) {\r\n        try {\r\n            url = URLEncoder.encode(url, \"UTF-8\");\r\n            url = url.replace(\"+\", \"%20\");\r\n        } catch (UnsupportedEncodingException e) {\r\n            throw new SwiftException(\"failed to encode URI\", e);\r\n        }\r\n    }\r\n    return url;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "pathToURI",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URI pathToURI(SwiftObjectPath path) throws SwiftException\n{\r\n    return pathToURI(path, getEndpointURI());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "setHeaders",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setHeaders(HttpUriRequest method, Header[] requestHeaders) throws SwiftInternalStateException\n{\r\n    for (Header header : requestHeaders) {\r\n        method.addHeader(header);\r\n    }\r\n    setAuthToken(method, getToken());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "setAuthToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setAuthToken(HttpUriRequest method, AccessToken accessToken) throws SwiftInternalStateException\n{\r\n    checkNotNull(accessToken, \"Not authenticated\");\r\n    method.addHeader(HEADER_AUTH_KEY, accessToken.getId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "exec",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "HttpResponse exec(HttpClient client, M req) throws IOException\n{\r\n    HttpResponse resp = execWithDebugOutput(req, client);\r\n    int statusCode = resp.getStatusLine().getStatusCode();\r\n    if ((statusCode == HttpStatus.SC_UNAUTHORIZED || statusCode == HttpStatus.SC_BAD_REQUEST) && req instanceof AuthPostRequest && !useKeystoneAuthentication) {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Operation failed with status \" + statusCode + \" attempting keystone auth\");\r\n        }\r\n        useKeystoneAuthentication = true;\r\n        final AuthPostRequest authentication = (AuthPostRequest) req;\r\n        authentication.setEntity(getAuthenticationRequst(keystoneAuthRequest));\r\n        resp = execWithDebugOutput(req, client);\r\n    }\r\n    if (statusCode == HttpStatus.SC_UNAUTHORIZED) {\r\n        if (req instanceof AuthPostRequest) {\r\n            throw new SwiftAuthenticationFailedException(authRequest.toString(), \"auth\", authUri, resp);\r\n        }\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Reauthenticating\");\r\n        }\r\n        authenticate();\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Retrying original request\");\r\n        }\r\n        resp = execWithDebugOutput(req, client);\r\n    }\r\n    return resp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "execWithDebugOutput",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "HttpResponse execWithDebugOutput(M req, HttpClient client) throws IOException\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        StringBuilder builder = new StringBuilder(req.getMethod() + \" \" + req.getURI() + \"\\n\");\r\n        for (Header header : req.getAllHeaders()) {\r\n            builder.append(header.toString());\r\n        }\r\n        LOG.debug(builder.toString());\r\n    }\r\n    HttpResponse resp = client.execute(req);\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Status code = \" + resp.getStatusLine().getStatusCode());\r\n    }\r\n    return resp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "checkNotNull",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T checkNotNull(T reference) throws SwiftInternalStateException\n{\r\n    return checkNotNull(reference, \"Null Reference\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "checkNotNull",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "T checkNotNull(T reference, String message) throws SwiftInternalStateException\n{\r\n    if (reference == null) {\r\n        throw new SwiftInternalStateException(message);\r\n    }\r\n    return reference;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "isStatusCodeExpected",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isStatusCodeExpected(int status, int... expected)\n{\r\n    for (int code : expected) {\r\n        if (status == code) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"Swift client: \" + serviceDescription;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getRegion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRegion()\n{\r\n    return region;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getTenant",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTenant()\n{\r\n    return tenant;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getUsername",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUsername()\n{\r\n    return username;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainer()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "isLocationAware",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isLocationAware()\n{\r\n    return locationAware;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getBlocksizeKB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getBlocksizeKB()\n{\r\n    return blocksizeKB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getPartSizeKB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getPartSizeKB()\n{\r\n    return partSizeKB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getBufferSizeKB",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getBufferSizeKB()\n{\r\n    return bufferSizeKB;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getProxyPort",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getProxyPort()\n{\r\n    return proxyPort;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getProxyHost",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getProxyHost()\n{\r\n    return proxyHost;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getRetryCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getRetryCount()\n{\r\n    return retryCount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getConnectTimeout",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getConnectTimeout()\n{\r\n    return connectTimeout;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "isUsePublicURL",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isUsePublicURL()\n{\r\n    return usePublicURL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getThrottleDelay",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getThrottleDelay()\n{\r\n    return throttleDelay;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getOperationStatistics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<DurationStats> getOperationStatistics()\n{\r\n    return durationStats.getDurationStatistics();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getMetadata",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Object getMetadata()\n{\r\n    return metadata;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setMetadata",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setMetadata(Object metadata)\n{\r\n    this.metadata = metadata;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getServiceCatalog",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Catalog> getServiceCatalog()\n{\r\n    return serviceCatalog;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setServiceCatalog",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setServiceCatalog(List<Catalog> serviceCatalog)\n{\r\n    this.serviceCatalog = serviceCatalog;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "User getUser()\n{\r\n    return user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setUser",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUser(User user)\n{\r\n    this.user = user;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AccessToken getToken()\n{\r\n    return token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setToken(AccessToken token)\n{\r\n    this.token = token;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getApiKeyCredentials",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApiKeyCredentials getApiKeyCredentials()\n{\r\n    return apiKeyCredentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setApiKeyCredentials",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApiKeyCredentials(ApiKeyCredentials apiKeyCredentials)\n{\r\n    this.apiKeyCredentials = apiKeyCredentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"Auth as \" + \"tenant '\" + tenantName + \"' \" + apiKeyCredentials;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getPassword",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getPassword()\n{\r\n    return password;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setPassword",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPassword(String password)\n{\r\n    this.password = password;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getUsername",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUsername()\n{\r\n    return username;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setUsername",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUsername(String username)\n{\r\n    this.username = username;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"PasswordCredentials{username='\" + username + \"'}\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getAccess",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AuthenticationResponse getAccess()\n{\r\n    return access;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setAccess",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAccess(AuthenticationResponse access)\n{\r\n    this.access = access;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\exceptions",
  "methodName" : "exceptionTitle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String exceptionTitle()\n{\r\n    return \"BadRequest\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getRoles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Roles> getRoles()\n{\r\n    return roles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setRoles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRoles(List<Roles> roles)\n{\r\n    this.roles = roles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getRoles_links",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Object> getRoles_links()\n{\r\n    return roles_links;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setRoles_links",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRoles_links(List<Object> roles_links)\n{\r\n    this.roles_links = roles_links;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getUsername",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUsername()\n{\r\n    return username;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setUsername",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUsername(String username)\n{\r\n    this.username = username;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\exceptions",
  "methodName" : "getStatusCode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getStatusCode()\n{\r\n    return statusCode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\exceptions",
  "methodName" : "getOperation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getOperation()\n{\r\n    return operation;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\exceptions",
  "methodName" : "getUri",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "URI getUri()\n{\r\n    return uri;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\exceptions",
  "methodName" : "getBody",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getBody()\n{\r\n    return body;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\exceptions",
  "methodName" : "exceptionTitle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String exceptionTitle()\n{\r\n    return \"Invalid Response\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\exceptions",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "String toString()\n{\r\n    StringBuilder msg = new StringBuilder();\r\n    msg.append(exceptionTitle());\r\n    msg.append(\": \");\r\n    msg.append(getMessage());\r\n    msg.append(\"  \");\r\n    msg.append(operation);\r\n    msg.append(\" \");\r\n    msg.append(uri);\r\n    msg.append(\" => \");\r\n    msg.append(statusCode);\r\n    if (body != null && !body.isEmpty()) {\r\n        msg.append(\" : \");\r\n        msg.append(body);\r\n    }\r\n    return msg.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void add(Duration duration)\n{\r\n    add(duration.value());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "add",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void add(long x)\n{\r\n    n++;\r\n    sum += x;\r\n    double delta = x - mean;\r\n    mean += delta / n;\r\n    m2 += delta * (x - mean);\r\n    if (x < min) {\r\n        min = x;\r\n    }\r\n    if (x > max) {\r\n        max = x;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "reset",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void reset()\n{\r\n    n = 0;\r\n    sum = 0;\r\n    sum = 0;\r\n    min = 10000000;\r\n    max = 0;\r\n    mean = 0;\r\n    m2 = 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getCount()\n{\r\n    return n;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getSum",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSum()\n{\r\n    return sum;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getArithmeticMean",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "double getArithmeticMean()\n{\r\n    return mean;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getVariance",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "double getVariance()\n{\r\n    return n > 0 ? (m2 / (n - 1)) : 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getDeviation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "double getDeviation()\n{\r\n    double variance = getVariance();\r\n    return (variance > 0) ? Math.sqrt(variance) : 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return String.format(\"%s count=%d total=%.3fs mean=%.3fs stddev=%.3fs min=%.3fs max=%.3fs\", operation, n, sum / 1000.0, mean / 1000.0, getDeviation() / 1000000.0, min / 1000.0, max / 1000.0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getApiKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getApiKey()\n{\r\n    return apikey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setApiKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApiKey(String apikey)\n{\r\n    this.apikey = apikey;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getUsername",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUsername()\n{\r\n    return username;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setUsername",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUsername(String username)\n{\r\n    this.username = username;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return \"user \" + \"'\" + username + '\\'' + \" with key of length \" + ((apikey == null) ? 0 : apikey.length());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getAdminURL",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "URI getAdminURL()\n{\r\n    return adminURL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setAdminURL",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAdminURL(URI adminURL)\n{\r\n    this.adminURL = adminURL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getInternalURL",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "URI getInternalURL()\n{\r\n    return internalURL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setInternalURL",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setInternalURL(URI internalURL)\n{\r\n    this.internalURL = internalURL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getPublicURL",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "URI getPublicURL()\n{\r\n    return publicURL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setPublicURL",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPublicURL(URI publicURL)\n{\r\n    this.publicURL = publicURL;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getPublicURL2",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "URI getPublicURL2()\n{\r\n    return publicURL2;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setPublicURL2",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPublicURL2(URI publicURL2)\n{\r\n    this.publicURL2 = publicURL2;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getRegion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getRegion()\n{\r\n    return region;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setRegion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRegion(String region)\n{\r\n    this.region = region;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getTenantId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTenantId()\n{\r\n    return tenantId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setTenantId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTenantId(String tenantId)\n{\r\n    this.tenantId = tenantId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getVersionId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVersionId()\n{\r\n    return versionId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setVersionId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVersionId(String versionId)\n{\r\n    this.versionId = versionId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getVersionInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVersionInfo()\n{\r\n    return versionInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setVersionInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVersionInfo(String versionInfo)\n{\r\n    this.versionInfo = versionInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getVersionList",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVersionList()\n{\r\n    return versionList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setVersionList",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVersionList(String versionList)\n{\r\n    this.versionList = versionList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initialize(URI fsURI, Configuration configuration) throws IOException\n{\r\n    this.uri = fsURI;\r\n    this.swiftRestClient = SwiftRestClient.getInstance(fsURI, configuration);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"SwiftNativeFileSystemStore with \" + swiftRestClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getBlocksize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getBlocksize()\n{\r\n    return 1024L * swiftRestClient.getBlocksizeKB();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getPartsizeKB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getPartsizeKB()\n{\r\n    return swiftRestClient.getPartSizeKB();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getBufferSizeKB",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getBufferSizeKB()\n{\r\n    return swiftRestClient.getBufferSizeKB();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getThrottleDelay",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getThrottleDelay()\n{\r\n    return swiftRestClient.getThrottleDelay();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "uploadFile",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void uploadFile(Path path, InputStream inputStream, long length) throws IOException\n{\r\n    swiftRestClient.upload(toObjectPath(path), inputStream, length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "uploadFilePart",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void uploadFilePart(Path path, int partNumber, InputStream inputStream, long length) throws IOException\n{\r\n    String stringPath = path.toUri().toString();\r\n    String partitionFilename = SwiftUtils.partitionFilenameFromNumber(partNumber);\r\n    if (stringPath.endsWith(\"/\")) {\r\n        stringPath = stringPath.concat(partitionFilename);\r\n    } else {\r\n        stringPath = stringPath.concat(\"/\").concat(partitionFilename);\r\n    }\r\n    swiftRestClient.upload(new SwiftObjectPath(toDirPath(path).getContainer(), stringPath), inputStream, length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "createManifestForPartUpload",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void createManifestForPartUpload(Path path) throws IOException\n{\r\n    String pathString = toObjectPath(path).toString();\r\n    if (!pathString.endsWith(\"/\")) {\r\n        pathString = pathString.concat(\"/\");\r\n    }\r\n    if (pathString.startsWith(\"/\")) {\r\n        pathString = pathString.substring(1);\r\n    }\r\n    swiftRestClient.upload(toObjectPath(path), new ByteArrayInputStream(new byte[0]), 0, new BasicHeader(SwiftProtocolConstants.X_OBJECT_MANIFEST, pathString));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getObjectMetadata",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SwiftFileStatus getObjectMetadata(Path path) throws IOException\n{\r\n    return getObjectMetadata(path, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getObjectHeaders",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Header[] getObjectHeaders(Path path, boolean newest) throws IOException, FileNotFoundException\n{\r\n    SwiftObjectPath objectPath = toObjectPath(path);\r\n    return stat(objectPath, newest);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getObjectMetadata",
  "errType" : [ "ParseException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "SwiftFileStatus getObjectMetadata(Path path, boolean newest) throws IOException, FileNotFoundException\n{\r\n    SwiftObjectPath objectPath = toObjectPath(path);\r\n    final Header[] headers = stat(objectPath, newest);\r\n    if (headers.length == 0) {\r\n        throw new FileNotFoundException(\"Not Found \" + path.toUri());\r\n    }\r\n    boolean isDir = false;\r\n    long length = 0;\r\n    long lastModified = 0;\r\n    for (Header header : headers) {\r\n        String headerName = header.getName();\r\n        if (headerName.equals(SwiftProtocolConstants.X_CONTAINER_OBJECT_COUNT) || headerName.equals(SwiftProtocolConstants.X_CONTAINER_BYTES_USED)) {\r\n            length = 0;\r\n            isDir = true;\r\n        }\r\n        if (SwiftProtocolConstants.HEADER_CONTENT_LENGTH.equals(headerName)) {\r\n            length = Long.parseLong(header.getValue());\r\n        }\r\n        if (SwiftProtocolConstants.HEADER_LAST_MODIFIED.equals(headerName)) {\r\n            final SimpleDateFormat simpleDateFormat = new SimpleDateFormat(PATTERN);\r\n            try {\r\n                lastModified = simpleDateFormat.parse(header.getValue()).getTime();\r\n            } catch (ParseException e) {\r\n                throw new SwiftException(\"Failed to parse \" + header.toString(), e);\r\n            }\r\n        }\r\n    }\r\n    if (lastModified == 0) {\r\n        lastModified = System.currentTimeMillis();\r\n    }\r\n    Path correctSwiftPath = getCorrectSwiftPath(path);\r\n    return new SwiftFileStatus(length, isDir, 1, getBlocksize(), lastModified, correctSwiftPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "stat",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Header[] stat(SwiftObjectPath objectPath, boolean newest) throws IOException\n{\r\n    Header[] headers;\r\n    if (newest) {\r\n        headers = swiftRestClient.headRequest(\"getObjectMetadata-newest\", objectPath, SwiftRestClient.NEWEST);\r\n    } else {\r\n        headers = swiftRestClient.headRequest(\"getObjectMetadata\", objectPath);\r\n    }\r\n    return headers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getObject",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HttpBodyContent getObject(Path path) throws IOException\n{\r\n    return swiftRestClient.getData(toObjectPath(path), SwiftRestClient.NEWEST);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getObject",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "HttpBodyContent getObject(Path path, long byteRangeStart, long length) throws IOException\n{\r\n    return swiftRestClient.getData(toObjectPath(path), byteRangeStart, length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "listDirectory",
  "errType" : [ "FileNotFoundException", "SwiftInvalidResponseException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "List<FileStatus> listDirectory(SwiftObjectPath path, boolean listDeep, boolean newest) throws IOException\n{\r\n    final byte[] bytes;\r\n    final ArrayList<FileStatus> files = new ArrayList<FileStatus>();\r\n    final Path correctSwiftPath = getCorrectSwiftPath(path);\r\n    try {\r\n        bytes = swiftRestClient.listDeepObjectsInDirectory(path, listDeep);\r\n    } catch (FileNotFoundException e) {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"\" + \"File/Directory not found \" + path);\r\n        }\r\n        if (SwiftUtils.isRootDir(path)) {\r\n            return Collections.emptyList();\r\n        } else {\r\n            throw e;\r\n        }\r\n    } catch (SwiftInvalidResponseException e) {\r\n        if (e.getStatusCode() == HttpStatus.SC_NO_CONTENT) {\r\n            if (SwiftUtils.isRootDir(path)) {\r\n                return Collections.emptyList();\r\n            } else {\r\n                FileStatus stat = getObjectMetadata(correctSwiftPath, newest);\r\n                if (stat.isDirectory()) {\r\n                    return Collections.emptyList();\r\n                } else {\r\n                    files.add(stat);\r\n                    return files;\r\n                }\r\n            }\r\n        } else {\r\n            throw e;\r\n        }\r\n    }\r\n    final CollectionType collectionType = JSONUtil.getJsonMapper().getTypeFactory().constructCollectionType(List.class, SwiftObjectFileStatus.class);\r\n    final List<SwiftObjectFileStatus> fileStatusList = JSONUtil.toObject(new String(bytes, Charset.forName(\"UTF-8\")), collectionType);\r\n    if (fileStatusList.isEmpty()) {\r\n        SwiftFileStatus objectMetadata = getObjectMetadata(correctSwiftPath, newest);\r\n        if (objectMetadata.isFile()) {\r\n            files.add(objectMetadata);\r\n        }\r\n        return files;\r\n    }\r\n    for (SwiftObjectFileStatus status : fileStatusList) {\r\n        if (status.getName() != null) {\r\n            files.add(new SwiftFileStatus(status.getBytes(), status.getBytes() == 0, 1, getBlocksize(), status.getLast_modified().getTime(), getCorrectSwiftPath(new Path(status.getName()))));\r\n        }\r\n    }\r\n    return files;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "listSubPaths",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FileStatus[] listSubPaths(Path path, boolean recursive, boolean newest) throws IOException\n{\r\n    final Collection<FileStatus> fileStatuses;\r\n    fileStatuses = listDirectory(toDirPath(path), recursive, newest);\r\n    return fileStatuses.toArray(new FileStatus[fileStatuses.size()]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "createDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void createDirectory(Path path) throws IOException\n{\r\n    innerCreateDirectory(toDirPath(path));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "innerCreateDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void innerCreateDirectory(SwiftObjectPath swiftObjectPath) throws IOException\n{\r\n    swiftRestClient.putRequest(swiftObjectPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "toDirPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SwiftObjectPath toDirPath(Path path) throws SwiftConfigurationException\n{\r\n    return SwiftObjectPath.fromPath(uri, path, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "toObjectPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SwiftObjectPath toObjectPath(Path path) throws SwiftConfigurationException\n{\r\n    return SwiftObjectPath.fromPath(uri, path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getObjectLocation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<URI> getObjectLocation(Path path) throws IOException\n{\r\n    final byte[] objectLocation;\r\n    objectLocation = swiftRestClient.getObjectLocation(toObjectPath(path));\r\n    if (objectLocation == null || objectLocation.length == 0) {\r\n        return new LinkedList<URI>();\r\n    }\r\n    return extractUris(new String(objectLocation, Charset.forName(\"UTF-8\")), path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "deleteObject",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean deleteObject(Path path) throws IOException\n{\r\n    SwiftObjectPath swiftObjectPath = toObjectPath(path);\r\n    if (!SwiftUtils.isRootDir(swiftObjectPath)) {\r\n        return swiftRestClient.delete(swiftObjectPath);\r\n    } else {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Not deleting root directory entry\");\r\n        }\r\n        return true;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "rmdir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean rmdir(Path path) throws IOException\n{\r\n    return deleteObject(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "objectExists",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean objectExists(Path path) throws IOException\n{\r\n    return objectExists(toObjectPath(path));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "objectExists",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean objectExists(SwiftObjectPath path) throws IOException\n{\r\n    try {\r\n        Header[] headers = swiftRestClient.headRequest(\"objectExists\", path, SwiftRestClient.NEWEST);\r\n        return headers.length != 0;\r\n    } catch (FileNotFoundException e) {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "rename",
  "errType" : [ "FileNotFoundException", "FileNotFoundException", "FileNotFoundException", "FileNotFoundException" ],
  "containingMethodsNum" : 49,
  "sourceCodeText" : "void rename(Path src, Path dst) throws FileNotFoundException, SwiftOperationFailedException, IOException\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"mv \" + src + \" \" + dst);\r\n    }\r\n    boolean renamingOnToSelf = src.equals(dst);\r\n    SwiftObjectPath srcObject = toObjectPath(src);\r\n    SwiftObjectPath destObject = toObjectPath(dst);\r\n    if (SwiftUtils.isRootDir(srcObject)) {\r\n        throw new SwiftOperationFailedException(\"cannot rename root dir\");\r\n    }\r\n    final SwiftFileStatus srcMetadata;\r\n    srcMetadata = getObjectMetadata(src);\r\n    SwiftFileStatus dstMetadata;\r\n    try {\r\n        dstMetadata = getObjectMetadata(dst);\r\n    } catch (FileNotFoundException e) {\r\n        LOG.debug(\"Destination does not exist\");\r\n        dstMetadata = null;\r\n    }\r\n    Path srcParent = src.getParent();\r\n    Path dstParent = dst.getParent();\r\n    if (dstParent != null && !dstParent.equals(srcParent)) {\r\n        SwiftFileStatus fileStatus;\r\n        try {\r\n            fileStatus = getObjectMetadata(dstParent);\r\n        } catch (FileNotFoundException e) {\r\n            LOG.debug(\"destination parent directory \" + dstParent + \" doesn't exist\");\r\n            throw e;\r\n        }\r\n        if (!fileStatus.isDir()) {\r\n            throw new ParentNotDirectoryException(dstParent.toString());\r\n        }\r\n    }\r\n    boolean destExists = dstMetadata != null;\r\n    boolean destIsDir = destExists && SwiftUtils.isDirectory(dstMetadata);\r\n    SwiftObjectPath destPath;\r\n    List<FileStatus> childStats = listDirectory(srcObject, true, true);\r\n    boolean srcIsFile = !srcMetadata.isDirectory();\r\n    if (srcIsFile) {\r\n        if (destExists) {\r\n            if (destIsDir) {\r\n                destPath = toObjectPath(new Path(dst, src.getName()));\r\n            } else {\r\n                if (!renamingOnToSelf) {\r\n                    throw new FileAlreadyExistsException(\"cannot rename a file over one that already exists\");\r\n                } else {\r\n                    LOG.debug(\"Renaming file onto self: no-op => success\");\r\n                    return;\r\n                }\r\n            }\r\n        } else {\r\n            destPath = toObjectPath(dst);\r\n        }\r\n        int childCount = childStats.size();\r\n        if (childCount == 0) {\r\n            copyThenDeleteObject(srcObject, destPath);\r\n        } else {\r\n            SwiftUtils.debug(LOG, \"Source file appears to be partitioned.\" + \" copying file and deleting children\");\r\n            copyObject(srcObject, destPath);\r\n            for (FileStatus stat : childStats) {\r\n                SwiftUtils.debug(LOG, \"Deleting partitioned file %s \", stat);\r\n                deleteObject(stat.getPath());\r\n            }\r\n            swiftRestClient.delete(srcObject);\r\n        }\r\n    } else {\r\n        if (destExists && !destIsDir) {\r\n            throw new FileAlreadyExistsException(\"the source is a directory, but not the destination\");\r\n        }\r\n        Path targetPath;\r\n        if (destExists) {\r\n            targetPath = new Path(dst, src.getName());\r\n        } else {\r\n            targetPath = dst;\r\n        }\r\n        SwiftObjectPath targetObjectPath = toObjectPath(targetPath);\r\n        if (srcObject.isEqualToOrParentOf(targetObjectPath)) {\r\n            throw new SwiftOperationFailedException(\"cannot move a directory under itself\");\r\n        }\r\n        LOG.info(\"mv  \" + srcObject + \" \" + targetPath);\r\n        logDirectory(\"Directory to copy \", srcObject, childStats);\r\n        String srcURI = src.toUri().toString();\r\n        int prefixStripCount = srcURI.length() + 1;\r\n        for (FileStatus fileStatus : childStats) {\r\n            Path copySourcePath = fileStatus.getPath();\r\n            String copySourceURI = copySourcePath.toUri().toString();\r\n            String copyDestSubPath = copySourceURI.substring(prefixStripCount);\r\n            Path copyDestPath = new Path(targetPath, copyDestSubPath);\r\n            if (LOG.isTraceEnabled()) {\r\n                LOG.trace(\"srcURI=\" + srcURI + \"; copySourceURI=\" + copySourceURI + \"; copyDestSubPath=\" + copyDestSubPath + \"; copyDestPath=\" + copyDestPath);\r\n            }\r\n            SwiftObjectPath copyDestination = toObjectPath(copyDestPath);\r\n            try {\r\n                copyThenDeleteObject(toObjectPath(copySourcePath), copyDestination);\r\n            } catch (FileNotFoundException e) {\r\n                LOG.info(\"Skipping rename of \" + copySourcePath);\r\n            }\r\n            throttle();\r\n        }\r\n        if (!SwiftUtils.isRootDir(srcObject)) {\r\n            try {\r\n                copyThenDeleteObject(srcObject, targetObjectPath);\r\n            } catch (FileNotFoundException e) {\r\n                LOG.warn(\"Source directory deleted during rename\", e);\r\n                innerCreateDirectory(destObject);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "logDirectory",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void logDirectory(String message, SwiftObjectPath objectPath, Iterable<FileStatus> statuses)\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(message + \": listing of \" + objectPath);\r\n        for (FileStatus fileStatus : statuses) {\r\n            LOG.debug(fileStatus.getPath().toString());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "copy",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void copy(Path srcKey, Path dstKey) throws IOException\n{\r\n    SwiftObjectPath srcObject = toObjectPath(srcKey);\r\n    SwiftObjectPath destObject = toObjectPath(dstKey);\r\n    swiftRestClient.copyObject(srcObject, destObject);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "copyThenDeleteObject",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void copyThenDeleteObject(SwiftObjectPath srcObject, SwiftObjectPath destObject) throws IOException\n{\r\n    copyObject(srcObject, destObject);\r\n    swiftRestClient.delete(srcObject);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "copyObject",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void copyObject(SwiftObjectPath srcObject, SwiftObjectPath destObject) throws IOException\n{\r\n    if (srcObject.isEqualToOrParentOf(destObject)) {\r\n        throw new SwiftException(\"Can't copy \" + srcObject + \" onto \" + destObject);\r\n    }\r\n    boolean copySucceeded = swiftRestClient.copyObject(srcObject, destObject);\r\n    if (!copySucceeded) {\r\n        throw new SwiftException(\"Copy of \" + srcObject + \" to \" + destObject + \"failed\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getCorrectSwiftPath",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Path getCorrectSwiftPath(Path path) throws SwiftException\n{\r\n    try {\r\n        final URI fullUri = new URI(uri.getScheme(), uri.getAuthority(), path.toUri().getPath(), null, null);\r\n        return new Path(fullUri);\r\n    } catch (URISyntaxException e) {\r\n        throw new SwiftException(\"Specified path \" + path + \" is incorrect\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getCorrectSwiftPath",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Path getCorrectSwiftPath(SwiftObjectPath path) throws SwiftException\n{\r\n    try {\r\n        final URI fullUri = new URI(uri.getScheme(), uri.getAuthority(), path.getObject(), null, null);\r\n        return new Path(fullUri);\r\n    } catch (URISyntaxException e) {\r\n        throw new SwiftException(\"Specified path \" + path + \" is incorrect\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "extractUris",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<URI> extractUris(String json, Path path) throws SwiftOperationFailedException\n{\r\n    final Matcher matcher = URI_PATTERN.matcher(json);\r\n    final List<URI> result = new ArrayList<URI>();\r\n    while (matcher.find()) {\r\n        final String s = matcher.group();\r\n        final String uri = s.substring(1, s.length() - 1);\r\n        try {\r\n            URI createdUri = URI.create(uri);\r\n            result.add(createdUri);\r\n        } catch (IllegalArgumentException e) {\r\n            throw new SwiftOperationFailedException(String.format(\"could not convert \\\"%s\\\" into a URI.\" + \" source: %s \" + \" first JSON: %s\", uri, path, json.substring(0, 256)));\r\n        }\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "throttle",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void throttle() throws InterruptedIOException\n{\r\n    int throttleDelay = getThrottleDelay();\r\n    if (throttleDelay > 0) {\r\n        try {\r\n            Thread.sleep(throttleDelay);\r\n        } catch (InterruptedException e) {\r\n            throw (InterruptedIOException) new InterruptedIOException(e.toString()).initCause(e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getOperationStatistics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<DurationStats> getOperationStatistics()\n{\r\n    return swiftRestClient.getOperationStatistics();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "delete",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "boolean delete(Path absolutePath, boolean recursive) throws IOException\n{\r\n    Path swiftPath = getCorrectSwiftPath(absolutePath);\r\n    SwiftUtils.debug(LOG, \"Deleting path '%s' recursive=%b\", absolutePath, recursive);\r\n    boolean askForNewest = true;\r\n    SwiftFileStatus fileStatus = getObjectMetadata(swiftPath, askForNewest);\r\n    FileStatus[] statuses = listSubPaths(absolutePath, true, askForNewest);\r\n    if (statuses == null) {\r\n        SwiftUtils.debug(LOG, \"Path '%s' has no status -it has 'gone away'\", absolutePath, recursive);\r\n        return false;\r\n    }\r\n    int filecount = statuses.length;\r\n    SwiftUtils.debug(LOG, \"Path '%s' %d status entries'\", absolutePath, filecount);\r\n    if (filecount == 0) {\r\n        rmdir(absolutePath);\r\n        return true;\r\n    }\r\n    if (LOG.isDebugEnabled()) {\r\n        SwiftUtils.debug(LOG, \"%s\", SwiftUtils.fileStatsToString(statuses, \"\\n\"));\r\n    }\r\n    if (filecount == 1 && swiftPath.equals(statuses[0].getPath())) {\r\n        SwiftUtils.debug(LOG, \"Deleting simple file %s\", absolutePath);\r\n        deleteObject(absolutePath);\r\n        return true;\r\n    }\r\n    if (!fileStatus.isDirectory()) {\r\n        LOG.debug(\"Multiple child entries but entry has data: assume partitioned\");\r\n    } else if (!recursive) {\r\n        throw new SwiftOperationFailedException(\"Directory \" + fileStatus + \" is not empty: \" + SwiftUtils.fileStatsToString(statuses, \"; \"));\r\n    }\r\n    for (FileStatus entryStatus : statuses) {\r\n        Path entryPath = entryStatus.getPath();\r\n        try {\r\n            boolean deleted = deleteObject(entryPath);\r\n            if (!deleted) {\r\n                SwiftUtils.debug(LOG, \"Failed to delete entry '%s'; continuing\", entryPath);\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            SwiftUtils.debug(LOG, \"Path '%s' is no longer present; continuing\", entryPath);\r\n        }\r\n        throttle();\r\n    }\r\n    SwiftUtils.debug(LOG, \"Deleting base entry %s\", absolutePath);\r\n    deleteObject(absolutePath);\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getResponseBody",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "byte[] getResponseBody(HttpResponse resp) throws IOException\n{\r\n    try (InputStream instream = resp.getEntity().getContent()) {\r\n        if (instream != null) {\r\n            long contentLength = resp.getEntity().getContentLength();\r\n            if (contentLength > Integer.MAX_VALUE) {\r\n                throw new IOException(\"Content too large to be buffered: \" + contentLength + \" bytes\");\r\n            }\r\n            ByteArrayOutputStream outstream = new ByteArrayOutputStream(contentLength > 0 ? (int) contentLength : 4 * 1024);\r\n            byte[] buffer = new byte[4096];\r\n            int len;\r\n            while ((len = instream.read(buffer)) > 0) {\r\n                outstream.write(buffer, 0, len);\r\n            }\r\n            outstream.close();\r\n            return outstream.toByteArray();\r\n        }\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getResponseBodyAsString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getResponseBodyAsString(HttpResponse resp) throws IOException\n{\r\n    byte[] rawdata = getResponseBody(resp);\r\n    if (rawdata != null) {\r\n        return EncodingUtils.getString(rawdata, \"UTF-8\");\r\n    } else {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getContentLength",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getContentLength(HttpResponse resp)\n{\r\n    Header header = resp.getFirstHeader(HEADER_CONTENT_LENGTH);\r\n    if (header == null) {\r\n        return -1;\r\n    } else {\r\n        return Long.parseLong(header.getValue());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "joinPaths",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String joinPaths(String path1, String path2)\n{\r\n    StringBuilder result = new StringBuilder(path1.length() + path2.length() + 1);\r\n    result.append(path1);\r\n    boolean insertSlash = true;\r\n    if (path1.endsWith(\"/\")) {\r\n        insertSlash = false;\r\n    } else if (path2.startsWith(\"/\")) {\r\n        insertSlash = false;\r\n    }\r\n    if (insertSlash) {\r\n        result.append(\"/\");\r\n    }\r\n    result.append(path2);\r\n    return result.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "isDirectory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isDirectory(FileStatus fileStatus)\n{\r\n    return fileStatus.isDirectory() || isFilePretendingToBeDirectory(fileStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "isFilePretendingToBeDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isFilePretendingToBeDirectory(FileStatus fileStatus)\n{\r\n    return fileStatus.getLen() == 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "isRootDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isRootDir(SwiftObjectPath swiftObject)\n{\r\n    return swiftObject.objectMatches(\"\") || swiftObject.objectMatches(\"/\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "debug",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void debug(Logger log, String text, Object... args)\n{\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(String.format(text, args));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "debugEx",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void debugEx(Logger log, String text, Exception ex)\n{\r\n    if (log.isDebugEnabled()) {\r\n        log.debug(text + ex, ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "trace",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void trace(Logger log, String text, Object... args)\n{\r\n    if (log.isTraceEnabled()) {\r\n        log.trace(String.format(text, args));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "partitionFilenameFromNumber",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String partitionFilenameFromNumber(int partNumber)\n{\r\n    return String.format(\"%06d\", partNumber);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "ls",
  "errType" : [ "FileNotFoundException", "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String ls(FileSystem fileSystem, Path path) throws IOException\n{\r\n    if (path == null) {\r\n        return \"/\";\r\n    }\r\n    FileStatus[] stats;\r\n    String pathtext = \"ls \" + path;\r\n    try {\r\n        stats = fileSystem.listStatus(path);\r\n    } catch (FileNotFoundException e) {\r\n        return pathtext + \" -file not found\";\r\n    } catch (IOException e) {\r\n        return pathtext + \" -failed: \" + e;\r\n    }\r\n    return pathtext + fileStatsToString(stats, \"\\n\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "fileStatsToString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String fileStatsToString(FileStatus[] stats, String separator)\n{\r\n    StringBuilder buf = new StringBuilder(stats.length * 128);\r\n    for (int i = 0; i < stats.length; i++) {\r\n        buf.append(String.format(\"[%02d] %s\", i, stats[i])).append(separator);\r\n    }\r\n    return buf.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "validateReadArgs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void validateReadArgs(byte[] buffer, int off, int len)\n{\r\n    if (buffer == null) {\r\n        throw new NullPointerException(\"Null byte array in\" + READ);\r\n    }\r\n    if (off < 0) {\r\n        throw new IndexOutOfBoundsException(\"Negative buffer offset \" + off + \" in \" + READ);\r\n    }\r\n    if (len < 0) {\r\n        throw new IndexOutOfBoundsException(\"Negative read length \" + len + \" in \" + READ);\r\n    }\r\n    if (off > buffer.length) {\r\n        throw new IndexOutOfBoundsException(\"Buffer offset of \" + off + \"beyond buffer size of \" + buffer.length + \" in \" + READ);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getServiceURI",
  "errType" : [ "URISyntaxException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URI getServiceURI(Configuration conf) throws SwiftConfigurationException\n{\r\n    String instance = conf.get(TEST_FS_SWIFT);\r\n    if (instance == null) {\r\n        throw new SwiftConfigurationException(\"Missing configuration entry \" + TEST_FS_SWIFT);\r\n    }\r\n    try {\r\n        return new URI(instance);\r\n    } catch (URISyntaxException e) {\r\n        throw new SwiftConfigurationException(\"Bad URI: \" + instance);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "hasServiceURI",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean hasServiceURI(Configuration conf)\n{\r\n    String instance = conf.get(TEST_FS_SWIFT);\r\n    return instance != null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "assertPropertyEquals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void assertPropertyEquals(Properties props, String key, String expected)\n{\r\n    String val = props.getProperty(key);\r\n    if (expected == null) {\r\n        assertNull(\"Non null property \" + key + \" = \" + val, val);\r\n    } else {\r\n        assertEquals(\"property \" + key + \" = \" + val, expected, val);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "writeAndRead",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void writeAndRead(FileSystem fs, Path path, byte[] src, int len, int blocksize, boolean overwrite, boolean delete) throws IOException\n{\r\n    fs.mkdirs(path.getParent());\r\n    writeDataset(fs, path, src, len, blocksize, overwrite);\r\n    byte[] dest = readDataset(fs, path, len);\r\n    compareByteArrays(src, dest, len);\r\n    if (delete) {\r\n        boolean deleted = fs.delete(path, false);\r\n        assertTrue(\"Deleted\", deleted);\r\n        assertPathDoesNotExist(fs, \"Cleanup failed\", path);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "writeDataset",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void writeDataset(FileSystem fs, Path path, byte[] src, int len, int blocksize, boolean overwrite) throws IOException\n{\r\n    assertTrue(\"Not enough data in source array to write \" + len + \" bytes\", src.length >= len);\r\n    FSDataOutputStream out = fs.create(path, overwrite, fs.getConf().getInt(IO_FILE_BUFFER_SIZE, 4096), (short) 1, blocksize);\r\n    out.write(src, 0, len);\r\n    out.close();\r\n    assertFileHasLength(fs, path, len);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "readDataset",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "byte[] readDataset(FileSystem fs, Path path, int len) throws IOException\n{\r\n    FSDataInputStream in = fs.open(path);\r\n    byte[] dest = new byte[len];\r\n    try {\r\n        in.readFully(0, dest);\r\n    } finally {\r\n        in.close();\r\n    }\r\n    return dest;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "compareByteArrays",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void compareByteArrays(byte[] src, byte[] dest, int len)\n{\r\n    assertEquals(\"Number of bytes read != number written\", len, dest.length);\r\n    int errors = 0;\r\n    int first_error_byte = -1;\r\n    for (int i = 0; i < len; i++) {\r\n        if (src[i] != dest[i]) {\r\n            if (errors == 0) {\r\n                first_error_byte = i;\r\n            }\r\n            errors++;\r\n        }\r\n    }\r\n    if (errors > 0) {\r\n        String message = String.format(\" %d errors in file of length %d\", errors, len);\r\n        LOG.warn(message);\r\n        final int overlap = 10;\r\n        for (int i = Math.max(0, first_error_byte - overlap); i < Math.min(first_error_byte + overlap, len); i++) {\r\n            byte actual = dest[i];\r\n            byte expected = src[i];\r\n            String letter = toChar(actual);\r\n            String line = String.format(\"[%04d] %2x %s%n\", i, actual, letter);\r\n            if (expected != actual) {\r\n                line = String.format(\"[%04d] %2x %s -expected %2x %s%n\", i, actual, letter, expected, toChar(expected));\r\n            }\r\n            LOG.warn(line);\r\n        }\r\n        fail(message);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "toChar",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toChar(byte b)\n{\r\n    if (b >= 0x20) {\r\n        return Character.toString((char) b);\r\n    } else {\r\n        return String.format(\"%02x\", b);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "toChar",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toChar(byte[] buffer)\n{\r\n    StringBuilder builder = new StringBuilder(buffer.length);\r\n    for (byte b : buffer) {\r\n        builder.append(toChar(b));\r\n    }\r\n    return builder.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "toAsciiByteArray",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "byte[] toAsciiByteArray(String s)\n{\r\n    char[] chars = s.toCharArray();\r\n    int len = chars.length;\r\n    byte[] buffer = new byte[len];\r\n    for (int i = 0; i < len; i++) {\r\n        buffer[i] = (byte) (chars[i] & 0xff);\r\n    }\r\n    return buffer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "cleanupInTeardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanupInTeardown(FileSystem fileSystem, String cleanupPath)\n{\r\n    cleanup(\"TEARDOWN\", fileSystem, cleanupPath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "cleanup",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void cleanup(String action, FileSystem fileSystem, String cleanupPath)\n{\r\n    noteAction(action);\r\n    try {\r\n        if (fileSystem != null) {\r\n            fileSystem.delete(fileSystem.makeQualified(new Path(cleanupPath)), true);\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.error(\"Error deleting in \" + action + \" - \" + cleanupPath + \": \" + e, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "noteAction",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void noteAction(String action)\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"==============  \" + action + \" =============\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "downgrade",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void downgrade(String message, Throwable failure)\n{\r\n    LOG.warn(\"Downgrading test \" + message, failure);\r\n    AssumptionViolatedException ave = new AssumptionViolatedException(failure, null);\r\n    throw ave;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "unsupported",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void unsupported(String message)\n{\r\n    throw new AssumptionViolatedException(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "skip",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void skip(String message)\n{\r\n    throw new AssumptionViolatedException(message);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "assertFileHasLength",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertFileHasLength(FileSystem fs, Path path, int expected) throws IOException\n{\r\n    FileStatus status = fs.getFileStatus(path);\r\n    assertEquals(\"Wrong file length of file \" + path + \" status: \" + status, expected, status.getLen());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "assertIsDirectory",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertIsDirectory(FileSystem fs, Path path) throws IOException\n{\r\n    FileStatus fileStatus = fs.getFileStatus(path);\r\n    assertIsDirectory(fileStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "assertIsDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertIsDirectory(FileStatus fileStatus)\n{\r\n    assertTrue(\"Should be a dir -but isn't: \" + fileStatus, fileStatus.isDirectory());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "writeTextFile",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "byte[] writeTextFile(FileSystem fs, Path path, String text, boolean overwrite) throws IOException\n{\r\n    FSDataOutputStream stream = fs.create(path, overwrite);\r\n    byte[] bytes = new byte[0];\r\n    if (text != null) {\r\n        bytes = toAsciiByteArray(text);\r\n        stream.write(bytes);\r\n    }\r\n    stream.close();\r\n    return bytes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "touch",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void touch(FileSystem fs, Path path) throws IOException\n{\r\n    fs.delete(path, true);\r\n    writeTextFile(fs, path, null, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "assertDeleted",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void assertDeleted(FileSystem fs, Path file, boolean recursive) throws IOException\n{\r\n    assertPathExists(fs, \"about to be deleted file\", file);\r\n    boolean deleted = fs.delete(file, recursive);\r\n    String dir = ls(fs, file.getParent());\r\n    assertTrue(\"Delete failed on \" + file + \": \" + dir, deleted);\r\n    assertPathDoesNotExist(fs, \"Deleted file\", file);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "readBytesToString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String readBytesToString(FileSystem fs, Path path, int length) throws IOException\n{\r\n    FSDataInputStream in = fs.open(path);\r\n    try {\r\n        byte[] buf = new byte[length];\r\n        in.readFully(0, buf);\r\n        return toChar(buf);\r\n    } finally {\r\n        in.close();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getDefaultWorkingDirectory",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getDefaultWorkingDirectory()\n{\r\n    return \"/user/\" + System.getProperty(\"user.name\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "ls",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String ls(FileSystem fileSystem, Path path) throws IOException\n{\r\n    return SwiftUtils.ls(fileSystem, path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "dumpStats",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String dumpStats(String pathname, FileStatus[] stats)\n{\r\n    return pathname + SwiftUtils.fileStatsToString(stats, \"\\n\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "assertIsFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void assertIsFile(FileSystem fileSystem, Path filename) throws IOException\n{\r\n    assertPathExists(fileSystem, \"Expected file\", filename);\r\n    FileStatus status = fileSystem.getFileStatus(filename);\r\n    String fileInfo = filename + \"  \" + status;\r\n    assertFalse(\"File claims to be a directory \" + fileInfo, status.isDirectory());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "dataset",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "byte[] dataset(int len, int base, int modulo)\n{\r\n    byte[] dataset = new byte[len];\r\n    for (int i = 0; i < len; i++) {\r\n        dataset[i] = (byte) (base + (i % modulo));\r\n    }\r\n    return dataset;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "assertPathExists",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertPathExists(FileSystem fileSystem, String message, Path path) throws IOException\n{\r\n    try {\r\n        fileSystem.getFileStatus(path);\r\n    } catch (FileNotFoundException e) {\r\n        throw (IOException) new FileNotFoundException(message + \": not found \" + path + \" in \" + path.getParent() + \": \" + e + \" -- \" + ls(fileSystem, path.getParent())).initCause(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "assertPathDoesNotExist",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertPathDoesNotExist(FileSystem fileSystem, String message, Path path) throws IOException\n{\r\n    try {\r\n        FileStatus status = fileSystem.getFileStatus(path);\r\n        fail(message + \": unexpectedly found \" + path + \" as  \" + status);\r\n    } catch (FileNotFoundException expected) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "assertListStatusFinds",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void assertListStatusFinds(FileSystem fs, Path dir, Path subdir) throws IOException\n{\r\n    FileStatus[] stats = fs.listStatus(dir);\r\n    boolean found = false;\r\n    StringBuilder builder = new StringBuilder();\r\n    for (FileStatus stat : stats) {\r\n        builder.append(stat.toString()).append('\\n');\r\n        if (stat.getPath().equals(subdir)) {\r\n            found = true;\r\n        }\r\n    }\r\n    assertTrue(\"Path \" + subdir + \" not found in directory \" + dir + \":\" + builder, found);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getMethod",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getMethod()\n{\r\n    return \"COPY\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getTenantName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTenantName()\n{\r\n    return tenantName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setTenantName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTenantName(String tenantName)\n{\r\n    this.tenantName = tenantName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"AuthenticationRequest{\" + \"tenantName='\" + tenantName + '\\'' + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getExpires",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getExpires()\n{\r\n    return expires;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setExpires",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setExpires(String expires)\n{\r\n    this.expires = expires;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getTenant",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Tenant getTenant()\n{\r\n    return tenant;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setTenant",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTenant(Tenant tenant)\n{\r\n    this.tenant = tenant;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"AccessToken{\" + \"id='\" + id + '\\'' + \", tenant=\" + tenant + \", expires='\" + expires + '\\'' + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "toJSON",
  "errType" : [ "JsonGenerationException|JsonMappingException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String toJSON(Object object) throws IOException\n{\r\n    Writer json = new StringWriter();\r\n    try {\r\n        jsonMapper.writeValue(json, object);\r\n        return json.toString();\r\n    } catch (JsonGenerationException | JsonMappingException e) {\r\n        throw new SwiftJsonMarshallingException(e.toString(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "toObject",
  "errType" : [ "JsonGenerationException", "JsonMappingException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "T toObject(String value, Class<T> klazz) throws IOException\n{\r\n    try {\r\n        return jsonMapper.readValue(value, klazz);\r\n    } catch (JsonGenerationException e) {\r\n        throw new SwiftJsonMarshallingException(e.toString() + \" source: \" + value, e);\r\n    } catch (JsonMappingException e) {\r\n        throw new SwiftJsonMarshallingException(e.toString() + \" source: \" + value, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "toObject",
  "errType" : [ "JsonGenerationException|JsonMappingException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "T toObject(String value, final TypeReference<T> typeReference) throws IOException\n{\r\n    try {\r\n        return (T) jsonMapper.readValue(value, typeReference);\r\n    } catch (JsonGenerationException | JsonMappingException e) {\r\n        throw new SwiftJsonMarshallingException(\"Error generating response\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "toObject",
  "errType" : [ "JsonGenerationException|JsonMappingException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "T toObject(String value, final CollectionType collectionType) throws IOException\n{\r\n    try {\r\n        return (T) jsonMapper.readValue(value, collectionType);\r\n    } catch (JsonGenerationException | JsonMappingException e) {\r\n        throw new SwiftJsonMarshallingException(e.toString() + \" source: \" + value, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getJsonMapper",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ObjectMapper getJsonMapper()\n{\r\n    return jsonMapper;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getContentLength",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getContentLength()\n{\r\n    return contentLength;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "getInputStream",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "HttpInputStreamWithRelease getInputStream()\n{\r\n    return inputStream;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "wrapException",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "IOException wrapException(final String dest, final String operation, final IOException exception)\n{\r\n    String action = operation + \" \" + dest;\r\n    String xref = null;\r\n    if (exception instanceof ConnectException) {\r\n        xref = \"ConnectionRefused\";\r\n    } else if (exception instanceof UnknownHostException) {\r\n        xref = \"UnknownHost\";\r\n    } else if (exception instanceof SocketTimeoutException) {\r\n        xref = \"SocketTimeout\";\r\n    } else if (exception instanceof NoRouteToHostException) {\r\n        xref = \"NoRouteToHost\";\r\n    }\r\n    String msg = action + \" failed on exception: \" + exception;\r\n    if (xref != null) {\r\n        msg = msg + \";\" + see(xref);\r\n    }\r\n    return wrapWithMessage(exception, msg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "see",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String see(final String entry)\n{\r\n    return FOR_MORE_DETAILS_SEE + HADOOP_WIKI + entry;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "wrapWithMessage",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "T wrapWithMessage(T exception, String msg)\n{\r\n    Class<? extends Throwable> clazz = exception.getClass();\r\n    try {\r\n        Constructor<? extends Throwable> ctor = clazz.getConstructor(String.class);\r\n        Throwable t = ctor.newInstance(msg);\r\n        return (T) (t.initCause(exception));\r\n    } catch (Throwable e) {\r\n        return exception;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SwiftNativeFileSystemStore getStore()\n{\r\n    return store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getScheme",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getScheme()\n{\r\n    return SWIFT;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "initialize",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void initialize(URI fsuri, Configuration conf) throws IOException\n{\r\n    super.initialize(fsuri, conf);\r\n    setConf(conf);\r\n    if (store == null) {\r\n        store = new SwiftNativeFileSystemStore();\r\n    }\r\n    this.uri = fsuri;\r\n    String username;\r\n    try {\r\n        username = UserGroupInformation.getCurrentUser().getShortUserName();\r\n    } catch (IOException ex) {\r\n        LOG.warn(\"Unable to get user name. Fall back to system property \" + \"user.name\", ex);\r\n        username = System.getProperty(\"user.name\");\r\n    }\r\n    this.workingDir = new Path(\"/user\", username).makeQualified(uri, new Path(username));\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Initializing SwiftNativeFileSystem against URI \" + uri + \" and working dir \" + workingDir);\r\n    }\r\n    store.initialize(uri, conf);\r\n    LOG.debug(\"SwiftFileSystem initialized\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getUri",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "URI getUri()\n{\r\n    return uri;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"Swift FileSystem \" + store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getWorkingDirectory",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getWorkingDirectory()\n{\r\n    return workingDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "setWorkingDirectory",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setWorkingDirectory(Path dir)\n{\r\n    workingDir = makeAbsolute(dir);\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"SwiftFileSystem.setWorkingDirectory to \" + dir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getFileStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FileStatus getFileStatus(Path path) throws IOException\n{\r\n    Path absolutePath = makeAbsolute(path);\r\n    return store.getObjectMetadata(absolutePath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getDefaultBlockSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getDefaultBlockSize()\n{\r\n    return store.getBlocksize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getDefaultBlockSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getDefaultBlockSize(Path f)\n{\r\n    return store.getBlocksize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getBlockSize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "long getBlockSize(Path path) throws IOException\n{\r\n    return store.getBlocksize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "isFile",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isFile(Path f) throws IOException\n{\r\n    try {\r\n        FileStatus fileStatus = getFileStatus(f);\r\n        return !SwiftUtils.isDirectory(fileStatus);\r\n    } catch (FileNotFoundException e) {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "isDirectory",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isDirectory(Path f) throws IOException\n{\r\n    try {\r\n        FileStatus fileStatus = getFileStatus(f);\r\n        return SwiftUtils.isDirectory(fileStatus);\r\n    } catch (FileNotFoundException e) {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getCanonicalServiceName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getCanonicalServiceName()\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getFileBlockLocations",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "BlockLocation[] getFileBlockLocations(FileStatus file, long start, long len) throws IOException\n{\r\n    if (file == null) {\r\n        return null;\r\n    }\r\n    if (start < 0 || len < 0) {\r\n        throw new IllegalArgumentException(\"Negative start or len parameter\" + \" to getFileBlockLocations\");\r\n    }\r\n    if (file.getLen() <= start) {\r\n        return new BlockLocation[0];\r\n    }\r\n    final FileStatus[] listOfFileBlocks = store.listSubPaths(file.getPath(), false, true);\r\n    List<URI> locations = new ArrayList<URI>();\r\n    if (listOfFileBlocks.length > 1) {\r\n        for (FileStatus fileStatus : listOfFileBlocks) {\r\n            if (SwiftObjectPath.fromPath(uri, fileStatus.getPath()).equals(SwiftObjectPath.fromPath(uri, file.getPath()))) {\r\n                continue;\r\n            }\r\n            locations.addAll(store.getObjectLocation(fileStatus.getPath()));\r\n        }\r\n    } else {\r\n        locations = store.getObjectLocation(file.getPath());\r\n    }\r\n    if (locations.isEmpty()) {\r\n        LOG.debug(\"No locations returned for \" + file.getPath());\r\n        String[] name = { SwiftProtocolConstants.BLOCK_LOCATION };\r\n        String[] host = { \"localhost\" };\r\n        String[] topology = { SwiftProtocolConstants.TOPOLOGY_PATH };\r\n        return new BlockLocation[] { new BlockLocation(name, host, topology, 0, file.getLen()) };\r\n    }\r\n    final String[] names = new String[locations.size()];\r\n    final String[] hosts = new String[locations.size()];\r\n    int i = 0;\r\n    for (URI location : locations) {\r\n        hosts[i] = location.getHost();\r\n        names[i] = location.getAuthority();\r\n        i++;\r\n    }\r\n    return new BlockLocation[] { new BlockLocation(names, hosts, 0, file.getLen()) };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "mkdirs",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "boolean mkdirs(Path path, FsPermission permission) throws IOException\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"SwiftFileSystem.mkdirs: \" + path);\r\n    }\r\n    Path directory = makeAbsolute(path);\r\n    List<Path> paths = new ArrayList<Path>();\r\n    while (shouldCreate(directory)) {\r\n        paths.add(0, directory);\r\n        directory = directory.getParent();\r\n    }\r\n    for (Path p : paths) {\r\n        if (isNotRoot(p)) {\r\n            forceMkdir(p);\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "isNotRoot",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isNotRoot(Path absolutePath)\n{\r\n    return !isRoot(absolutePath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "isRoot",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isRoot(Path absolutePath)\n{\r\n    return absolutePath.getParent() == null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "mkdir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean mkdir(Path path) throws IOException\n{\r\n    Path directory = makeAbsolute(path);\r\n    boolean shouldCreate = shouldCreate(directory);\r\n    if (shouldCreate) {\r\n        forceMkdir(directory);\r\n    }\r\n    return shouldCreate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "shouldCreate",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean shouldCreate(Path directory) throws IOException\n{\r\n    FileStatus fileStatus;\r\n    boolean shouldCreate;\r\n    if (isRoot(directory)) {\r\n        return false;\r\n    }\r\n    try {\r\n        fileStatus = getFileStatus(directory);\r\n        if (!SwiftUtils.isDirectory(fileStatus)) {\r\n            throw new ParentNotDirectoryException(String.format(\"%s: can't mkdir since it exists and is not a directory: %s\", directory, fileStatus));\r\n        } else {\r\n            if (LOG.isDebugEnabled()) {\r\n                LOG.debug(\"skipping mkdir(\" + directory + \") as it exists already\");\r\n            }\r\n            shouldCreate = false;\r\n        }\r\n    } catch (FileNotFoundException e) {\r\n        shouldCreate = true;\r\n    }\r\n    return shouldCreate;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "forceMkdir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void forceMkdir(Path absolutePath) throws IOException\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Making dir '\" + absolutePath + \"' in Swift\");\r\n    }\r\n    store.createDirectory(absolutePath);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "listStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "FileStatus[] listStatus(Path path) throws IOException\n{\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"SwiftFileSystem.listStatus for: \" + path);\r\n    }\r\n    return store.listSubPaths(makeAbsolute(path), false, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "append",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FSDataOutputStream append(Path f, int bufferSize, Progressable progress) throws IOException\n{\r\n    LOG.debug(\"SwiftFileSystem.append\");\r\n    throw new SwiftUnsupportedFeatureException(\"Not supported: append()\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "create",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "FSDataOutputStream create(Path file, FsPermission permission, boolean overwrite, int bufferSize, short replication, long blockSize, Progressable progress) throws IOException\n{\r\n    LOG.debug(\"SwiftFileSystem.create\");\r\n    FileStatus fileStatus = null;\r\n    Path absolutePath = makeAbsolute(file);\r\n    try {\r\n        fileStatus = getFileStatus(absolutePath);\r\n    } catch (FileNotFoundException e) {\r\n    }\r\n    if (fileStatus != null) {\r\n        if (fileStatus.isDirectory()) {\r\n            if (LOG.isDebugEnabled()) {\r\n                LOG.debug(\"Overwriting either an empty file or a directory\");\r\n            }\r\n        }\r\n        if (overwrite) {\r\n            store.delete(absolutePath, true);\r\n        } else {\r\n            throw new FileAlreadyExistsException(\"Path exists: \" + file);\r\n        }\r\n    } else {\r\n        Path parent = file.getParent();\r\n        if (parent != null) {\r\n            if (!mkdirs(parent)) {\r\n                throw new SwiftOperationFailedException(\"Mkdirs failed to create \" + parent);\r\n            }\r\n        }\r\n    }\r\n    SwiftNativeOutputStream out = createSwiftOutputStream(file);\r\n    return new FSDataOutputStream(out, statistics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "createSwiftOutputStream",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SwiftNativeOutputStream createSwiftOutputStream(Path path) throws IOException\n{\r\n    long partSizeKB = getStore().getPartsizeKB();\r\n    return new SwiftNativeOutputStream(getConf(), getStore(), path.toUri().toString(), partSizeKB);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "open",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FSDataInputStream open(Path path, int bufferSize) throws IOException\n{\r\n    int bufferSizeKB = getStore().getBufferSizeKB();\r\n    long readBlockSize = bufferSizeKB * 1024L;\r\n    return open(path, bufferSize, readBlockSize);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "open",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FSDataInputStream open(Path path, int bufferSize, long readBlockSize) throws IOException\n{\r\n    if (readBlockSize <= 0) {\r\n        throw new SwiftConfigurationException(\"Bad remote buffer size\");\r\n    }\r\n    Path absolutePath = makeAbsolute(path);\r\n    return new FSDataInputStream(new StrictBufferedFSInputStream(new SwiftNativeInputStream(store, statistics, absolutePath, readBlockSize), bufferSize));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "rename",
  "errType" : [ "SwiftOperationFailedException|FileAlreadyExistsException|FileNotFoundException|ParentNotDirectoryException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean rename(Path src, Path dst) throws IOException\n{\r\n    try {\r\n        store.rename(makeAbsolute(src), makeAbsolute(dst));\r\n        return true;\r\n    } catch (SwiftOperationFailedException | FileAlreadyExistsException | FileNotFoundException | ParentNotDirectoryException e) {\r\n        LOG.debug(\"rename({}, {}) failed\", src, dst, e);\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "delete",
  "errType" : [ "FileNotFoundException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean delete(Path path, boolean recursive) throws IOException\n{\r\n    try {\r\n        return store.delete(path, recursive);\r\n    } catch (FileNotFoundException e) {\r\n        return false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "delete",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean delete(Path f) throws IOException\n{\r\n    return delete(f, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "makeAbsolute",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path makeAbsolute(Path path)\n{\r\n    if (path.isAbsolute()) {\r\n        return path;\r\n    }\r\n    return new Path(workingDir, path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getOperationStatistics",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<DurationStats> getOperationStatistics()\n{\r\n    return store.getOperationStatistics();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "listRawFileStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FileStatus[] listRawFileStatus(Path path, boolean newest) throws IOException\n{\r\n    return store.listSubPaths(makeAbsolute(path), true, newest);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getPartitionsWritten",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getPartitionsWritten(FSDataOutputStream outputStream)\n{\r\n    SwiftNativeOutputStream snos = getSwiftNativeOutputStream(outputStream);\r\n    return snos.getPartitionsWritten();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getSwiftNativeOutputStream",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SwiftNativeOutputStream getSwiftNativeOutputStream(FSDataOutputStream outputStream)\n{\r\n    OutputStream wrappedStream = outputStream.getWrappedStream();\r\n    return (SwiftNativeOutputStream) wrappedStream;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getPartitionSize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getPartitionSize(FSDataOutputStream outputStream)\n{\r\n    SwiftNativeOutputStream snos = getSwiftNativeOutputStream(outputStream);\r\n    return snos.getFilePartSize();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getBytesWritten",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getBytesWritten(FSDataOutputStream outputStream)\n{\r\n    SwiftNativeOutputStream snos = getSwiftNativeOutputStream(outputStream);\r\n    return snos.getBytesWritten();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getBytesUploaded",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "long getBytesUploaded(FSDataOutputStream outputStream)\n{\r\n    SwiftNativeOutputStream snos = getSwiftNativeOutputStream(outputStream);\r\n    return snos.getBytesUploaded();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "createNonRecursive",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "FSDataOutputStream createNonRecursive(Path path, FsPermission permission, EnumSet<CreateFlag> flags, int bufferSize, short replication, long blockSize, Progressable progress) throws IOException\n{\r\n    Path parent = path.getParent();\r\n    if (parent != null) {\r\n        if (!getFileStatus(parent).isDirectory()) {\r\n            throw new FileAlreadyExistsException(\"Not a directory: \" + parent);\r\n        }\r\n    }\r\n    return create(path, permission, flags.contains(CreateFlag.OVERWRITE), bufferSize, replication, blockSize, progress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getAuth",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AuthenticationRequest getAuth()\n{\r\n    return auth;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setAuth",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAuth(AuthenticationRequest auth)\n{\r\n    this.auth = auth;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getBytes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getBytes()\n{\r\n    return bytes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "setBytes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setBytes(long bytes)\n{\r\n    this.bytes = bytes;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getContent_type",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContent_type()\n{\r\n    return content_type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "setContent_type",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setContent_type(String content_type)\n{\r\n    this.content_type = content_type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getHash",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getHash()\n{\r\n    return hash;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "setHash",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHash(String hash)\n{\r\n    this.hash = hash;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getLast_modified",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Date getLast_modified()\n{\r\n    return last_modified;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "setLast_modified",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLast_modified(Date last_modified)\n{\r\n    this.last_modified = last_modified;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getName()\n{\r\n    return pathToRootPath(name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getSubdir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getSubdir()\n{\r\n    return pathToRootPath(subdir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "setSubdir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSubdir(String subdir)\n{\r\n    this.subdir = subdir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "pathToRootPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String pathToRootPath(String path)\n{\r\n    if (path == null) {\r\n        return null;\r\n    }\r\n    if (path.startsWith(\"/\")) {\r\n        return path;\r\n    }\r\n    return \"/\".concat(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getContainer()\n{\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "getObject",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getObject()\n{\r\n    return object;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean equals(Object o)\n{\r\n    if (this == o)\r\n        return true;\r\n    if (!(o instanceof SwiftObjectPath))\r\n        return false;\r\n    final SwiftObjectPath that = (SwiftObjectPath) o;\r\n    return this.toUriPath().equals(that.toUriPath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int hashCode()\n{\r\n    int result = container.hashCode();\r\n    result = 31 * result + object.hashCode();\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "buildUriPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String buildUriPath()\n{\r\n    return SwiftUtils.joinPaths(container, object);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "toUriPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toUriPath()\n{\r\n    return uriPath;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return toUriPath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "objectMatches",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean objectMatches(String path)\n{\r\n    return object.equals(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "isEqualToOrParentOf",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean isEqualToOrParentOf(SwiftObjectPath possibleChild)\n{\r\n    String origPath = toUriPath();\r\n    String path = origPath;\r\n    if (!path.endsWith(\"/\")) {\r\n        path = path + \"/\";\r\n    }\r\n    String childPath = possibleChild.toUriPath();\r\n    return childPath.equals(origPath) || childPath.startsWith(path);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "fromPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SwiftObjectPath fromPath(URI uri, Path path) throws SwiftConfigurationException\n{\r\n    return fromPath(uri, path, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\util",
  "methodName" : "fromPath",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "SwiftObjectPath fromPath(URI uri, Path path, boolean addTrailingSlash) throws SwiftConfigurationException\n{\r\n    String url = path.toUri().getPath().replaceAll(PATH_PART_PATTERN.pattern(), \"\");\r\n    if (addTrailingSlash && !url.endsWith(\"/\")) {\r\n        url += \"/\";\r\n    }\r\n    String container = uri.getHost();\r\n    if (container == null) {\r\n        container = \"\";\r\n    } else if (container.contains(\".\")) {\r\n        container = RestClientBindings.extractContainerName(container);\r\n    }\r\n    return new SwiftObjectPath(container, url);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getEndpoints",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Endpoint> getEndpoints()\n{\r\n    return endpoints;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setEndpoints",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setEndpoints(List<Endpoint> endpoints)\n{\r\n    this.endpoints = endpoints;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getEndpoints_links",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<Object> getEndpoints_links()\n{\r\n    return endpoints_links;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setEndpoints_links",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setEndpoints_links(List<Object> endpoints_links)\n{\r\n    this.endpoints_links = endpoints_links;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getType()\n{\r\n    return type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setType",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setType(String type)\n{\r\n    this.type = type;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getDescription",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDescription()\n{\r\n    return description;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setDescription",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDescription(String description)\n{\r\n    this.description = description;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getServiceId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getServiceId()\n{\r\n    return serviceId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setServiceId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setServiceId(String serviceId)\n{\r\n    this.serviceId = serviceId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "getTenantId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTenantId()\n{\r\n    return tenantId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth",
  "methodName" : "setTenantId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setTenantId(String tenantId)\n{\r\n    this.tenantId = tenantId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "newBackupFile",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "File newBackupFile() throws IOException\n{\r\n    File dir = new File(conf.get(\"hadoop.tmp.dir\"));\r\n    if (!dir.mkdirs() && !dir.exists()) {\r\n        throw new SwiftException(\"Cannot create Swift buffer directory: \" + dir);\r\n    }\r\n    File result = File.createTempFile(\"output-\", \".tmp\", dir);\r\n    result.deleteOnExit();\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void flush() throws IOException\n{\r\n    backupStream.flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "verifyOpen",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void verifyOpen() throws SwiftException\n{\r\n    if (closed) {\r\n        throw new SwiftConnectionClosedException();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    if (closed) {\r\n        return;\r\n    }\r\n    try {\r\n        closed = true;\r\n        backupStream.close();\r\n        backupStream = null;\r\n        Path keypath = new Path(key);\r\n        if (partUpload) {\r\n            partUpload(true);\r\n            nativeStore.createManifestForPartUpload(keypath);\r\n        } else {\r\n            uploadOnClose(keypath);\r\n        }\r\n    } finally {\r\n        delete(backupFile);\r\n        backupFile = null;\r\n    }\r\n    assert backupStream == null : \"backup stream has been reopened\";\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "uploadOnClose",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void uploadOnClose(Path keypath) throws IOException\n{\r\n    boolean uploadSuccess = false;\r\n    int attempt = 0;\r\n    while (!uploadSuccess) {\r\n        try {\r\n            ++attempt;\r\n            bytesUploaded += uploadFileAttempt(keypath, attempt);\r\n            uploadSuccess = true;\r\n        } catch (IOException e) {\r\n            LOG.info(\"Upload failed \" + e, e);\r\n            if (attempt > ATTEMPT_LIMIT) {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "uploadFileAttempt",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long uploadFileAttempt(Path keypath, int attempt) throws IOException\n{\r\n    long uploadLen = backupFile.length();\r\n    SwiftUtils.debug(LOG, \"Closing write of file %s;\" + \" localfile=%s of length %d - attempt %d\", key, backupFile, uploadLen, attempt);\r\n    nativeStore.uploadFile(keypath, new FileInputStream(backupFile), uploadLen);\r\n    return uploadLen;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "finalize",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void finalize() throws Throwable\n{\r\n    if (!closed) {\r\n        LOG.warn(\"stream not closed\");\r\n    }\r\n    if (backupFile != null) {\r\n        LOG.warn(\"Leaking backing file \" + backupFile);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "delete",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void delete(File file)\n{\r\n    if (file != null) {\r\n        SwiftUtils.debug(LOG, \"deleting %s\", file);\r\n        if (!file.delete()) {\r\n            LOG.warn(\"Could not delete \" + file);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void write(int b) throws IOException\n{\r\n    oneByte[0] = (byte) b;\r\n    write(oneByte, 0, 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "write",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void write(byte[] buffer, int offset, int len) throws IOException\n{\r\n    if (offset < 0 || len < 0 || (offset + len) > buffer.length) {\r\n        throw new IndexOutOfBoundsException(\"Invalid offset/length for write\");\r\n    }\r\n    verifyOpen();\r\n    SwiftUtils.debug(LOG, \" write(offset=%d, len=%d)\", offset, len);\r\n    while (blockOffset + len >= filePartSize) {\r\n        int subWriteLen = (int) (filePartSize - blockOffset);\r\n        if (subWriteLen < 0 || subWriteLen > len) {\r\n            throw new SwiftInternalStateException(\"Invalid subwrite len: \" + subWriteLen + \" -buffer len: \" + len);\r\n        }\r\n        writeToBackupStream(buffer, offset, subWriteLen);\r\n        offset += subWriteLen;\r\n        len -= subWriteLen;\r\n        partUpload(false);\r\n    }\r\n    writeToBackupStream(buffer, offset, len);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "writeToBackupStream",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeToBackupStream(byte[] buffer, int offset, int len) throws IOException\n{\r\n    assert len >= 0 : \"remainder to write is negative\";\r\n    SwiftUtils.debug(LOG, \" writeToBackupStream(offset=%d, len=%d)\", offset, len);\r\n    if (len == 0) {\r\n        return;\r\n    }\r\n    backupStream.write(buffer, offset, len);\r\n    blockOffset += len;\r\n    bytesWritten += len;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "partUpload",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void partUpload(boolean closingUpload) throws IOException\n{\r\n    if (backupStream != null) {\r\n        backupStream.close();\r\n    }\r\n    if (closingUpload && partUpload && backupFile.length() == 0) {\r\n        SwiftUtils.debug(LOG, \"skipping upload of 0 byte final partition\");\r\n        delete(backupFile);\r\n    } else {\r\n        partUpload = true;\r\n        boolean uploadSuccess = false;\r\n        int attempt = 0;\r\n        while (!uploadSuccess) {\r\n            try {\r\n                ++attempt;\r\n                bytesUploaded += uploadFilePartAttempt(attempt);\r\n                uploadSuccess = true;\r\n            } catch (IOException e) {\r\n                LOG.info(\"Upload failed \" + e, e);\r\n                if (attempt > ATTEMPT_LIMIT) {\r\n                    throw e;\r\n                }\r\n            }\r\n        }\r\n        delete(backupFile);\r\n        partNumber++;\r\n        blockOffset = 0;\r\n        if (!closingUpload) {\r\n            backupFile = newBackupFile();\r\n            backupStream = new BufferedOutputStream(new FileOutputStream(backupFile));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "uploadFilePartAttempt",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "long uploadFilePartAttempt(int attempt) throws IOException\n{\r\n    long uploadLen = backupFile.length();\r\n    SwiftUtils.debug(LOG, \"Uploading part %d of file %s;\" + \" localfile=%s of length %d  - attempt %d\", partNumber, key, backupFile, uploadLen, attempt);\r\n    nativeStore.uploadFilePart(new Path(key), partNumber, new FileInputStream(backupFile), uploadLen);\r\n    return uploadLen;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getFilePartSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getFilePartSize()\n{\r\n    return filePartSize;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getPartitionsWritten",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getPartitionsWritten()\n{\r\n    return partNumber - 1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getBytesWritten",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getBytesWritten()\n{\r\n    return bytesWritten;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getBytesUploaded",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getBytesUploaded()\n{\r\n    return bytesUploaded;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String toString()\n{\r\n    return \"SwiftNativeOutputStream{\" + \", key='\" + key + '\\'' + \", backupFile=\" + backupFile + \", closed=\" + closed + \", filePartSize=\" + filePartSize + \", partNumber=\" + partNumber + \", blockOffset=\" + blockOffset + \", partUpload=\" + partUpload + \", nativeStore=\" + nativeStore + \", bytesWritten=\" + bytesWritten + \", bytesUploaded=\" + bytesUploaded + '}';\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\exceptions",
  "methodName" : "exceptionTitle",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String exceptionTitle()\n{\r\n    return \"Authentication Failure\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "isEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean isEnabled()\n{\r\n    return enabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setEnabled",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setEnabled(boolean enabled)\n{\r\n    this.enabled = enabled;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getDescription",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDescription()\n{\r\n    return description;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setDescription",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDescription(String description)\n{\r\n    this.description = description;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\auth\\entities",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "incPos",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incPos(int offset)\n{\r\n    pos += offset;\r\n    rangeOffset += offset;\r\n    SwiftUtils.trace(LOG, \"Inc: pos=%d bufferOffset=%d\", pos, rangeOffset);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "updateStartOfBufferPosition",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void updateStartOfBufferPosition(long seekPos, long contentLength)\n{\r\n    pos = seekPos;\r\n    rangeOffset = 0;\r\n    this.contentLength = contentLength;\r\n    SwiftUtils.trace(LOG, \"Move: pos=%d; bufferOffset=%d; contentLength=%d\", pos, rangeOffset, contentLength);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "read",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int read() throws IOException\n{\r\n    verifyOpen();\r\n    int result = -1;\r\n    try {\r\n        result = httpStream.read();\r\n    } catch (IOException e) {\r\n        String msg = \"IOException while reading \" + path + \": \" + e + \", attempting to reopen.\";\r\n        LOG.debug(msg, e);\r\n        if (reopenBuffer()) {\r\n            result = httpStream.read();\r\n        }\r\n    }\r\n    if (result != -1) {\r\n        incPos(1);\r\n    }\r\n    if (statistics != null && result != -1) {\r\n        statistics.incrementBytesRead(1);\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "read",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "int read(byte[] b, int off, int len) throws IOException\n{\r\n    SwiftUtils.debug(LOG, \"read(buffer, %d, %d)\", off, len);\r\n    SwiftUtils.validateReadArgs(b, off, len);\r\n    if (len == 0) {\r\n        return 0;\r\n    }\r\n    int result = -1;\r\n    try {\r\n        verifyOpen();\r\n        result = httpStream.read(b, off, len);\r\n    } catch (IOException e) {\r\n        LOG.info(\"Received IOException while reading '\" + path + \"', attempting to reopen: \" + e);\r\n        LOG.debug(\"IOE on read()\" + e, e);\r\n        if (reopenBuffer()) {\r\n            result = httpStream.read(b, off, len);\r\n        }\r\n    }\r\n    if (result > 0) {\r\n        incPos(result);\r\n        if (statistics != null) {\r\n            statistics.incrementBytesRead(result);\r\n        }\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "reopenBuffer",
  "errType" : [ "EOFException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean reopenBuffer() throws IOException\n{\r\n    innerClose(\"reopening buffer to trigger refresh\");\r\n    boolean success = false;\r\n    try {\r\n        fillBuffer(pos);\r\n        success = true;\r\n    } catch (EOFException eof) {\r\n        this.reasonClosed = \"End of file\";\r\n    }\r\n    return success;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "close",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void close() throws IOException\n{\r\n    innerClose(\"closed\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "innerClose",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void innerClose(String reason) throws IOException\n{\r\n    try {\r\n        if (httpStream != null) {\r\n            reasonClosed = reason;\r\n            if (LOG.isDebugEnabled()) {\r\n                LOG.debug(\"Closing HTTP input stream : \" + reason);\r\n            }\r\n            httpStream.close();\r\n        }\r\n    } finally {\r\n        httpStream = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "verifyOpen",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void verifyOpen() throws SwiftConnectionClosedException\n{\r\n    if (httpStream == null) {\r\n        throw new SwiftConnectionClosedException(reasonClosed);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String toString()\n{\r\n    return \"SwiftNativeInputStream\" + \" position=\" + pos + \" buffer size = \" + bufferSize + \" \" + (httpStream != null ? httpStream.toString() : (\" no input stream: \" + reasonClosed));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "finalize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void finalize() throws Throwable\n{\r\n    if (httpStream != null) {\r\n        LOG.error(\"Input stream is leaking handles by not being closed() properly: \" + httpStream.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "chompBytes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int chompBytes(long bytes) throws IOException\n{\r\n    int count = 0;\r\n    if (httpStream != null) {\r\n        int result;\r\n        for (long i = 0; i < bytes; i++) {\r\n            result = httpStream.read();\r\n            if (result < 0) {\r\n                throw new SwiftException(\"Received error code while chomping input\");\r\n            }\r\n            count++;\r\n            incPos(1);\r\n        }\r\n    }\r\n    return count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "seek",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void seek(long targetPos) throws IOException\n{\r\n    if (targetPos < 0) {\r\n        throw new EOFException(FSExceptionMessages.NEGATIVE_SEEK);\r\n    }\r\n    long offset = targetPos - pos;\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Seek to \" + targetPos + \"; current pos =\" + pos + \"; offset=\" + offset);\r\n    }\r\n    if (offset == 0) {\r\n        LOG.debug(\"seek is no-op\");\r\n        return;\r\n    }\r\n    if (offset < 0) {\r\n        LOG.debug(\"seek is backwards\");\r\n    } else if ((rangeOffset + offset < bufferSize)) {\r\n        SwiftUtils.debug(LOG, \"seek is within current stream\" + \"; pos= %d ; targetPos=%d; \" + \"offset= %d ; bufferOffset=%d\", pos, targetPos, offset, rangeOffset);\r\n        try {\r\n            LOG.debug(\"chomping \");\r\n            chompBytes(offset);\r\n        } catch (IOException e) {\r\n            LOG.debug(\"while chomping \", e);\r\n        }\r\n        if (targetPos - pos == 0) {\r\n            LOG.trace(\"chomping successful\");\r\n            return;\r\n        }\r\n        LOG.trace(\"chomping failed\");\r\n    } else {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Seek is beyond buffer size of \" + bufferSize);\r\n        }\r\n    }\r\n    innerClose(\"seeking to \" + targetPos);\r\n    fillBuffer(targetPos);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "fillBuffer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void fillBuffer(long targetPos) throws IOException\n{\r\n    long length = targetPos + bufferSize;\r\n    SwiftUtils.debug(LOG, \"Fetching %d bytes starting at %d\", length, targetPos);\r\n    HttpBodyContent blob = nativeStore.getObject(path, targetPos, length);\r\n    httpStream = blob.getInputStream();\r\n    updateStartOfBufferPosition(targetPos, blob.getContentLength());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "getPos",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getPos() throws IOException\n{\r\n    return pos;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\snative",
  "methodName" : "seekToNewSource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean seekToNewSource(long targetPos) throws IOException\n{\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "buildSwiftInstancePrefix",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String buildSwiftInstancePrefix(String service)\n{\r\n    return SWIFT_SERVICE_PREFIX + service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "invalidName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SwiftConfigurationException invalidName(String hostname)\n{\r\n    return new SwiftConfigurationException(String.format(E_INVALID_NAME, hostname));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "extractContainerName",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String extractContainerName(String hostname) throws SwiftConfigurationException\n{\r\n    int i = hostname.indexOf(\".\");\r\n    if (i <= 0) {\r\n        throw invalidName(hostname);\r\n    }\r\n    return hostname.substring(0, i);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "extractContainerName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String extractContainerName(URI uri) throws SwiftConfigurationException\n{\r\n    return extractContainerName(uri.getHost());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "extractServiceName",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String extractServiceName(String hostname) throws SwiftConfigurationException\n{\r\n    int i = hostname.indexOf(\".\");\r\n    if (i <= 0) {\r\n        throw invalidName(hostname);\r\n    }\r\n    String service = hostname.substring(i + 1);\r\n    if (service.isEmpty() || service.contains(\".\")) {\r\n        throw invalidName(hostname);\r\n    }\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "extractServiceName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String extractServiceName(URI uri) throws SwiftConfigurationException\n{\r\n    return extractServiceName(uri.getHost());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "bind",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "Properties bind(URI fsURI, Configuration conf) throws SwiftConfigurationException\n{\r\n    String host = fsURI.getHost();\r\n    if (host == null || host.isEmpty()) {\r\n        throw invalidName(host);\r\n    }\r\n    String container = extractContainerName(host);\r\n    String service = extractServiceName(host);\r\n    String prefix = buildSwiftInstancePrefix(service);\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Filesystem \" + fsURI + \" is using configuration keys \" + prefix);\r\n    }\r\n    Properties props = new Properties();\r\n    props.setProperty(SWIFT_SERVICE_PROPERTY, service);\r\n    props.setProperty(SWIFT_CONTAINER_PROPERTY, container);\r\n    copy(conf, prefix + DOT_AUTH_URL, props, SWIFT_AUTH_PROPERTY, true);\r\n    copy(conf, prefix + DOT_USERNAME, props, SWIFT_USERNAME_PROPERTY, true);\r\n    copy(conf, prefix + DOT_APIKEY, props, SWIFT_APIKEY_PROPERTY, false);\r\n    copy(conf, prefix + DOT_PASSWORD, props, SWIFT_PASSWORD_PROPERTY, props.contains(SWIFT_APIKEY_PROPERTY) ? true : false);\r\n    copy(conf, prefix + DOT_TENANT, props, SWIFT_TENANT_PROPERTY, false);\r\n    copy(conf, prefix + DOT_REGION, props, SWIFT_REGION_PROPERTY, false);\r\n    copy(conf, prefix + DOT_HTTP_PORT, props, SWIFT_HTTP_PORT_PROPERTY, false);\r\n    copy(conf, prefix + DOT_HTTPS_PORT, props, SWIFT_HTTPS_PORT_PROPERTY, false);\r\n    copyBool(conf, prefix + DOT_PUBLIC, props, SWIFT_PUBLIC_PROPERTY, false);\r\n    copyBool(conf, prefix + DOT_LOCATION_AWARE, props, SWIFT_LOCATION_AWARE_PROPERTY, false);\r\n    return props;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "copyBool",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void copyBool(Configuration conf, String confKey, Properties props, String propsKey, boolean defVal)\n{\r\n    boolean b = conf.getBoolean(confKey, defVal);\r\n    props.setProperty(propsKey, Boolean.toString(b));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "set",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void set(Properties props, String key, String optVal)\n{\r\n    if (optVal != null) {\r\n        props.setProperty(key, optVal);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-tools\\hadoop-openstack\\src\\main\\java\\org\\apache\\hadoop\\fs\\swift\\http",
  "methodName" : "copy",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void copy(Configuration conf, String confKey, Properties props, String propsKey, boolean required) throws SwiftConfigurationException\n{\r\n    String val = conf.get(confKey);\r\n    if (val != null) {\r\n        val = val.trim();\r\n    }\r\n    if (required && val == null) {\r\n        throw new SwiftConfigurationException(\"Missing mandatory configuration option: \" + confKey);\r\n    }\r\n    set(props, propsKey, val);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]