[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "EntityGroupFSTimelineStoreMetrics create()\n{\r\n    if (instance == null) {\r\n        MetricsSystem ms = DefaultMetricsSystem.instance();\r\n        instance = ms.register(new EntityGroupFSTimelineStoreMetrics());\r\n    }\r\n    return instance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrGetEntityToSummaryOps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrGetEntityToSummaryOps()\n{\r\n    getEntityToSummaryOps.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrGetEntityToDetailOps",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrGetEntityToDetailOps()\n{\r\n    getEntityToDetailOps.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addSummaryLogReadTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addSummaryLogReadTime(long msec)\n{\r\n    summaryLogRead.add(msec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrEntitiesReadToSummary",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrEntitiesReadToSummary(long delta)\n{\r\n    entitiesReadToSummary.incr(delta);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrNoRefreshCacheRead",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrNoRefreshCacheRead()\n{\r\n    noRefreshCacheRead.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrCacheStaleRefreshes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrCacheStaleRefreshes()\n{\r\n    cacheStaleRefreshes.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrCacheEvicts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrCacheEvicts()\n{\r\n    cacheEvicts.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addCacheRefreshTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addCacheRefreshTime(long msec)\n{\r\n    cacheRefresh.add(msec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addActiveLogDirScanTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addActiveLogDirScanTime(long msec)\n{\r\n    activeLogDirScan.add(msec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "addLogCleanTime",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addLogCleanTime(long msec)\n{\r\n    logClean.add(msec);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "incrLogsDirsCleaned",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void incrLogsDirsCleaned()\n{\r\n    logsDirsCleaned.incr();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntitiesReadToSummary",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableCounterLong getEntitiesReadToSummary()\n{\r\n    return entitiesReadToSummary;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getLogsDirsCleaned",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableCounterLong getLogsDirsCleaned()\n{\r\n    return logsDirsCleaned;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getGetEntityToSummaryOps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableCounterLong getGetEntityToSummaryOps()\n{\r\n    return getEntityToSummaryOps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getGetEntityToDetailOps",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableCounterLong getGetEntityToDetailOps()\n{\r\n    return getEntityToDetailOps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getCacheRefresh",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MutableStat getCacheRefresh()\n{\r\n    return cacheRefresh;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getAttemptDirName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getAttemptDirName()\n{\r\n    return attemptDirName;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getOffset",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getOffset()\n{\r\n    return offset;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setOffset",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOffset(long newOffset)\n{\r\n    this.offset = newOffset;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getLastProcessedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLastProcessedTime()\n{\r\n    return lastProcessedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setLastProcessedTime",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLastProcessedTime(long lastProcessedTime)\n{\r\n    this.lastProcessedTime = lastProcessedTime;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getPath",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Path getPath(Path rootPath)\n{\r\n    Path attemptPath = new Path(rootPath, attemptDirName);\r\n    return new Path(attemptPath, filename);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getFilename",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFilename()\n{\r\n    return filename;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "matchesGroupId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean matchesGroupId(TimelineEntityGroupId groupId)\n{\r\n    return matchesGroupId(groupId.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "matchesGroupId",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean matchesGroupId(String groupId)\n{\r\n    int pos = filename.indexOf(groupId);\r\n    if (pos < 0) {\r\n        return false;\r\n    }\r\n    return filename.length() == pos + groupId.length() || ENTITY_FILE_NAME_DELIMITERS.contains(String.valueOf(filename.charAt(pos + groupId.length())));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "parseForStore",
  "errType" : [ "RuntimeException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "long parseForStore(TimelineDataManager tdm, Path appDirPath, boolean appCompleted, JsonFactory jsonFactory, ObjectMapper objMapper, FileSystem fs) throws IOException\n{\r\n    LOG.debug(\"Parsing for log dir {} on attempt {}\", appDirPath, attemptDirName);\r\n    Path logPath = getPath(appDirPath);\r\n    FileStatus status = fs.getFileStatus(logPath);\r\n    long numParsed = 0;\r\n    if (status != null) {\r\n        long curModificationTime = status.getModificationTime();\r\n        if (curModificationTime > getLastProcessedTime()) {\r\n            long startTime = Time.monotonicNow();\r\n            try {\r\n                LOG.info(\"Parsing {} at offset {}\", logPath, offset);\r\n                long count = parsePath(tdm, logPath, appCompleted, jsonFactory, objMapper, fs);\r\n                setLastProcessedTime(curModificationTime);\r\n                LOG.info(\"Parsed {} entities from {} in {} msec\", count, logPath, Time.monotonicNow() - startTime);\r\n                numParsed += count;\r\n            } catch (RuntimeException e) {\r\n                if (e.getCause() instanceof JsonParseException && (status.getLen() > 0 || offset > 0)) {\r\n                    LOG.info(\"Log {} appears to be corrupted. Skip. \", logPath);\r\n                } else {\r\n                    LOG.error(\"Failed to parse \" + logPath + \" from offset \" + offset, e);\r\n                }\r\n            }\r\n        } else {\r\n            LOG.info(\"Skip Parsing {} as there is no change\", logPath);\r\n        }\r\n    } else {\r\n        LOG.warn(\"{} no longer exists. Skip for scanning. \", logPath);\r\n    }\r\n    return numParsed;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "parsePath",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "long parsePath(TimelineDataManager tdm, Path logPath, boolean appCompleted, JsonFactory jsonFactory, ObjectMapper objMapper, FileSystem fs) throws IOException\n{\r\n    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(user);\r\n    FSDataInputStream in = fs.open(logPath);\r\n    JsonParser parser = null;\r\n    try {\r\n        in.seek(offset);\r\n        try {\r\n            parser = jsonFactory.createParser((InputStream) in);\r\n            parser.configure(JsonParser.Feature.AUTO_CLOSE_SOURCE, false);\r\n        } catch (IOException e) {\r\n            if (appCompleted) {\r\n                throw e;\r\n            } else {\r\n                LOG.debug(\"Exception in parse path: {}\", e.getMessage());\r\n                return 0;\r\n            }\r\n        }\r\n        return doParse(tdm, parser, objMapper, ugi, appCompleted);\r\n    } finally {\r\n        IOUtils.closeStream(parser);\r\n        IOUtils.closeStream(in);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "doParse",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long doParse(TimelineDataManager tdm, JsonParser parser, ObjectMapper objMapper, UserGroupInformation ugi, boolean appCompleted) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "doParse",
  "errType" : [ "IOException", "RuntimeException", "YarnException", "IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "long doParse(TimelineDataManager tdm, JsonParser parser, ObjectMapper objMapper, UserGroupInformation ugi, boolean appCompleted) throws IOException\n{\r\n    long count = 0;\r\n    TimelineEntities entities = new TimelineEntities();\r\n    ArrayList<TimelineEntity> entityList = new ArrayList<TimelineEntity>(1);\r\n    boolean postError = false;\r\n    try {\r\n        MappingIterator<TimelineEntity> iter = objMapper.readValues(parser, TimelineEntity.class);\r\n        long curPos;\r\n        while (iter.hasNext()) {\r\n            TimelineEntity entity = iter.next();\r\n            String etype = entity.getEntityType();\r\n            String eid = entity.getEntityId();\r\n            LOG.debug(\"Read entity {} of {}\", eid, etype);\r\n            ++count;\r\n            curPos = ((FSDataInputStream) parser.getInputSource()).getPos();\r\n            LOG.debug(\"Parser now at offset {}\", curPos);\r\n            try {\r\n                LOG.debug(\"Adding {}({}) to store\", eid, etype);\r\n                entityList.add(entity);\r\n                entities.setEntities(entityList);\r\n                TimelinePutResponse response = tdm.postEntities(entities, ugi);\r\n                for (TimelinePutResponse.TimelinePutError e : response.getErrors()) {\r\n                    LOG.warn(\"Error putting entity: {} ({}): {}\", e.getEntityId(), e.getEntityType(), e.getErrorCode());\r\n                }\r\n                setOffset(curPos);\r\n                entityList.clear();\r\n            } catch (YarnException e) {\r\n                postError = true;\r\n                throw new IOException(\"Error posting entities\", e);\r\n            } catch (IOException e) {\r\n                postError = true;\r\n                throw new IOException(\"Error posting entities\", e);\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        if (appCompleted || postError) {\r\n            throw e;\r\n        }\r\n    } catch (RuntimeException e) {\r\n        if (appCompleted || !(e.getCause() instanceof JsonParseException)) {\r\n            throw e;\r\n        }\r\n    }\r\n    return count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "doParse",
  "errType" : [ "IOException", "RuntimeException", "YarnException", "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "long doParse(TimelineDataManager tdm, JsonParser parser, ObjectMapper objMapper, UserGroupInformation ugi, boolean appCompleted) throws IOException\n{\r\n    long count = 0;\r\n    long curPos;\r\n    boolean putError = false;\r\n    try {\r\n        MappingIterator<TimelineDomain> iter = objMapper.readValues(parser, TimelineDomain.class);\r\n        while (iter.hasNext()) {\r\n            TimelineDomain domain = iter.next();\r\n            domain.setOwner(ugi.getShortUserName());\r\n            LOG.trace(\"Read domain {}\", domain.getId());\r\n            ++count;\r\n            curPos = ((FSDataInputStream) parser.getInputSource()).getPos();\r\n            LOG.debug(\"Parser now at offset {}\", curPos);\r\n            try {\r\n                tdm.putDomain(domain, ugi);\r\n                setOffset(curPos);\r\n            } catch (YarnException e) {\r\n                putError = true;\r\n                throw new IOException(\"Error posting domain\", e);\r\n            } catch (IOException e) {\r\n                putError = true;\r\n                throw new IOException(\"Error posting domain\", e);\r\n            }\r\n        }\r\n    } catch (IOException e) {\r\n        if (appCompleted || putError) {\r\n            throw e;\r\n        }\r\n    } catch (RuntimeException e) {\r\n        if (appCompleted || !(e.getCause() instanceof JsonParseException)) {\r\n            throw e;\r\n        }\r\n    }\r\n    return count;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineEntityGroupId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<TimelineEntityGroupId> getTimelineEntityGroupId(String entityType, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilters)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineEntityGroupId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<TimelineEntityGroupId> getTimelineEntityGroupId(String entityId, String entityType)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineEntityGroupId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<TimelineEntityGroupId> getTimelineEntityGroupId(String entityType, SortedSet<String> entityIds, Set<String> eventTypes)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getAppLogs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "EntityGroupFSTimelineStore.AppLogs getAppLogs()\n{\r\n    return this.appLogs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setAppLogs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setAppLogs(EntityGroupFSTimelineStore.AppLogs incomingAppLogs)\n{\r\n    this.appLogs = incomingAppLogs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineStore getStore()\n{\r\n    return store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "refreshCache",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "TimelineStore refreshCache(TimelineACLsManager aclManager, EntityGroupFSTimelineStoreMetrics metrics) throws IOException\n{\r\n    if (needRefresh()) {\r\n        long startTime = Time.monotonicNow();\r\n        if (!appLogs.isDone()) {\r\n            appLogs.parseSummaryLogs();\r\n        } else if (appLogs.getDetailLogs().isEmpty()) {\r\n            appLogs.scanForLogs();\r\n        }\r\n        if (!appLogs.getDetailLogs().isEmpty()) {\r\n            if (store == null) {\r\n                store = ReflectionUtils.newInstance(config.getClass(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CACHE_STORE, MemoryTimelineStore.class, TimelineStore.class), config);\r\n                store.init(config);\r\n                store.start();\r\n            } else {\r\n                metrics.incrCacheStaleRefreshes();\r\n            }\r\n            try (TimelineDataManager tdm = new TimelineDataManager(store, aclManager)) {\r\n                tdm.init(config);\r\n                tdm.start();\r\n                appLogs.loadDetailLog(tdm, groupId);\r\n            }\r\n        }\r\n        updateRefreshTimeToNow();\r\n        metrics.addCacheRefreshTime(Time.monotonicNow() - startTime);\r\n    } else {\r\n        LOG.debug(\"Cache new enough, skip refreshing\");\r\n        metrics.incrNoRefreshCacheRead();\r\n    }\r\n    return store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "forceRelease",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void forceRelease()\n{\r\n    try {\r\n        if (store != null) {\r\n            store.close();\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.warn(\"Error closing timeline store\", e);\r\n    }\r\n    store = null;\r\n    for (LogInfo log : appLogs.getDetailLogs()) {\r\n        if (log.getFilename().contains(groupId.toString())) {\r\n            log.setOffset(0);\r\n        }\r\n    }\r\n    LOG.debug(\"Cache for group {} released. \", groupId);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "needRefresh",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean needRefresh()\n{\r\n    return (Time.monotonicNow() - lastRefresh > 10000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "updateRefreshTimeToNow",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void updateRefreshTimeToNow()\n{\r\n    this.lastRefresh = Time.monotonicNow();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    metrics = EntityGroupFSTimelineStoreMetrics.create();\r\n    summaryStore = createSummaryStore();\r\n    addService(summaryStore);\r\n    long logRetainSecs = conf.getLong(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETAIN_SECONDS, YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RETAIN_SECONDS_DEFAULT);\r\n    logRetainMillis = logRetainSecs * 1000;\r\n    LOG.info(\"Cleaner set to delete logs older than {} seconds\", logRetainSecs);\r\n    long unknownActiveSecs = conf.getLong(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_UNKNOWN_ACTIVE_SECONDS, YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_UNKNOWN_ACTIVE_SECONDS_DEFAULT);\r\n    unknownActiveMillis = unknownActiveSecs * 1000;\r\n    LOG.info(\"Unknown apps will be treated as complete after {} seconds\", unknownActiveSecs);\r\n    appCacheMaxSize = conf.getInt(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_APP_CACHE_SIZE, YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_APP_CACHE_SIZE_DEFAULT);\r\n    LOG.info(\"Application cache size is {}\", appCacheMaxSize);\r\n    cachedLogs = Collections.synchronizedMap(new LinkedHashMap<TimelineEntityGroupId, EntityCacheItem>(appCacheMaxSize + 1, 0.75f, true) {\r\n\r\n        @Override\r\n        protected boolean removeEldestEntry(Map.Entry<TimelineEntityGroupId, EntityCacheItem> eldest) {\r\n            if (super.size() > appCacheMaxSize) {\r\n                TimelineEntityGroupId groupId = eldest.getKey();\r\n                LOG.debug(\"Evicting {} due to space limitations\", groupId);\r\n                EntityCacheItem cacheItem = eldest.getValue();\r\n                LOG.debug(\"Force release cache {}.\", groupId);\r\n                cacheItem.forceRelease();\r\n                if (cacheItem.getAppLogs().isDone()) {\r\n                    appIdLogMap.remove(groupId.getApplicationId());\r\n                }\r\n                metrics.incrCacheEvicts();\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n    });\r\n    cacheIdPlugins = loadPlugIns(conf);\r\n    yarnClient = createAndInitYarnClient(conf);\r\n    addIfService(yarnClient);\r\n    activeRootPath = new Path(conf.get(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR, YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_ACTIVE_DIR_DEFAULT));\r\n    doneRootPath = new Path(conf.get(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR, YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR_DEFAULT));\r\n    fs = activeRootPath.getFileSystem(conf);\r\n    checkpointFile = new Path(fs.getHomeDirectory(), \"atscheckpoint\");\r\n    recoveryEnabled = conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RECOVERY_ENABLED, YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_RECOVERY_ENABLED_DEFAULT);\r\n    aclsEnabled = conf.getBoolean(YarnConfiguration.YARN_ACL_ENABLE, YarnConfiguration.DEFAULT_YARN_ACL_ENABLE);\r\n    CallerContext.setCurrent(new CallerContext.Builder(ATS_V15_SERVER_DFS_CALLER_CTXT).build());\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "loadPlugIns",
  "errType" : [ "IOException", "Exception" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "List<TimelineEntityGroupPlugin> loadPlugIns(Configuration conf) throws RuntimeException\n{\r\n    Collection<String> pluginNames = conf.getTrimmedStringCollection(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES);\r\n    String pluginClasspath = conf.getTrimmed(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSPATH);\r\n    String[] systemClasses = conf.getTrimmedStrings(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_SYSTEM_CLASSES);\r\n    List<TimelineEntityGroupPlugin> pluginList = new LinkedList<TimelineEntityGroupPlugin>();\r\n    ClassLoader customClassLoader = null;\r\n    if (pluginClasspath != null && pluginClasspath.length() > 0) {\r\n        try {\r\n            customClassLoader = createPluginClassLoader(pluginClasspath, systemClasses);\r\n        } catch (IOException ioe) {\r\n            LOG.warn(\"Error loading classloader\", ioe);\r\n        }\r\n    }\r\n    for (final String name : pluginNames) {\r\n        LOG.debug(\"Trying to load plugin class {}\", name);\r\n        TimelineEntityGroupPlugin cacheIdPlugin = null;\r\n        try {\r\n            if (customClassLoader != null) {\r\n                LOG.debug(\"Load plugin {} with classpath: {}\", name, pluginClasspath);\r\n                Class<?> clazz = Class.forName(name, true, customClassLoader);\r\n                Class<? extends TimelineEntityGroupPlugin> sClass = clazz.asSubclass(TimelineEntityGroupPlugin.class);\r\n                cacheIdPlugin = ReflectionUtils.newInstance(sClass, conf);\r\n            } else {\r\n                LOG.debug(\"Load plugin class with system classpath\");\r\n                Class<?> clazz = conf.getClassByName(name);\r\n                cacheIdPlugin = (TimelineEntityGroupPlugin) ReflectionUtils.newInstance(clazz, conf);\r\n            }\r\n        } catch (Exception e) {\r\n            LOG.warn(\"Error loading plugin \" + name, e);\r\n            throw new RuntimeException(\"No class defined for \" + name, e);\r\n        }\r\n        LOG.info(\"Load plugin class {}\", cacheIdPlugin.getClass().getName());\r\n        pluginList.add(cacheIdPlugin);\r\n    }\r\n    return pluginList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createSummaryStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineStore createSummaryStore()\n{\r\n    return ReflectionUtils.newInstance(getConfig().getClass(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SUMMARY_STORE, LeveldbTimelineStore.class, TimelineStore.class), getConfig());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "serviceStart",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    super.serviceStart();\r\n    LOG.info(\"Starting {}\", getName());\r\n    summaryStore.start();\r\n    Configuration conf = getConfig();\r\n    aclManager = new TimelineACLsManager(conf);\r\n    aclManager.setTimelineStore(summaryStore);\r\n    summaryTdm = new TimelineDataManager(summaryStore, aclManager);\r\n    summaryTdm.init(conf);\r\n    addService(summaryTdm);\r\n    super.serviceStart();\r\n    if (!fs.exists(activeRootPath)) {\r\n        fs.mkdirs(activeRootPath);\r\n        fs.setPermission(activeRootPath, ACTIVE_DIR_PERMISSION);\r\n    }\r\n    if (!fs.exists(doneRootPath)) {\r\n        fs.mkdirs(doneRootPath);\r\n        fs.setPermission(doneRootPath, DONE_DIR_PERMISSION);\r\n    }\r\n    if (recoveryEnabled && fs.exists(checkpointFile)) {\r\n        try (FSDataInputStream in = fs.open(checkpointFile)) {\r\n            recoveredLogs.putAll(recoverLogFiles(in));\r\n        } catch (IOException e) {\r\n            LOG.warn(\"Failed to recover summarylog files from the checkpointfile\", e);\r\n        }\r\n    }\r\n    objMapper = new ObjectMapper();\r\n    objMapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector(TypeFactory.defaultInstance()));\r\n    jsonFactory = new MappingJsonFactory(objMapper);\r\n    final long scanIntervalSecs = conf.getLong(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS, YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS_DEFAULT);\r\n    final long cleanerIntervalSecs = conf.getLong(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS, YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_CLEANER_INTERVAL_SECONDS_DEFAULT);\r\n    final int numThreads = conf.getInt(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS, YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_THREADS_DEFAULT);\r\n    LOG.info(\"Scanning active directory {} every {} seconds\", activeRootPath, scanIntervalSecs);\r\n    LOG.info(\"Cleaning logs every {} seconds\", cleanerIntervalSecs);\r\n    executor = new ScheduledThreadPoolExecutor(numThreads, new ThreadFactoryBuilder().setNameFormat(\"EntityLogPluginWorker #%d\").build());\r\n    executor.scheduleAtFixedRate(new EntityLogScanner(), 0, scanIntervalSecs, TimeUnit.SECONDS);\r\n    executor.scheduleAtFixedRate(new EntityLogCleaner(), cleanerIntervalSecs, cleanerIntervalSecs, TimeUnit.SECONDS);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    LOG.info(\"Stopping {}\", getName());\r\n    stopExecutors.set(true);\r\n    if (executor != null) {\r\n        executor.shutdown();\r\n        if (executor.isTerminating()) {\r\n            LOG.info(\"Waiting for executor to terminate\");\r\n            boolean terminated = executor.awaitTermination(10, TimeUnit.SECONDS);\r\n            if (terminated) {\r\n                LOG.info(\"Executor terminated\");\r\n            } else {\r\n                LOG.warn(\"Executor did not terminate\");\r\n                executor.shutdownNow();\r\n            }\r\n        }\r\n    }\r\n    synchronized (cachedLogs) {\r\n        for (EntityCacheItem cacheItem : cachedLogs.values()) {\r\n            ServiceOperations.stopQuietly(cacheItem.getStore());\r\n        }\r\n    }\r\n    CallerContext.setCurrent(null);\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "recoverLogFiles",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "HashMap<String, Pair<Long, Long>> recoverLogFiles(DataInputStream in) throws IOException\n{\r\n    HashMap<String, Pair<Long, Long>> logFiles = new HashMap<>();\r\n    long totalEntries = in.readLong();\r\n    for (long i = 0; i < totalEntries; i++) {\r\n        Text attemptDirName = new Text();\r\n        attemptDirName.readFields(in);\r\n        Text fileName = new Text();\r\n        fileName.readFields(in);\r\n        LongWritable lastProcessedTime = new LongWritable();\r\n        lastProcessedTime.readFields(in);\r\n        LongWritable offset = new LongWritable();\r\n        offset.readFields(in);\r\n        Pair<Long, Long> pair = Pair.of(lastProcessedTime.get(), offset.get());\r\n        logFiles.put(attemptDirName + Path.SEPARATOR + fileName, pair);\r\n    }\r\n    LOG.info(\"Recovered {} summarylog files\", totalEntries);\r\n    return logFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "storeLogFiles",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void storeLogFiles(Collection<AppLogs> appLogs, DataOutputStream checkPointStream) throws IOException\n{\r\n    long totalEntries = 0L;\r\n    for (AppLogs appLog : appLogs) {\r\n        totalEntries += appLog.summaryLogs.size();\r\n    }\r\n    checkPointStream.writeLong(totalEntries);\r\n    for (AppLogs appLog : appLogs) {\r\n        for (LogInfo summaryLog : appLog.summaryLogs) {\r\n            new Text(summaryLog.getAttemptDirName()).write(checkPointStream);\r\n            new Text(summaryLog.getFilename()).write(checkPointStream);\r\n            new LongWritable(summaryLog.getLastProcessedTime()).write(checkPointStream);\r\n            new LongWritable(summaryLog.getOffset()).write(checkPointStream);\r\n        }\r\n    }\r\n    LOG.info(\"Stored {} summarylog files into checkPointFile\", totalEntries);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "scanActiveLogs",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int scanActiveLogs() throws IOException\n{\r\n    long startTime = Time.monotonicNow();\r\n    if (recoveryEnabled && appIdLogMap.size() > 0) {\r\n        try (FSDataOutputStream checkPointStream = fs.create(checkpointFile, true)) {\r\n            storeLogFiles(appIdLogMap.values(), checkPointStream);\r\n        } catch (Exception e) {\r\n            LOG.warn(\"Failed to checkpoint the summarylog files\", e);\r\n        }\r\n    }\r\n    int logsToScanCount = scanActiveLogs(activeRootPath);\r\n    metrics.addActiveLogDirScanTime(Time.monotonicNow() - startTime);\r\n    return logsToScanCount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "scanActiveLogs",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "int scanActiveLogs(Path dir) throws IOException\n{\r\n    RemoteIterator<FileStatus> iter = list(dir);\r\n    int logsToScanCount = 0;\r\n    while (iter.hasNext()) {\r\n        FileStatus stat = iter.next();\r\n        String name = stat.getPath().getName();\r\n        ApplicationId appId = parseApplicationId(name);\r\n        if (appId != null) {\r\n            LOG.debug(\"scan logs for {} in {}\", appId, stat.getPath());\r\n            logsToScanCount++;\r\n            AppLogs logs = getAndSetActiveLog(appId, stat.getPath());\r\n            executor.execute(new ActiveLogParser(logs));\r\n        } else {\r\n            if (stat.isDirectory()) {\r\n                logsToScanCount += scanActiveLogs(stat.getPath());\r\n            } else {\r\n                LOG.warn(\"Ignoring unexpected file in active directory {}\", stat.getPath());\r\n            }\r\n        }\r\n    }\r\n    return logsToScanCount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "list",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RemoteIterator<FileStatus> list(Path path) throws IOException\n{\r\n    return new StoppableRemoteIterator(fs.listStatusIterator(path));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createAndPutAppLogsIfAbsent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppLogs createAndPutAppLogsIfAbsent(ApplicationId appId, Path appDirPath, AppState appState)\n{\r\n    AppLogs appLogs = new AppLogs(appId, appDirPath, appState);\r\n    AppLogs oldAppLogs = appIdLogMap.putIfAbsent(appId, appLogs);\r\n    if (oldAppLogs != null) {\r\n        appLogs = oldAppLogs;\r\n    }\r\n    return appLogs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getAndSetActiveLog",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AppLogs getAndSetActiveLog(ApplicationId appId, Path appDirPath)\n{\r\n    AppLogs appLogs = appIdLogMap.get(appId);\r\n    if (appLogs == null) {\r\n        appLogs = createAndPutAppLogsIfAbsent(appId, appDirPath, AppState.ACTIVE);\r\n    }\r\n    return appLogs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getAndSetAppLogs",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "AppLogs getAndSetAppLogs(ApplicationId applicationId) throws IOException\n{\r\n    LOG.debug(\"Looking for app logs mapped for app id {}\", applicationId);\r\n    AppLogs appLogs = appIdLogMap.get(applicationId);\r\n    if (appLogs == null) {\r\n        AppState appState = AppState.UNKNOWN;\r\n        Path appDirPath = getDoneAppPath(applicationId);\r\n        if (fs.exists(appDirPath)) {\r\n            appState = AppState.COMPLETED;\r\n        } else {\r\n            appDirPath = getActiveAppPath(applicationId);\r\n            if (fs.exists(appDirPath)) {\r\n                appState = AppState.ACTIVE;\r\n            } else {\r\n                RemoteIterator<FileStatus> iter = list(activeRootPath);\r\n                while (iter.hasNext()) {\r\n                    Path child = new Path(iter.next().getPath().getName(), applicationId.toString());\r\n                    appDirPath = new Path(activeRootPath, child);\r\n                    if (fs.exists(appDirPath)) {\r\n                        appState = AppState.ACTIVE;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (appState != AppState.UNKNOWN) {\r\n            LOG.debug(\"Create and try to add new appLogs to appIdLogMap for {}\", applicationId);\r\n            appLogs = createAndPutAppLogsIfAbsent(applicationId, appDirPath, appState);\r\n        }\r\n    }\r\n    return appLogs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "cleanLogs",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void cleanLogs(Path dirpath, long retainMillis) throws IOException\n{\r\n    long now = Time.now();\r\n    RemoteIterator<FileStatus> iter = list(dirpath);\r\n    while (iter.hasNext()) {\r\n        FileStatus stat = iter.next();\r\n        if (isValidClusterTimeStampDir(stat)) {\r\n            Path clusterTimeStampPath = stat.getPath();\r\n            MutableBoolean appLogDirPresent = new MutableBoolean(false);\r\n            cleanAppLogDir(clusterTimeStampPath, retainMillis, appLogDirPresent);\r\n            if (appLogDirPresent.isFalse() && (now - stat.getModificationTime() > retainMillis)) {\r\n                deleteDir(clusterTimeStampPath);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "cleanAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void cleanAppLogDir(Path dirpath, long retainMillis, MutableBoolean appLogDirPresent) throws IOException\n{\r\n    long now = Time.now();\r\n    RemoteIterator<FileStatus> iter = list(dirpath);\r\n    while (iter.hasNext()) {\r\n        FileStatus stat = iter.next();\r\n        Path childPath = stat.getPath();\r\n        if (stat.isDirectory()) {\r\n            ApplicationId appId = parseApplicationId(childPath.getName());\r\n            if (appId != null) {\r\n                appLogDirPresent.setTrue();\r\n                if (shouldCleanAppLogDir(childPath, now, fs, retainMillis)) {\r\n                    deleteDir(childPath);\r\n                }\r\n            } else {\r\n                cleanAppLogDir(childPath, retainMillis, appLogDirPresent);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "deleteDir",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void deleteDir(Path path)\n{\r\n    try {\r\n        LOG.info(\"Deleting {}\", path);\r\n        if (fs.delete(path, true)) {\r\n            metrics.incrLogsDirsCleaned();\r\n        } else {\r\n            LOG.error(\"Unable to remove {}\", path);\r\n        }\r\n    } catch (IOException e) {\r\n        LOG.error(\"Unable to remove {}\", path, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "isValidClusterTimeStampDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isValidClusterTimeStampDir(FileStatus stat)\n{\r\n    return stat.isDirectory() && StringUtils.isNumeric(stat.getPath().getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "shouldCleanAppLogDir",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean shouldCleanAppLogDir(Path appLogPath, long now, FileSystem fs, long logRetainMillis) throws IOException\n{\r\n    RemoteIterator<FileStatus> iter = fs.listStatusIterator(appLogPath);\r\n    while (iter.hasNext()) {\r\n        FileStatus stat = iter.next();\r\n        if (now - stat.getModificationTime() <= logRetainMillis) {\r\n            LOG.debug(\"{} not being cleaned due to {}\", appLogPath, stat.getPath());\r\n            return false;\r\n        }\r\n        if (stat.isDirectory()) {\r\n            if (!shouldCleanAppLogDir(stat.getPath(), now, fs, logRetainMillis)) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "parseApplicationId",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationId parseApplicationId(String appIdStr)\n{\r\n    try {\r\n        return ApplicationId.fromString(appIdStr);\r\n    } catch (IllegalArgumentException e) {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createPluginClassLoader",
  "errType" : [ "PrivilegedActionException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ClassLoader createPluginClassLoader(final String appClasspath, final String[] systemClasses) throws IOException\n{\r\n    try {\r\n        return AccessController.doPrivileged(new PrivilegedExceptionAction<ClassLoader>() {\r\n\r\n            @Override\r\n            public ClassLoader run() throws MalformedURLException {\r\n                return new ApplicationClassLoader(appClasspath, EntityGroupFSTimelineStore.class.getClassLoader(), Arrays.asList(systemClasses));\r\n            }\r\n        });\r\n    } catch (PrivilegedActionException e) {\r\n        Throwable t = e.getCause();\r\n        if (t instanceof MalformedURLException) {\r\n            throw (MalformedURLException) t;\r\n        }\r\n        throw new IOException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getActiveAppPath",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getActiveAppPath(ApplicationId appId)\n{\r\n    return new Path(activeRootPath, appId.toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDoneAppPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getDoneAppPath(ApplicationId appId)\n{\r\n    int appNum = appId.getId();\r\n    appNum /= 1000;\r\n    int bucket2 = appNum % 1000;\r\n    int bucket1 = appNum / 1000;\r\n    return new Path(doneRootPath, String.format(APP_DONE_DIR_PREFIX_FORMAT, appId.getClusterTimestamp(), bucket1, bucket2, appId.toString()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "createAndInitYarnClient",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnClient createAndInitYarnClient(Configuration conf)\n{\r\n    YarnClient client = YarnClient.createYarnClient();\r\n    client.init(conf);\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getAppState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppState getAppState(ApplicationId appId) throws IOException\n{\r\n    return getAppState(appId, yarnClient);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getPlugins",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<TimelineEntityGroupPlugin> getPlugins()\n{\r\n    return cacheIdPlugins;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getAppState",
  "errType" : [ "ApplicationNotFoundException", "YarnException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AppState getAppState(ApplicationId appId, YarnClient yarnClient) throws IOException\n{\r\n    AppState appState = AppState.ACTIVE;\r\n    try {\r\n        ApplicationReport report = yarnClient.getApplicationReport(appId);\r\n        if (Apps.isApplicationFinalState(report.getYarnApplicationState())) {\r\n            appState = AppState.COMPLETED;\r\n        }\r\n    } catch (ApplicationNotFoundException e) {\r\n        appState = AppState.UNKNOWN;\r\n    } catch (YarnException e) {\r\n        throw new IOException(e);\r\n    }\r\n    return appState;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "extract",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Throwable extract(Exception e)\n{\r\n    Throwable t = e;\r\n    if (e instanceof UndeclaredThrowableException && e.getCause() != null) {\r\n        t = e.getCause();\r\n    }\r\n    return t;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setFs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFs(FileSystem incomingFs)\n{\r\n    this.fs = incomingFs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "setCachedLogs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setCachedLogs(TimelineEntityGroupId groupId, EntityCacheItem cacheItem)\n{\r\n    cachedLogs.put(groupId, cacheItem);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineStoresFromCacheIds",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "List<TimelineStore> getTimelineStoresFromCacheIds(Set<TimelineEntityGroupId> groupIds, String entityType, List<EntityCacheItem> cacheItems) throws IOException\n{\r\n    List<TimelineStore> stores = new LinkedList<TimelineStore>();\r\n    for (TimelineEntityGroupId groupId : groupIds) {\r\n        TimelineStore storeForId = getCachedStore(groupId, cacheItems);\r\n        if (storeForId != null) {\r\n            LOG.debug(\"Adding {} as a store for the query\", storeForId.getName());\r\n            stores.add(storeForId);\r\n            metrics.incrGetEntityToDetailOps();\r\n        }\r\n    }\r\n    if (stores.size() == 0) {\r\n        LOG.debug(\"Using summary store for {}\", entityType);\r\n        stores.add(this.summaryStore);\r\n        metrics.incrGetEntityToSummaryOps();\r\n    }\r\n    return stores;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineStoresForRead",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<TimelineStore> getTimelineStoresForRead(String entityId, String entityType, List<EntityCacheItem> cacheItems) throws IOException\n{\r\n    Set<TimelineEntityGroupId> groupIds = new HashSet<TimelineEntityGroupId>();\r\n    for (TimelineEntityGroupPlugin cacheIdPlugin : cacheIdPlugins) {\r\n        LOG.debug(\"Trying plugin {} for id {} and type {}\", cacheIdPlugin.getClass().getName(), entityId, entityType);\r\n        Set<TimelineEntityGroupId> idsFromPlugin = cacheIdPlugin.getTimelineEntityGroupId(entityId, entityType);\r\n        if (idsFromPlugin == null) {\r\n            LOG.debug(\"Plugin returned null \" + cacheIdPlugin.getClass().getName());\r\n        } else {\r\n            LOG.debug(\"Plugin returned ids: \" + idsFromPlugin);\r\n        }\r\n        if (idsFromPlugin != null) {\r\n            groupIds.addAll(idsFromPlugin);\r\n            LOG.debug(\"plugin {} returns a non-null value on query\", cacheIdPlugin.getClass().getName());\r\n        }\r\n    }\r\n    return getTimelineStoresFromCacheIds(groupIds, entityType, cacheItems);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getTimelineStoresForRead",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<TimelineStore> getTimelineStoresForRead(String entityType, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilters, List<EntityCacheItem> cacheItems) throws IOException\n{\r\n    Set<TimelineEntityGroupId> groupIds = new HashSet<TimelineEntityGroupId>();\r\n    for (TimelineEntityGroupPlugin cacheIdPlugin : cacheIdPlugins) {\r\n        Set<TimelineEntityGroupId> idsFromPlugin = cacheIdPlugin.getTimelineEntityGroupId(entityType, primaryFilter, secondaryFilters);\r\n        if (idsFromPlugin != null) {\r\n            LOG.debug(\"plugin {} returns a non-null value on query {}\", cacheIdPlugin.getClass().getName(), idsFromPlugin);\r\n            groupIds.addAll(idsFromPlugin);\r\n        }\r\n    }\r\n    return getTimelineStoresFromCacheIds(groupIds, entityType, cacheItems);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getCachedStore",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "TimelineStore getCachedStore(TimelineEntityGroupId groupId, List<EntityCacheItem> cacheItems) throws IOException\n{\r\n    EntityCacheItem cacheItem;\r\n    synchronized (this.cachedLogs) {\r\n        cacheItem = this.cachedLogs.get(groupId);\r\n        if (cacheItem == null) {\r\n            LOG.debug(\"Set up new cache item for id {}\", groupId);\r\n            cacheItem = new EntityCacheItem(groupId, getConfig());\r\n            AppLogs appLogs = getAndSetAppLogs(groupId.getApplicationId());\r\n            if (appLogs != null) {\r\n                LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\r\n                cacheItem.setAppLogs(appLogs);\r\n                this.cachedLogs.put(groupId, cacheItem);\r\n            } else {\r\n                LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\r\n            }\r\n        }\r\n    }\r\n    TimelineStore store = null;\r\n    if (cacheItem.getAppLogs() != null) {\r\n        AppLogs appLogs = cacheItem.getAppLogs();\r\n        LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\r\n        cacheItems.add(cacheItem);\r\n        store = cacheItem.refreshCache(aclManager, metrics);\r\n    } else {\r\n        LOG.warn(\"AppLogs for group id {} is null\", groupId);\r\n    }\r\n    return store;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntities",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelineEntities getEntities(String entityType, Long limit, Long windowStart, Long windowEnd, String fromId, Long fromTs, NameValuePair primaryFilter, Collection<NameValuePair> secondaryFilters, EnumSet<Field> fieldsToRetrieve, CheckAcl checkAcl) throws IOException\n{\r\n    LOG.debug(\"getEntities type={} primary={}\", entityType, primaryFilter);\r\n    List<EntityCacheItem> relatedCacheItems = new ArrayList<>();\r\n    List<TimelineStore> stores = getTimelineStoresForRead(entityType, primaryFilter, secondaryFilters, relatedCacheItems);\r\n    TimelineEntities returnEntities = new TimelineEntities();\r\n    for (TimelineStore store : stores) {\r\n        LOG.debug(\"Try timeline store {} for the request\", store.getName());\r\n        TimelineEntities entities = store.getEntities(entityType, limit, windowStart, windowEnd, fromId, fromTs, primaryFilter, secondaryFilters, fieldsToRetrieve, checkAcl);\r\n        if (entities != null) {\r\n            returnEntities.addEntities(entities.getEntities());\r\n        }\r\n    }\r\n    return returnEntities;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntity",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelineEntity getEntity(String entityId, String entityType, EnumSet<Field> fieldsToRetrieve) throws IOException\n{\r\n    LOG.debug(\"getEntity type={} id={}\", entityType, entityId);\r\n    List<EntityCacheItem> relatedCacheItems = new ArrayList<>();\r\n    List<TimelineStore> stores = getTimelineStoresForRead(entityId, entityType, relatedCacheItems);\r\n    for (TimelineStore store : stores) {\r\n        LOG.debug(\"Try timeline store {}:{} for the request\", store.getName(), store.toString());\r\n        TimelineEntity e = store.getEntity(entityId, entityType, fieldsToRetrieve);\r\n        if (e != null) {\r\n            return e;\r\n        }\r\n    }\r\n    LOG.debug(\"getEntity: Found nothing\");\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getEntityTimelines",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "TimelineEvents getEntityTimelines(String entityType, SortedSet<String> entityIds, Long limit, Long windowStart, Long windowEnd, Set<String> eventTypes) throws IOException\n{\r\n    LOG.debug(\"getEntityTimelines type={} ids={}\", entityType, entityIds);\r\n    TimelineEvents returnEvents = new TimelineEvents();\r\n    List<EntityCacheItem> relatedCacheItems = new ArrayList<>();\r\n    if (entityIds == null || entityIds.isEmpty()) {\r\n        return returnEvents;\r\n    }\r\n    for (String entityId : entityIds) {\r\n        LOG.debug(\"getEntityTimeline type={} id={}\", entityType, entityId);\r\n        List<TimelineStore> stores = getTimelineStoresForRead(entityId, entityType, relatedCacheItems);\r\n        for (TimelineStore store : stores) {\r\n            LOG.debug(\"Try timeline store {}:{} for the request\", store.getName(), store.toString());\r\n            SortedSet<String> entityIdSet = new TreeSet<>();\r\n            entityIdSet.add(entityId);\r\n            TimelineEvents events = store.getEntityTimelines(entityType, entityIdSet, limit, windowStart, windowEnd, eventTypes);\r\n            if (events != null) {\r\n                returnEvents.addEvents(events.getAllEvents());\r\n            }\r\n        }\r\n    }\r\n    return returnEvents;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineDomain getDomain(String domainId) throws IOException\n{\r\n    return summaryStore.getDomain(domainId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "getDomains",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineDomains getDomains(String owner) throws IOException\n{\r\n    return summaryStore.getDomains(owner);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "put",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelinePutResponse put(TimelineEntities data) throws IOException\n{\r\n    return summaryStore.put(data);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "put",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void put(TimelineDomain domain) throws IOException\n{\r\n    summaryStore.put(domain);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    configuration = conf;\r\n    Options options = new Options();\r\n    options.createIfMissing(true);\r\n    options.cacheSize(conf.getLong(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_CACHE_READ_CACHE_SIZE, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_LEVELDB_CACHE_READ_CACHE_SIZE));\r\n    JniDBFactory factory = new JniDBFactory();\r\n    Path dbPath = new Path(conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), dbId + CACHED_LDB_FILE_PREFIX);\r\n    FileSystem localFS = null;\r\n    try {\r\n        localFS = FileSystem.getLocal(conf);\r\n        if (!localFS.exists(dbPath)) {\r\n            if (!localFS.mkdirs(dbPath)) {\r\n                throw new IOException(\"Couldn't create directory for leveldb \" + \"timeline store \" + dbPath);\r\n            }\r\n            localFS.setPermission(dbPath, LeveldbUtils.LEVELDB_DIR_UMASK);\r\n        }\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, localFS);\r\n    }\r\n    LOG.info(\"Using leveldb path \" + dbPath);\r\n    entityDb = factory.open(new File(dbPath.toString()), options);\r\n    entities = new LevelDBMapAdapter<>(entityDb);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-timeline-pluginstorage\\src\\main\\java\\org\\apache\\hadoop\\yarn\\server\\timeline",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    IOUtils.cleanupWithLogger(LOG, entityDb);\r\n    Path dbPath = new Path(configuration.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH), dbId + CACHED_LDB_FILE_PREFIX);\r\n    FileSystem localFS = null;\r\n    try {\r\n        localFS = FileSystem.getLocal(configuration);\r\n        if (!localFS.delete(dbPath, true)) {\r\n            throw new IOException(\"Couldn't delete data file for leveldb \" + \"timeline store \" + dbPath);\r\n        }\r\n    } finally {\r\n        IOUtils.cleanupWithLogger(LOG, localFS);\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
} ]