[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getOrg",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getOrg()\n{\r\n    return org;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setOrg",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOrg(String org)\n{\r\n    this.org = org;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getDesc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDesc()\n{\r\n    return desc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setDesc",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDesc(String desc)\n{\r\n    this.desc = desc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getLike",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLike()\n{\r\n    return like;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setLike",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setLike(long like)\n{\r\n    this.like = like;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getDownload",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getDownload()\n{\r\n    return download;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setDownload",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDownload(long download)\n{\r\n    this.download = download;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service getApp()\n{\r\n    return app;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApp(Service app)\n{\r\n    this.app = app;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getIcon",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getIcon()\n{\r\n    return icon;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setIcon",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setIcon(String icon)\n{\r\n    this.icon = icon;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "getClasses",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Set<Class<?>> getClasses()\n{\r\n    final Set<Class<?>> resources = new java.util.HashSet<>();\r\n    try {\r\n        final Class<?> jsonProvider = Class.forName(\"org.glassfish.jersey.jackson.JacksonFeature\");\r\n        resources.add(jsonProvider);\r\n    } catch (final ClassNotFoundException ex) {\r\n        ex.printStackTrace();\r\n    }\r\n    addRestResourceClasses(resources);\r\n    return resources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "addRestResourceClasses",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addRestResourceClasses(final Set<Class<?>> resources)\n{\r\n    resources.add(AppDetailsController.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getOrganization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getOrganization()\n{\r\n    return organization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setOrganization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOrganization(String organization)\n{\r\n    this.organization = organization;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getDescription",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getDescription()\n{\r\n    return description;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setDescription",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setDescription(String description)\n{\r\n    this.description = description;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getIcon",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getIcon()\n{\r\n    return icon;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setIcon",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setIcon(String icon)\n{\r\n    this.icon = icon;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "equals",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean equals(final Object obj)\n{\r\n    if (obj == this) {\r\n        return true;\r\n    } else if ((obj instanceof Application)) {\r\n        if (((Application) obj).getName().equals(this.getName()) && ((Application) obj).getVersion().equals(this.getVersion()) && ((Application) obj).getOrganization().equals(this.getOrganization())) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "hashCode",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int hashCode()\n{\r\n    return Objects.hash(this.getName() + this.getVersion() + this.getOrganization());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getImage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getImage()\n{\r\n    return image;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setImage",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setImage(String image)\n{\r\n    this.image = image;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getVersion()\n{\r\n    return version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setVersion(String version)\n{\r\n    this.version = version;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getPorts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] getPorts()\n{\r\n    return ports.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setPorts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setPorts(String[] ports2)\n{\r\n    this.ports = ports2.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getVolumes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] getVolumes()\n{\r\n    return volumes.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setVolumes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setVolumes(String[] volumes)\n{\r\n    this.volumes = volumes.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getEnv",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] getEnv()\n{\r\n    return env.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setEnv",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setEnv(String[] env)\n{\r\n    this.env = env.clone();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "contextInitialized",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void contextInitialized(ServletContextEvent sce)\n{\r\n    Configuration conf = new Configuration();\r\n    if (!HadoopKerberosName.hasRulesBeenSet()) {\r\n        try {\r\n            HadoopKerberosName.setConfiguration(conf);\r\n        } catch (IOException e) {\r\n            LOG.error(\"Application Catalog initialization failed:\", e);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "contextDestroyed",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void contextDestroyed(ServletContextEvent sce)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "getDetails",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppEntry getDetails(@PathParam(\"id\") String id)\n{\r\n    AppCatalogSolrClient sc = new AppCatalogSolrClient();\r\n    return sc.findAppEntry(id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "getStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AppEntry getStatus(@PathParam(\"id\") String id)\n{\r\n    AppCatalogSolrClient sc = new AppCatalogSolrClient();\r\n    AppEntry appEntry = sc.findAppEntry(id);\r\n    YarnServiceClient yc = new YarnServiceClient();\r\n    yc.getStatus(appEntry);\r\n    return appEntry;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "stopApp",
  "errType" : [ "JsonProcessingException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Response stopApp(@PathParam(\"id\") String id)\n{\r\n    AppCatalogSolrClient sc = new AppCatalogSolrClient();\r\n    AppEntry app = sc.findAppEntry(id);\r\n    Service yarnApp = app.getYarnfile();\r\n    yarnApp.setState(ServiceState.STOPPED);\r\n    try {\r\n        YarnServiceClient yc = new YarnServiceClient();\r\n        yc.stopApp(yarnApp);\r\n    } catch (JsonProcessingException e) {\r\n        return Response.status(Status.BAD_REQUEST).build();\r\n    }\r\n    return Response.ok().build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "restartApp",
  "errType" : [ "JsonProcessingException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Response restartApp(@PathParam(\"id\") String id)\n{\r\n    AppCatalogSolrClient sc = new AppCatalogSolrClient();\r\n    AppEntry app = sc.findAppEntry(id);\r\n    Service yarnApp = app.getYarnfile();\r\n    yarnApp.setState(ServiceState.STARTED);\r\n    try {\r\n        YarnServiceClient yc = new YarnServiceClient();\r\n        yc.restartApp(yarnApp);\r\n    } catch (JsonProcessingException e) {\r\n        return Response.status(Status.BAD_REQUEST).build();\r\n    }\r\n    return Response.ok().build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "upgradeApp",
  "errType" : [ "IOException|SolrServerException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Response upgradeApp(@PathParam(\"id\") String id, Service app)\n{\r\n    try {\r\n        AppCatalogSolrClient sc = new AppCatalogSolrClient();\r\n        sc.upgradeApp(app);\r\n        YarnServiceClient yc = new YarnServiceClient();\r\n        yc.upgradeApp(app);\r\n    } catch (IOException | SolrServerException e) {\r\n        return Response.status(Status.BAD_REQUEST).entity(e.toString()).build();\r\n    }\r\n    String output = \"{\\\"status\\\":\\\"Application upgrade requested.\\\",\\\"id\\\":\\\"\" + app.getName() + \"\\\"}\";\r\n    return Response.status(Status.ACCEPTED).entity(output).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getId()\n{\r\n    return id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setId",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setId(String id)\n{\r\n    this.id = id;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getName()\n{\r\n    return name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setName(String name)\n{\r\n    this.name = name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getApp()\n{\r\n    return app;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setApp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApp(String app)\n{\r\n    this.app = app;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "getYarnfile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Service getYarnfile()\n{\r\n    return yarnfile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\model",
  "methodName" : "setYarnfile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setYarnfile(Service yarnfile)\n{\r\n    this.yarnfile = yarnfile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<AppStoreEntry> get()\n{\r\n    AppCatalogSolrClient sc = new AppCatalogSolrClient();\r\n    return sc.getRecommendedApps();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "search",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<AppStoreEntry> search(@QueryParam(\"q\") String keyword)\n{\r\n    AppCatalogSolrClient sc = new AppCatalogSolrClient();\r\n    return sc.search(keyword);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AppStoreEntry get(@PathParam(\"id\") String id)\n{\r\n    AppCatalogSolrClient sc = new AppCatalogSolrClient();\r\n    return sc.findAppStoreEntry(id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "register",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Response register(Application app)\n{\r\n    try {\r\n        if (app.getName() == null) {\r\n            throw new IOException(\"Application name can not be empty.\");\r\n        }\r\n        if (app.getOrganization() == null) {\r\n            throw new IOException(\"Application organization can not be empty.\");\r\n        }\r\n        if (app.getDescription() == null) {\r\n            throw new IOException(\"Application description can not be empty.\");\r\n        }\r\n        AppCatalogSolrClient sc = new AppCatalogSolrClient();\r\n        sc.register(app);\r\n    } catch (IOException e) {\r\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage()).build();\r\n    }\r\n    return Response.status(Status.ACCEPTED).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "setSolrUrl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSolrUrl(String url)\n{\r\n    urlString = url;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "getSolrClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SolrClient getSolrClient()\n{\r\n    return new HttpSolrClient.Builder(urlString).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "getRecommendedApps",
  "errType" : [ "SolrServerException|IOException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "List<AppStoreEntry> getRecommendedApps()\n{\r\n    List<AppStoreEntry> apps = new ArrayList<AppStoreEntry>();\r\n    SolrClient solr = getSolrClient();\r\n    SolrQuery query = new SolrQuery();\r\n    query.setQuery(\"*:*\");\r\n    query.setSort(\"download_i\", ORDER.desc);\r\n    query.setFilterQueries(\"type_s:AppStoreEntry\");\r\n    query.setRows(40);\r\n    QueryResponse response;\r\n    try {\r\n        response = solr.query(query);\r\n        Iterator<SolrDocument> list = response.getResults().listIterator();\r\n        while (list.hasNext()) {\r\n            SolrDocument d = list.next();\r\n            AppStoreEntry entry = new AppStoreEntry();\r\n            entry.setId(d.get(\"id\").toString());\r\n            entry.setOrg(d.get(\"org_s\").toString());\r\n            entry.setName(d.get(\"name_s\").toString());\r\n            entry.setDesc(d.get(\"desc_s\").toString());\r\n            if (d.get(\"icon_s\") != null) {\r\n                entry.setIcon(d.get(\"icon_s\").toString());\r\n            }\r\n            entry.setLike(Integer.parseInt(d.get(\"like_i\").toString()));\r\n            entry.setDownload(Integer.parseInt(d.get(\"download_i\").toString()));\r\n            apps.add(entry);\r\n        }\r\n    } catch (SolrServerException | IOException e) {\r\n        LOG.error(\"Error getting a list of recommended applications: \", e);\r\n    }\r\n    return apps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "search",
  "errType" : [ "SolrServerException|IOException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "List<AppStoreEntry> search(String keyword)\n{\r\n    List<AppStoreEntry> apps = new ArrayList<AppStoreEntry>();\r\n    SolrClient solr = getSolrClient();\r\n    SolrQuery query = new SolrQuery();\r\n    if (keyword.length() == 0) {\r\n        query.setQuery(\"*:*\");\r\n        query.setFilterQueries(\"type_s:AppStoreEntry\");\r\n    } else {\r\n        query.setQuery(keyword);\r\n        query.setFilterQueries(\"type_s:AppStoreEntry\");\r\n    }\r\n    query.setRows(40);\r\n    QueryResponse response;\r\n    try {\r\n        response = solr.query(query);\r\n        Iterator<SolrDocument> list = response.getResults().listIterator();\r\n        while (list.hasNext()) {\r\n            SolrDocument d = list.next();\r\n            AppStoreEntry entry = new AppStoreEntry();\r\n            entry.setId(d.get(\"id\").toString());\r\n            entry.setOrg(d.get(\"org_s\").toString());\r\n            entry.setName(d.get(\"name_s\").toString());\r\n            entry.setDesc(d.get(\"desc_s\").toString());\r\n            entry.setLike(Integer.parseInt(d.get(\"like_i\").toString()));\r\n            entry.setDownload(Integer.parseInt(d.get(\"download_i\").toString()));\r\n            apps.add(entry);\r\n        }\r\n    } catch (SolrServerException | IOException e) {\r\n        LOG.error(\"Error in searching for applications: \", e);\r\n    }\r\n    return apps;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "listAppEntries",
  "errType" : [ "SolrServerException|IOException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "List<AppEntry> listAppEntries()\n{\r\n    List<AppEntry> list = new ArrayList<AppEntry>();\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    SolrClient solr = getSolrClient();\r\n    SolrQuery query = new SolrQuery();\r\n    query.setQuery(\"*:*\");\r\n    query.setFilterQueries(\"type_s:AppEntry\");\r\n    query.setRows(40);\r\n    QueryResponse response;\r\n    try {\r\n        response = solr.query(query);\r\n        Iterator<SolrDocument> appList = response.getResults().listIterator();\r\n        while (appList.hasNext()) {\r\n            SolrDocument d = appList.next();\r\n            AppEntry entry = new AppEntry();\r\n            entry.setId(d.get(\"id\").toString());\r\n            entry.setName(d.get(\"name_s\").toString());\r\n            entry.setApp(d.get(\"app_s\").toString());\r\n            entry.setYarnfile(mapper.readValue(d.get(\"yarnfile_s\").toString(), Service.class));\r\n            list.add(entry);\r\n        }\r\n    } catch (SolrServerException | IOException e) {\r\n        LOG.error(\"Error in listing deployed applications: \", e);\r\n    }\r\n    return list;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "findAppStoreEntry",
  "errType" : [ "SolrServerException|IOException", "WordLengthException" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "AppStoreEntry findAppStoreEntry(String id)\n{\r\n    AppStoreEntry entry = new AppStoreEntry();\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    SolrClient solr = getSolrClient();\r\n    SolrQuery query = new SolrQuery();\r\n    query.setQuery(\"id:\" + id);\r\n    query.setFilterQueries(\"type_s:AppStoreEntry\");\r\n    query.setRows(1);\r\n    QueryResponse response;\r\n    try {\r\n        response = solr.query(query);\r\n        Iterator<SolrDocument> appList = response.getResults().listIterator();\r\n        while (appList.hasNext()) {\r\n            SolrDocument d = appList.next();\r\n            entry.setId(d.get(\"id\").toString());\r\n            entry.setOrg(d.get(\"org_s\").toString());\r\n            entry.setName(d.get(\"name_s\").toString());\r\n            entry.setDesc(d.get(\"desc_s\").toString());\r\n            entry.setLike(Integer.parseInt(d.get(\"like_i\").toString()));\r\n            entry.setDownload(Integer.parseInt(d.get(\"download_i\").toString()));\r\n            Service yarnApp = mapper.readValue(d.get(\"yarnfile_s\").toString(), Service.class);\r\n            String name;\r\n            try {\r\n                Random r = new Random();\r\n                int low = 3;\r\n                int high = 10;\r\n                int seed = r.nextInt(high - low) + low;\r\n                int seed2 = r.nextInt(high - low) + low;\r\n                name = RandomWord.getNewWord(seed).toLowerCase() + \"-\" + RandomWord.getNewWord(seed2).toLowerCase();\r\n            } catch (WordLengthException e) {\r\n                name = \"c\" + java.util.UUID.randomUUID().toString().substring(0, 11);\r\n            }\r\n            yarnApp.setName(name);\r\n            entry.setApp(yarnApp);\r\n        }\r\n    } catch (SolrServerException | IOException e) {\r\n        LOG.error(\"Error in finding deployed application: \" + id, e);\r\n    }\r\n    return entry;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "findAppEntry",
  "errType" : [ "SolrServerException|IOException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "AppEntry findAppEntry(String id)\n{\r\n    AppEntry entry = new AppEntry();\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    SolrClient solr = getSolrClient();\r\n    SolrQuery query = new SolrQuery();\r\n    query.setQuery(\"id:\" + id);\r\n    query.setFilterQueries(\"type_s:AppEntry\");\r\n    query.setRows(1);\r\n    QueryResponse response;\r\n    try {\r\n        response = solr.query(query);\r\n        Iterator<SolrDocument> appList = response.getResults().listIterator();\r\n        while (appList.hasNext()) {\r\n            SolrDocument d = appList.next();\r\n            entry.setId(d.get(\"id\").toString());\r\n            entry.setApp(d.get(\"app_s\").toString());\r\n            entry.setName(d.get(\"name_s\").toString());\r\n            entry.setYarnfile(mapper.readValue(d.get(\"yarnfile_s\").toString(), Service.class));\r\n        }\r\n    } catch (SolrServerException | IOException e) {\r\n        LOG.error(\"Error in finding deployed application: \" + id, e);\r\n    }\r\n    return entry;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "deployApp",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void deployApp(String id, Service service) throws SolrServerException, IOException\n{\r\n    long download = 0;\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    Collection<SolrInputDocument> docs = new HashSet<SolrInputDocument>();\r\n    SolrClient solr = getSolrClient();\r\n    SolrQuery query = new SolrQuery();\r\n    query.setQuery(\"id:\" + id);\r\n    query.setFilterQueries(\"type_s:AppStoreEntry\");\r\n    query.setRows(1);\r\n    QueryResponse response = solr.query(query);\r\n    Iterator<SolrDocument> appList = response.getResults().listIterator();\r\n    AppStoreEntry entry = new AppStoreEntry();\r\n    while (appList.hasNext()) {\r\n        SolrDocument d = appList.next();\r\n        entry.setOrg(d.get(\"org_s\").toString());\r\n        entry.setName(d.get(\"name_s\").toString());\r\n        entry.setDesc(d.get(\"desc_s\").toString());\r\n        entry.setLike(Integer.parseInt(d.get(\"like_i\").toString()));\r\n        entry.setDownload(Integer.parseInt(d.get(\"download_i\").toString()));\r\n        download = entry.getDownload() + 1;\r\n        docs.add(incrementDownload(d, download));\r\n    }\r\n    if (service != null) {\r\n        SolrInputDocument request = new SolrInputDocument();\r\n        String name = service.getName();\r\n        request.addField(\"type_s\", \"AppEntry\");\r\n        request.addField(\"id\", name);\r\n        request.addField(\"name_s\", name);\r\n        request.addField(\"app_s\", entry.getOrg() + \"/\" + entry.getName());\r\n        request.addField(\"yarnfile_s\", mapper.writeValueAsString(service));\r\n        docs.add(request);\r\n    }\r\n    try {\r\n        commitSolrChanges(solr, docs);\r\n    } catch (IOException e) {\r\n        throw new IOException(\"Unable to register docker instance \" + \"with application entry.\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "incrementDownload",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SolrInputDocument incrementDownload(SolrDocument doc, long download)\n{\r\n    Collection<String> names = doc.getFieldNames();\r\n    SolrInputDocument s = new SolrInputDocument();\r\n    for (String name : names) {\r\n        if (!name.equals(\"_version_\")) {\r\n            s.addField(name, doc.getFieldValues(name));\r\n        }\r\n    }\r\n    download++;\r\n    s.setField(\"download_i\", download);\r\n    return s;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "deleteApp",
  "errType" : [ "SolrServerException|IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void deleteApp(String id)\n{\r\n    SolrClient solr = getSolrClient();\r\n    try {\r\n        solr.deleteById(id);\r\n        solr.commit();\r\n    } catch (SolrServerException | IOException e) {\r\n        LOG.error(\"Error in removing deployed application: \" + id, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "register",
  "errType" : [ "SolrServerException|IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void register(Application app) throws IOException\n{\r\n    Collection<SolrInputDocument> docs = new HashSet<SolrInputDocument>();\r\n    SolrClient solr = getSolrClient();\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    try {\r\n        SolrInputDocument buffer = new SolrInputDocument();\r\n        buffer.setField(\"id\", java.util.UUID.randomUUID().toString().substring(0, 11));\r\n        buffer.setField(\"org_s\", app.getOrganization());\r\n        buffer.setField(\"name_s\", app.getName());\r\n        buffer.setField(\"desc_s\", app.getDescription());\r\n        if (app.getIcon() != null) {\r\n            buffer.setField(\"icon_s\", app.getIcon());\r\n        }\r\n        buffer.setField(\"type_s\", \"AppStoreEntry\");\r\n        buffer.setField(\"like_i\", 0);\r\n        buffer.setField(\"download_i\", 0);\r\n        String yarnFile = mapper.writeValueAsString(app);\r\n        LOG.info(\"app:\" + yarnFile);\r\n        Service yarnApp = mapper.readValue(yarnFile, Service.class);\r\n        buffer.setField(\"yarnfile_s\", mapper.writeValueAsString(yarnApp));\r\n        docs.add(buffer);\r\n        commitSolrChanges(solr, docs);\r\n    } catch (SolrServerException | IOException e) {\r\n        throw new IOException(\"Unable to register application \" + \"in Application Store. \", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "register",
  "errType" : [ "SolrServerException|IOException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void register(AppStoreEntry app) throws IOException\n{\r\n    Collection<SolrInputDocument> docs = new HashSet<SolrInputDocument>();\r\n    SolrClient solr = getSolrClient();\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    try {\r\n        SolrInputDocument buffer = new SolrInputDocument();\r\n        buffer.setField(\"id\", java.util.UUID.randomUUID().toString().substring(0, 11));\r\n        buffer.setField(\"org_s\", app.getOrg());\r\n        buffer.setField(\"name_s\", app.getName());\r\n        buffer.setField(\"desc_s\", app.getDesc());\r\n        if (app.getIcon() != null) {\r\n            buffer.setField(\"icon_s\", app.getIcon());\r\n        }\r\n        buffer.setField(\"type_s\", \"AppStoreEntry\");\r\n        buffer.setField(\"like_i\", app.getLike());\r\n        buffer.setField(\"download_i\", app.getDownload());\r\n        String yarnFile = mapper.writeValueAsString(app);\r\n        LOG.info(\"app:\" + yarnFile);\r\n        Service yarnApp = mapper.readValue(yarnFile, Service.class);\r\n        buffer.setField(\"yarnfile_s\", mapper.writeValueAsString(yarnApp));\r\n        docs.add(buffer);\r\n        commitSolrChanges(solr, docs);\r\n    } catch (SolrServerException | IOException e) {\r\n        throw new IOException(\"Unable to register application \" + \"in Application Store. \", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "upgradeApp",
  "errType" : [ "SolrServerException|IOException", "IOException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void upgradeApp(Service service) throws IOException, SolrServerException\n{\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    Collection<SolrInputDocument> docs = new HashSet<SolrInputDocument>();\r\n    SolrClient solr = getSolrClient();\r\n    if (service != null) {\r\n        String name = service.getName();\r\n        String app = \"\";\r\n        SolrQuery query = new SolrQuery();\r\n        query.setQuery(\"id:\" + name);\r\n        query.setFilterQueries(\"type_s:AppEntry\");\r\n        query.setRows(1);\r\n        QueryResponse response;\r\n        try {\r\n            response = solr.query(query);\r\n            Iterator<SolrDocument> appList = response.getResults().listIterator();\r\n            while (appList.hasNext()) {\r\n                SolrDocument d = appList.next();\r\n                app = d.get(\"app_s\").toString();\r\n            }\r\n        } catch (SolrServerException | IOException e) {\r\n            LOG.error(\"Error in finding deployed application: \" + name, e);\r\n        }\r\n        SolrInputDocument request = new SolrInputDocument();\r\n        request.addField(\"type_s\", \"AppEntry\");\r\n        request.addField(\"id\", name);\r\n        request.addField(\"name_s\", name);\r\n        request.addField(\"app_s\", app);\r\n        request.addField(\"yarnfile_s\", mapper.writeValueAsString(service));\r\n        docs.add(request);\r\n    }\r\n    try {\r\n        commitSolrChanges(solr, docs);\r\n    } catch (IOException e) {\r\n        throw new IOException(\"Unable to register docker instance \" + \"with application entry.\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "commitSolrChanges",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void commitSolrChanges(SolrClient solr, Collection<SolrInputDocument> docs) throws IOException, SolrServerException\n{\r\n    UpdateResponse detailsResponse = solr.add(docs);\r\n    if (detailsResponse.getStatus() != 0) {\r\n        throw new IOException(\"Failed to commit document in solr, status code: \" + detailsResponse.getStatus());\r\n    }\r\n    solr.commit();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "getClientConfig",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ClientConfig getClientConfig()\n{\r\n    ClientConfig config = new DefaultClientConfig();\r\n    config.getProperties().put(ClientConfig.PROPERTY_CHUNKED_ENCODING_SIZE, 0);\r\n    config.getProperties().put(ClientConfig.PROPERTY_BUFFER_RESPONSE_ENTITY_ON_EXCEPTION, true);\r\n    return config;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "createApp",
  "errType" : [ "UniformInterfaceException|ClientHandlerException|IOException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void createApp(Service app)\n{\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    ClientResponse response;\r\n    try {\r\n        boolean useKerberos = UserGroupInformation.isSecurityEnabled();\r\n        if (useKerberos) {\r\n            KerberosPrincipal kerberos = new KerberosPrincipal();\r\n            String[] temp = System.getenv(\"PRINCIPAL\").split(\"@\");\r\n            String[] temp2 = temp[0].split(\"/\");\r\n            StringBuilder sb = new StringBuilder();\r\n            sb.append(temp2[0]);\r\n            sb.append(\"/\");\r\n            sb.append(\"_HOST\");\r\n            sb.append(\"@\");\r\n            sb.append(temp[1]);\r\n            String keytab = System.getenv(\"KEYTAB\");\r\n            if (!keytab.startsWith(\"file://\")) {\r\n                keytab = \"file://\" + keytab;\r\n            }\r\n            kerberos.setPrincipalName(sb.toString());\r\n            kerberos.setKeytab(keytab);\r\n            app.setKerberosPrincipal(kerberos);\r\n        }\r\n        response = asc.getApiClient().post(ClientResponse.class, mapper.writeValueAsString(app));\r\n        if (response.getStatus() >= 299) {\r\n            String message = response.getEntity(String.class);\r\n            throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatus() + \" error: \" + message);\r\n        }\r\n    } catch (UniformInterfaceException | ClientHandlerException | IOException e) {\r\n        LOG.error(\"Error in deploying application: \", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "deleteApp",
  "errType" : [ "UniformInterfaceException|ClientHandlerException|IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void deleteApp(String appInstanceId)\n{\r\n    ClientResponse response;\r\n    try {\r\n        response = asc.getApiClient(asc.getServicePath(appInstanceId)).delete(ClientResponse.class);\r\n        if (response.getStatus() >= 299) {\r\n            String message = response.getEntity(String.class);\r\n            throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatus() + \" error: \" + message);\r\n        }\r\n    } catch (UniformInterfaceException | ClientHandlerException | IOException e) {\r\n        LOG.error(\"Error in deleting application: \", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "restartApp",
  "errType" : [ "UniformInterfaceException|ClientHandlerException|IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void restartApp(Service app) throws JsonProcessingException\n{\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    String appInstanceId = app.getName();\r\n    String yarnFile = mapper.writeValueAsString(app);\r\n    ClientResponse response;\r\n    try {\r\n        response = asc.getApiClient(asc.getServicePath(appInstanceId)).put(ClientResponse.class, yarnFile);\r\n        if (response.getStatus() >= 299) {\r\n            String message = response.getEntity(String.class);\r\n            throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatus() + \" error: \" + message);\r\n        }\r\n    } catch (UniformInterfaceException | ClientHandlerException | IOException e) {\r\n        LOG.error(\"Error in restarting application: \", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "stopApp",
  "errType" : [ "UniformInterfaceException|ClientHandlerException|IOException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void stopApp(Service app) throws JsonProcessingException\n{\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    String appInstanceId = app.getName();\r\n    String yarnFile = mapper.writeValueAsString(app);\r\n    ClientResponse response;\r\n    try {\r\n        response = asc.getApiClient(asc.getServicePath(appInstanceId)).put(ClientResponse.class, yarnFile);\r\n        if (response.getStatus() >= 299) {\r\n            String message = response.getEntity(String.class);\r\n            throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatus() + \" error: \" + message);\r\n        }\r\n    } catch (UniformInterfaceException | ClientHandlerException | IOException e) {\r\n        LOG.error(\"Error in stopping application: \", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "getStatus",
  "errType" : [ "UniformInterfaceException|IOException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void getStatus(AppEntry entry)\n{\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    String appInstanceId = entry.getName();\r\n    Service app = null;\r\n    try {\r\n        String yarnFile = asc.getApiClient(asc.getServicePath(appInstanceId)).get(String.class);\r\n        app = mapper.readValue(yarnFile, Service.class);\r\n        entry.setYarnfile(app);\r\n    } catch (UniformInterfaceException | IOException e) {\r\n        LOG.error(\"Error in fetching application status: \", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "upgradeApp",
  "errType" : [ "UniformInterfaceException|ClientHandlerException|IOException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void upgradeApp(Service app) throws JsonProcessingException\n{\r\n    ObjectMapper mapper = new ObjectMapper();\r\n    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\r\n    String appInstanceId = app.getName();\r\n    app.setState(ServiceState.EXPRESS_UPGRADING);\r\n    String yarnFile = mapper.writeValueAsString(app);\r\n    ClientResponse response;\r\n    try {\r\n        response = asc.getApiClient(asc.getServicePath(appInstanceId)).put(ClientResponse.class, yarnFile);\r\n        if (response.getStatus() >= 299) {\r\n            String message = response.getEntity(String.class);\r\n            throw new RuntimeException(\"Failed : HTTP error code : \" + response.getStatus() + \" error: \" + message);\r\n        }\r\n    } catch (UniformInterfaceException | ClientHandlerException | IOException e) {\r\n        LOG.error(\"Error in stopping application: \", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\utils",
  "methodName" : "getNewWord",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getNewWord(int wordLength) throws WordLengthException\n{\r\n    if (wordLength < 3 || wordLength > 15) {\r\n        throw new WordLengthException(\"Word length error, words must be between 3 and 15 characters long.\");\r\n    }\r\n    String theNewWord = \"e\";\r\n    while (theNewWord.equals(\"e\")) {\r\n        try {\r\n            theNewWord = generateRandomWord(wordLength);\r\n        } catch (Exception e) {\r\n        }\r\n    }\r\n    return theNewWord;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\utils",
  "methodName" : "generateRandomWord",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String generateRandomWord(int wordLength)\n{\r\n    String randomWord;\r\n    String[] startBiGram = { \"TH\", \"OF\", \"AN\", \"IN\", \"TO\", \"CO\", \"BE\", \"HE\", \"RE\", \"HA\", \"WA\", \"FO\", \"WH\", \"MA\", \"WI\", \"ON\", \"HI\", \"PR\", \"ST\", \"NO\", \"IS\", \"IT\", \"SE\", \"WE\", \"AS\", \"CA\", \"DE\", \"SO\", \"MO\", \"SH\", \"DI\", \"AL\", \"AR\", \"LI\", \"WO\", \"FR\", \"PA\", \"ME\", \"AT\", \"SU\", \"BU\", \"SA\", \"FI\", \"NE\", \"CH\", \"PO\", \"HO\", \"DO\", \"OR\", \"UN\", \"LO\", \"EX\", \"BY\", \"FA\", \"LA\", \"LE\", \"PE\", \"MI\", \"SI\", \"YO\", \"TR\", \"BA\", \"GO\", \"BO\", \"GR\", \"TE\", \"EN\", \"OU\", \"RA\", \"AC\", \"FE\", \"PL\", \"CL\", \"SP\", \"BR\", \"EV\", \"TA\", \"DA\", \"AB\", \"TI\", \"RO\", \"MU\", \"EA\", \"NA\", \"SC\", \"AD\", \"GE\", \"YE\", \"AF\", \"AG\", \"UP\", \"AP\", \"DR\", \"US\", \"PU\", \"CE\", \"IF\", \"RI\", \"VI\", \"IM\", \"AM\", \"KN\", \"OP\", \"CR\", \"OT\", \"JU\", \"QU\", \"TW\", \"GA\", \"VA\", \"VE\", \"PI\", \"GI\", \"BI\", \"FL\", \"BL\", \"EL\", \"JO\", \"FU\", \"HU\", \"CU\", \"RU\", \"OV\", \"MY\", \"OB\", \"KE\", \"EF\", \"PH\", \"CI\", \"KI\", \"NI\", \"SL\", \"EM\", \"SM\", \"VO\", \"MR\", \"WR\", \"ES\", \"DU\", \"TU\", \"AU\", \"NU\", \"GU\", \"OW\", \"SY\", \"JA\", \"OC\", \"EC\", \"ED\", \"ID\", \"JE\", \"AI\", \"EI\", \"SK\", \"OL\", \"GL\", \"EQ\", \"LU\", \"AV\", \"SW\", \"AW\", \"EY\", \"TY\" };\r\n    String[] lookupBiGram = { \"TH\", \"AN\", \"IN\", \"IO\", \"EN\", \"TI\", \"FO\", \"HE\", \"HA\", \"HI\", \"TE\", \"AT\", \"ER\", \"AL\", \"WA\", \"VE\", \"CO\", \"RE\", \"IT\", \"WI\", \"ME\", \"NC\", \"ON\", \"PR\", \"AR\", \"ES\", \"EV\", \"ST\", \"EA\", \"IV\", \"EC\", \"NO\", \"OU\", \"PE\", \"IL\", \"IS\", \"MA\", \"AV\", \"OM\", \"IC\", \"GH\", \"DE\", \"AI\", \"CT\", \"IG\", \"ID\", \" OR\", \"OV\", \"UL\", \"YO\", \"BU\", \"RA\", \"FR\", \"RO\", \"WH\", \"OT\", \"BL\", \"NT\", \"UN\", \"TR\", \"HO\", \"AC\", \"TU\", \"WE\", \"CA\", \"SH\", \"UR\", \"IE\", \"PA\", \"TO\", \"EE\", \"LI\", \"RI\", \"UG\", \"AM\", \"ND\", \"US\", \"LL\", \"AS\", \"TA\", \"LE\", \"MO\", \"WO\", \"MI\", \"AB\", \"EL\", \"IA\", \"NA\", \"SS\", \"AG\", \"TT\", \"NE\", \"PL\", \" LA\", \"OS\", \"CE\", \"DI\", \"BE\", \"AP\", \"SI\", \"NI\", \"OW\", \"SO\", \"AK\", \"CH\", \"EM\", \"IM\", \"SE\", \"NS\", \"PO\", \"EI\", \"EX\", \"KI\", \"UC\", \"AD\", \"GR\", \"IR\", \"NG\", \"OP\", \"SP\", \"OL\", \"DA\", \"NL\", \"TL\", \"LO\", \"BO\", \"RS\", \"FE\", \"FI\", \"SU\", \"GE\", \"MP\", \"UA\", \"OO\", \"RT\", \"SA\", \"CR\", \"FF\", \"IK\", \"MB\", \" KE\", \"FA\", \"CI\", \"EQ\", \"AF\", \"ET\", \"AY\", \"MU\", \"UE\", \"HR\", \"TW\", \"GI\", \"OI\", \"VI\", \"CU\", \"FU\", \"ED\", \"QU\", \"UT\", \"RC\", \"OF\", \"CL\", \"FT\", \"IZ\", \"PP\", \"RG\", \"DU\", \"RM\", \"YE\", \"RL\", \"DO\", \"AU\", \"EP\", \"BA\", \"JU\", \"RD\", \"RU\", \"OG\", \"BR\", \"EF\", \"KN\", \"LS\", \"GA\", \"PI\", \"YI\", \"BI\", \"IB\", \"UB\", \"VA\", \"OC\", \"IF\", \"RN\", \"RR\", \"SC\", \"TC\", \"CK\", \"DG\", \"DR\", \"MM\", \"NN\", \"OD\", \"RV\", \"UD\", \"XP\", \"JE\", \"UM\", \"EG\", \"DL\", \"PH\", \"SL\", \"GO\", \"CC\", \"LU\", \"OA\", \"PU\", \"UI\", \"YS\", \"ZA\", \"HU\", \"MR\", \"OE\", \"SY\", \"EO\", \"TY\", \"UP\", \"FL\", \"LM\", \"NF\", \"RP\", \"OH\", \"NU\", \"XA\", \"OB\", \"VO\", \"DM\", \"GN\", \" LD\", \"PT\", \"SK\", \"WR\", \"JO\", \"LT\", \"YT\", \"UF\", \"BJ\", \"DD\", \"EY\", \"GG\", \"GL\", \"GU\", \"HT\", \"LV\", \"MS\", \"NM\", \"NV\", \"OK\", \"PM\", \"RK\", \"SW\", \"TM\", \"XC\", \"ZE\", \"AW\", \"SM\" };\r\n    String[][][] nextCharLookup = { { { \"E\", \"A\", \"I\", \"O\", \"R\" }, { \"E\", \"O\" } }, { { \"D\", \"T\", \"Y\", \"C\", \"S\", \"G\", \"N\", \"I\", \"O\", \"E\", \"A\", \"K\" }, { \"D\", \"T\", \"Y\", \"S\", \"G\", \"O\", \"E\", \"A\", \"K\" } }, { { \"G\", \"T\", \"E\", \"D\", \"S\", \"C\", \"A\", \"I\", \"K\", \"V\", \"U\", \"N\", \"F\" }, { \"G\", \"T\", \"E\", \"D\", \"S\", \"A\", \"K\" } }, { { \"N\", \"U\", \"R\" }, { \"N\", \"U\", \"R\" } }, { { \"T\", \"C\", \"D\", \"S\", \"E\", \"I\", \"G\", \"O\", \"N\", \"A\" }, { \"T\", \"D\", \"S\", \"E\", \"G\", \"O\", \"A\" } }, { { \"O\", \"N\", \"C\", \"V\", \"M\", \"L\", \"E\", \"T\", \"S\", \"A\", \"R\", \"F\" }, { \"N\", \"C\", \"M\", \"L\", \"E\", \"T\", \"S\", \"A\", \"R\", \"F\" } }, { { \"R\", \"U\", \"O\", \"L\" }, { \"R\", \"U\", \"O\", \"L\" } }, { { \"R\", \"N\", \"Y\", \"S\", \"M\", \"I\", \"A\", \"L\", \"D\", \"T\" }, { \"R\", \"N\", \"Y\", \"S\", \"M\", \"A\", \"L\", \"D\", \"T\" } }, { { \"T\", \"D\", \"V\", \"N\", \"S\", \"R\", \"P\", \"L\" }, { \"T\", \"D\", \"N\", \"S\", \"R\", \"L\" } }, { { \"S\", \"N\", \"C\", \"M\", \"L\", \"P\", \"G\", \"T\", \"R\", \"E\" }, { \"S\", \"N\", \"C\", \"M\", \"L\", \"P\", \"G\", \"T\", \"R\", \"E\" } }, { { \"R\", \"D\", \"N\", \"S\", \"M\", \"L\", \"E\", \"C\", \"A\" }, { \"R\", \"D\", \"N\", \"S\", \"M\", \"L\", \"E\", \"A\" } }, { { \"I\", \"E\", \"T\", \"H\", \"U\", \"O\", \"C\" }, { \"E\", \"H\", \"O\" } }, { { \"E\", \"S\", \"I\", \"A\", \"N\", \"Y\", \"T\", \"V\", \"M\", \"R\", \"O\", \"L\", \"G\", \"F\", \"C\" }, { \"E\", \"S\", \"A\", \"N\", \"Y\", \"T\", \"M\" } }, { { \"L\", \"S\", \"I\", \"T\", \"E\", \"U\", \"O\", \"M\", \"K\", \"F\", \"A\" }, { \"L\", \"S\", \"T\", \"E\", \"F\" } }, { { \"S\", \"Y\", \"R\", \"T\", \"N\", \"L\" }, { \"S\", \"Y\", \"R\", \"T\", \"N\", \"L\" } }, { { \"R\", \"N\", \"L\", \"S\", \"D\" }, { \"R\", \"N\", \"L\", \"S\", \"D\" } }, { { \"N\", \"M\", \"U\", \"R\", \"L\", \"V\", \"S\", \"O\" }, { \"N\", \"M\", \"U\", \"R\", \"L\", \"O\" } }, { { \"S\", \"A\", \"D\", \"N\", \"E\", \"C\", \"L\", \"T\", \"P\", \"M\", \"V\", \"G\", \"F\", \"Q\" }, { \"S\", \"A\", \"D\", \"N\", \"E\", \"L\", \"T\", \"P\", \"M\" } }, { { \"H\", \"I\", \"Y\", \"E\", \"S\", \"T\", \"A\", \"U\" }, { \"H\", \"Y\", \"E\", \"S\", \"A\" } }, { { \"T\", \"L\", \"N\", \"S\" }, { \"T\", \"L\", \"N\", \"S\" } }, { { \"N\", \"R\", \"D\", \"T\", \"S\", \"M\", \"A\" }, { \"N\", \"R\", \"D\", \"T\", \"S\", \"M\", \"A\" } }, { { \"E\", \"I\", \"H\", \"T\", \"R\", \"O\", \"L\" }, { \"E\", \"H\", \"T\" } }, { { \"S\", \"E\", \"T\", \"G\", \"A\", \"D\", \"L\", \"C\", \"V\", \"O\", \"I\", \"F\" }, { \"S\", \"E\", \"T\", \"G\", \"A\", \"D\", \"O\" } }, { { \"O\", \"E\", \"I\", \"A\" }, { \"E\", \"A\" } }, { { \"E\", \"T\", \"D\", \"Y\", \"S\", \"I\", \"R\", \"L\", \"M\", \"K\", \"G\", \"A\", \"O\", \"N\", \"C\" }, { \"E\", \"T\", \"D\", \"Y\", \"S\", \"M\", \"K\", \"A\", \"N\" } }, { { \"S\", \"T\", \"E\", \"I\", \"P\", \"U\", \"C\" }, { \"S\", \"T\", \"E\" } }, { { \"E\", \"I\" }, { \"E\" } }, { { \"A\", \"R\", \"I\", \"E\", \"O\", \"U\", \"S\" }, { \"A\", \"E\", \"O\", \"S\" } }, { { \"R\", \"S\", \"T\", \"D\", \"L\", \"C\", \"N\", \"V\", \"M\", \"K\" }, { \"R\", \"S\", \"T\", \"D\", \"L\", \"N\", \"M\" } }, { { \"E\", \"I\", \"A\" }, { \"E\" } }, { { \"T\", \"O\", \"I\", \"E\", \"A\", \"U\", \"R\", \"H\" }, { \"T\", \"E\", \"H\" } }, { { \"T\", \"W\", \"R\", \"U\", \"N\", \"M\" }, { \"T\", \"W\", \"R\", \"U\", \"N\", \"M\" } }, { { \"T\", \"L\", \"R\", \"N\", \"S\", \"G\", \"P\", \"B\" }, { \"T\", \"L\", \"R\", \"N\", \"S\", \"P\" } }, { { \"R\", \"N\", \"C\", \"A\", \"D\", \"T\", \"O\" }, { \"R\", \"N\", \"A\", \"D\", \"T\" } }, { { \"L\", \"E\", \"I\", \"Y\", \"D\", \"A\" }, { \"L\", \"E\", \"Y\", \"D\" } }, { { \"T\", \"H\", \"S\", \"I\", \"E\", \"C\", \"M\" }, { \"T\", \"H\", \"S\", \"E\", \"M\" } }, { { \"N\", \"T\", \"L\", \"K\", \"D\", \"S\", \"I\", \"G\" }, { \"N\", \"T\", \"L\", \"D\", \"S\" } }, { { \"E\", \"I\", \"A\" }, { \"E\" } }, { { \"E\", \"P\", \"M\", \"I\", \"A\" }, { \"E\" } }, { { \"A\", \"H\", \"E\", \"I\", \"T\", \"K\", \"U\", \"S\" }, { \"H\", \"E\", \"T\", \"K\", \"S\" } }, { { \"T\" }, { \"T\" } }, { { \"R\", \"N\", \"S\", \"D\", \"A\", \"V\", \"P\", \"T\", \"M\", \"L\", \"F\" }, { \"R\", \"N\", \"S\", \"D\", \"A\", \"P\", \"T\", \"M\", \"L\" } }, { { \"N\", \"D\", \"R\", \"L\", \"T\" }, { \"N\", \"D\", \"R\", \"L\", \"T\" } }, { { \"I\", \"E\", \"U\", \"S\", \"O\" }, { \"E\", \"S\", \"O\" } }, { { \"H\", \"N\", \"I\" }, { \"H\", \"N\" } }, { { \"E\" }, { \"E\" } }, { { \"E\", \"T\", \"M\", \"D\", \"S\", \"K\", \"I\", \"Y\", \"L\", \"G\", \"A\", \"R\", \"N\", \"C\" }, { \"E\", \"T\", \"M\", \"D\", \"S\", \"K\", \"Y\", \"A\", \"N\" } }, { { \"E\", \"I\" }, { \"E\" } }, { { \"D\", \"T\", \"A\", \"L\" }, { \"D\", \"T\", \"L\" } }, { { \"U\" }, { \"U\" } }, { { \"T\", \"S\", \"R\", \"I\" }, { \"T\", \"S\", \"R\" } }, { { \"T\", \"N\", \"L\", \"C\", \"I\", \"M\", \"D\", \"S\", \"R\", \"P\", \"G\", \"B\" }, { \"T\", \"N\", \"L\", \"M\", \"D\", \"S\", \"R\" } }, { { \"O\", \"E\", \"A\" }, { \"E\", \"A\" } }, { { \"M\", \"U\", \"V\", \"P\", \"N\", \"W\", \"S\", \"O\", \"L\", \"D\", \"C\", \"B\", \"A\", \"T\", \"G\" }, { \"M\", \"U\", \"P\", \"N\", \"W\", \"O\", \"L\", \"D\", \"T\" } }, { { \"I\", \"E\", \"O\", \"A\" }, { \"E\", \"O\" } }, { { \"H\", \"E\", \"T\", \"I\" }, { \"H\", \"E\" } }, { { \"E\", \"I\", \"Y\", \"O\", \"A\" }, { \"E\", \"Y\" } }, { { \"E\", \"I\", \"S\", \"R\", \"O\", \"A\", \"L\", \"Y\", \"U\", \"H\" }, { \"E\", \"S\", \"O\", \"A\", \"Y\", \"H\" } }, { { \"D\", \"T\", \"I\", \"C\", \"G\" }, { \"D\", \"T\", \"G\" } }, { { \"A\", \"I\", \"O\", \"E\", \"U\", \"Y\" }, { \"A\", \"E\", \"Y\" } }, { { \"U\", \"W\", \"S\", \"R\", \"L\", \"O\", \"M\", \"T\", \"P\", \"N\", \"D\" }, { \"U\", \"W\", \"R\", \"L\", \"O\", \"M\", \"T\", \"P\", \"N\", \"D\" } }, { { \"T\", \"E\", \"K\", \"H\", \"C\", \"R\", \"I\" }, { \"T\", \"E\", \"K\", \"H\" } }, { { \"R\", \"D\", \"A\", \"T\" }, { \"R\", \"T\" } }, { { \"R\", \"L\", \"E\", \"V\", \"S\", \"N\", \"A\" }, { \"R\", \"L\", \"E\", \"S\", \"N\", \"A\" } }, { { \"L\", \"N\", \"T\", \"R\", \"U\", \"S\", \"M\", \"P\" }, { \"L\", \"N\", \"T\", \"R\", \"S\", \"M\" } }, { { \"E\", \"O\", \"I\", \"A\" }, { \"E\", \"O\" } }, { { \"E\", \"N\", \"T\", \"S\", \"I\", \"A\", \"Y\", \"R\", \"P\", \"C\" }, { \"E\", \"N\", \"T\", \"S\", \"A\", \"Y\" } }, { { \"S\", \"N\", \"D\", \"T\", \"W\", \"V\", \"R\", \"L\", \"F\" }, { \"S\", \"N\", \"D\", \"T\", \"W\", \"R\", \"L\" } }, { { \"R\", \"T\", \"S\", \"N\", \"L\", \"I\", \"C\" }, { \"R\", \"T\", \"S\", \"N\", \"L\" } }, { { \"R\", \"O\", \"N\", \"W\", \"P\", \"M\", \"L\" }, { \"R\", \"O\", \"N\", \"W\", \"P\", \"M\", \"L\" } }, { { \"N\", \"D\", \"T\", \"M\", \"S\", \"R\", \"P\", \"L\", \"K\" }, { \"N\", \"D\", \"T\", \"M\", \"S\", \"R\", \"P\", \"L\", \"K\" } }, { { \"N\", \"T\", \"S\", \"C\", \"K\", \"G\", \"E\", \"F\", \"Z\", \"V\", \"O\", \"M\", \"A\" }, { \"N\", \"T\", \"S\", \"C\", \"G\", \"E\", \"F\", \"M\", \"A\" } }, { { \"N\", \"E\", \"C\", \"T\", \"S\", \"G\", \"A\", \"V\", \"O\", \"P\", \"M\", \"L\", \"D\", \"B\" }, { \"N\", \"E\", \"C\", \"T\", \"S\", \"G\", \"A\", \"P\", \"M\", \"L\", \"D\" } }, { { \"H\", \"G\" }, { \"H\" } }, { { \"E\", \"P\", \"I\", \"O\", \"A\" }, { \"E\" } }, { { \"E\", \"I\", \"S\", \"A\", \"U\", \"O\" }, { \"E\", \"S\", \"O\" } }, { { \"E\", \"T\", \"I\", \"S\", \"L\", \"H\" }, { \"E\", \"T\", \"S\", \"H\" } }, { { \"Y\", \"E\", \"O\", \"I\", \"S\", \"A\" }, { \"Y\", \"E\", \"S\" } }, { { \"T\", \"S\", \"E\", \"I\", \"U\", \"O\", \"K\", \"H\" }, { \"T\", \"S\", \"E\", \"O\", \"H\" } }, { { \"T\", \"N\", \"L\", \"I\", \"R\", \"K\", \"B\", \"G\", \"C\" }, { \"T\", \"N\", \"L\", \"R\" } }, { { \"S\", \"D\", \"A\", \"T\", \"C\", \"R\", \"N\", \"M\", \"G\", \"V\", \"F\" }, { \"S\", \"D\", \"A\", \"T\", \"R\", \"N\", \"M\" } }, { { \"R\", \"S\", \"V\", \"T\", \"U\", \"D\" }, { \"R\", \"T\", \"U\", \"D\" } }, { { \"R\", \"U\" }, { \"R\", \"U\" } }, { { \"N\", \"L\", \"S\", \"T\", \"C\", \"G\" }, { \"N\", \"L\", \"S\", \"T\", \"C\", \"G\" } }, { { \"L\", \"O\", \"I\" }, {} }, { { \"L\", \"Y\", \"I\", \"E\", \"F\", \"O\", \"A\", \"T\", \"S\", \"P\", \"D\" }, { \"L\", \"Y\", \"E\", \"F\", \"T\", \"S\", \"D\" } }, { { \"L\", \"N\", \"T\" }, { \"L\", \"N\", \"T\" } }, { { \"L\", \"T\", \"R\", \"N\", \"M\" }, { \"L\", \"T\", \"R\", \"N\", \"M\" } }, { { \"I\", \"E\", \"U\", \"O\", \"A\" }, { \"E\", \"O\" } }, { { \"E\", \"A\", \"O\" }, { \"E\", \"O\" } }, { { \"E\", \"L\", \"I\" }, { \"E\" } }, { { \"D\", \"S\", \"W\", \"R\", \"E\", \"Y\", \"V\", \"T\", \"L\", \"C\", \"A\" }, { \"D\", \"S\", \"W\", \"R\", \"E\", \"Y\", \"T\", \"L\", \"A\" } }, { { \"A\", \"E\", \"I\", \"Y\", \"O\" }, { \"E\", \"Y\" } }, { { \"T\", \"N\", \"R\", \"S\", \"C\", \"Y\", \"W\", \"I\", \"B\" }, { \"T\", \"N\", \"R\", \"S\", \"Y\", \"W\" } }, { { \"T\", \"E\", \"S\", \"I\" }, { \"T\", \"E\", \"S\" } }, { { \"S\", \"N\", \"R\", \"D\", \"P\", \"L\", \"I\" }, { \"S\", \"N\", \"R\", \"D\", \"P\", \"L\" } }, { { \"S\", \"N\", \"T\", \"D\", \"F\", \"E\", \"C\", \"A\", \"V\", \"R\" }, { \"S\", \"N\", \"T\", \"D\", \"F\", \"E\", \"C\", \"A\", \"R\" } }, { { \"R\", \"E\", \"C\", \"T\", \"L\", \"F\", \"S\", \"I\", \"G\", \"D\", \"A\" }, { \"R\", \"E\", \"T\", \"L\", \"S\", \"D\", \"A\" } }, { { \"P\", \"E\", \"A\" }, { \"E\" } }, { { \"O\", \"N\", \"D\", \"T\", \"S\", \"G\", \"C\", \"B\", \"V\", \"M\", \"A\" }, { \"N\", \"D\", \"T\", \"S\", \"G\", \"C\", \"M\", \"A\" } }, { { \"N\", \"T\", \"S\", \"C\", \"Z\", \"O\", \"G\", \"F\" }, { \"N\", \"T\", \"S\", \"C\", \"G\", \"F\" } }, { { \"N\", \"E\", \"S\", \"I\", \"A\" }, { \"N\", \"E\", \"S\" } }, { { \"N\", \"M\", \"U\", \"L\", \"C\", \"R\" }, { \"N\", \"M\", \"U\", \"L\", \"R\" } }, { { \"E\", \"I\" }, { \"E\" } }, { { \"E\", \"A\", \"I\", \"O\", \"U\", \"R\" }, { \"E\", \"O\" } }, { { \"E\", \"S\", \"P\", \"O\", \"B\", \"A\", \"I\" }, { \"E\", \"S\" } }, { { \"E\", \"P\", \"I\", \"A\", \"S\", \"M\" }, { \"E\", \"S\" } }, { { \"D\", \"N\", \"L\", \"S\", \"R\", \"E\", \"C\", \"T\", \"V\", \"A\" }, { \"D\", \"N\", \"L\", \"S\", \"R\", \"E\", \"T\", \"A\" } }, { { \"T\", \"I\", \"E\" }, { \"T\", \"E\" } }, { { \"S\", \"R\", \"N\", \"L\", \"W\", \"T\", \"I\" }, { \"R\", \"N\", \"L\", \"W\", \"T\" } }, { { \"R\", \"N\", \"G\", \"T\" }, { \"R\", \"N\", \"G\", \"T\" } }, { { \"P\", \"T\", \"I\", \"C\", \"A\" }, { \"T\" } }, { { \"N\" }, { \"N\" } }, { { \"H\", \"T\", \"K\", \"E\" }, { \"H\", \"T\", \"K\", \"E\" } }, { { \"E\", \"I\", \"Y\", \"V\", \"M\", \"D\" }, { \"E\", \"Y\" } }, { { \"E\", \"A\", \"O\" }, { \"E\", \"A\" } }, { { \"E\", \"S\", \"T\", \"L\", \"I\" }, { \"E\", \"S\", \"T\" } }, { { \"E\", \"S\", \"L\", \"T\", \"R\", \"I\" }, { \"E\", \"S\" } }, { { \"E\", \"P\", \"L\" }, { \"E\" } }, { { \"E\", \"O\", \"I\", \"A\" }, { \"E\" } }, { { \"D\", \"L\", \"I\", \"O\", \"E\", \"U\" }, { \"D\", \"L\", \"E\" } }, { { \"Y\", \"T\", \"R\", \"N\" }, { \"Y\", \"T\", \"R\", \"N\" } }, { { \"Y\" }, { \"Y\" } }, { { \"Y\", \"E\" }, { \"Y\", \"E\" } }, { { \"W\", \"N\", \"O\", \"S\", \"C\", \"V\", \"U\", \"T\", \"R\", \"P\", \"G\" }, { \"W\", \"N\", \"O\", \"U\", \"T\", \"R\", \"P\" } }, { { \"U\", \"T\", \"R\", \"O\", \"D\", \"A\" }, { \"U\", \"T\", \"R\", \"O\", \"D\" } }, { { \"T\", \"E\", \"O\", \"I\" }, { \"T\", \"E\", \"O\" } }, { { \"R\", \"E\", \"W\", \"L\", \"C\", \"A\" }, { \"R\", \"E\", \"W\", \"L\", \"A\" } }, { { \"R\", \"N\", \"C\", \"E\", \"L\", \"G\" }, { \"R\", \"N\", \"C\", \"E\", \"L\", \"G\" } }, { { \"R\", \"C\", \"P\", \"B\", \"M\", \"L\", \"A\" }, { \"R\", \"P\", \"M\", \"L\" } }, { { \"N\", \"T\", \"S\", \"R\", \"D\" }, { \"N\", \"T\", \"S\", \"R\", \"D\" } }, { { \"L\", \"O\", \"A\", \"T\", \"R\", \"E\" }, { \"T\", \"E\" } }, { { \"L\", \"T\", \"R\" }, { \"L\", \"T\", \"R\" } }, { { \"K\", \"D\", \"L\", \"T\", \"R\", \"N\", \"M\" }, { \"K\", \"D\", \"L\", \"T\", \"R\", \"N\", \"M\" } }, { { \"I\", \"H\", \"A\", \"E\", \"Y\", \"U\", \"S\" }, { \"H\", \"A\", \"E\", \"Y\", \"S\" } }, { { \"I\", \"M\", \"Y\", \"N\", \"L\" }, { \"M\", \"Y\", \"N\", \"L\" } }, { { \"E\", \"I\", \"O\", \"A\" }, { \"E\", \"A\" } }, { { \"E\", \"I\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"D\", \"N\", \"T\", \"S\", \"R\", \"E\" }, { \"D\", \"N\", \"T\", \"S\", \"R\", \"E\" } }, { { \"C\", \"R\", \"M\", \"I\" }, { \"R\", \"M\" } }, { { \"A\", \"T\", \"E\", \"S\", \"P\", \"N\" }, { \"A\", \"T\", \"E\", \"S\", \"P\", \"N\" } }, { { \"U\" }, {} }, { { \"T\", \"F\" }, { \"T\", \"F\" } }, { { \"T\", \"I\", \"H\", \"E\", \"Y\", \"W\", \"S\", \"A\" }, { \"H\", \"E\", \"Y\", \"S\", \"A\" } }, { { \"S\", \"E\" }, { \"S\" } }, { { \"S\", \"N\", \"L\", \"C\" }, { \"S\", \"N\", \"L\" } }, { { \"S\", \"N\" }, { \"S\", \"N\" } }, { { \"O\", \"E\", \"I\" }, { \"E\" } }, { { \"O\", \"E\" }, { \"O\", \"E\" } }, { { \"N\", \"V\", \"O\", \"C\" }, { \"N\", \"C\" } }, { { \"N\" }, { \"N\" } }, { { \"N\", \"D\", \"S\", \"C\", \"T\", \"O\", \"L\", \"E\" }, { \"N\", \"D\", \"S\", \"C\", \"T\", \"L\", \"E\" } }, { { \"L\", \"R\", \"T\", \"S\" }, { \"L\", \"R\", \"T\", \"S\" } }, { { \"L\", \"R\", \"N\" }, { \"L\", \"R\", \"N\" } }, { { \"I\", \"U\", \"E\" }, { \"E\" } }, { { \"I\", \"E\", \"A\" }, { \"E\" } }, { { \"I\", \"H\", \"E\" }, { \"H\", \"E\" } }, { { \"H\", \"E\" }, { \"H\", \"E\" } }, { { \"F\", \"T\" }, { \"F\", \"T\" } }, { { \"E\", \"A\", \"U\", \"O\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\", \"A\" }, { \"E\" } }, { { \"E\", \"O\", \"R\", \"L\" }, { \"E\" } }, { { \"E\", \"A\" }, { \"E\" } }, { { \"C\", \"S\", \"R\", \"A\" }, { \"S\", \"R\" } }, { { \"A\", \"S\", \"I\", \"E\" }, { \"S\", \"E\" } }, { { \"A\", \"S\", \"D\" }, { \"A\", \"S\", \"D\" } }, { { \"Y\", \"D\" }, { \"Y\", \"D\" } }, { { \"W\", \"N\", \"M\", \"E\" }, { \"W\", \"N\", \"M\" } }, { { \"T\", \"S\" }, { \"T\", \"S\" } }, { { \"T\", \"O\", \"E\", \"A\" }, { \"T\", \"E\" } }, { { \"S\", \"C\", \"R\", \"N\", \"L\" }, { \"S\", \"R\", \"N\", \"L\" } }, { { \"S\" }, { \"S\" } }, { { \"S\", \"E\", \"I\" }, { \"S\", \"E\" } }, { { \"S\", \"N\", \"C\" }, { \"S\", \"N\" } }, { { \"R\", \"I\" }, {} }, { { \"O\", \"I\", \"E\", \"A\" }, { \"E\", \"A\" } }, { { \"O\", \"F\", \"U\", \"T\", \"E\" }, { \"F\", \"T\", \"E\" } }, { { \"O\", \"E\" }, { \"O\", \"E\" } }, { { \"O\" }, { \"O\" } }, { { \"N\", \"I\", \"T\", \"R\" }, { \"N\", \"T\", \"R\" } }, { { \"N\", \"T\", \"R\", \"E\", \"C\" }, { \"N\", \"T\", \"R\", \"E\", \"C\" } }, { { \"N\" }, { \"N\" } }, { { \"L\", \"T\", \"N\" }, { \"L\", \"T\", \"N\" } }, { { \"L\", \"I\", \"E\" }, { \"E\" } }, { { \"L\" }, {} }, { { \"L\", \"T\", \"R\", \"N\" }, { \"L\", \"T\", \"R\", \"N\" } }, { { \"K\", \"I\", \"E\", \"C\", \"A\" }, { \"K\", \"E\" } }, { { \"I\", \"F\", \"E\", \"T\" }, { \"F\", \"E\", \"T\" } }, { { \"I\", \"E\", \"M\", \"A\" }, { \"E\", \"A\" } }, { { \"I\", \"E\", \"Y\", \"O\" }, { \"E\", \"Y\" } }, { { \"H\", \"R\", \"O\", \"I\", \"A\" }, { \"H\" } }, { { \"H\" }, { \"H\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\", \"O\", \"I\", \"A\" }, { \"E\", \"A\" } }, { { \"E\", \"U\", \"I\" }, { \"E\" } }, { { \"E\", \"O\", \"I\" }, { \"E\", \"O\" } }, { { \"E\", \"Y\", \"U\" }, { \"E\", \"Y\" } }, { { \"E\", \"I\" }, { \"E\" } }, { { \"E\", \"I\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"C\" }, {} }, { { \"B\", \"E\" }, { \"E\" } }, { { \"A\", \"R\", \"I\", \"E\" }, { \"E\" } }, { { \"Y\", \"E\" }, { \"Y\", \"E\" } }, { { \"Y\", \"O\", \"I\", \"E\" }, { \"Y\", \"O\", \"E\" } }, { { \"Y\", \"A\" }, { \"Y\" } }, { { \"V\", \"T\", \"O\" }, { \"T\", \"O\" } }, { { \"U\", \"O\", \"E\" }, { \"E\" } }, { { \"T\", \"S\", \"M\", \"E\", \"D\" }, { \"T\", \"S\", \"M\", \"E\" } }, { { \"T\", \"R\", \"D\" }, { \"T\", \"R\", \"D\" } }, { { \"T\", \"R\", \"L\", \"B\" }, { \"T\", \"R\", \"L\" } }, { { \"T\", \"R\", \"L\" }, { \"T\", \"R\", \"L\" } }, { { \"T\" }, { \"T\" } }, { { \"T\" }, { \"T\" } }, { { \"S\", \"R\", \"N\", \"M\" }, { \"S\", \"R\", \"N\", \"M\" } }, { { \"S\" }, { \"S\" } }, { { \"S\" }, { \"S\" } }, { { \"S\" }, { \"S\" } }, { { \"R\", \"P\" }, { \"R\", \"P\" } }, { { \"P\" }, {} }, { { \"P\", \"O\" }, {} }, { { \"O\", \"E\" }, { \"E\" } }, { { \"O\" }, {} }, { { \"O\" }, {} }, { { \"O\" }, {} }, { { \"N\" }, {} }, { { \"M\" }, { \"M\" } }, { { \"M\" }, { \"M\" } }, { { \"L\" }, {} }, { { \"L\" }, { \"L\" } }, { { \"I\" }, {} }, { { \"I\" }, {} }, { { \"I\", \"E\" }, { \"E\" } }, { { \"I\" }, {} }, { { \"I\", \"E\" }, { \"E\" } }, { { \"I\" }, {} }, { { \"H\" }, {} }, { { \"H\", \"E\" }, { \"H\", \"E\" } }, { { \"H\" }, { \"H\" } }, { { \"F\" }, { \"F\" } }, { { \"E\" }, {} }, { { \"E\" }, { \"E\" } }, { { \"E\" }, {} }, { { \"E\" }, { \"E\" } }, { { \"E\", \"A\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"E\" }, { \"E\" } }, { { \"D\" }, { \"D\" } }, { { \"A\" }, {} }, { { \"A\" }, {} } };\r\n    randomWord = startBiGram[indexGenerator(startBiGram.length)];\r\n    int flag = 0;\r\n    int count = 0;\r\n    String previousWord;\r\n    while (randomWord.length() != wordLength) {\r\n        previousWord = randomWord;\r\n        randomWord = addCharacter(startBiGram, wordLength, randomWord, lookupBiGram, nextCharLookup, flag);\r\n        if (previousWord.equals(randomWord)) {\r\n            count++;\r\n        } else {\r\n            flag = 0;\r\n        }\r\n        if (count == 5) {\r\n            flag = 1;\r\n            count++;\r\n        } else if (count == 20) {\r\n            randomWord = startBiGram[indexGenerator(startBiGram.length)];\r\n            count = 0;\r\n        }\r\n    }\r\n    return randomWord;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\utils",
  "methodName" : "addCharacter",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "String addCharacter(String[] startBiGram, int desiredLength, String currentWord, String[] lookupBiGram, String[][][] nextCharLookup, int flag)\n{\r\n    int mainIndex = getLookupIndex(currentWord, lookupBiGram);\r\n    int type = 0;\r\n    if (currentWord.length() == (desiredLength - 1)) {\r\n        type = 1;\r\n    }\r\n    while (mainIndex < 0 || mainIndex > 263 || nextCharLookup[mainIndex][type].length <= 0) {\r\n        if (currentWord.length() == 2) {\r\n            return startBiGram[indexGenerator(startBiGram.length)];\r\n        }\r\n        if (flag == 1) {\r\n            currentWord = backtrack(currentWord, 2);\r\n            flag = 0;\r\n        } else {\r\n            currentWord = backtrack(currentWord, 1);\r\n        }\r\n        mainIndex = getLookupIndex(currentWord, lookupBiGram);\r\n        if (type == 1) {\r\n            type = 0;\r\n        }\r\n    }\r\n    String updatedWord = currentWord + getNextCharacter(type, mainIndex, nextCharLookup);\r\n    return updatedWord;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\utils",
  "methodName" : "indexGenerator",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int indexGenerator(int arrayLength)\n{\r\n    int theIndex;\r\n    Random generator = new Random();\r\n    theIndex = generator.nextInt(arrayLength);\r\n    return theIndex;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\utils",
  "methodName" : "getNextCharacter",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getNextCharacter(int type, int mainIndex, String[][][] theCharacterVault)\n{\r\n    String nextChar;\r\n    int i = indexGenerator(theCharacterVault[mainIndex][type].length);\r\n    nextChar = theCharacterVault[mainIndex][type][i];\r\n    return nextChar;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\utils",
  "methodName" : "backtrack",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String backtrack(String theWord, int numberChars)\n{\r\n    theWord = theWord.substring(0, theWord.length() - numberChars);\r\n    return theWord;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\utils",
  "methodName" : "getLookupIndex",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int getLookupIndex(String theWord, String[] lookupArray)\n{\r\n    String lookupCharacters = theWord.substring(theWord.length() - 2);\r\n    int lookupIndex = Arrays.asList(lookupArray).indexOf(lookupCharacters);\r\n    return lookupIndex;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "getList",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<AppEntry> getList()\n{\r\n    AppCatalogSolrClient sc = new AppCatalogSolrClient();\r\n    return sc.listAppEntries();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "delete",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Response delete(@PathParam(\"id\") String id, @PathParam(\"name\") String name)\n{\r\n    AppCatalogSolrClient sc = new AppCatalogSolrClient();\r\n    sc.deleteApp(id);\r\n    YarnServiceClient yc = new YarnServiceClient();\r\n    yc.deleteApp(name);\r\n    return Response.status(Status.ACCEPTED).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\main\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "deploy",
  "errType" : [ "SolrServerException|IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Response deploy(@PathParam(\"id\") String id, Service service)\n{\r\n    AppCatalogSolrClient sc = new AppCatalogSolrClient();\r\n    try {\r\n        sc.deployApp(id, service);\r\n    } catch (SolrServerException | IOException e) {\r\n        return Response.status(Status.BAD_REQUEST).entity(e.toString()).build();\r\n    }\r\n    YarnServiceClient yc = new YarnServiceClient();\r\n    yc.createApp(service);\r\n    String output = \"{\\\"status\\\":\\\"Application deployed.\\\",\\\"id\\\":\\\"\" + service.getName() + \"\\\"}\";\r\n    return Response.status(Status.ACCEPTED).entity(output).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
} ]