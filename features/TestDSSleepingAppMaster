[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "main",
  "errType" : [ "Throwable", "InterruptedException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    boolean result = false;\r\n    TestDSSleepingAppMaster appMaster = new TestDSSleepingAppMaster();\r\n    try {\r\n        boolean doRun = appMaster.init(args);\r\n        if (!doRun) {\r\n            System.exit(0);\r\n        }\r\n        appMaster.run();\r\n        if (appMaster.appAttemptID.getAttemptId() <= 2) {\r\n            try {\r\n                Thread.sleep(SLEEP_TIME);\r\n            } catch (InterruptedException e) {\r\n            }\r\n            System.exit(100);\r\n        }\r\n        result = appMaster.finish();\r\n    } catch (Throwable t) {\r\n        System.exit(1);\r\n    } finally {\r\n        if (appMaster != null) {\r\n            appMaster.cleanup();\r\n        }\r\n    }\r\n    if (result) {\r\n        LOG.info(\"Application Master completed successfully. exiting\");\r\n        System.exit(0);\r\n    } else {\r\n        LOG.info(\"Application Master failed. exiting\");\r\n        System.exit(2);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "run",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void run() throws YarnException, IOException, InterruptedException\n{\r\n    super.run();\r\n    if (appAttemptID.getAttemptId() == 2) {\r\n        if (numAllocatedContainers.get() != 1 || numRequestedContainers.get() != numTotalContainers) {\r\n            LOG.info(\"NumAllocatedContainers is \" + numAllocatedContainers.get() + \" and NumRequestedContainers is \" + numAllocatedContainers.get() + \".Application Master failed. exiting\");\r\n            System.exit(200);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "main",
  "errType" : [ "Throwable", "InterruptedException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    boolean result = false;\r\n    try {\r\n        TestDSFailedAppMaster appMaster = new TestDSFailedAppMaster();\r\n        boolean doRun = appMaster.init(args);\r\n        if (!doRun) {\r\n            System.exit(0);\r\n        }\r\n        appMaster.run();\r\n        if (appMaster.appAttemptID.getAttemptId() == 1) {\r\n            try {\r\n                Thread.sleep(3000);\r\n            } catch (InterruptedException e) {\r\n            }\r\n            System.exit(100);\r\n        }\r\n        result = appMaster.finish();\r\n    } catch (Throwable t) {\r\n        System.exit(1);\r\n    }\r\n    if (result) {\r\n        LOG.info(\"Application Master completed successfully. exiting\");\r\n        System.exit(0);\r\n    } else {\r\n        LOG.info(\"Application Master failed. exiting\");\r\n        System.exit(2);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSAppMasterAllocateHandler",
  "errType" : null,
  "containingMethodsNum" : 37,
  "sourceCodeText" : "void testDSAppMasterAllocateHandler() throws Exception\n{\r\n    TestAppMaster master = new TestAppMaster();\r\n    int targetContainers = 2;\r\n    AMRMClientAsync mockClient = Mockito.mock(AMRMClientAsync.class);\r\n    master.setAmRMClient(mockClient);\r\n    master.setNumTotalContainers(targetContainers);\r\n    Mockito.doNothing().when(mockClient).addContainerRequest(ArgumentMatchers.any(AMRMClient.ContainerRequest.class));\r\n    ApplicationMaster.RMCallbackHandler handler = master.getRMCallbackHandler();\r\n    List<Container> containers = new ArrayList<>(1);\r\n    ContainerId id1 = BuilderUtils.newContainerId(1, 1, 1, 1);\r\n    containers.add(generateContainer(id1));\r\n    master.numRequestedContainers.set(targetContainers);\r\n    handler.onContainersAllocated(containers);\r\n    Assert.assertEquals(\"Wrong container allocation count\", 1, master.getAllocatedContainers());\r\n    Assert.assertEquals(\"Incorrect number of threads launched\", 1, master.threadsLaunched);\r\n    Assert.assertEquals(\"Incorrect YARN Shell IDs\", Arrays.asList(\"1\"), master.yarnShellIds);\r\n    containers.clear();\r\n    ContainerId id2 = BuilderUtils.newContainerId(1, 1, 1, 2);\r\n    containers.add(generateContainer(id2));\r\n    ContainerId id3 = BuilderUtils.newContainerId(1, 1, 1, 3);\r\n    containers.add(generateContainer(id3));\r\n    ContainerId id4 = BuilderUtils.newContainerId(1, 1, 1, 4);\r\n    containers.add(generateContainer(id4));\r\n    handler.onContainersAllocated(containers);\r\n    Assert.assertEquals(\"Wrong final container allocation count\", 2, master.getAllocatedContainers());\r\n    Assert.assertEquals(\"Incorrect number of threads launched\", 2, master.threadsLaunched);\r\n    Assert.assertEquals(\"Incorrect YARN Shell IDs\", Arrays.asList(\"1\", \"2\"), master.yarnShellIds);\r\n    List<ContainerStatus> status = new ArrayList<>();\r\n    status.add(generateContainerStatus(id1, ContainerExitStatus.SUCCESS));\r\n    status.add(generateContainerStatus(id2, ContainerExitStatus.SUCCESS));\r\n    status.add(generateContainerStatus(id3, ContainerExitStatus.ABORTED));\r\n    status.add(generateContainerStatus(id4, ContainerExitStatus.ABORTED));\r\n    handler.onContainersCompleted(status);\r\n    Assert.assertEquals(\"Unexpected number of completed containers\", targetContainers, master.getNumCompletedContainers());\r\n    Assert.assertTrue(\"Master didn't finish containers as expected\", master.getDone());\r\n    status = new ArrayList<>();\r\n    ContainerId id5 = BuilderUtils.newContainerId(1, 1, 1, 5);\r\n    status.add(generateContainerStatus(id5, ContainerExitStatus.ABORTED));\r\n    Assert.assertEquals(\"Unexpected number of completed containers\", targetContainers, master.getNumCompletedContainers());\r\n    Assert.assertTrue(\"Master didn't finish containers as expected\", master.getDone());\r\n    status.add(generateContainerStatus(id5, ContainerExitStatus.SUCCESS));\r\n    Assert.assertEquals(\"Unexpected number of completed containers\", targetContainers, master.getNumCompletedContainers());\r\n    Assert.assertTrue(\"Master didn't finish containers as expected\", master.getDone());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "generateContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Container generateContainer(ContainerId cid)\n{\r\n    return Container.newInstance(cid, NodeId.newInstance(\"host\", 5000), \"host:80\", Resource.newInstance(1024, 1), Priority.newInstance(0), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "generateContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerStatus generateContainerStatus(ContainerId id, int exitStatus)\n{\r\n    return ContainerStatus.newInstance(id, ContainerState.COMPLETE, \"\", exitStatus);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testTimelineClientInDSAppMasterV1",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testTimelineClientInDSAppMasterV1() throws Exception\n{\r\n    runTimelineClientInDSAppMaster(true, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testTimelineClientInDSAppMasterV2",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testTimelineClientInDSAppMasterV2() throws Exception\n{\r\n    runTimelineClientInDSAppMaster(false, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testTimelineClientInDSAppMasterV1V2",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testTimelineClientInDSAppMasterV1V2() throws Exception\n{\r\n    runTimelineClientInDSAppMaster(true, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testTimelineClientInDSAppMasterDisabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testTimelineClientInDSAppMasterDisabled() throws Exception\n{\r\n    runTimelineClientInDSAppMaster(false, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "runTimelineClientInDSAppMaster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void runTimelineClientInDSAppMaster(boolean v1Enabled, boolean v2Enabled) throws Exception\n{\r\n    ApplicationMaster appMaster = createAppMasterWithStartedTimelineService(v1Enabled, v2Enabled);\r\n    validateAppMasterTimelineService(v1Enabled, v2Enabled, appMaster);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "validateAppMasterTimelineService",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void validateAppMasterTimelineService(boolean v1Enabled, boolean v2Enabled, ApplicationMaster appMaster)\n{\r\n    if (v1Enabled) {\r\n        Assert.assertEquals(appMaster.appSubmitterUgi, ((TimelineClientImpl) appMaster.timelineClient).getUgi());\r\n    } else {\r\n        Assert.assertNull(appMaster.timelineClient);\r\n    }\r\n    if (v2Enabled) {\r\n        Assert.assertNotNull(appMaster.timelineV2Client);\r\n    } else {\r\n        Assert.assertNull(appMaster.timelineV2Client);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "createAppMasterWithStartedTimelineService",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ApplicationMaster createAppMasterWithStartedTimelineService(boolean v1Enabled, boolean v2Enabled) throws Exception\n{\r\n    ApplicationMaster appMaster = new ApplicationMaster();\r\n    appMaster.appSubmitterUgi = UserGroupInformation.createUserForTesting(\"foo\", new String[] { \"bar\" });\r\n    Configuration conf = this.getTimelineServiceConf(v1Enabled, v2Enabled);\r\n    ApplicationId appId = ApplicationId.newInstance(1L, 1);\r\n    appMaster.appAttemptID = ApplicationAttemptId.newInstance(appId, 1);\r\n    appMaster.startTimelineClient(conf);\r\n    return appMaster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getTimelineServiceConf",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Configuration getTimelineServiceConf(boolean v1Enabled, boolean v2Enabled)\n{\r\n    Configuration conf = new YarnConfiguration(new Configuration(false));\r\n    Assert.assertFalse(YarnConfiguration.timelineServiceEnabled(conf));\r\n    if (v1Enabled || v2Enabled) {\r\n        conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    }\r\n    if (v1Enabled) {\r\n        conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 1.0f);\r\n    }\r\n    if (v2Enabled) {\r\n        conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n        conf.setClass(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS, FileSystemTimelineWriterImpl.class, TimelineWriter.class);\r\n    }\r\n    if (v1Enabled && v2Enabled) {\r\n        conf.set(YarnConfiguration.TIMELINE_SERVICE_VERSION, \"1.0\");\r\n        conf.set(YarnConfiguration.TIMELINE_SERVICE_VERSIONS, \"1.0,2.0f\");\r\n    }\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "createNMCallbackHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMCallbackHandler createNMCallbackHandler()\n{\r\n    return new FailContainerLaunchNMCallbackHandler(this);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "main",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void main(String[] args)\n{\r\n    boolean result = false;\r\n    try {\r\n        ContainerLaunchFailAppMaster appMaster = new ContainerLaunchFailAppMaster();\r\n        LOG.info(\"Initializing ApplicationMaster\");\r\n        boolean doRun = appMaster.init(args);\r\n        if (!doRun) {\r\n            System.exit(0);\r\n        }\r\n        appMaster.run();\r\n        result = appMaster.finish();\r\n    } catch (Throwable t) {\r\n        LOG.error(\"Error running ApplicationMaster\", t);\r\n        System.exit(1);\r\n    }\r\n    if (result) {\r\n        LOG.info(\"Application Master completed successfully. exiting\");\r\n        System.exit(0);\r\n    } else {\r\n        LOG.info(\"Application Master failed. exiting\");\r\n        System.exit(2);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testParseResourcesString",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testParseResourcesString()\n{\r\n    final Map<String, Long> expectedResult = new HashMap<>();\r\n    expectedResult.put(\"memory-mb\", 3072L);\r\n    expectedResult.put(\"vcores\", 1L);\r\n    final Map<String, Long> result = Client.parseResourcesString(\"[memory-mb=3072,vcores=1]\");\r\n    assertEquals(expectedResult, result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "setupUnitTests",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setupUnitTests() throws Exception\n{\r\n    URL url = Thread.currentThread().getContextClassLoader().getResource(\"yarn-site.xml\");\r\n    if (url == null) {\r\n        throw new RuntimeException(\"Could not find 'yarn-site.xml' dummy file in classpath\");\r\n    }\r\n    yarnSitePath = url.getPath();\r\n    yarnSiteBackupPath = url.getPath() + \"-backup\";\r\n    Files.copy(Paths.get(yarnSitePath), Paths.get(yarnSiteBackupPath), StandardCopyOption.COPY_ATTRIBUTES, StandardCopyOption.REPLACE_EXISTING);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "tearDownUnitTests",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void tearDownUnitTests() throws Exception\n{\r\n    shutdownYarnCluster();\r\n    shutdownHdfsCluster();\r\n    if (yarnSitePath == null || yarnSiteBackupPath == null) {\r\n        return;\r\n    }\r\n    if (Files.exists(Paths.get(yarnSiteBackupPath))) {\r\n        Files.move(Paths.get(yarnSiteBackupPath), Paths.get(yarnSitePath), StandardCopyOption.REPLACE_EXISTING);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "mergeArgs",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String[] mergeArgs(String[] args, String[] newArgs)\n{\r\n    int length = args.length + newArgs.length;\r\n    String[] result = new String[length];\r\n    System.arraycopy(args, 0, result, 0, args.length);\r\n    System.arraycopy(newArgs, 0, result, args.length, newArgs.length);\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "createArguments",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String[] createArguments(Supplier<String> testNameProvider, String... args)\n{\r\n    String[] res = mergeArgs(COMMON_ARGS, args);\r\n    res[COMMON_ARGS.length - 1] = testNameProvider.get();\r\n    return res;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getSleepCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getSleepCommand(int sec)\n{\r\n    return Shell.WINDOWS ? \"ping -n \" + (sec + 1) + \" 127.0.0.1 >nul\" : \"sleep \" + sec;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getListCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getListCommand()\n{\r\n    return Shell.WINDOWS ? \"dir\" : \"ls\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getCatCommand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getCatCommand()\n{\r\n    return Shell.WINDOWS ? \"type\" : \"cat\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "shutdownYarnCluster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void shutdownYarnCluster()\n{\r\n    if (yarnCluster != null) {\r\n        try {\r\n            yarnCluster.stop();\r\n        } finally {\r\n            yarnCluster = null;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "shutdownHdfsCluster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void shutdownHdfsCluster()\n{\r\n    if (hdfsCluster != null) {\r\n        try {\r\n            hdfsCluster.shutdown();\r\n        } finally {\r\n            hdfsCluster = null;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getTimelineV2StorageDir",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getTimelineV2StorageDir()\n{\r\n    return timelineV2StorageDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "setTimelineV2StorageDir",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setTimelineV2StorageDir() throws Exception\n{\r\n    timelineV2StorageDir = tmpFolder.newFolder().getAbsolutePath();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    setupInternal(NUM_NMS, new YarnConfiguration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    cleanUpDFSClient();\r\n    FileContext fsContext = FileContext.getLocalFSFileContext();\r\n    fsContext.delete(new Path(conf.get(YarnConfiguration.TIMELINE_SERVICE_LEVELDB_PATH)), true);\r\n    shutdownYarnCluster();\r\n    shutdownHdfsCluster();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "createArgumentsWithAppName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] createArgumentsWithAppName(String... args)\n{\r\n    return createArguments(() -> generateAppName(), args);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "waitForContainersLaunch",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForContainersLaunch(YarnClient client, int nContainers, AtomicReference<ApplicationAttemptReport> appAttemptReportRef, AtomicReference<List<ContainerReport>> containersListRef, AtomicReference<ApplicationAttemptId> appAttemptIdRef, AtomicReference<Throwable> thrownErrorRef) throws Exception\n{\r\n    GenericTestUtils.waitFor(() -> {\r\n        try {\r\n            List<ApplicationReport> apps = client.getApplications();\r\n            if (apps == null || apps.isEmpty()) {\r\n                return false;\r\n            }\r\n            ApplicationId appId = apps.get(0).getApplicationId();\r\n            List<ApplicationAttemptReport> appAttempts = client.getApplicationAttempts(appId);\r\n            if (appAttempts == null || appAttempts.isEmpty()) {\r\n                return false;\r\n            }\r\n            ApplicationAttemptId attemptId = appAttempts.get(0).getApplicationAttemptId();\r\n            List<ContainerReport> containers = client.getContainers(attemptId);\r\n            if (containers == null || containers.size() < nContainers) {\r\n                return false;\r\n            }\r\n            containersListRef.set(containers);\r\n            appAttemptIdRef.set(attemptId);\r\n            appAttemptReportRef.set(appAttempts.get(0));\r\n        } catch (Exception e) {\r\n            LOG.error(\"Exception waiting for Containers Launch\", e);\r\n            thrownErrorRef.set(e);\r\n        }\r\n        return true;\r\n    }, 10, TEST_TIME_WINDOW_EXPIRE);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "customizeConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void customizeConfiguration(YarnConfiguration config) throws Exception",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "appendFlowArgsForTestDSShell",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String[] appendFlowArgsForTestDSShell(String[] args, boolean defaultFlow)\n{\r\n    return args;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "appendDomainArgsForTestDSShell",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] appendDomainArgsForTestDSShell(String[] args, boolean haveDomain)\n{\r\n    String[] result = args;\r\n    if (haveDomain) {\r\n        String[] domainArgs = { \"--domain\", \"TEST_DOMAIN\", \"--view_acls\", \"reader_user reader_group\", \"--modify_acls\", \"writer_user writer_group\", \"--create\" };\r\n        result = mergeArgs(args, domainArgs);\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "setAndGetDSClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Client setAndGetDSClient(Configuration config) throws Exception\n{\r\n    dsClient = new Client(config);\r\n    return dsClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "setAndGetDSClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Client setAndGetDSClient(String appMasterMainClass, Configuration config) throws Exception\n{\r\n    dsClient = new Client(appMasterMainClass, config);\r\n    return dsClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "baseTestDSShell",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void baseTestDSShell(boolean haveDomain, boolean defaultFlow) throws Exception\n{\r\n    String[] baseArgs = createArgumentsWithAppName(\"--num_containers\", \"2\", \"--shell_command\", getListCommand(), \"--master_memory\", \"512\", \"--master_vcores\", \"2\", \"--container_memory\", \"128\", \"--container_vcores\", \"1\");\r\n    String[] domainArgs = appendDomainArgsForTestDSShell(baseArgs, haveDomain);\r\n    String[] args = appendFlowArgsForTestDSShell(domainArgs, defaultFlow);\r\n    LOG.info(\"Initializing DS Client\");\r\n    YarnClient yarnClient;\r\n    dsClient = setAndGetDSClient(new Configuration(yarnCluster.getConfig()));\r\n    boolean initSuccess = dsClient.init(args);\r\n    Assert.assertTrue(initSuccess);\r\n    LOG.info(\"Running DS Client\");\r\n    final AtomicBoolean result = new AtomicBoolean(false);\r\n    Thread t = new Thread(() -> {\r\n        try {\r\n            result.set(dsClient.run());\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    });\r\n    t.start();\r\n    yarnClient = YarnClient.createYarnClient();\r\n    yarnClient.init(new Configuration(yarnCluster.getConfig()));\r\n    yarnClient.start();\r\n    AtomicInteger waitResult = new AtomicInteger(0);\r\n    AtomicReference<ApplicationId> appIdRef = new AtomicReference<>(null);\r\n    AtomicReference<ApplicationReport> appReportRef = new AtomicReference<>(null);\r\n    GenericTestUtils.waitFor(() -> {\r\n        try {\r\n            List<ApplicationReport> apps = yarnClient.getApplications();\r\n            if (apps.size() == 0) {\r\n                return false;\r\n            }\r\n            ApplicationReport appReport = apps.get(0);\r\n            appReportRef.set(appReport);\r\n            appIdRef.set(appReport.getApplicationId());\r\n            if (appReport.getHost().equals(\"N/A\")) {\r\n                return false;\r\n            }\r\n            if (appReport.getRpcPort() == -1) {\r\n                waitResult.set(1);\r\n            }\r\n            if (appReport.getYarnApplicationState() == YarnApplicationState.FINISHED && appReport.getFinalApplicationStatus() != FinalApplicationStatus.UNDEFINED) {\r\n                return true;\r\n            }\r\n        } catch (Exception e) {\r\n            LOG.error(\"Exception get application from Yarn Client\", e);\r\n            waitResult.set(2);\r\n        }\r\n        return waitResult.get() != 0;\r\n    }, 10, TEST_TIME_WINDOW_EXPIRE);\r\n    t.join();\r\n    if (waitResult.get() == 2) {\r\n        Assert.fail(\"Exception in getting application report. Failed\");\r\n    }\r\n    if (waitResult.get() == 1) {\r\n        Assert.assertEquals(\"Failed waiting for expected rpc port to be -1.\", -1, appReportRef.get().getRpcPort());\r\n    }\r\n    checkTimeline(appIdRef.get(), defaultFlow, haveDomain, appReportRef.get());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "baseTestDSShell",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void baseTestDSShell(boolean haveDomain) throws Exception\n{\r\n    baseTestDSShell(haveDomain, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "checkTimeline",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void checkTimeline(ApplicationId appId, boolean defaultFlow, boolean haveDomain, ApplicationReport appReport) throws Exception\n{\r\n    TimelineDomain domain = null;\r\n    if (haveDomain) {\r\n        domain = yarnCluster.getApplicationHistoryServer().getTimelineStore().getDomain(\"TEST_DOMAIN\");\r\n        Assert.assertNotNull(domain);\r\n        Assert.assertEquals(\"reader_user reader_group\", domain.getReaders());\r\n        Assert.assertEquals(\"writer_user writer_group\", domain.getWriters());\r\n    }\r\n    TimelineEntities entitiesAttempts = yarnCluster.getApplicationHistoryServer().getTimelineStore().getEntities(ApplicationMaster.DSEntity.DS_APP_ATTEMPT.toString(), null, null, null, null, null, null, null, null, null);\r\n    Assert.assertNotNull(entitiesAttempts);\r\n    Assert.assertEquals(1, entitiesAttempts.getEntities().size());\r\n    Assert.assertEquals(2, entitiesAttempts.getEntities().get(0).getEvents().size());\r\n    Assert.assertEquals(entitiesAttempts.getEntities().get(0).getEntityType(), ApplicationMaster.DSEntity.DS_APP_ATTEMPT.toString());\r\n    Assert.assertEquals(haveDomain ? domain.getId() : \"DEFAULT\", entitiesAttempts.getEntities().get(0).getDomainId());\r\n    String currAttemptEntityId = entitiesAttempts.getEntities().get(0).getEntityId();\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.fromString(currAttemptEntityId);\r\n    NameValuePair primaryFilter = new NameValuePair(ApplicationMaster.APPID_TIMELINE_FILTER_NAME, attemptId.getApplicationId().toString());\r\n    TimelineEntities entities = yarnCluster.getApplicationHistoryServer().getTimelineStore().getEntities(ApplicationMaster.DSEntity.DS_CONTAINER.toString(), null, null, null, null, null, primaryFilter, null, null, null);\r\n    Assert.assertNotNull(entities);\r\n    Assert.assertEquals(2, entities.getEntities().size());\r\n    Assert.assertEquals(entities.getEntities().get(0).getEntityType(), ApplicationMaster.DSEntity.DS_CONTAINER.toString());\r\n    String entityId = entities.getEntities().get(0).getEntityId();\r\n    TimelineEntity entity = yarnCluster.getApplicationHistoryServer().getTimelineStore().getEntity(entityId, ApplicationMaster.DSEntity.DS_CONTAINER.toString(), null);\r\n    Assert.assertNotNull(entity);\r\n    Assert.assertEquals(entityId, entity.getEntityId());\r\n    Assert.assertEquals(haveDomain ? domain.getId() : \"DEFAULT\", entities.getEntities().get(0).getDomainId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "createArgsWithPostFix",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String[] createArgsWithPostFix(int index, String... args)\n{\r\n    String[] res = mergeArgs(COMMON_ARGS, args);\r\n    res[COMMON_ARGS.length - 1] = generateAppName(String.format(\"%03d\", index));\r\n    return res;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "generateAppName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String generateAppName()\n{\r\n    return generateAppName(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "generateAppName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String generateAppName(String postFix)\n{\r\n    return name.getMethodName().replaceFirst(\"test\", \"\").concat(postFix == null ? \"\" : \"-\" + postFix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "setUpHDFSCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setUpHDFSCluster() throws IOException\n{\r\n    if (hdfsCluster == null) {\r\n        HdfsConfiguration hdfsConfig = new HdfsConfiguration();\r\n        hdfsCluster = new MiniDFSCluster.Builder(hdfsConfig).numDataNodes(NUM_DATA_NODES).build();\r\n        hdfsCluster.waitActive();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "setUpYarnCluster",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void setUpYarnCluster(int numNodeManagers, YarnConfiguration yarnConfig) throws Exception\n{\r\n    if (yarnCluster != null) {\r\n        return;\r\n    }\r\n    yarnCluster = new MiniYARNCluster(getClass().getSimpleName(), 1, numNodeManagers, 1, 1);\r\n    yarnCluster.init(yarnConfig);\r\n    yarnCluster.start();\r\n    waitForNMsToRegister();\r\n    conf.set(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS, MiniYARNCluster.getHostname() + \":\" + yarnCluster.getApplicationHistoryServer().getPort());\r\n    Configuration yarnClusterConfig = yarnCluster.getConfig();\r\n    yarnClusterConfig.set(YarnConfiguration.YARN_APPLICATION_CLASSPATH, new File(yarnSitePath).getParent());\r\n    ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\r\n    yarnClusterConfig.writeXml(bytesOut);\r\n    bytesOut.close();\r\n    OutputStream os = new FileOutputStream(yarnSitePath);\r\n    os.write(bytesOut.toByteArray());\r\n    os.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "setupInternal",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void setupInternal(int numNodeManagers, YarnConfiguration yarnConfig) throws Exception\n{\r\n    LOG.info(\"========== Setting UP UnitTest {}#{} ==========\", getClass().getCanonicalName(), name.getMethodName());\r\n    LOG.info(\"Starting up YARN cluster. Timeline version {}\", getTimelineVersion());\r\n    conf = yarnConfig;\r\n    conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB, MIN_ALLOCATION_MB);\r\n    conf.setLong(YarnConfiguration.DISPATCHER_DRAIN_EVENTS_TIMEOUT, 1000);\r\n    conf.setLong(YarnConfiguration.NM_LOG_RETAIN_SECONDS, 500);\r\n    conf.set(\"yarn.log.dir\", \"target\");\r\n    conf.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_AUX_SERVICES, \"\");\r\n    conf.setBoolean(YarnConfiguration.SYSTEM_METRICS_PUBLISHER_ENABLED, true);\r\n    conf.set(YarnConfiguration.NM_VMEM_PMEM_RATIO, \"8\");\r\n    conf.setBoolean(YarnConfiguration.NODE_LABELS_ENABLED, true);\r\n    conf.set(\"mapreduce.jobhistory.address\", \"0.0.0.0:\" + ServerSocketUtil.getPort(10021, 10));\r\n    conf.set(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, LinuxResourceCalculatorPlugin.class.getName());\r\n    conf.set(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, ProcfsBasedProcessTree.class.getName());\r\n    conf.setBoolean(YarnConfiguration.NM_PMEM_CHECK_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.NM_VMEM_CHECK_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING, true);\r\n    conf.setBoolean(YarnConfiguration.RM_SYSTEM_METRICS_PUBLISHER_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.OPPORTUNISTIC_CONTAINER_ALLOCATION_ENABLED, true);\r\n    conf.setInt(YarnConfiguration.NM_OPPORTUNISTIC_CONTAINERS_MAX_QUEUE_LENGTH, 10);\r\n    conf.set(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_HANDLER, YarnConfiguration.PROCESSOR_RM_PLACEMENT_CONSTRAINTS_HANDLER);\r\n    conf.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, getTimelineVersion());\r\n    customizeConfiguration(conf);\r\n    setUpYarnCluster(numNodeManagers, conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getNodeManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeManager getNodeManager(int index)\n{\r\n    return yarnCluster.getNodeManager(index);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getYarnCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MiniYARNCluster getYarnCluster()\n{\r\n    return yarnCluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "setConfiguration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setConfiguration(String key, String value)\n{\r\n    conf.set(key, value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getYarnClusterConfiguration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Configuration getYarnClusterConfiguration()\n{\r\n    return yarnCluster.getConfig();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConfiguration()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getResourceManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceManager getResourceManager()\n{\r\n    return yarnCluster.getResourceManager();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getResourceManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceManager getResourceManager(int index)\n{\r\n    return yarnCluster.getResourceManager(index);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getDSClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Client getDSClient()\n{\r\n    return dsClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "resetDSClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void resetDSClient()\n{\r\n    dsClient = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getTimelineVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getTimelineVersion()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "cleanUpDFSClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void cleanUpDFSClient()\n{\r\n    if (getDSClient() != null) {\r\n        getDSClient().sendStopSignal();\r\n        resetDSClient();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "waitForNMsToRegister",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForNMsToRegister() throws Exception\n{\r\n    GenericTestUtils.waitFor(() -> {\r\n        RMContext rmContext = yarnCluster.getResourceManager().getRMContext();\r\n        return (rmContext.getRMNodes().size() >= NUM_NMS);\r\n    }, 100, 60000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getHDFSCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MiniDFSCluster getHDFSCluster()\n{\r\n    return hdfsCluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getTimelineVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getTimelineVersion()\n{\r\n    return 2.0f;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "customizeConfiguration",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void customizeConfiguration(YarnConfiguration config) throws Exception\n{\r\n    config.set(YarnConfiguration.NM_AUX_SERVICES, TIMELINE_AUX_SERVICE_NAME);\r\n    config.set(YarnConfiguration.NM_AUX_SERVICES + \".\" + TIMELINE_AUX_SERVICE_NAME + \".class\", PerNodeTimelineCollectorsAuxService.class.getName());\r\n    config.setClass(YarnConfiguration.TIMELINE_SERVICE_WRITER_CLASS, FileSystemTimelineWriterImpl.class, org.apache.hadoop.yarn.server.timelineservice.storage.TimelineWriter.class);\r\n    setTimelineV2StorageDir();\r\n    config.set(FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_DIR_ROOT, getTimelineV2StorageDir());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithEnforceExecutionType",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testDSShellWithEnforceExecutionType() throws Exception\n{\r\n    YarnClient yarnClient = null;\r\n    AtomicReference<Throwable> thrownError = new AtomicReference<>(null);\r\n    AtomicReference<List<ContainerReport>> containersListRef = new AtomicReference<>(null);\r\n    AtomicReference<ApplicationAttemptId> appAttemptIdRef = new AtomicReference<>(null);\r\n    AtomicReference<ApplicationAttemptReport> appAttemptReportRef = new AtomicReference<>(null);\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"2\", \"--master_memory\", \"512\", \"--master_vcores\", \"2\", \"--container_memory\", \"128\", \"--container_vcores\", \"1\", \"--shell_command\", getListCommand(), \"--container_type\", \"OPPORTUNISTIC\", \"--enforce_execution_type\");\r\n    try {\r\n        setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n        getDSClient().init(args);\r\n        Thread dsClientRunner = new Thread(() -> {\r\n            try {\r\n                getDSClient().run();\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        });\r\n        dsClientRunner.start();\r\n        yarnClient = YarnClient.createYarnClient();\r\n        yarnClient.init(new Configuration(getYarnClusterConfiguration()));\r\n        yarnClient.start();\r\n        waitForContainersLaunch(yarnClient, 3, appAttemptReportRef, containersListRef, appAttemptIdRef, thrownError);\r\n        if (thrownError.get() != null) {\r\n            Assert.fail(thrownError.get().getMessage());\r\n        }\r\n        ContainerId amContainerId = appAttemptReportRef.get().getAMContainerId();\r\n        for (ContainerReport container : containersListRef.get()) {\r\n            if (!container.getContainerId().equals(amContainerId)) {\r\n                Assert.assertEquals(container.getExecutionType(), ExecutionType.OPPORTUNISTIC);\r\n            }\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.error(\"Job execution with enforce execution type failed.\", e);\r\n        Assert.fail(\"Exception. \" + e.getMessage());\r\n    } finally {\r\n        if (yarnClient != null) {\r\n            yarnClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDistributedShellWithResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDistributedShellWithResources() throws Exception\n{\r\n    doTestDistributedShellWithResources(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDistributedShellWithResourcesWithLargeContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDistributedShellWithResourcesWithLargeContainers() throws Exception\n{\r\n    doTestDistributedShellWithResources(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "doTestDistributedShellWithResources",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 32,
  "sourceCodeText" : "void doTestDistributedShellWithResources(boolean largeContainers) throws Exception\n{\r\n    AtomicReference<Throwable> thrownExceptionRef = new AtomicReference<>(null);\r\n    AtomicReference<List<ContainerReport>> containersListRef = new AtomicReference<>(null);\r\n    AtomicReference<ApplicationAttemptId> appAttemptIdRef = new AtomicReference<>(null);\r\n    AtomicReference<ApplicationAttemptReport> appAttemptReportRef = new AtomicReference<>(null);\r\n    Resource clusterResource = getYarnCluster().getResourceManager().getResourceScheduler().getClusterResource();\r\n    String masterMemoryString = \"1 Gi\";\r\n    String containerMemoryString = \"512 Mi\";\r\n    long[] memVars = { 1024, 512 };\r\n    YarnClient yarnClient = null;\r\n    Assume.assumeTrue(\"The cluster doesn't have enough memory for this test\", clusterResource.getMemorySize() >= memVars[0] + memVars[1]);\r\n    Assume.assumeTrue(\"The cluster doesn't have enough cores for this test\", clusterResource.getVirtualCores() >= 2);\r\n    if (largeContainers) {\r\n        memVars[0] = clusterResource.getMemorySize() * 2 / 3;\r\n        memVars[0] = memVars[0] - memVars[0] % MIN_ALLOCATION_MB;\r\n        masterMemoryString = memVars[0] + \"Mi\";\r\n        memVars[1] = clusterResource.getMemorySize() / 3;\r\n        memVars[1] = memVars[1] - memVars[1] % MIN_ALLOCATION_MB;\r\n        containerMemoryString = String.valueOf(memVars[1]);\r\n    }\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"2\", \"--shell_command\", getListCommand(), \"--master_resources\", \"memory=\" + masterMemoryString + \",vcores=1\", \"--container_resources\", \"memory=\" + containerMemoryString + \",vcores=1\");\r\n    LOG.info(\"Initializing DS Client\");\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    Assert.assertTrue(getDSClient().init(args));\r\n    LOG.info(\"Running DS Client\");\r\n    final AtomicBoolean result = new AtomicBoolean(false);\r\n    Thread dsClientRunner = new Thread(() -> {\r\n        try {\r\n            result.set(getDSClient().run());\r\n        } catch (Exception e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    });\r\n    dsClientRunner.start();\r\n    try {\r\n        yarnClient = YarnClient.createYarnClient();\r\n        yarnClient.init(new Configuration(getYarnClusterConfiguration()));\r\n        yarnClient.start();\r\n        waitForContainersLaunch(yarnClient, 2, appAttemptReportRef, containersListRef, appAttemptIdRef, thrownExceptionRef);\r\n        if (thrownExceptionRef.get() != null) {\r\n            Assert.fail(thrownExceptionRef.get().getMessage());\r\n        }\r\n        ContainerId amContainerId = appAttemptReportRef.get().getAMContainerId();\r\n        ContainerReport report = yarnClient.getContainerReport(amContainerId);\r\n        Resource masterResource = report.getAllocatedResource();\r\n        Assert.assertEquals(memVars[0], masterResource.getMemorySize());\r\n        Assert.assertEquals(1, masterResource.getVirtualCores());\r\n        for (ContainerReport container : containersListRef.get()) {\r\n            if (!container.getContainerId().equals(amContainerId)) {\r\n                Resource containerResource = container.getAllocatedResource();\r\n                Assert.assertEquals(memVars[1], containerResource.getMemorySize());\r\n                Assert.assertEquals(1, containerResource.getVirtualCores());\r\n            }\r\n        }\r\n    } finally {\r\n        LOG.info(\"Signaling Client to Stop\");\r\n        if (yarnClient != null) {\r\n            LOG.info(\"Stopping yarnClient service\");\r\n            yarnClient.stop();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithoutDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDSShellWithoutDomain() throws Exception\n{\r\n    baseTestDSShell(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithoutDomainDefaultFlow",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDSShellWithoutDomainDefaultFlow() throws Exception\n{\r\n    baseTestDSShell(false, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithoutDomainCustomizedFlow",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDSShellWithoutDomainCustomizedFlow() throws Exception\n{\r\n    baseTestDSShell(false, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "appendFlowArgsForTestDSShell",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] appendFlowArgsForTestDSShell(String[] args, boolean defaultFlow)\n{\r\n    if (!defaultFlow) {\r\n        String[] flowArgs = { \"--flow_name\", \"test_flow_name\", \"--flow_version\", \"test_flow_version\", \"--flow_run_id\", \"12345678\" };\r\n        args = mergeArgs(args, flowArgs);\r\n    }\r\n    return args;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "checkTimeline",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void checkTimeline(ApplicationId appId, boolean defaultFlow, boolean haveDomain, ApplicationReport appReport) throws Exception\n{\r\n    LOG.info(\"Started {}#checkTimeline()\", getClass().getCanonicalName());\r\n    String tmpRoot = getTimelineV2StorageDir() + File.separator + \"entities\" + File.separator;\r\n    File tmpRootFolder = new File(tmpRoot);\r\n    try {\r\n        Assert.assertTrue(tmpRootFolder.isDirectory());\r\n        String basePath = tmpRoot + YarnConfiguration.DEFAULT_RM_CLUSTER_ID + File.separator + UserGroupInformation.getCurrentUser().getShortUserName() + (defaultFlow ? File.separator + appReport.getName() + File.separator + TimelineUtils.DEFAULT_FLOW_VERSION + File.separator + appReport.getStartTime() + File.separator : File.separator + \"test_flow_name\" + File.separator + \"test_flow_version\" + File.separator + \"12345678\" + File.separator) + appId.toString();\r\n        LOG.info(\"basePath for appId {}: {}\", appId, basePath);\r\n        String appTimestampFileName = String.format(\"appattempt_%d_000%d_000001%s\", appId.getClusterTimestamp(), appId.getId(), FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION);\r\n        File dsAppAttemptEntityFile = verifyEntityTypeFileExists(basePath, \"DS_APP_ATTEMPT\", appTimestampFileName);\r\n        verifyEntityForTimeline(dsAppAttemptEntityFile, DSEvent.DS_APP_ATTEMPT_START.toString(), 1, 1, 0, true);\r\n        verifyEntityForTimeline(dsAppAttemptEntityFile, DSEvent.DS_APP_ATTEMPT_END.toString(), 1, 40, 50, true);\r\n        String containerTimestampFileName = String.format(\"container_%d_000%d_01_000002.thist\", appId.getClusterTimestamp(), appId.getId());\r\n        File dsContainerEntityFile = verifyEntityTypeFileExists(basePath, \"DS_CONTAINER\", containerTimestampFileName);\r\n        verifyEntityForTimeline(dsContainerEntityFile, DSEvent.DS_CONTAINER_START.toString(), 1, 1, 0, true);\r\n        verifyEntityForTimeline(dsContainerEntityFile, DSEvent.DS_CONTAINER_END.toString(), 1, 40, 50, true);\r\n        String containerMetricsTimestampFileName = String.format(\"container_%d_000%d_01_000001%s\", appId.getClusterTimestamp(), appId.getId(), FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION);\r\n        File containerEntityFile = verifyEntityTypeFileExists(basePath, TimelineEntityType.YARN_CONTAINER.toString(), containerMetricsTimestampFileName);\r\n        verifyEntityForTimeline(containerEntityFile, ContainerMetricsConstants.CREATED_EVENT_TYPE, 1, 1, 0, true);\r\n        verifyEntityForTimeline(containerEntityFile, ContainerMetricsConstants.FINISHED_EVENT_TYPE, 1, 40, 50, true);\r\n        String appMetricsTimestampFileName = String.format(\"application_%d_000%d%s\", appId.getClusterTimestamp(), appId.getId(), FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION);\r\n        File appEntityFile = verifyEntityTypeFileExists(basePath, TimelineEntityType.YARN_APPLICATION.toString(), appMetricsTimestampFileName);\r\n        verifyEntityForTimeline(appEntityFile, ApplicationMetricsConstants.CREATED_EVENT_TYPE, 1, 1, 0, false);\r\n        verifyEntityForTimeline(appEntityFile, ApplicationMetricsConstants.FINISHED_EVENT_TYPE, 1, 40, 50, false);\r\n        String appAttemptMetricsTimestampFileName = String.format(\"appattempt_%d_000%d_000001%s\", appId.getClusterTimestamp(), appId.getId(), FileSystemTimelineWriterImpl.TIMELINE_SERVICE_STORAGE_EXTENSION);\r\n        File appAttemptEntityFile = verifyEntityTypeFileExists(basePath, TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString(), appAttemptMetricsTimestampFileName);\r\n        verifyEntityForTimeline(appAttemptEntityFile, AppAttemptMetricsConstants.REGISTERED_EVENT_TYPE, 1, 1, 0, true);\r\n        verifyEntityForTimeline(appAttemptEntityFile, AppAttemptMetricsConstants.FINISHED_EVENT_TYPE, 1, 1, 0, true);\r\n    } finally {\r\n        try {\r\n            FileUtils.deleteDirectory(tmpRootFolder.getParentFile());\r\n        } catch (Exception ex) {\r\n            LOG.warn(\"Exception deleting a file/subDirectory: {}\", ex.getMessage());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "verifyEntityForTimeline",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyEntityForTimeline(File entityFile, String expectedEvent, long numOfExpectedEvent, int checkTimes, long sleepTime, boolean checkIdPrefix) throws Exception\n{\r\n    AtomicReference<Throwable> thrownExceptionRef = new AtomicReference<>(null);\r\n    GenericTestUtils.waitFor(() -> {\r\n        String strLine;\r\n        long actualCount = 0;\r\n        long idPrefix = -1;\r\n        try (BufferedReader reader = new BufferedReader(new FileReader(entityFile))) {\r\n            while ((strLine = reader.readLine()) != null) {\r\n                String entityLine = strLine.trim();\r\n                if (entityLine.isEmpty()) {\r\n                    continue;\r\n                }\r\n                if (entityLine.contains(expectedEvent)) {\r\n                    actualCount++;\r\n                }\r\n                if (expectedEvent.equals(DSEvent.DS_CONTAINER_END.toString()) && entityLine.contains(expectedEvent)) {\r\n                    TimelineEntity entity = FileSystemTimelineReaderImpl.getTimelineRecordFromJSON(entityLine, TimelineEntity.class);\r\n                    TimelineEvent event = entity.getEvents().pollFirst();\r\n                    Assert.assertNotNull(event);\r\n                    Assert.assertTrue(\"diagnostics\", event.getInfo().containsKey(ApplicationMaster.DIAGNOSTICS));\r\n                }\r\n                if (checkIdPrefix) {\r\n                    TimelineEntity entity = FileSystemTimelineReaderImpl.getTimelineRecordFromJSON(entityLine, TimelineEntity.class);\r\n                    Assert.assertTrue(\"Entity ID prefix expected to be > 0\", entity.getIdPrefix() > 0);\r\n                    if (idPrefix == -1) {\r\n                        idPrefix = entity.getIdPrefix();\r\n                    } else {\r\n                        Assert.assertEquals(\"Entity ID prefix should be same across each publish of \" + \"same entity\", idPrefix, entity.getIdPrefix());\r\n                    }\r\n                }\r\n            }\r\n        } catch (Throwable e) {\r\n            LOG.error(\"Exception is waiting on application report\", e);\r\n            thrownExceptionRef.set(e);\r\n            return true;\r\n        }\r\n        return (numOfExpectedEvent == actualCount);\r\n    }, sleepTime, (checkTimes + 1) * sleepTime);\r\n    if (thrownExceptionRef.get() != null) {\r\n        Assert.fail(\"verifyEntityForTimeline failed \" + thrownExceptionRef.get().getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "verifyEntityTypeFileExists",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "File verifyEntityTypeFileExists(String basePath, String entityType, String entityFileName)\n{\r\n    String outputDirPathForEntity = basePath + File.separator + entityType + File.separator;\r\n    LOG.info(\"verifyEntityTypeFileExists output path for entityType {}: {}\", entityType, outputDirPathForEntity);\r\n    File outputDirForEntity = new File(outputDirPathForEntity);\r\n    Assert.assertTrue(outputDirForEntity.isDirectory());\r\n    String entityFilePath = outputDirPathForEntity + entityFileName;\r\n    File entityFile = new File(entityFilePath);\r\n    Assert.assertTrue(entityFile.exists());\r\n    return entityFile;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getTimelineVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getTimelineVersion()\n{\r\n    return 1.5f;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "customizeConfiguration",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void customizeConfiguration(YarnConfiguration config) throws Exception\n{\r\n    setUpHDFSCluster();\r\n    PluginStoreTestUtils.prepareFileSystemForPluginStore(getHDFSCluster().getFileSystem());\r\n    PluginStoreTestUtils.prepareConfiguration(config, getHDFSCluster());\r\n    config.set(YarnConfiguration.TIMELINE_SERVICE_ENTITY_GROUP_PLUGIN_CLASSES, DistributedShellTimelinePlugin.class.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "checkTimeline",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkTimeline(ApplicationId appId, boolean defaultFlow, boolean haveDomain, ApplicationReport appReport) throws Exception\n{\r\n    long scanInterval = getConfiguration().getLong(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS, YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_SCAN_INTERVAL_SECONDS_DEFAULT);\r\n    Path doneDir = new Path(YarnConfiguration.TIMELINE_SERVICE_ENTITYGROUP_FS_STORE_DONE_DIR_DEFAULT);\r\n    AtomicReference<Exception> exceptionRef = new AtomicReference<>(null);\r\n    GenericTestUtils.waitFor(() -> {\r\n        try {\r\n            RemoteIterator<FileStatus> iterApps = getHDFSCluster().getFileSystem().listStatusIterator(doneDir);\r\n            return (iterApps.hasNext());\r\n        } catch (Exception e) {\r\n            exceptionRef.set(e);\r\n            LOG.error(\"Exception listing Done Dir\", e);\r\n            return true;\r\n        }\r\n    }, scanInterval * 2, TEST_TIME_WINDOW_EXPIRE);\r\n    Assert.assertNull(\"Exception in getting listing status\", exceptionRef.get());\r\n    super.checkTimeline(appId, defaultFlow, haveDomain, appReport);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDSShellWithDomain() throws Exception\n{\r\n    baseTestDSShell(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithoutDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDSShellWithoutDomain() throws Exception\n{\r\n    baseTestDSShell(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getParams",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<Boolean> getParams()\n{\r\n    return Arrays.asList(false, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getConfiguration",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "YarnConfiguration getConfiguration(boolean multiNodePlacementConfigs)\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    if (multiNodePlacementConfigs) {\r\n        conf.set(CapacitySchedulerConfiguration.RESOURCE_CALCULATOR_CLASS, DominantResourceCalculator.class.getName());\r\n        conf.setClass(YarnConfiguration.RM_SCHEDULER, CapacityScheduler.class, ResourceScheduler.class);\r\n        conf.set(CapacitySchedulerConfiguration.MULTI_NODE_SORTING_POLICIES, \"resource-based\");\r\n        conf.set(CapacitySchedulerConfiguration.MULTI_NODE_SORTING_POLICY_NAME, \"resource-based\");\r\n        String policyName = CapacitySchedulerConfiguration.MULTI_NODE_SORTING_POLICY_NAME + \".resource-based\" + \".class\";\r\n        conf.set(policyName, POLICY_CLASS_NAME);\r\n        conf.setBoolean(CapacitySchedulerConfiguration.MULTI_NODE_PLACEMENT_ENABLED, true);\r\n    }\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "setupUnitTests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setupUnitTests() throws Exception\n{\r\n    TestDSTimelineV10.setupUnitTests();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "tearDownUnitTests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDownUnitTests() throws Exception\n{\r\n    TestDSTimelineV10.tearDownUnitTests();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    distShellTest = new TestDSTimelineV10();\r\n    distShellTest.setupInternal(NUM_NMS, getConfiguration(multiNodePlacementEnabled));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (dsClient != null) {\r\n        dsClient.sendStopSignal();\r\n        dsClient = null;\r\n    }\r\n    if (distShellTest != null) {\r\n        distShellTest.tearDown();\r\n        distShellTest = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "initializeNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void initializeNodeLabels() throws IOException\n{\r\n    RMContext rmContext = distShellTest.getResourceManager(0).getRMContext();\r\n    RMNodeLabelsManager labelsMgr = rmContext.getNodeLabelManager();\r\n    Set<String> labels = new HashSet<>();\r\n    labels.add(\"x\");\r\n    labelsMgr.addToCluserNodeLabelsWithDefaultExclusivity(labels);\r\n    distShellTest.setConfiguration(PREFIX + \"root.accessible-node-labels\", \"x\");\r\n    distShellTest.setConfiguration(PREFIX + \"root.accessible-node-labels.x.capacity\", \"100\");\r\n    distShellTest.setConfiguration(PREFIX + \"root.default.accessible-node-labels\", \"x\");\r\n    distShellTest.setConfiguration(PREFIX + \"root.default.accessible-node-labels.x.capacity\", \"100\");\r\n    rmContext.getScheduler().reinitialize(distShellTest.getConfiguration(), rmContext);\r\n    NodeId[] nodeIds = new NodeId[NUM_NMS];\r\n    for (int i = 0; i < NUM_NMS; i++) {\r\n        NodeManager mgr = distShellTest.getNodeManager(i);\r\n        nodeIds[i] = mgr.getNMContext().getNodeId();\r\n    }\r\n    labelsMgr.addLabelsToNode(ImmutableMap.of(nodeIds[1], labels));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testDSShellWithNodeLabelExpression() throws Exception\n{\r\n    NMContainerMonitor containerMonitorRunner = null;\r\n    initializeNodeLabels();\r\n    try {\r\n        containerMonitorRunner = new NMContainerMonitor();\r\n        containerMonitorRunner.start();\r\n        String[] args = DistributedShellBaseTest.createArguments(() -> generateAppName(), \"--num_containers\", \"4\", \"--shell_command\", \"sleep\", \"--shell_args\", \"15\", \"--master_memory\", \"512\", \"--master_vcores\", \"2\", \"--container_memory\", \"128\", \"--container_vcores\", \"1\", \"--node_label_expression\", \"x\");\r\n        LOG.info(\"Initializing DS Client\");\r\n        dsClient = new Client(new Configuration(distShellTest.getYarnClusterConfiguration()));\r\n        Assert.assertTrue(dsClient.init(args));\r\n        LOG.info(\"Running DS Client\");\r\n        boolean result = dsClient.run();\r\n        LOG.info(\"Client run completed. Result={}\", result);\r\n        containerMonitorRunner.stopMonitoring();\r\n        int[] maxRunningContainersOnNMs = containerMonitorRunner.getMaxRunningContainersReport();\r\n        Assert.assertEquals(0, maxRunningContainersOnNMs[0]);\r\n        Assert.assertTrue(maxRunningContainersOnNMs[1] > 0);\r\n    } finally {\r\n        if (containerMonitorRunner != null) {\r\n            containerMonitorRunner.stopMonitoring();\r\n            containerMonitorRunner.join();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDistributedShellWithPlacementConstraint",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testDistributedShellWithPlacementConstraint() throws Exception\n{\r\n    NMContainerMonitor containerMonitorRunner = null;\r\n    String[] args = DistributedShellBaseTest.createArguments(() -> generateAppName(), \"1\", \"--shell_command\", DistributedShellBaseTest.getSleepCommand(15), \"--placement_spec\", \"zk(1),NOTIN,NODE,zk:spark(1),NOTIN,NODE,zk\");\r\n    try {\r\n        containerMonitorRunner = new NMContainerMonitor();\r\n        containerMonitorRunner.start();\r\n        LOG.info(\"Initializing DS Client with args {}\", Arrays.toString(args));\r\n        dsClient = new Client(new Configuration(distShellTest.getYarnClusterConfiguration()));\r\n        Assert.assertTrue(dsClient.init(args));\r\n        LOG.info(\"Running DS Client\");\r\n        boolean result = dsClient.run();\r\n        LOG.info(\"Client run completed. Result={}\", result);\r\n        containerMonitorRunner.stopMonitoring();\r\n        ConcurrentMap<ApplicationId, RMApp> apps = distShellTest.getResourceManager().getRMContext().getRMApps();\r\n        RMApp app = apps.values().iterator().next();\r\n        RMAppAttempt appAttempt = app.getAppAttempts().values().iterator().next();\r\n        NodeId masterNodeId = appAttempt.getMasterContainer().getNodeId();\r\n        NodeManager nm1 = distShellTest.getNodeManager(0);\r\n        int[] expectedNMsCount = new int[] { 1, 1 };\r\n        if (nm1.getNMContext().getNodeId().equals(masterNodeId)) {\r\n            expectedNMsCount[0]++;\r\n        } else {\r\n            expectedNMsCount[1]++;\r\n        }\r\n        int[] maxRunningContainersOnNMs = containerMonitorRunner.getMaxRunningContainersReport();\r\n        Assert.assertEquals(expectedNMsCount[0], maxRunningContainersOnNMs[0]);\r\n        Assert.assertEquals(expectedNMsCount[1], maxRunningContainersOnNMs[1]);\r\n    } finally {\r\n        if (containerMonitorRunner != null) {\r\n            containerMonitorRunner.stopMonitoring();\r\n            containerMonitorRunner.join();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDistributedShellWithAllocationTagNamespace",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 39,
  "sourceCodeText" : "void testDistributedShellWithAllocationTagNamespace() throws Exception\n{\r\n    NMContainerMonitor containerMonitorRunner = null;\r\n    Client clientB = null;\r\n    YarnClient yarnClient = null;\r\n    String[] argsA = DistributedShellBaseTest.createArguments(() -> generateAppName(\"001\"), \"--shell_command\", DistributedShellBaseTest.getSleepCommand(30), \"--placement_spec\", \"bar(1),notin,node,bar\");\r\n    String[] argsB = DistributedShellBaseTest.createArguments(() -> generateAppName(\"002\"), \"1\", \"--shell_command\", DistributedShellBaseTest.getListCommand(), \"--placement_spec\", \"foo(3),notin,node,all/bar\");\r\n    try {\r\n        containerMonitorRunner = new NMContainerMonitor();\r\n        containerMonitorRunner.start();\r\n        dsClient = new Client(new Configuration(distShellTest.getYarnClusterConfiguration()));\r\n        dsClient.init(argsA);\r\n        Thread dsClientRunner = new Thread(() -> {\r\n            try {\r\n                dsClient.run();\r\n            } catch (Exception e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n        });\r\n        dsClientRunner.start();\r\n        NodeId taskContainerNodeIdA;\r\n        ConcurrentMap<ApplicationId, RMApp> apps;\r\n        AtomicReference<RMApp> appARef = new AtomicReference<>(null);\r\n        AtomicReference<NodeId> masterContainerNodeIdARef = new AtomicReference<>(null);\r\n        int[] expectedNMCounts = new int[] { 0, 0 };\r\n        waitForExpectedNMsCount(expectedNMCounts, appARef, masterContainerNodeIdARef);\r\n        NodeId nodeA = distShellTest.getNodeManager(0).getNMContext().getNodeId();\r\n        NodeId nodeB = distShellTest.getNodeManager(1).getNMContext().getNodeId();\r\n        Assert.assertEquals(2, (expectedNMCounts[0] + expectedNMCounts[1]));\r\n        if (expectedNMCounts[0] != expectedNMCounts[1]) {\r\n            taskContainerNodeIdA = masterContainerNodeIdARef.get();\r\n        } else {\r\n            taskContainerNodeIdA = masterContainerNodeIdARef.get().equals(nodeA) ? nodeB : nodeA;\r\n        }\r\n        clientB = new Client(new Configuration(distShellTest.getYarnClusterConfiguration()));\r\n        clientB.init(argsB);\r\n        Assert.assertTrue(clientB.run());\r\n        containerMonitorRunner.stopMonitoring();\r\n        apps = distShellTest.getResourceManager().getRMContext().getRMApps();\r\n        Iterator<RMApp> it = apps.values().iterator();\r\n        RMApp appB = it.next();\r\n        if (appARef.get().equals(appB)) {\r\n            appB = it.next();\r\n        }\r\n        LOG.info(\"Allocation Tag NameSpace Applications are={} and {}\", appARef.get().getApplicationId(), appB.getApplicationId());\r\n        RMAppAttempt appAttemptB = appB.getAppAttempts().values().iterator().next();\r\n        NodeId masterContainerNodeIdB = appAttemptB.getMasterContainer().getNodeId();\r\n        if (nodeA.equals(masterContainerNodeIdB)) {\r\n            expectedNMCounts[0]++;\r\n        } else {\r\n            expectedNMCounts[1]++;\r\n        }\r\n        if (nodeA.equals(taskContainerNodeIdA)) {\r\n            expectedNMCounts[1] += 3;\r\n        } else {\r\n            expectedNMCounts[0] += 3;\r\n        }\r\n        int[] maxRunningContainersOnNMs = containerMonitorRunner.getMaxRunningContainersReport();\r\n        Assert.assertEquals(expectedNMCounts[0], maxRunningContainersOnNMs[0]);\r\n        Assert.assertEquals(expectedNMCounts[1], maxRunningContainersOnNMs[1]);\r\n        try {\r\n            yarnClient = YarnClient.createYarnClient();\r\n            yarnClient.init(new Configuration(distShellTest.getYarnClusterConfiguration()));\r\n            yarnClient.start();\r\n            yarnClient.killApplication(appARef.get().getApplicationId());\r\n        } catch (Exception e) {\r\n            LOG.warn(\"Exception killing the job: {}\", e.getMessage());\r\n        }\r\n    } finally {\r\n        if (yarnClient != null) {\r\n            yarnClient.stop();\r\n        }\r\n        if (clientB != null) {\r\n            clientB.sendStopSignal();\r\n        }\r\n        if (containerMonitorRunner != null) {\r\n            containerMonitorRunner.stopMonitoring();\r\n            containerMonitorRunner.join();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "generateAppName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String generateAppName()\n{\r\n    return generateAppName(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "generateAppName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String generateAppName(String postFix)\n{\r\n    return name.getMethodName().replaceFirst(\"test\", \"\").concat(postFix == null ? \"\" : \"-\" + postFix);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "waitForExpectedNMsCount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForExpectedNMsCount(int[] expectedNMCounts, AtomicReference<RMApp> appARef, AtomicReference<NodeId> masterContainerNodeIdARef) throws Exception\n{\r\n    GenericTestUtils.waitFor(() -> {\r\n        if ((expectedNMCounts[0] + expectedNMCounts[1]) < 2) {\r\n            expectedNMCounts[0] = distShellTest.getNodeManager(0).getNMContext().getContainers().size();\r\n            expectedNMCounts[1] = distShellTest.getNodeManager(1).getNMContext().getContainers().size();\r\n            return false;\r\n        }\r\n        ConcurrentMap<ApplicationId, RMApp> appIDsMap = distShellTest.getResourceManager().getRMContext().getRMApps();\r\n        if (appIDsMap.isEmpty()) {\r\n            return false;\r\n        }\r\n        appARef.set(appIDsMap.values().iterator().next());\r\n        if (appARef.get().getAppAttempts().isEmpty()) {\r\n            return false;\r\n        }\r\n        RMAppAttempt appAttemptA = appARef.get().getAppAttempts().values().iterator().next();\r\n        if (appAttemptA.getMasterContainer() == null) {\r\n            return false;\r\n        }\r\n        masterContainerNodeIdARef.set(appAttemptA.getMasterContainer().getNodeId());\r\n        return true;\r\n    }, 10, 60000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getTimelineVersion",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "float getTimelineVersion()\n{\r\n    return 1.0f;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "cleanUpDFSClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanUpDFSClient()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDSShellWithDomain() throws Exception\n{\r\n    baseTestDSShell(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithoutDomain",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDSShellWithoutDomain() throws Exception\n{\r\n    baseTestDSShell(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSRestartWithPreviousRunningContainers",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testDSRestartWithPreviousRunningContainers() throws Exception\n{\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"1\", \"--shell_command\", getSleepCommand(8), \"--master_memory\", \"512\", \"--container_memory\", \"128\", \"--keep_containers_across_application_attempts\");\r\n    LOG.info(\"Initializing DS Client\");\r\n    setAndGetDSClient(TestDSFailedAppMaster.class.getName(), new Configuration(getYarnClusterConfiguration()));\r\n    getDSClient().init(args);\r\n    LOG.info(\"Running DS Client\");\r\n    boolean result = getDSClient().run();\r\n    LOG.info(\"Client run completed. Result={}\", result);\r\n    Assert.assertTrue(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSAttemptFailuresValidityIntervalSuccess",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testDSAttemptFailuresValidityIntervalSuccess() throws Exception\n{\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"1\", \"--shell_command\", getSleepCommand(8), \"--master_memory\", \"512\", \"--container_memory\", \"128\", \"--attempt_failures_validity_interval\", \"2500\");\r\n    LOG.info(\"Initializing DS Client\");\r\n    Configuration config = getYarnClusterConfiguration();\r\n    config.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS, 2);\r\n    setAndGetDSClient(TestDSSleepingAppMaster.class.getName(), new Configuration(config));\r\n    getDSClient().init(args);\r\n    LOG.info(\"Running DS Client\");\r\n    boolean result = getDSClient().run();\r\n    LOG.info(\"Client run completed. Result=\" + result);\r\n    Assert.assertTrue(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSAttemptFailuresValidityIntervalFailed",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testDSAttemptFailuresValidityIntervalFailed() throws Exception\n{\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"1\", \"--shell_command\", getSleepCommand(8), \"--master_memory\", \"512\", \"--container_memory\", \"128\", \"--attempt_failures_validity_interval\", \"15000\");\r\n    LOG.info(\"Initializing DS Client\");\r\n    Configuration config = getYarnClusterConfiguration();\r\n    config.setInt(YarnConfiguration.RM_AM_MAX_ATTEMPTS, 2);\r\n    setAndGetDSClient(TestDSSleepingAppMaster.class.getName(), new Configuration(config));\r\n    getDSClient().init(args);\r\n    LOG.info(\"Running DS Client\");\r\n    boolean result = getDSClient().run();\r\n    LOG.info(\"Client run completed. Result=\" + result);\r\n    Assert.assertFalse(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithCustomLogPropertyFile",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testDSShellWithCustomLogPropertyFile() throws Exception\n{\r\n    final File basedir = getBaseDirForTest();\r\n    final File tmpDir = new File(basedir, \"tmpDir\");\r\n    tmpDir.mkdirs();\r\n    final File customLogProperty = new File(tmpDir, \"custom_log4j.properties\");\r\n    if (customLogProperty.exists()) {\r\n        customLogProperty.delete();\r\n    }\r\n    if (!customLogProperty.createNewFile()) {\r\n        Assert.fail(\"Can not create custom log4j property file.\");\r\n    }\r\n    PrintWriter fileWriter = new PrintWriter(customLogProperty);\r\n    fileWriter.write(\"log4j.rootLogger=debug,stdout\");\r\n    fileWriter.close();\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"3\", \"--shell_command\", \"echo\", \"--shell_args\", \"HADOOP\", \"--log_properties\", customLogProperty.getAbsolutePath(), \"--master_memory\", \"512\", \"--master_vcores\", \"2\", \"--container_memory\", \"128\", \"--container_vcores\", \"1\");\r\n    final Logger LOG_Client = LoggerFactory.getLogger(Client.class);\r\n    Assert.assertTrue(LOG_Client.isInfoEnabled());\r\n    Assert.assertFalse(LOG_Client.isDebugEnabled());\r\n    final Logger LOG_AM = LoggerFactory.getLogger(ApplicationMaster.class);\r\n    Assert.assertTrue(LOG_AM.isInfoEnabled());\r\n    Assert.assertFalse(LOG_AM.isDebugEnabled());\r\n    LOG.info(\"Initializing DS Client\");\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    boolean initSuccess = getDSClient().init(args);\r\n    Assert.assertTrue(initSuccess);\r\n    LOG.info(\"Running DS Client\");\r\n    boolean result = getDSClient().run();\r\n    LOG.info(\"Client run completed. Result=\" + result);\r\n    Assert.assertTrue(verifyContainerLog(3, null, true, \"DEBUG\") > 10);\r\n    Assert.assertTrue(LOG_Client.isInfoEnabled());\r\n    Assert.assertTrue(LOG_Client.isDebugEnabled());\r\n    Assert.assertTrue(LOG_AM.isInfoEnabled());\r\n    Assert.assertTrue(LOG_AM.isDebugEnabled());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testSpecifyingLogAggregationContext",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testSpecifyingLogAggregationContext() throws Exception\n{\r\n    String regex = \".*(foo|bar)\\\\d\";\r\n    String[] args = createArgumentsWithAppName(\"--shell_command\", \"echo\", \"--rolling_log_pattern\", regex);\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    Assert.assertTrue(getDSClient().init(args));\r\n    ApplicationSubmissionContext context = Records.newRecord(ApplicationSubmissionContext.class);\r\n    getDSClient().specifyLogAggregationContext(context);\r\n    LogAggregationContext logContext = context.getLogAggregationContext();\r\n    assertEquals(logContext.getRolledLogsIncludePattern(), regex);\r\n    assertTrue(logContext.getRolledLogsExcludePattern().isEmpty());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithMultipleArgs",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testDSShellWithMultipleArgs() throws Exception\n{\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"4\", \"--shell_command\", \"echo\", \"--shell_args\", \"HADOOP YARN MAPREDUCE HDFS\", \"--master_memory\", \"512\", \"--master_vcores\", \"2\", \"--container_memory\", \"128\", \"--container_vcores\", \"1\");\r\n    LOG.info(\"Initializing DS Client\");\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    boolean initSuccess = getDSClient().init(args);\r\n    Assert.assertTrue(initSuccess);\r\n    LOG.info(\"Running DS Client\");\r\n    boolean result = getDSClient().run();\r\n    LOG.info(\"Client run completed. Result=\" + result);\r\n    List<String> expectedContent = new ArrayList<>();\r\n    expectedContent.add(\"HADOOP YARN MAPREDUCE HDFS\");\r\n    verifyContainerLog(4, expectedContent, false, \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithShellScript",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testDSShellWithShellScript() throws Exception\n{\r\n    final File basedir = getBaseDirForTest();\r\n    final File tmpDir = new File(basedir, \"tmpDir\");\r\n    tmpDir.mkdirs();\r\n    final File customShellScript = new File(tmpDir, \"custom_script.sh\");\r\n    if (customShellScript.exists()) {\r\n        customShellScript.delete();\r\n    }\r\n    if (!customShellScript.createNewFile()) {\r\n        Assert.fail(\"Can not create custom shell script file.\");\r\n    }\r\n    PrintWriter fileWriter = new PrintWriter(customShellScript);\r\n    fileWriter.write(\"echo testDSShellWithShellScript\");\r\n    fileWriter.close();\r\n    LOG.info(customShellScript.getAbsolutePath());\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"1\", \"--shell_script\", customShellScript.getAbsolutePath(), \"--master_memory\", \"512\", \"--master_vcores\", \"2\", \"--container_memory\", \"128\", \"--container_vcores\", \"1\");\r\n    LOG.info(\"Initializing DS Client\");\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    Assert.assertTrue(getDSClient().init(args));\r\n    LOG.info(\"Running DS Client\");\r\n    assertTrue(getDSClient().run());\r\n    List<String> expectedContent = new ArrayList<>();\r\n    expectedContent.add(\"testDSShellWithShellScript\");\r\n    verifyContainerLog(1, expectedContent, false, \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithInvalidArgs",
  "errType" : null,
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testDSShellWithInvalidArgs() throws Exception\n{\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    int appNameCounter = 0;\r\n    LOG.info(\"Initializing DS Client with no args\");\r\n    LambdaTestUtils.intercept(IllegalArgumentException.class, \"No args\", () -> getDSClient().init(new String[] {}));\r\n    LOG.info(\"Initializing DS Client with no jar file\");\r\n    String[] noJarArgs = createArgsWithPostFix(appNameCounter++, \"--num_containers\", \"2\", \"--shell_command\", getListCommand(), \"--master_memory\", \"512\", \"--container_memory\", \"128\");\r\n    String[] argsNoJar = Arrays.copyOfRange(noJarArgs, 2, noJarArgs.length);\r\n    LambdaTestUtils.intercept(IllegalArgumentException.class, \"No jar\", () -> getDSClient().init(argsNoJar));\r\n    LOG.info(\"Initializing DS Client with no shell command\");\r\n    String[] noShellCmdArgs = createArgsWithPostFix(appNameCounter++, \"--num_containers\", \"2\", \"--master_memory\", \"512\", \"--container_memory\", \"128\");\r\n    LambdaTestUtils.intercept(IllegalArgumentException.class, \"No shell command\", () -> getDSClient().init(noShellCmdArgs));\r\n    LOG.info(\"Initializing DS Client with invalid no. of containers\");\r\n    String[] numContainersArgs = createArgsWithPostFix(appNameCounter++, \"--num_containers\", \"-1\", \"--shell_command\", getListCommand(), \"--master_memory\", \"512\", \"--container_memory\", \"128\");\r\n    LambdaTestUtils.intercept(IllegalArgumentException.class, \"Invalid no. of containers\", () -> getDSClient().init(numContainersArgs));\r\n    LOG.info(\"Initializing DS Client with invalid no. of vcores\");\r\n    String[] vCoresArgs = createArgsWithPostFix(appNameCounter++, \"--num_containers\", \"2\", \"--shell_command\", getListCommand(), \"--master_memory\", \"512\", \"--master_vcores\", \"-2\", \"--container_memory\", \"128\", \"--container_vcores\", \"1\");\r\n    getDSClient().init(vCoresArgs);\r\n    LambdaTestUtils.intercept(IllegalArgumentException.class, \"Invalid virtual cores specified\", () -> {\r\n        getDSClient().init(vCoresArgs);\r\n        getDSClient().run();\r\n    });\r\n    LOG.info(\"Initializing DS Client with --shell_command and --shell_script\");\r\n    String[] scriptAndCmdArgs = createArgsWithPostFix(appNameCounter++, \"--num_containers\", \"2\", \"--shell_command\", getListCommand(), \"--master_memory\", \"512\", \"--master_vcores\", \"2\", \"--container_memory\", \"128\", \"--container_vcores\", \"1\", \"--shell_script\", \"test.sh\");\r\n    LambdaTestUtils.intercept(IllegalArgumentException.class, \"Can not specify shell_command option and shell_script option at \" + \"the same time\", () -> getDSClient().init(scriptAndCmdArgs));\r\n    LOG.info(\"Initializing DS Client without --shell_command and --shell_script\");\r\n    String[] noShellCmdNoScriptArgs = createArgsWithPostFix(appNameCounter++, \"--num_containers\", \"2\", \"--master_memory\", \"512\", \"--master_vcores\", \"2\", \"--container_memory\", \"128\", \"--container_vcores\", \"1\");\r\n    LambdaTestUtils.intercept(IllegalArgumentException.class, \"No shell command or shell script specified \" + \"to be executed by application master\", () -> getDSClient().init(noShellCmdNoScriptArgs));\r\n    LOG.info(\"Initializing DS Client with invalid container_type argument\");\r\n    String[] invalidTypeArgs = createArgsWithPostFix(appNameCounter++, \"--num_containers\", \"2\", \"--master_memory\", \"512\", \"--master_vcores\", \"2\", \"--container_memory\", \"128\", \"--container_vcores\", \"1\", \"--shell_command\", \"date\", \"--container_type\", \"UNSUPPORTED_TYPE\");\r\n    LambdaTestUtils.intercept(IllegalArgumentException.class, \"Invalid container_type: UNSUPPORTED_TYPE\", () -> getDSClient().init(invalidTypeArgs));\r\n    String[] invalidMemArgs = createArgsWithPostFix(appNameCounter++, \"--num_containers\", \"1\", \"--shell_command\", getListCommand(), \"--master_resources\", \"memory-mb=invalid\");\r\n    LambdaTestUtils.intercept(IllegalArgumentException.class, () -> getDSClient().init(invalidMemArgs));\r\n    String[] invalidMasterResArgs = createArgsWithPostFix(appNameCounter++, \"--num_containers\", \"1\", \"--shell_command\", getListCommand(), \"--master_resources\");\r\n    LambdaTestUtils.intercept(MissingArgumentException.class, () -> getDSClient().init(invalidMasterResArgs));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSTimelineClientWithConnectionRefuse",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testDSTimelineClientWithConnectionRefuse() throws Exception\n{\r\n    ApplicationMaster am = new ApplicationMaster();\r\n    final AtomicReference<TimelineWriter> spyTimelineWriterRef = new AtomicReference<>(null);\r\n    TimelineClientImpl client = new TimelineClientImpl() {\r\n\r\n        @Override\r\n        protected TimelineWriter createTimelineWriter(Configuration conf, UserGroupInformation authUgi, com.sun.jersey.api.client.Client client, URI resURI) throws IOException {\r\n            TimelineWriter timelineWriter = new DirectTimelineWriter(authUgi, client, resURI);\r\n            spyTimelineWriterRef.set(spy(timelineWriter));\r\n            return spyTimelineWriterRef.get();\r\n        }\r\n    };\r\n    client.init(getConfiguration());\r\n    client.start();\r\n    TestTimelineClient.mockEntityClientResponse(spyTimelineWriterRef.get(), null, false, true);\r\n    try {\r\n        UserGroupInformation ugi = mock(UserGroupInformation.class);\r\n        when(ugi.getShortUserName()).thenReturn(\"user1\");\r\n        am.publishContainerEndEvent(client, ContainerStatus.newInstance(BuilderUtils.newContainerId(1, 1, 1, 1), ContainerState.COMPLETE, \"\", 1), \"domainId\", ugi);\r\n    } finally {\r\n        client.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testContainerLaunchFailureHandling",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testContainerLaunchFailureHandling() throws Exception\n{\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"2\", \"--shell_command\", getListCommand(), \"--master_memory\", \"512\", \"--container_memory\", \"128\");\r\n    LOG.info(\"Initializing DS Client\");\r\n    setAndGetDSClient(ContainerLaunchFailAppMaster.class.getName(), new Configuration(getYarnClusterConfiguration()));\r\n    Assert.assertTrue(getDSClient().init(args));\r\n    LOG.info(\"Running DS Client\");\r\n    Assert.assertFalse(getDSClient().run());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDebugFlag",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDebugFlag() throws Exception\n{\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"2\", \"--shell_command\", getListCommand(), \"--master_memory\", \"512\", \"--master_vcores\", \"2\", \"--container_memory\", \"128\", \"--container_vcores\", \"1\", \"--debug\");\r\n    LOG.info(\"Initializing DS Client\");\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    Assert.assertTrue(getDSClient().init(args));\r\n    LOG.info(\"Running DS Client\");\r\n    Assert.assertTrue(getDSClient().run());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "verifyContainerLog",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "int verifyContainerLog(int containerNum, List<String> expectedContent, boolean count, String expectedWord)\n{\r\n    File logFolder = new File(getNodeManager(0).getConfig().get(YarnConfiguration.NM_LOG_DIRS, YarnConfiguration.DEFAULT_NM_LOG_DIRS));\r\n    File[] listOfFiles = logFolder.listFiles();\r\n    Assert.assertNotNull(listOfFiles);\r\n    int currentContainerLogFileIndex = -1;\r\n    for (int i = listOfFiles.length - 1; i >= 0; i--) {\r\n        if (listOfFiles[i].listFiles().length == containerNum + 1) {\r\n            currentContainerLogFileIndex = i;\r\n            break;\r\n        }\r\n    }\r\n    Assert.assertTrue(currentContainerLogFileIndex != -1);\r\n    File[] containerFiles = listOfFiles[currentContainerLogFileIndex].listFiles();\r\n    int numOfWords = 0;\r\n    for (File containerFile : containerFiles) {\r\n        if (containerFile == null) {\r\n            continue;\r\n        }\r\n        for (File output : containerFile.listFiles()) {\r\n            if (output.getName().trim().contains(\"stdout\")) {\r\n                List<String> stdOutContent = new ArrayList<>();\r\n                try (BufferedReader br = new BufferedReader(new FileReader(output))) {\r\n                    String sCurrentLine;\r\n                    int numOfline = 0;\r\n                    while ((sCurrentLine = br.readLine()) != null) {\r\n                        if (count) {\r\n                            if (sCurrentLine.contains(expectedWord)) {\r\n                                numOfWords++;\r\n                            }\r\n                        } else if (output.getName().trim().equals(\"stdout\")) {\r\n                            if (!Shell.WINDOWS) {\r\n                                Assert.assertEquals(\"The current is\" + sCurrentLine, expectedContent.get(numOfline), sCurrentLine.trim());\r\n                                numOfline++;\r\n                            } else {\r\n                                stdOutContent.add(sCurrentLine.trim());\r\n                            }\r\n                        }\r\n                    }\r\n                    if (Shell.WINDOWS && !count && output.getName().trim().equals(\"stdout\")) {\r\n                        Assert.assertTrue(stdOutContent.containsAll(expectedContent));\r\n                    }\r\n                } catch (IOException e) {\r\n                    LOG.error(\"Exception reading the buffer\", e);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return numOfWords;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDistributedShellResourceProfiles",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testDistributedShellResourceProfiles() throws Exception\n{\r\n    int appNameCounter = 0;\r\n    String[][] args = { createArgsWithPostFix(appNameCounter++, \"--num_containers\", \"1\", \"--shell_command\", getListCommand(), \"--container_resource_profile\", \"maximum\"), createArgsWithPostFix(appNameCounter++, \"--num_containers\", \"1\", \"--shell_command\", getListCommand(), \"--master_resource_profile\", \"default\"), createArgsWithPostFix(appNameCounter++, \"--num_containers\", \"1\", \"--shell_command\", getListCommand(), \"--master_resource_profile\", \"default\", \"--container_resource_profile\", \"maximum\") };\r\n    for (int i = 0; i < args.length; ++i) {\r\n        LOG.info(\"Initializing DS Client[{}]\", i);\r\n        setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n        Assert.assertTrue(getDSClient().init(args[i]));\r\n        LOG.info(\"Running DS Client[{}]\", i);\r\n        LambdaTestUtils.intercept(Exception.class, () -> getDSClient().run());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDSShellWithOpportunisticContainers",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testDSShellWithOpportunisticContainers() throws Exception\n{\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"2\", \"--master_memory\", \"512\", \"--master_vcores\", \"2\", \"--container_memory\", \"128\", \"--container_vcores\", \"1\", \"--shell_command\", \"date\", \"--container_type\", \"OPPORTUNISTIC\");\r\n    assertTrue(getDSClient().init(args));\r\n    assertTrue(getDSClient().run());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDistributedShellAMResourcesWithUnknownResource",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testDistributedShellAMResourcesWithUnknownResource() throws Exception\n{\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"1\", \"--shell_command\", getListCommand(), \"--master_resources\", \"unknown-resource=5\");\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    assertTrue(getDSClient().init(args));\r\n    getDSClient().run();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDistributedShellNonExistentQueue",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testDistributedShellNonExistentQueue() throws Exception\n{\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"1\", \"--shell_command\", getListCommand(), \"--queue\", \"non-existent-queue\");\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    assertTrue(getDSClient().init(args));\r\n    getDSClient().run();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDistributedShellWithSingleFileLocalization",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testDistributedShellWithSingleFileLocalization() throws Exception\n{\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"1\", \"--shell_command\", getCatCommand(), \"--localize_files\", \"./src/test/resources/a.txt\", \"--shell_args\", \"a.txt\");\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    assertTrue(getDSClient().init(args));\r\n    assertTrue(\"Client exited with an error\", getDSClient().run());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDistributedShellWithMultiFileLocalization",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testDistributedShellWithMultiFileLocalization() throws Exception\n{\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"1\", \"--shell_command\", getCatCommand(), \"--localize_files\", \"./src/test/resources/a.txt,./src/test/resources/b.txt\", \"--shell_args\", \"a.txt b.txt\");\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    assertTrue(getDSClient().init(args));\r\n    assertTrue(\"Client exited with an error\", getDSClient().run());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDistributedShellWithNonExistentFileLocalization",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testDistributedShellWithNonExistentFileLocalization() throws Exception\n{\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"1\", \"--shell_command\", getCatCommand(), \"--localize_files\", \"/non/existing/path/file.txt\", \"--shell_args\", \"file.txt\");\r\n    setAndGetDSClient(new Configuration(getYarnClusterConfiguration()));\r\n    assertTrue(getDSClient().init(args));\r\n    assertTrue(getDSClient().run());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "testDistributedShellCleanup",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testDistributedShellCleanup() throws Exception\n{\r\n    String[] args = createArgumentsWithAppName(\"--num_containers\", \"1\", \"--shell_command\", getListCommand());\r\n    Configuration config = new Configuration(getYarnClusterConfiguration());\r\n    setAndGetDSClient(config);\r\n    assertTrue(getDSClient().init(args));\r\n    assertTrue(getDSClient().run());\r\n    ApplicationId appId = getDSClient().getAppId();\r\n    String relativePath = ApplicationMaster.getRelativePath(generateAppName(), appId.toString(), \"\");\r\n    FileSystem fs1 = FileSystem.get(config);\r\n    Path path = new Path(fs1.getHomeDirectory(), relativePath);\r\n    GenericTestUtils.waitFor(() -> {\r\n        try {\r\n            return !fs1.exists(path);\r\n        } catch (IOException e) {\r\n            return false;\r\n        }\r\n    }, 10, 60000);\r\n    assertFalse(\"Distributed Shell Cleanup failed\", fs1.exists(path));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "customizeConfiguration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void customizeConfiguration(YarnConfiguration config) throws Exception\n{\r\n    config.set(CommonConfigurationKeysPublic.FS_DEFAULT_NAME_KEY, CommonConfigurationKeysPublic.FS_DEFAULT_NAME_DEFAULT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-distributedshell\\src\\test\\java\\org\\apache\\hadoop\\yarn\\applications\\distributedshell",
  "methodName" : "getBaseDirForTest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "File getBaseDirForTest()\n{\r\n    return new File(\"target\", TestDSTimelineV10.class.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]