[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    this.controller = new AppStoreController();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testGetRecommended",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetRecommended() throws Exception\n{\r\n    AppStoreController ac = Mockito.mock(AppStoreController.class);\r\n    List<AppStoreEntry> actual = new ArrayList<AppStoreEntry>();\r\n    when(ac.get()).thenReturn(actual);\r\n    final List<AppStoreEntry> result = ac.get();\r\n    assertEquals(result, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testSearch",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testSearch() throws Exception\n{\r\n    String keyword = \"jenkins\";\r\n    AppStoreController ac = Mockito.mock(AppStoreController.class);\r\n    List<AppStoreEntry> expected = new ArrayList<AppStoreEntry>();\r\n    when(ac.search(keyword)).thenReturn(expected);\r\n    final List<AppStoreEntry> actual = ac.search(keyword);\r\n    assertEquals(expected, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testRegister",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testRegister() throws Exception\n{\r\n    AppStoreController ac = Mockito.mock(AppStoreController.class);\r\n    Application app = new Application();\r\n    app.setName(\"jenkins\");\r\n    app.setOrganization(\"jenkins.org\");\r\n    app.setDescription(\"This is a description\");\r\n    app.setIcon(\"/css/img/feather.png\");\r\n    Response expected = Response.ok().build();\r\n    when(ac.register(app)).thenReturn(Response.ok().build());\r\n    final Response actual = ac.register(app);\r\n    assertEquals(expected.getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testPathAnnotation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPathAnnotation() throws Exception\n{\r\n    assertNotNull(this.controller.getClass().getAnnotations());\r\n    assertThat(\"The controller has the annotation Path\", this.controller.getClass().isAnnotationPresent(Path.class));\r\n    final Path path = this.controller.getClass().getAnnotation(Path.class);\r\n    assertThat(\"The path is /app_store\", path.value(), is(\"/app_store\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    this.controller = new AppDetailsController();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testGetDetails",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetDetails() throws Exception\n{\r\n    String id = \"application 1\";\r\n    AppDetailsController ac = Mockito.mock(AppDetailsController.class);\r\n    AppEntry actual = new AppEntry();\r\n    actual.setName(id);\r\n    when(ac.getDetails(id)).thenReturn(actual);\r\n    final AppEntry result = ac.getDetails(id);\r\n    assertEquals(result, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testGetStatus",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testGetStatus() throws Exception\n{\r\n    String id = \"application 1\";\r\n    AppDetailsController ac = Mockito.mock(AppDetailsController.class);\r\n    Service yarnfile = new Service();\r\n    Component comp = new Component();\r\n    Container c = new Container();\r\n    c.setId(\"container-1\");\r\n    List<Container> containers = new ArrayList<Container>();\r\n    containers.add(c);\r\n    comp.setContainers(containers);\r\n    yarnfile.addComponent(comp);\r\n    AppEntry actual = new AppEntry();\r\n    actual.setName(id);\r\n    actual.setYarnfile(yarnfile);\r\n    when(ac.getStatus(id)).thenReturn(actual);\r\n    final AppEntry result = ac.getStatus(id);\r\n    assertEquals(result, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testStopApp",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testStopApp() throws Exception\n{\r\n    String id = \"application 1\";\r\n    AppDetailsController ac = Mockito.mock(AppDetailsController.class);\r\n    Service yarnfile = new Service();\r\n    Component comp = new Component();\r\n    Container c = new Container();\r\n    c.setId(\"container-1\");\r\n    List<Container> containers = new ArrayList<Container>();\r\n    containers.add(c);\r\n    comp.setContainers(containers);\r\n    yarnfile.addComponent(comp);\r\n    Response expected = Response.ok().build();\r\n    when(ac.stopApp(id)).thenReturn(Response.ok().build());\r\n    final Response actual = ac.stopApp(id);\r\n    assertEquals(expected.getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testRestartApp",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testRestartApp() throws Exception\n{\r\n    String id = \"application 1\";\r\n    AppDetailsController ac = Mockito.mock(AppDetailsController.class);\r\n    Service yarnfile = new Service();\r\n    Component comp = new Component();\r\n    Container c = new Container();\r\n    c.setId(\"container-1\");\r\n    List<Container> containers = new ArrayList<Container>();\r\n    containers.add(c);\r\n    comp.setContainers(containers);\r\n    yarnfile.addComponent(comp);\r\n    Response expected = Response.ok().build();\r\n    when(ac.restartApp(id)).thenReturn(Response.ok().build());\r\n    final Response actual = ac.restartApp(id);\r\n    assertEquals(expected.getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testPathAnnotation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPathAnnotation() throws Exception\n{\r\n    assertNotNull(this.controller.getClass().getAnnotations());\r\n    assertThat(\"The controller has the annotation Path\", this.controller.getClass().isAnnotationPresent(Path.class));\r\n    final Path path = this.controller.getClass().getAnnotation(Path.class);\r\n    assertThat(\"The path is /app_details\", path.value(), is(\"/app_details\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testUpgradeApp",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testUpgradeApp() throws Exception\n{\r\n    String id = \"application1\";\r\n    AppDetailsController ac = Mockito.mock(AppDetailsController.class);\r\n    Service yarnfile = new Service();\r\n    yarnfile.setVersion(\"1.0\");\r\n    Component comp = new Component();\r\n    Container c = new Container();\r\n    c.setId(\"container-1\");\r\n    List<Container> containers = new ArrayList<Container>();\r\n    containers.add(c);\r\n    comp.setContainers(containers);\r\n    yarnfile.addComponent(comp);\r\n    Response expected = Response.ok().build();\r\n    when(ac.upgradeApp(id, yarnfile)).thenReturn(Response.ok().build());\r\n    final Response actual = ac.upgradeApp(id, yarnfile);\r\n    assertEquals(expected.getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SolrClient create(final String solrHome, final String configSetHome, final String coreName) throws IOException, SolrServerException\n{\r\n    return create(solrHome, configSetHome, coreName, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "create",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "SolrClient create(final String solrHome, final String configSetHome, final String coreName, final boolean cleanSolrHome) throws IOException, SolrServerException\n{\r\n    final File solrHomeDir = new File(solrHome);\r\n    if (solrHomeDir.exists()) {\r\n        FileUtils.deleteDirectory(solrHomeDir);\r\n        solrHomeDir.mkdirs();\r\n    } else {\r\n        solrHomeDir.mkdirs();\r\n    }\r\n    final Path configSetPath = Paths.get(configSetHome).toAbsolutePath();\r\n    final NodeConfig config = new NodeConfig.NodeConfigBuilder(\"embeddedSolrServerNode\", solrHomeDir.toPath()).setConfigSetBaseDirectory(configSetPath.toString()).build();\r\n    final EmbeddedSolrServer embeddedSolrServer = new EmbeddedSolrServer(config, coreName);\r\n    final CoreAdminRequest.Create createRequest = new CoreAdminRequest.Create();\r\n    createRequest.setCoreName(coreName);\r\n    createRequest.setConfigSet(coreName);\r\n    embeddedSolrServer.request(createRequest);\r\n    return embeddedSolrServer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    this.controller = new AppListController();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testGetList",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetList() throws Exception\n{\r\n    AppListController ac = Mockito.mock(AppListController.class);\r\n    List<AppEntry> actual = new ArrayList<AppEntry>();\r\n    when(ac.getList()).thenReturn(actual);\r\n    final List<AppEntry> result = ac.getList();\r\n    assertEquals(result, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testDelete",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDelete() throws Exception\n{\r\n    String id = \"application 1\";\r\n    AppListController ac = Mockito.mock(AppListController.class);\r\n    Response expected = Response.ok().build();\r\n    when(ac.delete(id, id)).thenReturn(Response.ok().build());\r\n    final Response actual = ac.delete(id, id);\r\n    assertEquals(expected.getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testDeploy",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDeploy() throws Exception\n{\r\n    String id = \"application 1\";\r\n    AppListController ac = Mockito.mock(AppListController.class);\r\n    Service service = new Service();\r\n    Response expected = Response.ok().build();\r\n    when(ac.deploy(id, service)).thenReturn(Response.ok().build());\r\n    final Response actual = ac.deploy(id, service);\r\n    assertEquals(expected.getStatus(), actual.getStatus());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\controller",
  "methodName" : "testPathAnnotation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testPathAnnotation() throws Exception\n{\r\n    assertNotNull(this.controller.getClass().getAnnotations());\r\n    assertThat(\"The controller has the annotation Path\", this.controller.getClass().isAnnotationPresent(Path.class));\r\n    final Path path = this.controller.getClass().getAnnotation(Path.class);\r\n    assertThat(\"The path is /app_list\", path.value(), is(\"/app_list\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    String targetLocation = EmbeddedSolrServerFactory.class.getProtectionDomain().getCodeSource().getLocation().getFile() + \"/..\";\r\n    String solrHome = targetLocation.split(\"/test-classes\")[0] + \"/solr\";\r\n    solrClient = EmbeddedSolrServerFactory.create(solrHome, CONFIGSET_DIR, \"exampleCollection\");\r\n    spy = PowerMockito.spy(new AppCatalogSolrClient());\r\n    when(spy, method(AppCatalogSolrClient.class, \"getSolrClient\")).withNoArguments().thenReturn(solrClient);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "teardown",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown() throws Exception\n{\r\n    try {\r\n        solrClient.close();\r\n    } catch (Exception e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "testRegister",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRegister() throws Exception\n{\r\n    Application example = new Application();\r\n    example.setOrganization(\"jenkins-ci.org\");\r\n    example.setName(\"jenkins\");\r\n    example.setDescription(\"World leading open source automation system.\");\r\n    example.setIcon(\"/css/img/feather.png\");\r\n    spy.register(example);\r\n    List<AppStoreEntry> apps = spy.getRecommendedApps();\r\n    assertEquals(1, apps.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "testSearch",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testSearch() throws Exception\n{\r\n    Application example = new Application();\r\n    example.setOrganization(\"jenkins-ci.org\");\r\n    example.setName(\"jenkins\");\r\n    example.setDescription(\"World leading open source automation system.\");\r\n    example.setIcon(\"/css/img/feather.png\");\r\n    spy.register(example);\r\n    List<AppStoreEntry> results = spy.search(\"name_s:jenkins\");\r\n    int expected = 1;\r\n    int actual = results.size();\r\n    assertEquals(expected, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "testNotFoundSearch",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testNotFoundSearch() throws Exception\n{\r\n    Application example = new Application();\r\n    example.setOrganization(\"jenkins-ci.org\");\r\n    example.setName(\"jenkins\");\r\n    example.setDescription(\"World leading open source automation system.\");\r\n    example.setIcon(\"/css/img/feather.png\");\r\n    spy.register(example);\r\n    List<AppStoreEntry> results = spy.search(\"name_s:abc\");\r\n    int expected = 0;\r\n    int actual = results.size();\r\n    assertEquals(expected, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "testGetRecommendedApps",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testGetRecommendedApps() throws Exception\n{\r\n    AppStoreEntry example = new AppStoreEntry();\r\n    example.setOrg(\"jenkins-ci.org\");\r\n    example.setName(\"jenkins\");\r\n    example.setDesc(\"World leading open source automation system.\");\r\n    example.setIcon(\"/css/img/feather.png\");\r\n    example.setDownload(100);\r\n    spy.register(example);\r\n    AppStoreEntry example2 = new AppStoreEntry();\r\n    example2.setOrg(\"Apache\");\r\n    example2.setName(\"httpd\");\r\n    example2.setDesc(\"Apache webserver\");\r\n    example2.setIcon(\"/css/img/feather.png\");\r\n    example2.setDownload(1);\r\n    spy.register(example2);\r\n    List<AppStoreEntry> actual = spy.getRecommendedApps();\r\n    long previous = 1000L;\r\n    for (AppStoreEntry app : actual) {\r\n        assertTrue(\"Recommend app is not sort by download count.\", previous > app.getDownload());\r\n        previous = app.getDownload();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-applications-catalog\\hadoop-yarn-applications-catalog-webapp\\src\\test\\java\\org\\apache\\hadoop\\yarn\\appcatalog\\application",
  "methodName" : "testUpgradeApp",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testUpgradeApp() throws Exception\n{\r\n    Application example = new Application();\r\n    String expected = \"2.0\";\r\n    String actual = \"\";\r\n    example.setOrganization(\"jenkins-ci.org\");\r\n    example.setVersion(\"1.0\");\r\n    example.setName(\"jenkins\");\r\n    example.setDescription(\"World leading open source automation system.\");\r\n    example.setIcon(\"/css/img/feather.png\");\r\n    spy.register(example);\r\n    spy.deployApp(\"test\", example);\r\n    example.setVersion(\"2.0\");\r\n    spy.upgradeApp(example);\r\n    List<AppEntry> appEntries = spy.listAppEntries();\r\n    actual = appEntries.get(appEntries.size() - 1).getYarnfile().getVersion();\r\n    assertEquals(expected, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]