[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\records\\timelineservice",
  "methodName" : "testIsApplicationEntity",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testIsApplicationEntity()\n{\r\n    TimelineEntity te = new TimelineEntity();\r\n    te.setType(TimelineEntityType.YARN_APPLICATION.toString());\r\n    assertTrue(ApplicationEntity.isApplicationEntity(te));\r\n    te = null;\r\n    assertEquals(false, ApplicationEntity.isApplicationEntity(te));\r\n    te = new TimelineEntity();\r\n    te.setType(TimelineEntityType.YARN_CLUSTER.toString());\r\n    assertEquals(false, ApplicationEntity.isApplicationEntity(te));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\records\\timelineservice",
  "methodName" : "testGetApplicationEvent",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testGetApplicationEvent()\n{\r\n    TimelineEntity te = null;\r\n    TimelineEvent tEvent = ApplicationEntity.getApplicationEvent(te, \"no event\");\r\n    assertEquals(null, tEvent);\r\n    te = new TimelineEntity();\r\n    te.setType(TimelineEntityType.YARN_APPLICATION.toString());\r\n    TimelineEvent event = new TimelineEvent();\r\n    event.setId(\"start_event\");\r\n    event.setTimestamp(System.currentTimeMillis());\r\n    te.addEvent(event);\r\n    tEvent = ApplicationEntity.getApplicationEvent(te, \"start_event\");\r\n    assertEquals(event, tEvent);\r\n    te = new TimelineEntity();\r\n    te.setType(TimelineEntityType.YARN_CLUSTER.toString());\r\n    event = new TimelineEvent();\r\n    event.setId(\"start_event_cluster\");\r\n    event.setTimestamp(System.currentTimeMillis());\r\n    te.addEvent(event);\r\n    tEvent = ApplicationEntity.getApplicationEvent(te, \"start_event_cluster\");\r\n    assertEquals(null, tEvent);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\conf",
  "methodName" : "initializeMemberVariables",
  "errType" : null,
  "containingMethodsNum" : 70,
  "sourceCodeText" : "void initializeMemberVariables()\n{\r\n    xmlFilename = new String(\"yarn-default.xml\");\r\n    configurationClasses = new Class[] { YarnConfiguration.class };\r\n    configurationPropsToSkipCompare = new HashSet<String>();\r\n    configurationPrefixToSkipCompare = new HashSet<String>();\r\n    errorIfMissingConfigProps = true;\r\n    errorIfMissingXmlProps = true;\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.YARN_SECURITY_SERVICE_AUTHORIZATION_APPLICATIONCLIENT_PROTOCOL);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.YARN_SECURITY_SERVICE_AUTHORIZATION_APPLICATIONMASTER_PROTOCOL);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.YARN_SECURITY_SERVICE_AUTHORIZATION_CONTAINER_MANAGEMENT_PROTOCOL);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCE_LOCALIZER);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCEMANAGER_ADMINISTRATION_PROTOCOL);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.YARN_SECURITY_SERVICE_AUTHORIZATION_RESOURCETRACKER_PROTOCOL);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.YARN_SECURITY_SERVICE_AUTHORIZATION_COLLECTOR_NODEMANAGER_PROTOCOL);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.YARN_SECURITY_SERVICE_AUTHORIZATION_DISTRIBUTEDSCHEDULING_PROTOCOL);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.YARN_SECURITY_SERVICE_AUTHORIZATION_APPLICATIONMASTER_NODEMANAGER_PROTOCOL);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.CURATOR_LEADER_ELECTOR);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.RM_RESERVATION_SYSTEM_MAX_PERIODICITY);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.DEFAULT_FEDERATION_STATESTORE_CLIENT_CLASS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.FEDERATION_FAILOVER_ENABLED);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.FEDERATION_STATESTORE_HEARTBEAT_INTERVAL_SECS);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.FEDERATION_FLUSH_CACHE_FOR_RM_ADDR);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.RM_EPOCH);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.ROUTER_CLIENTRM_ADDRESS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.ROUTER_RMADMIN_ADDRESS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.ROUTER_WEBAPP_DEFAULT_INTERCEPTOR_CLASS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.FEDERATION_POLICY_MANAGER);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.FEDERATION_POLICY_MANAGER_PARAMS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.DEFAULT_FEDERATION_POLICY_KEY);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.DEFAULT_FEDERATION_POLICY_MANAGER);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.DEFAULT_FEDERATION_POLICY_MANAGER_PARAMS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.FEDERATION_STATESTORE_ZK_PARENT_PATH);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.FEDERATION_STATESTORE_SQL_JDBC_CLASS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.DEFAULT_FEDERATION_STATESTORE_SQL_JDBC_CLASS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.FEDERATION_STATESTORE_SQL_USERNAME);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.FEDERATION_STATESTORE_SQL_PASSWORD);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.FEDERATION_STATESTORE_SQL_URL);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.FEDERATION_STATESTORE_SQL_MAXCONNECTIONS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.AM_SCHEDULING_NODE_BLACKLISTING_ENABLED);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.AM_SCHEDULING_NODE_BLACKLISTING_DISABLE_THRESHOLD);\r\n    configurationPrefixToSkipCompare.add(\"yarn.timeline-service.\");\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.RM_SYSTEM_METRICS_PUBLISHER_ENABLED);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.RM_ZK_ADDRESS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.RM_ZK_NUM_RETRIES);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.RM_ZK_TIMEOUT_MS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.RM_ZK_RETRY_INTERVAL_MS);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.RM_ZK_AUTH);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.RM_ZK_ACL);\r\n    configurationPrefixToSkipCompare.add(\"yarn.app.container\");\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_SOURCE_FILE);\r\n    configurationPropsToSkipCompare.add(YarnConfiguration.HADOOP_HTTP_WEBAPP_SCHEDULER_PAGE);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.NM_NETWORK_RESOURCE_ENABLED);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.NM_NETWORK_RESOURCE_INTERFACE);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_MBIT);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.NM_NETWORK_RESOURCE_OUTBOUND_BANDWIDTH_YARN_MBIT);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.NM_DISK_RESOURCE_ENABLED);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.NM_CPU_RESOURCE_ENABLED);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.NM_NETWORK_TAG_MAPPING_MANAGER);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.NM_NETWORK_TAG_MAPPING_FILE_PATH);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.NM_NETWORK_TAG_PREFIX);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.ROUTER_CLIENTRM_SUBMIT_RETRY);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.ROUTER_CLIENTRM_PARTIAL_RESULTS_ENABLED);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.ROUTER_WEBAPP_PARTIAL_RESULTS_ENABLED);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.ROUTER_WEBAPP_CONNECT_TIMEOUT);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.ROUTER_WEBAPP_READ_TIMEOUT);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.NM_USER_HOME_DIR);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS);\r\n    configurationPrefixToSkipCompare.add(YarnConfiguration.DISPLAY_APPS_FOR_LOGGED_IN_USER);\r\n    xmlPropsToSkipCompare = new HashSet<String>();\r\n    xmlPrefixToSkipCompare = new HashSet<String>();\r\n    xmlPropsToSkipCompare.add(\"yarn.nodemanager.aux-services.mapreduce_shuffle.class\");\r\n    xmlPropsToSkipCompare.add(\"yarn.resourcemanager.container.liveness-monitor.interval-ms\");\r\n    xmlPropsToSkipCompare.add(\"yarn.nodemanager.hostname\");\r\n    xmlPrefixToSkipCompare.add(\"yarn.timeline-service\");\r\n    xmlPrefixToSkipCompare.add(\"hadoop.registry\");\r\n    xmlPrefixToSkipCompare.add(\"yarn.log-aggregation.file-controller.TFile.class\");\r\n    initDefaultValueCollisionCheck();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\conf",
  "methodName" : "initDefaultValueCollisionCheck",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initDefaultValueCollisionCheck()\n{\r\n    filtersForDefaultValueCollisionCheck.add(\"_PORT\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\records",
  "methodName" : "testCastToIntSafely",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testCastToIntSafely()\n{\r\n    assertEquals(0, Resource.castToIntSafely(0));\r\n    assertEquals(1, Resource.castToIntSafely(1));\r\n    assertEquals(Integer.MAX_VALUE, Resource.castToIntSafely(Integer.MAX_VALUE));\r\n    assertEquals(Integer.MAX_VALUE, Resource.castToIntSafely(Integer.MAX_VALUE + 1L), \"Cast to Integer.MAX_VALUE if the long is greater than \" + \"Integer.MAX_VALUE\");\r\n    assertEquals(Integer.MAX_VALUE, Resource.castToIntSafely(Long.MAX_VALUE), \"Cast to Integer.MAX_VALUE if the long is greater than \" + \"Integer.MAX_VALUE\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\resource",
  "methodName" : "testTargetExpressionParser",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 30,
  "sourceCodeText" : "void testTargetExpressionParser() throws PlacementConstraintParseException\n{\r\n    String expressionStr;\r\n    ConstraintParser parser;\r\n    AbstractConstraint constraint;\r\n    SingleConstraint single;\r\n    expressionStr = \"NOTIN, NODE, foo\";\r\n    parser = new TargetConstraintParser(expressionStr);\r\n    constraint = parser.parse();\r\n    assertTrue(constraint instanceof SingleConstraint);\r\n    single = (SingleConstraint) constraint;\r\n    assertEquals(\"node\", single.getScope());\r\n    assertEquals(0, single.getMinCardinality());\r\n    assertEquals(0, single.getMaxCardinality());\r\n    verifyConstraintToString(expressionStr, constraint);\r\n    expressionStr = \"notin, node, foo\";\r\n    parser = new TargetConstraintParser(expressionStr);\r\n    constraint = parser.parse();\r\n    assertTrue(constraint instanceof SingleConstraint);\r\n    single = (SingleConstraint) constraint;\r\n    assertEquals(\"node\", single.getScope());\r\n    assertEquals(0, single.getMinCardinality());\r\n    assertEquals(0, single.getMaxCardinality());\r\n    verifyConstraintToString(expressionStr, constraint);\r\n    expressionStr = \"IN, NODE, foo\";\r\n    parser = new TargetConstraintParser(expressionStr);\r\n    constraint = parser.parse();\r\n    assertTrue(constraint instanceof SingleConstraint);\r\n    single = (SingleConstraint) constraint;\r\n    assertEquals(\"node\", single.getScope());\r\n    assertEquals(1, single.getMinCardinality());\r\n    assertEquals(Integer.MAX_VALUE, single.getMaxCardinality());\r\n    verifyConstraintToString(expressionStr, constraint);\r\n    expressionStr = \"NOTIN, NODE, foo, bar, exp\";\r\n    parser = new TargetConstraintParser(expressionStr);\r\n    constraint = parser.parse();\r\n    assertTrue(constraint instanceof SingleConstraint);\r\n    single = (SingleConstraint) constraint;\r\n    assertEquals(\"node\", single.getScope());\r\n    assertEquals(0, single.getMinCardinality());\r\n    assertEquals(0, single.getMaxCardinality());\r\n    assertEquals(3, single.getTargetExpressions().size());\r\n    Set<TargetExpression> expectedTargetExpressions = Sets.newHashSet(PlacementTargets.allocationTag(\"foo\"), PlacementTargets.allocationTag(\"bar\"), PlacementTargets.allocationTag(\"exp\"));\r\n    assertTrue(Sets.difference(expectedTargetExpressions, single.getTargetExpressions()).isEmpty());\r\n    verifyConstraintToString(expressionStr, constraint);\r\n    parser = new TargetConstraintParser(\"XYZ, NODE, foo\");\r\n    try {\r\n        parser.parse();\r\n    } catch (Exception e) {\r\n        assertTrue(e instanceof PlacementConstraintParseException);\r\n        assertTrue(e.getMessage().contains(\"expecting in or notin\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\resource",
  "methodName" : "testCardinalityConstraintParser",
  "errType" : [ "PlacementConstraintParseException", "PlacementConstraintParseException" ],
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testCardinalityConstraintParser() throws PlacementConstraintParseException\n{\r\n    String expressionExpr;\r\n    ConstraintParser parser;\r\n    AbstractConstraint constraint;\r\n    SingleConstraint single;\r\n    expressionExpr = \"cardinality, NODE, foo, 0, 1\";\r\n    parser = new CardinalityConstraintParser(expressionExpr);\r\n    constraint = parser.parse();\r\n    assertTrue(constraint instanceof SingleConstraint);\r\n    single = (SingleConstraint) constraint;\r\n    assertEquals(\"node\", single.getScope());\r\n    assertEquals(0, single.getMinCardinality());\r\n    assertEquals(1, single.getMaxCardinality());\r\n    assertEquals(1, single.getTargetExpressions().size());\r\n    TargetExpression exp = single.getTargetExpressions().iterator().next();\r\n    assertEquals(\"ALLOCATION_TAG\", exp.getTargetType().toString());\r\n    assertEquals(1, exp.getTargetValues().size());\r\n    assertEquals(\"foo\", exp.getTargetValues().iterator().next());\r\n    verifyConstraintToString(expressionExpr, constraint);\r\n    expressionExpr = \"cardinality,RACK,foo,bar,moo,0,1\";\r\n    parser = new CardinalityConstraintParser(expressionExpr);\r\n    constraint = parser.parse();\r\n    assertTrue(constraint instanceof SingleConstraint);\r\n    single = (SingleConstraint) constraint;\r\n    assertEquals(\"rack\", single.getScope());\r\n    assertEquals(0, single.getMinCardinality());\r\n    assertEquals(1, single.getMaxCardinality());\r\n    assertEquals(3, single.getTargetExpressions().size());\r\n    Set<TargetExpression> expectedTargetExpressions = Sets.newHashSet(PlacementTargets.allocationTag(\"foo\"), PlacementTargets.allocationTag(\"bar\"), PlacementTargets.allocationTag(\"moo\"));\r\n    assertTrue(Sets.difference(expectedTargetExpressions, single.getTargetExpressions()).isEmpty());\r\n    verifyConstraintToString(expressionExpr, constraint);\r\n    try {\r\n        parser = new CardinalityConstraintParser(\"cardinality,NOWHERE,foo,bar,moo,0,1\");\r\n        parser.parse();\r\n        fail(\"Expecting a parsing failure!\");\r\n    } catch (PlacementConstraintParseException e) {\r\n        assertTrue(e.getMessage().contains(\"expecting scope to node or rack, but met NOWHERE\"));\r\n    }\r\n    try {\r\n        parser = new CardinalityConstraintParser(\"cardinality,NODE,0,1\");\r\n        parser.parse();\r\n        fail(\"Expecting a parsing failure!\");\r\n    } catch (PlacementConstraintParseException e) {\r\n        assertTrue(e.getMessage().contains(\"at least 5 elements, but only 4 is given\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\resource",
  "methodName" : "testAndConstraintParser",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testAndConstraintParser() throws PlacementConstraintParseException\n{\r\n    String expressionExpr;\r\n    ConstraintParser parser;\r\n    AbstractConstraint constraint;\r\n    And and;\r\n    expressionExpr = \"AND(NOTIN,NODE,foo:NOTIN,NODE,bar)\";\r\n    parser = new ConjunctionConstraintParser(expressionExpr);\r\n    constraint = parser.parse();\r\n    assertTrue(constraint instanceof And);\r\n    and = (And) constraint;\r\n    assertEquals(2, and.getChildren().size());\r\n    verifyConstraintToString(expressionExpr, constraint);\r\n    expressionExpr = \"AND(NOTIN,NODE,foo:cardinality,NODE,foo,0,1)\";\r\n    parser = new ConjunctionConstraintParser(expressionExpr);\r\n    constraint = parser.parse();\r\n    assertTrue(constraint instanceof And);\r\n    assertEquals(2, and.getChildren().size());\r\n    verifyConstraintToString(expressionExpr, constraint);\r\n    expressionExpr = \"AND(NOTIN,NODE,foo:AND(NOTIN,NODE,foo:cardinality,NODE,foo,0,1))\";\r\n    parser = new ConjunctionConstraintParser(expressionExpr);\r\n    constraint = parser.parse();\r\n    assertTrue(constraint instanceof And);\r\n    and = (And) constraint;\r\n    assertTrue(and.getChildren().get(0) instanceof SingleConstraint);\r\n    assertTrue(and.getChildren().get(1) instanceof And);\r\n    and = (And) and.getChildren().get(1);\r\n    assertEquals(2, and.getChildren().size());\r\n    verifyConstraintToString(expressionExpr, constraint);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\resource",
  "methodName" : "testOrConstraintParser",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testOrConstraintParser() throws PlacementConstraintParseException\n{\r\n    String expressionExpr;\r\n    ConstraintParser parser;\r\n    AbstractConstraint constraint;\r\n    Or or;\r\n    expressionExpr = \"OR(NOTIN,NODE,foo:NOTIN,NODE,bar)\";\r\n    parser = new ConjunctionConstraintParser(expressionExpr);\r\n    constraint = parser.parse();\r\n    assertTrue(constraint instanceof Or);\r\n    or = (Or) constraint;\r\n    assertEquals(2, or.getChildren().size());\r\n    verifyConstraintToString(expressionExpr, constraint);\r\n    expressionExpr = \"OR(NOTIN,NODE,foo:cardinality,NODE,foo,0,1)\";\r\n    parser = new ConjunctionConstraintParser(expressionExpr);\r\n    constraint = parser.parse();\r\n    assertTrue(constraint instanceof Or);\r\n    assertEquals(2, or.getChildren().size());\r\n    verifyConstraintToString(expressionExpr, constraint);\r\n    expressionExpr = \"OR(NOTIN,NODE,foo:OR(NOTIN,NODE,foo:cardinality,NODE,foo,0,1))\";\r\n    parser = new ConjunctionConstraintParser(expressionExpr);\r\n    constraint = parser.parse();\r\n    assertTrue(constraint instanceof Or);\r\n    or = (Or) constraint;\r\n    assertTrue(or.getChildren().get(0) instanceof SingleConstraint);\r\n    assertTrue(or.getChildren().get(1) instanceof Or);\r\n    or = (Or) or.getChildren().get(1);\r\n    assertEquals(2, or.getChildren().size());\r\n    verifyConstraintToString(expressionExpr, constraint);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\resource",
  "methodName" : "testMultipleConstraintsTokenizer",
  "errType" : [ "PlacementConstraintParseException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testMultipleConstraintsTokenizer() throws PlacementConstraintParseException\n{\r\n    MultipleConstraintsTokenizer ct;\r\n    SourceTagsTokenizer st;\r\n    TokenizerTester mp;\r\n    ct = new MultipleConstraintsTokenizer(\"foo(1),A1,A2,A3:bar(2),B1,B2:moo(3),C1,C2\");\r\n    mp = new TokenizerTester(ct, \"foo(1),A1,A2,A3\", \"bar(2),B1,B2\", \"moo(3),C1,C2\");\r\n    mp.verify();\r\n    ct = new MultipleConstraintsTokenizer(\"foo(1),AND(A2:A3):bar(2),OR(B1:AND(B2:B3)):moo(3),C1,C2\");\r\n    mp = new TokenizerTester(ct, \"foo(1),AND(A2:A3)\", \"bar(2),OR(B1:AND(B2:B3))\", \"moo(3),C1,C2\");\r\n    mp.verify();\r\n    ct = new MultipleConstraintsTokenizer(\"A:B:C\");\r\n    mp = new TokenizerTester(ct, \"A\", \"B\", \"C\");\r\n    mp.verify();\r\n    ct = new MultipleConstraintsTokenizer(\"A:AND(B:C):D\");\r\n    mp = new TokenizerTester(ct, \"A\", \"AND(B:C)\", \"D\");\r\n    mp.verify();\r\n    ct = new MultipleConstraintsTokenizer(\"A:AND(B:OR(C:D)):E\");\r\n    mp = new TokenizerTester(ct, \"A\", \"AND(B:OR(C:D))\", \"E\");\r\n    mp.verify();\r\n    ct = new MultipleConstraintsTokenizer(\"A:AND(B:OR(C:D)):E\");\r\n    mp = new TokenizerTester(ct, \"A\", \"AND(B:OR(C:D))\", \"E\");\r\n    mp.verify();\r\n    st = new SourceTagsTokenizer(\"A(4)\");\r\n    mp = new TokenizerTester(st, \"A\", \"4\");\r\n    mp.verify();\r\n    try {\r\n        st = new SourceTagsTokenizer(\"A(B)\");\r\n        mp = new TokenizerTester(st, \"A\", \"B\");\r\n        mp.verify();\r\n        fail(\"Expecting a parsing failure\");\r\n    } catch (PlacementConstraintParseException e) {\r\n        assertTrue(e.getMessage().contains(\"Value of the expression must be an integer\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\resource",
  "methodName" : "testParsePlacementSpec",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 74,
  "sourceCodeText" : "void testParsePlacementSpec() throws PlacementConstraintParseException\n{\r\n    Map<SourceTags, PlacementConstraint> result;\r\n    PlacementConstraint expectedPc1, expectedPc2;\r\n    PlacementConstraint actualPc1, actualPc2;\r\n    SourceTags tag1, tag2;\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"foo(3)\");\r\n    assertEquals(1, result.size());\r\n    tag1 = result.keySet().iterator().next();\r\n    assertEquals(\"foo\", tag1.getTag());\r\n    assertEquals(3, tag1.getNumOfAllocations());\r\n    expectedPc1 = null;\r\n    actualPc1 = result.values().iterator().next();\r\n    assertEquals(expectedPc1, actualPc1);\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"foo(3),notin,node,foo\");\r\n    assertEquals(1, result.size());\r\n    tag1 = result.keySet().iterator().next();\r\n    assertEquals(\"foo\", tag1.getTag());\r\n    assertEquals(3, tag1.getNumOfAllocations());\r\n    expectedPc1 = targetNotIn(\"node\", allocationTag(\"foo\")).build();\r\n    actualPc1 = result.values().iterator().next();\r\n    assertEquals(expectedPc1, actualPc1);\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"foo(3),NOTIN,NODE,foo\");\r\n    assertEquals(1, result.size());\r\n    tag1 = result.keySet().iterator().next();\r\n    assertEquals(\"foo\", tag1.getTag());\r\n    assertEquals(3, tag1.getNumOfAllocations());\r\n    expectedPc1 = targetNotIn(\"node\", allocationTag(\"foo\")).build();\r\n    actualPc1 = result.values().iterator().next();\r\n    assertEquals(expectedPc1, actualPc1);\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"foo(10),cardinality,node,foo,bar,0,100\");\r\n    assertEquals(1, result.size());\r\n    tag1 = result.keySet().iterator().next();\r\n    assertEquals(\"foo\", tag1.getTag());\r\n    assertEquals(10, tag1.getNumOfAllocations());\r\n    TargetExpression[] targetExpressions = new TargetExpression[] { PlacementTargets.allocationTag(\"foo\"), PlacementTargets.allocationTag(\"bar\") };\r\n    expectedPc1 = PlacementConstraints.targetCardinality(\"node\", 0, 100, targetExpressions).build();\r\n    assertEquals(expectedPc1, result.values().iterator().next());\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"foo(3),notin,node,foo:bar(2),in,node,foo\");\r\n    assertEquals(2, result.size());\r\n    Iterator<SourceTags> keyIt = result.keySet().iterator();\r\n    tag1 = keyIt.next();\r\n    assertEquals(\"foo\", tag1.getTag());\r\n    assertEquals(3, tag1.getNumOfAllocations());\r\n    tag2 = keyIt.next();\r\n    assertEquals(\"bar\", tag2.getTag());\r\n    assertEquals(2, tag2.getNumOfAllocations());\r\n    Iterator<PlacementConstraint> valueIt = result.values().iterator();\r\n    expectedPc1 = targetNotIn(\"node\", allocationTag(\"foo\")).build();\r\n    expectedPc2 = targetIn(\"node\", allocationTag(\"foo\")).build();\r\n    assertEquals(expectedPc1, valueIt.next());\r\n    assertEquals(expectedPc2, valueIt.next());\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"foo(1000),and(notin,node,bar:in,node,foo)\");\r\n    assertEquals(1, result.size());\r\n    keyIt = result.keySet().iterator();\r\n    tag1 = keyIt.next();\r\n    assertEquals(\"foo\", tag1.getTag());\r\n    assertEquals(1000, tag1.getNumOfAllocations());\r\n    actualPc1 = result.values().iterator().next();\r\n    expectedPc1 = and(targetNotIn(\"node\", allocationTag(\"bar\")), targetIn(\"node\", allocationTag(\"foo\"))).build();\r\n    assertEquals(expectedPc1, actualPc1);\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"foo(1000),and(notin,node,bar:or(in,node,foo:in,node,moo))\" + \":bar(200),notin,node,foo\");\r\n    assertEquals(2, result.size());\r\n    keyIt = result.keySet().iterator();\r\n    tag1 = keyIt.next();\r\n    tag2 = keyIt.next();\r\n    assertEquals(\"foo\", tag1.getTag());\r\n    assertEquals(1000, tag1.getNumOfAllocations());\r\n    assertEquals(\"bar\", tag2.getTag());\r\n    assertEquals(200, tag2.getNumOfAllocations());\r\n    valueIt = result.values().iterator();\r\n    actualPc1 = valueIt.next();\r\n    actualPc2 = valueIt.next();\r\n    expectedPc1 = and(targetNotIn(\"node\", allocationTag(\"bar\")), or(targetIn(\"node\", allocationTag(\"foo\")), targetIn(\"node\", allocationTag(\"moo\")))).build();\r\n    assertEquals(actualPc1, expectedPc1);\r\n    expectedPc2 = targetNotIn(\"node\", allocationTag(\"foo\")).build();\r\n    assertEquals(expectedPc2, actualPc2);\r\n    String[] invalidSpecs = { \"foo(3\", \"foo),bar\", \"foobar\", \"),java=1.7,1.8\" };\r\n    for (String spec : invalidSpecs) {\r\n        try {\r\n            result = PlacementConstraintParser.parsePlacementSpec(spec);\r\n            fail(\"Expected a failure!\");\r\n        } catch (Exception e) {\r\n            assertTrue(e instanceof PlacementConstraintParseException);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\resource",
  "methodName" : "verifyConstraintToString",
  "errType" : [ "PlacementConstraintParseException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void verifyConstraintToString(String inputExpr, AbstractConstraint constraint)\n{\r\n    String constrainExpr = constraint.toString();\r\n    System.out.println(\"Input:    \" + inputExpr.toLowerCase().replaceAll(\" \", \"\"));\r\n    System.out.println(\"ToString: \" + constrainExpr);\r\n    try {\r\n        PlacementConstraintParser.parseExpression(constrainExpr);\r\n    } catch (PlacementConstraintParseException e) {\r\n        fail(\"The parser is unable to parse the expression: \" + constrainExpr + \", caused by: \" + e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\resource",
  "methodName" : "testParseNodeAttributeSpec",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 46,
  "sourceCodeText" : "void testParseNodeAttributeSpec() throws PlacementConstraintParseException\n{\r\n    Map<SourceTags, PlacementConstraint> result;\r\n    PlacementConstraint.AbstractConstraint expectedPc1, expectedPc2;\r\n    PlacementConstraint actualPc1, actualPc2;\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"xyz(4),rm.yarn.io/foo=true\");\r\n    assertEquals(1, result.size());\r\n    TargetExpression target = PlacementTargets.nodeAttribute(\"rm.yarn.io/foo\", \"true\");\r\n    expectedPc1 = targetNodeAttribute(\"node\", NodeAttributeOpCode.EQ, target);\r\n    actualPc1 = result.values().iterator().next();\r\n    assertEquals(expectedPc1, actualPc1.getConstraintExpr());\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"xyz(3),rm.yarn.io/foo!=abc\");\r\n    assertEquals(1, result.size());\r\n    target = PlacementTargets.nodeAttribute(\"rm.yarn.io/foo\", \"abc\");\r\n    expectedPc1 = targetNodeAttribute(\"node\", NodeAttributeOpCode.NE, target);\r\n    actualPc1 = result.values().iterator().next();\r\n    assertEquals(expectedPc1, actualPc1.getConstraintExpr());\r\n    actualPc1 = result.values().iterator().next();\r\n    assertEquals(expectedPc1, actualPc1.getConstraintExpr());\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"xyz(1),rm.yarn.io/foo!=abc:zxy(1),rm.yarn.io/bar=true\");\r\n    assertEquals(2, result.size());\r\n    target = PlacementTargets.nodeAttribute(\"rm.yarn.io/foo\", \"abc\");\r\n    expectedPc1 = targetNodeAttribute(\"node\", NodeAttributeOpCode.NE, target);\r\n    target = PlacementTargets.nodeAttribute(\"rm.yarn.io/bar\", \"true\");\r\n    expectedPc2 = targetNodeAttribute(\"node\", NodeAttributeOpCode.EQ, target);\r\n    Iterator<PlacementConstraint> valueIt = result.values().iterator();\r\n    actualPc1 = valueIt.next();\r\n    actualPc2 = valueIt.next();\r\n    assertEquals(expectedPc1, actualPc1.getConstraintExpr());\r\n    assertEquals(expectedPc2, actualPc2.getConstraintExpr());\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"rm.yarn.io/foo=true\");\r\n    assertEquals(1, result.size());\r\n    target = PlacementTargets.nodeAttribute(\"rm.yarn.io/foo\", \"true\");\r\n    expectedPc1 = targetNodeAttribute(\"node\", NodeAttributeOpCode.EQ, target);\r\n    SourceTags actualSourceTags = result.keySet().iterator().next();\r\n    assertTrue(actualSourceTags.isEmpty());\r\n    actualPc1 = result.values().iterator().next();\r\n    assertEquals(expectedPc1, actualPc1.getConstraintExpr());\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"java=1.7,1.8\");\r\n    assertEquals(1, result.size());\r\n    Set<String> constraintEntities = new TreeSet<>();\r\n    constraintEntities.add(\"1.7\");\r\n    constraintEntities.add(\"1.8\");\r\n    target = PlacementConstraints.PlacementTargets.nodeAttribute(\"java\", constraintEntities.toArray(new String[constraintEntities.size()]));\r\n    expectedPc1 = targetNodeAttribute(\"node\", NodeAttributeOpCode.EQ, target);\r\n    actualSourceTags = result.keySet().iterator().next();\r\n    assertTrue(actualSourceTags.isEmpty());\r\n    actualPc1 = result.values().iterator().next();\r\n    assertEquals(expectedPc1, actualPc1.getConstraintExpr());\r\n    try {\r\n        PlacementConstraintParser.parsePlacementSpec(\"rm.yarn.io/foo=true:xyz(1),notin,node,xyz\");\r\n        fail(\"Expected a failure!\");\r\n    } catch (Exception e) {\r\n        assertTrue(e instanceof PlacementConstraintParseException);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\resource",
  "methodName" : "testParseAllocationTagNameSpace",
  "errType" : [ "PlacementConstraintParseException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testParseAllocationTagNameSpace() throws PlacementConstraintParseException\n{\r\n    Map<SourceTags, PlacementConstraint> result;\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"foo(2),notin,node,not-self/bar,all/moo\");\r\n    assertEquals(1, result.size());\r\n    Set<TargetExpression> expectedTargetExpressions = Sets.newHashSet(PlacementTargets.allocationTagWithNamespace(\"not-self\", \"bar\"), PlacementTargets.allocationTagWithNamespace(\"all\", \"moo\"));\r\n    AbstractConstraint constraint = result.values().iterator().next().getConstraintExpr();\r\n    assertTrue(constraint instanceof SingleConstraint);\r\n    SingleConstraint single = (SingleConstraint) constraint;\r\n    assertEquals(2, single.getTargetExpressions().size());\r\n    assertTrue(Sets.difference(expectedTargetExpressions, single.getTargetExpressions()).isEmpty());\r\n    result = PlacementConstraintParser.parsePlacementSpec(\"foo(2),notin,node,moo\");\r\n    assertEquals(1, result.size());\r\n    TargetExpression expectedTargetExpression = PlacementTargets.allocationTagWithNamespace(\"self\", \"moo\");\r\n    constraint = result.values().iterator().next().getConstraintExpr();\r\n    assertTrue(constraint instanceof SingleConstraint);\r\n    single = (SingleConstraint) constraint;\r\n    assertEquals(1, single.getTargetExpressions().size());\r\n    assertEquals(expectedTargetExpression, single.getTargetExpressions().iterator().next());\r\n    boolean caughtException = false;\r\n    try {\r\n        result = PlacementConstraintParser.parsePlacementSpec(\"foo(2),notin,node,bar/moo\");\r\n    } catch (PlacementConstraintParseException e) {\r\n        caughtException = true;\r\n    }\r\n    assertTrue(caughtException, \"PlacementConstraintParseException is expected\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\records",
  "methodName" : "testConversion",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testConversion() throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.IPC_RECORD_FACTORY_CLASS, RecordFactoryForTest.class.getName());\r\n    String[] pathStrs = new String[] { \"/\", \".\", \"foo/bar\", \"foo\", \"/foo/bar/baz\", \"moo://bar/baz\", \"moo://bar:123/baz\", \"moo:///foo\", \"moo://foo@bar:123/baz/foo\", \"moo://foo@bar/baz/foo\", \"moo://foo@bar\", \"moo://foo:123\" };\r\n    for (String s : pathStrs) {\r\n        Path path = new Path(s);\r\n        assertEquals(path, URL.fromPath(path, conf).toPath());\r\n    }\r\n    Path p = new Path(\"/foo/bar#baz\");\r\n    assertEquals(p, URL.fromPath(p, conf).toPath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\conf",
  "methodName" : "testName",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testName()\n{\r\n    String name = \"yarn.io/test\";\r\n    ResourceInformation ri = ResourceInformation.newInstance(name);\r\n    assertEquals(name, ri.getName(), \"Resource name incorrect\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\conf",
  "methodName" : "testUnits",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUnits()\n{\r\n    String name = \"yarn.io/test\";\r\n    String units = \"m\";\r\n    ResourceInformation ri = ResourceInformation.newInstance(name, units);\r\n    assertEquals(name, ri.getName(), \"Resource name incorrect\");\r\n    assertEquals(units, ri.getUnits(), \"Resource units incorrect\");\r\n    units = \"z\";\r\n    try {\r\n        ResourceInformation.newInstance(name, units).setUnits(units);\r\n        fail(units + \"is not a valid unit\");\r\n    } catch (IllegalArgumentException ie) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\conf",
  "methodName" : "testValue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testValue()\n{\r\n    String name = \"yarn.io/test\";\r\n    long value = 1L;\r\n    ResourceInformation ri = ResourceInformation.newInstance(name, value);\r\n    assertEquals(name, ri.getName(), \"Resource name incorrect\");\r\n    assertEquals(value, ri.getValue(), \"Resource value incorrect\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\conf",
  "methodName" : "testResourceInformation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testResourceInformation()\n{\r\n    String name = \"yarn.io/test\";\r\n    long value = 1L;\r\n    String units = \"m\";\r\n    ResourceInformation ri = ResourceInformation.newInstance(name, units, value);\r\n    assertEquals(name, ri.getName(), \"Resource name incorrect\");\r\n    assertEquals(value, ri.getValue(), \"Resource value incorrect\");\r\n    assertEquals(units, ri.getUnits(), \"Resource units incorrect\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\conf",
  "methodName" : "testEqualsWithTagsAndAttributes",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testEqualsWithTagsAndAttributes()\n{\r\n    ResourceInformation ri01 = ResourceInformation.newInstance(\"r1\", \"M\", 100, ResourceTypes.COUNTABLE, 0, 100, ImmutableSet.of(\"A\", \"B\"), null);\r\n    ResourceInformation ri02 = ResourceInformation.newInstance(\"r1\", \"M\", 100, ResourceTypes.COUNTABLE, 0, 100, ImmutableSet.of(\"B\", \"A\"), null);\r\n    assertEquals(ri01, ri02);\r\n    ResourceInformation ri11 = ResourceInformation.newInstance(\"r1\", \"M\", 100, ResourceTypes.COUNTABLE, 0, 100, null, null);\r\n    ResourceInformation ri12 = ResourceInformation.newInstance(\"r1\", \"M\", 100, ResourceTypes.COUNTABLE, 0, 100, ImmutableSet.of(\"B\", \"A\"), null);\r\n    assertNotEquals(ri11, ri12);\r\n    ResourceInformation ri21 = ResourceInformation.newInstance(\"r1\", \"M\", 100, ResourceTypes.COUNTABLE, 0, 100, null, ImmutableMap.of(\"A\", \"A1\", \"B\", \"B1\"));\r\n    ResourceInformation ri22 = ResourceInformation.newInstance(\"r1\", \"M\", 100, ResourceTypes.COUNTABLE, 0, 100, null, ImmutableMap.of(\"A\", \"A1\", \"B\", \"B2\"));\r\n    assertNotEquals(ri21, ri22);\r\n    ResourceInformation ri31 = ResourceInformation.newInstance(\"r1\", \"M\", 100, ResourceTypes.COUNTABLE, 0, 100, null, null);\r\n    ResourceInformation ri32 = ResourceInformation.newInstance(\"r1\", \"M\", 100, ResourceTypes.COUNTABLE, 0, 100, null, null);\r\n    assertEquals(ri31, ri32);\r\n    ResourceInformation ri41 = ResourceInformation.newInstance(\"r1\", \"M\", 100, ResourceTypes.COUNTABLE, 0, 100, ImmutableSet.of(), null);\r\n    ResourceInformation ri42 = ResourceInformation.newInstance(\"r1\", \"M\", 100, ResourceTypes.COUNTABLE, 0, 100, null, ImmutableMap.of());\r\n    assertEquals(ri41, ri42);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\resource",
  "methodName" : "testNodeAffinityToTag",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testNodeAffinityToTag()\n{\r\n    AbstractConstraint constraintExpr = targetIn(NODE, allocationTag(\"hbase-m\"));\r\n    SingleConstraint sConstraint = (SingleConstraint) constraintExpr;\r\n    assertEquals(NODE, sConstraint.getScope());\r\n    assertEquals(1, sConstraint.getMinCardinality());\r\n    assertEquals(Integer.MAX_VALUE, sConstraint.getMaxCardinality());\r\n    assertEquals(1, sConstraint.getTargetExpressions().size());\r\n    TargetExpression tExpr = sConstraint.getTargetExpressions().iterator().next();\r\n    assertEquals(AllocationTagNamespaceType.SELF.toString(), tExpr.getTargetKey());\r\n    assertEquals(TargetType.ALLOCATION_TAG, tExpr.getTargetType());\r\n    assertEquals(1, tExpr.getTargetValues().size());\r\n    assertEquals(\"hbase-m\", tExpr.getTargetValues().iterator().next());\r\n    PlacementConstraint constraint = PlacementConstraints.build(constraintExpr);\r\n    assertNotNull(constraint.getConstraintExpr());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\resource",
  "methodName" : "testNodeAntiAffinityToAttribute",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testNodeAntiAffinityToAttribute()\n{\r\n    AbstractConstraint constraintExpr = targetNotIn(NODE, nodeAttribute(\"java\", \"1.8\"));\r\n    SingleConstraint sConstraint = (SingleConstraint) constraintExpr;\r\n    assertEquals(NODE, sConstraint.getScope());\r\n    assertEquals(0, sConstraint.getMinCardinality());\r\n    assertEquals(0, sConstraint.getMaxCardinality());\r\n    assertEquals(1, sConstraint.getTargetExpressions().size());\r\n    TargetExpression tExpr = sConstraint.getTargetExpressions().iterator().next();\r\n    assertEquals(\"java\", tExpr.getTargetKey());\r\n    assertEquals(TargetType.NODE_ATTRIBUTE, tExpr.getTargetType());\r\n    assertEquals(1, tExpr.getTargetValues().size());\r\n    assertEquals(\"1.8\", tExpr.getTargetValues().iterator().next());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\resource",
  "methodName" : "testAndConstraint",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testAndConstraint()\n{\r\n    AbstractConstraint constraintExpr = and(targetIn(RACK, allocationTag(\"spark\")), maxCardinality(NODE, 3, \"spark\"), targetCardinality(RACK, 2, 10, allocationTag(\"zk\")));\r\n    And andExpr = (And) constraintExpr;\r\n    assertEquals(3, andExpr.getChildren().size());\r\n    SingleConstraint sConstr = (SingleConstraint) andExpr.getChildren().get(0);\r\n    TargetExpression tExpr = sConstr.getTargetExpressions().iterator().next();\r\n    assertEquals(\"spark\", tExpr.getTargetValues().iterator().next());\r\n    sConstr = (SingleConstraint) andExpr.getChildren().get(1);\r\n    assertEquals(0, sConstr.getMinCardinality());\r\n    assertEquals(3, sConstr.getMaxCardinality());\r\n    sConstr = (SingleConstraint) andExpr.getChildren().get(2);\r\n    assertEquals(2, sConstr.getMinCardinality());\r\n    assertEquals(10, sConstr.getMaxCardinality());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\records\\timelineservice",
  "methodName" : "testTimelineMetricAggregation",
  "errType" : [ "UnsupportedOperationException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testTimelineMetricAggregation()\n{\r\n    long ts = System.currentTimeMillis();\r\n    TimelineMetric m1 = getSingleValueMetric(\"MEGA_BYTES_MILLIS\", TimelineMetricOperation.SUM, ts, 10000L);\r\n    TimelineMetric aggregatedMetric = TimelineMetric.aggregateTo(m1, null);\r\n    assertEquals(10000L, aggregatedMetric.getSingleDataValue());\r\n    TimelineMetric m2 = getSingleValueMetric(\"MEGA_BYTES_MILLIS\", TimelineMetricOperation.SUM, ts, 20000L);\r\n    aggregatedMetric = TimelineMetric.aggregateTo(m2, aggregatedMetric);\r\n    assertEquals(30000L, aggregatedMetric.getSingleDataValue());\r\n    Map<Object, Object> state = new HashMap<>();\r\n    state.put(TimelineMetricOperation.PREV_METRIC_STATE_KEY, m2);\r\n    TimelineMetric m2New = getSingleValueMetric(\"MEGA_BYTES_MILLIS\", TimelineMetricOperation.SUM, ts, 10000L);\r\n    aggregatedMetric = TimelineMetric.aggregateTo(m2New, aggregatedMetric, state);\r\n    assertEquals(20000L, aggregatedMetric.getSingleDataValue());\r\n    TimelineMetric m3 = getSingleValueMetric(\"TRANSFER_RATE\", TimelineMetricOperation.MAX, ts, 150L);\r\n    TimelineMetric aggregatedMax = TimelineMetric.aggregateTo(m3, null);\r\n    assertEquals(150L, aggregatedMax.getSingleDataValue());\r\n    TimelineMetric m4 = getSingleValueMetric(\"TRANSFER_RATE\", TimelineMetricOperation.MAX, ts, 170L);\r\n    aggregatedMax = TimelineMetric.aggregateTo(m4, aggregatedMax);\r\n    assertEquals(170L, aggregatedMax.getSingleDataValue());\r\n    TimelineMetric m5 = getSingleValueMetric(\"TRANSFER_RATE\", TimelineMetricOperation.AVG, ts, 150L);\r\n    try {\r\n        TimelineMetric.aggregateTo(m5, null);\r\n        fail(\"Taking average among metrics is not supported! \");\r\n    } catch (UnsupportedOperationException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\records\\timelineservice",
  "methodName" : "getSingleValueMetric",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "TimelineMetric getSingleValueMetric(String id, TimelineMetricOperation op, long timestamp, long value)\n{\r\n    TimelineMetric m = new TimelineMetric();\r\n    m.setId(id);\r\n    m.setType(Type.SINGLE_VALUE);\r\n    m.setRealtimeAggregationOp(op);\r\n    Map<Long, Number> metricValues = new HashMap<Long, Number>();\r\n    metricValues.put(timestamp, value);\r\n    m.setValues(metricValues);\r\n    return m;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\api\\records\\timelineservice",
  "methodName" : "getTimeSeriesMetric",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "TimelineMetric getTimeSeriesMetric(String id, TimelineMetricOperation op, Map<Long, Number> metricValues)\n{\r\n    TimelineMetric m = new TimelineMetric();\r\n    m.setId(id);\r\n    m.setType(Type.TIME_SERIES);\r\n    m.setRealtimeAggregationOp(op);\r\n    m.setValues(metricValues);\r\n    return m;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "testUnitsConversion",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testUnitsConversion()\n{\r\n    int value = 5;\r\n    String fromUnit = \"\";\r\n    long test = value;\r\n    assertEquals(value * 1000L * 1000L * 1000L * 1000L, UnitsConversionUtil.convert(fromUnit, \"p\", test), \"pico test failed\");\r\n    assertEquals(value * 1000L * 1000L * 1000L, UnitsConversionUtil.convert(fromUnit, \"n\", test), \"nano test failed\");\r\n    assertEquals(value * 1000L * 1000L, UnitsConversionUtil.convert(fromUnit, \"u\", test), \"micro test failed\");\r\n    assertEquals(value * 1000L, UnitsConversionUtil.convert(fromUnit, \"m\", test), \"milli test failed\");\r\n    test = value * 1000L * 1000L * 1000L * 1000L * 1000L;\r\n    fromUnit = \"\";\r\n    assertEquals(test / 1000L, UnitsConversionUtil.convert(fromUnit, \"k\", test), \"kilo test failed\");\r\n    assertEquals(test / (1000L * 1000L), UnitsConversionUtil.convert(fromUnit, \"M\", test), \"mega test failed\");\r\n    assertEquals(test / (1000L * 1000L * 1000L), UnitsConversionUtil.convert(fromUnit, \"G\", test), \"giga test failed\");\r\n    assertEquals(test / (1000L * 1000L * 1000L * 1000L), UnitsConversionUtil.convert(fromUnit, \"T\", test), \"tera test failed\");\r\n    assertEquals(test / (1000L * 1000L * 1000L * 1000L * 1000L), UnitsConversionUtil.convert(fromUnit, \"P\", test), \"peta test failed\");\r\n    assertEquals(value * 1000L, UnitsConversionUtil.convert(\"n\", \"p\", value), \"nano to pico test failed\");\r\n    assertEquals(value, UnitsConversionUtil.convert(\"M\", \"G\", value * 1000L), \"mega to giga test failed\");\r\n    assertEquals(value, UnitsConversionUtil.convert(\"Mi\", \"Gi\", value * 1024L), \"Mi to Gi test failed\");\r\n    assertEquals(value * 1024, UnitsConversionUtil.convert(\"Mi\", \"Ki\", value), \"Mi to Ki test failed\");\r\n    assertEquals(5 * 1024, UnitsConversionUtil.convert(\"Ki\", \"\", 5), \"Ki to base units test failed\");\r\n    assertEquals(1073741, UnitsConversionUtil.convert(\"Mi\", \"k\", 1024), \"Mi to k test failed\");\r\n    assertEquals(953, UnitsConversionUtil.convert(\"M\", \"Mi\", 1000), \"M to Mi test failed\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "testOverflow",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testOverflow()\n{\r\n    long test = 5 * 1000L * 1000L * 1000L * 1000L * 1000L;\r\n    try {\r\n        UnitsConversionUtil.convert(\"P\", \"p\", test);\r\n        fail(\"this operation should result in an overflow\");\r\n    } catch (IllegalArgumentException ie) {\r\n    }\r\n    try {\r\n        UnitsConversionUtil.convert(\"m\", \"p\", Long.MAX_VALUE - 1);\r\n        fail(\"this operation should result in an overflow\");\r\n    } catch (IllegalArgumentException ie) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-api\\src\\test\\java\\org\\apache\\hadoop\\yarn\\util",
  "methodName" : "testCompare",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testCompare()\n{\r\n    String unitA = \"P\";\r\n    long valueA = 1;\r\n    String unitB = \"p\";\r\n    long valueB = 2;\r\n    assertEquals(1, UnitsConversionUtil.compare(unitA, valueA, unitB, valueB));\r\n    assertEquals(-1, UnitsConversionUtil.compare(unitB, valueB, unitA, valueA));\r\n    assertEquals(0, UnitsConversionUtil.compare(unitA, valueA, unitA, valueA));\r\n    assertEquals(-1, UnitsConversionUtil.compare(unitA, valueA, unitA, valueB));\r\n    assertEquals(1, UnitsConversionUtil.compare(unitA, valueB, unitA, valueA));\r\n    unitB = \"T\";\r\n    assertEquals(1, UnitsConversionUtil.compare(unitA, valueA, unitB, valueB));\r\n    assertEquals(-1, UnitsConversionUtil.compare(unitB, valueB, unitA, valueA));\r\n    assertEquals(0, UnitsConversionUtil.compare(unitA, valueA, unitB, 1000L));\r\n    unitA = \"p\";\r\n    unitB = \"n\";\r\n    assertEquals(-1, UnitsConversionUtil.compare(unitA, valueA, unitB, valueB));\r\n    assertEquals(1, UnitsConversionUtil.compare(unitB, valueB, unitA, valueA));\r\n    assertEquals(0, UnitsConversionUtil.compare(unitA, 1000L, unitB, valueA));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]