[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getAHSAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "InetSocketAddress getAHSAddress(Configuration conf)\n{\r\n    return conf.getSocketAddr(YarnConfiguration.TIMELINE_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ADDRESS, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_PORT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.ahsAddress = getAHSAddress(conf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStart",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    try {\r\n        ahsClient = AHSProxy.createAHSProxy(getConfig(), ApplicationHistoryProtocol.class, this.ahsAddress);\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (this.ahsClient != null) {\r\n        RPC.stopProxy(this.ahsClient);\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ApplicationReport getApplicationReport(ApplicationId appId) throws YarnException, IOException\n{\r\n    GetApplicationReportRequest request = GetApplicationReportRequest.newInstance(appId);\r\n    GetApplicationReportResponse response = ahsClient.getApplicationReport(request);\r\n    return response.getApplicationReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<ApplicationReport> getApplications() throws YarnException, IOException\n{\r\n    GetApplicationsRequest request = GetApplicationsRequest.newInstance(null, null);\r\n    GetApplicationsResponse response = ahsClient.getApplications(request);\r\n    return response.getApplicationList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ApplicationAttemptReport getApplicationAttemptReport(ApplicationAttemptId applicationAttemptId) throws YarnException, IOException\n{\r\n    GetApplicationAttemptReportRequest request = GetApplicationAttemptReportRequest.newInstance(applicationAttemptId);\r\n    GetApplicationAttemptReportResponse response = ahsClient.getApplicationAttemptReport(request);\r\n    return response.getApplicationAttemptReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<ApplicationAttemptReport> getApplicationAttempts(ApplicationId appId) throws YarnException, IOException\n{\r\n    GetApplicationAttemptsRequest request = GetApplicationAttemptsRequest.newInstance(appId);\r\n    GetApplicationAttemptsResponse response = ahsClient.getApplicationAttempts(request);\r\n    return response.getApplicationAttemptList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getContainerReport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerReport getContainerReport(ContainerId containerId) throws YarnException, IOException\n{\r\n    GetContainerReportRequest request = GetContainerReportRequest.newInstance(containerId);\r\n    GetContainerReportResponse response = ahsClient.getContainerReport(request);\r\n    return response.getContainerReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<ContainerReport> getContainers(ApplicationAttemptId applicationAttemptId) throws YarnException, IOException\n{\r\n    GetContainersRequest request = GetContainersRequest.newInstance(applicationAttemptId);\r\n    GetContainersResponse response = ahsClient.getContainers(request);\r\n    return response.getContainerList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\util",
  "methodName" : "getRmPrincipal",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String getRmPrincipal(Configuration conf) throws IOException\n{\r\n    String principal = conf.get(YarnConfiguration.RM_PRINCIPAL);\r\n    String prepared = null;\r\n    if (principal != null) {\r\n        prepared = getRmPrincipal(principal, conf);\r\n    }\r\n    return prepared;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\util",
  "methodName" : "getRmPrincipal",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getRmPrincipal(String rmPrincipal, Configuration conf) throws IOException\n{\r\n    if (rmPrincipal == null) {\r\n        throw new IllegalArgumentException(\"RM principal string is null\");\r\n    }\r\n    if (HAUtil.isHAEnabled(conf)) {\r\n        conf = getYarnConfWithRmHaId(conf);\r\n    }\r\n    String hostname = conf.getSocketAddr(YarnConfiguration.RM_ADDRESS, YarnConfiguration.DEFAULT_RM_ADDRESS, YarnConfiguration.DEFAULT_RM_PORT).getHostName();\r\n    return SecurityUtil.getServerPrincipal(rmPrincipal, hostname);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\util",
  "methodName" : "buildNodeLabelsFromStr",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "List<NodeLabel> buildNodeLabelsFromStr(String args)\n{\r\n    List<NodeLabel> nodeLabels = new ArrayList<>();\r\n    for (String p : args.split(\",\")) {\r\n        if (!p.trim().isEmpty()) {\r\n            String labelName = p;\r\n            boolean exclusive = NodeLabel.DEFAULT_NODE_LABEL_EXCLUSIVITY;\r\n            int leftParenthesisIdx = p.indexOf(\"(\");\r\n            int rightParenthesisIdx = p.indexOf(\")\");\r\n            if ((leftParenthesisIdx == -1 && rightParenthesisIdx != -1) || (leftParenthesisIdx != -1 && rightParenthesisIdx == -1)) {\r\n                throw new IllegalArgumentException(ADD_LABEL_FORMAT_ERR_MSG);\r\n            }\r\n            if (leftParenthesisIdx > 0 && rightParenthesisIdx > 0) {\r\n                if (leftParenthesisIdx > rightParenthesisIdx) {\r\n                    throw new IllegalArgumentException(ADD_LABEL_FORMAT_ERR_MSG);\r\n                }\r\n                String property = p.substring(p.indexOf(\"(\") + 1, p.indexOf(\")\"));\r\n                if (property.contains(\"=\")) {\r\n                    String key = property.substring(0, property.indexOf(\"=\")).trim();\r\n                    String value = property.substring(property.indexOf(\"=\") + 1, property.length()).trim();\r\n                    if (key.equals(\"exclusive\") && ImmutableSet.of(\"true\", \"false\").contains(value)) {\r\n                        exclusive = Boolean.parseBoolean(value);\r\n                    } else {\r\n                        throw new IllegalArgumentException(ADD_LABEL_FORMAT_ERR_MSG);\r\n                    }\r\n                } else if (!property.trim().isEmpty()) {\r\n                    throw new IllegalArgumentException(ADD_LABEL_FORMAT_ERR_MSG);\r\n                }\r\n            }\r\n            if (labelName.contains(\"(\")) {\r\n                labelName = labelName.substring(0, labelName.indexOf(\"(\")).trim();\r\n            }\r\n            nodeLabels.add(NodeLabel.newInstance(labelName, exclusive));\r\n        }\r\n    }\r\n    if (nodeLabels.isEmpty()) {\r\n        throw new IllegalArgumentException(NO_LABEL_ERR_MSG);\r\n    }\r\n    return nodeLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\util",
  "methodName" : "getYarnConfWithRmHaId",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "YarnConfiguration getYarnConfWithRmHaId(Configuration conf) throws IOException\n{\r\n    YarnConfiguration yarnConf = new YarnConfiguration(conf);\r\n    if (yarnConf.get(YarnConfiguration.RM_HA_ID) == null) {\r\n        String[] rmIds = yarnConf.getStrings(YarnConfiguration.RM_HA_IDS);\r\n        if ((rmIds != null) && (rmIds.length > 0)) {\r\n            yarnConf.set(YarnConfiguration.RM_HA_ID, rmIds[0]);\r\n        } else {\r\n            throw new IOException(\"RM_HA_IDS property is not set for HA resource \" + \"manager\");\r\n        }\r\n    }\r\n    return yarnConf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\util",
  "methodName" : "generateToken",
  "errType" : [ "GSSException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String generateToken(String server) throws IOException, InterruptedException\n{\r\n    UserGroupInformation currentUser = UserGroupInformation.getCurrentUser();\r\n    LOG.debug(\"The user credential is {}\", currentUser);\r\n    String challenge = currentUser.doAs(new PrivilegedExceptionAction<String>() {\r\n\r\n        @Override\r\n        public String run() throws Exception {\r\n            try {\r\n                GSSManager manager = GSSManager.getInstance();\r\n                GSSName serverName = manager.createName(\"HTTP@\" + server, GSSName.NT_HOSTBASED_SERVICE);\r\n                GSSContext gssContext = manager.createContext(serverName.canonicalize(null), null, null, GSSContext.DEFAULT_LIFETIME);\r\n                gssContext.requestMutualAuth(true);\r\n                gssContext.requestCredDeleg(true);\r\n                byte[] inToken = new byte[0];\r\n                byte[] outToken = gssContext.initSecContext(inToken, 0, inToken.length);\r\n                gssContext.dispose();\r\n                LOG.debug(\"Got valid challenge for host {}\", serverName);\r\n                return new String(BASE_64_CODEC.encode(outToken), StandardCharsets.US_ASCII);\r\n            } catch (GSSException e) {\r\n                LOG.error(\"Error: \", e);\r\n                throw new AuthenticationException(e);\r\n            }\r\n        }\r\n    });\r\n    return challenge;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    TopCLI topImp = new TopCLI();\r\n    topImp.addShutdownHook();\r\n    topImp.setSysOutPrintStream(System.out);\r\n    topImp.setSysErrPrintStream(System.err);\r\n    int res = ToolRunner.run(topImp, args);\r\n    topImp.stop();\r\n    System.exit(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "run",
  "errType" : [ "Exception", "InterruptedException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "int run(String[] args) throws Exception\n{\r\n    try {\r\n        parseOptions(args);\r\n        if (cliParser.hasOption(\"help\")) {\r\n            printUsage();\r\n            return 0;\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.error(\"Unable to parse options\", e);\r\n        return 1;\r\n    }\r\n    createAndStartYarnClient();\r\n    setAppsHeader();\r\n    Thread keyboardMonitor = new KeyboardMonitor();\r\n    keyboardMonitor.start();\r\n    rmStartTime = getRMStartTime();\r\n    clearScreen();\r\n    while (runMainLoop.get()) {\r\n        if (displayScreen == DisplayScreen.TOP) {\r\n            showTopScreen();\r\n            try {\r\n                Thread.sleep(refreshPeriod);\r\n            } catch (InterruptedException ie) {\r\n                break;\r\n            }\r\n        } else if (displayScreen == DisplayScreen.SORT) {\r\n            showSortScreen();\r\n            Thread.sleep(100);\r\n        } else if (displayScreen == DisplayScreen.FIELDS) {\r\n            showFieldsScreen();\r\n            Thread.sleep(100);\r\n        }\r\n        if (rmStartTime == -1) {\r\n            rmStartTime = getRMStartTime();\r\n        }\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "parseOptions",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void parseOptions(String[] args) throws ParseException, IOException, InterruptedException\n{\r\n    opts = new Options();\r\n    opts.addOption(\"queues\", true, \"Comma separated list of queues to restrict applications\");\r\n    opts.addOption(\"users\", true, \"Comma separated list of users to restrict applications\");\r\n    opts.addOption(\"types\", true, \"Comma separated list of types to restrict\" + \" applications, case sensitive(though the display is lower case)\");\r\n    opts.addOption(\"cols\", true, \"Number of columns on the terminal\");\r\n    opts.addOption(\"rows\", true, \"Number of rows on the terminal\");\r\n    opts.addOption(\"help\", false, \"Print usage; for help while the tool is running press 'h' + Enter\");\r\n    opts.addOption(\"delay\", true, \"The refresh delay(in seconds), default is 3 seconds\");\r\n    cliParser = new GnuParser().parse(opts, args);\r\n    if (cliParser.hasOption(\"queues\")) {\r\n        String clqueues = cliParser.getOptionValue(\"queues\");\r\n        String[] queuesArray = clqueues.split(\",\");\r\n        queues.addAll(Arrays.asList(queuesArray));\r\n    }\r\n    if (cliParser.hasOption(\"users\")) {\r\n        String clusers = cliParser.getOptionValue(\"users\");\r\n        users.addAll(Arrays.asList(clusers.split(\",\")));\r\n    }\r\n    if (cliParser.hasOption(\"types\")) {\r\n        String cltypes = cliParser.getOptionValue(\"types\");\r\n        types.addAll(Arrays.asList(cltypes.split(\",\")));\r\n    }\r\n    if (cliParser.hasOption(\"cols\")) {\r\n        terminalWidth = Integer.parseInt(cliParser.getOptionValue(\"cols\"));\r\n    } else {\r\n        setTerminalWidth();\r\n    }\r\n    if (cliParser.hasOption(\"rows\")) {\r\n        terminalHeight = Integer.parseInt(cliParser.getOptionValue(\"rows\"));\r\n    } else {\r\n        setTerminalHeight();\r\n    }\r\n    if (cliParser.hasOption(\"delay\")) {\r\n        int delay = Integer.parseInt(cliParser.getOptionValue(\"delay\"));\r\n        if (delay < 1) {\r\n            LOG.warn(\"Delay set too low, using default\");\r\n        } else {\r\n            refreshPeriod = delay * 1000;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void printUsage()\n{\r\n    new HelpFormatter().printHelp(\"yarn top\", opts);\r\n    System.out.println(\"\");\r\n    System.out.println(\"'yarn top' is a tool to help cluster administrators\" + \" understand cluster usage better.\");\r\n    System.out.println(\"Some notes about the implementation:\");\r\n    System.out.println(\"  1. Fetching information for all the apps is an\" + \" expensive call for the RM.\");\r\n    System.out.println(\"     To prevent a performance degradation, the results\" + \" are cached for 5 seconds,\");\r\n    System.out.println(\"     irrespective of the delay value. Information about\" + \" the NodeManager(s) and queue\");\r\n    System.out.println(\"     utilization stats are fetched at the specified\" + \" delay interval. Once we have a\");\r\n    System.out.println(\"     better understanding of the performance impact,\" + \" this might change.\");\r\n    System.out.println(\"  2. Since the tool is implemented in Java, you must\" + \" hit Enter for key presses to\");\r\n    System.out.println(\"     be processed.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setAppsHeader",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void setAppsHeader()\n{\r\n    List<String> formattedStrings = new ArrayList<>();\r\n    for (EnumMap.Entry<Columns, ColumnInformation> entry : columnInformationEnumMap.entrySet()) {\r\n        if (entry.getValue().display) {\r\n            formattedStrings.add(String.format(entry.getValue().format, entry.getValue().header));\r\n        }\r\n    }\r\n    appsHeader = StringUtils.join(formattedStrings.toArray(), \" \");\r\n    if (appsHeader.length() > terminalWidth) {\r\n        appsHeader = appsHeader.substring(0, terminalWidth - System.lineSeparator().length());\r\n    } else {\r\n        appsHeader += StringUtils.repeat(\" \", terminalWidth - appsHeader.length() - System.lineSeparator().length());\r\n    }\r\n    appsHeader += System.lineSeparator();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setTerminalWidth",
  "errType" : [ "NumberFormatException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setTerminalWidth() throws IOException, InterruptedException\n{\r\n    if (terminalWidth != -1) {\r\n        return;\r\n    }\r\n    String[] command = { \"tput\", \"cols\" };\r\n    String op = getCommandOutput(command).trim();\r\n    try {\r\n        terminalWidth = Integer.parseInt(op);\r\n    } catch (NumberFormatException ne) {\r\n        LOG.warn(\"Couldn't determine terminal width, setting to 80\", ne);\r\n        terminalWidth = 80;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setTerminalHeight",
  "errType" : [ "NumberFormatException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setTerminalHeight() throws IOException, InterruptedException\n{\r\n    if (terminalHeight != -1) {\r\n        return;\r\n    }\r\n    String[] command = { \"tput\", \"lines\" };\r\n    String op = getCommandOutput(command).trim();\r\n    try {\r\n        terminalHeight = Integer.parseInt(op);\r\n    } catch (NumberFormatException ne) {\r\n        LOG.warn(\"Couldn't determine terminal height, setting to 24\", ne);\r\n        terminalHeight = 24;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setTerminalSequences",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setTerminalSequences() throws IOException, InterruptedException\n{\r\n    String[] tput_cursor_home = { \"tput\", \"cup\", \"0\", \"0\" };\r\n    String[] tput_clear = { \"tput\", \"clear\" };\r\n    String[] tput_clear_line = { \"tput\", \"el\" };\r\n    String[] tput_set_cursor_line_7_column_0 = { \"tput\", \"cup\", \"6\", \"0\" };\r\n    String[] tput_change_background = { \"tput\", \"smso\" };\r\n    String[] tput_reset_background = { \"tput\", \"rmso\" };\r\n    SET_CURSOR_HOME = getCommandOutput(tput_cursor_home);\r\n    CLEAR = getCommandOutput(tput_clear);\r\n    CLEAR_LINE = getCommandOutput(tput_clear_line);\r\n    SET_CURSOR_LINE_7_COLUMN_0 = getCommandOutput(tput_set_cursor_line_7_column_0);\r\n    CHANGE_BACKGROUND = getCommandOutput(tput_change_background);\r\n    RESET_BACKGROUND = getCommandOutput(tput_reset_background);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "generateColumnInformationMap",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void generateColumnInformationMap()\n{\r\n    columnInformationEnumMap.put(Columns.APPID, new ColumnInformation(\"APPLICATIONID\", \"%31s\", true, \"Application Id\", \"a\"));\r\n    columnInformationEnumMap.put(Columns.USER, new ColumnInformation(\"USER\", \"%-10s\", true, \"Username\", \"u\"));\r\n    columnInformationEnumMap.put(Columns.TYPE, new ColumnInformation(\"TYPE\", \"%10s\", true, \"Application type\", \"t\"));\r\n    columnInformationEnumMap.put(Columns.QUEUE, new ColumnInformation(\"QUEUE\", \"%10s\", true, \"Application queue\", \"q\"));\r\n    columnInformationEnumMap.put(Columns.PRIORITY, new ColumnInformation(\"PRIOR\", \"%5s\", true, \"Application priority\", \"l\"));\r\n    columnInformationEnumMap.put(Columns.CONT, new ColumnInformation(\"#CONT\", \"%7s\", true, \"Number of containers\", \"c\"));\r\n    columnInformationEnumMap.put(Columns.RCONT, new ColumnInformation(\"#RCONT\", \"%7s\", true, \"Number of reserved containers\", \"r\"));\r\n    columnInformationEnumMap.put(Columns.VCORES, new ColumnInformation(\"VCORES\", \"%7s\", true, \"Allocated vcores\", \"v\"));\r\n    columnInformationEnumMap.put(Columns.RVCORES, new ColumnInformation(\"RVCORES\", \"%7s\", true, \"Reserved vcores\", \"o\"));\r\n    columnInformationEnumMap.put(Columns.MEM, new ColumnInformation(\"MEM\", \"%7s\", true, \"Allocated memory\", \"m\"));\r\n    columnInformationEnumMap.put(Columns.RMEM, new ColumnInformation(\"RMEM\", \"%7s\", true, \"Reserved memory\", \"w\"));\r\n    columnInformationEnumMap.put(Columns.VCORESECS, new ColumnInformation(\"VCORESECS\", \"%10s\", true, \"Vcore seconds\", \"s\"));\r\n    columnInformationEnumMap.put(Columns.MEMSECS, new ColumnInformation(\"MEMSECS\", \"%10s\", true, \"Memory seconds(in GBseconds)\", \"y\"));\r\n    columnInformationEnumMap.put(Columns.PROGRESS, new ColumnInformation(\"%PROGR\", \"%6s\", true, \"Progress(percentage)\", \"p\"));\r\n    columnInformationEnumMap.put(Columns.TIME, new ColumnInformation(\"TIME\", \"%10s\", true, \"Running time\", \"i\"));\r\n    columnInformationEnumMap.put(Columns.NAME, new ColumnInformation(\"NAME\", \"%s\", true, \"Application name\", \"n\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "generateKeyFieldsMap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void generateKeyFieldsMap()\n{\r\n    for (EnumMap.Entry<Columns, ColumnInformation> entry : columnInformationEnumMap.entrySet()) {\r\n        keyFieldsMap.put(entry.getValue().key, entry.getKey());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getNodesInfo",
  "errType" : [ "IOException", "YarnException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "NodesInformation getNodesInfo()\n{\r\n    NodesInformation nodeInfo = new NodesInformation();\r\n    YarnClusterMetrics yarnClusterMetrics;\r\n    try {\r\n        yarnClusterMetrics = client.getYarnClusterMetrics();\r\n    } catch (IOException ie) {\r\n        LOG.error(\"Unable to fetch cluster metrics\", ie);\r\n        return nodeInfo;\r\n    } catch (YarnException ye) {\r\n        LOG.error(\"Unable to fetch cluster metrics\", ye);\r\n        return nodeInfo;\r\n    }\r\n    nodeInfo.decommissionedNodes = yarnClusterMetrics.getNumDecommissionedNodeManagers();\r\n    nodeInfo.totalNodes = yarnClusterMetrics.getNumNodeManagers();\r\n    nodeInfo.runningNodes = yarnClusterMetrics.getNumActiveNodeManagers();\r\n    nodeInfo.lostNodes = yarnClusterMetrics.getNumLostNodeManagers();\r\n    nodeInfo.unhealthyNodes = yarnClusterMetrics.getNumUnhealthyNodeManagers();\r\n    nodeInfo.rebootedNodes = yarnClusterMetrics.getNumRebootedNodeManagers();\r\n    return nodeInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getQueueMetrics",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 25,
  "sourceCodeText" : "QueueMetrics getQueueMetrics()\n{\r\n    QueueMetrics queueMetrics = new QueueMetrics();\r\n    List<QueueInfo> queuesInfo;\r\n    if (queues.isEmpty()) {\r\n        try {\r\n            queuesInfo = client.getRootQueueInfos();\r\n        } catch (Exception ie) {\r\n            LOG.error(\"Unable to get queue information\", ie);\r\n            return queueMetrics;\r\n        }\r\n    } else {\r\n        queuesInfo = new ArrayList<>();\r\n        for (String queueName : queues) {\r\n            try {\r\n                QueueInfo qInfo = client.getQueueInfo(queueName);\r\n                queuesInfo.add(qInfo);\r\n            } catch (Exception ie) {\r\n                LOG.error(\"Unable to get queue information\", ie);\r\n                return queueMetrics;\r\n            }\r\n        }\r\n    }\r\n    for (QueueInfo childInfo : queuesInfo) {\r\n        QueueStatistics stats = childInfo.getQueueStatistics();\r\n        if (stats != null) {\r\n            queueMetrics.appsSubmitted += stats.getNumAppsSubmitted();\r\n            queueMetrics.appsRunning += stats.getNumAppsRunning();\r\n            queueMetrics.appsPending += stats.getNumAppsPending();\r\n            queueMetrics.appsCompleted += stats.getNumAppsCompleted();\r\n            queueMetrics.appsKilled += stats.getNumAppsKilled();\r\n            queueMetrics.appsFailed += stats.getNumAppsFailed();\r\n            queueMetrics.activeUsers += stats.getNumActiveUsers();\r\n            queueMetrics.availableMemoryGB += stats.getAvailableMemoryMB();\r\n            queueMetrics.allocatedMemoryGB += stats.getAllocatedMemoryMB();\r\n            queueMetrics.pendingMemoryGB += stats.getPendingMemoryMB();\r\n            queueMetrics.reservedMemoryGB += stats.getReservedMemoryMB();\r\n            queueMetrics.availableVCores += stats.getAvailableVCores();\r\n            queueMetrics.allocatedVCores += stats.getAllocatedVCores();\r\n            queueMetrics.pendingVCores += stats.getPendingVCores();\r\n            queueMetrics.reservedVCores += stats.getReservedVCores();\r\n            queueMetrics.allocatedContainers += stats.getAllocatedContainers();\r\n            queueMetrics.pendingContainers += stats.getPendingContainers();\r\n            queueMetrics.reservedContainers += stats.getReservedContainers();\r\n        }\r\n    }\r\n    queueMetrics.availableMemoryGB = queueMetrics.availableMemoryGB / 1024;\r\n    queueMetrics.allocatedMemoryGB = queueMetrics.allocatedMemoryGB / 1024;\r\n    queueMetrics.pendingMemoryGB = queueMetrics.pendingMemoryGB / 1024;\r\n    queueMetrics.reservedMemoryGB = queueMetrics.reservedMemoryGB / 1024;\r\n    return queueMetrics;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getRMStartTime",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "long getRMStartTime()\n{\r\n    try {\r\n        URL url = getClusterUrl();\r\n        if (null == url) {\r\n            return -1;\r\n        }\r\n        JSONObject clusterInfo = getJSONObject(connect(url));\r\n        return clusterInfo.getLong(\"startedOn\");\r\n    } catch (Exception e) {\r\n        LOG.error(\"Could not fetch RM start time\", e);\r\n    }\r\n    return -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getJSONObject",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "JSONObject getJSONObject(URLConnection conn) throws IOException, JSONException\n{\r\n    try (InputStream in = conn.getInputStream()) {\r\n        String encoding = conn.getContentEncoding();\r\n        encoding = encoding == null ? \"UTF-8\" : encoding;\r\n        String body = IOUtils.toString(in, encoding);\r\n        JSONObject obj = new JSONObject(body);\r\n        JSONObject clusterInfo = obj.getJSONObject(\"clusterInfo\");\r\n        return clusterInfo;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getClusterUrl",
  "errType" : [ "ConnectException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "URL getClusterUrl() throws Exception\n{\r\n    URL url = null;\r\n    Configuration conf = getConf();\r\n    if (HAUtil.isHAEnabled(conf)) {\r\n        Collection<String> haids = HAUtil.getRMHAIds(conf);\r\n        for (String rmhid : haids) {\r\n            try {\r\n                url = getHAClusterUrl(conf, rmhid);\r\n                if (isActive(url)) {\r\n                    break;\r\n                }\r\n            } catch (ConnectException e) {\r\n            }\r\n        }\r\n    } else {\r\n        url = new URL(WebAppUtils.getRMWebAppURLWithScheme(conf) + CLUSTER_INFO_URL);\r\n    }\r\n    return url;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "isActive",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isActive(URL url) throws Exception\n{\r\n    URLConnection connect = connect(url);\r\n    JSONObject clusterInfo = getJSONObject(connect);\r\n    return clusterInfo.getString(\"haState\").equals(\"ACTIVE\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getHAClusterUrl",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "URL getHAClusterUrl(Configuration conf, String rmhid) throws MalformedURLException\n{\r\n    return new URL(WebAppUtils.getHttpSchemePrefix(conf) + WebAppUtils.getResolvedRemoteRMWebAppURLWithoutScheme(conf, YarnConfiguration.useHttps(conf) ? Policy.HTTPS_ONLY : Policy.HTTP_ONLY, rmhid) + CLUSTER_INFO_URL);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "connect",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "URLConnection connect(URL url) throws Exception\n{\r\n    AuthenticatedURL.Token token = new AuthenticatedURL.Token();\r\n    AuthenticatedURL authUrl;\r\n    SSLFactory clientSslFactory;\r\n    URLConnection connection;\r\n    if (YarnConfiguration.useHttps(getConf())) {\r\n        clientSslFactory = new SSLFactory(SSLFactory.Mode.CLIENT, getConf());\r\n        clientSslFactory.init();\r\n        SSLSocketFactory sslSocktFact = clientSslFactory.createSSLSocketFactory();\r\n        authUrl = new AuthenticatedURL(new KerberosAuthenticator(), clientSslFactory);\r\n        connection = authUrl.openConnection(url, token);\r\n        HttpsURLConnection httpsConn = (HttpsURLConnection) connection;\r\n        httpsConn.setSSLSocketFactory(sslSocktFact);\r\n    } else {\r\n        authUrl = new AuthenticatedURL(new KerberosAuthenticator());\r\n        connection = authUrl.openConnection(url, token);\r\n    }\r\n    connection.connect();\r\n    return connection;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getHeader",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "String getHeader(QueueMetrics queueMetrics, NodesInformation nodes)\n{\r\n    StringBuilder ret = new StringBuilder();\r\n    String queue = \"root\";\r\n    if (!queues.isEmpty()) {\r\n        queue = StringUtils.join(queues, \",\");\r\n    }\r\n    long now = Time.now();\r\n    long uptime = 0L;\r\n    if (rmStartTime != -1) {\r\n        uptime = now - rmStartTime;\r\n    }\r\n    long days = TimeUnit.MILLISECONDS.toDays(uptime);\r\n    long hours = TimeUnit.MILLISECONDS.toHours(uptime) - TimeUnit.DAYS.toHours(TimeUnit.MILLISECONDS.toDays(uptime));\r\n    long minutes = TimeUnit.MILLISECONDS.toMinutes(uptime) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(uptime));\r\n    String uptimeStr = String.format(\"%dd, %d:%d\", days, hours, minutes);\r\n    String currentTime = DateFormatUtils.ISO_8601_EXTENDED_TIME_FORMAT.format(now);\r\n    ret.append(CLEAR_LINE).append(limitLineLength(String.format(\"YARN top - %s, up %s, %d active users, queue(s): %s%n\", currentTime, uptimeStr, queueMetrics.activeUsers, queue), terminalWidth, true));\r\n    ret.append(CLEAR_LINE).append(limitLineLength(String.format(\"NodeManager(s)\" + \": %d total, %d active, %d unhealthy, %d decommissioned,\" + \" %d lost, %d rebooted%n\", nodes.totalNodes, nodes.runningNodes, nodes.unhealthyNodes, nodes.decommissionedNodes, nodes.lostNodes, nodes.rebootedNodes), terminalWidth, true));\r\n    ret.append(CLEAR_LINE).append(limitLineLength(String.format(\"Queue(s) Applications: %d running, %d submitted, %d pending,\" + \" %d completed, %d killed, %d failed%n\", queueMetrics.appsRunning, queueMetrics.appsSubmitted, queueMetrics.appsPending, queueMetrics.appsCompleted, queueMetrics.appsKilled, queueMetrics.appsFailed), terminalWidth, true));\r\n    ret.append(CLEAR_LINE).append(limitLineLength(String.format(\"Queue(s) Mem(GB): %d available,\" + \" %d allocated, %d pending, %d reserved%n\", queueMetrics.availableMemoryGB, queueMetrics.allocatedMemoryGB, queueMetrics.pendingMemoryGB, queueMetrics.reservedMemoryGB), terminalWidth, true));\r\n    ret.append(CLEAR_LINE).append(limitLineLength(String.format(\"Queue(s) VCores: %d available,\" + \" %d allocated, %d pending, %d reserved%n\", queueMetrics.availableVCores, queueMetrics.allocatedVCores, queueMetrics.pendingVCores, queueMetrics.reservedVCores), terminalWidth, true));\r\n    ret.append(CLEAR_LINE).append(limitLineLength(String.format(\"Queue(s) Containers: %d allocated, %d pending, %d reserved%n\", queueMetrics.allocatedContainers, queueMetrics.pendingContainers, queueMetrics.reservedContainers), terminalWidth, true));\r\n    return ret.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getPrintableAppInformation",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "String getPrintableAppInformation(List<ApplicationInformation> appsInfo)\n{\r\n    StringBuilder ret = new StringBuilder();\r\n    int limit = terminalHeight - 9;\r\n    List<String> columns = new ArrayList<>();\r\n    for (int i = 0; i < limit; ++i) {\r\n        ret.append(CLEAR_LINE);\r\n        if (i < appsInfo.size()) {\r\n            ApplicationInformation appInfo = appsInfo.get(i);\r\n            columns.clear();\r\n            for (EnumMap.Entry<Columns, ColumnInformation> entry : columnInformationEnumMap.entrySet()) {\r\n                if (entry.getValue().display) {\r\n                    String value = \"\";\r\n                    if (appInfo.displayStringsMap.containsKey(entry.getKey())) {\r\n                        value = appInfo.displayStringsMap.get(entry.getKey());\r\n                    }\r\n                    columns.add(String.format(entry.getValue().format, value));\r\n                }\r\n            }\r\n            ret.append(limitLineLength((StringUtils.join(columns.toArray(), \" \") + System.lineSeparator()), terminalWidth, true));\r\n        } else {\r\n            ret.append(System.lineSeparator());\r\n        }\r\n    }\r\n    return ret.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "clearScreen",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void clearScreen()\n{\r\n    System.out.print(CLEAR);\r\n    System.out.flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "clearScreenWithoutScroll",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void clearScreenWithoutScroll()\n{\r\n    System.out.print(SET_CURSOR_HOME);\r\n    for (int i = 0; i < terminalHeight; ++i) {\r\n        System.out.println(CLEAR_LINE);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printHeader",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void printHeader(String header)\n{\r\n    System.out.print(SET_CURSOR_HOME);\r\n    System.out.print(header);\r\n    System.out.println(\"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printApps",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void printApps(String appInfo)\n{\r\n    System.out.print(CLEAR_LINE);\r\n    System.out.print(CHANGE_BACKGROUND + appsHeader + RESET_BACKGROUND);\r\n    System.out.print(appInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "showHelpScreen",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void showHelpScreen()\n{\r\n    synchronized (lock) {\r\n        if (!showingTopScreen.get()) {\r\n            return;\r\n        }\r\n        showingTopScreen.set(false);\r\n        clearScreenWithoutScroll();\r\n        System.out.print(SET_CURSOR_HOME);\r\n        System.out.println(\"Help for yarn top.\");\r\n        System.out.println(\"Delay: \" + (refreshPeriod / 1000) + \" secs; Secure mode: \" + UserGroupInformation.isSecurityEnabled());\r\n        System.out.println(\"\");\r\n        System.out.println(\"  s + Enter: Select sort field\");\r\n        System.out.println(\"  f + Enter: Select fields to display\");\r\n        System.out.println(\"  R + Enter: Reverse current sort order\");\r\n        System.out.println(\"  h + Enter: Display this screen\");\r\n        System.out.println(\"  q + Enter: Quit\");\r\n        System.out.println(\"\");\r\n        System.out.println(\"Press any key followed by Enter to continue\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "showSortScreen",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void showSortScreen()\n{\r\n    synchronized (lock) {\r\n        showingTopScreen.set(false);\r\n        System.out.print(SET_CURSOR_HOME);\r\n        System.out.println(CLEAR_LINE + \"Current Sort Field: \" + currentSortField);\r\n        System.out.println(CLEAR_LINE + \"Select sort field via letter followed by\" + \" Enter, type any other key followed by Enter to return\");\r\n        System.out.println(CLEAR_LINE);\r\n        for (String key : sortedKeys) {\r\n            String prefix = \" \";\r\n            if (key.equals(currentSortField)) {\r\n                prefix = \"*\";\r\n            }\r\n            ColumnInformation value = columnInformationEnumMap.get(keyFieldsMap.get(key));\r\n            System.out.print(CLEAR_LINE);\r\n            System.out.println(String.format(\"%s %s: %-15s = %s\", prefix, key, value.header, value.description));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "showFieldsScreen",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void showFieldsScreen()\n{\r\n    synchronized (lock) {\r\n        showingTopScreen.set(false);\r\n        System.out.print(SET_CURSOR_HOME);\r\n        System.out.println(CLEAR_LINE + \"Current Fields: \");\r\n        System.out.println(CLEAR_LINE + \"Toggle fields via field letter followed\" + \" by Enter, type any other key followed by Enter to return\");\r\n        for (String key : sortedKeys) {\r\n            ColumnInformation info = columnInformationEnumMap.get(keyFieldsMap.get(key));\r\n            String prefix = \" \";\r\n            String letter = key;\r\n            if (info.display) {\r\n                prefix = \"*\";\r\n                letter = key.toUpperCase();\r\n            }\r\n            System.out.print(CLEAR_LINE);\r\n            System.out.println(String.format(\"%s %s: %-15s = %s\", prefix, letter, info.header, info.description));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "showTopScreen",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void showTopScreen()\n{\r\n    List<ApplicationInformation> appsInfo = new ArrayList<>();\r\n    List<ApplicationReport> apps;\r\n    try {\r\n        apps = fetchAppReports();\r\n    } catch (Exception e) {\r\n        LOG.error(\"Unable to get application information\", e);\r\n        return;\r\n    }\r\n    for (ApplicationReport appReport : apps) {\r\n        ApplicationInformation appInfo = new ApplicationInformation(appReport);\r\n        appsInfo.add(appInfo);\r\n    }\r\n    if (ascendingSort) {\r\n        Collections.sort(appsInfo, comparator);\r\n    } else {\r\n        Collections.sort(appsInfo, Collections.reverseOrder(comparator));\r\n    }\r\n    NodesInformation nodesInfo = getNodesInfo();\r\n    QueueMetrics queueMetrics = getQueueMetrics();\r\n    String header = getHeader(queueMetrics, nodesInfo);\r\n    String appsStr = getPrintableAppInformation(appsInfo);\r\n    synchronized (lock) {\r\n        printHeader(header);\r\n        printApps(appsStr);\r\n        System.out.print(SET_CURSOR_LINE_7_COLUMN_0);\r\n        System.out.print(CLEAR_LINE);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "handleSortScreenKeyPress",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void handleSortScreenKeyPress(String input)\n{\r\n    String f = currentSortField;\r\n    currentSortField = input.toLowerCase();\r\n    switch(input.toLowerCase()) {\r\n        case \"a\":\r\n            comparator = AppIDComparator;\r\n            break;\r\n        case \"u\":\r\n            comparator = UserComparator;\r\n            break;\r\n        case \"t\":\r\n            comparator = AppTypeComparator;\r\n            break;\r\n        case \"q\":\r\n            comparator = QueueNameComparator;\r\n            break;\r\n        case \"c\":\r\n            comparator = UsedContainersComparator;\r\n            break;\r\n        case \"r\":\r\n            comparator = ReservedContainersComparator;\r\n            break;\r\n        case \"v\":\r\n            comparator = UsedVCoresComparator;\r\n            break;\r\n        case \"o\":\r\n            comparator = ReservedVCoresComparator;\r\n            break;\r\n        case \"m\":\r\n            comparator = UsedMemoryComparator;\r\n            break;\r\n        case \"w\":\r\n            comparator = ReservedMemoryComparator;\r\n            break;\r\n        case \"s\":\r\n            comparator = VCoreSecondsComparator;\r\n            break;\r\n        case \"y\":\r\n            comparator = MemorySecondsComparator;\r\n            break;\r\n        case \"p\":\r\n            comparator = ProgressComparator;\r\n            break;\r\n        case \"i\":\r\n            comparator = RunningTimeComparator;\r\n            break;\r\n        case \"n\":\r\n            comparator = AppNameComparator;\r\n            break;\r\n        case \"l\":\r\n            comparator = AppPriorityComparator;\r\n            break;\r\n        default:\r\n            currentSortField = f;\r\n            showTopScreen();\r\n            showingTopScreen.set(true);\r\n            displayScreen = DisplayScreen.TOP;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "handleFieldsScreenKeyPress",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void handleFieldsScreenKeyPress(String input)\n{\r\n    if (keyFieldsMap.containsKey(input.toLowerCase())) {\r\n        toggleColumn(keyFieldsMap.get(input.toLowerCase()));\r\n        setAppsHeader();\r\n    } else {\r\n        showTopScreen();\r\n        showingTopScreen.set(true);\r\n        displayScreen = DisplayScreen.TOP;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "handleTopScreenKeyPress",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void handleTopScreenKeyPress(String input)\n{\r\n    switch(input.toLowerCase()) {\r\n        case \"q\":\r\n            runMainLoop.set(false);\r\n            runKeyboardMonitor.set(false);\r\n            displayThread.interrupt();\r\n            break;\r\n        case \"s\":\r\n            displayScreen = DisplayScreen.SORT;\r\n            showSortScreen();\r\n            break;\r\n        case \"f\":\r\n            displayScreen = DisplayScreen.FIELDS;\r\n            showFieldsScreen();\r\n            break;\r\n        case \"r\":\r\n            ascendingSort = !ascendingSort;\r\n            break;\r\n        case \"h\":\r\n            displayScreen = DisplayScreen.HELP;\r\n            showHelpScreen();\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "handleHelpScreenKeyPress",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void handleHelpScreenKeyPress()\n{\r\n    showTopScreen();\r\n    showingTopScreen.set(true);\r\n    displayScreen = DisplayScreen.TOP;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "limitLineLength",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String limitLineLength(String line, int length, boolean addNewline)\n{\r\n    if (line.length() > length) {\r\n        String tmp;\r\n        if (addNewline) {\r\n            tmp = line.substring(0, length - System.lineSeparator().length());\r\n            tmp += System.lineSeparator();\r\n        } else {\r\n            tmp = line.substring(0, length);\r\n        }\r\n        return tmp;\r\n    }\r\n    return line;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "toggleColumn",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void toggleColumn(Columns col)\n{\r\n    columnInformationEnumMap.get(col).display = !columnInformationEnumMap.get(col).display;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "fetchAppReports",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<ApplicationReport> fetchAppReports() throws YarnException, IOException\n{\r\n    List<ApplicationReport> ret;\r\n    EnumSet<YarnApplicationState> states = EnumSet.of(YarnApplicationState.ACCEPTED, YarnApplicationState.RUNNING);\r\n    GetApplicationsRequest req = GetApplicationsRequest.newInstance(types, states);\r\n    req.setQueues(queues);\r\n    req.setUsers(users);\r\n    ret = applicationReportsCache.getIfPresent(req);\r\n    if (ret != null) {\r\n        return ret;\r\n    }\r\n    ret = client.getApplications(queues, users, types, states);\r\n    applicationReportsCache.put(req, ret);\r\n    return ret;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getCommandOutput",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getCommandOutput(String[] command) throws IOException, InterruptedException\n{\r\n    Process p = Runtime.getRuntime().exec(command);\r\n    p.waitFor();\r\n    byte[] output = IOUtils.toByteArray(p.getInputStream());\r\n    return new String(output, \"ASCII\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "addShutdownHook",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addShutdownHook()\n{\r\n    Runtime.getRuntime().addShutdownHook(new Thread(() -> {\r\n        clearScreen();\r\n    }));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    QueueCLI cli = new QueueCLI();\r\n    cli.setSysOutPrintStream(System.out);\r\n    cli.setSysErrPrintStream(System.err);\r\n    int res = ToolRunner.run(cli, args);\r\n    cli.stop();\r\n    System.exit(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "run",
  "errType" : [ "MissingArgumentException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "int run(String[] args) throws Exception\n{\r\n    Options opts = new Options();\r\n    opts.addOption(STATUS_CMD, true, \"List queue information about given queue.\");\r\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\r\n    opts.getOption(STATUS_CMD).setArgName(\"Queue Name\");\r\n    CommandLine cliParser = null;\r\n    try {\r\n        cliParser = new GnuParser().parse(opts, args);\r\n    } catch (MissingArgumentException ex) {\r\n        sysout.println(\"Missing argument for options\");\r\n        printUsage(opts);\r\n        return -1;\r\n    }\r\n    createAndStartYarnClient();\r\n    if (cliParser.hasOption(STATUS_CMD)) {\r\n        if (args.length != 2) {\r\n            printUsage(opts);\r\n            return -1;\r\n        }\r\n        return listQueue(cliParser.getOptionValue(STATUS_CMD));\r\n    } else if (cliParser.hasOption(HELP_CMD)) {\r\n        printUsage(opts);\r\n        return 0;\r\n    } else {\r\n        syserr.println(\"Invalid Command Usage : \");\r\n        printUsage(opts);\r\n        return -1;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void printUsage(Options opts)\n{\r\n    new HelpFormatter().printHelp(QUEUE, opts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "listQueue",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "int listQueue(String queueName) throws YarnException, IOException\n{\r\n    int rc;\r\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(sysout, Charset.forName(\"UTF-8\")));\r\n    QueueInfo queueInfo = client.getQueueInfo(queueName);\r\n    if (queueInfo != null) {\r\n        writer.println(\"Queue Information : \");\r\n        printQueueInfo(writer, queueInfo);\r\n        rc = 0;\r\n    } else {\r\n        writer.println(\"Cannot get queue from RM by queueName = \" + queueName + \", please check.\");\r\n        rc = -1;\r\n    }\r\n    writer.flush();\r\n    return rc;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 32,
  "sourceCodeText" : "void printQueueInfo(PrintWriter writer, QueueInfo queueInfo)\n{\r\n    writer.print(\"Queue Name : \");\r\n    writer.println(queueInfo.getQueueName());\r\n    writer.print(\"Queue Path : \");\r\n    writer.println(queueInfo.getQueuePath());\r\n    writer.print(\"\\tState : \");\r\n    writer.println(queueInfo.getQueueState());\r\n    DecimalFormat df = new DecimalFormat(\"#.00\");\r\n    writer.print(\"\\tCapacity : \");\r\n    writer.println(df.format(queueInfo.getCapacity() * 100) + \"%\");\r\n    writer.print(\"\\tCurrent Capacity : \");\r\n    writer.println(df.format(queueInfo.getCurrentCapacity() * 100) + \"%\");\r\n    writer.print(\"\\tMaximum Capacity : \");\r\n    writer.println(df.format(queueInfo.getMaximumCapacity() * 100) + \"%\");\r\n    writer.print(\"\\tWeight : \");\r\n    writer.println(df.format(queueInfo.getWeight()));\r\n    writer.print(\"\\tMaximum Parallel Apps : \");\r\n    writer.println(queueInfo.getMaxParallelApps());\r\n    writer.print(\"\\tDefault Node Label expression : \");\r\n    String nodeLabelExpression = queueInfo.getDefaultNodeLabelExpression();\r\n    nodeLabelExpression = (nodeLabelExpression == null || nodeLabelExpression.trim().isEmpty()) ? NodeLabel.DEFAULT_NODE_LABEL_PARTITION : nodeLabelExpression;\r\n    writer.println(nodeLabelExpression);\r\n    Set<String> nodeLabels = queueInfo.getAccessibleNodeLabels();\r\n    StringBuilder labelList = new StringBuilder();\r\n    writer.print(\"\\tAccessible Node Labels : \");\r\n    for (String nodeLabel : nodeLabels) {\r\n        if (labelList.length() > 0) {\r\n            labelList.append(',');\r\n        }\r\n        labelList.append(nodeLabel);\r\n    }\r\n    writer.println(labelList.toString());\r\n    Boolean preemptStatus = queueInfo.getPreemptionDisabled();\r\n    if (preemptStatus != null) {\r\n        writer.print(\"\\tPreemption : \");\r\n        writer.println(preemptStatus ? \"disabled\" : \"enabled\");\r\n    }\r\n    Boolean intraQueuePreemption = queueInfo.getIntraQueuePreemptionDisabled();\r\n    if (intraQueuePreemption != null) {\r\n        writer.print(\"\\tIntra-queue Preemption : \");\r\n        writer.println(intraQueuePreemption ? \"disabled\" : \"enabled\");\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createYarnClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnClient createYarnClient()\n{\r\n    YarnClient client = new YarnClientImpl();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createApplication",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnClientApplication createApplication() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "submitApplication",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationId submitApplication(ApplicationSubmissionContext appContext) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "failApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void failApplicationAttempt(ApplicationAttemptId applicationAttemptId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "killApplication",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void killApplication(ApplicationId applicationId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "killApplication",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void killApplication(ApplicationId applicationId, String diagnostics) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationReport getApplicationReport(ApplicationId appId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> getAMRMToken(ApplicationId appId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationReport> getApplications() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationReport> getApplications(Set<String> applicationTypes) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationReport> getApplications(EnumSet<YarnApplicationState> applicationStates) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationReport> getApplications(Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationReport> getApplications(Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates, Set<String> applicationTags) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationReport> getApplications(Set<String> queues, Set<String> users, Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationReport> getApplications(GetApplicationsRequest request) throws YarnException, IOException\n{\r\n    throw new UnsupportedOperationException(\"The sub-class extending \" + YarnClient.class.getName() + \" is expected to implement this !\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getYarnClusterMetrics",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnClusterMetrics getYarnClusterMetrics() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getNodeReports",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<NodeReport> getNodeReports(NodeState... states) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getRMDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Token getRMDelegationToken(Text renewer) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "QueueInfo getQueueInfo(String queueName) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getAllQueues",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<QueueInfo> getAllQueues() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getRootQueueInfos",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<QueueInfo> getRootQueueInfos() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getChildQueueInfos",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<QueueInfo> getChildQueueInfos(String parent) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getQueueAclsInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<QueueUserACLInfo> getQueueAclsInfo() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptReport getApplicationAttemptReport(ApplicationAttemptId applicationAttemptId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationAttemptReport> getApplicationAttempts(ApplicationId applicationId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getContainerReport",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerReport getContainerReport(ContainerId containerId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ContainerReport> getContainers(ApplicationAttemptId applicationAttemptId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "moveApplicationAcrossQueues",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void moveApplicationAcrossQueues(ApplicationId appId, String queue) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createReservation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GetNewReservationResponse createReservation() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "submitReservation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationSubmissionResponse submitReservation(ReservationSubmissionRequest request) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "updateReservation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationUpdateResponse updateReservation(ReservationUpdateRequest request) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "deleteReservation",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationDeleteResponse deleteReservation(ReservationDeleteRequest request) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "listReservations",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ReservationListResponse listReservations(ReservationListRequest request) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<NodeId, Set<String>> getNodeToLabels() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Set<NodeId>> getLabelsToNodes() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Set<NodeId>> getLabelsToNodes(Set<String> labels) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<NodeLabel> getClusterNodeLabels() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "updateApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Priority updateApplicationPriority(ApplicationId applicationId, Priority priority) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "signalToContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void signalToContainer(ContainerId containerId, SignalContainerCommand command) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "updateApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpdateApplicationTimeoutsResponse updateApplicationTimeouts(UpdateApplicationTimeoutsRequest request) throws YarnException, IOException\n{\r\n    throw new UnsupportedOperationException(\"The sub-class extending \" + YarnClient.class.getName() + \" is expected to implement this !\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getResourceProfiles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Resource> getResourceProfiles() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getResourceProfile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getResourceProfile(String profile) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getResourceTypeInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ResourceTypeInfo> getResourceTypeInfo() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getClusterAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Set<NodeAttributeInfo> getClusterAttributes() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getAttributesToNodes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<NodeAttributeKey, List<NodeToAttributeValue>> getAttributesToNodes(Set<NodeAttributeKey> attributes) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getNodeToAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, Set<NodeAttribute>> getNodeToAttributes(Set<String> hostNames) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "shellToContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void shellToContainer(ContainerId containerId, ShellContainerCommand command) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    asyncApiPollIntervalMillis = conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS, YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\r\n    asyncApiPollTimeoutMillis = conf.getLong(YarnConfiguration.YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS, YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_TIMEOUT_MS);\r\n    submitPollIntervalMillis = asyncApiPollIntervalMillis;\r\n    if (conf.get(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS) != null) {\r\n        submitPollIntervalMillis = conf.getLong(YarnConfiguration.YARN_CLIENT_APP_SUBMISSION_POLL_INTERVAL_MS, YarnConfiguration.DEFAULT_YARN_CLIENT_APPLICATION_CLIENT_PROTOCOL_POLL_INTERVAL_MS);\r\n    }\r\n    if (YarnConfiguration.timelineServiceV1Enabled(conf)) {\r\n        timelineV1ServiceEnabled = true;\r\n        timelineDTRenewer = getTimelineDelegationTokenRenewer(conf);\r\n        timelineService = TimelineUtils.buildTimelineTokenService(conf);\r\n    }\r\n    if (YarnConfiguration.timelineServiceV2Enabled(conf)) {\r\n        timelineV2ServiceEnabled = true;\r\n    }\r\n    if (timelineV1ServiceEnabled || conf.getBoolean(YarnConfiguration.APPLICATION_HISTORY_ENABLED, YarnConfiguration.DEFAULT_APPLICATION_HISTORY_ENABLED)) {\r\n        historyServiceEnabled = true;\r\n        historyClient = AHSClient.createAHSClient();\r\n        historyClient.init(conf);\r\n    }\r\n    if (timelineV2ServiceEnabled) {\r\n        ahsV2Client = AHSClient.createAHSv2Client();\r\n        ahsV2Client.init(conf);\r\n    }\r\n    timelineServiceBestEffort = conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_CLIENT_BEST_EFFORT, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_CLIENT_BEST_EFFORT);\r\n    loadResourceTypesFromServer = conf.getBoolean(YarnConfiguration.YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER, YarnConfiguration.DEFAULT_YARN_CLIENT_LOAD_RESOURCETYPES_FROM_SERVER);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createTimelineClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineClient createTimelineClient() throws IOException, YarnException\n{\r\n    return TimelineClient.createTimelineClient();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStart",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    try {\r\n        rmClient = ClientRMProxy.createRMProxy(getConfig(), ApplicationClientProtocol.class);\r\n        if (historyServiceEnabled) {\r\n            historyClient.start();\r\n        }\r\n        if (timelineV2ServiceEnabled) {\r\n            ahsV2Client.start();\r\n        }\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n    if (loadResourceTypesFromServer) {\r\n        ResourceUtils.reinitializeResources(getResourceTypeInfo());\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (this.rmClient != null) {\r\n        RPC.stopProxy(this.rmClient);\r\n    }\r\n    if (historyServiceEnabled) {\r\n        historyClient.stop();\r\n    }\r\n    if (timelineV2ServiceEnabled) {\r\n        ahsV2Client.stop();\r\n    }\r\n    if (timelineClient != null) {\r\n        timelineClient.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getNewApplication",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNewApplicationResponse getNewApplication() throws YarnException, IOException\n{\r\n    GetNewApplicationRequest request = Records.newRecord(GetNewApplicationRequest.class);\r\n    return rmClient.getNewApplication(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createApplication",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "YarnClientApplication createApplication() throws YarnException, IOException\n{\r\n    ApplicationSubmissionContext context = Records.newRecord(ApplicationSubmissionContext.class);\r\n    GetNewApplicationResponse newApp = getNewApplication();\r\n    ApplicationId appId = newApp.getApplicationId();\r\n    context.setApplicationId(appId);\r\n    return new YarnClientApplication(newApp, context);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "submitApplication",
  "errType" : [ "Exception", "ApplicationNotFoundException", "InterruptedException" ],
  "containingMethodsNum" : 26,
  "sourceCodeText" : "ApplicationId submitApplication(ApplicationSubmissionContext appContext) throws YarnException, IOException\n{\r\n    ApplicationId applicationId = appContext.getApplicationId();\r\n    if (applicationId == null) {\r\n        throw new ApplicationIdNotProvidedException(\"ApplicationId is not provided in ApplicationSubmissionContext\");\r\n    }\r\n    SubmitApplicationRequest request = Records.newRecord(SubmitApplicationRequest.class);\r\n    request.setApplicationSubmissionContext(appContext);\r\n    if (isSecurityEnabled() && timelineV1ServiceEnabled && getConfig().get(YarnConfiguration.TIMELINE_HTTP_AUTH_TYPE).equals(KerberosAuthenticationHandler.TYPE)) {\r\n        addTimelineDelegationToken(appContext.getAMContainerSpec());\r\n    }\r\n    try {\r\n        if (isSecurityEnabled()) {\r\n            addLogAggregationDelegationToken(appContext.getAMContainerSpec());\r\n        }\r\n    } catch (Exception e) {\r\n        LOG.warn(\"Failed to obtain delegation token for Log Aggregation Path\", e);\r\n    }\r\n    rmClient.submitApplication(request);\r\n    int pollCount = 0;\r\n    long startTime = System.currentTimeMillis();\r\n    EnumSet<YarnApplicationState> waitingStates = EnumSet.of(YarnApplicationState.NEW, YarnApplicationState.NEW_SAVING, YarnApplicationState.SUBMITTED);\r\n    EnumSet<YarnApplicationState> failToSubmitStates = EnumSet.of(YarnApplicationState.FAILED, YarnApplicationState.KILLED);\r\n    while (true) {\r\n        try {\r\n            ApplicationReport appReport = getApplicationReport(applicationId);\r\n            YarnApplicationState state = appReport.getYarnApplicationState();\r\n            if (!waitingStates.contains(state)) {\r\n                if (failToSubmitStates.contains(state)) {\r\n                    throw new YarnException(\"Failed to submit \" + applicationId + \" to YARN : \" + appReport.getDiagnostics());\r\n                }\r\n                LOG.info(\"Submitted application \" + applicationId);\r\n                break;\r\n            }\r\n            long elapsedMillis = System.currentTimeMillis() - startTime;\r\n            if (enforceAsyncAPITimeout() && elapsedMillis >= asyncApiPollTimeoutMillis) {\r\n                throw new YarnException(\"Timed out while waiting for application \" + applicationId + \" to be submitted successfully\");\r\n            }\r\n            if (++pollCount % 10 == 0) {\r\n                LOG.info(\"Application submission is not finished, \" + \"submitted application \" + applicationId + \" is still in \" + state);\r\n            }\r\n            try {\r\n                Thread.sleep(submitPollIntervalMillis);\r\n            } catch (InterruptedException ie) {\r\n                String msg = \"Interrupted while waiting for application \" + applicationId + \" to be successfully submitted.\";\r\n                LOG.error(msg);\r\n                throw new YarnException(msg, ie);\r\n            }\r\n        } catch (ApplicationNotFoundException ex) {\r\n            LOG.info(\"Re-submit application \" + applicationId + \"with the \" + \"same ApplicationSubmissionContext\");\r\n            rmClient.submitApplication(request);\r\n        }\r\n    }\r\n    return applicationId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "addLogAggregationDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void addLogAggregationDelegationToken(ContainerLaunchContext clc) throws YarnException, IOException\n{\r\n    Credentials credentials = new Credentials();\r\n    DataInputByteBuffer dibb = new DataInputByteBuffer();\r\n    ByteBuffer tokens = clc.getTokens();\r\n    if (tokens != null) {\r\n        dibb.reset(tokens);\r\n        credentials.readTokenStorageStream(dibb);\r\n        tokens.rewind();\r\n    }\r\n    Configuration conf = getConfig();\r\n    String masterPrincipal = YarnClientUtils.getRmPrincipal(conf);\r\n    if (StringUtils.isEmpty(masterPrincipal)) {\r\n        throw new IOException(\"Can't get Master Kerberos principal for use as renewer\");\r\n    }\r\n    LOG.debug(\"Delegation Token Renewer: \" + masterPrincipal);\r\n    LogAggregationFileControllerFactory factory = new LogAggregationFileControllerFactory(conf);\r\n    LogAggregationFileController fileController = factory.getFileControllerForWrite();\r\n    Path remoteRootLogDir = fileController.getRemoteRootLogDir();\r\n    FileSystem fs = remoteRootLogDir.getFileSystem(conf);\r\n    final org.apache.hadoop.security.token.Token<?>[] finalTokens = fs.addDelegationTokens(masterPrincipal, credentials);\r\n    if (finalTokens != null) {\r\n        for (org.apache.hadoop.security.token.Token<?> token : finalTokens) {\r\n            LOG.info(\"Added delegation token for log aggregation path \" + remoteRootLogDir + \"; \" + token);\r\n        }\r\n    }\r\n    DataOutputBuffer dob = new DataOutputBuffer();\r\n    credentials.writeTokenStorageToStream(dob);\r\n    tokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n    clc.setTokens(tokens);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "addTimelineDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void addTimelineDelegationToken(ContainerLaunchContext clc) throws YarnException, IOException\n{\r\n    Credentials credentials = new Credentials();\r\n    DataInputByteBuffer dibb = new DataInputByteBuffer();\r\n    ByteBuffer tokens = clc.getTokens();\r\n    if (tokens != null) {\r\n        dibb.reset(tokens);\r\n        credentials.readTokenStorageStream(dibb);\r\n        tokens.rewind();\r\n    }\r\n    for (org.apache.hadoop.security.token.Token<? extends TokenIdentifier> token : credentials.getAllTokens()) {\r\n        if (token.getKind().equals(TimelineDelegationTokenIdentifier.KIND_NAME)) {\r\n            return;\r\n        }\r\n    }\r\n    org.apache.hadoop.security.token.Token<TimelineDelegationTokenIdentifier> timelineDelegationToken = getTimelineDelegationToken();\r\n    if (timelineDelegationToken == null) {\r\n        return;\r\n    }\r\n    credentials.addToken(timelineService, timelineDelegationToken);\r\n    LOG.debug(\"Add timeline delegation token into credentials: {}\", timelineDelegationToken);\r\n    DataOutputBuffer dob = new DataOutputBuffer();\r\n    credentials.writeTokenStorageToStream(dob);\r\n    tokens = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n    clc.setTokens(tokens);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getTimelineDelegationToken",
  "errType" : [ "Exception", "NoClassDefFoundError" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "org.apache.hadoop.security.token.Token<TimelineDelegationTokenIdentifier> getTimelineDelegationToken() throws IOException, YarnException\n{\r\n    try {\r\n        if (timelineClient == null) {\r\n            synchronized (this) {\r\n                if (timelineClient == null) {\r\n                    TimelineClient tlClient = createTimelineClient();\r\n                    tlClient.init(getConfig());\r\n                    tlClient.start();\r\n                    this.timelineClient = tlClient;\r\n                }\r\n            }\r\n        }\r\n        return timelineClient.getDelegationToken(timelineDTRenewer);\r\n    } catch (Exception e) {\r\n        if (timelineServiceBestEffort) {\r\n            LOG.warn(\"Failed to get delegation token from the timeline server: \" + e.getMessage());\r\n            return null;\r\n        }\r\n        throw new IOException(e);\r\n    } catch (NoClassDefFoundError e) {\r\n        NoClassDefFoundError wrappedError = new NoClassDefFoundError(e.getMessage() + \". It appears that the timeline client \" + \"failed to initiate because an incompatible dependency \" + \"in classpath. If timeline service is optional to this \" + \"client, try to work around by setting \" + YarnConfiguration.TIMELINE_SERVICE_ENABLED + \" to false in client configuration.\");\r\n        wrappedError.setStackTrace(e.getStackTrace());\r\n        throw wrappedError;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getTimelineDelegationTokenRenewer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getTimelineDelegationTokenRenewer(Configuration conf) throws IOException, YarnException\n{\r\n    String rmPrincipal = conf.get(YarnConfiguration.RM_PRINCIPAL);\r\n    String renewer = null;\r\n    if (rmPrincipal != null && rmPrincipal.length() > 0) {\r\n        String rmHost = conf.getSocketAddr(YarnConfiguration.RM_ADDRESS, YarnConfiguration.DEFAULT_RM_ADDRESS, YarnConfiguration.DEFAULT_RM_PORT).getHostName();\r\n        renewer = SecurityUtil.getServerPrincipal(rmPrincipal, rmHost);\r\n    }\r\n    return renewer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "isSecurityEnabled",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isSecurityEnabled()\n{\r\n    return UserGroupInformation.isSecurityEnabled();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "failApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void failApplicationAttempt(ApplicationAttemptId attemptId) throws YarnException, IOException\n{\r\n    LOG.info(\"Failing application attempt \" + attemptId);\r\n    FailApplicationAttemptRequest request = Records.newRecord(FailApplicationAttemptRequest.class);\r\n    request.setApplicationAttemptId(attemptId);\r\n    rmClient.failApplicationAttempt(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "killApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void killApplication(ApplicationId applicationId) throws YarnException, IOException\n{\r\n    killApplication(applicationId, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "killApplication",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void killApplication(ApplicationId applicationId, String diagnostics) throws YarnException, IOException\n{\r\n    KillApplicationRequest request = Records.newRecord(KillApplicationRequest.class);\r\n    request.setApplicationId(applicationId);\r\n    if (diagnostics != null) {\r\n        request.setDiagnostics(diagnostics);\r\n    }\r\n    try {\r\n        int pollCount = 0;\r\n        long startTime = System.currentTimeMillis();\r\n        while (true) {\r\n            KillApplicationResponse response = rmClient.forceKillApplication(request);\r\n            if (response.getIsKillCompleted()) {\r\n                LOG.info(\"Killed application \" + applicationId);\r\n                break;\r\n            }\r\n            long elapsedMillis = System.currentTimeMillis() - startTime;\r\n            if (enforceAsyncAPITimeout() && elapsedMillis >= this.asyncApiPollTimeoutMillis) {\r\n                throw new YarnException(\"Timed out while waiting for application \" + applicationId + \" to be killed.\");\r\n            }\r\n            if (++pollCount % 10 == 0) {\r\n                LOG.info(\"Waiting for application \" + applicationId + \" to be killed.\");\r\n            }\r\n            Thread.sleep(asyncApiPollIntervalMillis);\r\n        }\r\n    } catch (InterruptedException e) {\r\n        String msg = \"Interrupted while waiting for application \" + applicationId + \" to be killed.\";\r\n        LOG.error(msg);\r\n        throw new YarnException(msg, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "enforceAsyncAPITimeout",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean enforceAsyncAPITimeout()\n{\r\n    return asyncApiPollTimeoutMillis >= 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationReport",
  "errType" : [ "ApplicationNotFoundException", "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ApplicationReport getApplicationReport(ApplicationId appId) throws YarnException, IOException\n{\r\n    GetApplicationReportResponse response = null;\r\n    try {\r\n        GetApplicationReportRequest request = Records.newRecord(GetApplicationReportRequest.class);\r\n        request.setApplicationId(appId);\r\n        response = rmClient.getApplicationReport(request);\r\n    } catch (ApplicationNotFoundException e) {\r\n        if (timelineV2ServiceEnabled) {\r\n            try {\r\n                return ahsV2Client.getApplicationReport(appId);\r\n            } catch (Exception ex) {\r\n                LOG.warn(\"Failed to fetch application report from \" + \"ATS v2\", ex);\r\n            }\r\n        }\r\n        if (!historyServiceEnabled) {\r\n            throw e;\r\n        }\r\n        return historyClient.getApplicationReport(appId);\r\n    }\r\n    return response.getApplicationReport();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> getAMRMToken(ApplicationId appId) throws YarnException, IOException\n{\r\n    Token token = getApplicationReport(appId).getAMRMToken();\r\n    org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken = null;\r\n    if (token != null) {\r\n        amrmToken = ConverterUtils.convertFromYarn(token, (Text) null);\r\n    }\r\n    return amrmToken;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationReport> getApplications() throws YarnException, IOException\n{\r\n    return getApplications(null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationReport> getApplications(Set<String> applicationTypes) throws YarnException, IOException\n{\r\n    return getApplications(applicationTypes, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ApplicationReport> getApplications(EnumSet<YarnApplicationState> applicationStates) throws YarnException, IOException\n{\r\n    return getApplications(null, applicationStates);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<ApplicationReport> getApplications(Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates) throws YarnException, IOException\n{\r\n    GetApplicationsRequest request = GetApplicationsRequest.newInstance(applicationTypes, applicationStates);\r\n    GetApplicationsResponse response = rmClient.getApplications(request);\r\n    return response.getApplicationList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<ApplicationReport> getApplications(Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates, Set<String> applicationTags) throws YarnException, IOException\n{\r\n    GetApplicationsRequest request = GetApplicationsRequest.newInstance(applicationTypes, applicationStates);\r\n    request.setApplicationTags(applicationTags);\r\n    GetApplicationsResponse response = rmClient.getApplications(request);\r\n    return response.getApplicationList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<ApplicationReport> getApplications(Set<String> queues, Set<String> users, Set<String> applicationTypes, EnumSet<YarnApplicationState> applicationStates) throws YarnException, IOException\n{\r\n    GetApplicationsRequest request = GetApplicationsRequest.newInstance(applicationTypes, applicationStates);\r\n    request.setQueues(queues);\r\n    request.setUsers(users);\r\n    GetApplicationsResponse response = rmClient.getApplications(request);\r\n    return response.getApplicationList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<ApplicationReport> getApplications(GetApplicationsRequest request) throws YarnException, IOException\n{\r\n    GetApplicationsResponse response = rmClient.getApplications(request);\r\n    return response.getApplicationList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getYarnClusterMetrics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "YarnClusterMetrics getYarnClusterMetrics() throws YarnException, IOException\n{\r\n    GetClusterMetricsRequest request = Records.newRecord(GetClusterMetricsRequest.class);\r\n    GetClusterMetricsResponse response = rmClient.getClusterMetrics(request);\r\n    return response.getClusterMetrics();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getNodeReports",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<NodeReport> getNodeReports(NodeState... states) throws YarnException, IOException\n{\r\n    EnumSet<NodeState> statesSet = (states.length == 0) ? EnumSet.allOf(NodeState.class) : EnumSet.noneOf(NodeState.class);\r\n    for (NodeState state : states) {\r\n        statesSet.add(state);\r\n    }\r\n    GetClusterNodesRequest request = GetClusterNodesRequest.newInstance(statesSet);\r\n    GetClusterNodesResponse response = rmClient.getClusterNodes(request);\r\n    return response.getNodeReports();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getRMDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Token getRMDelegationToken(Text renewer) throws YarnException, IOException\n{\r\n    GetDelegationTokenRequest rmDTRequest = Records.newRecord(GetDelegationTokenRequest.class);\r\n    rmDTRequest.setRenewer(renewer.toString());\r\n    GetDelegationTokenResponse response = rmClient.getDelegationToken(rmDTRequest);\r\n    return response.getRMDelegationToken();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getQueueInfoRequest",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "GetQueueInfoRequest getQueueInfoRequest(String queueName, boolean includeApplications, boolean includeChildQueues, boolean recursive)\n{\r\n    GetQueueInfoRequest request = Records.newRecord(GetQueueInfoRequest.class);\r\n    request.setQueueName(queueName);\r\n    request.setIncludeApplications(includeApplications);\r\n    request.setIncludeChildQueues(includeChildQueues);\r\n    request.setRecursive(recursive);\r\n    return request;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "QueueInfo getQueueInfo(String queueName) throws YarnException, IOException\n{\r\n    GetQueueInfoRequest request = getQueueInfoRequest(queueName, true, false, false);\r\n    Records.newRecord(GetQueueInfoRequest.class);\r\n    return rmClient.getQueueInfo(request).getQueueInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getQueueAclsInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<QueueUserACLInfo> getQueueAclsInfo() throws YarnException, IOException\n{\r\n    GetQueueUserAclsInfoRequest request = Records.newRecord(GetQueueUserAclsInfoRequest.class);\r\n    return rmClient.getQueueUserAcls(request).getUserAclsInfoList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getAllQueues",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<QueueInfo> getAllQueues() throws YarnException, IOException\n{\r\n    List<QueueInfo> queues = new ArrayList<QueueInfo>();\r\n    QueueInfo rootQueue = rmClient.getQueueInfo(getQueueInfoRequest(ROOT, false, true, true)).getQueueInfo();\r\n    getChildQueues(rootQueue, queues, true);\r\n    return queues;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getRootQueueInfos",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<QueueInfo> getRootQueueInfos() throws YarnException, IOException\n{\r\n    List<QueueInfo> queues = new ArrayList<QueueInfo>();\r\n    QueueInfo rootQueue = rmClient.getQueueInfo(getQueueInfoRequest(ROOT, false, true, true)).getQueueInfo();\r\n    getChildQueues(rootQueue, queues, false);\r\n    return queues;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getChildQueueInfos",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<QueueInfo> getChildQueueInfos(String parent) throws YarnException, IOException\n{\r\n    List<QueueInfo> queues = new ArrayList<QueueInfo>();\r\n    QueueInfo parentQueue = rmClient.getQueueInfo(getQueueInfoRequest(parent, false, true, false)).getQueueInfo();\r\n    getChildQueues(parentQueue, queues, true);\r\n    return queues;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getChildQueues",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void getChildQueues(QueueInfo parent, List<QueueInfo> queues, boolean recursive)\n{\r\n    List<QueueInfo> childQueues = parent.getChildQueues();\r\n    for (QueueInfo child : childQueues) {\r\n        queues.add(child);\r\n        if (recursive) {\r\n            getChildQueues(child, queues, recursive);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setRMClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRMClient(ApplicationClientProtocol rmClient)\n{\r\n    this.rmClient = rmClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationAttemptReport",
  "errType" : [ "YarnException", "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ApplicationAttemptReport getApplicationAttemptReport(ApplicationAttemptId appAttemptId) throws YarnException, IOException\n{\r\n    try {\r\n        GetApplicationAttemptReportRequest request = Records.newRecord(GetApplicationAttemptReportRequest.class);\r\n        request.setApplicationAttemptId(appAttemptId);\r\n        GetApplicationAttemptReportResponse response = rmClient.getApplicationAttemptReport(request);\r\n        return response.getApplicationAttemptReport();\r\n    } catch (YarnException e) {\r\n        if (e.getClass() != ApplicationNotFoundException.class) {\r\n            throw e;\r\n        }\r\n        if (timelineV2ServiceEnabled) {\r\n            try {\r\n                return ahsV2Client.getApplicationAttemptReport(appAttemptId);\r\n            } catch (Exception ex) {\r\n                LOG.warn(\"Failed to fetch application attempt report from \" + \"ATS v2\", ex);\r\n            }\r\n        }\r\n        if (!historyServiceEnabled) {\r\n            throw e;\r\n        }\r\n        return historyClient.getApplicationAttemptReport(appAttemptId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationAttempts",
  "errType" : [ "YarnException", "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "List<ApplicationAttemptReport> getApplicationAttempts(ApplicationId appId) throws YarnException, IOException\n{\r\n    try {\r\n        GetApplicationAttemptsRequest request = Records.newRecord(GetApplicationAttemptsRequest.class);\r\n        request.setApplicationId(appId);\r\n        GetApplicationAttemptsResponse response = rmClient.getApplicationAttempts(request);\r\n        return response.getApplicationAttemptList();\r\n    } catch (YarnException e) {\r\n        if (e.getClass() != ApplicationNotFoundException.class) {\r\n            throw e;\r\n        }\r\n        if (timelineV2ServiceEnabled) {\r\n            try {\r\n                return ahsV2Client.getApplicationAttempts(appId);\r\n            } catch (Exception ex) {\r\n                LOG.warn(\"Failed to fetch application attempts from \" + \"ATS v2\", ex);\r\n            }\r\n        }\r\n        if (!historyServiceEnabled) {\r\n            throw e;\r\n        }\r\n        return historyClient.getApplicationAttempts(appId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getContainerReport",
  "errType" : [ "YarnException", "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ContainerReport getContainerReport(ContainerId containerId) throws YarnException, IOException\n{\r\n    try {\r\n        GetContainerReportRequest request = Records.newRecord(GetContainerReportRequest.class);\r\n        request.setContainerId(containerId);\r\n        GetContainerReportResponse response = rmClient.getContainerReport(request);\r\n        return response.getContainerReport();\r\n    } catch (YarnException e) {\r\n        if (e.getClass() != ApplicationNotFoundException.class && e.getClass() != ContainerNotFoundException.class) {\r\n            throw e;\r\n        }\r\n        if (timelineV2ServiceEnabled) {\r\n            try {\r\n                return ahsV2Client.getContainerReport(containerId);\r\n            } catch (Exception ex) {\r\n                LOG.warn(\"Failed to fetch container report from \" + \"ATS v2\", ex);\r\n            }\r\n        }\r\n        if (!historyServiceEnabled) {\r\n            throw e;\r\n        }\r\n        return historyClient.getContainerReport(containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getContainers",
  "errType" : [ "YarnException", "IOException|YarnException" ],
  "containingMethodsNum" : 25,
  "sourceCodeText" : "List<ContainerReport> getContainers(ApplicationAttemptId applicationAttemptId) throws YarnException, IOException\n{\r\n    List<ContainerReport> containersForAttempt = new ArrayList<ContainerReport>();\r\n    boolean appNotFoundInRM = false;\r\n    try {\r\n        GetContainersRequest request = Records.newRecord(GetContainersRequest.class);\r\n        request.setApplicationAttemptId(applicationAttemptId);\r\n        GetContainersResponse response = rmClient.getContainers(request);\r\n        containersForAttempt.addAll(response.getContainerList());\r\n    } catch (YarnException e) {\r\n        if (e.getClass() != ApplicationNotFoundException.class) {\r\n            throw e;\r\n        }\r\n        if (!historyServiceEnabled && !timelineV2ServiceEnabled) {\r\n            throw e;\r\n        }\r\n        appNotFoundInRM = true;\r\n    }\r\n    List<ContainerReport> containersListFromAHS = null;\r\n    try {\r\n        containersListFromAHS = getContainerReportFromHistory(applicationAttemptId);\r\n    } catch (IOException | YarnException e) {\r\n        if (appNotFoundInRM) {\r\n            throw e;\r\n        }\r\n    }\r\n    if (null != containersListFromAHS && containersListFromAHS.size() > 0) {\r\n        Set<ContainerId> containerIdsToBeKeptFromAHS = new HashSet<ContainerId>();\r\n        Iterator<ContainerReport> tmpItr = containersListFromAHS.iterator();\r\n        while (tmpItr.hasNext()) {\r\n            containerIdsToBeKeptFromAHS.add(tmpItr.next().getContainerId());\r\n        }\r\n        Iterator<ContainerReport> rmContainers = containersForAttempt.iterator();\r\n        while (rmContainers.hasNext()) {\r\n            ContainerReport tmp = rmContainers.next();\r\n            containerIdsToBeKeptFromAHS.remove(tmp.getContainerId());\r\n        }\r\n        if (containerIdsToBeKeptFromAHS.size() > 0 && containersListFromAHS.size() != containerIdsToBeKeptFromAHS.size()) {\r\n            Iterator<ContainerReport> containersFromHS = containersListFromAHS.iterator();\r\n            while (containersFromHS.hasNext()) {\r\n                ContainerReport containerReport = containersFromHS.next();\r\n                if (containerIdsToBeKeptFromAHS.contains(containerReport.getContainerId())) {\r\n                    containersForAttempt.add(containerReport);\r\n                }\r\n            }\r\n        } else if (containersListFromAHS.size() == containerIdsToBeKeptFromAHS.size()) {\r\n            containersForAttempt.addAll(containersListFromAHS);\r\n        }\r\n    }\r\n    return containersForAttempt;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getContainerReportFromHistory",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<ContainerReport> getContainerReportFromHistory(ApplicationAttemptId applicationAttemptId) throws IOException, YarnException\n{\r\n    List<ContainerReport> containersListFromAHS = null;\r\n    if (timelineV2ServiceEnabled) {\r\n        try {\r\n            containersListFromAHS = ahsV2Client.getContainers(applicationAttemptId);\r\n        } catch (Exception e) {\r\n            LOG.warn(\"Got an error while fetching container report from ATSv2\", e);\r\n            if (historyServiceEnabled) {\r\n                containersListFromAHS = historyClient.getContainers(applicationAttemptId);\r\n            } else {\r\n                throw e;\r\n            }\r\n        }\r\n    } else if (historyServiceEnabled) {\r\n        containersListFromAHS = historyClient.getContainers(applicationAttemptId);\r\n    }\r\n    return containersListFromAHS;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "moveApplicationAcrossQueues",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void moveApplicationAcrossQueues(ApplicationId appId, String queue) throws YarnException, IOException\n{\r\n    MoveApplicationAcrossQueuesRequest request = MoveApplicationAcrossQueuesRequest.newInstance(appId, queue);\r\n    rmClient.moveApplicationAcrossQueues(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createReservation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNewReservationResponse createReservation() throws YarnException, IOException\n{\r\n    GetNewReservationRequest request = Records.newRecord(GetNewReservationRequest.class);\r\n    return rmClient.getNewReservation(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "submitReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationSubmissionResponse submitReservation(ReservationSubmissionRequest request) throws YarnException, IOException\n{\r\n    return rmClient.submitReservation(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "updateReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationUpdateResponse updateReservation(ReservationUpdateRequest request) throws YarnException, IOException\n{\r\n    return rmClient.updateReservation(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "deleteReservation",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationDeleteResponse deleteReservation(ReservationDeleteRequest request) throws YarnException, IOException\n{\r\n    return rmClient.deleteReservation(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "listReservations",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ReservationListResponse listReservations(ReservationListRequest request) throws YarnException, IOException\n{\r\n    return rmClient.listReservations(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<NodeId, Set<String>> getNodeToLabels() throws YarnException, IOException\n{\r\n    return rmClient.getNodeToLabels(GetNodesToLabelsRequest.newInstance()).getNodeToLabels();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Set<NodeId>> getLabelsToNodes() throws YarnException, IOException\n{\r\n    return rmClient.getLabelsToNodes(GetLabelsToNodesRequest.newInstance()).getLabelsToNodes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Set<NodeId>> getLabelsToNodes(Set<String> labels) throws YarnException, IOException\n{\r\n    return rmClient.getLabelsToNodes(GetLabelsToNodesRequest.newInstance(labels)).getLabelsToNodes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<NodeLabel> getClusterNodeLabels() throws YarnException, IOException\n{\r\n    return rmClient.getClusterNodeLabels(GetClusterNodeLabelsRequest.newInstance()).getNodeLabelList();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "updateApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Priority updateApplicationPriority(ApplicationId applicationId, Priority priority) throws YarnException, IOException\n{\r\n    UpdateApplicationPriorityRequest request = UpdateApplicationPriorityRequest.newInstance(applicationId, priority);\r\n    return rmClient.updateApplicationPriority(request).getApplicationPriority();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "signalToContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void signalToContainer(ContainerId containerId, SignalContainerCommand command) throws YarnException, IOException\n{\r\n    LOG.info(\"Signalling container \" + containerId + \" with command \" + command);\r\n    SignalContainerRequest request = SignalContainerRequest.newInstance(containerId, command);\r\n    rmClient.signalToContainer(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "updateApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpdateApplicationTimeoutsResponse updateApplicationTimeouts(UpdateApplicationTimeoutsRequest request) throws YarnException, IOException\n{\r\n    return rmClient.updateApplicationTimeouts(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getResourceProfiles",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, Resource> getResourceProfiles() throws YarnException, IOException\n{\r\n    GetAllResourceProfilesRequest request = GetAllResourceProfilesRequest.newInstance();\r\n    return rmClient.getResourceProfiles(request).getResourceProfiles();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getResourceProfile",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Resource getResourceProfile(String profile) throws YarnException, IOException\n{\r\n    GetResourceProfileRequest request = GetResourceProfileRequest.newInstance(profile);\r\n    return rmClient.getResourceProfile(request).getResource();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getResourceTypeInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<ResourceTypeInfo> getResourceTypeInfo() throws YarnException, IOException\n{\r\n    GetAllResourceTypeInfoRequest request = GetAllResourceTypeInfoRequest.newInstance();\r\n    return rmClient.getResourceTypeInfo(request).getResourceTypeInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getClusterAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Set<NodeAttributeInfo> getClusterAttributes() throws YarnException, IOException\n{\r\n    GetClusterNodeAttributesRequest request = GetClusterNodeAttributesRequest.newInstance();\r\n    return rmClient.getClusterNodeAttributes(request).getNodeAttributes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getAttributesToNodes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<NodeAttributeKey, List<NodeToAttributeValue>> getAttributesToNodes(Set<NodeAttributeKey> attributes) throws YarnException, IOException\n{\r\n    GetAttributesToNodesRequest request = GetAttributesToNodesRequest.newInstance(attributes);\r\n    return rmClient.getAttributesToNodes(request).getAttributesToNodes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getNodeToAttributes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<String, Set<NodeAttribute>> getNodeToAttributes(Set<String> hostNames) throws YarnException, IOException\n{\r\n    GetNodesToAttributesRequest request = GetNodesToAttributesRequest.newInstance(hostNames);\r\n    return rmClient.getNodesToAttributes(request).getNodeToAttributes();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "shellToContainer",
  "errType" : [ "WebSocketException", "Throwable" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void shellToContainer(ContainerId containerId, ShellContainerCommand command) throws IOException\n{\r\n    try {\r\n        GetContainerReportRequest request = Records.newRecord(GetContainerReportRequest.class);\r\n        request.setContainerId(containerId);\r\n        GetContainerReportResponse response = rmClient.getContainerReport(request);\r\n        URI nodeHttpAddress = new URI(response.getContainerReport().getNodeHttpAddress());\r\n        String host = nodeHttpAddress.getHost();\r\n        int port = nodeHttpAddress.getPort();\r\n        String scheme = nodeHttpAddress.getScheme();\r\n        String protocol = \"ws://\";\r\n        if (scheme.equals(\"https\")) {\r\n            protocol = \"wss://\";\r\n        }\r\n        WebSocketClient client = new WebSocketClient();\r\n        URI uri = URI.create(protocol + host + \":\" + port + \"/container/\" + containerId + \"/\" + command);\r\n        if (!UserGroupInformation.isSecurityEnabled()) {\r\n            uri = URI.create(protocol + host + \":\" + port + \"/container/\" + containerId + \"/\" + command + \"?user.name=\" + System.getProperty(\"user.name\"));\r\n        }\r\n        try {\r\n            client.start();\r\n            ContainerShellWebSocket socket = new ContainerShellWebSocket();\r\n            ClientUpgradeRequest upgradeRequest = new ClientUpgradeRequest();\r\n            if (UserGroupInformation.isSecurityEnabled()) {\r\n                String challenge = YarnClientUtils.generateToken(host);\r\n                upgradeRequest.setHeader(\"Authorization\", \"Negotiate \" + challenge);\r\n            }\r\n            Future<Session> fut = client.connect(socket, uri, upgradeRequest);\r\n            Session session = fut.get();\r\n            if (session.isOpen()) {\r\n                socket.run();\r\n            }\r\n        } finally {\r\n            client.stop();\r\n        }\r\n    } catch (WebSocketException e) {\r\n        LOG.debug(\"Websocket exception: \" + e.getMessage());\r\n    } catch (Throwable t) {\r\n        LOG.error(\"Fail to shell to container: \" + t.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getNewApplicationResponse",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GetNewApplicationResponse getNewApplicationResponse()\n{\r\n    return newAppResponse;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplicationSubmissionContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationSubmissionContext getApplicationSubmissionContext()\n{\r\n    return appSubmissionContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    ClusterCLI cli = new ClusterCLI();\r\n    cli.setSysOutPrintStream(System.out);\r\n    cli.setSysErrPrintStream(System.err);\r\n    int res = ToolRunner.run(cli, args);\r\n    cli.stop();\r\n    System.exit(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "run",
  "errType" : [ "MissingArgumentException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "int run(String[] args) throws Exception\n{\r\n    Options opts = new Options();\r\n    opts.addOption(\"lnl\", LIST_LABELS_CMD, false, \"List cluster node-label collection\");\r\n    opts.addOption(\"lna\", LIST_CLUSTER_ATTRIBUTES, false, \"List cluster node-attribute collection\");\r\n    opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\r\n    opts.addOption(\"dnl\", DIRECTLY_ACCESS_NODE_LABEL_STORE, false, \"This is DEPRECATED, will be removed in future releases. Directly access node label store, \" + \"with this option, all node label related operations\" + \" will NOT connect RM. Instead, they will\" + \" access/modify stored node labels directly.\" + \" By default, it is false (access via RM).\" + \" AND PLEASE NOTE: if you configured \" + YarnConfiguration.FS_NODE_LABELS_STORE_ROOT_DIR + \" to a local directory\" + \" (instead of NFS or HDFS), this option will only work\" + \" when the command run on the machine where RM is running.\" + \" Also, this option is UNSTABLE, could be removed in future\" + \" releases.\");\r\n    int exitCode = -1;\r\n    CommandLine parsedCli = null;\r\n    try {\r\n        parsedCli = new GnuParser().parse(opts, args);\r\n    } catch (MissingArgumentException ex) {\r\n        sysout.println(\"Missing argument for options\");\r\n        printUsage(opts);\r\n        return exitCode;\r\n    }\r\n    createAndStartYarnClient();\r\n    if (parsedCli.hasOption(DIRECTLY_ACCESS_NODE_LABEL_STORE)) {\r\n        accessLocal = true;\r\n    }\r\n    if (parsedCli.hasOption(LIST_LABELS_CMD)) {\r\n        printClusterNodeLabels();\r\n    } else if (parsedCli.hasOption(LIST_CLUSTER_ATTRIBUTES)) {\r\n        printClusterNodeAttributes();\r\n    } else if (parsedCli.hasOption(HELP_CMD)) {\r\n        printUsage(opts);\r\n        return 0;\r\n    } else {\r\n        syserr.println(\"Invalid Command Usage : \");\r\n        printUsage(opts);\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printClusterNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void printClusterNodeAttributes() throws IOException, YarnException\n{\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\r\n    for (NodeAttributeInfo attribute : client.getClusterAttributes()) {\r\n        pw.println(attribute.toString());\r\n    }\r\n    pw.close();\r\n    sysout.println(baos.toString(\"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void printClusterNodeLabels() throws YarnException, IOException\n{\r\n    List<NodeLabel> nodeLabels = null;\r\n    if (accessLocal) {\r\n        nodeLabels = new ArrayList<>(getNodeLabelManagerInstance(getConf()).getClusterNodeLabels());\r\n    } else {\r\n        nodeLabels = new ArrayList<>(client.getClusterNodeLabels());\r\n    }\r\n    sysout.println(String.format(\"Node Labels: %s\", StringUtils.join(nodeLabels.iterator(), \",\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getNodeLabelManagerInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CommonNodeLabelsManager getNodeLabelManagerInstance(Configuration conf)\n{\r\n    if (localNodeLabelsManager == null) {\r\n        localNodeLabelsManager = new CommonNodeLabelsManager();\r\n        localNodeLabelsManager.init(conf);\r\n        localNodeLabelsManager.start();\r\n    }\r\n    return localNodeLabelsManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void printUsage(Options opts) throws UnsupportedEncodingException\n{\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\r\n    new HelpFormatter().printHelp(pw, HelpFormatter.DEFAULT_WIDTH, TITLE, null, opts, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, null);\r\n    pw.close();\r\n    sysout.println(baos.toString(\"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createYarnClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "YarnClient createYarnClient()\n{\r\n    return YarnClient.createYarnClient();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createAndStartYarnClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createAndStartYarnClient()\n{\r\n    client = createYarnClient();\r\n    client.init(getConf());\r\n    client.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setSysOutPrintStream",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSysOutPrintStream(PrintStream sysout)\n{\r\n    this.sysout = sysout;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setSysErrPrintStream",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setSysErrPrintStream(PrintStream syserr)\n{\r\n    this.syserr = syserr;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "YarnClient getClient()\n{\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setClient(YarnClient client)\n{\r\n    this.client = client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stop()\n{\r\n    if (this.client != null) {\r\n        this.client.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createAHSClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AHSClient createAHSClient()\n{\r\n    return new AHSClientImpl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createAHSv2Client",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AHSClient createAHSv2Client()\n{\r\n    return new AHSv2ClientImpl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationReport getApplicationReport(ApplicationId appId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationReport> getApplications() throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationAttemptReport getApplicationAttemptReport(ApplicationAttemptId applicationAttemptId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationAttemptReport> getApplicationAttempts(ApplicationId applicationId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getContainerReport",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerReport getContainerReport(ContainerId containerId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ContainerReport> getContainers(ApplicationAttemptId applicationAttemptId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf)\n{\r\n    logServerUrl = conf.get(YarnConfiguration.YARN_LOG_SERVER_URL);\r\n    readerClient = TimelineReaderClient.createTimelineReaderClient();\r\n    readerClient.init(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "setReaderClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setReaderClient(TimelineReaderClient readerClient)\n{\r\n    this.readerClient = readerClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStart()\n{\r\n    readerClient.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void serviceStop()\n{\r\n    readerClient.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationReport getApplicationReport(ApplicationId appId) throws YarnException, IOException\n{\r\n    TimelineEntity entity = readerClient.getApplicationEntity(appId, \"ALL\", null);\r\n    return TimelineEntityV2Converter.convertToApplicationReport(entity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<ApplicationReport> getApplications() throws YarnException, IOException\n{\r\n    throw new UnsupportedOperationException(\"ATSv2.0 doesn't support retrieving\" + \" ALL application entities.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationAttemptReport getApplicationAttemptReport(ApplicationAttemptId applicationAttemptId) throws YarnException, IOException\n{\r\n    TimelineEntity entity = readerClient.getApplicationAttemptEntity(applicationAttemptId, \"ALL\", null);\r\n    return TimelineEntityV2Converter.convertToApplicationAttemptReport(entity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<ApplicationAttemptReport> getApplicationAttempts(ApplicationId applicationId) throws YarnException, IOException\n{\r\n    List<TimelineEntity> entities = readerClient.getApplicationAttemptEntities(applicationId, \"ALL\", null, 0, null);\r\n    List<ApplicationAttemptReport> appAttemptReports = new ArrayList<>();\r\n    if (entities != null && !entities.isEmpty()) {\r\n        for (TimelineEntity entity : entities) {\r\n            ApplicationAttemptReport container = TimelineEntityV2Converter.convertToApplicationAttemptReport(entity);\r\n            appAttemptReports.add(container);\r\n        }\r\n    }\r\n    return appAttemptReports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getContainerReport",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ContainerReport getContainerReport(ContainerId containerId) throws YarnException, IOException\n{\r\n    ApplicationReport appReport = getApplicationReport(containerId.getApplicationAttemptId().getApplicationId());\r\n    TimelineEntity entity = readerClient.getContainerEntity(containerId, \"ALL\", null);\r\n    return TimelineEntityV2Converter.convertToContainerReport(entity, logServerUrl, appReport.getUser());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<ContainerReport> getContainers(ApplicationAttemptId applicationAttemptId) throws YarnException, IOException\n{\r\n    ApplicationId appId = applicationAttemptId.getApplicationId();\r\n    ApplicationReport appReport = getApplicationReport(appId);\r\n    Map<String, String> filters = new HashMap<>();\r\n    filters.put(\"infofilters\", \"SYSTEM_INFO_PARENT_ENTITY eq {\\\"id\\\":\\\"\" + applicationAttemptId.toString() + \"\\\",\\\"type\\\":\\\"YARN_APPLICATION_ATTEMPT\\\"}\");\r\n    List<TimelineEntity> entities = readerClient.getContainerEntities(appId, \"ALL\", filters, 0, null);\r\n    List<ContainerReport> containers = new ArrayList<>();\r\n    if (entities != null && !entities.isEmpty()) {\r\n        for (TimelineEntity entity : entities) {\r\n            ContainerReport container = TimelineEntityV2Converter.convertToContainerReport(entity, logServerUrl, appReport.getUser());\r\n            containers.add(container);\r\n        }\r\n    }\r\n    return containers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    SchedConfCLI cli = new SchedConfCLI();\r\n    int exitCode = cli.run(args);\r\n    System.exit(exitCode);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "run",
  "errType" : [ "MissingArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 29,
  "sourceCodeText" : "int run(String[] args) throws Exception\n{\r\n    Options opts = new Options();\r\n    opts.addOption(\"add\", ADD_QUEUES_OPTION, true, \"Add queues with configurations\");\r\n    opts.addOption(\"remove\", REMOVE_QUEUES_OPTION, true, \"Remove queues\");\r\n    opts.addOption(\"update\", UPDATE_QUEUES_OPTION, true, \"Update queue configurations\");\r\n    opts.addOption(\"global\", GLOBAL_OPTIONS, true, \"Update global scheduler configurations\");\r\n    opts.addOption(\"getconf\", GET_SCHEDULER_CONF, false, \"Get current scheduler configurations\");\r\n    opts.addOption(\"format\", FORMAT_CONF, false, \"Format Scheduler Configuration and reload from\" + \" capacity-scheduler.xml\");\r\n    opts.addOption(\"h\", HELP_CMD, false, \"Displays help for all commands.\");\r\n    int exitCode = -1;\r\n    CommandLine parsedCli = null;\r\n    try {\r\n        parsedCli = new GnuParser().parse(opts, args);\r\n    } catch (MissingArgumentException ex) {\r\n        System.err.println(\"Missing argument for options\");\r\n        printUsage();\r\n        return exitCode;\r\n    }\r\n    if (parsedCli.hasOption(HELP_CMD)) {\r\n        printUsage();\r\n        return 0;\r\n    }\r\n    boolean hasOption = false;\r\n    boolean format = false;\r\n    boolean getConf = false;\r\n    SchedConfUpdateInfo updateInfo = new SchedConfUpdateInfo();\r\n    try {\r\n        if (parsedCli.hasOption(ADD_QUEUES_OPTION)) {\r\n            hasOption = true;\r\n            addQueues(parsedCli.getOptionValue(ADD_QUEUES_OPTION), updateInfo);\r\n        }\r\n        if (parsedCli.hasOption(REMOVE_QUEUES_OPTION)) {\r\n            hasOption = true;\r\n            removeQueues(parsedCli.getOptionValue(REMOVE_QUEUES_OPTION), updateInfo);\r\n        }\r\n        if (parsedCli.hasOption(UPDATE_QUEUES_OPTION)) {\r\n            hasOption = true;\r\n            updateQueues(parsedCli.getOptionValue(UPDATE_QUEUES_OPTION), updateInfo);\r\n        }\r\n        if (parsedCli.hasOption(GLOBAL_OPTIONS)) {\r\n            hasOption = true;\r\n            globalUpdates(parsedCli.getOptionValue(GLOBAL_OPTIONS), updateInfo);\r\n        }\r\n        if (parsedCli.hasOption((FORMAT_CONF))) {\r\n            hasOption = true;\r\n            format = true;\r\n        }\r\n        if (parsedCli.hasOption(GET_SCHEDULER_CONF)) {\r\n            hasOption = true;\r\n            getConf = true;\r\n        }\r\n    } catch (IllegalArgumentException e) {\r\n        System.err.println(e.getMessage());\r\n        return -1;\r\n    }\r\n    if (!hasOption) {\r\n        System.err.println(\"Invalid Command Usage: \");\r\n        printUsage();\r\n        return -1;\r\n    }\r\n    Configuration conf = getConf();\r\n    if (format) {\r\n        return WebAppUtils.execOnActiveRM(conf, this::formatSchedulerConf, null);\r\n    } else if (getConf) {\r\n        return WebAppUtils.execOnActiveRM(conf, this::getSchedulerConf, null);\r\n    } else {\r\n        return WebAppUtils.execOnActiveRM(conf, this::updateSchedulerConfOnRMNode, updateInfo);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "prettyFormatWithIndent",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void prettyFormatWithIndent(String input, int indent) throws Exception\n{\r\n    Source xmlInput = new StreamSource(new StringReader(input));\r\n    StringWriter sw = new StringWriter();\r\n    StreamResult xmlOutput = new StreamResult(sw);\r\n    TransformerFactory transformerFactory = TransformerFactory.newInstance();\r\n    transformerFactory.setAttribute(\"indent-number\", indent);\r\n    Transformer transformer = transformerFactory.newTransformer();\r\n    transformer.setOutputProperty(OutputKeys.INDENT, \"yes\");\r\n    transformer.transform(xmlInput, xmlOutput);\r\n    System.out.println(xmlOutput.getWriter().toString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "initializeWebResource",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "WebResource initializeWebResource(String webAppAddress)\n{\r\n    Configuration conf = getConf();\r\n    if (YarnConfiguration.useHttps(conf)) {\r\n        sslFactory = new SSLFactory(SSLFactory.Mode.CLIENT, conf);\r\n    }\r\n    client = createWebServiceClient(sslFactory);\r\n    return client.resource(webAppAddress);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "destroyClient",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void destroyClient()\n{\r\n    if (client != null) {\r\n        client.destroy();\r\n    }\r\n    if (sslFactory != null) {\r\n        sslFactory.destroy();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getSchedulerConf",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "int getSchedulerConf(String webAppAddress, WebResource resource) throws Exception\n{\r\n    ClientResponse response = null;\r\n    resource = (resource != null) ? resource : initializeWebResource(webAppAddress);\r\n    try {\r\n        Builder builder;\r\n        if (UserGroupInformation.isSecurityEnabled()) {\r\n            builder = resource.path(\"ws\").path(\"v1\").path(\"cluster\").path(\"scheduler-conf\").accept(MediaType.APPLICATION_XML);\r\n        } else {\r\n            builder = resource.path(\"ws\").path(\"v1\").path(\"cluster\").path(\"scheduler-conf\").queryParam(\"user.name\", UserGroupInformation.getCurrentUser().getShortUserName()).accept(MediaType.APPLICATION_XML);\r\n        }\r\n        response = builder.get(ClientResponse.class);\r\n        if (response != null) {\r\n            if (response.getStatus() == Status.OK.getStatusCode()) {\r\n                ConfInfo schedulerConf = response.getEntity(ConfInfo.class);\r\n                JAXBContext jaxbContext = JAXBContext.newInstance(ConfInfo.class);\r\n                Marshaller jaxbMarshaller = jaxbContext.createMarshaller();\r\n                StringWriter sw = new StringWriter();\r\n                jaxbMarshaller.marshal(schedulerConf, sw);\r\n                prettyFormatWithIndent(sw.toString(), 2);\r\n                return 0;\r\n            } else {\r\n                System.err.println(\"Failed to get scheduler configuration: \" + response.getEntity(String.class));\r\n            }\r\n        } else {\r\n            System.err.println(\"Failed to get scheduler configuration: \" + \"null response\");\r\n        }\r\n        return -1;\r\n    } finally {\r\n        if (response != null) {\r\n            response.close();\r\n        }\r\n        destroyClient();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "formatSchedulerConf",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "int formatSchedulerConf(String webAppAddress, WebResource resource) throws Exception\n{\r\n    ClientResponse response = null;\r\n    resource = (resource != null) ? resource : initializeWebResource(webAppAddress);\r\n    try {\r\n        Builder builder;\r\n        if (UserGroupInformation.isSecurityEnabled()) {\r\n            builder = resource.path(\"ws\").path(\"v1\").path(\"cluster\").path(\"/scheduler-conf/format\").accept(MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON);\r\n        } else {\r\n            builder = resource.path(\"ws\").path(\"v1\").path(\"cluster\").path(\"/scheduler-conf/format\").queryParam(\"user.name\", UserGroupInformation.getCurrentUser().getShortUserName()).accept(MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON);\r\n        }\r\n        response = builder.get(ClientResponse.class);\r\n        if (response != null) {\r\n            if (response.getStatus() == Status.OK.getStatusCode()) {\r\n                System.out.println(response.getEntity(String.class));\r\n                return 0;\r\n            } else {\r\n                System.err.println(\"Failed to format scheduler configuration: \" + response.getEntity(String.class));\r\n            }\r\n        } else {\r\n            System.err.println(\"Failed to format scheduler configuration: \" + \"null response\");\r\n        }\r\n        return -1;\r\n    } finally {\r\n        if (response != null) {\r\n            response.close();\r\n        }\r\n        destroyClient();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "updateSchedulerConfOnRMNode",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "int updateSchedulerConfOnRMNode(String webAppAddress, SchedConfUpdateInfo updateInfo) throws Exception\n{\r\n    ClientResponse response = null;\r\n    WebResource resource = initializeWebResource(webAppAddress);\r\n    try {\r\n        Builder builder = null;\r\n        if (UserGroupInformation.isSecurityEnabled()) {\r\n            builder = resource.path(\"ws\").path(\"v1\").path(\"cluster\").path(\"scheduler-conf\").accept(MediaType.APPLICATION_JSON);\r\n        } else {\r\n            builder = resource.path(\"ws\").path(\"v1\").path(\"cluster\").queryParam(\"user.name\", UserGroupInformation.getCurrentUser().getShortUserName()).path(\"scheduler-conf\").accept(MediaType.APPLICATION_JSON);\r\n        }\r\n        builder.entity(YarnWebServiceUtils.toJson(updateInfo, SchedConfUpdateInfo.class), MediaType.APPLICATION_JSON);\r\n        response = builder.put(ClientResponse.class);\r\n        if (response != null) {\r\n            if (response.getStatus() == Status.OK.getStatusCode()) {\r\n                System.out.println(\"Configuration changed successfully.\");\r\n                return 0;\r\n            } else {\r\n                System.err.println(\"Configuration change unsuccessful: \" + response.getEntity(String.class));\r\n            }\r\n        } else {\r\n            System.err.println(\"Configuration change unsuccessful: null response\");\r\n        }\r\n        return -1;\r\n    } finally {\r\n        if (response != null) {\r\n            response.close();\r\n        }\r\n        destroyClient();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createWebServiceClient",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Client createWebServiceClient(SSLFactory clientSslFactory)\n{\r\n    Client webServiceClient = new Client(new URLConnectionClientHandler(new HttpURLConnectionFactory() {\r\n\r\n        @Override\r\n        public HttpURLConnection getHttpURLConnection(URL url) throws IOException {\r\n            AuthenticatedURL.Token token = new AuthenticatedURL.Token();\r\n            AuthenticatedURL aUrl;\r\n            HttpURLConnection conn = null;\r\n            try {\r\n                if (clientSslFactory != null) {\r\n                    clientSslFactory.init();\r\n                    aUrl = new AuthenticatedURL(null, clientSslFactory);\r\n                } else {\r\n                    aUrl = new AuthenticatedURL();\r\n                }\r\n                conn = aUrl.openConnection(url, token);\r\n            } catch (Exception e) {\r\n                throw new IOException(e);\r\n            }\r\n            return conn;\r\n        }\r\n    }));\r\n    webServiceClient.setChunkedEncodingSize(null);\r\n    return webServiceClient;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "addQueues",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addQueues(String args, SchedConfUpdateInfo updateInfo)\n{\r\n    if (args == null) {\r\n        return;\r\n    }\r\n    ArrayList<QueueConfigInfo> queueConfigInfos = new ArrayList<>();\r\n    for (String arg : args.split(\";\")) {\r\n        queueConfigInfos.add(getQueueConfigInfo(arg));\r\n    }\r\n    updateInfo.setAddQueueInfo(queueConfigInfos);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "removeQueues",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void removeQueues(String args, SchedConfUpdateInfo updateInfo)\n{\r\n    if (args == null) {\r\n        return;\r\n    }\r\n    List<String> queuesToRemove = Arrays.asList(args.split(\";\"));\r\n    updateInfo.setRemoveQueueInfo(new ArrayList<>(queuesToRemove));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "updateQueues",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void updateQueues(String args, SchedConfUpdateInfo updateInfo)\n{\r\n    if (args == null) {\r\n        return;\r\n    }\r\n    ArrayList<QueueConfigInfo> queueConfigInfos = new ArrayList<>();\r\n    for (String arg : args.split(\";\")) {\r\n        queueConfigInfos.add(getQueueConfigInfo(arg));\r\n    }\r\n    updateInfo.setUpdateQueueInfo(queueConfigInfos);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "globalUpdates",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void globalUpdates(String args, SchedConfUpdateInfo updateInfo)\n{\r\n    if (args == null) {\r\n        return;\r\n    }\r\n    HashMap<String, String> globalUpdates = new HashMap<>();\r\n    for (String globalUpdate : args.split(SPLIT_BY_SLASH_COMMA)) {\r\n        globalUpdate = globalUpdate.replace(\"\\\\\", \"\");\r\n        putKeyValuePair(globalUpdates, globalUpdate);\r\n    }\r\n    updateInfo.setGlobalParams(globalUpdates);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getQueueConfigInfo",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "QueueConfigInfo getQueueConfigInfo(String arg)\n{\r\n    String[] args = arg.split(\":\");\r\n    String queuePath = args[0];\r\n    Map<String, String> queueConfigs = new HashMap<>();\r\n    if (args.length > 1) {\r\n        String[] queueArgs = args[1].split(SPLIT_BY_SLASH_COMMA);\r\n        for (int i = 0; i < queueArgs.length; ++i) {\r\n            queueArgs[i] = queueArgs[i].replace(\"\\\\\", \"\");\r\n            putKeyValuePair(queueConfigs, queueArgs[i]);\r\n        }\r\n    }\r\n    return new QueueConfigInfo(queuePath, queueConfigs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "putKeyValuePair",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void putKeyValuePair(Map<String, String> kv, String args)\n{\r\n    String[] argParts = args.split(\"=\");\r\n    if (argParts.length == 1) {\r\n        if (argParts[0].isEmpty() || !args.contains(\"=\")) {\r\n            throw new IllegalArgumentException(CONF_ERR_MSG);\r\n        } else {\r\n            kv.put(argParts[0], null);\r\n        }\r\n    } else if (argParts.length > 2) {\r\n        throw new IllegalArgumentException(CONF_ERR_MSG);\r\n    } else {\r\n        if (argParts[0].isEmpty()) {\r\n            throw new IllegalArgumentException(CONF_ERR_MSG);\r\n        }\r\n        kv.put(argParts[0], argParts[1]);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void printUsage()\n{\r\n    System.out.println(\"yarn schedulerconf [-add \" + \"\\\"queueAddPath1:confKey1=confVal1,confKey2=confVal2;\" + \"queueAddPath2:confKey3=confVal3\\\"] \" + \"[-remove \\\"queueRemovePath1;queueRemovePath2\\\"] \" + \"[-update \\\"queueUpdatePath1:confKey1=confVal1\\\"] \" + \"[-global globalConfKey1=globalConfVal1,\" + \"globalConfKey2=globalConfVal2] \" + \"[-format] \" + \"[-getconf]\\n\" + \"Example (adding queues): yarn schedulerconf -add \" + \"\\\"root.a.a1:capacity=100,maximum-capacity=100;root.a.a2:capacity=0,\" + \"maximum-capacity=0\\\"\\n\" + \"Example (adding queues with comma in value): yarn schedulerconf \" + \"-add \\\"root.default:acl_administer_queue=user1\\\\,user2 group1\\\\,\" + \"group2,maximum-capacity=100;root.a.a2:capacity=0\\\"\\n\" + \"Example (removing queues): yarn schedulerconf -remove \\\"root.a.a1;\" + \"root.a.a2\\\"\\n\" + \"Example (updating queues): yarn schedulerconf -update \\\"root.a.a1\" + \":capacity=25,maximum-capacity=25;root.a.a2:capacity=75,\" + \"maximum-capacity=75\\\"\\n\" + \"Example (updating queues with comma in value): yarn schedulerconf \" + \"-update \\\"root.default:acl_administer_queue=user1\\\\,user2 group1\\\\,\" + \"group2,maximum-capacity=25;root.a.a2:capacity=75\\\"\\n\" + \"Example (global scheduler update): yarn schedulerconf \" + \"-global yarn.scheduler.capacity.maximum-applications=10000\\n\" + \"Example (global scheduler update with comma in value): yarn \" + \"schedulerconf \" + \"-global \\\"acl_administer_queue=user1\\\\,user2 group1\\\\,group2\\\"\\n\" + \"Example (format scheduler configuration): yarn schedulerconf \" + \"-format\\n\" + \"Example (get scheduler configuration): yarn schedulerconf \" + \"-getconf\\n\" + \"Note: This is an alpha feature, the syntax/options are subject to \" + \"change, please run at your own risk.\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getScmAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "InetSocketAddress getScmAddress(Configuration conf)\n{\r\n    return conf.getSocketAddr(YarnConfiguration.SCM_CLIENT_SERVER_ADDRESS, YarnConfiguration.DEFAULT_SCM_CLIENT_SERVER_ADDRESS, YarnConfiguration.DEFAULT_SCM_CLIENT_SERVER_PORT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    if (this.scmAddress == null) {\r\n        this.scmAddress = getScmAddress(conf);\r\n    }\r\n    this.conf = conf;\r\n    this.checksum = SharedCacheChecksumFactory.getChecksum(conf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    this.scmClient = createClientProxy();\r\n    LOG.debug(\"Connecting to Shared Cache Manager at {}\", this.scmAddress);\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    stopClientProxy();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createClientProxy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ClientSCMProtocol createClientProxy()\n{\r\n    YarnRPC rpc = YarnRPC.create(getConfig());\r\n    return (ClientSCMProtocol) rpc.getProxy(ClientSCMProtocol.class, this.scmAddress, getConfig());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "stopClientProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stopClientProxy()\n{\r\n    if (this.scmClient != null) {\r\n        RPC.stopProxy(this.scmClient);\r\n        this.scmClient = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "use",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "URL use(ApplicationId applicationId, String resourceKey) throws YarnException\n{\r\n    Path resourcePath = null;\r\n    UseSharedCacheResourceRequest request = Records.newRecord(UseSharedCacheResourceRequest.class);\r\n    request.setAppId(applicationId);\r\n    request.setResourceKey(resourceKey);\r\n    try {\r\n        UseSharedCacheResourceResponse response = this.scmClient.use(request);\r\n        if (response != null && response.getPath() != null) {\r\n            resourcePath = new Path(response.getPath());\r\n        }\r\n    } catch (Exception e) {\r\n        throw new YarnException(e);\r\n    }\r\n    if (resourcePath != null) {\r\n        URL pathURL = URL.fromPath(resourcePath);\r\n        return pathURL;\r\n    } else {\r\n        return null;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "release",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void release(ApplicationId applicationId, String resourceKey) throws YarnException\n{\r\n    ReleaseSharedCacheResourceRequest request = Records.newRecord(ReleaseSharedCacheResourceRequest.class);\r\n    request.setAppId(applicationId);\r\n    request.setResourceKey(resourceKey);\r\n    try {\r\n        this.scmClient.release(request);\r\n    } catch (Exception e) {\r\n        throw new YarnException(e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getFileChecksum",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getFileChecksum(Path sourceFile) throws IOException\n{\r\n    FileSystem fs = sourceFile.getFileSystem(this.conf);\r\n    FSDataInputStream in = null;\r\n    try {\r\n        in = fs.open(sourceFile);\r\n        return this.checksum.computeChecksum(in);\r\n    } finally {\r\n        if (in != null) {\r\n            in.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    NodeCLI cli = new NodeCLI();\r\n    cli.setSysOutPrintStream(System.out);\r\n    cli.setSysErrPrintStream(System.err);\r\n    int res = ToolRunner.run(cli, args);\r\n    cli.stop();\r\n    System.exit(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "run",
  "errType" : [ "MissingArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 37,
  "sourceCodeText" : "int run(String[] args) throws Exception\n{\r\n    Options opts = new Options();\r\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\r\n    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\r\n    opts.addOption(LIST_CMD, false, \"List all running nodes. \" + \"Supports optional use of -states to filter nodes \" + \"based on node state, all -all to list all nodes, \" + \"-showDetails to display more details about each node.\");\r\n    Option nodeStateOpt = new Option(NODE_STATE_CMD, true, \"Works with -list to filter nodes based on input comma-separated \" + \"list of node states. \" + getAllValidNodeStates());\r\n    nodeStateOpt.setValueSeparator(',');\r\n    nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\r\n    nodeStateOpt.setArgName(\"States\");\r\n    opts.addOption(nodeStateOpt);\r\n    Option allOpt = new Option(NODE_ALL, false, \"Works with -list to list all nodes.\");\r\n    opts.addOption(allOpt);\r\n    Option showDetailsOpt = new Option(NODE_SHOW_DETAILS, false, \"Works with -list to show more details about each node.\");\r\n    opts.addOption(showDetailsOpt);\r\n    opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\r\n    if (args != null && args.length > 0) {\r\n        for (int i = args.length - 1; i >= 0; i--) {\r\n            if (args[i].equalsIgnoreCase(\"-\" + NODE_ALL)) {\r\n                args[i] = \"-\" + NODE_ALL;\r\n            }\r\n        }\r\n    }\r\n    int exitCode = -1;\r\n    CommandLine cliParser = null;\r\n    try {\r\n        cliParser = new GnuParser().parse(opts, args);\r\n    } catch (MissingArgumentException ex) {\r\n        sysout.println(\"Missing argument for options\");\r\n        printUsage(opts);\r\n        return exitCode;\r\n    }\r\n    createAndStartYarnClient();\r\n    if (cliParser.hasOption(\"status\")) {\r\n        if (args.length != 2) {\r\n            printUsage(opts);\r\n            return exitCode;\r\n        }\r\n        printNodeStatus(cliParser.getOptionValue(\"status\"));\r\n    } else if (cliParser.hasOption(\"list\")) {\r\n        Set<NodeState> nodeStates = new HashSet<NodeState>();\r\n        if (cliParser.hasOption(NODE_ALL)) {\r\n            for (NodeState state : NodeState.values()) {\r\n                nodeStates.add(state);\r\n            }\r\n        } else if (cliParser.hasOption(NODE_STATE_CMD)) {\r\n            String[] types = cliParser.getOptionValues(NODE_STATE_CMD);\r\n            if (types != null) {\r\n                for (String type : types) {\r\n                    if (!type.trim().isEmpty()) {\r\n                        try {\r\n                            nodeStates.add(NodeState.valueOf(org.apache.hadoop.util.StringUtils.toUpperCase(type.trim())));\r\n                        } catch (IllegalArgumentException ex) {\r\n                            sysout.println(\"The node state \" + type + \" is invalid.\");\r\n                            sysout.println(getAllValidNodeStates());\r\n                            return exitCode;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            nodeStates.add(NodeState.RUNNING);\r\n        }\r\n        if (cliParser.hasOption(NODE_SHOW_DETAILS)) {\r\n            listDetailedClusterNodes(nodeStates);\r\n        } else {\r\n            listClusterNodes(nodeStates);\r\n        }\r\n    } else if (cliParser.hasOption(HELP_CMD)) {\r\n        printUsage(opts);\r\n        return 0;\r\n    } else {\r\n        syserr.println(\"Invalid Command Usage : \");\r\n        printUsage(opts);\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void printUsage(Options opts)\n{\r\n    new HelpFormatter().printHelp(\"node\", opts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "listClusterNodes",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void listClusterNodes(Set<NodeState> nodeStates) throws YarnException, IOException\n{\r\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(sysout, Charset.forName(\"UTF-8\")));\r\n    List<NodeReport> nodesReport = client.getNodeReports(nodeStates.toArray(new NodeState[0]));\r\n    writer.println(\"Total Nodes:\" + nodesReport.size());\r\n    writer.printf(NODES_PATTERN, \"Node-Id\", \"Node-State\", \"Node-Http-Address\", \"Number-of-Running-Containers\");\r\n    for (NodeReport nodeReport : nodesReport) {\r\n        writer.printf(NODES_PATTERN, nodeReport.getNodeId(), nodeReport.getNodeState(), nodeReport.getHttpAddress(), nodeReport.getNumContainers());\r\n    }\r\n    writer.flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "listDetailedClusterNodes",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void listDetailedClusterNodes(Set<NodeState> nodeStates) throws YarnException, IOException\n{\r\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(sysout, Charset.forName(\"UTF-8\")));\r\n    List<NodeReport> nodesReport = client.getNodeReports(nodeStates.toArray(new NodeState[0]));\r\n    writer.println(\"Total Nodes:\" + nodesReport.size());\r\n    writer.printf(NODES_PATTERN, \"Node-Id\", \"Node-State\", \"Node-Http-Address\", \"Number-of-Running-Containers\");\r\n    for (NodeReport nodeReport : nodesReport) {\r\n        writer.printf(NODES_PATTERN, nodeReport.getNodeId(), nodeReport.getNodeState(), nodeReport.getHttpAddress(), nodeReport.getNumContainers());\r\n        writer.println(\"Detailed Node Information :\");\r\n        writer.print(\"\\tConfigured Resources : \");\r\n        writer.println(nodeReport.getCapability());\r\n        writer.print(\"\\tAllocated Resources : \");\r\n        if (nodeReport.getUsed() != null) {\r\n            writer.print(nodeReport.getUsed());\r\n        }\r\n        writer.println();\r\n        writer.print(\"\\tResource Utilization by Node : \");\r\n        if (nodeReport.getNodeUtilization() != null) {\r\n            writer.print(\"PMem:\" + nodeReport.getNodeUtilization().getPhysicalMemory() + \" MB, VMem:\" + nodeReport.getNodeUtilization().getVirtualMemory() + \" MB, VCores:\" + nodeReport.getNodeUtilization().getCPU());\r\n        }\r\n        writer.println();\r\n        writer.print(\"\\tResource Utilization by Containers : \");\r\n        if (nodeReport.getAggregatedContainersUtilization() != null) {\r\n            writer.print(\"PMem:\" + nodeReport.getAggregatedContainersUtilization().getPhysicalMemory() + \" MB, VMem:\" + nodeReport.getAggregatedContainersUtilization().getVirtualMemory() + \" MB, VCores:\" + nodeReport.getAggregatedContainersUtilization().getCPU());\r\n        }\r\n        writer.println();\r\n        writer.print(\"\\tNode-Labels : \");\r\n        List<String> nodeLabelsList = new ArrayList<String>(nodeReport.getNodeLabels());\r\n        Collections.sort(nodeLabelsList);\r\n        writer.println(StringUtils.join(nodeLabelsList.iterator(), ','));\r\n    }\r\n    writer.flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 49,
  "sourceCodeText" : "void printNodeStatus(String nodeIdStr) throws YarnException, IOException\n{\r\n    NodeId nodeId = NodeId.fromString(nodeIdStr);\r\n    List<NodeReport> nodesReport = client.getNodeReports();\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter nodeReportStr = new PrintWriter(new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\r\n    NodeReport nodeReport = null;\r\n    for (NodeReport report : nodesReport) {\r\n        if (!report.getNodeId().equals(nodeId)) {\r\n            continue;\r\n        }\r\n        nodeReport = report;\r\n        nodeReportStr.println(\"Node Report : \");\r\n        nodeReportStr.print(\"\\tNode-Id : \");\r\n        nodeReportStr.println(nodeReport.getNodeId());\r\n        nodeReportStr.print(\"\\tRack : \");\r\n        nodeReportStr.println(nodeReport.getRackName());\r\n        nodeReportStr.print(\"\\tNode-State : \");\r\n        nodeReportStr.println(nodeReport.getNodeState());\r\n        nodeReportStr.print(\"\\tNode-Http-Address : \");\r\n        nodeReportStr.println(nodeReport.getHttpAddress());\r\n        nodeReportStr.print(\"\\tLast-Health-Update : \");\r\n        nodeReportStr.println(DateFormatUtils.format(new Date(nodeReport.getLastHealthReportTime()), \"E dd/MMM/yy hh:mm:ss:SSzz\"));\r\n        nodeReportStr.print(\"\\tHealth-Report : \");\r\n        nodeReportStr.println(nodeReport.getHealthReport());\r\n        nodeReportStr.print(\"\\tContainers : \");\r\n        nodeReportStr.println(nodeReport.getNumContainers());\r\n        nodeReportStr.print(\"\\tMemory-Used : \");\r\n        nodeReportStr.println((nodeReport.getUsed() == null) ? \"0MB\" : (nodeReport.getUsed().getMemorySize() + \"MB\"));\r\n        nodeReportStr.print(\"\\tMemory-Capacity : \");\r\n        nodeReportStr.println(nodeReport.getCapability().getMemorySize() + \"MB\");\r\n        nodeReportStr.print(\"\\tCPU-Used : \");\r\n        nodeReportStr.println((nodeReport.getUsed() == null) ? \"0 vcores\" : (nodeReport.getUsed().getVirtualCores() + \" vcores\"));\r\n        nodeReportStr.print(\"\\tCPU-Capacity : \");\r\n        nodeReportStr.println(nodeReport.getCapability().getVirtualCores() + \" vcores\");\r\n        nodeReportStr.print(\"\\tNode-Labels : \");\r\n        List<String> nodeLabelsList = new ArrayList<String>(report.getNodeLabels());\r\n        Collections.sort(nodeLabelsList);\r\n        nodeReportStr.println(StringUtils.join(nodeLabelsList.iterator(), ','));\r\n        if (nodeReport.getNodeAttributes().size() > 0) {\r\n            ArrayList nodeAtrs = new ArrayList<>(nodeReport.getNodeAttributes());\r\n            nodeReportStr.print(\"\\tNode Attributes : \");\r\n            nodeReportStr.println(nodeAtrs.get(0).toString());\r\n            for (int index = 1; index < nodeAtrs.size(); index++) {\r\n                nodeReportStr.println(String.format(\"\\t%18s%s\", \"\", nodeAtrs.get(index).toString()));\r\n            }\r\n        } else {\r\n            nodeReportStr.println(\"\\tNode Attributes : \");\r\n        }\r\n        nodeReportStr.print(\"\\tResource Utilization by Node : \");\r\n        if (nodeReport.getNodeUtilization() != null) {\r\n            nodeReportStr.print(\"PMem:\" + nodeReport.getNodeUtilization().getPhysicalMemory() + \" MB, VMem:\" + nodeReport.getNodeUtilization().getVirtualMemory() + \" MB, VCores:\" + nodeReport.getNodeUtilization().getCPU());\r\n        }\r\n        nodeReportStr.println();\r\n        nodeReportStr.print(\"\\tResource Utilization by Containers : \");\r\n        if (nodeReport.getAggregatedContainersUtilization() != null) {\r\n            nodeReportStr.print(\"PMem:\" + nodeReport.getAggregatedContainersUtilization().getPhysicalMemory() + \" MB, VMem:\" + nodeReport.getAggregatedContainersUtilization().getVirtualMemory() + \" MB, VCores:\" + nodeReport.getAggregatedContainersUtilization().getCPU());\r\n        }\r\n        nodeReportStr.println();\r\n    }\r\n    if (nodeReport == null) {\r\n        nodeReportStr.print(\"Could not find the node report for node id : \" + nodeIdStr);\r\n    }\r\n    nodeReportStr.close();\r\n    sysout.println(baos.toString(\"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getAllValidNodeStates",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String getAllValidNodeStates()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"The valid node state can be one of the following: \");\r\n    for (NodeState state : NodeState.values()) {\r\n        sb.append(state).append(\",\");\r\n    }\r\n    String output = sb.toString();\r\n    return output.substring(0, output.length() - 1) + \".\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "onText",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void onText(Session session, String message) throws IOException\n{\r\n    if (!sttySet) {\r\n        session.getRemote().sendString(\"stty -echo\");\r\n        session.getRemote().sendString(\"\\r\");\r\n        session.getRemote().flush();\r\n        sttySet = true;\r\n    }\r\n    terminal.output().write(message.getBytes(Charset.forName(\"UTF-8\")));\r\n    terminal.output().flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "onConnect",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void onConnect(Session s)\n{\r\n    initTerminal(s);\r\n    LOG.info(s.getRemoteAddress().getHostString() + \" connected!\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "onClose",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void onClose(Session session, int status, String reason)\n{\r\n    if (status == 1000) {\r\n        LOG.info(session.getRemoteAddress().getHostString() + \" closed, status: \" + status);\r\n    } else {\r\n        LOG.warn(session.getRemoteAddress().getHostString() + \" closed, status: \" + status + \" Reason: \" + reason);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "run",
  "errType" : [ "IOException|InterruptedException", "IOException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void run()\n{\r\n    try {\r\n        Reader consoleReader = new Reader();\r\n        Thread inputThread = new Thread(consoleReader, \"consoleReader\");\r\n        inputThread.start();\r\n        while (mySession.isOpen()) {\r\n            mySession.getRemote().flush();\r\n            if (consoleReader.hasData()) {\r\n                String message = consoleReader.read();\r\n                mySession.getRemote().sendString(message);\r\n                mySession.getRemote().sendString(\"\\r\");\r\n            }\r\n            String message = \"1{}\";\r\n            mySession.getRemote().sendString(message);\r\n            Thread.sleep(100);\r\n            mySession.getRemote().flush();\r\n        }\r\n        inputThread.join();\r\n    } catch (IOException | InterruptedException e) {\r\n        try {\r\n            mySession.disconnect();\r\n        } catch (IOException e1) {\r\n            LOG.error(\"Error closing connection: \", e1);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "initTerminal",
  "errType" : [ "IOException", "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initTerminal(final Session session)\n{\r\n    try {\r\n        this.mySession = session;\r\n        try {\r\n            terminal = TerminalBuilder.builder().system(true).build();\r\n        } catch (IOException t) {\r\n            terminal = TerminalBuilder.builder().system(false).streams(System.in, (OutputStream) System.out).build();\r\n        }\r\n        reader = LineReaderBuilder.builder().terminal(terminal).build();\r\n    } catch (IOException e) {\r\n        session.close(1002, e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    super.serviceInit(conf);\r\n    client.init(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "serviceStart",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    handlerThread.setDaemon(true);\r\n    handlerThread.start();\r\n    client.start();\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    keepRunning = false;\r\n    heartbeatThread.interrupt();\r\n    try {\r\n        heartbeatThread.join();\r\n    } catch (InterruptedException ex) {\r\n        LOG.error(\"Error joining with heartbeat thread\", ex);\r\n    }\r\n    client.stop();\r\n    handlerThread.interrupt();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<? extends Collection<T>> getMatchingRequests(Priority priority, String resourceName, Resource capability)\n{\r\n    return client.getMatchingRequests(priority, resourceName, capability);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "addSchedulingRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addSchedulingRequests(Collection<SchedulingRequest> schedulingRequests)\n{\r\n    client.addSchedulingRequests(schedulingRequests);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(String appHostName, int appHostPort, String appTrackingUrl) throws YarnException, IOException\n{\r\n    return registerApplicationMaster(appHostName, appHostPort, appTrackingUrl, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(String appHostName, int appHostPort, String appTrackingUrl, Map<Set<String>, PlacementConstraint> placementConstraintsMap) throws YarnException, IOException\n{\r\n    RegisterApplicationMasterResponse response = client.registerApplicationMaster(appHostName, appHostPort, appTrackingUrl, placementConstraintsMap);\r\n    heartbeatThread.start();\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "unregisterApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void unregisterApplicationMaster(FinalApplicationStatus appStatus, String appMessage, String appTrackingUrl) throws YarnException, IOException\n{\r\n    synchronized (unregisterHeartbeatLock) {\r\n        keepRunning = false;\r\n        client.unregisterApplicationMaster(appStatus, appMessage, appTrackingUrl);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "addContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addContainerRequest(T req)\n{\r\n    client.addContainerRequest(req);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "removeContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeContainerRequest(T req)\n{\r\n    client.removeContainerRequest(req);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "requestContainerUpdate",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void requestContainerUpdate(Container container, UpdateContainerRequest updateContainerRequest)\n{\r\n    client.requestContainerUpdate(container, updateContainerRequest);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "releaseAssignedContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void releaseAssignedContainer(ContainerId containerId)\n{\r\n    client.releaseAssignedContainer(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "getAvailableResources",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource getAvailableResources()\n{\r\n    return client.getAvailableResources();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "getClusterNodeCount",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getClusterNodeCount()\n{\r\n    return client.getClusterNodeCount();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "updateBlacklist",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void updateBlacklist(List<String> blacklistAdditions, List<String> blacklistRemovals)\n{\r\n    client.updateBlacklist(blacklistAdditions, blacklistRemovals);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "updateTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void updateTrackingUrl(String trackingUrl)\n{\r\n    client.updateTrackingUrl(trackingUrl);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getProxy",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "ContainerManagementProtocolProxyData getProxy(String containerManagerBindAddr, ContainerId containerId) throws InvalidToken\n{\r\n    ContainerManagementProtocolProxyData proxy = cmProxy.get(containerManagerBindAddr);\r\n    while (proxy != null && !proxy.token.getIdentifier().equals(nmTokenCache.getToken(containerManagerBindAddr).getIdentifier())) {\r\n        LOG.debug(\"Refreshing proxy as NMToken got updated for node : {}\", containerManagerBindAddr);\r\n        if (!proxy.scheduledForClose) {\r\n            removeProxy(proxy);\r\n        } else {\r\n            try {\r\n                this.wait();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        if (proxy.activeCallers < 0) {\r\n            proxy = cmProxy.get(containerManagerBindAddr);\r\n        }\r\n    }\r\n    if (proxy == null) {\r\n        proxy = new ContainerManagementProtocolProxyData(rpc, containerManagerBindAddr, containerId, nmTokenCache.getToken(containerManagerBindAddr));\r\n        if (maxConnectedNMs > 0) {\r\n            addProxyToCache(containerManagerBindAddr, proxy);\r\n        }\r\n    }\r\n    proxy.activeCallers++;\r\n    updateLRUCache(containerManagerBindAddr);\r\n    return proxy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "addProxyToCache",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addProxyToCache(String containerManagerBindAddr, ContainerManagementProtocolProxyData proxy)\n{\r\n    while (cmProxy.size() >= maxConnectedNMs) {\r\n        LOG.debug(\"Cleaning up the proxy cache, size={} max={}\", cmProxy.size(), maxConnectedNMs);\r\n        boolean removedProxy = false;\r\n        for (ContainerManagementProtocolProxyData otherProxy : cmProxy.values()) {\r\n            removedProxy = removeProxy(otherProxy);\r\n            if (removedProxy) {\r\n                break;\r\n            }\r\n        }\r\n        if (!removedProxy) {\r\n            try {\r\n                this.wait();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n    if (maxConnectedNMs > 0) {\r\n        cmProxy.put(containerManagerBindAddr, proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "updateLRUCache",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void updateLRUCache(String containerManagerBindAddr)\n{\r\n    if (maxConnectedNMs > 0) {\r\n        ContainerManagementProtocolProxyData proxy = cmProxy.remove(containerManagerBindAddr);\r\n        cmProxy.put(containerManagerBindAddr, proxy);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "mayBeCloseProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void mayBeCloseProxy(ContainerManagementProtocolProxyData proxy)\n{\r\n    tryCloseProxy(proxy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "tryCloseProxy",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean tryCloseProxy(ContainerManagementProtocolProxyData proxy)\n{\r\n    proxy.activeCallers--;\r\n    if (proxy.scheduledForClose && proxy.activeCallers < 0) {\r\n        LOG.debug(\"Closing proxy : {}\", proxy.containerManagerBindAddr);\r\n        cmProxy.remove(proxy.containerManagerBindAddr);\r\n        try {\r\n            rpc.stopProxy(proxy.getContainerManagementProtocol(), conf);\r\n        } finally {\r\n            this.notifyAll();\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "removeProxy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean removeProxy(ContainerManagementProtocolProxyData proxy)\n{\r\n    if (!proxy.scheduledForClose) {\r\n        proxy.scheduledForClose = true;\r\n        return tryCloseProxy(proxy);\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "stopAllProxies",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void stopAllProxies()\n{\r\n    List<String> nodeIds = new ArrayList<String>();\r\n    nodeIds.addAll(this.cmProxy.keySet());\r\n    for (String nodeId : nodeIds) {\r\n        ContainerManagementProtocolProxyData proxy = cmProxy.get(nodeId);\r\n        proxy.activeCallers = 0;\r\n        try {\r\n            removeProxy(proxy);\r\n        } catch (Throwable t) {\r\n            LOG.error(\"Error closing connection\", t);\r\n        }\r\n    }\r\n    cmProxy.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setErrOut",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setErrOut(PrintStream errOut)\n{\r\n    this.errOut = errOut;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setOut",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setOut(PrintStream out)\n{\r\n    this.out = out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "appendHAUsage",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void appendHAUsage(final StringBuilder usageBuilder)\n{\r\n    for (Map.Entry<String, UsageInfo> cmdEntry : USAGE.entrySet()) {\r\n        if (cmdEntry.getKey().equals(\"-help\")) {\r\n            continue;\r\n        }\r\n        UsageInfo usageInfo = cmdEntry.getValue();\r\n        if (usageInfo.args == null) {\r\n            usageBuilder.append(\" [\" + cmdEntry.getKey() + \"]\");\r\n        } else {\r\n            usageBuilder.append(\" [\" + cmdEntry.getKey() + \" \" + usageInfo.args + \"]\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "buildHelpMsg",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void buildHelpMsg(String cmd, StringBuilder builder)\n{\r\n    UsageInfo usageInfo = ADMIN_USAGE.get(cmd);\r\n    if (usageInfo == null) {\r\n        usageInfo = USAGE.get(cmd);\r\n        if (usageInfo == null) {\r\n            return;\r\n        }\r\n    }\r\n    if (usageInfo.args == null) {\r\n        builder.append(\"   \" + cmd + \": \" + usageInfo.help);\r\n    } else {\r\n        String space = (usageInfo.args == \"\") ? \"\" : \" \";\r\n        builder.append(\"   \" + cmd + space + usageInfo.args + \": \" + usageInfo.help);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "buildIndividualUsageMsg",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void buildIndividualUsageMsg(String cmd, StringBuilder builder)\n{\r\n    boolean isHACommand = false;\r\n    UsageInfo usageInfo = ADMIN_USAGE.get(cmd);\r\n    if (usageInfo == null) {\r\n        usageInfo = USAGE.get(cmd);\r\n        if (usageInfo == null) {\r\n            return;\r\n        }\r\n        isHACommand = true;\r\n    }\r\n    if (usageInfo.args == null) {\r\n        builder.append(\"Usage: yarn rmadmin [\" + cmd + \"]\\n\");\r\n    } else {\r\n        String space = (usageInfo.args == \"\") ? \"\" : \" \";\r\n        builder.append(\"Usage: yarn rmadmin [\" + cmd + space + usageInfo.args + \"]\\n\");\r\n    }\r\n    if (isHACommand) {\r\n        builder.append(cmd + \" can only be used when RM HA is enabled\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "buildUsageMsg",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void buildUsageMsg(StringBuilder builder, boolean isHAEnabled)\n{\r\n    builder.append(\"Usage: yarn rmadmin\\n\");\r\n    for (Map.Entry<String, UsageInfo> cmdEntry : ADMIN_USAGE.entrySet()) {\r\n        UsageInfo usageInfo = cmdEntry.getValue();\r\n        builder.append(\"   \" + cmdEntry.getKey() + \" \" + usageInfo.args + \"\\n\");\r\n    }\r\n    if (isHAEnabled) {\r\n        for (Map.Entry<String, UsageInfo> cmdEntry : USAGE.entrySet()) {\r\n            String cmdKey = cmdEntry.getKey();\r\n            if (!cmdKey.equals(\"-help\")) {\r\n                UsageInfo usageInfo = cmdEntry.getValue();\r\n                if (usageInfo.args == null) {\r\n                    builder.append(\"   \" + cmdKey + \"\\n\");\r\n                } else {\r\n                    builder.append(\"   \" + cmdKey + \" \" + usageInfo.args + \"\\n\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    builder.append(\"   -help\" + \" [cmd]\\n\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printHelp",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void printHelp(String cmd, boolean isHAEnabled)\n{\r\n    StringBuilder summary = new StringBuilder();\r\n    summary.append(\"rmadmin is the command to execute YARN administrative \" + \"commands.\\n\");\r\n    summary.append(\"The full syntax is: \\n\\n\" + \"yarn rmadmin\" + \" [-refreshQueues]\" + \" [-refreshNodes [-g|graceful [timeout in seconds] -client|server]]\" + \" [-refreshNodesResources]\" + \" [-refreshSuperUserGroupsConfiguration]\" + \" [-refreshUserToGroupsMappings]\" + \" [-refreshAdminAcls]\" + \" [-refreshServiceAcl]\" + \" [-getGroup [username]]\" + \" [-addToClusterNodeLabels <\\\"label1(exclusive=true),\" + \"label2(exclusive=false),label3\\\">]\" + \" [-removeFromClusterNodeLabels <label1,label2,label3>]\" + \" [-replaceLabelsOnNode \" + \"<\\\"node1[:port]=label1 node2[:port]=label2\\\"> \" + \"[-failOnUnknownNodes]]\" + \" [-directlyAccessNodeLabelStore]\" + \" [-refreshClusterMaxPriority]\" + \" [-updateNodeResource [NodeID] [MemSize] [vCores]\" + \" ([OvercommitTimeout]) or -updateNodeResource [NodeID] \" + \"[ResourceTypes] ([OvercommitTimeout])]\");\r\n    if (isHAEnabled) {\r\n        appendHAUsage(summary);\r\n    }\r\n    summary.append(\" [-help [cmd]]\").append(\"\\n\");\r\n    StringBuilder helpBuilder = new StringBuilder();\r\n    System.out.println(summary);\r\n    for (String cmdKey : ADMIN_USAGE.keySet()) {\r\n        buildHelpMsg(cmdKey, helpBuilder);\r\n        helpBuilder.append(\"\\n\");\r\n    }\r\n    if (isHAEnabled) {\r\n        for (String cmdKey : USAGE.keySet()) {\r\n            if (!cmdKey.equals(\"-help\")) {\r\n                buildHelpMsg(cmdKey, helpBuilder);\r\n                helpBuilder.append(\"\\n\");\r\n            }\r\n        }\r\n    }\r\n    helpBuilder.append(\"   -help [cmd]: Displays help for the given command or all commands\" + \" if none is specified.\");\r\n    System.out.println(helpBuilder);\r\n    System.out.println();\r\n    ToolRunner.printGenericCommandUsage(System.out);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void printUsage(String cmd, boolean isHAEnabled)\n{\r\n    StringBuilder usageBuilder = new StringBuilder();\r\n    if (ADMIN_USAGE.containsKey(cmd) || USAGE.containsKey(cmd)) {\r\n        buildIndividualUsageMsg(cmd, usageBuilder);\r\n    } else {\r\n        buildUsageMsg(usageBuilder, isHAEnabled);\r\n    }\r\n    System.err.println(usageBuilder);\r\n    ToolRunner.printGenericCommandUsage(System.err);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createAdminProtocol",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceManagerAdministrationProtocol createAdminProtocol() throws IOException\n{\r\n    final YarnConfiguration conf = new YarnConfiguration(getConf());\r\n    return ClientRMProxy.createRMProxy(conf, ResourceManagerAdministrationProtocol.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "refreshQueues",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int refreshQueues() throws IOException, YarnException\n{\r\n    ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n    RefreshQueuesRequest request = recordFactory.newRecordInstance(RefreshQueuesRequest.class);\r\n    adminProtocol.refreshQueues(request);\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "refreshNodes",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int refreshNodes(boolean graceful) throws IOException, YarnException\n{\r\n    ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n    RefreshNodesRequest request = RefreshNodesRequest.newInstance(graceful ? DecommissionType.GRACEFUL : DecommissionType.NORMAL);\r\n    adminProtocol.refreshNodes(request);\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "refreshNodes",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "int refreshNodes(int timeout, String trackingMode) throws IOException, YarnException\n{\r\n    boolean serverTracking = !\"client\".equals(trackingMode);\r\n    ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n    RefreshNodesRequest gracefulRequest = RefreshNodesRequest.newInstance(DecommissionType.GRACEFUL, timeout);\r\n    adminProtocol.refreshNodes(gracefulRequest);\r\n    if (serverTracking) {\r\n        return 0;\r\n    }\r\n    CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest = recordFactory.newRecordInstance(CheckForDecommissioningNodesRequest.class);\r\n    long waitingTime;\r\n    boolean nodesDecommissioning = true;\r\n    final int gracePeriod = 5;\r\n    for (waitingTime = 0; timeout == -1 || (timeout >= 0 && waitingTime < timeout + gracePeriod); waitingTime++) {\r\n        try {\r\n            Thread.sleep(1000);\r\n        } catch (InterruptedException e) {\r\n        }\r\n        CheckForDecommissioningNodesResponse checkForDecommissioningNodes = adminProtocol.checkForDecommissioningNodes(checkForDecommissioningNodesRequest);\r\n        Set<NodeId> decommissioningNodes = checkForDecommissioningNodes.getDecommissioningNodes();\r\n        if (decommissioningNodes.isEmpty()) {\r\n            nodesDecommissioning = false;\r\n            break;\r\n        } else {\r\n            StringBuilder nodes = new StringBuilder();\r\n            for (NodeId nodeId : decommissioningNodes) {\r\n                nodes.append(nodeId).append(\",\");\r\n            }\r\n            nodes.deleteCharAt(nodes.length() - 1);\r\n            System.out.println(\"Nodes '\" + nodes + \"' are still decommissioning.\");\r\n        }\r\n    }\r\n    if (nodesDecommissioning) {\r\n        System.out.println(\"Graceful decommissioning not completed in \" + timeout + \" seconds, issuing forceful decommissioning command.\");\r\n        RefreshNodesRequest forcefulRequest = RefreshNodesRequest.newInstance(DecommissionType.FORCEFUL);\r\n        adminProtocol.refreshNodes(forcefulRequest);\r\n    } else {\r\n        System.out.println(\"Graceful decommissioning completed in \" + waitingTime + \" seconds.\");\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "refreshNodesResources",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int refreshNodesResources() throws IOException, YarnException\n{\r\n    ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n    RefreshNodesResourcesRequest request = recordFactory.newRecordInstance(RefreshNodesResourcesRequest.class);\r\n    adminProtocol.refreshNodesResources(request);\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "refreshNodes",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int refreshNodes() throws IOException, YarnException\n{\r\n    return refreshNodes(false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "refreshUserToGroupsMappings",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int refreshUserToGroupsMappings() throws IOException, YarnException\n{\r\n    ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n    RefreshUserToGroupsMappingsRequest request = recordFactory.newRecordInstance(RefreshUserToGroupsMappingsRequest.class);\r\n    adminProtocol.refreshUserToGroupsMappings(request);\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "refreshSuperUserGroupsConfiguration",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int refreshSuperUserGroupsConfiguration() throws IOException, YarnException\n{\r\n    ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n    RefreshSuperUserGroupsConfigurationRequest request = recordFactory.newRecordInstance(RefreshSuperUserGroupsConfigurationRequest.class);\r\n    adminProtocol.refreshSuperUserGroupsConfiguration(request);\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "refreshAdminAcls",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int refreshAdminAcls() throws IOException, YarnException\n{\r\n    ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n    RefreshAdminAclsRequest request = recordFactory.newRecordInstance(RefreshAdminAclsRequest.class);\r\n    adminProtocol.refreshAdminAcls(request);\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "refreshServiceAcls",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int refreshServiceAcls() throws IOException, YarnException\n{\r\n    ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n    RefreshServiceAclsRequest request = recordFactory.newRecordInstance(RefreshServiceAclsRequest.class);\r\n    adminProtocol.refreshServiceAcls(request);\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "refreshClusterMaxPriority",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int refreshClusterMaxPriority() throws IOException, YarnException\n{\r\n    ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n    RefreshClusterMaxPriorityRequest request = recordFactory.newRecordInstance(RefreshClusterMaxPriorityRequest.class);\r\n    adminProtocol.refreshClusterMaxPriority(request);\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "updateNodeResource",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "int updateNodeResource(String nodeIdStr, Resource resource, int overCommitTimeout) throws YarnException, IOException\n{\r\n    ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n    UpdateNodeResourceRequest request = recordFactory.newRecordInstance(UpdateNodeResourceRequest.class);\r\n    NodeId nodeId = NodeId.fromString(nodeIdStr);\r\n    Map<NodeId, ResourceOption> resourceMap = new HashMap<NodeId, ResourceOption>();\r\n    resourceMap.put(nodeId, ResourceOption.newInstance(resource, overCommitTimeout));\r\n    request.setNodeResourceMap(resourceMap);\r\n    adminProtocol.updateNodeResource(request);\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "invalidResourceValue",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "boolean invalidResourceValue(int memValue, int coreValue)\n{\r\n    return (memValue < 0) || (coreValue < 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getGroups",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "int getGroups(String[] usernames) throws IOException\n{\r\n    ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n    if (usernames.length == 0) {\r\n        usernames = new String[] { UserGroupInformation.getCurrentUser().getUserName() };\r\n    }\r\n    for (String username : usernames) {\r\n        StringBuilder sb = new StringBuilder();\r\n        sb.append(username + \" :\");\r\n        for (String group : adminProtocol.getGroupsForUser(username)) {\r\n            sb.append(\" \").append(group);\r\n        }\r\n        System.out.println(sb);\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getNodeLabelManagerInstance",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CommonNodeLabelsManager getNodeLabelManagerInstance(Configuration conf)\n{\r\n    if (localNodeLabelsManager == null) {\r\n        localNodeLabelsManager = new CommonNodeLabelsManager();\r\n        localNodeLabelsManager.init(conf);\r\n        localNodeLabelsManager.start();\r\n    }\r\n    return localNodeLabelsManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "buildNodeLabelNamesFromStr",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Set<String> buildNodeLabelNamesFromStr(String args)\n{\r\n    Set<String> labels = new HashSet<String>();\r\n    for (String p : args.split(\",\")) {\r\n        if (!p.trim().isEmpty()) {\r\n            labels.add(p.trim());\r\n        }\r\n    }\r\n    if (labels.isEmpty()) {\r\n        throw new IllegalArgumentException(NO_LABEL_ERR_MSG);\r\n    }\r\n    return labels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "handleAddToClusterNodeLabels",
  "errType" : [ "MissingArgumentException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "int handleAddToClusterNodeLabels(String[] args, String cmd, boolean isHAEnabled) throws IOException, YarnException, ParseException\n{\r\n    Options opts = new Options();\r\n    opts.addOption(\"addToClusterNodeLabels\", true, \"Add to cluster node labels.\");\r\n    opts.addOption(\"directlyAccessNodeLabelStore\", false, \"Directly access node label store.\");\r\n    int exitCode = -1;\r\n    CommandLine cliParser = null;\r\n    try {\r\n        cliParser = new GnuParser().parse(opts, args);\r\n    } catch (MissingArgumentException ex) {\r\n        System.err.println(NO_LABEL_ERR_MSG);\r\n        printUsage(args[0], isHAEnabled);\r\n        return exitCode;\r\n    }\r\n    List<NodeLabel> labels = YarnClientUtils.buildNodeLabelsFromStr(cliParser.getOptionValue(\"addToClusterNodeLabels\"));\r\n    if (cliParser.hasOption(\"directlyAccessNodeLabelStore\")) {\r\n        getNodeLabelManagerInstance(getConf()).addToCluserNodeLabels(labels);\r\n    } else {\r\n        ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n        AddToClusterNodeLabelsRequest request = AddToClusterNodeLabelsRequest.newInstance(labels);\r\n        adminProtocol.addToClusterNodeLabels(request);\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "handleRemoveFromClusterNodeLabels",
  "errType" : [ "MissingArgumentException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "int handleRemoveFromClusterNodeLabels(String[] args, String cmd, boolean isHAEnabled) throws IOException, YarnException, ParseException\n{\r\n    Options opts = new Options();\r\n    opts.addOption(\"removeFromClusterNodeLabels\", true, \"Remove From cluster node labels.\");\r\n    opts.addOption(\"directlyAccessNodeLabelStore\", false, \"Directly access node label store.\");\r\n    int exitCode = -1;\r\n    CommandLine cliParser = null;\r\n    try {\r\n        cliParser = new GnuParser().parse(opts, args);\r\n    } catch (MissingArgumentException ex) {\r\n        System.err.println(NO_LABEL_ERR_MSG);\r\n        printUsage(args[0], isHAEnabled);\r\n        return exitCode;\r\n    }\r\n    Set<String> labels = buildNodeLabelNamesFromStr(cliParser.getOptionValue(\"removeFromClusterNodeLabels\"));\r\n    if (cliParser.hasOption(\"directlyAccessNodeLabelStore\")) {\r\n        getNodeLabelManagerInstance(getConf()).removeFromClusterNodeLabels(labels);\r\n    } else {\r\n        ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n        RemoveFromClusterNodeLabelsRequest request = RemoveFromClusterNodeLabelsRequest.newInstance(labels);\r\n        adminProtocol.removeFromClusterNodeLabels(request);\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "buildNodeLabelsMapFromStr",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "Map<NodeId, Set<String>> buildNodeLabelsMapFromStr(String args)\n{\r\n    Map<NodeId, Set<String>> map = new HashMap<NodeId, Set<String>>();\r\n    for (String nodeToLabels : args.split(\"[ \\n]\")) {\r\n        nodeToLabels = nodeToLabels.trim();\r\n        if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\r\n            continue;\r\n        }\r\n        String[] splits = nodeToLabels.split(\"=\");\r\n        int labelsStartIndex = 0;\r\n        String nodeIdStr = splits[0];\r\n        if (splits.length == 2) {\r\n            splits = splits[1].split(\",\");\r\n        } else if (nodeToLabels.endsWith(\"=\")) {\r\n            splits = new String[0];\r\n        } else {\r\n            splits = nodeToLabels.split(\",\");\r\n            nodeIdStr = splits[0];\r\n            labelsStartIndex = 1;\r\n        }\r\n        Preconditions.checkArgument(!nodeIdStr.trim().isEmpty(), \"node name cannot be empty\");\r\n        NodeId nodeId = ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\r\n        map.put(nodeId, new HashSet<String>());\r\n        for (int i = labelsStartIndex; i < splits.length; i++) {\r\n            if (!splits[i].trim().isEmpty()) {\r\n                map.get(nodeId).add(splits[i].trim());\r\n            }\r\n        }\r\n        int nLabels = map.get(nodeId).size();\r\n        Preconditions.checkArgument(nLabels <= 1, \"%s labels specified on host=%s\" + \", please note that we do not support specifying multiple\" + \" labels on a single host for now.\", nLabels, nodeIdStr);\r\n    }\r\n    if (map.isEmpty()) {\r\n        throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\r\n    }\r\n    return map;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "handleReplaceLabelsOnNodes",
  "errType" : [ "MissingArgumentException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "int handleReplaceLabelsOnNodes(String[] args, String cmd, boolean isHAEnabled) throws IOException, YarnException, ParseException\n{\r\n    Options opts = new Options();\r\n    opts.addOption(\"replaceLabelsOnNode\", true, \"Replace label on node.\");\r\n    opts.addOption(\"failOnUnknownNodes\", false, \"Fail on unknown nodes.\");\r\n    opts.addOption(\"directlyAccessNodeLabelStore\", false, \"Directly access node label store.\");\r\n    int exitCode = -1;\r\n    CommandLine cliParser = null;\r\n    try {\r\n        cliParser = new GnuParser().parse(opts, args);\r\n    } catch (MissingArgumentException ex) {\r\n        System.err.println(NO_MAPPING_ERR_MSG);\r\n        printUsage(args[0], isHAEnabled);\r\n        return exitCode;\r\n    }\r\n    Map<NodeId, Set<String>> map = buildNodeLabelsMapFromStr(cliParser.getOptionValue(\"replaceLabelsOnNode\"));\r\n    return replaceLabelsOnNodes(map, cliParser.hasOption(\"failOnUnknownNodes\"), cliParser.hasOption(\"directlyAccessNodeLabelStore\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "replaceLabelsOnNodes",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int replaceLabelsOnNodes(Map<NodeId, Set<String>> map, boolean failOnUnknownNodes, boolean directlyAccessNodeLabelStore) throws IOException, YarnException\n{\r\n    if (directlyAccessNodeLabelStore) {\r\n        getNodeLabelManagerInstance(getConf()).replaceLabelsOnNode(map);\r\n    } else {\r\n        ResourceManagerAdministrationProtocol adminProtocol = createAdminProtocol();\r\n        ReplaceLabelsOnNodeRequest request = ReplaceLabelsOnNodeRequest.newInstance(map);\r\n        request.setFailOnUnknownNodes(failOnUnknownNodes);\r\n        adminProtocol.replaceLabelsOnNode(request);\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "run",
  "errType" : [ "IllegalArgumentException", "RemoteException", "Exception", "Exception" ],
  "containingMethodsNum" : 53,
  "sourceCodeText" : "int run(String[] args) throws Exception\n{\r\n    YarnConfiguration yarnConf = getConf() == null ? new YarnConfiguration() : new YarnConfiguration(getConf());\r\n    boolean isHAEnabled = yarnConf.getBoolean(YarnConfiguration.RM_HA_ENABLED, YarnConfiguration.DEFAULT_RM_HA_ENABLED);\r\n    if (args.length < 1) {\r\n        printUsage(\"\", isHAEnabled);\r\n        return -1;\r\n    }\r\n    int exitCode = -1;\r\n    int i = 0;\r\n    String cmd = args[i++];\r\n    exitCode = 0;\r\n    if (\"-help\".equals(cmd)) {\r\n        if (i < args.length) {\r\n            printUsage(args[i], isHAEnabled);\r\n        } else {\r\n            printHelp(\"\", isHAEnabled);\r\n        }\r\n        return exitCode;\r\n    }\r\n    if (USAGE.containsKey(cmd)) {\r\n        if (isHAEnabled) {\r\n            return super.run(args);\r\n        }\r\n        System.out.println(\"Cannot run \" + cmd + \" when ResourceManager HA is not enabled\");\r\n        return -1;\r\n    }\r\n    if (\"-refreshAdminAcls\".equals(cmd) || \"-refreshQueues\".equals(cmd) || \"-refreshNodesResources\".equals(cmd) || \"-refreshServiceAcl\".equals(cmd) || \"-refreshUserToGroupsMappings\".equals(cmd) || \"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\r\n        if (args.length != 1) {\r\n            printUsage(cmd, isHAEnabled);\r\n            return exitCode;\r\n        }\r\n    }\r\n    try {\r\n        if (\"-refreshQueues\".equals(cmd)) {\r\n            exitCode = refreshQueues();\r\n        } else if (\"-refreshNodes\".equals(cmd)) {\r\n            exitCode = handleRefreshNodes(args, cmd, isHAEnabled);\r\n        } else if (\"-refreshNodesResources\".equals(cmd)) {\r\n            exitCode = refreshNodesResources();\r\n        } else if (\"-refreshUserToGroupsMappings\".equals(cmd)) {\r\n            exitCode = refreshUserToGroupsMappings();\r\n        } else if (\"-refreshSuperUserGroupsConfiguration\".equals(cmd)) {\r\n            exitCode = refreshSuperUserGroupsConfiguration();\r\n        } else if (\"-refreshAdminAcls\".equals(cmd)) {\r\n            exitCode = refreshAdminAcls();\r\n        } else if (\"-refreshServiceAcl\".equals(cmd)) {\r\n            exitCode = refreshServiceAcls();\r\n        } else if (\"-refreshClusterMaxPriority\".equals(cmd)) {\r\n            exitCode = refreshClusterMaxPriority();\r\n        } else if (\"-getGroups\".equals(cmd)) {\r\n            String[] usernames = Arrays.copyOfRange(args, i, args.length);\r\n            exitCode = getGroups(usernames);\r\n        } else if (\"-updateNodeResource\".equals(cmd)) {\r\n            exitCode = handleUpdateNodeResource(args, cmd, isHAEnabled);\r\n        } else if (\"-addToClusterNodeLabels\".equals(cmd)) {\r\n            exitCode = handleAddToClusterNodeLabels(args, cmd, isHAEnabled);\r\n        } else if (\"-removeFromClusterNodeLabels\".equals(cmd)) {\r\n            exitCode = handleRemoveFromClusterNodeLabels(args, cmd, isHAEnabled);\r\n        } else if (\"-replaceLabelsOnNode\".equals(cmd)) {\r\n            exitCode = handleReplaceLabelsOnNodes(args, cmd, isHAEnabled);\r\n        } else {\r\n            exitCode = -1;\r\n            System.err.println(cmd.substring(1) + \": Unknown command\");\r\n            printUsage(\"\", isHAEnabled);\r\n        }\r\n    } catch (IllegalArgumentException arge) {\r\n        exitCode = -1;\r\n        System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\r\n        printUsage(cmd, isHAEnabled);\r\n    } catch (RemoteException e) {\r\n        exitCode = -1;\r\n        try {\r\n            String[] content;\r\n            content = e.getLocalizedMessage().split(\"\\n\");\r\n            System.err.println(cmd.substring(1) + \": \" + content[0]);\r\n        } catch (Exception ex) {\r\n            System.err.println(cmd.substring(1) + \": \" + ex.getLocalizedMessage());\r\n        }\r\n    } catch (Exception e) {\r\n        exitCode = -1;\r\n        System.err.println(cmd.substring(1) + \": \" + e.getLocalizedMessage());\r\n    }\r\n    if (null != localNodeLabelsManager) {\r\n        localNodeLabelsManager.stop();\r\n    }\r\n    return exitCode;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "handleRefreshNodes",
  "errType" : [ "MissingArgumentException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "int handleRefreshNodes(String[] args, String cmd, boolean isHAEnabled) throws IOException, YarnException, ParseException\n{\r\n    Options opts = new Options();\r\n    opts.addOption(\"refreshNodes\", false, \"Refresh the hosts information at the ResourceManager.\");\r\n    Option gracefulOpt = new Option(\"g\", \"graceful\", true, \"Wait for timeout before marking the NodeManager as decommissioned.\");\r\n    gracefulOpt.setOptionalArg(true);\r\n    opts.addOption(gracefulOpt);\r\n    opts.addOption(\"client\", false, \"Indicates the timeout tracking should be handled by the client.\");\r\n    opts.addOption(\"server\", false, \"Indicates the timeout tracking should be handled by the RM.\");\r\n    int exitCode = -1;\r\n    CommandLine cliParser = null;\r\n    try {\r\n        cliParser = new GnuParser().parse(opts, args);\r\n    } catch (MissingArgumentException ex) {\r\n        System.out.println(\"Missing argument for options\");\r\n        printUsage(args[0], isHAEnabled);\r\n        return exitCode;\r\n    }\r\n    int timeout = -1;\r\n    if (cliParser.hasOption(\"g\")) {\r\n        String strTimeout = cliParser.getOptionValue(\"g\");\r\n        if (strTimeout != null) {\r\n            timeout = validateTimeout(strTimeout);\r\n        }\r\n        String trackingMode = null;\r\n        if (cliParser.hasOption(\"client\")) {\r\n            trackingMode = \"client\";\r\n        } else if (cliParser.hasOption(\"server\")) {\r\n            trackingMode = \"server\";\r\n        } else {\r\n            printUsage(cmd, isHAEnabled);\r\n            return -1;\r\n        }\r\n        return refreshNodes(timeout, trackingMode);\r\n    } else {\r\n        return refreshNodes();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "handleUpdateNodeResource",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "int handleUpdateNodeResource(String[] args, String cmd, boolean isHAEnabled) throws YarnException, IOException\n{\r\n    int i = 1;\r\n    int overCommitTimeout = ResourceOption.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT;\r\n    String nodeID = args[i++];\r\n    Resource resource = Resource.newInstance(0, 0);\r\n    if (args.length < 3 || args.length > 5) {\r\n        System.err.println(\"Number of parameters specified for \" + \"updateNodeResource is wrong.\");\r\n        printUsage(cmd, isHAEnabled);\r\n        return -1;\r\n    } else if ((args.length == 4 || args.length == 5) && RESOURCE_TYPES_ARGS_PATTERN.matcher(args[2]).matches()) {\r\n        int memSize = Integer.parseInt(args[i++]);\r\n        int cores = Integer.parseInt(args[i++]);\r\n        if (invalidResourceValue(memSize, cores)) {\r\n            throw new IllegalArgumentException(\"Invalid resource value: \" + \"(\" + memSize + \",\" + cores + \") for updateNodeResource.\");\r\n        }\r\n        resource = Resources.createResource(memSize, cores);\r\n    } else {\r\n        String resourceTypes = args[i++];\r\n        if (!resourceTypes.contains(\"=\")) {\r\n            System.err.println(\"Resource Types parameter specified for \" + \"updateNodeResource is wrong. It should be comma-delimited \" + \"key value pairs. For example, memory-mb=1024Mi,\" + \"vcores=1,resource1=3Gi,resource2=2\");\r\n            printUsage(cmd, isHAEnabled);\r\n            return -1;\r\n        }\r\n        resource = parseCommandAndCreateResource(resourceTypes);\r\n        ResourceUtils.areMandatoryResourcesAvailable(resource);\r\n    }\r\n    if (i == args.length - 1) {\r\n        overCommitTimeout = Integer.parseInt(args[i]);\r\n    }\r\n    return updateNodeResource(nodeID, resource, overCommitTimeout);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "parseCommandAndCreateResource",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "Resource parseCommandAndCreateResource(String resourceTypes)\n{\r\n    Resource resource = Resource.newInstance(0, 0);\r\n    Map<String, ResourceInformation> resourceTypesFromRM = ResourceUtils.getResourceTypes();\r\n    String[] resourceTypesArr = resourceTypes.split(\",\");\r\n    for (int k = 0; k < resourceTypesArr.length; k++) {\r\n        String resourceType = resourceTypesArr[k];\r\n        String[] resourceTypeArray = resourceType.split(\"=\");\r\n        if (resourceTypeArray.length == 2) {\r\n            String resName = StringUtils.trim(resourceTypeArray[0]);\r\n            String resValue = StringUtils.trim(resourceTypeArray[1]);\r\n            if (resourceTypesFromRM.containsKey(resName)) {\r\n                String[] resourceValue = ResourceUtils.parseResourceValue(resValue);\r\n                if (resourceValue.length == 2) {\r\n                    long value = Long.parseLong(resourceValue[1]);\r\n                    if (!resourceTypesFromRM.get(resName).getUnits().equals(resourceValue[0])) {\r\n                        value = UnitsConversionUtil.convert(resourceValue[0], resourceTypesFromRM.get(resName).getUnits(), value);\r\n                    }\r\n                    ResourceInformation ri = ResourceInformation.newInstance(resName, resourceValue[0], value);\r\n                    resource.setResourceInformation(resName, ri);\r\n                } else {\r\n                    throw new IllegalArgumentException(\"Invalid resource value: \" + resValue + \". Unable to extract unit and actual value.\");\r\n                }\r\n            } else {\r\n                throw new IllegalArgumentException(\"Invalid resource type: \" + resName + \". Not allowed.\");\r\n            }\r\n        } else {\r\n            throw new IllegalArgumentException(\"Invalid resource type value: \" + \"(\" + resourceType + \") for updateNodeResource. \" + \"It should be key value pairs separated using '=' symbol.\");\r\n        }\r\n    }\r\n    return resource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "validateTimeout",
  "errType" : [ "NumberFormatException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int validateTimeout(String strTimeout)\n{\r\n    int timeout;\r\n    try {\r\n        timeout = Integer.parseInt(strTimeout);\r\n    } catch (NumberFormatException ex) {\r\n        throw new IllegalArgumentException(INVALID_TIMEOUT_ERR_MSG + strTimeout);\r\n    }\r\n    if (timeout < -1) {\r\n        throw new IllegalArgumentException(INVALID_TIMEOUT_ERR_MSG + timeout);\r\n    }\r\n    return timeout;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "validateTrackingMode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String validateTrackingMode(String mode)\n{\r\n    if (\"-client\".equals(mode)) {\r\n        return \"client\";\r\n    }\r\n    if (\"-server\".equals(mode)) {\r\n        return \"server\";\r\n    }\r\n    throw new IllegalArgumentException(\"Invalid mode specified: \" + mode);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    if (conf != null) {\r\n        conf = addSecurityConfiguration(conf);\r\n    }\r\n    super.setConf(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "addSecurityConfiguration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Configuration addSecurityConfiguration(Configuration conf)\n{\r\n    conf = new YarnConfiguration(conf);\r\n    conf.set(CommonConfigurationKeys.HADOOP_SECURITY_SERVICE_USER_NAME_KEY, conf.get(YarnConfiguration.RM_PRINCIPAL, \"\"));\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "resolveTarget",
  "errType" : [ "IllegalArgumentException", "IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "HAServiceTarget resolveTarget(String rmId)\n{\r\n    Collection<String> rmIds = HAUtil.getRMHAIds(getConf());\r\n    if (!rmIds.contains(rmId)) {\r\n        StringBuilder msg = new StringBuilder();\r\n        msg.append(rmId + \" is not a valid serviceId. It should be one of \");\r\n        for (String id : rmIds) {\r\n            msg.append(id + \" \");\r\n        }\r\n        throw new IllegalArgumentException(msg.toString());\r\n    }\r\n    try {\r\n        YarnConfiguration conf = new YarnConfiguration(getConf());\r\n        conf.set(YarnConfiguration.RM_HA_ID, rmId);\r\n        return new RMHAServiceTarget(conf);\r\n    } catch (IllegalArgumentException iae) {\r\n        throw new YarnRuntimeException(\"Could not connect to \" + rmId + \"; the configuration for it might be missing\");\r\n    } catch (IOException ioe) {\r\n        throw new YarnRuntimeException(\"Could not connect to RM HA Admin for node \" + rmId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getTargetIds",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<String> getTargetIds(String targetNodeToActivate)\n{\r\n    return HAUtil.getRMHAIds(getConf());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getUsageString",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getUsageString()\n{\r\n    return \"Usage: rmadmin\";\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    int result = ToolRunner.run(new RMAdminCLI(), args);\r\n    System.exit(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    this.maxThreadPoolSize = conf.getInt(YarnConfiguration.NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE, YarnConfiguration.DEFAULT_NM_CLIENT_ASYNC_THREAD_POOL_MAX_SIZE);\r\n    LOG.info(\"Upper bound of the thread pool size is \" + maxThreadPoolSize);\r\n    client.init(conf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "serviceStart",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    client.start();\r\n    ThreadFactory tf = new ThreadFactoryBuilder().setNameFormat(this.getClass().getName() + \" #%d\").setDaemon(true).build();\r\n    int initSize = Math.min(INITIAL_THREAD_POOL_SIZE, maxThreadPoolSize);\r\n    threadPool = new ThreadPoolExecutor(initSize, Integer.MAX_VALUE, 1, TimeUnit.HOURS, new LinkedBlockingQueue<Runnable>(), tf);\r\n    eventDispatcherThread = new Thread() {\r\n\r\n        @Override\r\n        public void run() {\r\n            ContainerEvent event = null;\r\n            Set<String> allNodes = new HashSet<String>();\r\n            while (!stopped.get() && !Thread.currentThread().isInterrupted()) {\r\n                try {\r\n                    event = events.take();\r\n                } catch (InterruptedException e) {\r\n                    if (!stopped.get()) {\r\n                        LOG.error(\"Returning, thread interrupted\", e);\r\n                    }\r\n                    return;\r\n                }\r\n                allNodes.add(event.getNodeId().toString());\r\n                int threadPoolSize = threadPool.getCorePoolSize();\r\n                if (threadPoolSize != maxThreadPoolSize) {\r\n                    int nodeNum = allNodes.size();\r\n                    int idealThreadPoolSize = Math.min(maxThreadPoolSize, nodeNum);\r\n                    if (threadPoolSize < idealThreadPoolSize) {\r\n                        int newThreadPoolSize = Math.min(maxThreadPoolSize, idealThreadPoolSize + INITIAL_THREAD_POOL_SIZE);\r\n                        LOG.info(\"Set NMClientAsync thread pool size to \" + newThreadPoolSize + \" as the number of nodes to talk to is \" + nodeNum);\r\n                        threadPool.setCorePoolSize(newThreadPoolSize);\r\n                    }\r\n                }\r\n                threadPool.execute(getContainerEventProcessor(event));\r\n            }\r\n        }\r\n    };\r\n    eventDispatcherThread.setName(\"Container  Event Dispatcher\");\r\n    eventDispatcherThread.setDaemon(false);\r\n    eventDispatcherThread.start();\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "serviceStop",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (stopped.getAndSet(true)) {\r\n        return;\r\n    }\r\n    if (eventDispatcherThread != null) {\r\n        eventDispatcherThread.interrupt();\r\n        try {\r\n            eventDispatcherThread.join();\r\n        } catch (InterruptedException e) {\r\n            LOG.error(\"The thread of \" + eventDispatcherThread.getName() + \" didn't finish normally.\", e);\r\n        }\r\n    }\r\n    if (threadPool != null) {\r\n        threadPool.shutdownNow();\r\n    }\r\n    if (client != null) {\r\n        if (!(client instanceof NMClientImpl) || ((NMClientImpl) client).getCleanupRunningContainers().get()) {\r\n            if (containers != null) {\r\n                containers.clear();\r\n            }\r\n        }\r\n        client.stop();\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "startContainerAsync",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void startContainerAsync(Container container, ContainerLaunchContext containerLaunchContext)\n{\r\n    if (containers.putIfAbsent(container.getId(), new StatefulContainer(this, container.getId())) != null) {\r\n        callbackHandler.onStartContainerError(container.getId(), RPCUtil.getRemoteException(\"Container \" + container.getId() + \" is already started or scheduled to start\"));\r\n    }\r\n    try {\r\n        events.put(new StartContainerEvent(container, containerLaunchContext));\r\n    } catch (InterruptedException e) {\r\n        LOG.warn(\"Exception when scheduling the event of starting Container \" + container.getId());\r\n        callbackHandler.onStartContainerError(container.getId(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "increaseContainerResourceAsync",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void increaseContainerResourceAsync(Container container)\n{\r\n    if (!(callbackHandler instanceof AbstractCallbackHandler)) {\r\n        LOG.error(\"Callback handler does not implement container resource \" + \"increase callback methods\");\r\n        return;\r\n    }\r\n    AbstractCallbackHandler handler = (AbstractCallbackHandler) callbackHandler;\r\n    if (containers.get(container.getId()) == null) {\r\n        handler.onIncreaseContainerResourceError(container.getId(), RPCUtil.getRemoteException(\"Container \" + container.getId() + \" is neither started nor scheduled to start\"));\r\n    }\r\n    try {\r\n        events.put(new UpdateContainerResourceEvent(container, true));\r\n    } catch (InterruptedException e) {\r\n        LOG.warn(\"Exception when scheduling the event of increasing resource of \" + \"Container \" + container.getId());\r\n        handler.onIncreaseContainerResourceError(container.getId(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "updateContainerResourceAsync",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void updateContainerResourceAsync(Container container)\n{\r\n    if (!(callbackHandler instanceof AbstractCallbackHandler)) {\r\n        LOG.error(\"Callback handler does not implement container resource \" + \"increase callback methods\");\r\n        return;\r\n    }\r\n    AbstractCallbackHandler handler = (AbstractCallbackHandler) callbackHandler;\r\n    if (containers.get(container.getId()) == null) {\r\n        handler.onUpdateContainerResourceError(container.getId(), RPCUtil.getRemoteException(\"Container \" + container.getId() + \" is neither started nor scheduled to start\"));\r\n    }\r\n    try {\r\n        events.put(new UpdateContainerResourceEvent(container, false));\r\n    } catch (InterruptedException e) {\r\n        LOG.warn(\"Exception when scheduling the event of increasing resource of \" + \"Container \" + container.getId());\r\n        handler.onUpdateContainerResourceError(container.getId(), e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "reInitializeContainerAsync",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void reInitializeContainerAsync(ContainerId containerId, ContainerLaunchContext containerLaunchContex, boolean autoCommit)\n{\r\n    if (!(callbackHandler instanceof AbstractCallbackHandler)) {\r\n        LOG.error(\"Callback handler does not implement container re-initialize \" + \"callback methods\");\r\n        return;\r\n    }\r\n    AbstractCallbackHandler handler = (AbstractCallbackHandler) callbackHandler;\r\n    if (containers.get(containerId) == null) {\r\n        handler.onContainerReInitializeError(containerId, RPCUtil.getRemoteException(\"Container \" + containerId + \" is not started\"));\r\n    }\r\n    try {\r\n        events.put(new ReInitializeContainerEvevnt(containerId, client.getNodeIdOfStartedContainer(containerId), containerLaunchContex, autoCommit));\r\n    } catch (InterruptedException e) {\r\n        LOG.warn(\"Exception when scheduling the event of re-initializing of \" + \"Container \" + containerId);\r\n        handler.onContainerReInitializeError(containerId, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "restartContainerAsync",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void restartContainerAsync(ContainerId containerId)\n{\r\n    if (!(callbackHandler instanceof AbstractCallbackHandler)) {\r\n        LOG.error(\"Callback handler does not implement container restart \" + \"callback methods\");\r\n        return;\r\n    }\r\n    AbstractCallbackHandler handler = (AbstractCallbackHandler) callbackHandler;\r\n    if (containers.get(containerId) == null) {\r\n        handler.onContainerRestartError(containerId, RPCUtil.getRemoteException(\"Container \" + containerId + \" is not started\"));\r\n    }\r\n    try {\r\n        events.put(new ContainerEvent(containerId, client.getNodeIdOfStartedContainer(containerId), null, ContainerEventType.RESTART_CONTAINER));\r\n    } catch (InterruptedException e) {\r\n        LOG.warn(\"Exception when scheduling the event of restart of \" + \"Container \" + containerId);\r\n        handler.onContainerRestartError(containerId, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "rollbackLastReInitializationAsync",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void rollbackLastReInitializationAsync(ContainerId containerId)\n{\r\n    if (!(callbackHandler instanceof AbstractCallbackHandler)) {\r\n        LOG.error(\"Callback handler does not implement container rollback \" + \"callback methods\");\r\n        return;\r\n    }\r\n    AbstractCallbackHandler handler = (AbstractCallbackHandler) callbackHandler;\r\n    if (containers.get(containerId) == null) {\r\n        handler.onRollbackLastReInitializationError(containerId, RPCUtil.getRemoteException(\"Container \" + containerId + \" is not started\"));\r\n    }\r\n    try {\r\n        events.put(new ContainerEvent(containerId, client.getNodeIdOfStartedContainer(containerId), null, ContainerEventType.ROLLBACK_LAST_REINIT));\r\n    } catch (InterruptedException e) {\r\n        LOG.warn(\"Exception when scheduling the event Rollback re-initialization\" + \" of Container \" + containerId);\r\n        handler.onRollbackLastReInitializationError(containerId, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "commitLastReInitializationAsync",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void commitLastReInitializationAsync(ContainerId containerId)\n{\r\n    if (!(callbackHandler instanceof AbstractCallbackHandler)) {\r\n        LOG.error(\"Callback handler does not implement container commit last \" + \"re-initialization callback methods\");\r\n        return;\r\n    }\r\n    AbstractCallbackHandler handler = (AbstractCallbackHandler) callbackHandler;\r\n    if (containers.get(containerId) == null) {\r\n        handler.onCommitLastReInitializationError(containerId, RPCUtil.getRemoteException(\"Container \" + containerId + \" is not started\"));\r\n    }\r\n    try {\r\n        events.put(new ContainerEvent(containerId, client.getNodeIdOfStartedContainer(containerId), null, ContainerEventType.COMMIT_LAST_REINT));\r\n    } catch (InterruptedException e) {\r\n        LOG.warn(\"Exception when scheduling the event Commit re-initialization\" + \" of Container \" + containerId);\r\n        handler.onCommitLastReInitializationError(containerId, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "stopContainerAsync",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void stopContainerAsync(ContainerId containerId, NodeId nodeId)\n{\r\n    if (containers.get(containerId) == null) {\r\n        callbackHandler.onStopContainerError(containerId, RPCUtil.getRemoteException(\"Container \" + containerId + \" is neither started nor scheduled to start\"));\r\n    }\r\n    try {\r\n        events.put(new ContainerEvent(containerId, nodeId, null, ContainerEventType.STOP_CONTAINER));\r\n    } catch (InterruptedException e) {\r\n        LOG.warn(\"Exception when scheduling the event of stopping Container \" + containerId);\r\n        callbackHandler.onStopContainerError(containerId, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "getContainerStatusAsync",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void getContainerStatusAsync(ContainerId containerId, NodeId nodeId)\n{\r\n    try {\r\n        events.put(new ContainerEvent(containerId, nodeId, null, ContainerEventType.QUERY_CONTAINER));\r\n    } catch (InterruptedException e) {\r\n        LOG.warn(\"Exception when scheduling the event of querying the status\" + \" of Container \" + containerId);\r\n        callbackHandler.onGetContainerStatusError(containerId, e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "isCompletelyDone",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isCompletelyDone(StatefulContainer container)\n{\r\n    return container.getState() == ContainerState.DONE || container.getState() == ContainerState.FAILED;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async\\impl",
  "methodName" : "getContainerEventProcessor",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerEventProcessor getContainerEventProcessor(ContainerEvent event)\n{\r\n    return new ContainerEventProcessor(event);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "createNMClientAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMClientAsync createNMClientAsync(AbstractCallbackHandler callbackHandler)\n{\r\n    return new NMClientAsyncImpl(callbackHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "createNMClientAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMClientAsync createNMClientAsync(CallbackHandler callbackHandler)\n{\r\n    return new NMClientAsyncImpl(callbackHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "startContainerAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void startContainerAsync(Container container, ContainerLaunchContext containerLaunchContext)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "increaseContainerResourceAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void increaseContainerResourceAsync(Container container)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "updateContainerResourceAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateContainerResourceAsync(Container container)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "reInitializeContainerAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void reInitializeContainerAsync(ContainerId containerId, ContainerLaunchContext containerLaunchContex, boolean autoCommit)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "restartContainerAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void restartContainerAsync(ContainerId containerId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "rollbackLastReInitializationAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void rollbackLastReInitializationAsync(ContainerId containerId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "commitLastReInitializationAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void commitLastReInitializationAsync(ContainerId containerId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "stopContainerAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void stopContainerAsync(ContainerId containerId, NodeId nodeId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "getContainerStatusAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void getContainerStatusAsync(ContainerId containerId, NodeId nodeId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "getClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMClient getClient()\n{\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "setClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setClient(NMClient client)\n{\r\n    this.client = client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "getCallbackHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CallbackHandler getCallbackHandler()\n{\r\n    return callbackHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "setCallbackHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setCallbackHandler(CallbackHandler callbackHandler)\n{\r\n    this.callbackHandler = callbackHandler;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    RackResolver.init(conf);\r\n    super.serviceInit(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStart",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceStart() throws Exception\n{\r\n    final YarnConfiguration conf = new YarnConfiguration(getConfig());\r\n    try {\r\n        if (rmClient == null) {\r\n            rmClient = ClientRMProxy.createRMProxy(conf, ApplicationMasterProtocol.class);\r\n        }\r\n    } catch (IOException e) {\r\n        throw new YarnRuntimeException(e);\r\n    }\r\n    super.serviceStart();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (this.rmClient != null) {\r\n        RPC.stopProxy(this.rmClient);\r\n    }\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(String appHostName, int appHostPort, String appTrackingUrl) throws YarnException, IOException\n{\r\n    return registerApplicationMaster(appHostName, appHostPort, appTrackingUrl, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(String appHostName, int appHostPort, String appTrackingUrl, Map<Set<String>, PlacementConstraint> placementConstraintsMap) throws YarnException, IOException\n{\r\n    this.appHostName = appHostName;\r\n    this.appHostPort = appHostPort;\r\n    this.appTrackingUrl = appTrackingUrl;\r\n    if (placementConstraintsMap != null && !placementConstraintsMap.isEmpty()) {\r\n        this.placementConstraints.putAll(placementConstraintsMap);\r\n    }\r\n    Preconditions.checkArgument(appHostName != null, \"The host name should not be null\");\r\n    Preconditions.checkArgument(appHostPort >= -1, \"Port number of the host\" + \" should be any integers larger than or equal to -1\");\r\n    return registerApplicationMaster();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster() throws YarnException, IOException\n{\r\n    RegisterApplicationMasterRequest request = RegisterApplicationMasterRequest.newInstance(this.appHostName, this.appHostPort, this.appTrackingUrl);\r\n    if (!this.placementConstraints.isEmpty()) {\r\n        request.setPlacementConstraints(this.placementConstraints);\r\n    }\r\n    RegisterApplicationMasterResponse response = rmClient.registerApplicationMaster(request);\r\n    synchronized (this) {\r\n        lastResponseId = 0;\r\n        if (!response.getNMTokensFromPreviousAttempts().isEmpty()) {\r\n            populateNMTokens(response.getNMTokensFromPreviousAttempts());\r\n        }\r\n        this.resourceProfilesMap = response.getResourceProfiles();\r\n        List<Container> prevContainers = response.getContainersFromPreviousAttempts();\r\n        AMRMClientUtils.removeFromOutstandingSchedulingRequests(prevContainers, this.outstandingSchedRequests);\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "addSchedulingRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addSchedulingRequests(Collection<SchedulingRequest> newSchedulingRequests)\n{\r\n    this.schedulingRequests.addAll(newSchedulingRequests);\r\n    AMRMClientUtils.addToOutstandingSchedulingRequests(newSchedulingRequests, this.outstandingSchedRequests);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "allocate",
  "errType" : [ "ApplicationMasterNotRegisteredException" ],
  "containingMethodsNum" : 59,
  "sourceCodeText" : "AllocateResponse allocate(float progressIndicator) throws YarnException, IOException\n{\r\n    Preconditions.checkArgument(progressIndicator >= 0, \"Progress indicator should not be negative\");\r\n    AllocateResponse allocateResponse = null;\r\n    List<ResourceRequest> askList = null;\r\n    List<ContainerId> releaseList = null;\r\n    AllocateRequest allocateRequest = null;\r\n    List<String> blacklistToAdd = new ArrayList<String>();\r\n    List<String> blacklistToRemove = new ArrayList<String>();\r\n    Map<ContainerId, SimpleEntry<Container, UpdateContainerRequest>> oldChange = new HashMap<>();\r\n    List<SchedulingRequest> schedulingRequestList = new LinkedList<>();\r\n    try {\r\n        synchronized (this) {\r\n            askList = cloneAsks();\r\n            oldChange.putAll(change);\r\n            List<UpdateContainerRequest> updateList = createUpdateList();\r\n            releaseList = new ArrayList<ContainerId>(release);\r\n            schedulingRequestList = new ArrayList<>(schedulingRequests);\r\n            ask.clear();\r\n            release.clear();\r\n            change.clear();\r\n            schedulingRequests.clear();\r\n            blacklistToAdd.addAll(blacklistAdditions);\r\n            blacklistToRemove.addAll(blacklistRemovals);\r\n            ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(blacklistToAdd, blacklistToRemove);\r\n            allocateRequest = AllocateRequest.newBuilder().responseId(lastResponseId).progress(progressIndicator).askList(askList).resourceBlacklistRequest(blacklistRequest).releaseList(releaseList).updateRequests(updateList).schedulingRequests(schedulingRequestList).build();\r\n            if (this.newTrackingUrl != null) {\r\n                allocateRequest.setTrackingUrl(this.newTrackingUrl);\r\n                this.appTrackingUrl = this.newTrackingUrl;\r\n                this.newTrackingUrl = null;\r\n            }\r\n            blacklistAdditions.clear();\r\n            blacklistRemovals.clear();\r\n        }\r\n        try {\r\n            allocateResponse = rmClient.allocate(allocateRequest);\r\n        } catch (ApplicationMasterNotRegisteredException e) {\r\n            LOG.warn(\"ApplicationMaster is out of sync with ResourceManager,\" + \" hence resyncing.\");\r\n            synchronized (this) {\r\n                release.addAll(this.pendingRelease);\r\n                blacklistAdditions.addAll(this.blacklistedNodes);\r\n                for (RemoteRequestsTable remoteRequestsTable : remoteRequests.values()) {\r\n                    @SuppressWarnings(\"unchecked\")\r\n                    Iterator<ResourceRequestInfo<T>> reqIter = remoteRequestsTable.iterator();\r\n                    while (reqIter.hasNext()) {\r\n                        addResourceRequestToAsk(reqIter.next().remoteRequest);\r\n                    }\r\n                }\r\n                change.putAll(this.pendingChange);\r\n                for (List<SchedulingRequest> schedReqs : this.outstandingSchedRequests.values()) {\r\n                    this.schedulingRequests.addAll(schedReqs);\r\n                }\r\n            }\r\n            registerApplicationMaster();\r\n            allocateResponse = allocate(progressIndicator);\r\n            return allocateResponse;\r\n        }\r\n        synchronized (this) {\r\n            clusterNodeCount = allocateResponse.getNumClusterNodes();\r\n            lastResponseId = allocateResponse.getResponseId();\r\n            clusterAvailableResources = allocateResponse.getAvailableResources();\r\n            if (!allocateResponse.getNMTokens().isEmpty()) {\r\n                populateNMTokens(allocateResponse.getNMTokens());\r\n            }\r\n            if (allocateResponse.getAMRMToken() != null) {\r\n                updateAMRMToken(allocateResponse.getAMRMToken());\r\n            }\r\n            if (!pendingRelease.isEmpty() && !allocateResponse.getCompletedContainersStatuses().isEmpty()) {\r\n                removePendingReleaseRequests(allocateResponse.getCompletedContainersStatuses());\r\n            }\r\n            if (!pendingChange.isEmpty()) {\r\n                List<ContainerStatus> completed = allocateResponse.getCompletedContainersStatuses();\r\n                List<UpdatedContainer> changed = new ArrayList<>();\r\n                changed.addAll(allocateResponse.getUpdatedContainers());\r\n                for (ContainerStatus status : completed) {\r\n                    ContainerId containerId = status.getContainerId();\r\n                    pendingChange.remove(containerId);\r\n                }\r\n                if (!changed.isEmpty()) {\r\n                    removePendingChangeRequests(changed);\r\n                }\r\n            }\r\n            AMRMClientUtils.removeFromOutstandingSchedulingRequests(allocateResponse.getAllocatedContainers(), this.outstandingSchedRequests);\r\n            AMRMClientUtils.removeFromOutstandingSchedulingRequests(allocateResponse.getContainersFromPreviousAttempts(), this.outstandingSchedRequests);\r\n        }\r\n    } finally {\r\n        if (allocateResponse == null) {\r\n            synchronized (this) {\r\n                release.addAll(releaseList);\r\n                for (ResourceRequest oldAsk : askList) {\r\n                    if (!ask.contains(oldAsk)) {\r\n                        ask.add(oldAsk);\r\n                    }\r\n                }\r\n                for (Map.Entry<ContainerId, SimpleEntry<Container, UpdateContainerRequest>> entry : oldChange.entrySet()) {\r\n                    ContainerId oldContainerId = entry.getKey();\r\n                    Container oldContainer = entry.getValue().getKey();\r\n                    UpdateContainerRequest oldupdate = entry.getValue().getValue();\r\n                    if (change.get(oldContainerId) == null) {\r\n                        change.put(oldContainerId, new SimpleEntry<>(oldContainer, oldupdate));\r\n                    }\r\n                }\r\n                blacklistAdditions.addAll(blacklistToAdd);\r\n                blacklistRemovals.addAll(blacklistToRemove);\r\n                schedulingRequests.addAll(schedulingRequestList);\r\n            }\r\n        }\r\n    }\r\n    return allocateResponse;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "createUpdateList",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<UpdateContainerRequest> createUpdateList()\n{\r\n    List<UpdateContainerRequest> updateList = new ArrayList<>();\r\n    for (Map.Entry<ContainerId, SimpleEntry<Container, UpdateContainerRequest>> entry : change.entrySet()) {\r\n        Resource targetCapability = entry.getValue().getValue().getCapability();\r\n        ExecutionType targetExecType = entry.getValue().getValue().getExecutionType();\r\n        ContainerUpdateType updateType = entry.getValue().getValue().getContainerUpdateType();\r\n        int version = entry.getValue().getKey().getVersion();\r\n        updateList.add(UpdateContainerRequest.newInstance(version, entry.getKey(), updateType, targetCapability, targetExecType));\r\n    }\r\n    return updateList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "cloneAsks",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<ResourceRequest> cloneAsks()\n{\r\n    List<ResourceRequest> askList = new ArrayList<ResourceRequest>(ask.size());\r\n    for (ResourceRequest r : ask) {\r\n        askList.add(ResourceRequest.clone(r));\r\n    }\r\n    return askList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "removePendingReleaseRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removePendingReleaseRequests(List<ContainerStatus> completedContainersStatuses)\n{\r\n    for (ContainerStatus containerStatus : completedContainersStatuses) {\r\n        pendingRelease.remove(containerStatus.getContainerId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "removePendingChangeRequests",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void removePendingChangeRequests(List<UpdatedContainer> changedContainers)\n{\r\n    for (UpdatedContainer changedContainer : changedContainers) {\r\n        ContainerId containerId = changedContainer.getContainer().getId();\r\n        if (pendingChange.get(containerId) == null) {\r\n            continue;\r\n        }\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"RM has confirmed changed resource allocation for \" + \"container \" + containerId + \". Current resource allocation:\" + changedContainer.getContainer().getResource() + \". Remove pending change request:\" + pendingChange.get(containerId).getValue());\r\n        }\r\n        pendingChange.remove(containerId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "populateNMTokens",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void populateNMTokens(List<NMToken> nmTokens)\n{\r\n    for (NMToken token : nmTokens) {\r\n        String nodeId = token.getNodeId().toString();\r\n        if (LOG.isDebugEnabled()) {\r\n            if (getNMTokenCache().containsToken(nodeId)) {\r\n                LOG.debug(\"Replacing token for : \" + nodeId);\r\n            } else {\r\n                LOG.debug(\"Received new token for : \" + nodeId);\r\n            }\r\n        }\r\n        getNMTokenCache().setToken(nodeId, token.getToken());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "unregisterApplicationMaster",
  "errType" : [ "InterruptedException", "ApplicationMasterNotRegisteredException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void unregisterApplicationMaster(FinalApplicationStatus appStatus, String appMessage, String appTrackingUrl) throws YarnException, IOException\n{\r\n    Preconditions.checkArgument(appStatus != null, \"AppStatus should not be null.\");\r\n    FinishApplicationMasterRequest request = FinishApplicationMasterRequest.newInstance(appStatus, appMessage, appTrackingUrl);\r\n    try {\r\n        while (true) {\r\n            FinishApplicationMasterResponse response = rmClient.finishApplicationMaster(request);\r\n            if (response.getIsUnregistered()) {\r\n                break;\r\n            }\r\n            LOG.info(\"Waiting for application to be successfully unregistered.\");\r\n            Thread.sleep(100);\r\n        }\r\n    } catch (InterruptedException e) {\r\n        LOG.info(\"Interrupted while waiting for application\" + \" to be removed from RMStateStore\");\r\n    } catch (ApplicationMasterNotRegisteredException e) {\r\n        LOG.warn(\"ApplicationMaster is out of sync with ResourceManager,\" + \" hence resyncing.\");\r\n        registerApplicationMaster();\r\n        unregisterApplicationMaster(appStatus, appMessage, appTrackingUrl);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "addContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void addContainerRequest(T req)\n{\r\n    Preconditions.checkArgument(req != null, \"Resource request can not be null.\");\r\n    Set<String> dedupedRacks = new HashSet<String>();\r\n    if (req.getRacks() != null) {\r\n        dedupedRacks.addAll(req.getRacks());\r\n        if (req.getRacks().size() != dedupedRacks.size()) {\r\n            Joiner joiner = Joiner.on(',');\r\n            LOG.warn(\"ContainerRequest has duplicate racks: \" + joiner.join(req.getRacks()));\r\n        }\r\n    }\r\n    Set<String> inferredRacks = resolveRacks(req.getNodes());\r\n    inferredRacks.removeAll(dedupedRacks);\r\n    Resource resource = checkAndGetResourceProfile(req.getResourceProfile(), req.getCapability());\r\n    checkLocalityRelaxationConflict(req.getAllocationRequestId(), req.getPriority(), ANY_LIST, req.getRelaxLocality());\r\n    checkLocalityRelaxationConflict(req.getAllocationRequestId(), req.getPriority(), dedupedRacks, true);\r\n    checkLocalityRelaxationConflict(req.getAllocationRequestId(), req.getPriority(), inferredRacks, req.getRelaxLocality());\r\n    checkNodeLabelExpression(req);\r\n    if (req.getNodes() != null) {\r\n        HashSet<String> dedupedNodes = new HashSet<String>(req.getNodes());\r\n        if (dedupedNodes.size() != req.getNodes().size()) {\r\n            Joiner joiner = Joiner.on(',');\r\n            LOG.warn(\"ContainerRequest has duplicate nodes: \" + joiner.join(req.getNodes()));\r\n        }\r\n        for (String node : dedupedNodes) {\r\n            addResourceRequest(req.getPriority(), node, req.getExecutionTypeRequest(), resource, req, true, req.getNodeLabelExpression());\r\n        }\r\n    }\r\n    for (String rack : dedupedRacks) {\r\n        addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(), resource, req, true, req.getNodeLabelExpression());\r\n    }\r\n    for (String rack : inferredRacks) {\r\n        addResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(), resource, req, req.getRelaxLocality(), req.getNodeLabelExpression());\r\n    }\r\n    addResourceRequest(req.getPriority(), ResourceRequest.ANY, req.getExecutionTypeRequest(), resource, req, req.getRelaxLocality(), req.getNodeLabelExpression());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "removeContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void removeContainerRequest(T req)\n{\r\n    Preconditions.checkArgument(req != null, \"Resource request can not be null.\");\r\n    Resource resource = checkAndGetResourceProfile(req.getResourceProfile(), req.getCapability());\r\n    Set<String> allRacks = new HashSet<String>();\r\n    if (req.getRacks() != null) {\r\n        allRacks.addAll(req.getRacks());\r\n    }\r\n    allRacks.addAll(resolveRacks(req.getNodes()));\r\n    if (req.getNodes() != null) {\r\n        for (String node : new HashSet<String>(req.getNodes())) {\r\n            decResourceRequest(req.getPriority(), node, req.getExecutionTypeRequest(), resource, req);\r\n        }\r\n    }\r\n    for (String rack : allRacks) {\r\n        decResourceRequest(req.getPriority(), rack, req.getExecutionTypeRequest(), resource, req);\r\n    }\r\n    decResourceRequest(req.getPriority(), ResourceRequest.ANY, req.getExecutionTypeRequest(), resource, req);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "requestContainerUpdate",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void requestContainerUpdate(Container container, UpdateContainerRequest updateContainerRequest)\n{\r\n    Preconditions.checkNotNull(container, \"Container cannot be null!!\");\r\n    Preconditions.checkNotNull(updateContainerRequest, \"UpdateContainerRequest cannot be null!!\");\r\n    LOG.info(\"Requesting Container update : \" + \"container=\" + container + \", \" + \"updateType=\" + updateContainerRequest.getContainerUpdateType() + \", \" + \"targetCapability=\" + updateContainerRequest.getCapability() + \", \" + \"targetExecType=\" + updateContainerRequest.getExecutionType());\r\n    if (updateContainerRequest.getCapability() != null && updateContainerRequest.getExecutionType() == null) {\r\n        validateContainerResourceChangeRequest(updateContainerRequest.getContainerUpdateType(), container.getId(), container.getResource(), updateContainerRequest.getCapability());\r\n    } else if (updateContainerRequest.getExecutionType() != null && updateContainerRequest.getCapability() == null) {\r\n        validateContainerExecTypeChangeRequest(updateContainerRequest.getContainerUpdateType(), container.getId(), container.getExecutionType(), updateContainerRequest.getExecutionType());\r\n    } else if (updateContainerRequest.getExecutionType() == null && updateContainerRequest.getCapability() == null) {\r\n        throw new IllegalArgumentException(\"Both target Capability and\" + \"target Execution Type are null\");\r\n    } else {\r\n        throw new IllegalArgumentException(\"Support currently exists only for\" + \" EITHER update of Capability OR update of Execution Type NOT both\");\r\n    }\r\n    if (change.get(container.getId()) == null) {\r\n        change.put(container.getId(), new SimpleEntry<>(container, updateContainerRequest));\r\n    } else {\r\n        change.get(container.getId()).setValue(updateContainerRequest);\r\n    }\r\n    if (pendingChange.get(container.getId()) == null) {\r\n        pendingChange.put(container.getId(), new SimpleEntry<>(container, updateContainerRequest));\r\n    } else {\r\n        pendingChange.get(container.getId()).setValue(updateContainerRequest);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "releaseAssignedContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void releaseAssignedContainer(ContainerId containerId)\n{\r\n    Preconditions.checkArgument(containerId != null, \"ContainerId can not be null.\");\r\n    pendingRelease.add(containerId);\r\n    release.add(containerId);\r\n    pendingChange.remove(containerId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getAvailableResources",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getAvailableResources()\n{\r\n    return clusterAvailableResources;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getClusterNodeCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getClusterNodeCount()\n{\r\n    return clusterNodeCount;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Collection<T> getMatchingRequests(long allocationRequestId)\n{\r\n    RemoteRequestsTable remoteRequestsTable = getTable(allocationRequestId);\r\n    LinkedHashSet<T> list = new LinkedHashSet<>();\r\n    if (remoteRequestsTable != null) {\r\n        Iterator<ResourceRequestInfo<T>> reqIter = remoteRequestsTable.iterator();\r\n        while (reqIter.hasNext()) {\r\n            ResourceRequestInfo<T> resReqInfo = reqIter.next();\r\n            list.addAll(resReqInfo.containerRequests);\r\n        }\r\n    }\r\n    return list;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<? extends Collection<T>> getMatchingRequests(Priority priority, String resourceName, Resource capability)\n{\r\n    return getMatchingRequests(priority, resourceName, ExecutionType.GUARANTEED, capability);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<? extends Collection<T>> getMatchingRequests(Priority priority, String resourceName, ExecutionType executionType, Resource capability, String profile)\n{\r\n    capability = checkAndGetResourceProfile(profile, capability);\r\n    return getMatchingRequests(priority, resourceName, executionType, capability);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<? extends Collection<T>> getMatchingRequests(Priority priority, String resourceName, ExecutionType executionType, Resource capability)\n{\r\n    Preconditions.checkArgument(capability != null, \"The Resource to be requested should not be null \");\r\n    Preconditions.checkArgument(priority != null, \"The priority at which to request containers should not be null \");\r\n    List<LinkedHashSet<T>> list = new LinkedList<>();\r\n    RemoteRequestsTable remoteRequestsTable = getTable(0);\r\n    if (null != remoteRequestsTable) {\r\n        List<ResourceRequestInfo<T>> matchingRequests = remoteRequestsTable.getMatchingRequests(priority, resourceName, executionType, capability);\r\n        if (null != matchingRequests) {\r\n            for (ResourceRequestInfo<T> resReqInfo : matchingRequests) {\r\n                if (Resources.fitsIn(resReqInfo.remoteRequest.getCapability(), capability) && !resReqInfo.containerRequests.isEmpty()) {\r\n                    list.add(resReqInfo.containerRequests);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return list;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "resolveRacks",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Set<String> resolveRacks(List<String> nodes)\n{\r\n    Set<String> racks = new HashSet<String>();\r\n    if (nodes != null) {\r\n        List<Node> tmpList = RackResolver.resolve(nodes);\r\n        for (Node node : tmpList) {\r\n            String rack = node.getNetworkLocation();\r\n            if (rack == null) {\r\n                LOG.warn(\"Failed to resolve rack for node \" + node + \".\");\r\n            } else {\r\n                racks.add(rack);\r\n            }\r\n        }\r\n    }\r\n    return racks;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "checkLocalityRelaxationConflict",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkLocalityRelaxationConflict(Long allocationReqId, Priority priority, Collection<String> locations, boolean relaxLocality)\n{\r\n    RemoteRequestsTable<T> remoteRequestsTable = getTable(allocationReqId);\r\n    if (remoteRequestsTable != null) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        List<ResourceRequestInfo> allCapabilityMaps = remoteRequestsTable.getAllResourceRequestInfos(priority, locations);\r\n        for (ResourceRequestInfo reqs : allCapabilityMaps) {\r\n            ResourceRequest remoteRequest = reqs.remoteRequest;\r\n            boolean existingRelaxLocality = remoteRequest.getRelaxLocality();\r\n            if (relaxLocality != existingRelaxLocality) {\r\n                throw new InvalidContainerRequestException(\"Cannot submit a \" + \"ContainerRequest asking for location \" + remoteRequest.getResourceName() + \" with locality relaxation \" + relaxLocality + \" when it has already been requested\" + \"with locality relaxation \" + existingRelaxLocality);\r\n            }\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "checkAndGetResourceProfile",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Resource checkAndGetResourceProfile(String profile, Resource overrideResource)\n{\r\n    Resource returnResource = overrideResource;\r\n    if (profile != null && !profile.isEmpty()) {\r\n        if (resourceProfilesMap == null || (!resourceProfilesMap.containsKey(profile))) {\r\n            throw new InvalidContainerRequestException(\"Invalid profile name specified=\" + profile + (resourceProfilesMap == null ? \"\" : (\", valid profile names are \" + resourceProfilesMap.keySet())));\r\n        }\r\n        returnResource = Resources.clone(resourceProfilesMap.get(profile));\r\n        for (ResourceInformation info : overrideResource.getAllResourcesListCopy()) {\r\n            if (info.getValue() > 0) {\r\n                returnResource.setResourceInformation(info.getName(), info);\r\n            }\r\n        }\r\n    }\r\n    return returnResource;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "checkNodeLabelExpression",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkNodeLabelExpression(T containerRequest)\n{\r\n    String exp = containerRequest.getNodeLabelExpression();\r\n    if (null == exp || exp.isEmpty()) {\r\n        return;\r\n    }\r\n    if (exp.contains(\"&&\") || exp.contains(\"||\")) {\r\n        throw new InvalidContainerRequestException(\"Cannot specify more than one node label\" + \" in a single node label expression\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "validateContainerResourceChangeRequest",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void validateContainerResourceChangeRequest(ContainerUpdateType updateType, ContainerId containerId, Resource original, Resource target)\n{\r\n    Preconditions.checkArgument(containerId != null, \"ContainerId cannot be null\");\r\n    Preconditions.checkArgument(original != null, \"Original resource capability cannot be null\");\r\n    Preconditions.checkArgument(!Resources.equals(Resources.none(), original) && Resources.fitsIn(Resources.none(), original), \"Original resource capability must be greater than 0\");\r\n    Preconditions.checkArgument(target != null, \"Target resource capability cannot be null\");\r\n    Preconditions.checkArgument(!Resources.equals(Resources.none(), target) && Resources.fitsIn(Resources.none(), target), \"Target resource capability must be greater than 0\");\r\n    if (ContainerUpdateType.DECREASE_RESOURCE == updateType) {\r\n        Preconditions.checkArgument(Resources.fitsIn(target, original), \"Target resource capability must fit in Original capability\");\r\n    } else {\r\n        Preconditions.checkArgument(Resources.fitsIn(original, target), \"Target resource capability must be more than Original capability\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "validateContainerExecTypeChangeRequest",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void validateContainerExecTypeChangeRequest(ContainerUpdateType updateType, ContainerId containerId, ExecutionType original, ExecutionType target)\n{\r\n    Preconditions.checkArgument(containerId != null, \"ContainerId cannot be null\");\r\n    Preconditions.checkArgument(original != null, \"Original Execution Type cannot be null\");\r\n    Preconditions.checkArgument(target != null, \"Target Execution Type cannot be null\");\r\n    if (ContainerUpdateType.DEMOTE_EXECUTION_TYPE == updateType) {\r\n        Preconditions.checkArgument(target == ExecutionType.OPPORTUNISTIC && original == ExecutionType.GUARANTEED, \"Incorrect Container update request, target should be\" + \" OPPORTUNISTIC and original should be GUARANTEED\");\r\n    } else {\r\n        Preconditions.checkArgument(target == ExecutionType.GUARANTEED && original == ExecutionType.OPPORTUNISTIC, \"Incorrect Container update request, target should be\" + \" GUARANTEED and original should be OPPORTUNISTIC\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "addResourceRequestToAsk",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addResourceRequestToAsk(ResourceRequest remoteRequest)\n{\r\n    if (ask.contains(remoteRequest)) {\r\n        ask.remove(remoteRequest);\r\n    }\r\n    ask.add(remoteRequest);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "addResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addResourceRequest(Priority priority, String resourceName, ExecutionTypeRequest execTypeReq, Resource capability, T req, boolean relaxLocality, String labelExpression)\n{\r\n    RemoteRequestsTable<T> remoteRequestsTable = getTable(req.getAllocationRequestId());\r\n    if (remoteRequestsTable == null) {\r\n        remoteRequestsTable = new RemoteRequestsTable<>();\r\n        putTable(req.getAllocationRequestId(), remoteRequestsTable);\r\n    }\r\n    @SuppressWarnings(\"unchecked\")\r\n    ResourceRequestInfo resourceRequestInfo = remoteRequestsTable.addResourceRequest(req.getAllocationRequestId(), priority, resourceName, execTypeReq, capability, req, relaxLocality, labelExpression);\r\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Adding request to ask \" + resourceRequestInfo.remoteRequest);\r\n        LOG.debug(\"addResourceRequest:\" + \" applicationId=\" + \" priority=\" + priority.getPriority() + \" resourceName=\" + resourceName + \" numContainers=\" + resourceRequestInfo.remoteRequest.getNumContainers() + \" #asks=\" + ask.size());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "decResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void decResourceRequest(Priority priority, String resourceName, ExecutionTypeRequest execTypeReq, Resource capability, T req)\n{\r\n    RemoteRequestsTable<T> remoteRequestsTable = getTable(req.getAllocationRequestId());\r\n    if (remoteRequestsTable != null) {\r\n        @SuppressWarnings(\"unchecked\")\r\n        ResourceRequestInfo resourceRequestInfo = remoteRequestsTable.decResourceRequest(priority, resourceName, execTypeReq, capability, req);\r\n        if (resourceRequestInfo != null) {\r\n            addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\r\n            if (resourceRequestInfo.remoteRequest.getNumContainers() == 0) {\r\n                remoteRequestsTable.remove(priority, resourceName, execTypeReq.getExecutionType(), capability);\r\n            }\r\n            if (LOG.isDebugEnabled()) {\r\n                LOG.debug(\"AFTER decResourceRequest:\" + \" allocationRequestId=\" + req.getAllocationRequestId() + \" priority=\" + priority.getPriority() + \" resourceName=\" + resourceName + \" numContainers=\" + resourceRequestInfo.remoteRequest.getNumContainers() + \" #asks=\" + ask.size());\r\n            }\r\n        }\r\n    } else {\r\n        LOG.info(\"No remoteRequestTable found with allocationRequestId=\" + req.getAllocationRequestId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "updateBlacklist",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void updateBlacklist(List<String> blacklistAdditions, List<String> blacklistRemovals)\n{\r\n    if (blacklistAdditions != null) {\r\n        this.blacklistAdditions.addAll(blacklistAdditions);\r\n        this.blacklistedNodes.addAll(blacklistAdditions);\r\n        this.blacklistRemovals.removeAll(blacklistAdditions);\r\n    }\r\n    if (blacklistRemovals != null) {\r\n        this.blacklistRemovals.addAll(blacklistRemovals);\r\n        this.blacklistedNodes.removeAll(blacklistRemovals);\r\n        this.blacklistAdditions.removeAll(blacklistRemovals);\r\n    }\r\n    if (blacklistAdditions != null && blacklistRemovals != null && blacklistAdditions.removeAll(blacklistRemovals)) {\r\n        LOG.warn(\"The same resources appear in both blacklistAdditions and \" + \"blacklistRemovals in updateBlacklist.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "updateTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateTrackingUrl(String trackingUrl)\n{\r\n    this.newTrackingUrl = trackingUrl;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "updateAMRMToken",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void updateAMRMToken(Token token) throws IOException\n{\r\n    org.apache.hadoop.security.token.Token<AMRMTokenIdentifier> amrmToken = new org.apache.hadoop.security.token.Token<AMRMTokenIdentifier>(token.getIdentifier().array(), token.getPassword().array(), new Text(token.getKind()), new Text(token.getService()));\r\n    UserGroupInformation currentUGI = UserGroupInformation.getCurrentUser();\r\n    currentUGI.addToken(amrmToken);\r\n    amrmToken.setService(ClientRMProxy.getAMRMTokenService(getConfig()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getTable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RemoteRequestsTable<T> getTable(long allocationRequestId)\n{\r\n    return remoteRequests.get(Long.valueOf(allocationRequestId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getOutstandingSchedRequests",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<Set<String>, List<SchedulingRequest>> getOutstandingSchedRequests()\n{\r\n    return outstandingSchedRequests;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "putTable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RemoteRequestsTable<T> putTable(long allocationRequestId, RemoteRequestsTable<T> table)\n{\r\n    return remoteRequests.put(Long.valueOf(allocationRequestId), table);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createAMRMClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMClient<T> createAMRMClient()\n{\r\n    AMRMClient<T> client = new AMRMClientImpl<T>();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "addSchedulingRequests",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void addSchedulingRequests(Collection<SchedulingRequest> schedulingRequests)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(String appHostName, int appHostPort, String appTrackingUrl) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(String appHostName, int appHostPort, String appTrackingUrl, Map<Set<String>, PlacementConstraint> placementConstraints) throws YarnException, IOException\n{\r\n    throw new YarnException(\"Not supported\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "allocate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AllocateResponse allocate(float progressIndicator) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "unregisterApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void unregisterApplicationMaster(FinalApplicationStatus appStatus, String appMessage, String appTrackingUrl) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "addContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void addContainerRequest(T req)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "removeContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeContainerRequest(T req)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "requestContainerResourceChange",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void requestContainerResourceChange(Container container, Resource capability)\n{\r\n    Preconditions.checkNotNull(container, \"Container cannot be null!!\");\r\n    Preconditions.checkNotNull(capability, \"UpdateContainerRequest cannot be null!!\");\r\n    requestContainerUpdate(container, UpdateContainerRequest.newInstance(container.getVersion(), container.getId(), Resources.fitsIn(capability, container.getResource()) ? ContainerUpdateType.DECREASE_RESOURCE : ContainerUpdateType.INCREASE_RESOURCE, capability, null));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "requestContainerUpdate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void requestContainerUpdate(Container container, UpdateContainerRequest updateContainerRequest)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "releaseAssignedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void releaseAssignedContainer(ContainerId containerId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getAvailableResources",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getAvailableResources()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getClusterNodeCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getClusterNodeCount()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<? extends Collection<T>> getMatchingRequests(Priority priority, String resourceName, Resource capability)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<? extends Collection<T>> getMatchingRequests(Priority priority, String resourceName, ExecutionType executionType, Resource capability)\n{\r\n    throw new UnsupportedOperationException(\"The sub-class extending\" + \" AMRMClient is expected to implement this !!\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<? extends Collection<T>> getMatchingRequests(Priority priority, String resourceName, ExecutionType executionType, Resource capability, String profile)\n{\r\n    throw new UnsupportedOperationException(\"The sub-class extending\" + \" AMRMClient is expected to implement this !!\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Collection<T> getMatchingRequests(long allocationRequestId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "updateBlacklist",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateBlacklist(List<String> blacklistAdditions, List<String> blacklistRemovals)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "setNMTokenCache",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNMTokenCache(NMTokenCache nmTokenCache)\n{\r\n    this.nmTokenCache = nmTokenCache;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getNMTokenCache",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMTokenCache getNMTokenCache()\n{\r\n    return nmTokenCache;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "registerTimelineV2Client",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void registerTimelineV2Client(TimelineV2Client client)\n{\r\n    timelineV2Client = client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getRegisteredTimelineV2Client",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "TimelineV2Client getRegisteredTimelineV2Client()\n{\r\n    return this.timelineV2Client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "updateTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateTrackingUrl(String trackingUrl)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "waitFor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitFor(Supplier<Boolean> check) throws InterruptedException\n{\r\n    waitFor(check, 1000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "waitFor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitFor(Supplier<Boolean> check, int checkEveryMillis) throws InterruptedException\n{\r\n    waitFor(check, checkEveryMillis, 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "waitFor",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void waitFor(Supplier<Boolean> check, int checkEveryMillis, int logInterval) throws InterruptedException\n{\r\n    Preconditions.checkNotNull(check, \"check should not be null\");\r\n    Preconditions.checkArgument(checkEveryMillis >= 0, \"checkEveryMillis should be positive value\");\r\n    Preconditions.checkArgument(logInterval >= 0, \"logInterval should be positive value\");\r\n    int loggingCounter = logInterval;\r\n    do {\r\n        LOG.debug(\"Check the condition for main loop.\");\r\n        boolean result = check.get();\r\n        if (result) {\r\n            LOG.info(\"Exits the main loop.\");\r\n            return;\r\n        }\r\n        if (--loggingCounter <= 0) {\r\n            LOG.info(\"Waiting in main loop.\");\r\n            loggingCounter = logInterval;\r\n        }\r\n        Thread.sleep(checkEveryMillis);\r\n    } while (true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "createAMRMClientAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMClientAsync<T> createAMRMClientAsync(int intervalMs, AbstractCallbackHandler callbackHandler)\n{\r\n    return new AMRMClientAsyncImpl<T>(intervalMs, callbackHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "createAMRMClientAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMClientAsync<T> createAMRMClientAsync(AMRMClient<T> client, int intervalMs, AbstractCallbackHandler callbackHandler)\n{\r\n    return new AMRMClientAsyncImpl<T>(client, intervalMs, callbackHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "createAMRMClientAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMClientAsync<T> createAMRMClientAsync(int intervalMs, CallbackHandler callbackHandler)\n{\r\n    return new AMRMClientAsyncImpl<T>(intervalMs, callbackHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "createAMRMClientAsync",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AMRMClientAsync<T> createAMRMClientAsync(AMRMClient<T> client, int intervalMs, CallbackHandler callbackHandler)\n{\r\n    return new AMRMClientAsyncImpl<T>(client, intervalMs, callbackHandler);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "setHeartbeatInterval",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setHeartbeatInterval(int interval)\n{\r\n    heartbeatIntervalMs.set(interval);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<? extends Collection<T>> getMatchingRequests(Priority priority, String resourceName, Resource capability)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "addSchedulingRequests",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void addSchedulingRequests(Collection<SchedulingRequest> schedulingRequests)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<? extends Collection<T>> getMatchingRequests(Priority priority, String resourceName, ExecutionType executionType, Resource capability)\n{\r\n    return client.getMatchingRequests(priority, resourceName, executionType, capability);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<T> getMatchingRequests(long allocationRequestId)\n{\r\n    return client.getMatchingRequests(allocationRequestId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(String appHostName, int appHostPort, String appTrackingUrl) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(String appHostName, int appHostPort, String appTrackingUrl, Map<Set<String>, PlacementConstraint> placementConstraints) throws YarnException, IOException\n{\r\n    throw new YarnException(\"Not supported\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "unregisterApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void unregisterApplicationMaster(FinalApplicationStatus appStatus, String appMessage, String appTrackingUrl) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "addContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void addContainerRequest(T req)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "removeContainerRequest",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void removeContainerRequest(T req)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "requestContainerResourceChange",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void requestContainerResourceChange(Container container, Resource capability)\n{\r\n    Preconditions.checkNotNull(container, \"Container cannot be null!!\");\r\n    Preconditions.checkNotNull(capability, \"UpdateContainerRequest cannot be null!!\");\r\n    requestContainerUpdate(container, UpdateContainerRequest.newInstance(container.getVersion(), container.getId(), Resources.fitsIn(capability, container.getResource()) ? ContainerUpdateType.DECREASE_RESOURCE : ContainerUpdateType.INCREASE_RESOURCE, capability, null));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "requestContainerUpdate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void requestContainerUpdate(Container container, UpdateContainerRequest updateContainerRequest)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "releaseAssignedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void releaseAssignedContainer(ContainerId containerId)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "getAvailableResources",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Resource getAvailableResources()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "getClusterNodeCount",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "int getClusterNodeCount()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "registerTimelineV2Client",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void registerTimelineV2Client(TimelineV2Client timelineClient) throws YarnException\n{\r\n    client.registerTimelineV2Client(timelineClient);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "getRegisteredTimelineV2Client",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "TimelineV2Client getRegisteredTimelineV2Client()\n{\r\n    return client.getRegisteredTimelineV2Client();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "updateBlacklist",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateBlacklist(List<String> blacklistAdditions, List<String> blacklistRemovals)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "updateTrackingUrl",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateTrackingUrl(String trackingUrl)\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "waitFor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitFor(Supplier<Boolean> check) throws InterruptedException\n{\r\n    waitFor(check, 1000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "waitFor",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitFor(Supplier<Boolean> check, int checkEveryMillis) throws InterruptedException\n{\r\n    waitFor(check, checkEveryMillis, 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\async",
  "methodName" : "waitFor",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void waitFor(Supplier<Boolean> check, int checkEveryMillis, int logInterval) throws InterruptedException\n{\r\n    Preconditions.checkNotNull(check, \"check should not be null\");\r\n    Preconditions.checkArgument(checkEveryMillis >= 0, \"checkEveryMillis should be positive value\");\r\n    Preconditions.checkArgument(logInterval >= 0, \"logInterval should be positive value\");\r\n    int loggingCounter = logInterval;\r\n    do {\r\n        LOG.debug(\"Check the condition for main loop.\");\r\n        boolean result = check.get();\r\n        if (result) {\r\n            LOG.info(\"Exits the main loop.\");\r\n            return;\r\n        }\r\n        if (--loggingCounter <= 0) {\r\n            LOG.info(\"Waiting in main loop.\");\r\n            loggingCounter = logInterval;\r\n        }\r\n        Thread.sleep(checkEveryMillis);\r\n    } while (true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createSharedCacheClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SharedCacheClient createSharedCacheClient()\n{\r\n    SharedCacheClient client = new SharedCacheClientImpl();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "use",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "URL use(ApplicationId applicationId, String resourceKey) throws YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "release",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void release(ApplicationId applicationId, String resourceKey) throws YarnException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getFileChecksum",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String getFileChecksum(Path sourceFile) throws IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createNMClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMClient createNMClient()\n{\r\n    NMClient client = new NMClientImpl();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "createNMClient",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMClient createNMClient(String name)\n{\r\n    NMClient client = new NMClientImpl(name);\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "startContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<String, ByteBuffer> startContainer(Container container, ContainerLaunchContext containerLaunchContext) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "increaseContainerResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void increaseContainerResource(Container container) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "updateContainerResource",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void updateContainerResource(Container container) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "stopContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void stopContainer(ContainerId containerId, NodeId nodeId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ContainerStatus getContainerStatus(ContainerId containerId, NodeId nodeId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "reInitializeContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void reInitializeContainer(ContainerId containerId, ContainerLaunchContext containerLaunchContex, boolean autoCommit) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "restartContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void restartContainer(ContainerId containerId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "rollbackLastReInitialization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void rollbackLastReInitialization(ContainerId containerId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "commitLastReInitialization",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void commitLastReInitialization(ContainerId containerId) throws YarnException, IOException",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "cleanupRunningContainersOnStop",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanupRunningContainersOnStop(boolean enabled)",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "setNMTokenCache",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setNMTokenCache(NMTokenCache nmTokenCache)\n{\r\n    this.nmTokenCache = nmTokenCache;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getNMTokenCache",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMTokenCache getNMTokenCache()\n{\r\n    return nmTokenCache;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getNodeIdOfStartedContainer",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodeId getNodeIdOfStartedContainer(ContainerId containerId)\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "localize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void localize(ContainerId containerId, NodeId nodeId, Map<String, LocalResource> localResources) throws YarnException, IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getLocalizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "List<LocalizationStatus> getLocalizationStatuses(ContainerId containerId, NodeId nodeId) throws YarnException, IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceStop",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void serviceStop() throws Exception\n{\r\n    if (getCleanupRunningContainers().get()) {\r\n        cleanupRunningContainers();\r\n    }\r\n    cmProxy.stopAllProxies();\r\n    super.serviceStop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "cleanupRunningContainers",
  "errType" : [ "YarnException", "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void cleanupRunningContainers()\n{\r\n    for (StartedContainer startedContainer : startedContainers.values()) {\r\n        try {\r\n            stopContainer(startedContainer.getContainerId(), startedContainer.getNodeId());\r\n        } catch (YarnException e) {\r\n            LOG.error(\"Failed to stop Container \" + startedContainer.getContainerId() + \" when stopping NMClientImpl\");\r\n        } catch (IOException e) {\r\n            LOG.error(\"Failed to stop Container \" + startedContainer.getContainerId() + \" when stopping NMClientImpl\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "serviceInit",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void serviceInit(Configuration conf) throws Exception\n{\r\n    super.serviceInit(conf);\r\n    if (getNMTokenCache() == null) {\r\n        throw new IllegalStateException(\"NMTokenCache has not been set\");\r\n    }\r\n    cmProxy = new ContainerManagementProtocolProxy(conf, getNMTokenCache());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "cleanupRunningContainersOnStop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanupRunningContainersOnStop(boolean enabled)\n{\r\n    getCleanupRunningContainers().set(enabled);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "addStartingContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void addStartingContainer(StartedContainer startedContainer) throws YarnException\n{\r\n    if (startedContainers.putIfAbsent(startedContainer.containerId, startedContainer) != null) {\r\n        throw RPCUtil.getRemoteException(\"Container \" + startedContainer.containerId.toString() + \" is already started\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "startContainer",
  "errType" : [ "YarnException|IOException", "Throwable" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "Map<String, ByteBuffer> startContainer(Container container, ContainerLaunchContext containerLaunchContext) throws YarnException, IOException\n{\r\n    StartedContainer startingContainer = new StartedContainer(container.getId(), container.getNodeId());\r\n    synchronized (startingContainer) {\r\n        addStartingContainer(startingContainer);\r\n        Map<String, ByteBuffer> allServiceResponse;\r\n        ContainerManagementProtocolProxyData proxy = null;\r\n        try {\r\n            proxy = cmProxy.getProxy(container.getNodeId().toString(), container.getId());\r\n            StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, container.getContainerToken());\r\n            List<StartContainerRequest> list = new ArrayList<StartContainerRequest>();\r\n            list.add(scRequest);\r\n            StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n            StartContainersResponse response = proxy.getContainerManagementProtocol().startContainers(allRequests);\r\n            if (response.getFailedRequests() != null && response.getFailedRequests().containsKey(container.getId())) {\r\n                Throwable t = response.getFailedRequests().get(container.getId()).deSerialize();\r\n                parseAndThrowException(t);\r\n            }\r\n            allServiceResponse = response.getAllServicesMetaData();\r\n            startingContainer.state = ContainerState.RUNNING;\r\n        } catch (YarnException | IOException e) {\r\n            startingContainer.state = ContainerState.COMPLETE;\r\n            startedContainers.remove(startingContainer.containerId);\r\n            throw e;\r\n        } catch (Throwable t) {\r\n            startingContainer.state = ContainerState.COMPLETE;\r\n            startedContainers.remove(startingContainer.containerId);\r\n            throw RPCUtil.getRemoteException(t);\r\n        } finally {\r\n            if (proxy != null) {\r\n                cmProxy.mayBeCloseProxy(proxy);\r\n            }\r\n        }\r\n        return allServiceResponse;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "increaseContainerResource",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void increaseContainerResource(Container container) throws YarnException, IOException\n{\r\n    ContainerManagementProtocolProxyData proxy = null;\r\n    try {\r\n        proxy = cmProxy.getProxy(container.getNodeId().toString(), container.getId());\r\n        List<Token> increaseTokens = new ArrayList<>();\r\n        increaseTokens.add(container.getContainerToken());\r\n        ContainerUpdateRequest request = ContainerUpdateRequest.newInstance(increaseTokens);\r\n        ContainerUpdateResponse response = proxy.getContainerManagementProtocol().updateContainer(request);\r\n        if (response.getFailedRequests() != null && response.getFailedRequests().containsKey(container.getId())) {\r\n            Throwable t = response.getFailedRequests().get(container.getId()).deSerialize();\r\n            parseAndThrowException(t);\r\n        }\r\n    } finally {\r\n        if (proxy != null) {\r\n            cmProxy.mayBeCloseProxy(proxy);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "updateContainerResource",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void updateContainerResource(Container container) throws YarnException, IOException\n{\r\n    ContainerManagementProtocolProxyData proxy = null;\r\n    try {\r\n        proxy = cmProxy.getProxy(container.getNodeId().toString(), container.getId());\r\n        List<Token> updateTokens = new ArrayList<>();\r\n        updateTokens.add(container.getContainerToken());\r\n        ContainerUpdateRequest request = ContainerUpdateRequest.newInstance(updateTokens);\r\n        ContainerUpdateResponse response = proxy.getContainerManagementProtocol().updateContainer(request);\r\n        if (response.getFailedRequests() != null && response.getFailedRequests().containsKey(container.getId())) {\r\n            Throwable t = response.getFailedRequests().get(container.getId()).deSerialize();\r\n            parseAndThrowException(t);\r\n        }\r\n    } finally {\r\n        if (proxy != null) {\r\n            cmProxy.mayBeCloseProxy(proxy);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "stopContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void stopContainer(ContainerId containerId, NodeId nodeId) throws YarnException, IOException\n{\r\n    StartedContainer startedContainer = startedContainers.get(containerId);\r\n    if (startedContainer != null) {\r\n        synchronized (startedContainer) {\r\n            if (startedContainer.state != ContainerState.RUNNING) {\r\n                return;\r\n            }\r\n            stopContainerInternal(containerId, nodeId);\r\n            startedContainer.state = ContainerState.COMPLETE;\r\n            startedContainers.remove(startedContainer.containerId);\r\n        }\r\n    } else {\r\n        stopContainerInternal(containerId, nodeId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ContainerStatus getContainerStatus(ContainerId containerId, NodeId nodeId) throws YarnException, IOException\n{\r\n    ContainerManagementProtocolProxyData proxy = null;\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    containerIds.add(containerId);\r\n    try {\r\n        proxy = cmProxy.getProxy(nodeId.toString(), containerId);\r\n        GetContainerStatusesResponse response = proxy.getContainerManagementProtocol().getContainerStatuses(GetContainerStatusesRequest.newInstance(containerIds));\r\n        if (response.getFailedRequests() != null && response.getFailedRequests().containsKey(containerId)) {\r\n            Throwable t = response.getFailedRequests().get(containerId).deSerialize();\r\n            parseAndThrowException(t);\r\n        }\r\n        ContainerStatus containerStatus = response.getContainerStatuses().get(0);\r\n        return containerStatus;\r\n    } finally {\r\n        if (proxy != null) {\r\n            cmProxy.mayBeCloseProxy(proxy);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "reInitializeContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void reInitializeContainer(ContainerId containerId, ContainerLaunchContext containerLaunchContex, boolean autoCommit) throws YarnException, IOException\n{\r\n    ContainerManagementProtocolProxyData proxy = null;\r\n    StartedContainer container = startedContainers.get(containerId);\r\n    if (container != null) {\r\n        synchronized (container) {\r\n            proxy = cmProxy.getProxy(container.getNodeId().toString(), containerId);\r\n            try {\r\n                proxy.getContainerManagementProtocol().reInitializeContainer(ReInitializeContainerRequest.newInstance(containerId, containerLaunchContex, autoCommit));\r\n            } finally {\r\n                if (proxy != null) {\r\n                    cmProxy.mayBeCloseProxy(proxy);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        throw new YarnException(\"Unknown container [\" + containerId + \"]\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "restartContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void restartContainer(ContainerId containerId) throws YarnException, IOException\n{\r\n    restartCommitOrRollbackContainer(containerId, UpgradeOp.RESTART);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "rollbackLastReInitialization",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void rollbackLastReInitialization(ContainerId containerId) throws YarnException, IOException\n{\r\n    restartCommitOrRollbackContainer(containerId, UpgradeOp.ROLLBACK);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "commitLastReInitialization",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void commitLastReInitialization(ContainerId containerId) throws YarnException, IOException\n{\r\n    restartCommitOrRollbackContainer(containerId, UpgradeOp.COMMIT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "restartCommitOrRollbackContainer",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void restartCommitOrRollbackContainer(ContainerId containerId, UpgradeOp upgradeOp) throws YarnException, IOException\n{\r\n    ContainerManagementProtocolProxyData proxy = null;\r\n    StartedContainer container = startedContainers.get(containerId);\r\n    if (container != null) {\r\n        synchronized (container) {\r\n            proxy = cmProxy.getProxy(container.getNodeId().toString(), containerId);\r\n            ContainerManagementProtocol cmp = proxy.getContainerManagementProtocol();\r\n            try {\r\n                switch(upgradeOp) {\r\n                    case RESTART:\r\n                        cmp.restartContainer(containerId);\r\n                        break;\r\n                    case COMMIT:\r\n                        cmp.commitLastReInitialization(containerId);\r\n                        break;\r\n                    case ROLLBACK:\r\n                        cmp.rollbackLastReInitialization(containerId);\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            } finally {\r\n                if (proxy != null) {\r\n                    cmProxy.mayBeCloseProxy(proxy);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        throw new YarnException(\"Unknown container [\" + containerId + \"]\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "stopContainerInternal",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void stopContainerInternal(ContainerId containerId, NodeId nodeId) throws IOException, YarnException\n{\r\n    ContainerManagementProtocolProxyData proxy = null;\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    containerIds.add(containerId);\r\n    try {\r\n        proxy = cmProxy.getProxy(nodeId.toString(), containerId);\r\n        StopContainersResponse response = proxy.getContainerManagementProtocol().stopContainers(StopContainersRequest.newInstance(containerIds));\r\n        if (response.getFailedRequests() != null && response.getFailedRequests().containsKey(containerId)) {\r\n            Throwable t = response.getFailedRequests().get(containerId).deSerialize();\r\n            parseAndThrowException(t);\r\n        }\r\n    } finally {\r\n        if (proxy != null) {\r\n            cmProxy.mayBeCloseProxy(proxy);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getCleanupRunningContainers",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AtomicBoolean getCleanupRunningContainers()\n{\r\n    return cleanupRunningContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "parseAndThrowException",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void parseAndThrowException(Throwable t) throws YarnException, IOException\n{\r\n    if (t instanceof YarnException) {\r\n        throw (YarnException) t;\r\n    } else if (t instanceof InvalidToken) {\r\n        throw (InvalidToken) t;\r\n    } else {\r\n        throw (IOException) t;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getNodeIdOfStartedContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "NodeId getNodeIdOfStartedContainer(ContainerId containerId)\n{\r\n    StartedContainer container = startedContainers.get(containerId);\r\n    if (container != null) {\r\n        return container.getNodeId();\r\n    }\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "localize",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void localize(ContainerId containerId, NodeId nodeId, Map<String, LocalResource> localResources) throws YarnException, IOException\n{\r\n    ContainerManagementProtocolProxyData proxy;\r\n    StartedContainer container = startedContainers.get(containerId);\r\n    if (container != null) {\r\n        synchronized (container) {\r\n            proxy = cmProxy.getProxy(container.getNodeId().toString(), containerId);\r\n            try {\r\n                proxy.getContainerManagementProtocol().localize(ResourceLocalizationRequest.newInstance(containerId, localResources));\r\n            } finally {\r\n                if (proxy != null) {\r\n                    cmProxy.mayBeCloseProxy(proxy);\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        throw new YarnException(\"Unknown container [\" + containerId + \"]\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getLocalizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "List<LocalizationStatus> getLocalizationStatuses(ContainerId containerId, NodeId nodeId) throws YarnException, IOException\n{\r\n    ContainerManagementProtocolProxyData proxy = null;\r\n    List<ContainerId> containerIds = Lists.newArrayList(containerId);\r\n    try {\r\n        proxy = cmProxy.getProxy(nodeId.toString(), containerId);\r\n        GetLocalizationStatusesResponse response = proxy.getContainerManagementProtocol().getLocalizationStatuses(GetLocalizationStatusesRequest.newInstance(containerIds));\r\n        if (response.getFailedRequests() != null && response.getFailedRequests().containsKey(containerId)) {\r\n            Throwable t = response.getFailedRequests().get(containerId).deSerialize();\r\n            parseAndThrowException(t);\r\n        }\r\n        return response.getLocalizationStatuses().get(containerId);\r\n    } finally {\r\n        if (proxy != null) {\r\n            cmProxy.mayBeCloseProxy(proxy);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "printHelp",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void printHelp(String cmd)\n{\r\n    String summary = \"scmadmin is the command to execute shared cache manager\" + \"administrative commands.\\n\" + \"The full syntax is: \\n\\n\" + \"yarn scmadmin\" + \" [-runCleanerTask]\" + \" [-help [cmd]]\\n\";\r\n    String runCleanerTask = \"-runCleanerTask: Run cleaner task right away.\\n\";\r\n    String help = \"-help [cmd]: \\tDisplays help for the given command or all commands if none\\n\" + \"\\t\\tis specified.\\n\";\r\n    if (\"runCleanerTask\".equals(cmd)) {\r\n        System.out.println(runCleanerTask);\r\n    } else if (\"help\".equals(cmd)) {\r\n        System.out.println(help);\r\n    } else {\r\n        System.out.println(summary);\r\n        System.out.println(runCleanerTask);\r\n        System.out.println(help);\r\n        System.out.println();\r\n        ToolRunner.printGenericCommandUsage(System.out);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void printUsage(String cmd)\n{\r\n    if (\"-runCleanerTask\".equals(cmd)) {\r\n        System.err.println(\"Usage: yarn scmadmin\" + \" [-runCleanerTask]\");\r\n    } else {\r\n        System.err.println(\"Usage: yarn scmadmin\");\r\n        System.err.println(\"           [-runCleanerTask]\");\r\n        System.err.println(\"           [-help [cmd]]\");\r\n        System.err.println();\r\n        ToolRunner.printGenericCommandUsage(System.err);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "createSCMAdminProtocol",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "SCMAdminProtocol createSCMAdminProtocol() throws IOException\n{\r\n    final YarnConfiguration conf = new YarnConfiguration(getConf());\r\n    final InetSocketAddress addr = conf.getSocketAddr(YarnConfiguration.SCM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_SCM_ADMIN_ADDRESS, YarnConfiguration.DEFAULT_SCM_ADMIN_PORT);\r\n    final YarnRPC rpc = YarnRPC.create(conf);\r\n    SCMAdminProtocol scmAdminProtocol = (SCMAdminProtocol) rpc.getProxy(SCMAdminProtocol.class, addr, conf);\r\n    return scmAdminProtocol;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "runCleanerTask",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "int runCleanerTask() throws YarnException, IOException\n{\r\n    SCMAdminProtocol scmAdminProtocol = createSCMAdminProtocol();\r\n    RunSharedCacheCleanerTaskRequest request = recordFactory.newRecordInstance(RunSharedCacheCleanerTaskRequest.class);\r\n    RunSharedCacheCleanerTaskResponse response = scmAdminProtocol.runCleanerTask(request);\r\n    if (response.getAccepted()) {\r\n        System.out.println(\"request accepted by shared cache manager\");\r\n        return 0;\r\n    } else {\r\n        System.out.println(\"request rejected by shared cache manager\");\r\n        return 1;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "run",
  "errType" : [ "IllegalArgumentException", "RemoteException", "Exception", "Exception" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "int run(String[] args) throws Exception\n{\r\n    if (args.length < 1) {\r\n        printUsage(\"\");\r\n        return -1;\r\n    }\r\n    int i = 0;\r\n    String cmd = args[i++];\r\n    try {\r\n        if (\"-runCleanerTask\".equals(cmd)) {\r\n            if (args.length != 1) {\r\n                printUsage(cmd);\r\n                return -1;\r\n            } else {\r\n                return runCleanerTask();\r\n            }\r\n        } else if (\"-help\".equals(cmd)) {\r\n            if (i < args.length) {\r\n                printUsage(args[i]);\r\n            } else {\r\n                printHelp(\"\");\r\n            }\r\n            return 0;\r\n        } else {\r\n            System.err.println(cmd.substring(1) + \": Unknown command\");\r\n            printUsage(\"\");\r\n            return -1;\r\n        }\r\n    } catch (IllegalArgumentException arge) {\r\n        System.err.println(cmd.substring(1) + \": \" + arge.getLocalizedMessage());\r\n        printUsage(cmd);\r\n    } catch (RemoteException e) {\r\n        try {\r\n            String[] content;\r\n            content = e.getLocalizedMessage().split(\"\\n\");\r\n            System.err.println(cmd.substring(1) + \": \" + content[0]);\r\n        } catch (Exception ex) {\r\n            System.err.println(cmd.substring(1) + \": \" + ex.getLocalizedMessage());\r\n        }\r\n    } catch (Exception e) {\r\n        System.err.println(cmd.substring(1) + \": \" + e.getLocalizedMessage());\r\n    }\r\n    return -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    int result = ToolRunner.run(new SCMAdmin(), args);\r\n    System.exit(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "setErrOut",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setErrOut(PrintStream errOut)\n{\r\n    this.errOut = errOut;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getAdminCommandHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "AdminCommandHandler getAdminCommandHandler()\n{\r\n    return new AdminCommandHandler();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getClientCommandHandler",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ClientCommandHandler getClientCommandHandler()\n{\r\n    return new ClientCommandHandler();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void printUsage(String cmd, boolean desc, CommandHandler... handlers) throws UnsupportedEncodingException\n{\r\n    StringBuilder usageBuilder = new StringBuilder();\r\n    usageBuilder.append(USAGE_YARN_NODE_ATTRIBUTES);\r\n    boolean satisfied = false;\r\n    for (CommandHandler cmdHandlers : handlers) {\r\n        satisfied |= cmdHandlers.getHelp(cmd, usageBuilder, desc);\r\n    }\r\n    if (!satisfied) {\r\n        printUsage(desc, handlers);\r\n    } else {\r\n        print(usageBuilder);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void printUsage(boolean desc, CommandHandler... handlers) throws UnsupportedEncodingException\n{\r\n    StringBuilder usageBuilder = new StringBuilder();\r\n    usageBuilder.append(USAGE_YARN_NODE_ATTRIBUTES);\r\n    for (CommandHandler cmdHandlers : handlers) {\r\n        cmdHandlers.getHelp(usageBuilder, desc);\r\n    }\r\n    usageBuilder.append(DEFAULT_SEPARATOR).append(\" -help [cmd] List help of commands\");\r\n    print(usageBuilder);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "print",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void print(StringBuilder usageBuilder) throws UnsupportedEncodingException\n{\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter pw = new PrintWriter(new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\r\n    pw.write(usageBuilder.toString());\r\n    pw.close();\r\n    errOut.println(baos.toString(\"UTF-8\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "buildOptions",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Options buildOptions(CommandHandler... handlers)\n{\r\n    Options opts = new Options();\r\n    for (CommandHandler handler : handlers) {\r\n        Options handlerOpts = handler.getOptions();\r\n        handlerOpts.getOptions().iterator().forEachRemaining(option -> opts.addOption((Option) option));\r\n    }\r\n    return opts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "run",
  "errType" : [ "UnrecognizedOptionException", "MissingArgumentException", "IllegalArgumentException", "YarnException", "Exception" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "int run(String[] args) throws Exception\n{\r\n    int exitCode = -1;\r\n    AdminCommandHandler adminCmdHandler = getAdminCommandHandler();\r\n    ClientCommandHandler clientCmdHandler = getClientCommandHandler();\r\n    Options opts = buildOptions(adminCmdHandler, clientCmdHandler);\r\n    if (args.length < 1) {\r\n        printUsage(false, adminCmdHandler, clientCmdHandler);\r\n        return -1;\r\n    }\r\n    if (handleHelpCommand(args, adminCmdHandler, clientCmdHandler)) {\r\n        return 0;\r\n    }\r\n    CommandLine cliParser;\r\n    CommandHandler handler = null;\r\n    try {\r\n        cliParser = new GnuParser().parse(opts, args);\r\n        handler = adminCmdHandler.canHandleCommand(cliParser) ? adminCmdHandler : clientCmdHandler.canHandleCommand(cliParser) ? clientCmdHandler : null;\r\n        if (handler == null) {\r\n            errOut.println(INVALID_COMMAND_USAGE);\r\n            printUsage(false, adminCmdHandler, clientCmdHandler);\r\n            return exitCode;\r\n        } else {\r\n            return handler.handleCommand(cliParser);\r\n        }\r\n    } catch (UnrecognizedOptionException e) {\r\n        errOut.println(INVALID_COMMAND_USAGE);\r\n        printUsage(false, adminCmdHandler, clientCmdHandler);\r\n        return exitCode;\r\n    } catch (MissingArgumentException ex) {\r\n        errOut.println(MISSING_ARGUMENT);\r\n        printUsage(true, adminCmdHandler, clientCmdHandler);\r\n        return exitCode;\r\n    } catch (IllegalArgumentException arge) {\r\n        errOut.println(arge.getLocalizedMessage());\r\n        printUsage(true, handler);\r\n        return exitCode;\r\n    } catch (YarnException e) {\r\n        errOut.println(e.toString());\r\n        return exitCode;\r\n    } catch (Exception e) {\r\n        errOut.println(e.toString());\r\n        printUsage(true, handler);\r\n        return exitCode;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "handleHelpCommand",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean handleHelpCommand(String[] args, CommandHandler... handlers) throws UnsupportedEncodingException\n{\r\n    if (args[0].equals(\"-help\")) {\r\n        if (args.length == 2) {\r\n            printUsage(args[1], true, handlers);\r\n        } else {\r\n            printUsage(true, handlers);\r\n        }\r\n        return true;\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    int result = ToolRunner.run(new NodeAttributesCLI(), args);\r\n    System.exit(result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getSingleton",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NMTokenCache getSingleton()\n{\r\n    return NM_TOKEN_CACHE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getNMToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Token getNMToken(String nodeAddr)\n{\r\n    return NM_TOKEN_CACHE.getToken(nodeAddr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "setNMToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setNMToken(String nodeAddr, Token token)\n{\r\n    NM_TOKEN_CACHE.setToken(nodeAddr, token);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "getToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Token getToken(String nodeAddr)\n{\r\n    return nmTokens.get(nodeAddr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "setToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setToken(String nodeAddr, Token token)\n{\r\n    nmTokens.put(nodeAddr, token);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "containsToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean containsToken(String nodeAddr)\n{\r\n    return nmTokens.containsKey(nodeAddr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "numberOfTokensInCache",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int numberOfTokensInCache()\n{\r\n    return nmTokens.size();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "removeToken",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void removeToken(String nodeAddr)\n{\r\n    nmTokens.remove(nodeAddr);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api",
  "methodName" : "clearCache",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void clearCache()\n{\r\n    nmTokens.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "run",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int run(String[] args) throws Exception\n{\r\n    try {\r\n        webServiceClient = WebServiceClient.getWebServiceClient().createClient();\r\n        return runCommand(args);\r\n    } finally {\r\n        if (yarnClient != null) {\r\n            yarnClient.close();\r\n        }\r\n        if (webServiceClient != null) {\r\n            webServiceClient.destroy();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "runCommand",
  "errType" : [ "ParseException", "NumberFormatException", "Exception", "Exception", "Exception", "IOException|YarnException" ],
  "containingMethodsNum" : 82,
  "sourceCodeText" : "int runCommand(String[] args) throws Exception\n{\r\n    Options opts = createCommandOpts();\r\n    Options printOpts = createPrintOpts(opts);\r\n    if (args.length < 1) {\r\n        printHelpMessage(printOpts);\r\n        return -1;\r\n    }\r\n    if (args[0].equals(\"-help\")) {\r\n        printHelpMessage(printOpts);\r\n        return 0;\r\n    }\r\n    CommandLineParser parser = new GnuParser();\r\n    String appIdStr = null;\r\n    String appAttemptIdStr = null;\r\n    String clusterIdStr = null;\r\n    String containerIdStr = null;\r\n    String nodeAddress = null;\r\n    String appOwner = null;\r\n    boolean getAMContainerLogs = false;\r\n    boolean nodesList = false;\r\n    boolean showApplicationLogInfo = false;\r\n    boolean showContainerLogInfo = false;\r\n    boolean useRegex = false;\r\n    String[] logFiles = null;\r\n    String[] logFilesRegex = null;\r\n    List<String> amContainersList = new ArrayList<String>();\r\n    String localDir = null;\r\n    long bytes = Long.MAX_VALUE;\r\n    boolean ignoreSizeLimit = false;\r\n    int maxRetries = DEFAULT_MAX_RETRIES;\r\n    long retryInterval = DEFAULT_RETRY_INTERVAL;\r\n    try {\r\n        CommandLine commandLine = parser.parse(opts, args, false);\r\n        appIdStr = commandLine.getOptionValue(APPLICATION_ID_OPTION);\r\n        appAttemptIdStr = commandLine.getOptionValue(APPLICATION_ATTEMPT_ID_OPTION);\r\n        containerIdStr = commandLine.getOptionValue(CONTAINER_ID_OPTION);\r\n        nodeAddress = commandLine.getOptionValue(NODE_ADDRESS_OPTION);\r\n        appOwner = commandLine.getOptionValue(APP_OWNER_OPTION);\r\n        getAMContainerLogs = commandLine.hasOption(AM_CONTAINER_OPTION);\r\n        nodesList = commandLine.hasOption(LIST_NODES_OPTION);\r\n        localDir = commandLine.getOptionValue(OUT_OPTION);\r\n        showApplicationLogInfo = commandLine.hasOption(SHOW_APPLICATION_LOG_INFO);\r\n        showContainerLogInfo = commandLine.hasOption(SHOW_CONTAINER_LOG_INFO);\r\n        if (getAMContainerLogs) {\r\n            try {\r\n                amContainersList = parseAMContainer(commandLine, printOpts);\r\n            } catch (NumberFormatException ex) {\r\n                System.err.println(ex.getMessage());\r\n                return -1;\r\n            }\r\n        }\r\n        if (commandLine.hasOption(CLUSTER_ID_OPTION)) {\r\n            clusterIdStr = commandLine.getOptionValue(CLUSTER_ID_OPTION);\r\n            getConf().set(YarnConfiguration.RM_CLUSTER_ID, clusterIdStr);\r\n        }\r\n        if (commandLine.hasOption(PER_CONTAINER_LOG_FILES_OPTION)) {\r\n            logFiles = commandLine.getOptionValues(PER_CONTAINER_LOG_FILES_OPTION);\r\n        } else {\r\n            if (commandLine.hasOption(PER_CONTAINER_LOG_FILES_OLD_OPTION)) {\r\n                logFiles = commandLine.getOptionValues(PER_CONTAINER_LOG_FILES_OLD_OPTION);\r\n            }\r\n        }\r\n        if (commandLine.hasOption(PER_CONTAINER_LOG_FILES_REGEX_OPTION)) {\r\n            logFilesRegex = commandLine.getOptionValues(PER_CONTAINER_LOG_FILES_REGEX_OPTION);\r\n            useRegex = true;\r\n        }\r\n        if (commandLine.hasOption(SIZE_OPTION)) {\r\n            bytes = Long.parseLong(commandLine.getOptionValue(SIZE_OPTION));\r\n        }\r\n        if (commandLine.hasOption(CLIENT_MAX_RETRY_OPTION)) {\r\n            maxRetries = Integer.parseInt(commandLine.getOptionValue(CLIENT_MAX_RETRY_OPTION));\r\n        }\r\n        if (commandLine.hasOption(CLIENT_RETRY_INTERVAL_OPTION)) {\r\n            retryInterval = Long.parseLong(commandLine.getOptionValue(CLIENT_RETRY_INTERVAL_OPTION));\r\n        }\r\n        if (commandLine.hasOption(SIZE_LIMIT_OPTION)) {\r\n            specifedLogLimits = Long.parseLong(commandLine.getOptionValue(SIZE_LIMIT_OPTION));\r\n            logSizeLeft = specifedLogLimits * 1024 * 1024;\r\n        }\r\n        if (logSizeLeft < 0L) {\r\n            ignoreSizeLimit = true;\r\n        }\r\n    } catch (ParseException e) {\r\n        System.err.println(\"options parsing failed: \" + e.getMessage());\r\n        printHelpMessage(printOpts);\r\n        return -1;\r\n    }\r\n    if (appIdStr == null && appAttemptIdStr == null && containerIdStr == null) {\r\n        System.err.println(\"None of applicationId, appAttemptId and containerId \" + \"is available,  one of them must be specified.\");\r\n        printHelpMessage(printOpts);\r\n        return -1;\r\n    }\r\n    ApplicationId appId = null;\r\n    if (appIdStr != null) {\r\n        try {\r\n            appId = ApplicationId.fromString(appIdStr);\r\n        } catch (Exception e) {\r\n            System.err.println(\"Invalid ApplicationId specified\");\r\n            return -1;\r\n        }\r\n    }\r\n    ApplicationAttemptId appAttemptId = null;\r\n    if (appAttemptIdStr != null) {\r\n        try {\r\n            appAttemptId = ApplicationAttemptId.fromString(appAttemptIdStr);\r\n            if (appId == null) {\r\n                appId = appAttemptId.getApplicationId();\r\n            } else if (!appId.equals(appAttemptId.getApplicationId())) {\r\n                System.err.println(\"The Application:\" + appId + \" does not have the AppAttempt:\" + appAttemptId);\r\n                return -1;\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(\"Invalid AppAttemptId specified\");\r\n            return -1;\r\n        }\r\n    }\r\n    if (containerIdStr != null) {\r\n        try {\r\n            ContainerId containerId = ContainerId.fromString(containerIdStr);\r\n            if (appAttemptId != null && !appAttemptId.equals(containerId.getApplicationAttemptId())) {\r\n                System.err.println(\"The AppAttempt:\" + appAttemptId + \" does not have the container:\" + containerId);\r\n                return -1;\r\n            }\r\n            if (appId == null) {\r\n                appId = containerId.getApplicationAttemptId().getApplicationId();\r\n            } else if (!containerId.getApplicationAttemptId().getApplicationId().equals(appId)) {\r\n                System.err.println(\"The Application:\" + appId + \" does not have the container:\" + containerId);\r\n                return -1;\r\n            }\r\n        } catch (Exception e) {\r\n            System.err.println(\"Invalid ContainerId specified\");\r\n            return -1;\r\n        }\r\n    }\r\n    if (showApplicationLogInfo && showContainerLogInfo) {\r\n        System.err.println(\"Invalid options. Can only accept one of \" + \"show_application_log_info/show_container_log_info.\");\r\n        return -1;\r\n    }\r\n    if (logFiles != null && logFiles.length > 0 && logFilesRegex != null && logFilesRegex.length > 0) {\r\n        System.err.println(\"Invalid options. Can only accept one of \" + \"log_files/log_files_pattern.\");\r\n        return -1;\r\n    }\r\n    if (localDir != null) {\r\n        File file = new File(localDir);\r\n        if (file.exists() && file.isFile()) {\r\n            System.err.println(\"Invalid value for -out option. \" + \"Please provide a directory.\");\r\n            return -1;\r\n        }\r\n    }\r\n    connectionRetry = new ClientConnectionRetry(maxRetries, retryInterval);\r\n    ClientJerseyRetryFilter retryFilter = new ClientJerseyRetryFilter();\r\n    webServiceClient.addFilter(retryFilter);\r\n    LogCLIHelpers logCliHelper = new LogCLIHelpers();\r\n    logCliHelper.setConf(getConf());\r\n    yarnClient = createYarnClient();\r\n    YarnApplicationState appState = YarnApplicationState.NEW;\r\n    ApplicationReport appReport = null;\r\n    try {\r\n        appReport = getApplicationReport(appId);\r\n        appState = appReport.getYarnApplicationState();\r\n        if (appState == YarnApplicationState.NEW || appState == YarnApplicationState.NEW_SAVING || appState == YarnApplicationState.SUBMITTED) {\r\n            System.err.println(\"Logs are not available right now.\");\r\n            return -1;\r\n        }\r\n    } catch (IOException | YarnException e) {\r\n        appState = YarnApplicationState.FINISHED;\r\n        System.err.println(\"Unable to get ApplicationState.\" + \" Attempting to fetch logs directly from the filesystem.\");\r\n    }\r\n    if (appOwner == null || appOwner.isEmpty()) {\r\n        appOwner = guessAppOwner(appReport, appId);\r\n        if (appOwner == null) {\r\n            System.err.println(\"Can not find the appOwner. \" + \"Please specify the correct appOwner\");\r\n            System.err.println(\"Could not locate application logs for \" + appId);\r\n            return -1;\r\n        }\r\n    }\r\n    Set<String> logs = new HashSet<String>();\r\n    if (fetchAllLogFiles(logFiles, logFilesRegex)) {\r\n        logs.add(\"ALL\");\r\n    } else if (logFiles != null && logFiles.length > 0) {\r\n        logs.addAll(Arrays.asList(logFiles));\r\n    } else if (logFilesRegex != null && logFilesRegex.length > 0) {\r\n        logs.addAll(Arrays.asList(logFilesRegex));\r\n    }\r\n    ContainerLogsRequest request = new ContainerLogsRequest(appId, appAttemptId, Apps.isApplicationFinalState(appState), appOwner, nodeAddress, null, containerIdStr, localDir, logs, bytes, null);\r\n    if (showContainerLogInfo) {\r\n        return showContainerLogInfo(request, logCliHelper);\r\n    }\r\n    if (nodesList) {\r\n        return showNodeLists(request, logCliHelper);\r\n    }\r\n    if (showApplicationLogInfo) {\r\n        return showApplicationLogInfo(request, logCliHelper);\r\n    }\r\n    if (getAMContainerLogs) {\r\n        return fetchAMContainerLogs(request, amContainersList, logCliHelper, useRegex, ignoreSizeLimit);\r\n    }\r\n    int resultCode = 0;\r\n    if (containerIdStr != null) {\r\n        return fetchContainerLogs(request, logCliHelper, useRegex, ignoreSizeLimit);\r\n    } else {\r\n        if (nodeAddress == null) {\r\n            resultCode = fetchApplicationLogs(request, logCliHelper, useRegex, ignoreSizeLimit);\r\n        } else {\r\n            System.err.println(\"Should at least provide ContainerId!\");\r\n            printHelpMessage(printOpts);\r\n            resultCode = -1;\r\n        }\r\n    }\r\n    return resultCode;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 6,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationReport getApplicationReport(ApplicationId appId) throws IOException, YarnException\n{\r\n    return yarnClient.getApplicationReport(appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createYarnClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "YarnClient createYarnClient()\n{\r\n    YarnClient client = YarnClient.createYarnClient();\r\n    client.init(getConf());\r\n    client.start();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    Configuration conf = new YarnConfiguration();\r\n    LogsCLI logDumper = new LogsCLI();\r\n    logDumper.setConf(conf);\r\n    WebServiceClient.initialize(conf);\r\n    int exitCode = logDumper.run(args);\r\n    WebServiceClient.destroy();\r\n    System.exit(exitCode);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printHelpMessage",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void printHelpMessage(Options options)\n{\r\n    outStream.println(\"Retrieve logs for YARN applications.\");\r\n    HelpFormatter formatter = new HelpFormatter();\r\n    formatter.printHelp(\"yarn logs -applicationId <application ID> [OPTIONS]\", new Options());\r\n    formatter.setSyntaxPrefix(\"\");\r\n    formatter.printHelp(\"general options are:\", options);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getAMContainerInfoForRMWebService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<JSONObject> getAMContainerInfoForRMWebService(Configuration conf, String appId) throws Exception\n{\r\n    return WebAppUtils.execOnActiveRM(conf, this::getAMContainerInfoFromRM, appId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getAMContainerInfoFromRM",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<JSONObject> getAMContainerInfoFromRM(String webAppAddress, String appId) throws ClientHandlerException, UniformInterfaceException, JSONException\n{\r\n    List<JSONObject> amContainersList = new ArrayList<JSONObject>();\r\n    ClientResponse response = null;\r\n    try {\r\n        Builder builder = webServiceClient.resource(webAppAddress).path(\"ws\").path(\"v1\").path(\"cluster\").path(\"apps\").path(appId).path(\"appattempts\").accept(MediaType.APPLICATION_JSON);\r\n        response = builder.get(ClientResponse.class);\r\n        JSONObject json = response.getEntity(JSONObject.class).getJSONObject(\"appAttempts\");\r\n        JSONArray requests = json.getJSONArray(\"appAttempt\");\r\n        for (int j = 0; j < requests.length(); j++) {\r\n            amContainersList.add(requests.getJSONObject(j));\r\n        }\r\n        return amContainersList;\r\n    } finally {\r\n        if (response != null) {\r\n            response.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getAMContainerInfoForAHSWebService",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "List<JSONObject> getAMContainerInfoForAHSWebService(Configuration conf, String appId) throws ClientHandlerException, UniformInterfaceException, JSONException\n{\r\n    String webAppAddress = WebAppUtils.getHttpSchemePrefix(conf) + WebAppUtils.getAHSWebAppURLWithoutScheme(conf);\r\n    WebResource webResource = webServiceClient.resource(webAppAddress);\r\n    ClientResponse response = webResource.path(\"ws\").path(\"v1\").path(\"applicationhistory\").path(\"apps\").path(appId).path(\"appattempts\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    JSONObject json = response.getEntity(JSONObject.class);\r\n    JSONArray requests = json.getJSONArray(\"appAttempt\");\r\n    List<JSONObject> amContainersList = new ArrayList<JSONObject>();\r\n    for (int i = 0; i < requests.length(); i++) {\r\n        amContainersList.add(requests.getJSONObject(i));\r\n    }\r\n    Collections.reverse(amContainersList);\r\n    return amContainersList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "fetchAllLogFiles",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean fetchAllLogFiles(String[] logFiles, String[] logFilesRegex)\n{\r\n    if ((logFiles == null || logFiles.length == 0) && (logFilesRegex == null || logFilesRegex.length == 0)) {\r\n        return true;\r\n    }\r\n    if (logFiles != null && logFiles.length > 0) {\r\n        List<String> logs = Arrays.asList(logFiles);\r\n        if (logs.contains(\"ALL\") || logs.contains(\"*\")) {\r\n            return true;\r\n        }\r\n    }\r\n    if (logFilesRegex != null && logFilesRegex.length > 0) {\r\n        List<String> logsRegex = Arrays.asList(logFilesRegex);\r\n        if (logsRegex.contains(\".*\")) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getContainerLogFiles",
  "errType" : [ "ClientHandlerException|UniformInterfaceException", "Exception" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "List<Pair<ContainerLogFileInfo, String>> getContainerLogFiles(Configuration conf, String containerIdStr, String nodeHttpAddress) throws IOException\n{\r\n    List<Pair<ContainerLogFileInfo, String>> logFileInfos = new ArrayList<>();\r\n    try {\r\n        WebResource webResource = webServiceClient.resource(WebAppUtils.getHttpSchemePrefix(conf) + nodeHttpAddress);\r\n        ClientResponse response = webResource.path(\"ws\").path(\"v1\").path(\"node\").path(\"containers\").path(containerIdStr).path(\"logs\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n        if (response.getStatusInfo().getStatusCode() == ClientResponse.Status.OK.getStatusCode()) {\r\n            try {\r\n                JSONArray array = new JSONArray();\r\n                JSONObject json = response.getEntity(JSONObject.class);\r\n                if (!json.has(\"containerLogsInfo\")) {\r\n                    return logFileInfos;\r\n                }\r\n                Object logsInfoObj = json.get(\"containerLogsInfo\");\r\n                if (logsInfoObj instanceof JSONObject) {\r\n                    array.put((JSONObject) logsInfoObj);\r\n                } else if (logsInfoObj instanceof JSONArray) {\r\n                    JSONArray logsArray = (JSONArray) logsInfoObj;\r\n                    for (int i = 0; i < logsArray.length(); i++) {\r\n                        array.put(logsArray.getJSONObject(i));\r\n                    }\r\n                }\r\n                for (int i = 0; i < array.length(); i++) {\r\n                    JSONObject log = array.getJSONObject(i);\r\n                    String aggregateType = log.has(\"logAggregationType\") ? log.getString(\"logAggregationType\") : \"N/A\";\r\n                    if (!log.has(\"containerLogInfo\")) {\r\n                        continue;\r\n                    }\r\n                    Object ob = log.get(\"containerLogInfo\");\r\n                    if (ob instanceof JSONArray) {\r\n                        JSONArray obArray = (JSONArray) ob;\r\n                        for (int j = 0; j < obArray.length(); j++) {\r\n                            logFileInfos.add(new Pair<ContainerLogFileInfo, String>(generatePerContainerLogFileInfoFromJSON(obArray.getJSONObject(j)), aggregateType));\r\n                        }\r\n                    } else if (ob instanceof JSONObject) {\r\n                        logFileInfos.add(new Pair<ContainerLogFileInfo, String>(generatePerContainerLogFileInfoFromJSON((JSONObject) ob), aggregateType));\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                System.err.println(\"Unable to parse json from webservice. Error:\");\r\n                System.err.println(e.getMessage());\r\n                throw new IOException(e);\r\n            }\r\n        }\r\n    } catch (ClientHandlerException | UniformInterfaceException ex) {\r\n        System.err.println(\"Unable to fetch log files list\");\r\n        throw new IOException(ex);\r\n    }\r\n    return logFileInfos;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "generatePerContainerLogFileInfoFromJSON",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ContainerLogFileInfo generatePerContainerLogFileInfoFromJSON(JSONObject meta) throws JSONException\n{\r\n    String fileName = meta.has(\"fileName\") ? meta.getString(\"fileName\") : \"N/A\";\r\n    String fileSize = meta.has(\"fileSize\") ? meta.getString(\"fileSize\") : \"N/A\";\r\n    String lastModificationTime = meta.has(\"lastModifiedTime\") ? meta.getString(\"lastModifiedTime\") : \"N/A\";\r\n    return new ContainerLogFileInfo(fileName, fileSize, lastModificationTime);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printContainerLogsFromRunningApplication",
  "errType" : [ "ClientHandlerException|UniformInterfaceException" ],
  "containingMethodsNum" : 20,
  "sourceCodeText" : "int printContainerLogsFromRunningApplication(Configuration conf, ContainerLogsRequest request, LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit) throws IOException\n{\r\n    String containerIdStr = request.getContainerId().toString();\r\n    String localDir = request.getOutputLocalDir();\r\n    String nodeId = request.getNodeId();\r\n    PrintStream out = LogToolUtils.createPrintStream(localDir, nodeId, containerIdStr);\r\n    try {\r\n        boolean foundAnyLogs = false;\r\n        byte[] buffer = new byte[65536];\r\n        for (String logFile : request.getLogTypes()) {\r\n            InputStream is = null;\r\n            try {\r\n                ClientResponse response = getResponseFromNMWebService(conf, webServiceClient, request, logFile);\r\n                if (response != null && response.getStatusInfo().getStatusCode() == ClientResponse.Status.OK.getStatusCode()) {\r\n                    is = response.getEntityInputStream();\r\n                    int len = 0;\r\n                    while ((len = is.read(buffer)) != -1) {\r\n                        out.write(buffer, 0, len);\r\n                    }\r\n                    out.println();\r\n                } else {\r\n                    out.println(\"Can not get any logs for the log file: \" + logFile);\r\n                    String msg = \"Response from the NodeManager:\" + nodeId + \" WebService is \" + ((response == null) ? \"null\" : \"not successful,\" + \" HTTP error code: \" + response.getStatus() + \", Server response:\\n\" + response.getEntity(String.class));\r\n                    out.println(msg);\r\n                }\r\n                out.flush();\r\n                foundAnyLogs = true;\r\n            } catch (ClientHandlerException | UniformInterfaceException ex) {\r\n                System.err.println(\"Can not find the log file:\" + logFile + \" for the container:\" + containerIdStr + \" in NodeManager:\" + nodeId);\r\n            } finally {\r\n                IOUtils.closeStream(is);\r\n            }\r\n        }\r\n        if (foundAnyLogs) {\r\n            return 0;\r\n        } else {\r\n            return -1;\r\n        }\r\n    } finally {\r\n        logCliHelper.closePrintStream(out);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getContainerReport",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerReport getContainerReport(String containerIdStr) throws YarnException, IOException\n{\r\n    return yarnClient.getContainerReport(ContainerId.fromString(containerIdStr));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printAMContainerLogs",
  "errType" : [ "Exception", "Exception", "Exception" ],
  "containingMethodsNum" : 39,
  "sourceCodeText" : "int printAMContainerLogs(Configuration conf, ContainerLogsRequest request, List<String> amContainers, LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit) throws Exception\n{\r\n    List<JSONObject> amContainersList = null;\r\n    List<ContainerLogsRequest> requests = new ArrayList<ContainerLogsRequest>();\r\n    boolean getAMContainerLists = false;\r\n    String appId = request.getAppId().toString();\r\n    StringBuilder errorMessage = new StringBuilder();\r\n    try {\r\n        amContainersList = getAMContainerInfoForRMWebService(conf, appId);\r\n        if (amContainersList != null && !amContainersList.isEmpty()) {\r\n            getAMContainerLists = true;\r\n            for (JSONObject amContainer : amContainersList) {\r\n                ContainerLogsRequest amRequest = new ContainerLogsRequest(request);\r\n                amRequest.setContainerId(amContainer.getString(\"containerId\"));\r\n                String httpAddress = amContainer.getString(\"nodeHttpAddress\");\r\n                if (httpAddress != null && !httpAddress.isEmpty()) {\r\n                    amRequest.setNodeHttpAddress(httpAddress);\r\n                }\r\n                amRequest.setNodeId(amContainer.getString(\"nodeId\"));\r\n                requests.add(amRequest);\r\n            }\r\n        }\r\n    } catch (Exception ex) {\r\n        errorMessage.append(ex.getMessage() + \"\\n\");\r\n        if (request.isAppFinished()) {\r\n            if (!conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\r\n                errorMessage.append(\"Please enable the timeline service \" + \"and make sure the timeline server is running.\");\r\n            } else {\r\n                try {\r\n                    if (YarnConfiguration.timelineServiceV2Enabled(conf)) {\r\n                        try {\r\n                            amContainersList = getAMContainerInfoFromTimelineReader(conf, appId);\r\n                            getAMContainerLists = createContainerLogsRequestForMasterContainer(requests, request, amContainersList, AppAttemptMetricsConstants.MASTER_CONTAINER_INFO);\r\n                        } catch (Exception e) {\r\n                            System.err.println(\"Unable to get AM container informations from \" + \"TimelineReader for the application:\" + appId);\r\n                            if (YarnConfiguration.timelineServiceV1Enabled(conf) || YarnConfiguration.timelineServiceV15Enabled(conf)) {\r\n                                getAMContainerLists = getAMContainerInfoForAHSWebService(conf, appId, requests, request);\r\n                            } else {\r\n                                throw e;\r\n                            }\r\n                        }\r\n                    } else {\r\n                        getAMContainerLists = getAMContainerInfoForAHSWebService(conf, appId, requests, request);\r\n                    }\r\n                } catch (Exception e) {\r\n                    errorMessage.append(e.getMessage());\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (!getAMContainerLists) {\r\n        System.err.println(\"Unable to get AM container informations \" + \"for the application:\" + appId);\r\n        System.err.println(errorMessage);\r\n        System.err.println(\"Can not get AMContainers logs for \" + \"the application:\" + appId + \" with the appOwner:\" + request.getAppOwner());\r\n        return -1;\r\n    }\r\n    List<ContainerLogsRequest> candidates = new ArrayList<>();\r\n    if (amContainers.contains(\"ALL\")) {\r\n        candidates.addAll(requests);\r\n        outStream.println();\r\n        outStream.println(\"Specified ALL for -am option. \" + \"Printed logs for all am containers.\");\r\n    } else {\r\n        for (String amContainer : amContainers) {\r\n            int amContainerId = Integer.parseInt(amContainer.trim());\r\n            if (amContainerId == -1) {\r\n                candidates.add(requests.get(requests.size() - 1));\r\n            } else {\r\n                if (amContainerId <= requests.size()) {\r\n                    candidates.add(requests.get(amContainerId - 1));\r\n                } else {\r\n                    System.err.println(String.format(\"ERROR: Specified AM containerId\" + \" (%s) exceeds the number of AM containers (%s).\", amContainerId, requests.size()));\r\n                    return -1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    Map<String, ContainerLogsRequest> newOptions = new HashMap<>();\r\n    if (request.isAppFinished()) {\r\n        newOptions = getMatchedLogTypesForFinishedApp(candidates, logCliHelper, useRegex, ignoreSizeLimit);\r\n    } else {\r\n        newOptions = getMatchedLogTypesForRunningApp(candidates, useRegex, ignoreSizeLimit);\r\n    }\r\n    for (Entry<String, ContainerLogsRequest> amRequest : newOptions.entrySet()) {\r\n        outputAMContainerLogs(amRequest.getValue(), conf, logCliHelper, useRegex, ignoreSizeLimit);\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getAMContainerInfoForAHSWebService",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean getAMContainerInfoForAHSWebService(Configuration conf, String appId, List<ContainerLogsRequest> requests, ContainerLogsRequest request) throws JSONException\n{\r\n    List<JSONObject> amContainersList = getAMContainerInfoForAHSWebService(conf, appId);\r\n    return createContainerLogsRequestForMasterContainer(requests, request, amContainersList, \"amContainerId\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createContainerLogsRequestForMasterContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean createContainerLogsRequestForMasterContainer(List<ContainerLogsRequest> requests, ContainerLogsRequest request, List<JSONObject> amContainersList, String masterContainerInfo) throws JSONException\n{\r\n    boolean getAMContainerLists = false;\r\n    if (amContainersList != null && !amContainersList.isEmpty()) {\r\n        getAMContainerLists = true;\r\n        for (JSONObject amContainer : amContainersList) {\r\n            ContainerLogsRequest amRequest = new ContainerLogsRequest(request);\r\n            amRequest.setContainerId(amContainer.getString(masterContainerInfo));\r\n            requests.add(amRequest);\r\n        }\r\n    }\r\n    return getAMContainerLists;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getAMContainerInfoFromTimelineReader",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "List<JSONObject> getAMContainerInfoFromTimelineReader(Configuration conf, String appId) throws IOException, ClientHandlerException, UniformInterfaceException, JSONException\n{\r\n    ClientResponse response = getClientResponseFromTimelineReader(conf, appId);\r\n    JSONArray appAttemptEntities = response.getEntity(JSONArray.class);\r\n    List<JSONObject> amContainersList = new ArrayList<JSONObject>();\r\n    for (int i = 0; i < appAttemptEntities.length(); i++) {\r\n        JSONObject appAttemptEntity = appAttemptEntities.getJSONObject(i);\r\n        JSONObject infoField = appAttemptEntity.getJSONObject(\"info\");\r\n        amContainersList.add(infoField);\r\n    }\r\n    Collections.reverse(amContainersList);\r\n    return amContainersList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getClientResponseFromTimelineReader",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ClientResponse getClientResponseFromTimelineReader(Configuration conf, String appId) throws IOException\n{\r\n    String webAppAddress = WebAppUtils.getHttpSchemePrefix(conf) + WebAppUtils.getTimelineReaderWebAppURLWithoutScheme(conf);\r\n    WebResource webResource = webServiceClient.resource(webAppAddress);\r\n    ClientResponse response = webResource.path(\"ws\").path(\"v2\").path(\"timeline\").path(\"clusters\").path(conf.get(YarnConfiguration.RM_CLUSTER_ID)).path(\"apps\").path(appId).path(\"entities\").path(TimelineEntityType.YARN_APPLICATION_ATTEMPT.toString()).queryParam(\"fields\", \"INFO\").accept(MediaType.APPLICATION_JSON).get(ClientResponse.class);\r\n    if (response == null || response.getStatusInfo().getStatusCode() != ClientResponse.Status.OK.getStatusCode()) {\r\n        String msg = \"Response from the timeline reader server is \" + ((response == null) ? \"null\" : \"not successful,\" + \" HTTP error code: \" + response.getStatus() + \", Server response:\\n\" + response.getEntity(String.class));\r\n        System.out.println(msg);\r\n        throw new IOException(msg);\r\n    }\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "outputAMContainerLogs",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void outputAMContainerLogs(ContainerLogsRequest request, Configuration conf, LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit) throws Exception\n{\r\n    String nodeHttpAddress = request.getNodeHttpAddress();\r\n    String containerId = request.getContainerId();\r\n    String nodeId = request.getNodeId();\r\n    if (request.isAppFinished()) {\r\n        if (containerId != null && !containerId.isEmpty()) {\r\n            if (nodeId != null && !nodeId.isEmpty()) {\r\n                logCliHelper.dumpAContainerLogsForLogType(request);\r\n            } else {\r\n                logCliHelper.dumpAContainerLogsForLogTypeWithoutNodeId(request);\r\n            }\r\n        }\r\n    } else {\r\n        if (nodeHttpAddress != null && containerId != null && !nodeHttpAddress.isEmpty() && !containerId.isEmpty()) {\r\n            ContainerState containerState = getContainerReport(containerId).getContainerState();\r\n            request.setContainerState(containerState);\r\n            printContainerLogsFromRunningApplication(conf, request, logCliHelper, useRegex, ignoreSizeLimit);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "showContainerLogInfo",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int showContainerLogInfo(ContainerLogsRequest request, LogCLIHelpers logCliHelper) throws IOException, YarnException, ClientHandlerException, UniformInterfaceException, JSONException\n{\r\n    if (!request.isAppFinished()) {\r\n        return printContainerInfoFromRunningApplication(request, logCliHelper);\r\n    } else {\r\n        return logCliHelper.printAContainerLogMetadata(request, System.out, System.err);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "showNodeLists",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int showNodeLists(ContainerLogsRequest request, LogCLIHelpers logCliHelper) throws IOException\n{\r\n    if (!request.isAppFinished()) {\r\n        System.err.println(\"The -list_nodes command can be only used with \" + \"finished applications\");\r\n        return -1;\r\n    } else {\r\n        logCliHelper.printNodesList(request, System.out, System.err);\r\n        return 0;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "showApplicationLogInfo",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "int showApplicationLogInfo(ContainerLogsRequest request, LogCLIHelpers logCliHelper) throws IOException, YarnException\n{\r\n    String appState = \"Application State: \" + (request.isAppFinished() ? \"Completed.\" : \"Running.\");\r\n    if (!request.isAppFinished()) {\r\n        List<ContainerReport> reports = getContainerReportsFromRunningApplication(request);\r\n        List<ContainerReport> filterReports = filterContainersInfo(request, reports);\r\n        if (filterReports.isEmpty()) {\r\n            System.err.println(\"Can not find any containers for the application:\" + request.getAppId() + \".\");\r\n            return -1;\r\n        }\r\n        outStream.println(appState);\r\n        for (ContainerReport report : filterReports) {\r\n            outStream.println(String.format(LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, report.getContainerId(), report.getAssignedNode()));\r\n        }\r\n        return 0;\r\n    } else {\r\n        outStream.println(appState);\r\n        logCliHelper.printContainersList(request, System.out, System.err);\r\n        return 0;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createCommandOpts",
  "errType" : null,
  "containingMethodsNum" : 42,
  "sourceCodeText" : "Options createCommandOpts()\n{\r\n    Options opts = new Options();\r\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\r\n    Option appIdOpt = new Option(APPLICATION_ID_OPTION, true, \"ApplicationId (required)\");\r\n    opts.addOption(appIdOpt);\r\n    opts.addOption(APPLICATION_ATTEMPT_ID_OPTION, true, \"ApplicationAttemptId. \" + \"Lists all logs belonging to the specified application attempt Id. \" + \"If specified, the applicationId can be omitted\");\r\n    opts.addOption(CONTAINER_ID_OPTION, true, \"ContainerId. \" + \"By default, it will print all available logs.\" + \" Work with -log_files to get only specific logs. If specified, the\" + \" applicationId can be omitted\");\r\n    opts.addOption(CLUSTER_ID_OPTION, true, \"ClusterId. \" + \"By default, it will take default cluster id from the RM\");\r\n    opts.addOption(NODE_ADDRESS_OPTION, true, \"NodeAddress in the format \" + \"nodename:port\");\r\n    opts.addOption(APP_OWNER_OPTION, true, \"AppOwner (assumed to be current user if not specified)\");\r\n    Option amOption = new Option(AM_CONTAINER_OPTION, true, \"Prints the AM Container logs for this application. \" + \"Specify comma-separated value to get logs for related AM \" + \"Container. For example, If we specify -am 1,2, we will get \" + \"the logs for the first AM Container as well as the second \" + \"AM Container. To get logs for all AM Containers, use -am ALL. \" + \"To get logs for the latest AM Container, use -am -1. \" + \"By default, it will print all available logs. Work with -log_files \" + \"to get only specific logs.\");\r\n    amOption.setValueSeparator(',');\r\n    amOption.setArgs(Option.UNLIMITED_VALUES);\r\n    amOption.setArgName(\"AM Containers\");\r\n    opts.addOption(amOption);\r\n    Option logFileOpt = new Option(PER_CONTAINER_LOG_FILES_OPTION, true, \"Specify comma-separated value \" + \"to get exact matched log files. Use \\\"ALL\\\" or \\\"*\\\" to \" + \"fetch all the log files for the container.\");\r\n    logFileOpt.setValueSeparator(',');\r\n    logFileOpt.setArgs(Option.UNLIMITED_VALUES);\r\n    logFileOpt.setArgName(\"Log File Name\");\r\n    opts.addOption(logFileOpt);\r\n    Option oldLogFileOpt = new Option(PER_CONTAINER_LOG_FILES_OLD_OPTION, true, \"Deprecated name for log_files, please use log_files option instead\");\r\n    oldLogFileOpt.setValueSeparator(',');\r\n    oldLogFileOpt.setArgs(Option.UNLIMITED_VALUES);\r\n    oldLogFileOpt.setArgName(\"Log File Name\");\r\n    opts.addOption(oldLogFileOpt);\r\n    Option logFileRegexOpt = new Option(PER_CONTAINER_LOG_FILES_REGEX_OPTION, true, \"Specify comma-separated value \" + \"to get matched log files by using java regex. Use \\\".*\\\" to \" + \"fetch all the log files for the container.\");\r\n    logFileRegexOpt.setValueSeparator(',');\r\n    logFileRegexOpt.setArgs(Option.UNLIMITED_VALUES);\r\n    logFileRegexOpt.setArgName(\"Log File Pattern\");\r\n    opts.addOption(logFileRegexOpt);\r\n    opts.addOption(SHOW_CONTAINER_LOG_INFO, false, \"Show the container log metadata, \" + \"including log-file names, the size of the log files. \" + \"You can combine this with --containerId to get log metadata for \" + \"the specific container, or with --nodeAddress to get log metadata \" + \"for all the containers on the specific NodeManager.\");\r\n    opts.addOption(SHOW_APPLICATION_LOG_INFO, false, \"Show the \" + \"containerIds which belong to the specific Application. \" + \"You can combine this with --nodeAddress to get containerIds \" + \"for all the containers on the specific NodeManager.\");\r\n    opts.addOption(LIST_NODES_OPTION, false, \"Show the list of nodes that successfully aggregated logs. \" + \"This option can only be used with finished applications.\");\r\n    opts.addOption(OUT_OPTION, true, \"Local directory for storing individual \" + \"container logs. The container logs will be stored based on the \" + \"node the container ran on.\");\r\n    opts.addOption(SIZE_OPTION, true, \"Prints the log file's first 'n' bytes \" + \"or the last 'n' bytes. Use negative values as bytes to read from \" + \"the end and positive values as bytes to read from the beginning.\");\r\n    opts.addOption(CLIENT_MAX_RETRY_OPTION, true, \"Set max retry number for a\" + \" retry client to get the container logs for the running \" + \"applications. Use a negative value to make retry forever. \" + \"The default value is 30.\");\r\n    opts.addOption(CLIENT_RETRY_INTERVAL_OPTION, true, \"Work with --client_max_retries to create a retry client. \" + \"The default value is 1000.\");\r\n    opts.addOption(SIZE_LIMIT_OPTION, true, \"Use this option to limit \" + \"the size of the total logs which could be fetched. \" + \"By default, we only allow to fetch at most \" + LOG_SIZE_LIMIT_DEFAULT + \" MB logs. If the total log size is \" + \"larger than the specified number, the CLI would fail. \" + \"The user could specify -1 to ignore the size limit \" + \"and fetch all logs.\");\r\n    opts.getOption(APPLICATION_ID_OPTION).setArgName(\"Application ID\");\r\n    opts.getOption(CONTAINER_ID_OPTION).setArgName(\"Container ID\");\r\n    opts.getOption(CLUSTER_ID_OPTION).setArgName(\"Cluster ID\");\r\n    opts.getOption(NODE_ADDRESS_OPTION).setArgName(\"Node Address\");\r\n    opts.getOption(APP_OWNER_OPTION).setArgName(\"Application Owner\");\r\n    opts.getOption(AM_CONTAINER_OPTION).setArgName(\"AM Containers\");\r\n    opts.getOption(OUT_OPTION).setArgName(\"Local Directory\");\r\n    opts.getOption(SIZE_OPTION).setArgName(\"size\");\r\n    opts.getOption(CLIENT_MAX_RETRY_OPTION).setArgName(\"Max Retries\");\r\n    opts.getOption(CLIENT_RETRY_INTERVAL_OPTION).setArgName(\"Retry Interval\");\r\n    opts.getOption(SIZE_LIMIT_OPTION).setArgName(\"Size Limit\");\r\n    return opts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createPrintOpts",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "Options createPrintOpts(Options commandOpts)\n{\r\n    Options printOpts = new Options();\r\n    printOpts.addOption(commandOpts.getOption(HELP_CMD));\r\n    printOpts.addOption(commandOpts.getOption(CONTAINER_ID_OPTION));\r\n    printOpts.addOption(commandOpts.getOption(CLUSTER_ID_OPTION));\r\n    printOpts.addOption(commandOpts.getOption(NODE_ADDRESS_OPTION));\r\n    printOpts.addOption(commandOpts.getOption(APP_OWNER_OPTION));\r\n    printOpts.addOption(commandOpts.getOption(AM_CONTAINER_OPTION));\r\n    printOpts.addOption(commandOpts.getOption(PER_CONTAINER_LOG_FILES_OPTION));\r\n    printOpts.addOption(commandOpts.getOption(LIST_NODES_OPTION));\r\n    printOpts.addOption(commandOpts.getOption(SHOW_APPLICATION_LOG_INFO));\r\n    printOpts.addOption(commandOpts.getOption(SHOW_CONTAINER_LOG_INFO));\r\n    printOpts.addOption(commandOpts.getOption(OUT_OPTION));\r\n    printOpts.addOption(commandOpts.getOption(SIZE_OPTION));\r\n    printOpts.addOption(commandOpts.getOption(PER_CONTAINER_LOG_FILES_REGEX_OPTION));\r\n    printOpts.addOption(commandOpts.getOption(CLIENT_MAX_RETRY_OPTION));\r\n    printOpts.addOption(commandOpts.getOption(CLIENT_RETRY_INTERVAL_OPTION));\r\n    printOpts.addOption(commandOpts.getOption(SIZE_LIMIT_OPTION));\r\n    return printOpts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "parseAMContainer",
  "errType" : [ "NumberFormatException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<String> parseAMContainer(CommandLine commandLine, Options printOpts) throws NumberFormatException\n{\r\n    List<String> amContainersList = new ArrayList<String>();\r\n    String[] amContainers = commandLine.getOptionValues(AM_CONTAINER_OPTION);\r\n    for (String am : amContainers) {\r\n        boolean errorInput = false;\r\n        if (!am.trim().equalsIgnoreCase(\"ALL\")) {\r\n            try {\r\n                int id = Integer.parseInt(am.trim());\r\n                if (id != -1 && id <= 0) {\r\n                    errorInput = true;\r\n                }\r\n            } catch (NumberFormatException ex) {\r\n                errorInput = true;\r\n            }\r\n            if (errorInput) {\r\n                String errMessage = \"Invalid input for option -am. Valid inputs are 'ALL', -1 \" + \"and any other integer which is larger than 0.\";\r\n                printHelpMessage(printOpts);\r\n                throw new NumberFormatException(errMessage);\r\n            }\r\n            amContainersList.add(am.trim());\r\n        } else {\r\n            amContainersList.add(\"ALL\");\r\n            break;\r\n        }\r\n    }\r\n    return amContainersList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "fetchAMContainerLogs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int fetchAMContainerLogs(ContainerLogsRequest request, List<String> amContainersList, LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit) throws Exception\n{\r\n    return printAMContainerLogs(getConf(), request, amContainersList, logCliHelper, useRegex, ignoreSizeLimit);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "fetchContainerLogs",
  "errType" : [ "IOException|YarnException" ],
  "containingMethodsNum" : 30,
  "sourceCodeText" : "int fetchContainerLogs(ContainerLogsRequest request, LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit) throws IOException, ClientHandlerException, UniformInterfaceException, JSONException\n{\r\n    String appIdStr = request.getAppId().toString();\r\n    String containerIdStr = request.getContainerId();\r\n    String nodeAddress = request.getNodeId();\r\n    String appOwner = request.getAppOwner();\r\n    boolean isAppFinished = request.isAppFinished();\r\n    if (isAppFinished) {\r\n        ContainerLogsRequest newOptions = getMatchedLogOptions(request, logCliHelper, useRegex, ignoreSizeLimit);\r\n        if (newOptions == null) {\r\n            System.err.println(\"Can not find any log file matching the pattern: \" + request.getLogTypes() + \" for the container: \" + request.getContainerId() + \" within the application: \" + request.getAppId());\r\n            return -1;\r\n        }\r\n        if (nodeAddress != null && !nodeAddress.isEmpty()) {\r\n            return logCliHelper.dumpAContainerLogsForLogType(newOptions);\r\n        } else {\r\n            return logCliHelper.dumpAContainerLogsForLogTypeWithoutNodeId(newOptions);\r\n        }\r\n    }\r\n    String nodeHttpAddress = null;\r\n    String nodeId = null;\r\n    try {\r\n        ContainerReport report = getContainerReport(containerIdStr);\r\n        nodeHttpAddress = report.getNodeHttpAddress();\r\n        if (nodeHttpAddress != null && !nodeHttpAddress.isEmpty()) {\r\n            nodeHttpAddress = nodeHttpAddress.replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), \"\");\r\n            request.setNodeHttpAddress(nodeHttpAddress);\r\n        }\r\n        nodeId = report.getAssignedNode().toString();\r\n        request.setNodeId(nodeId);\r\n        request.setContainerState(report.getContainerState());\r\n    } catch (IOException | YarnException ex) {\r\n        nodeHttpAddress = getNodeHttpAddressFromRMWebString(request);\r\n        if (nodeHttpAddress != null && !nodeHttpAddress.isEmpty()) {\r\n            request.setNodeHttpAddress(nodeHttpAddress);\r\n        } else {\r\n            int result = -1;\r\n            ContainerLogsRequest newOptions = getMatchedLogOptions(request, logCliHelper, useRegex, ignoreSizeLimit);\r\n            if (newOptions == null) {\r\n                System.err.println(\"Can not find any log file matching the pattern: \" + request.getLogTypes() + \" for the container: \" + request.getContainerId() + \" within the application: \" + request.getAppId());\r\n            } else {\r\n                if (nodeAddress != null && !nodeAddress.isEmpty()) {\r\n                    result = logCliHelper.dumpAContainerLogsForLogType(newOptions);\r\n                } else {\r\n                    result = logCliHelper.dumpAContainerLogsForLogTypeWithoutNodeId(newOptions);\r\n                }\r\n            }\r\n            if (result == -1) {\r\n                System.err.println(\"Unable to get logs for this container:\" + containerIdStr + \" for the application:\" + appIdStr + \" with the appOwner: \" + appOwner);\r\n                System.err.println(\"The application: \" + appIdStr + \" is still running, and we can not get Container report \" + \"for the container: \" + containerIdStr + \". Please try later \" + \"or after the application finishes.\");\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n    ContainerLogsRequest newRequest = getMatchedOptionForRunningApp(request, useRegex, ignoreSizeLimit);\r\n    if (newRequest == null) {\r\n        return -1;\r\n    }\r\n    return printContainerLogsFromRunningApplication(getConf(), request, logCliHelper, useRegex, ignoreSizeLimit);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "fetchApplicationLogs",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "int fetchApplicationLogs(ContainerLogsRequest options, LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit) throws IOException, YarnException\n{\r\n    int resultCode = -1;\r\n    if (options.isAppFinished()) {\r\n        ContainerLogsRequest newOptions = getMatchedLogOptions(options, logCliHelper, useRegex, ignoreSizeLimit);\r\n        if (newOptions == null) {\r\n            System.err.println(\"Can not find any log file matching the pattern: \" + options.getLogTypes() + \" for the application: \" + options.getAppId());\r\n        } else {\r\n            resultCode = logCliHelper.dumpAllContainersLogs(newOptions);\r\n        }\r\n    } else {\r\n        List<ContainerLogsRequest> containerLogRequests = getContainersLogRequestForRunningApplication(options);\r\n        Map<String, ContainerLogsRequest> matchedLogTypes = getMatchedLogTypesForRunningApp(containerLogRequests, useRegex, ignoreSizeLimit);\r\n        for (Entry<String, ContainerLogsRequest> container : matchedLogTypes.entrySet()) {\r\n            int result = printContainerLogsFromRunningApplication(getConf(), container.getValue(), logCliHelper, useRegex, ignoreSizeLimit);\r\n            if (result == 0) {\r\n                resultCode = 0;\r\n            }\r\n        }\r\n    }\r\n    if (resultCode == -1) {\r\n        System.err.println(\"Can not find the logs for the application: \" + options.getAppId() + \" with the appOwner: \" + options.getAppOwner());\r\n    }\r\n    return resultCode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "guessAppOwner",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String guessAppOwner(ApplicationReport appReport, ApplicationId appId) throws IOException\n{\r\n    String appOwner = null;\r\n    if (appReport != null) {\r\n        appOwner = appReport.getUser();\r\n    } else {\r\n        appOwner = UserGroupInformation.getCurrentUser().getShortUserName();\r\n        appOwner = LogCLIHelpers.getOwnerForAppIdOrNull(appId, appOwner, getConf());\r\n    }\r\n    return appOwner;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getMatchedLogOptions",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ContainerLogsRequest getMatchedLogOptions(ContainerLogsRequest request, LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit) throws IOException\n{\r\n    ContainerLogsRequest newOptions = new ContainerLogsRequest(request);\r\n    Set<ContainerLogFileInfo> files = logCliHelper.listContainerLogs(request);\r\n    Set<String> matchedFiles = getMatchedLogFiles(request, files, useRegex, ignoreSizeLimit);\r\n    if (matchedFiles.isEmpty()) {\r\n        return null;\r\n    } else {\r\n        newOptions.setLogTypes(matchedFiles);\r\n        return newOptions;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getMatchedLogFiles",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Set<String> getMatchedLogFiles(ContainerLogsRequest options, Collection<ContainerLogFileInfo> candidate, boolean useRegex, boolean ignoreSizeLimit) throws IOException\n{\r\n    Set<String> matchedFiles = new HashSet<String>();\r\n    Set<String> filePattern = options.getLogTypes();\r\n    long size = options.getBytes();\r\n    boolean getAll = options.getLogTypes().contains(\"ALL\");\r\n    Iterator<ContainerLogFileInfo> iterator = candidate.iterator();\r\n    while (iterator.hasNext()) {\r\n        boolean matchedFile = false;\r\n        ContainerLogFileInfo logInfo = iterator.next();\r\n        if (getAll) {\r\n            matchedFile = true;\r\n        } else if (useRegex) {\r\n            if (isFileMatching(logInfo.getFileName(), filePattern)) {\r\n                matchedFile = true;\r\n            }\r\n        } else {\r\n            if (filePattern.contains(logInfo.getFileName())) {\r\n                matchedFile = true;\r\n            }\r\n        }\r\n        if (matchedFile) {\r\n            matchedFiles.add(logInfo.getFileName());\r\n            if (!ignoreSizeLimit) {\r\n                decrLogSizeLimit(Math.min(Long.parseLong(logInfo.getFileSize()), size));\r\n                if (getLogSizeLimitLeft() < 0) {\r\n                    throw new RuntimeException(\"The total log size is too large.\" + \"The log size limit is \" + specifedLogLimits + \"MB. \" + \"Please specify a proper value --size option or if you \" + \"really want to fetch all, please \" + \"specify -1 for --size_limit_mb option.\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return matchedFiles;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "isFileMatching",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isFileMatching(String fileType, Set<String> logTypes)\n{\r\n    for (String logType : logTypes) {\r\n        Pattern filterPattern = Pattern.compile(logType);\r\n        boolean match = filterPattern.matcher(fileType).find();\r\n        if (match) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getContainersLogRequestForRunningApplication",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "List<ContainerLogsRequest> getContainersLogRequestForRunningApplication(ContainerLogsRequest options) throws YarnException, IOException\n{\r\n    List<ContainerLogsRequest> newOptionsList = new ArrayList<ContainerLogsRequest>();\r\n    List<ContainerReport> reports = getContainerReportsFromRunningApplication(options);\r\n    for (ContainerReport container : reports) {\r\n        ContainerLogsRequest newOptions = new ContainerLogsRequest(options);\r\n        newOptions.setContainerId(container.getContainerId().toString());\r\n        newOptions.setNodeId(container.getAssignedNode().toString());\r\n        String httpAddress = container.getNodeHttpAddress();\r\n        if (httpAddress != null && !httpAddress.isEmpty()) {\r\n            newOptions.setNodeHttpAddress(httpAddress.replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), \"\"));\r\n        }\r\n        newOptions.setContainerState(container.getContainerState());\r\n        newOptionsList.add(newOptions);\r\n    }\r\n    return newOptionsList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getContainerReportsFromRunningApplication",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<ContainerReport> getContainerReportsFromRunningApplication(ContainerLogsRequest options) throws YarnException, IOException\n{\r\n    List<ContainerReport> reports = new ArrayList<ContainerReport>();\r\n    List<ApplicationAttemptReport> attempts = yarnClient.getApplicationAttempts(options.getAppId());\r\n    Map<ContainerId, ContainerReport> containerMap = new TreeMap<ContainerId, ContainerReport>();\r\n    for (ApplicationAttemptReport attempt : attempts) {\r\n        List<ContainerReport> containers = yarnClient.getContainers(attempt.getApplicationAttemptId());\r\n        for (ContainerReport container : containers) {\r\n            if (!containerMap.containsKey(container.getContainerId())) {\r\n                containerMap.put(container.getContainerId(), container);\r\n            }\r\n        }\r\n    }\r\n    reports.addAll(containerMap.values());\r\n    return reports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "filterContainersInfo",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "List<ContainerReport> filterContainersInfo(ContainerLogsRequest options, List<ContainerReport> containers)\n{\r\n    List<ContainerReport> filterReports = new ArrayList<ContainerReport>(containers);\r\n    String nodeId = options.getNodeId();\r\n    boolean filterBasedOnNodeId = (nodeId != null && !nodeId.isEmpty());\r\n    String containerId = options.getContainerId();\r\n    boolean filterBasedOnContainerId = (containerId != null && !containerId.isEmpty());\r\n    if (filterBasedOnNodeId || filterBasedOnContainerId) {\r\n        for (ContainerReport report : containers) {\r\n            if (filterBasedOnContainerId) {\r\n                if (!report.getContainerId().toString().equalsIgnoreCase(containerId)) {\r\n                    filterReports.remove(report);\r\n                }\r\n            }\r\n            if (filterBasedOnNodeId) {\r\n                if (!report.getAssignedNode().toString().equalsIgnoreCase(nodeId)) {\r\n                    filterReports.remove(report);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return filterReports;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printContainerInfoFromRunningApplication",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "int printContainerInfoFromRunningApplication(ContainerLogsRequest options, LogCLIHelpers logCliHelper) throws YarnException, IOException, ClientHandlerException, UniformInterfaceException, JSONException\n{\r\n    String containerIdStr = options.getContainerId();\r\n    String nodeIdStr = options.getNodeId();\r\n    List<ContainerReport> reports = getContainerReportsFromRunningApplication(options);\r\n    List<ContainerReport> filteredReports = filterContainersInfo(options, reports);\r\n    if (filteredReports.isEmpty()) {\r\n        String nodeHttpAddress = null;\r\n        if (options.getContainerId() != null && !options.getContainerId().isEmpty()) {\r\n            nodeHttpAddress = getNodeHttpAddressFromRMWebString(options);\r\n        }\r\n        if (nodeHttpAddress != null) {\r\n            outputContainerLogMeta(options.getContainerId(), options.getNodeId(), nodeHttpAddress);\r\n            return 0;\r\n        } else {\r\n            int result = logCliHelper.printAContainerLogMetadata(options, System.out, System.err);\r\n            if (result == -1) {\r\n                StringBuilder sb = new StringBuilder();\r\n                if (containerIdStr != null && !containerIdStr.isEmpty()) {\r\n                    sb.append(\"Trying to get container with ContainerId: \" + containerIdStr + \"\\n\");\r\n                }\r\n                if (nodeIdStr != null && !nodeIdStr.isEmpty()) {\r\n                    sb.append(\"Trying to get container from NodeManager: \" + nodeIdStr + \"\\n\");\r\n                }\r\n                sb.append(\"Can not find any matched containers for the application: \" + options.getAppId());\r\n                System.err.println(sb.toString());\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n    for (ContainerReport report : filteredReports) {\r\n        String nodeId = report.getAssignedNode().toString();\r\n        String nodeHttpAddress = report.getNodeHttpAddress().replaceFirst(WebAppUtils.getHttpSchemePrefix(getConf()), \"\");\r\n        String containerId = report.getContainerId().toString();\r\n        outputContainerLogMeta(containerId, nodeId, nodeHttpAddress);\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "outputContainerLogMeta",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void outputContainerLogMeta(String containerId, String nodeId, String nodeHttpAddress) throws IOException\n{\r\n    String containerString = String.format(LogCLIHelpers.CONTAINER_ON_NODE_PATTERN, containerId, nodeId);\r\n    outStream.println(containerString);\r\n    outStream.println(StringUtils.repeat(\"=\", containerString.length()));\r\n    outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN, \"LogFile\", \"LogLength\", \"LastModificationTime\", \"LogAggregationType\");\r\n    outStream.println(StringUtils.repeat(\"=\", containerString.length() * 2));\r\n    List<Pair<ContainerLogFileInfo, String>> infos = getContainerLogFiles(getConf(), containerId, nodeHttpAddress);\r\n    for (Pair<ContainerLogFileInfo, String> info : infos) {\r\n        outStream.printf(LogCLIHelpers.PER_LOG_FILE_INFO_PATTERN, info.getKey().getFileName(), info.getKey().getFileSize(), info.getKey().getLastModifiedTime(), info.getValue());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getMatchedContainerLogFiles",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Set<String> getMatchedContainerLogFiles(ContainerLogsRequest request, boolean useRegex, boolean ignoreSizeLimit) throws IOException\n{\r\n    List<Pair<ContainerLogFileInfo, String>> allLogFileInfos = getContainerLogFiles(getConf(), request.getContainerId(), request.getNodeHttpAddress());\r\n    List<ContainerLogFileInfo> fileNames = new ArrayList<ContainerLogFileInfo>();\r\n    for (Pair<ContainerLogFileInfo, String> fileInfo : allLogFileInfos) {\r\n        fileNames.add(fileInfo.getKey());\r\n    }\r\n    return getMatchedLogFiles(request, fileNames, useRegex, ignoreSizeLimit);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getResponseFromNMWebService",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ClientResponse getResponseFromNMWebService(Configuration conf, Client webServiceClient, ContainerLogsRequest request, String logFile)\n{\r\n    return LogToolUtils.getResponseFromNMWebService(conf, webServiceClient, request, logFile);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getNodeHttpAddressFromRMWebString",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String getNodeHttpAddressFromRMWebString(ContainerLogsRequest request) throws ClientHandlerException, UniformInterfaceException, JSONException\n{\r\n    if (request.getNodeId() == null || request.getNodeId().isEmpty()) {\r\n        return null;\r\n    }\r\n    JSONObject nodeInfo = YarnWebServiceUtils.getNodeInfoFromRMWebService(getConf(), request.getNodeId()).getJSONObject(\"node\");\r\n    return nodeInfo.has(\"nodeHTTPAddress\") ? nodeInfo.getString(\"nodeHTTPAddress\") : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getLogSizeLimitLeft",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getLogSizeLimitLeft()\n{\r\n    return this.logSizeLeft;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "decrLogSizeLimit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void decrLogSizeLimit(long used)\n{\r\n    this.logSizeLeft -= used;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getMatchedOptionForRunningApp",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "ContainerLogsRequest getMatchedOptionForRunningApp(ContainerLogsRequest container, boolean useRegex, boolean ignoreSizeLimit) throws IOException\n{\r\n    String containerIdStr = container.getContainerId().toString();\r\n    String nodeHttpAddress = container.getNodeHttpAddress();\r\n    if (nodeHttpAddress == null || nodeHttpAddress.isEmpty()) {\r\n        System.err.println(\"Can not get the logs for the container: \" + containerIdStr);\r\n        System.err.println(\"The node http address is required to get container \" + \"logs for the Running application.\");\r\n        return null;\r\n    }\r\n    Set<String> matchedFiles = getMatchedContainerLogFiles(container, useRegex, ignoreSizeLimit);\r\n    if (matchedFiles.isEmpty()) {\r\n        System.err.println(\"Can not find any log file matching the pattern: \" + container.getLogTypes() + \" for the container: \" + containerIdStr + \" within the application: \" + container.getAppId());\r\n        return null;\r\n    }\r\n    container.setLogTypes(matchedFiles);\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getMatchedLogTypesForRunningApp",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Map<String, ContainerLogsRequest> getMatchedLogTypesForRunningApp(List<ContainerLogsRequest> containerLogRequests, boolean useRegex, boolean ignoreSizeLimit)\n{\r\n    Map<String, ContainerLogsRequest> containerMatchedLog = new HashMap<>();\r\n    for (ContainerLogsRequest container : containerLogRequests) {\r\n        try {\r\n            ContainerLogsRequest request = getMatchedOptionForRunningApp(container, useRegex, ignoreSizeLimit);\r\n            if (request == null) {\r\n                continue;\r\n            }\r\n            containerMatchedLog.put(container.getContainerId(), request);\r\n        } catch (IOException ex) {\r\n            System.err.println(ex);\r\n            continue;\r\n        }\r\n    }\r\n    return containerMatchedLog;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getMatchedLogTypesForFinishedApp",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<String, ContainerLogsRequest> getMatchedLogTypesForFinishedApp(List<ContainerLogsRequest> containerLogRequests, LogCLIHelpers logCliHelper, boolean useRegex, boolean ignoreSizeLimit)\n{\r\n    Map<String, ContainerLogsRequest> containerMatchedLog = new HashMap<>();\r\n    for (ContainerLogsRequest container : containerLogRequests) {\r\n        try {\r\n            ContainerLogsRequest request = getMatchedLogOptions(container, logCliHelper, useRegex, ignoreSizeLimit);\r\n            if (request == null) {\r\n                System.err.println(\"Can not find any log file matching the pattern: \" + container.getLogTypes() + \" for the container: \" + container.getContainerId() + \" within the application: \" + container.getAppId());\r\n                continue;\r\n            }\r\n            containerMatchedLog.put(container.getContainerId(), request);\r\n        } catch (IOException ex) {\r\n            System.err.println(ex);\r\n            continue;\r\n        }\r\n    }\r\n    return containerMatchedLog;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "iterator",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Iterator<ResourceRequestInfo> iterator()\n{\r\n    return new RequestInfoIterator(remoteRequestsTable.values().iterator());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "get",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceRequestInfo get(Priority priority, String location, ExecutionType execType, Resource capability)\n{\r\n    TreeMap<Resource, ResourceRequestInfo> capabilityMap = getCapabilityMap(priority, location, execType);\r\n    if (capabilityMap == null) {\r\n        return null;\r\n    }\r\n    return capabilityMap.get(capability);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "put",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void put(Priority priority, String resourceName, ExecutionType execType, Resource capability, ResourceRequestInfo resReqInfo)\n{\r\n    Map<String, Map<ExecutionType, TreeMap<Resource, ResourceRequestInfo>>> locationMap = remoteRequestsTable.get(priority);\r\n    if (locationMap == null) {\r\n        locationMap = new HashMap<>();\r\n        this.remoteRequestsTable.put(priority, locationMap);\r\n        LOG.debug(\"Added priority={}\", priority);\r\n    }\r\n    Map<ExecutionType, TreeMap<Resource, ResourceRequestInfo>> execTypeMap = locationMap.get(resourceName);\r\n    if (execTypeMap == null) {\r\n        execTypeMap = new HashMap<>();\r\n        locationMap.put(resourceName, execTypeMap);\r\n        LOG.debug(\"Added resourceName={}\", resourceName);\r\n    }\r\n    TreeMap<Resource, ResourceRequestInfo> capabilityMap = execTypeMap.get(execType);\r\n    if (capabilityMap == null) {\r\n        capabilityMap = new TreeMap<>(new AMRMClientImpl.ResourceReverseComparator());\r\n        execTypeMap.put(execType, capabilityMap);\r\n        LOG.debug(\"Added Execution Type={}\", execType);\r\n    }\r\n    capabilityMap.put(capability, resReqInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "remove",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "ResourceRequestInfo remove(Priority priority, String resourceName, ExecutionType execType, Resource capability)\n{\r\n    ResourceRequestInfo retVal = null;\r\n    Map<String, Map<ExecutionType, TreeMap<Resource, ResourceRequestInfo>>> locationMap = remoteRequestsTable.get(priority);\r\n    if (locationMap == null) {\r\n        LOG.debug(\"No such priority={}\", priority);\r\n        return null;\r\n    }\r\n    Map<ExecutionType, TreeMap<Resource, ResourceRequestInfo>> execTypeMap = locationMap.get(resourceName);\r\n    if (execTypeMap == null) {\r\n        LOG.debug(\"No such resourceName={}\", resourceName);\r\n        return null;\r\n    }\r\n    TreeMap<Resource, ResourceRequestInfo> capabilityMap = execTypeMap.get(execType);\r\n    if (capabilityMap == null) {\r\n        LOG.debug(\"No such Execution Type={}\", execType);\r\n        return null;\r\n    }\r\n    retVal = capabilityMap.remove(capability);\r\n    if (capabilityMap.size() == 0) {\r\n        execTypeMap.remove(execType);\r\n        if (execTypeMap.size() == 0) {\r\n            locationMap.remove(resourceName);\r\n            if (locationMap.size() == 0) {\r\n                this.remoteRequestsTable.remove(priority);\r\n            }\r\n        }\r\n    }\r\n    return retVal;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getLocationMap",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Map<String, Map<ExecutionType, TreeMap<Resource, ResourceRequestInfo>>> getLocationMap(Priority priority)\n{\r\n    return remoteRequestsTable.get(priority);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getExecutionTypeMap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Map<ExecutionType, TreeMap<Resource, ResourceRequestInfo>> getExecutionTypeMap(Priority priority, String location)\n{\r\n    Map<String, Map<ExecutionType, TreeMap<Resource, ResourceRequestInfo>>> locationMap = getLocationMap(priority);\r\n    if (locationMap == null) {\r\n        return null;\r\n    }\r\n    return locationMap.get(location);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getCapabilityMap",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "TreeMap<Resource, ResourceRequestInfo> getCapabilityMap(Priority priority, String location, ExecutionType execType)\n{\r\n    Map<ExecutionType, TreeMap<Resource, ResourceRequestInfo>> executionTypeMap = getExecutionTypeMap(priority, location);\r\n    if (executionTypeMap == null) {\r\n        return null;\r\n    }\r\n    return executionTypeMap.get(execType);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getAllResourceRequestInfos",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "List<ResourceRequestInfo> getAllResourceRequestInfos(Priority priority, Collection<String> locations)\n{\r\n    List retList = new LinkedList<>();\r\n    for (String location : locations) {\r\n        for (ExecutionType eType : ExecutionType.values()) {\r\n            TreeMap<Resource, ResourceRequestInfo> capabilityMap = getCapabilityMap(priority, location, eType);\r\n            if (capabilityMap != null) {\r\n                retList.addAll(capabilityMap.values());\r\n            }\r\n        }\r\n    }\r\n    return retList;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "getMatchingRequests",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<ResourceRequestInfo> getMatchingRequests(Priority priority, String resourceName, ExecutionType executionType, Resource capability)\n{\r\n    List<ResourceRequestInfo> list = new LinkedList<>();\r\n    TreeMap<Resource, ResourceRequestInfo> capabilityMap = getCapabilityMap(priority, resourceName, executionType);\r\n    if (capabilityMap != null) {\r\n        ResourceRequestInfo resourceRequestInfo = capabilityMap.get(capability);\r\n        if (resourceRequestInfo != null) {\r\n            list.add(resourceRequestInfo);\r\n        } else {\r\n            list.addAll(capabilityMap.tailMap(capability).values());\r\n        }\r\n    }\r\n    return list;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "addResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ResourceRequestInfo addResourceRequest(Long allocationRequestId, Priority priority, String resourceName, ExecutionTypeRequest execTypeReq, Resource capability, T req, boolean relaxLocality, String labelExpression)\n{\r\n    ResourceRequestInfo resourceRequestInfo = get(priority, resourceName, execTypeReq.getExecutionType(), capability);\r\n    if (resourceRequestInfo == null) {\r\n        resourceRequestInfo = new ResourceRequestInfo(allocationRequestId, priority, resourceName, capability, relaxLocality);\r\n        put(priority, resourceName, execTypeReq.getExecutionType(), capability, resourceRequestInfo);\r\n    }\r\n    resourceRequestInfo.remoteRequest.setExecutionTypeRequest(execTypeReq);\r\n    resourceRequestInfo.remoteRequest.setNumContainers(resourceRequestInfo.remoteRequest.getNumContainers() + 1);\r\n    if (relaxLocality) {\r\n        resourceRequestInfo.containerRequests.add(req);\r\n    }\r\n    if (ResourceRequest.ANY.equals(resourceName)) {\r\n        resourceRequestInfo.remoteRequest.setNodeLabelExpression(labelExpression);\r\n    }\r\n    LOG.debug(\"Adding request to ask {}\", resourceRequestInfo.remoteRequest);\r\n    return resourceRequestInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "decResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ResourceRequestInfo decResourceRequest(Priority priority, String resourceName, ExecutionTypeRequest execTypeReq, Resource capability, T req)\n{\r\n    ResourceRequestInfo resourceRequestInfo = get(priority, resourceName, execTypeReq.getExecutionType(), capability);\r\n    if (resourceRequestInfo == null) {\r\n        LOG.debug(\"Not decrementing resource as ResourceRequestInfo with\" + \" priority={} resourceName={} executionType={} capability={} is\" + \" not present in request table\", priority, resourceName, execTypeReq, capability);\r\n        return null;\r\n    }\r\n    LOG.debug(\"BEFORE decResourceRequest: applicationId= priority={}\" + \" resourceName={} numContainers={}\", priority.getPriority(), resourceName, resourceRequestInfo.remoteRequest.getNumContainers());\r\n    resourceRequestInfo.remoteRequest.setNumContainers(resourceRequestInfo.remoteRequest.getNumContainers() - 1);\r\n    resourceRequestInfo.containerRequests.remove(req);\r\n    if (resourceRequestInfo.remoteRequest.getNumContainers() < 0) {\r\n        resourceRequestInfo.remoteRequest.setNumContainers(0);\r\n    }\r\n    return resourceRequestInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\api\\impl",
  "methodName" : "isEmpty",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isEmpty()\n{\r\n    return remoteRequestsTable.isEmpty();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    ApplicationCLI cli = new ApplicationCLI();\r\n    cli.setSysOutPrintStream(System.out);\r\n    cli.setSysErrPrintStream(System.err);\r\n    int res = ToolRunner.run(cli, preProcessArgs(args));\r\n    cli.stop();\r\n    System.exit(res);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "preProcessArgs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] preProcessArgs(String[] args)\n{\r\n    if (args.length > 0) {\r\n        firstArg = args[0];\r\n        return Arrays.copyOfRange(args, 1, args.length);\r\n    } else {\r\n        return args;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "run",
  "errType" : null,
  "containingMethodsNum" : 55,
  "sourceCodeText" : "int run(String[] args) throws Exception\n{\r\n    int exitCode = -1;\r\n    Options opts = new Options();\r\n    String title = null;\r\n    if (firstArg != null) {\r\n        title = firstArg;\r\n    } else if (args.length > 0) {\r\n        title = args[0];\r\n    }\r\n    if (APPLICATION.equalsIgnoreCase(title) || APP.equalsIgnoreCase(title)) {\r\n        title = APPLICATION;\r\n        addApplicationOptions(opts);\r\n    } else if (APPLICATION_ATTEMPT.equalsIgnoreCase(title)) {\r\n        addApplicationAttemptOptions(opts);\r\n    } else if (CONTAINER.equalsIgnoreCase(title)) {\r\n        addContainerOptions(opts);\r\n    }\r\n    CommandLine cliParser = createCLIParser(opts, args);\r\n    if (cliParser == null) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    if (cliParser.hasOption(CLUSTER_ID_OPTION)) {\r\n        String clusterIdStr = cliParser.getOptionValue(CLUSTER_ID_OPTION);\r\n        getConf().set(YarnConfiguration.RM_CLUSTER_ID, clusterIdStr);\r\n    }\r\n    createAndStartYarnClient();\r\n    if (cliParser.hasOption(STATUS_CMD)) {\r\n        return executeStatusCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(LIST_CMD)) {\r\n        return executeListCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(KILL_CMD)) {\r\n        return executeKillCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(MOVE_TO_QUEUE_CMD)) {\r\n        return executeMoveToQueueCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(FAIL_CMD)) {\r\n        return executeFailCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(UPDATE_PRIORITY)) {\r\n        return executeUpdatePriorityCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(SIGNAL_CMD)) {\r\n        return executeSignalCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(SHELL_CMD)) {\r\n        return executeShellCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(LAUNCH_CMD)) {\r\n        return executeLaunchCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(STOP_CMD)) {\r\n        return executeStopCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(START_CMD)) {\r\n        return executeStartCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(SAVE_CMD)) {\r\n        return executeSaveCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(DESTROY_CMD)) {\r\n        return executeDestroyCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(FLEX_CMD)) {\r\n        return executeFlexCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(ENABLE_FAST_LAUNCH)) {\r\n        return executeEnableFastLaunchCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(UPDATE_LIFETIME)) {\r\n        return executeUpdateLifeTimeCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(CHANGE_APPLICATION_QUEUE)) {\r\n        return executeChangeApplicationQueueCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(UPGRADE_CMD)) {\r\n        return executeUpgradeCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(DECOMMISSION)) {\r\n        return executeDecommissionCommand(cliParser, title, opts);\r\n    } else if (cliParser.hasOption(HELP_CMD)) {\r\n        printUsage(title, opts);\r\n        return 0;\r\n    } else {\r\n        syserr.println(\"Invalid Command Usage : \");\r\n        printUsage(title, opts);\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getApplicationReport",
  "errType" : [ "ApplicationNotFoundException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationReport getApplicationReport(ApplicationId applicationId) throws IOException, YarnException\n{\r\n    ApplicationReport appReport = null;\r\n    try {\r\n        appReport = client.getApplicationReport(applicationId);\r\n    } catch (ApplicationNotFoundException e) {\r\n        throw new YarnException(\"Application with id '\" + applicationId + \"' doesn't exist in RM or Timeline Server.\");\r\n    }\r\n    return appReport;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getAppNameAndType",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "String[] getAppNameAndType(CommandLine cliParser, String option) throws IOException, YarnException\n{\r\n    String applicationIdOrName = cliParser.getOptionValue(option);\r\n    try {\r\n        ApplicationId id = ApplicationId.fromString(applicationIdOrName);\r\n        ApplicationReport report = getApplicationReport(id);\r\n        return new String[] { report.getName(), report.getApplicationType() };\r\n    } catch (IllegalArgumentException e) {\r\n        String appType = getSingleAppTypeFromCLI(cliParser);\r\n        return new String[] { applicationIdOrName, appType };\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getSingleAppTypeFromCLI",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "String getSingleAppTypeFromCLI(CommandLine cliParser)\n{\r\n    if (cliParser.hasOption(APP_TYPE_CMD)) {\r\n        String[] types = cliParser.getOptionValues(APP_TYPE_CMD);\r\n        if (types != null) {\r\n            for (String type : types) {\r\n                if (!type.trim().isEmpty()) {\r\n                    return StringUtils.toLowerCase(type).trim();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return AppAdminClient.DEFAULT_TYPE;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "updateApplicationTimeout",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void updateApplicationTimeout(String applicationId, ApplicationTimeoutType timeoutType, long timeoutInSec) throws YarnException, IOException\n{\r\n    ApplicationId appId = ApplicationId.fromString(applicationId);\r\n    String newTimeout = Times.formatISO8601(System.currentTimeMillis() + timeoutInSec * 1000);\r\n    sysout.println(\"Updating timeout for given timeoutType: \" + timeoutType.toString() + \" of an application \" + applicationId);\r\n    UpdateApplicationTimeoutsRequest request = UpdateApplicationTimeoutsRequest.newInstance(appId, Collections.singletonMap(timeoutType, newTimeout));\r\n    UpdateApplicationTimeoutsResponse updateApplicationTimeouts = client.updateApplicationTimeouts(request);\r\n    String updatedTimeout = updateApplicationTimeouts.getApplicationTimeouts().get(timeoutType);\r\n    if (timeoutType.equals(ApplicationTimeoutType.LIFETIME) && !newTimeout.equals(updatedTimeout)) {\r\n        sysout.println(\"Updated lifetime of an application  \" + applicationId + \" to queue max/default lifetime.\" + \" New expiry time is \" + updatedTimeout);\r\n        return;\r\n    }\r\n    sysout.println(\"Successfully updated \" + timeoutType.toString() + \" of an application \" + applicationId + \". New expiry time is \" + updatedTimeout);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "signalToContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void signalToContainer(String containerIdStr, SignalContainerCommand command) throws YarnException, IOException\n{\r\n    ContainerId containerId = ContainerId.fromString(containerIdStr);\r\n    sysout.println(\"Signalling container \" + containerIdStr);\r\n    client.signalToContainer(containerId, command);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "shellToContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void shellToContainer(String containerIdStr, ShellContainerCommand command) throws YarnException, IOException\n{\r\n    ContainerId containerId = ContainerId.fromString(containerIdStr);\r\n    sysout.println(\"Shelling to container \" + containerIdStr);\r\n    client.shellToContainer(containerId, command);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printUsage",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void printUsage(String title, Options opts)\n{\r\n    new HelpFormatter().printHelp(title, opts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printApplicationAttemptReport",
  "errType" : [ "ApplicationNotFoundException", "ApplicationAttemptNotFoundException" ],
  "containingMethodsNum" : 24,
  "sourceCodeText" : "int printApplicationAttemptReport(String applicationAttemptId) throws YarnException, IOException\n{\r\n    ApplicationAttemptReport appAttemptReport = null;\r\n    try {\r\n        appAttemptReport = client.getApplicationAttemptReport(ApplicationAttemptId.fromString(applicationAttemptId));\r\n    } catch (ApplicationNotFoundException e) {\r\n        sysout.println(\"Application for AppAttempt with id '\" + applicationAttemptId + \"' doesn't exist in RM or Timeline Server.\");\r\n        return -1;\r\n    } catch (ApplicationAttemptNotFoundException e) {\r\n        sysout.println(\"Application Attempt with id '\" + applicationAttemptId + \"' doesn't exist in RM or Timeline Server.\");\r\n        return -1;\r\n    }\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter appAttemptReportStr = new PrintWriter(new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\r\n    if (appAttemptReport != null) {\r\n        appAttemptReportStr.println(\"Application Attempt Report : \");\r\n        appAttemptReportStr.print(\"\\tApplicationAttempt-Id : \");\r\n        appAttemptReportStr.println(appAttemptReport.getApplicationAttemptId());\r\n        appAttemptReportStr.print(\"\\tState : \");\r\n        appAttemptReportStr.println(appAttemptReport.getYarnApplicationAttemptState());\r\n        appAttemptReportStr.print(\"\\tAMContainer : \");\r\n        appAttemptReportStr.println(appAttemptReport.getAMContainerId() == null ? \"N/A\" : appAttemptReport.getAMContainerId().toString());\r\n        appAttemptReportStr.print(\"\\tTracking-URL : \");\r\n        appAttemptReportStr.println(appAttemptReport.getTrackingUrl());\r\n        appAttemptReportStr.print(\"\\tRPC Port : \");\r\n        appAttemptReportStr.println(appAttemptReport.getRpcPort());\r\n        appAttemptReportStr.print(\"\\tAM Host : \");\r\n        appAttemptReportStr.println(appAttemptReport.getHost());\r\n        appAttemptReportStr.print(\"\\tDiagnostics : \");\r\n        appAttemptReportStr.print(appAttemptReport.getDiagnostics());\r\n    } else {\r\n        appAttemptReportStr.print(\"Application Attempt with id '\" + applicationAttemptId + \"' doesn't exist in Timeline Server.\");\r\n        appAttemptReportStr.close();\r\n        sysout.println(baos.toString(\"UTF-8\"));\r\n        return -1;\r\n    }\r\n    appAttemptReportStr.close();\r\n    sysout.println(baos.toString(\"UTF-8\"));\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printContainerReport",
  "errType" : [ "ApplicationNotFoundException", "ApplicationAttemptNotFoundException", "ContainerNotFoundException" ],
  "containingMethodsNum" : 31,
  "sourceCodeText" : "int printContainerReport(String containerId) throws YarnException, IOException\n{\r\n    ContainerReport containerReport = null;\r\n    try {\r\n        containerReport = client.getContainerReport(ContainerId.fromString(containerId));\r\n    } catch (ApplicationNotFoundException e) {\r\n        sysout.println(\"Application for Container with id '\" + containerId + \"' doesn't exist in RM or Timeline Server.\");\r\n        return -1;\r\n    } catch (ApplicationAttemptNotFoundException e) {\r\n        sysout.println(\"Application Attempt for Container with id '\" + containerId + \"' doesn't exist in RM or Timeline Server.\");\r\n        return -1;\r\n    } catch (ContainerNotFoundException e) {\r\n        sysout.println(\"Container with id '\" + containerId + \"' doesn't exist in RM or Timeline Server.\");\r\n        return -1;\r\n    }\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter containerReportStr = new PrintWriter(new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\r\n    if (containerReport != null) {\r\n        containerReportStr.println(\"Container Report : \");\r\n        containerReportStr.print(\"\\tContainer-Id : \");\r\n        containerReportStr.println(containerReport.getContainerId());\r\n        containerReportStr.print(\"\\tStart-Time : \");\r\n        containerReportStr.println(containerReport.getCreationTime());\r\n        containerReportStr.print(\"\\tFinish-Time : \");\r\n        containerReportStr.println(containerReport.getFinishTime());\r\n        containerReportStr.print(\"\\tState : \");\r\n        containerReportStr.println(containerReport.getContainerState());\r\n        containerReportStr.print(\"\\tExecution-Type : \");\r\n        containerReportStr.println(containerReport.getExecutionType());\r\n        containerReportStr.print(\"\\tLOG-URL : \");\r\n        containerReportStr.println(containerReport.getLogUrl());\r\n        containerReportStr.print(\"\\tHost : \");\r\n        containerReportStr.println(containerReport.getAssignedNode());\r\n        containerReportStr.print(\"\\tNodeHttpAddress : \");\r\n        containerReportStr.println(containerReport.getNodeHttpAddress() == null ? \"N/A\" : containerReport.getNodeHttpAddress());\r\n        containerReportStr.print(\"\\tExposedPorts : \");\r\n        containerReportStr.println(containerReport.getExposedPorts() == null ? \"N/A\" : containerReport.getExposedPorts());\r\n        containerReportStr.print(\"\\tDiagnostics : \");\r\n        containerReportStr.print(containerReport.getDiagnosticsInfo());\r\n    } else {\r\n        containerReportStr.print(\"Container with id '\" + containerId + \"' doesn't exist in Timeline Server.\");\r\n        containerReportStr.close();\r\n        sysout.println(baos.toString(\"UTF-8\"));\r\n        return -1;\r\n    }\r\n    containerReportStr.close();\r\n    sysout.println(baos.toString(\"UTF-8\"));\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "listApplications",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void listApplications(Set<String> appTypes, EnumSet<YarnApplicationState> appStates, Set<String> appTags) throws YarnException, IOException\n{\r\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(sysout, Charset.forName(\"UTF-8\")));\r\n    if (allAppStates) {\r\n        for (YarnApplicationState appState : YarnApplicationState.values()) {\r\n            appStates.add(appState);\r\n        }\r\n    } else {\r\n        if (appStates.isEmpty()) {\r\n            appStates.add(YarnApplicationState.RUNNING);\r\n            appStates.add(YarnApplicationState.ACCEPTED);\r\n            appStates.add(YarnApplicationState.SUBMITTED);\r\n        }\r\n    }\r\n    List<ApplicationReport> appsReport = client.getApplications(appTypes, appStates, appTags);\r\n    writer.println(\"Total number of applications (application-types: \" + appTypes + \", states: \" + appStates + \" and tags: \" + appTags + \")\" + \":\" + appsReport.size());\r\n    writer.printf(APPLICATIONS_PATTERN, \"Application-Id\", \"Application-Name\", \"Application-Type\", \"User\", \"Queue\", \"State\", \"Final-State\", \"Progress\", \"Tracking-URL\");\r\n    for (ApplicationReport appReport : appsReport) {\r\n        DecimalFormat formatter = new DecimalFormat(\"###.##%\");\r\n        String progress = formatter.format(appReport.getProgress());\r\n        writer.printf(APPLICATIONS_PATTERN, appReport.getApplicationId(), appReport.getName(), appReport.getApplicationType(), appReport.getUser(), appReport.getQueue(), appReport.getYarnApplicationState(), appReport.getFinalApplicationStatus(), progress, appReport.getOriginalTrackingUrl());\r\n    }\r\n    writer.flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "killApplication",
  "errType" : [ "ApplicationNotFoundException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int killApplication(String[] applicationIds) throws YarnException, IOException\n{\r\n    int returnCode = -1;\r\n    for (String applicationId : applicationIds) {\r\n        try {\r\n            killApplication(applicationId);\r\n            returnCode = 0;\r\n        } catch (ApplicationNotFoundException e) {\r\n            continue;\r\n        }\r\n    }\r\n    return returnCode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "killApplication",
  "errType" : [ "ApplicationNotFoundException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void killApplication(String applicationId) throws YarnException, IOException\n{\r\n    ApplicationId appId = ApplicationId.fromString(applicationId);\r\n    ApplicationReport appReport = null;\r\n    try {\r\n        appReport = client.getApplicationReport(appId);\r\n    } catch (ApplicationNotFoundException e) {\r\n        sysout.println(\"Application with id '\" + applicationId + \"' doesn't exist in RM.\");\r\n        throw e;\r\n    }\r\n    if (Apps.isApplicationFinalState(appReport.getYarnApplicationState())) {\r\n        sysout.println(\"Application \" + applicationId + \" has already finished \");\r\n    } else {\r\n        sysout.println(\"Killing application \" + applicationId);\r\n        client.killApplication(appId);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "moveApplicationAcrossQueues",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void moveApplicationAcrossQueues(String applicationId, String queue) throws YarnException, IOException\n{\r\n    ApplicationId appId = ApplicationId.fromString(applicationId);\r\n    ApplicationReport appReport = client.getApplicationReport(appId);\r\n    if (Apps.isApplicationFinalState(appReport.getYarnApplicationState())) {\r\n        sysout.println(\"Application \" + applicationId + \" has already finished \");\r\n    } else {\r\n        sysout.println(\"Moving application \" + applicationId + \" to queue \" + queue);\r\n        client.moveApplicationAcrossQueues(appId, queue);\r\n        sysout.println(\"Successfully completed move.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "failApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void failApplicationAttempt(String attemptId) throws YarnException, IOException\n{\r\n    ApplicationId appId;\r\n    ApplicationAttemptId attId;\r\n    attId = ApplicationAttemptId.fromString(attemptId);\r\n    appId = attId.getApplicationId();\r\n    sysout.println(\"Failing attempt \" + attId + \" of application \" + appId);\r\n    client.failApplicationAttempt(attId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printApplicationReport",
  "errType" : [ "ApplicationNotFoundException" ],
  "containingMethodsNum" : 57,
  "sourceCodeText" : "int printApplicationReport(String applicationId) throws YarnException, IOException\n{\r\n    ApplicationReport appReport = null;\r\n    try {\r\n        appReport = client.getApplicationReport(ApplicationId.fromString(applicationId));\r\n    } catch (ApplicationNotFoundException e) {\r\n        sysout.println(\"Application with id '\" + applicationId + \"' doesn't exist in RM or Timeline Server.\");\r\n        return -1;\r\n    }\r\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n    PrintWriter appReportStr = new PrintWriter(new OutputStreamWriter(baos, Charset.forName(\"UTF-8\")));\r\n    if (appReport != null) {\r\n        appReportStr.println(\"Application Report : \");\r\n        appReportStr.print(\"\\tApplication-Id : \");\r\n        appReportStr.println(appReport.getApplicationId());\r\n        appReportStr.print(\"\\tApplication-Name : \");\r\n        appReportStr.println(appReport.getName());\r\n        appReportStr.print(\"\\tApplication-Type : \");\r\n        appReportStr.println(appReport.getApplicationType());\r\n        appReportStr.print(\"\\tUser : \");\r\n        appReportStr.println(appReport.getUser());\r\n        appReportStr.print(\"\\tQueue : \");\r\n        appReportStr.println(appReport.getQueue());\r\n        appReportStr.print(\"\\tApplication Priority : \");\r\n        appReportStr.println(appReport.getPriority());\r\n        appReportStr.print(\"\\tStart-Time : \");\r\n        appReportStr.println(appReport.getStartTime());\r\n        appReportStr.print(\"\\tFinish-Time : \");\r\n        appReportStr.println(appReport.getFinishTime());\r\n        appReportStr.print(\"\\tProgress : \");\r\n        DecimalFormat formatter = new DecimalFormat(\"###.##%\");\r\n        String progress = formatter.format(appReport.getProgress());\r\n        appReportStr.println(progress);\r\n        appReportStr.print(\"\\tState : \");\r\n        appReportStr.println(appReport.getYarnApplicationState());\r\n        appReportStr.print(\"\\tFinal-State : \");\r\n        appReportStr.println(appReport.getFinalApplicationStatus());\r\n        appReportStr.print(\"\\tTracking-URL : \");\r\n        appReportStr.println(appReport.getOriginalTrackingUrl());\r\n        appReportStr.print(\"\\tRPC Port : \");\r\n        appReportStr.println(appReport.getRpcPort());\r\n        appReportStr.print(\"\\tAM Host : \");\r\n        appReportStr.println(appReport.getHost());\r\n        ApplicationResourceUsageReport usageReport = appReport.getApplicationResourceUsageReport();\r\n        printResourceUsage(appReportStr, usageReport);\r\n        appReportStr.print(\"\\tLog Aggregation Status : \");\r\n        appReportStr.println(appReport.getLogAggregationStatus() == null ? \"N/A\" : appReport.getLogAggregationStatus());\r\n        appReportStr.print(\"\\tDiagnostics : \");\r\n        appReportStr.println(appReport.getDiagnostics());\r\n        appReportStr.print(\"\\tUnmanaged Application : \");\r\n        appReportStr.println(appReport.isUnmanagedApp());\r\n        appReportStr.print(\"\\tApplication Node Label Expression : \");\r\n        appReportStr.println(appReport.getAppNodeLabelExpression());\r\n        appReportStr.print(\"\\tAM container Node Label Expression : \");\r\n        appReportStr.println(appReport.getAmNodeLabelExpression());\r\n        for (ApplicationTimeout timeout : appReport.getApplicationTimeouts().values()) {\r\n            appReportStr.print(\"\\tTimeoutType : \" + timeout.getTimeoutType());\r\n            appReportStr.print(\"\\tExpiryTime : \" + timeout.getExpiryTime());\r\n            appReportStr.println(\"\\tRemainingTime : \" + timeout.getRemainingTime() + \"seconds\");\r\n        }\r\n        String rmClusterId = appReport.getRMClusterId();\r\n        if (rmClusterId != null) {\r\n            appReportStr.print(\"\\tRMClusterId : \");\r\n            appReportStr.println(rmClusterId);\r\n        }\r\n    } else {\r\n        appReportStr.print(\"Application with id '\" + applicationId + \"' doesn't exist in RM.\");\r\n        appReportStr.close();\r\n        sysout.println(baos.toString(\"UTF-8\"));\r\n        return -1;\r\n    }\r\n    appReportStr.close();\r\n    sysout.println(baos.toString(\"UTF-8\"));\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "printResourceUsage",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void printResourceUsage(PrintWriter appReportStr, ApplicationResourceUsageReport usageReport)\n{\r\n    appReportStr.print(\"\\tAggregate Resource Allocation : \");\r\n    if (usageReport != null) {\r\n        appReportStr.println(getResourceSecondsString(usageReport.getResourceSecondsMap()));\r\n        appReportStr.print(\"\\tAggregate Resource Preempted : \");\r\n        appReportStr.println(getResourceSecondsString(usageReport.getPreemptedResourceSecondsMap()));\r\n    } else {\r\n        appReportStr.println(\"N/A\");\r\n        appReportStr.print(\"\\tAggregate Resource Preempted : \");\r\n        appReportStr.println(\"N/A\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "getAllValidApplicationStates",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "String getAllValidApplicationStates()\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    sb.append(\"The valid application state can be\" + \" one of the following: \").append(ALLSTATES_OPTION + \",\");\r\n    for (YarnApplicationState appState : YarnApplicationState.values()) {\r\n        sb.append(appState + \",\");\r\n    }\r\n    String output = sb.toString();\r\n    return output.substring(0, output.length() - 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "listApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void listApplicationAttempts(String applicationId) throws YarnException, IOException\n{\r\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(sysout, Charset.forName(\"UTF-8\")));\r\n    List<ApplicationAttemptReport> appAttemptsReport = client.getApplicationAttempts(ApplicationId.fromString(applicationId));\r\n    writer.println(\"Total number of application attempts \" + \":\" + appAttemptsReport.size());\r\n    writer.printf(APPLICATION_ATTEMPTS_PATTERN, \"ApplicationAttempt-Id\", \"State\", \"AM-Container-Id\", \"Tracking-URL\");\r\n    for (ApplicationAttemptReport appAttemptReport : appAttemptsReport) {\r\n        writer.printf(APPLICATION_ATTEMPTS_PATTERN, appAttemptReport.getApplicationAttemptId(), appAttemptReport.getYarnApplicationAttemptState(), appAttemptReport.getAMContainerId() == null ? \"N/A\" : appAttemptReport.getAMContainerId().toString(), appAttemptReport.getTrackingUrl());\r\n    }\r\n    writer.flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "listContainers",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void listContainers(String appAttemptId) throws YarnException, IOException\n{\r\n    PrintWriter writer = new PrintWriter(new OutputStreamWriter(sysout, Charset.forName(\"UTF-8\")));\r\n    List<ContainerReport> appsReport = client.getContainers(ApplicationAttemptId.fromString(appAttemptId));\r\n    writer.println(\"Total number of containers \" + \":\" + appsReport.size());\r\n    writer.printf(CONTAINER_PATTERN, \"Container-Id\", \"Start Time\", \"Finish Time\", \"State\", \"Host\", \"Node Http Address\", \"LOG-URL\");\r\n    for (ContainerReport containerReport : appsReport) {\r\n        writer.printf(CONTAINER_PATTERN, containerReport.getContainerId(), Times.format(containerReport.getCreationTime()), Times.format(containerReport.getFinishTime()), containerReport.getContainerState(), containerReport.getAssignedNode(), containerReport.getNodeHttpAddress() == null ? \"N/A\" : containerReport.getNodeHttpAddress(), containerReport.getLogUrl());\r\n    }\r\n    writer.flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "updateApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void updateApplicationPriority(String applicationId, String priority) throws YarnException, IOException\n{\r\n    ApplicationId appId = ApplicationId.fromString(applicationId);\r\n    Priority newAppPriority = Priority.newInstance(Integer.parseInt(priority));\r\n    sysout.println(\"Updating priority of an application \" + applicationId);\r\n    Priority updateApplicationPriority = client.updateApplicationPriority(appId, newAppPriority);\r\n    if (newAppPriority.equals(updateApplicationPriority)) {\r\n        sysout.println(\"Successfully updated the application \" + applicationId + \" with priority '\" + priority + \"'\");\r\n    } else {\r\n        sysout.println(\"Updated priority of an application  \" + applicationId + \" to cluster max priority OR keeping old priority\" + \" as application is in final states\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "addApplicationOptions",
  "errType" : null,
  "containingMethodsNum" : 76,
  "sourceCodeText" : "void addApplicationOptions(Options opts)\n{\r\n    opts.addOption(STATUS_CMD, true, \"Prints the status of the application. \" + \"If app ID is provided, it prints the generic YARN application \" + \"status. If name is provided, it prints the application specific \" + \"status based on app's own implementation, and -appTypes option \" + \"must be specified unless it is the default yarn-service type.\");\r\n    opts.addOption(LIST_CMD, false, \"List applications. Supports optional use \" + \"of -appTypes to filter applications based on application type, \" + \"-appStates to filter applications based on application state and \" + \"-appTags to filter applications based on application tag.\");\r\n    opts.addOption(MOVE_TO_QUEUE_CMD, true, \"Moves the application to a \" + \"different queue. Deprecated command. Use 'changeQueue' instead.\");\r\n    opts.addOption(QUEUE_CMD, true, \"Works with the movetoqueue command to\" + \" specify which queue to move an application to.\");\r\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\r\n    Option appTypeOpt = new Option(APP_TYPE_CMD, true, \"Works with -list to \" + \"filter applications based on input comma-separated list of \" + \"application types.\");\r\n    appTypeOpt.setValueSeparator(',');\r\n    appTypeOpt.setArgs(Option.UNLIMITED_VALUES);\r\n    appTypeOpt.setArgName(\"Types\");\r\n    opts.addOption(appTypeOpt);\r\n    Option appStateOpt = new Option(APP_STATE_CMD, true, \"Works with -list to \" + \"filter applications based on input comma-separated list of \" + \"application states. \" + getAllValidApplicationStates());\r\n    appStateOpt.setValueSeparator(',');\r\n    appStateOpt.setArgs(Option.UNLIMITED_VALUES);\r\n    appStateOpt.setArgName(\"States\");\r\n    opts.addOption(appStateOpt);\r\n    Option appTagOpt = new Option(APP_TAG_CMD, true, \"Works with -list to \" + \"filter applications based on input comma-separated list of \" + \"application tags.\");\r\n    appTagOpt.setValueSeparator(',');\r\n    appTagOpt.setArgs(Option.UNLIMITED_VALUES);\r\n    appTagOpt.setArgName(\"Tags\");\r\n    opts.addOption(appTagOpt);\r\n    opts.addOption(APP_ID, true, \"Specify Application Id to be operated\");\r\n    opts.addOption(UPDATE_PRIORITY, true, \"update priority of an application. \" + \"ApplicationId can be passed using 'appId' option.\");\r\n    opts.addOption(UPDATE_LIFETIME, true, \"update timeout of an application \" + \"from NOW. ApplicationId can be passed using 'appId' option. Timeout \" + \"value is in seconds.\");\r\n    opts.addOption(CHANGE_APPLICATION_QUEUE, true, \"Moves application to a new \" + \"queue. ApplicationId can be  passed using 'appId' option. \" + \"'movetoqueue' command is  deprecated, this new command \" + \"'changeQueue' performs same functionality.\");\r\n    Option killOpt = new Option(KILL_CMD, true, \"Kills the application. Set of \" + \"applications can be provided separated with space\");\r\n    killOpt.setValueSeparator(' ');\r\n    killOpt.setArgs(Option.UNLIMITED_VALUES);\r\n    killOpt.setArgName(\"Application ID\");\r\n    opts.addOption(killOpt);\r\n    opts.getOption(MOVE_TO_QUEUE_CMD).setArgName(\"Application ID\");\r\n    opts.getOption(QUEUE_CMD).setArgName(\"Queue Name\");\r\n    opts.getOption(STATUS_CMD).setArgName(\"Application Name or ID\");\r\n    opts.getOption(APP_ID).setArgName(\"Application ID\");\r\n    opts.getOption(UPDATE_PRIORITY).setArgName(\"Priority\");\r\n    opts.getOption(UPDATE_LIFETIME).setArgName(\"Timeout\");\r\n    opts.getOption(CHANGE_APPLICATION_QUEUE).setArgName(\"Queue Name\");\r\n    opts.addOption(LAUNCH_CMD, true, \"Launches application from specification \" + \"file (saves specification and starts application). Options \" + \"-updateLifetime and -changeQueue can be specified to alter the \" + \"values provided in the file. Supports -appTypes option to specify \" + \"which client implementation to use.\");\r\n    opts.addOption(STOP_CMD, true, \"Stops application gracefully (may be \" + \"started again later). If name is provided, appType must be \" + \"provided unless it is the default yarn-service. If ID is provided, \" + \"the appType will be looked up. Supports -appTypes option to specify \" + \"which client implementation to use.\");\r\n    opts.addOption(START_CMD, true, \"Starts a previously saved application. \" + \"Supports -appTypes option to specify which client implementation \" + \"to use.\");\r\n    opts.addOption(SAVE_CMD, true, \"Saves specification file for an \" + \"application. Options -updateLifetime and -changeQueue can be \" + \"specified to alter the values provided in the file. Supports \" + \"-appTypes option to specify which client implementation to use.\");\r\n    opts.addOption(DESTROY_CMD, true, \"Destroys a saved application \" + \"specification and removes all application data permanently. \" + \"Supports -appTypes option to specify which client implementation \" + \"to use.\");\r\n    opts.addOption(FLEX_CMD, true, \"Changes number of running containers for a \" + \"component of an application / long-running service. Requires \" + \"-component option. If name is provided, appType must be provided \" + \"unless it is the default yarn-service. If ID is provided, the \" + \"appType will be looked up. Supports -appTypes option to specify \" + \"which client implementation to use.\");\r\n    opts.addOption(DECOMMISSION, true, \"Decommissions component instances for \" + \"an application / long-running service. Requires -instances option. \" + \"Supports -appTypes option to specify which client implementation to \" + \"use.\");\r\n    opts.addOption(COMPONENT, true, \"Works with -flex option to change the \" + \"number of components/containers running for an application / \" + \"long-running service. Supports absolute or relative changes, such \" + \"as +1, 2, or -3.\");\r\n    opts.addOption(ENABLE_FAST_LAUNCH, true, \"Uploads AM dependencies to HDFS \" + \"to make future launches faster. Supports -appTypes option to \" + \"specify which client implementation to use. Optionally a \" + \"destination folder for the tarball can be specified.\");\r\n    opts.addOption(UPGRADE_CMD, true, \"Upgrades an application/long-running \" + \"service. It requires either -initiate, -instances, or -finalize \" + \"options.\");\r\n    opts.addOption(UPGRADE_EXPRESS, true, \"Works with -upgrade option to \" + \"perform express upgrade.  It requires the upgraded application \" + \"specification file.\");\r\n    opts.addOption(UPGRADE_INITIATE, true, \"Works with -upgrade option to \" + \"initiate the application upgrade. It requires the upgraded \" + \"application specification file.\");\r\n    opts.addOption(COMPONENT_INSTS, true, \"Works with -upgrade option to \" + \"trigger the upgrade of specified component instances of the \" + \"application. Also works with -decommission option to decommission \" + \"specified component instances. Multiple instances should be \" + \"separated by commas.\");\r\n    opts.addOption(COMPONENTS, true, \"Works with -upgrade option to trigger \" + \"the upgrade of specified components of the application. Multiple \" + \"components should be separated by commas.\");\r\n    opts.addOption(UPGRADE_FINALIZE, false, \"Works with -upgrade option to \" + \"finalize the upgrade.\");\r\n    opts.addOption(UPGRADE_AUTO_FINALIZE, false, \"Works with -upgrade and \" + \"-initiate options to initiate the upgrade of the application with \" + \"the ability to finalize the upgrade automatically.\");\r\n    opts.addOption(UPGRADE_CANCEL, false, \"Works with -upgrade option to \" + \"cancel current upgrade.\");\r\n    opts.addOption(CLUSTER_ID_OPTION, true, \"ClusterId. By default, it will \" + \"take default cluster id from the RM\");\r\n    opts.getOption(LAUNCH_CMD).setArgName(\"Application Name> <File Name\");\r\n    opts.getOption(LAUNCH_CMD).setArgs(2);\r\n    opts.getOption(START_CMD).setArgName(\"Application Name\");\r\n    opts.getOption(STOP_CMD).setArgName(\"Application Name or ID\");\r\n    opts.getOption(SAVE_CMD).setArgName(\"Application Name> <File Name\");\r\n    opts.getOption(SAVE_CMD).setArgs(2);\r\n    opts.getOption(DESTROY_CMD).setArgName(\"Application Name\");\r\n    opts.getOption(FLEX_CMD).setArgName(\"Application Name or ID\");\r\n    opts.getOption(COMPONENT).setArgName(\"Component Name> <Count\");\r\n    opts.getOption(COMPONENT).setArgs(2);\r\n    opts.getOption(ENABLE_FAST_LAUNCH).setOptionalArg(true);\r\n    opts.getOption(ENABLE_FAST_LAUNCH).setArgName(\"Destination Folder\");\r\n    opts.getOption(UPGRADE_CMD).setArgName(\"Application Name\");\r\n    opts.getOption(UPGRADE_CMD).setArgs(1);\r\n    opts.getOption(UPGRADE_INITIATE).setArgName(\"File Name\");\r\n    opts.getOption(UPGRADE_INITIATE).setArgs(1);\r\n    opts.getOption(COMPONENT_INSTS).setArgName(\"Component Instances\");\r\n    opts.getOption(COMPONENT_INSTS).setValueSeparator(',');\r\n    opts.getOption(COMPONENT_INSTS).setArgs(Option.UNLIMITED_VALUES);\r\n    opts.getOption(COMPONENTS).setArgName(\"Components\");\r\n    opts.getOption(COMPONENTS).setValueSeparator(',');\r\n    opts.getOption(COMPONENTS).setArgs(Option.UNLIMITED_VALUES);\r\n    opts.getOption(DECOMMISSION).setArgName(\"Application Name\");\r\n    opts.getOption(DECOMMISSION).setArgs(1);\r\n    opts.getOption(CLUSTER_ID_OPTION).setArgName(\"Cluster ID\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "addApplicationAttemptOptions",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void addApplicationAttemptOptions(Options opts)\n{\r\n    opts.addOption(STATUS_CMD, true, \"Prints the status of the application \" + \"attempt.\");\r\n    opts.addOption(LIST_CMD, true, \"List application attempts for \" + \"application.\");\r\n    opts.addOption(FAIL_CMD, true, \"Fails application attempt.\");\r\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\r\n    opts.addOption(CLUSTER_ID_OPTION, true, \"ClusterId. By default, it will \" + \"take default cluster id from the RM\");\r\n    opts.getOption(STATUS_CMD).setArgName(\"Application Attempt ID\");\r\n    opts.getOption(LIST_CMD).setArgName(\"Application ID\");\r\n    opts.getOption(FAIL_CMD).setArgName(\"Application Attempt ID\");\r\n    opts.getOption(CLUSTER_ID_OPTION).setArgName(\"Cluster ID\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "addContainerOptions",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void addContainerOptions(Options opts)\n{\r\n    opts.addOption(SHELL_CMD, true, \"Run a shell in the container.\");\r\n    opts.addOption(STATUS_CMD, true, \"Prints the status of the container.\");\r\n    opts.addOption(LIST_CMD, true, \"List containers for application attempt \" + \"when application attempt ID is provided. When application name is \" + \"provided, then it finds the instances of the application based on \" + \"app's own implementation, and -appTypes option must be specified \" + \"unless it is the default yarn-service type. With app name, it \" + \"supports optional use of -version to filter instances based on app \" + \"version, -components to filter instances based on component names, \" + \"-states to filter instances based on instance state.\");\r\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\r\n    opts.getOption(SHELL_CMD).setArgName(\"Container ID [bash|sh]\");\r\n    opts.getOption(SHELL_CMD).setArgs(3);\r\n    opts.getOption(STATUS_CMD).setArgName(\"Container ID\");\r\n    opts.getOption(LIST_CMD).setArgName(\"Application Name or Attempt ID\");\r\n    opts.addOption(APP_TYPE_CMD, true, \"Works with -list to specify the app \" + \"type when application name is provided.\");\r\n    opts.getOption(APP_TYPE_CMD).setValueSeparator(',');\r\n    opts.getOption(APP_TYPE_CMD).setArgs(Option.UNLIMITED_VALUES);\r\n    opts.getOption(APP_TYPE_CMD).setArgName(\"Types\");\r\n    opts.addOption(VERSION, true, \"Works with -list to filter instances \" + \"based on input application version.\");\r\n    opts.getOption(VERSION).setArgs(1);\r\n    opts.addOption(COMPONENTS, true, \"Works with -list to filter instances \" + \"based on input comma-separated list of component names.\");\r\n    opts.getOption(COMPONENTS).setValueSeparator(',');\r\n    opts.getOption(COMPONENTS).setArgs(Option.UNLIMITED_VALUES);\r\n    opts.addOption(STATES, true, \"Works with -list to filter instances based \" + \"on input comma-separated list of instance states.\");\r\n    opts.getOption(STATES).setValueSeparator(',');\r\n    opts.getOption(STATES).setArgs(Option.UNLIMITED_VALUES);\r\n    opts.addOption(SIGNAL_CMD, true, \"Signal the container. The available \" + \"signal commands are \" + java.util.Arrays.asList(SignalContainerCommand.values()) + \" Default command is OUTPUT_THREAD_DUMP.\");\r\n    opts.getOption(SIGNAL_CMD).setArgName(\"container ID [signal command]\");\r\n    opts.getOption(SIGNAL_CMD).setArgs(3);\r\n    opts.addOption(CLUSTER_ID_OPTION, true, \"ClusterId. By default, it will \" + \"take default cluster id from the RM\");\r\n    opts.getOption(CLUSTER_ID_OPTION).setArgName(\"Cluster ID\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "createCLIParser",
  "errType" : [ "MissingArgumentException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "CommandLine createCLIParser(Options opts, String[] args) throws Exception\n{\r\n    CommandLine cliParser;\r\n    try {\r\n        cliParser = new GnuParser().parse(opts, args);\r\n    } catch (MissingArgumentException ex) {\r\n        sysout.println(\"Missing argument for options\");\r\n        cliParser = null;\r\n    }\r\n    if (cliParser != null) {\r\n        String[] unparsedArgs = cliParser.getArgs();\r\n        if (firstArg == null) {\r\n            if (unparsedArgs.length != 1) {\r\n                cliParser = null;\r\n            }\r\n        } else {\r\n            if (unparsedArgs.length != 0) {\r\n                cliParser = null;\r\n            }\r\n        }\r\n    }\r\n    return cliParser;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeStatusCommand",
  "errType" : [ "IllegalArgumentException", "ApplicationNotFoundException", "Exception" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "int executeStatusCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (hasAnyOtherCLIOptions(cliParser, opts, STATUS_CMD, APP_TYPE_CMD)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    if (title.equalsIgnoreCase(APPLICATION) || title.equalsIgnoreCase(APP)) {\r\n        String appIdOrName = cliParser.getOptionValue(STATUS_CMD);\r\n        try {\r\n            ApplicationId.fromString(appIdOrName);\r\n            exitCode = printApplicationReport(appIdOrName);\r\n        } catch (IllegalArgumentException e) {\r\n            AppAdminClient client = AppAdminClient.createAppAdminClient(getSingleAppTypeFromCLI(cliParser), getConf());\r\n            try {\r\n                sysout.println(client.getStatusString(appIdOrName));\r\n                exitCode = 0;\r\n            } catch (ApplicationNotFoundException exception) {\r\n                System.err.println(\"Application with name '\" + appIdOrName + \"' doesn't exist in RM or Timeline Server.\");\r\n                return -1;\r\n            } catch (Exception ie) {\r\n                System.err.println(ie.getMessage());\r\n                return -1;\r\n            }\r\n        }\r\n    } else if (title.equalsIgnoreCase(APPLICATION_ATTEMPT)) {\r\n        exitCode = printApplicationAttemptReport(cliParser.getOptionValue(STATUS_CMD));\r\n    } else if (title.equalsIgnoreCase(CONTAINER)) {\r\n        exitCode = printContainerReport(cliParser.getOptionValue(STATUS_CMD));\r\n    }\r\n    return exitCode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeListCommand",
  "errType" : [ "IllegalArgumentException", "ApplicationNotFoundException", "Exception", "IllegalArgumentException" ],
  "containingMethodsNum" : 36,
  "sourceCodeText" : "int executeListCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (APPLICATION.equalsIgnoreCase(title) || APP.equalsIgnoreCase(title)) {\r\n        allAppStates = false;\r\n        Set<String> appTypes = new HashSet<>();\r\n        if (cliParser.hasOption(APP_TYPE_CMD)) {\r\n            String[] types = cliParser.getOptionValues(APP_TYPE_CMD);\r\n            if (types != null) {\r\n                for (String type : types) {\r\n                    if (!type.trim().isEmpty()) {\r\n                        appTypes.add(StringUtils.toUpperCase(type).trim());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        EnumSet<YarnApplicationState> appStates = EnumSet.noneOf(YarnApplicationState.class);\r\n        if (cliParser.hasOption(APP_STATE_CMD)) {\r\n            String[] states = cliParser.getOptionValues(APP_STATE_CMD);\r\n            if (states != null) {\r\n                for (String state : states) {\r\n                    if (!state.trim().isEmpty()) {\r\n                        if (state.trim().equalsIgnoreCase(ALLSTATES_OPTION)) {\r\n                            allAppStates = true;\r\n                            break;\r\n                        }\r\n                        try {\r\n                            appStates.add(YarnApplicationState.valueOf(StringUtils.toUpperCase(state).trim()));\r\n                        } catch (IllegalArgumentException ex) {\r\n                            sysout.println(\"The application state \" + state + \" is invalid.\");\r\n                            sysout.println(getAllValidApplicationStates());\r\n                            return exitCode;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Set<String> appTags = new HashSet<>();\r\n        if (cliParser.hasOption(APP_TAG_CMD)) {\r\n            String[] tags = cliParser.getOptionValues(APP_TAG_CMD);\r\n            if (tags != null) {\r\n                for (String tag : tags) {\r\n                    if (!tag.trim().isEmpty()) {\r\n                        appTags.add(tag.trim());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        listApplications(appTypes, appStates, appTags);\r\n    } else if (APPLICATION_ATTEMPT.equalsIgnoreCase(title)) {\r\n        if (hasAnyOtherCLIOptions(cliParser, opts, LIST_CMD)) {\r\n            printUsage(title, opts);\r\n            return exitCode;\r\n        }\r\n        listApplicationAttempts(cliParser.getOptionValue(LIST_CMD));\r\n    } else if (CONTAINER.equalsIgnoreCase(title)) {\r\n        if (hasAnyOtherCLIOptions(cliParser, opts, LIST_CMD, APP_TYPE_CMD, VERSION, COMPONENTS, STATES)) {\r\n            printUsage(title, opts);\r\n            return exitCode;\r\n        }\r\n        String appAttemptIdOrName = cliParser.getOptionValue(LIST_CMD);\r\n        try {\r\n            ApplicationAttemptId.fromString(appAttemptIdOrName);\r\n            listContainers(appAttemptIdOrName);\r\n        } catch (IllegalArgumentException e) {\r\n            AppAdminClient client = AppAdminClient.createAppAdminClient(getSingleAppTypeFromCLI(cliParser), getConf());\r\n            String version = cliParser.getOptionValue(VERSION);\r\n            String[] components = cliParser.getOptionValues(COMPONENTS);\r\n            String[] instanceStates = cliParser.getOptionValues(STATES);\r\n            try {\r\n                sysout.println(client.getInstances(appAttemptIdOrName, components == null ? null : Arrays.asList(components), version, instanceStates == null ? null : Arrays.asList(instanceStates)));\r\n                return 0;\r\n            } catch (ApplicationNotFoundException exception) {\r\n                System.err.println(\"Application with name '\" + appAttemptIdOrName + \"' doesn't exist in RM or Timeline Server.\");\r\n                return -1;\r\n            } catch (Exception ex) {\r\n                System.err.println(ex.getMessage());\r\n                return -1;\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeKillCommand",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int executeKillCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (hasAnyOtherCLIOptions(cliParser, opts, KILL_CMD)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    return killApplication(cliParser.getOptionValues(KILL_CMD));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeMoveToQueueCommand",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int executeMoveToQueueCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (!cliParser.hasOption(QUEUE_CMD)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    moveApplicationAcrossQueues(cliParser.getOptionValue(MOVE_TO_QUEUE_CMD), cliParser.getOptionValue(QUEUE_CMD));\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeFailCommand",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int executeFailCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (!title.equalsIgnoreCase(APPLICATION_ATTEMPT)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    failApplicationAttempt(cliParser.getOptionValue(FAIL_CMD));\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeUpdatePriorityCommand",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int executeUpdatePriorityCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (!cliParser.hasOption(APP_ID)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    updateApplicationPriority(cliParser.getOptionValue(APP_ID), cliParser.getOptionValue(UPDATE_PRIORITY));\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeSignalCommand",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int executeSignalCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (hasAnyOtherCLIOptions(cliParser, opts, SIGNAL_CMD)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    final String[] signalArgs = cliParser.getOptionValues(SIGNAL_CMD);\r\n    final String containerId = signalArgs[0];\r\n    SignalContainerCommand command = SignalContainerCommand.OUTPUT_THREAD_DUMP;\r\n    if (signalArgs.length == 2) {\r\n        command = SignalContainerCommand.valueOf(signalArgs[1]);\r\n    }\r\n    signalToContainer(containerId, command);\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeShellCommand",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int executeShellCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (hasAnyOtherCLIOptions(cliParser, opts, SHELL_CMD)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    final String[] shellArgs = cliParser.getOptionValues(SHELL_CMD);\r\n    final String containerId = shellArgs[0];\r\n    ShellContainerCommand command = ShellContainerCommand.BASH;\r\n    if (shellArgs.length == 2) {\r\n        command = ShellContainerCommand.valueOf(shellArgs[1].toUpperCase());\r\n    }\r\n    shellToContainer(containerId, command);\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeLaunchCommand",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "int executeLaunchCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (hasAnyOtherCLIOptions(cliParser, opts, LAUNCH_CMD, APP_TYPE_CMD, UPDATE_LIFETIME, CHANGE_APPLICATION_QUEUE)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    String appType = getSingleAppTypeFromCLI(cliParser);\r\n    Long lifetime = null;\r\n    if (cliParser.hasOption(UPDATE_LIFETIME)) {\r\n        lifetime = Long.parseLong(cliParser.getOptionValue(UPDATE_LIFETIME));\r\n    }\r\n    String queue = null;\r\n    if (cliParser.hasOption(CHANGE_APPLICATION_QUEUE)) {\r\n        queue = cliParser.getOptionValue(CHANGE_APPLICATION_QUEUE);\r\n    }\r\n    String[] nameAndFile = cliParser.getOptionValues(LAUNCH_CMD);\r\n    return AppAdminClient.createAppAdminClient(appType, getConf()).actionLaunch(nameAndFile[1], nameAndFile[0], lifetime, queue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeStopCommand",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int executeStopCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (hasAnyOtherCLIOptions(cliParser, opts, STOP_CMD, APP_TYPE_CMD)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    String[] appNameAndType = getAppNameAndType(cliParser, STOP_CMD);\r\n    return AppAdminClient.createAppAdminClient(appNameAndType[1], getConf()).actionStop(appNameAndType[0]);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeStartCommand",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int executeStartCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (hasAnyOtherCLIOptions(cliParser, opts, START_CMD, APP_TYPE_CMD)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    String appType = getSingleAppTypeFromCLI(cliParser);\r\n    return AppAdminClient.createAppAdminClient(appType, getConf()).actionStart(cliParser.getOptionValue(START_CMD));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeSaveCommand",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "int executeSaveCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (hasAnyOtherCLIOptions(cliParser, opts, SAVE_CMD, APP_TYPE_CMD, UPDATE_LIFETIME, CHANGE_APPLICATION_QUEUE)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    String appType = getSingleAppTypeFromCLI(cliParser);\r\n    Long lifetime = null;\r\n    if (cliParser.hasOption(UPDATE_LIFETIME)) {\r\n        lifetime = Long.parseLong(cliParser.getOptionValue(UPDATE_LIFETIME));\r\n    }\r\n    String queue = null;\r\n    if (cliParser.hasOption(CHANGE_APPLICATION_QUEUE)) {\r\n        queue = cliParser.getOptionValue(CHANGE_APPLICATION_QUEUE);\r\n    }\r\n    String[] nameAndFile = cliParser.getOptionValues(SAVE_CMD);\r\n    return AppAdminClient.createAppAdminClient(appType, getConf()).actionSave(nameAndFile[1], nameAndFile[0], lifetime, queue);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeDestroyCommand",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int executeDestroyCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (hasAnyOtherCLIOptions(cliParser, opts, DESTROY_CMD, APP_TYPE_CMD)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    String appType = getSingleAppTypeFromCLI(cliParser);\r\n    return AppAdminClient.createAppAdminClient(appType, getConf()).actionDestroy(cliParser.getOptionValue(DESTROY_CMD));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeFlexCommand",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "int executeFlexCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (!cliParser.hasOption(COMPONENT) || hasAnyOtherCLIOptions(cliParser, opts, FLEX_CMD, COMPONENT, APP_TYPE_CMD)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    String[] rawCounts = cliParser.getOptionValues(COMPONENT);\r\n    Map<String, String> counts = new HashMap<>(rawCounts.length / 2);\r\n    for (int i = 0; i < rawCounts.length - 1; i += 2) {\r\n        counts.put(rawCounts[i], rawCounts[i + 1]);\r\n    }\r\n    String[] appNameAndType = getAppNameAndType(cliParser, FLEX_CMD);\r\n    return AppAdminClient.createAppAdminClient(appNameAndType[1], getConf()).actionFlex(appNameAndType[0], counts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeEnableFastLaunchCommand",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "int executeEnableFastLaunchCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    String appType = getSingleAppTypeFromCLI(cliParser);\r\n    String uploadDestinationFolder = cliParser.getOptionValue(ENABLE_FAST_LAUNCH);\r\n    if (hasAnyOtherCLIOptions(cliParser, opts, ENABLE_FAST_LAUNCH, APP_TYPE_CMD)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    return AppAdminClient.createAppAdminClient(appType, getConf()).enableFastLaunch(uploadDestinationFolder);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeUpdateLifeTimeCommand",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "int executeUpdateLifeTimeCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (!cliParser.hasOption(APP_ID)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    long timeoutInSec = Long.parseLong(cliParser.getOptionValue(UPDATE_LIFETIME));\r\n    updateApplicationTimeout(cliParser.getOptionValue(APP_ID), ApplicationTimeoutType.LIFETIME, timeoutInSec);\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeChangeApplicationQueueCommand",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "int executeChangeApplicationQueueCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (!cliParser.hasOption(APP_ID)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    moveApplicationAcrossQueues(cliParser.getOptionValue(APP_ID), cliParser.getOptionValue(CHANGE_APPLICATION_QUEUE));\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeUpgradeCommand",
  "errType" : null,
  "containingMethodsNum" : 35,
  "sourceCodeText" : "int executeUpgradeCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD, UPGRADE_EXPRESS, UPGRADE_INITIATE, UPGRADE_AUTO_FINALIZE, UPGRADE_FINALIZE, UPGRADE_CANCEL, COMPONENT_INSTS, COMPONENTS, APP_TYPE_CMD)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    String appType = getSingleAppTypeFromCLI(cliParser);\r\n    AppAdminClient client = AppAdminClient.createAppAdminClient(appType, getConf());\r\n    String appName = cliParser.getOptionValue(UPGRADE_CMD);\r\n    if (cliParser.hasOption(UPGRADE_EXPRESS)) {\r\n        File file = new File(cliParser.getOptionValue(UPGRADE_EXPRESS));\r\n        if (!file.exists()) {\r\n            System.err.println(file.getAbsolutePath() + \" does not exist.\");\r\n            return exitCode;\r\n        }\r\n        return client.actionUpgradeExpress(appName, file);\r\n    } else if (cliParser.hasOption(UPGRADE_INITIATE)) {\r\n        if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD, UPGRADE_INITIATE, UPGRADE_AUTO_FINALIZE, APP_TYPE_CMD)) {\r\n            printUsage(title, opts);\r\n            return exitCode;\r\n        }\r\n        String fileName = cliParser.getOptionValue(UPGRADE_INITIATE);\r\n        if (cliParser.hasOption(UPGRADE_AUTO_FINALIZE)) {\r\n            return client.initiateUpgrade(appName, fileName, true);\r\n        } else {\r\n            return client.initiateUpgrade(appName, fileName, false);\r\n        }\r\n    } else if (cliParser.hasOption(COMPONENT_INSTS)) {\r\n        if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD, COMPONENT_INSTS, APP_TYPE_CMD)) {\r\n            printUsage(title, opts);\r\n            return exitCode;\r\n        }\r\n        String[] instances = cliParser.getOptionValues(COMPONENT_INSTS);\r\n        return client.actionUpgradeInstances(appName, Arrays.asList(instances));\r\n    } else if (cliParser.hasOption(COMPONENTS)) {\r\n        if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD, COMPONENTS, APP_TYPE_CMD)) {\r\n            printUsage(title, opts);\r\n            return exitCode;\r\n        }\r\n        String[] components = cliParser.getOptionValues(COMPONENTS);\r\n        return client.actionUpgradeComponents(appName, Arrays.asList(components));\r\n    } else if (cliParser.hasOption(UPGRADE_FINALIZE)) {\r\n        if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD, UPGRADE_FINALIZE, APP_TYPE_CMD)) {\r\n            printUsage(title, opts);\r\n            return exitCode;\r\n        }\r\n        return client.actionStart(appName);\r\n    } else if (cliParser.hasOption(UPGRADE_CANCEL)) {\r\n        if (hasAnyOtherCLIOptions(cliParser, opts, UPGRADE_CMD, UPGRADE_CANCEL, APP_TYPE_CMD)) {\r\n            printUsage(title, opts);\r\n            return exitCode;\r\n        }\r\n        return client.actionCancelUpgrade(appName);\r\n    }\r\n    return 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "executeDecommissionCommand",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "int executeDecommissionCommand(CommandLine cliParser, String title, Options opts) throws Exception\n{\r\n    int exitCode = -1;\r\n    if (!cliParser.hasOption(COMPONENT_INSTS) || hasAnyOtherCLIOptions(cliParser, opts, DECOMMISSION, COMPONENT_INSTS, APP_TYPE_CMD)) {\r\n        printUsage(title, opts);\r\n        return exitCode;\r\n    }\r\n    String[] instances = cliParser.getOptionValues(COMPONENT_INSTS);\r\n    String[] appNameAndType = getAppNameAndType(cliParser, DECOMMISSION);\r\n    return AppAdminClient.createAppAdminClient(appNameAndType[1], getConf()).actionDecommissionInstances(appNameAndType[0], Arrays.asList(instances));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-client\\src\\main\\java\\org\\apache\\hadoop\\yarn\\client\\cli",
  "methodName" : "hasAnyOtherCLIOptions",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean hasAnyOtherCLIOptions(CommandLine cliParser, Options opts, String... excludeOptions)\n{\r\n    Collection<Option> ops = opts.getOptions();\r\n    Set<String> excludeSet = new HashSet<>(Arrays.asList(excludeOptions));\r\n    for (Option op : ops) {\r\n        if (excludeSet.contains(op.getOpt())) {\r\n            continue;\r\n        }\r\n        if (cliParser.hasOption(op.getOpt())) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]