[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "launchAndReinitHelper",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Future<ProviderService.ResolvedLaunchParams> launchAndReinitHelper(InvocationOnMock invocation) throws IOException, SliderException\n{\r\n    AbstractLauncher launcher = new AbstractLauncher(scheduler.getContext());\r\n    ComponentInstance instance = (ComponentInstance) invocation.getArguments()[1];\r\n    Container container = (Container) invocation.getArguments()[2];\r\n    ContainerLaunchService.ComponentLaunchContext clc = (ContainerLaunchService.ComponentLaunchContext) invocation.getArguments()[3];\r\n    ProviderService.ResolvedLaunchParams resolvedParams = new ProviderService.ResolvedLaunchParams();\r\n    ProviderUtils.createConfigFileAndAddLocalResource(launcher, fs, clc, new HashMap<>(), instance, scheduler.getContext(), resolvedParams);\r\n    ProviderUtils.handleStaticFilesForLocalization(launcher, fs, clc, resolvedParams);\r\n    return Futures.immediateFuture(resolvedParams);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "stabilizeComponents",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void stabilizeComponents(ServiceContext context)\n{\r\n    ApplicationId appId = ApplicationId.fromString(context.service.getId());\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    context.attemptId = attemptId;\r\n    Map<String, Component> componentState = context.scheduler.getAllComponents();\r\n    int counter = 0;\r\n    for (org.apache.hadoop.yarn.service.api.records.Component componentSpec : context.service.getComponents()) {\r\n        Component component = new org.apache.hadoop.yarn.service.component.Component(componentSpec, 1L, context);\r\n        componentState.put(component.getName(), component);\r\n        component.handle(new ComponentEvent(component.getName(), ComponentEventType.FLEX).setDesired(component.getComponentSpec().getNumberOfContainers()));\r\n        for (int i = 0; i < componentSpec.getNumberOfContainers(); i++) {\r\n            counter++;\r\n            assignNewContainer(attemptId, counter, component);\r\n        }\r\n        component.handle(new ComponentEvent(component.getName(), ComponentEventType.CHECK_STABLE));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "assignNewContainer",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void assignNewContainer(ApplicationAttemptId attemptId, long containerNum, Component component)\n{\r\n    Container container = org.apache.hadoop.yarn.api.records.Container.newInstance(ContainerId.newContainerId(attemptId, containerNum), NODE_ID, \"localhost\", null, null, null);\r\n    component.handle(new ComponentEvent(component.getName(), ComponentEventType.CONTAINER_ALLOCATED).setContainer(container).setContainerId(container.getId()));\r\n    ComponentInstance instance = this.scheduler.getLiveInstances().get(container.getId());\r\n    ComponentInstanceEvent startEvent = new ComponentInstanceEvent(container.getId(), ComponentInstanceEventType.START);\r\n    instance.handle(startEvent);\r\n    ComponentInstanceEvent readyEvent = new ComponentInstanceEvent(container.getId(), ComponentInstanceEventType.BECOME_READY);\r\n    instance.handle(readyEvent);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testOverride",
  "errType" : null,
  "containingMethodsNum" : 61,
  "sourceCodeText" : "void testOverride() throws Throwable\n{\r\n    Service orig = ExampleAppJson.loadResource(OVERRIDE_JSON);\r\n    Configuration global = orig.getConfiguration();\r\n    assertEquals(\"a\", global.getProperty(\"g1\"));\r\n    assertEquals(\"b\", global.getProperty(\"g2\"));\r\n    assertEquals(2, global.getFiles().size());\r\n    Configuration simple = orig.getComponent(\"simple\").getConfiguration();\r\n    assertEquals(0, simple.getProperties().size());\r\n    assertEquals(1, simple.getFiles().size());\r\n    Configuration master = orig.getComponent(\"master\").getConfiguration();\r\n    assertEquals(\"m\", master.getProperty(\"name\"));\r\n    assertEquals(\"overridden\", master.getProperty(\"g1\"));\r\n    assertEquals(0, master.getFiles().size());\r\n    Configuration worker = orig.getComponent(\"worker\").getConfiguration();\r\n    LOG.info(\"worker = {}\", worker);\r\n    assertEquals(3, worker.getProperties().size());\r\n    assertEquals(0, worker.getFiles().size());\r\n    assertEquals(\"worker\", worker.getProperty(\"name\"));\r\n    assertEquals(\"overridden-by-worker\", worker.getProperty(\"g1\"));\r\n    assertNull(worker.getProperty(\"g2\"));\r\n    assertEquals(\"1000\", worker.getProperty(\"timeout\"));\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs();\r\n    ServiceApiUtil.validateAndResolveService(orig, sfs, new YarnConfiguration());\r\n    global = orig.getConfiguration();\r\n    LOG.info(\"global = {}\", global);\r\n    assertEquals(\"a\", global.getProperty(\"g1\"));\r\n    assertEquals(\"b\", global.getProperty(\"g2\"));\r\n    assertEquals(2, global.getFiles().size());\r\n    simple = orig.getComponent(\"simple\").getConfiguration();\r\n    assertEquals(2, simple.getProperties().size());\r\n    assertEquals(\"a\", simple.getProperty(\"g1\"));\r\n    assertEquals(\"b\", simple.getProperty(\"g2\"));\r\n    assertEquals(2, simple.getFiles().size());\r\n    Set<ConfigFile> files = new HashSet<>();\r\n    Map<String, String> props = new HashMap<>();\r\n    props.put(\"k1\", \"overridden\");\r\n    props.put(\"k2\", \"v2\");\r\n    files.add(new ConfigFile().destFile(\"file1\").type(ConfigFile.TypeEnum.PROPERTIES).properties(props));\r\n    files.add(new ConfigFile().destFile(\"file2\").type(ConfigFile.TypeEnum.XML).properties(Collections.singletonMap(\"k3\", \"v3\")));\r\n    assertTrue(files.contains(simple.getFiles().get(0)));\r\n    assertTrue(files.contains(simple.getFiles().get(1)));\r\n    master = orig.getComponent(\"master\").getConfiguration();\r\n    LOG.info(\"master = {}\", master);\r\n    assertEquals(3, master.getProperties().size());\r\n    assertEquals(\"m\", master.getProperty(\"name\"));\r\n    assertEquals(\"overridden\", master.getProperty(\"g1\"));\r\n    assertEquals(\"b\", master.getProperty(\"g2\"));\r\n    assertEquals(2, master.getFiles().size());\r\n    props.put(\"k1\", \"v1\");\r\n    files.clear();\r\n    files.add(new ConfigFile().destFile(\"file1\").type(ConfigFile.TypeEnum.PROPERTIES).properties(props));\r\n    files.add(new ConfigFile().destFile(\"file2\").type(ConfigFile.TypeEnum.XML).properties(Collections.singletonMap(\"k3\", \"v3\")));\r\n    assertTrue(files.contains(master.getFiles().get(0)));\r\n    assertTrue(files.contains(master.getFiles().get(1)));\r\n    worker = orig.getComponent(\"worker\").getConfiguration();\r\n    LOG.info(\"worker = {}\", worker);\r\n    assertEquals(4, worker.getProperties().size());\r\n    assertEquals(\"worker\", worker.getProperty(\"name\"));\r\n    assertEquals(\"overridden-by-worker\", worker.getProperty(\"g1\"));\r\n    assertEquals(\"b\", worker.getProperty(\"g2\"));\r\n    assertEquals(\"1000\", worker.getProperty(\"timeout\"));\r\n    assertEquals(2, worker.getFiles().size());\r\n    assertTrue(files.contains(worker.getFiles().get(0)));\r\n    assertTrue(files.contains(worker.getFiles().get(1)));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testOverrideExternalConfiguration",
  "errType" : null,
  "containingMethodsNum" : 49,
  "sourceCodeText" : "void testOverrideExternalConfiguration() throws IOException\n{\r\n    Service orig = ExampleAppJson.loadResource(EXTERNAL_JSON_1);\r\n    Configuration global = orig.getConfiguration();\r\n    assertEquals(0, global.getProperties().size());\r\n    assertEquals(3, orig.getComponents().size());\r\n    Configuration simple = orig.getComponent(\"simple\").getConfiguration();\r\n    assertEquals(0, simple.getProperties().size());\r\n    Configuration master = orig.getComponent(\"master\").getConfiguration();\r\n    assertEquals(1, master.getProperties().size());\r\n    assertEquals(\"is-overridden\", master.getProperty(\"g3\"));\r\n    Configuration other = orig.getComponent(\"other\").getConfiguration();\r\n    assertEquals(0, other.getProperties().size());\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs();\r\n    Service ext = ExampleAppJson.loadResource(APP_JSON);\r\n    ServiceApiUtil.validateAndResolveService(ext, sfs, new YarnConfiguration());\r\n    sfs = ServiceTestUtils.initMockFs(ext);\r\n    ServiceApiUtil.validateAndResolveService(orig, sfs, new YarnConfiguration());\r\n    global = orig.getConfiguration();\r\n    assertEquals(0, global.getProperties().size());\r\n    assertEquals(4, orig.getComponents().size());\r\n    simple = orig.getComponent(\"simple\").getConfiguration();\r\n    assertEquals(3, simple.getProperties().size());\r\n    assertEquals(\"a\", simple.getProperty(\"g1\"));\r\n    assertEquals(\"b\", simple.getProperty(\"g2\"));\r\n    assertEquals(\"60\", simple.getProperty(\"yarn.service.failure-count-reset.window\"));\r\n    master = orig.getComponent(\"master\").getConfiguration();\r\n    assertEquals(5, master.getProperties().size());\r\n    assertEquals(\"512M\", master.getProperty(\"jvm.heapsize\"));\r\n    assertEquals(\"overridden\", master.getProperty(\"g1\"));\r\n    assertEquals(\"b\", master.getProperty(\"g2\"));\r\n    assertEquals(\"is-overridden\", master.getProperty(\"g3\"));\r\n    assertEquals(\"60\", simple.getProperty(\"yarn.service.failure-count-reset.window\"));\r\n    Configuration worker = orig.getComponent(\"worker\").getConfiguration();\r\n    LOG.info(\"worker = {}\", worker);\r\n    assertEquals(4, worker.getProperties().size());\r\n    assertEquals(\"512M\", worker.getProperty(\"jvm.heapsize\"));\r\n    assertEquals(\"overridden-by-worker\", worker.getProperty(\"g1\"));\r\n    assertEquals(\"b\", worker.getProperty(\"g2\"));\r\n    assertEquals(\"60\", worker.getProperty(\"yarn.service.failure-count-reset.window\"));\r\n    Resource workerResource = orig.getComponent(\"worker\").getResource();\r\n    Assert.assertEquals(1, workerResource.getCpus().intValue());\r\n    Assert.assertEquals(1024, workerResource.calcMemoryMB());\r\n    Assert.assertNotNull(workerResource.getAdditional());\r\n    Assert.assertEquals(2, workerResource.getAdditional().size());\r\n    Assert.assertEquals(3333, workerResource.getAdditional().get(\"resource-1\").getValue().longValue());\r\n    Assert.assertEquals(\"Gi\", workerResource.getAdditional().get(\"resource-1\").getUnit());\r\n    Assert.assertEquals(5, workerResource.getAdditional().get(\"yarn.io/gpu\").getValue().longValue());\r\n    Assert.assertEquals(\"\", workerResource.getAdditional().get(\"yarn.io/gpu\").getUnit());\r\n    other = orig.getComponent(\"other\").getConfiguration();\r\n    assertEquals(0, other.getProperties().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testSetResourceAttributes",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testSetResourceAttributes() throws IOException\n{\r\n    Service orig = ExampleAppJson.loadResource(EXTERNAL_JSON_3);\r\n    Component component = orig.getComponent(\"volume-service\");\r\n    Assert.assertNotNull(component);\r\n    Map<String, ResourceInformation> adResource = component.getResource().getAdditional();\r\n    Assert.assertNotNull(adResource);\r\n    Assert.assertEquals(1, adResource.size());\r\n    Map.Entry<String, ResourceInformation> volume = adResource.entrySet().iterator().next();\r\n    Assert.assertEquals(\"yarn.io/csi-volume\", volume.getKey());\r\n    Assert.assertEquals(100L, volume.getValue().getValue().longValue());\r\n    Assert.assertEquals(2, volume.getValue().getAttributes().size());\r\n    Assert.assertEquals(1, volume.getValue().getTags().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "checkComponentNames",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void checkComponentNames(List<Component> components, Set<String> expectedComponents)\n{\r\n    Assert.assertEquals(expectedComponents.size(), components.size());\r\n    for (Component comp : components) {\r\n        Assert.assertTrue(expectedComponents.contains(comp.getName()));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "buildAndCheckComponents",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void buildAndCheckComponents(String appName, String appDef, SliderFileSystem sfs, Set<String> names) throws Throwable\n{\r\n    AppAdminClient client = AppAdminClient.createAppAdminClient(AppAdminClient.UNIT_TEST_TYPE, conf);\r\n    client.actionSave(ExampleAppJson.resourceName(appDef), null, null, null);\r\n    List<Component> components = ServiceApiUtil.getComponents(sfs, appName);\r\n    checkComponentNames(components, names);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setup() throws IOException\n{\r\n    basedir = new File(\"target\", \"apps\");\r\n    if (basedir.exists()) {\r\n        FileUtils.deleteDirectory(basedir);\r\n    } else {\r\n        basedir.mkdirs();\r\n    }\r\n    conf.set(YARN_SERVICE_BASE_PATH, basedir.getAbsolutePath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    if (basedir != null) {\r\n        FileUtils.deleteDirectory(basedir);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testExternalComponentBuild",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testExternalComponentBuild() throws Throwable\n{\r\n    SliderFileSystem sfs = new SliderFileSystem(conf);\r\n    Set<String> nameSet = new HashSet<>();\r\n    nameSet.add(\"simple\");\r\n    nameSet.add(\"master\");\r\n    nameSet.add(\"worker\");\r\n    buildAndCheckComponents(\"app-1\", ExampleAppJson.APP_JSON, sfs, nameSet);\r\n    buildAndCheckComponents(\"external-0\", ExampleAppJson.EXTERNAL_JSON_0, sfs, nameSet);\r\n    nameSet.add(\"other\");\r\n    buildAndCheckComponents(\"external-1\", ExampleAppJson.EXTERNAL_JSON_1, sfs, nameSet);\r\n    nameSet.add(\"another\");\r\n    buildAndCheckComponents(\"external-2\", ExampleAppJson.EXTERNAL_JSON_2, sfs, nameSet);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\providers",
  "methodName" : "testDockerFactory",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDockerFactory() throws Throwable\n{\r\n    ProviderFactory factory = ProviderFactory.createServiceProviderFactory(new Artifact().type(TypeEnum.DOCKER));\r\n    assertTrue(factory instanceof DockerProviderFactory);\r\n    assertTrue(factory.createClientProvider() instanceof DockerClientProvider);\r\n    assertTrue(factory.createServerProvider() instanceof DockerProviderService);\r\n    assertTrue(ProviderFactory.getProviderService(new Artifact().type(TypeEnum.DOCKER)) instanceof DockerProviderService);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\providers",
  "methodName" : "testTarballFactory",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testTarballFactory() throws Throwable\n{\r\n    ProviderFactory factory = ProviderFactory.createServiceProviderFactory(new Artifact().type(TypeEnum.TARBALL));\r\n    assertTrue(factory instanceof TarballProviderFactory);\r\n    assertTrue(factory.createClientProvider() instanceof TarballClientProvider);\r\n    assertTrue(factory.createServerProvider() instanceof TarballProviderService);\r\n    assertTrue(ProviderFactory.getProviderService(new Artifact().type(TypeEnum.TARBALL)) instanceof TarballProviderService);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\providers",
  "methodName" : "testDefaultFactory",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDefaultFactory() throws Throwable\n{\r\n    ProviderFactory factory = ProviderFactory.createServiceProviderFactory(null);\r\n    assertTrue(factory instanceof DefaultProviderFactory);\r\n    assertTrue(factory.createClientProvider() instanceof DefaultClientProvider);\r\n    assertTrue(factory.createServerProvider() instanceof DefaultProviderService);\r\n    assertTrue(ProviderFactory.getProviderService(null) instanceof DefaultProviderService);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\providers",
  "methodName" : "testConfigFile",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testConfigFile() throws IOException\n{\r\n    DefaultClientProvider defaultClientProvider = new DefaultClientProvider();\r\n    FileSystem mockFs = mock(FileSystem.class);\r\n    when(mockFs.exists(any())).thenReturn(true);\r\n    String compName = \"sleeper\";\r\n    ConfigFile configFile = new ConfigFile();\r\n    configFile.setDestFile(\"/var/tmp/a.txt\");\r\n    try {\r\n        defaultClientProvider.validateConfigFile(configFile, compName, mockFs);\r\n        Assert.fail(EXCEPTION_PREFIX + \" dest_file must be relative\");\r\n    } catch (IllegalArgumentException e) {\r\n        String actualMsg = String.format(RestApiErrorMessages.ERROR_CONFIGFILE_DEST_FILE_FOR_COMP_NOT_ABSOLUTE, compName, \"no\", configFile.getDestFile());\r\n        Assert.assertEquals(actualMsg, e.getLocalizedMessage());\r\n    }\r\n    configFile.setDestFile(\"../a.txt\");\r\n    try {\r\n        defaultClientProvider.validateConfigFile(configFile, compName, mockFs);\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getLocalizedMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "createCLI",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void createCLI()\n{\r\n    cli = new ApplicationCLI();\r\n    PrintStream sysOut = spy(new PrintStream(new ByteArrayOutputStream()));\r\n    PrintStream sysErr = spy(new PrintStream(new ByteArrayOutputStream()));\r\n    cli.setSysOutPrintStream(sysOut);\r\n    cli.setSysErrPrintStream(sysErr);\r\n    conf.set(YARN_APP_ADMIN_CLIENT_PREFIX + DUMMY_APP_TYPE, DummyServiceClient.class.getName());\r\n    cli.setConf(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "runCLI",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int runCLI(String[] args) throws Exception\n{\r\n    LOG.info(\"running CLI: yarn {}\", Arrays.asList(args));\r\n    return ToolRunner.run(cli, ApplicationCLI.preProcessArgs(args));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "buildApp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void buildApp(String serviceName, String appDef) throws Throwable\n{\r\n    String[] args = { \"app\", \"-D\", basedirProp, \"-save\", serviceName, ExampleAppJson.resourceName(appDef), \"-appTypes\", DUMMY_APP_TYPE };\r\n    Assert.assertEquals(EXIT_SUCCESS, runCLI(args));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "buildApp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void buildApp(String serviceName, String appDef, String lifetime, String queue) throws Throwable\n{\r\n    String[] args = { \"app\", \"-D\", basedirProp, \"-save\", serviceName, ExampleAppJson.resourceName(appDef), \"-appTypes\", DUMMY_APP_TYPE, \"-updateLifetime\", lifetime, \"-changeQueue\", queue };\r\n    Assert.assertEquals(EXIT_SUCCESS, runCLI(args));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "getDependencyTarGz",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Path getDependencyTarGz(File dir)\n{\r\n    return new Path(new File(dir, YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_NAME + YarnServiceConstants.DEPENDENCY_TAR_GZ_FILE_EXT).getAbsolutePath());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void setup() throws Throwable\n{\r\n    basedir = new File(\"target\", \"apps\");\r\n    basedirProp = YARN_SERVICE_BASE_PATH + \"=\" + basedir.getAbsolutePath();\r\n    conf.set(YARN_SERVICE_BASE_PATH, basedir.getAbsolutePath());\r\n    fs = new SliderFileSystem(conf);\r\n    dependencyTarGzBaseDir = tmpFolder.getRoot();\r\n    fs.getFileSystem().setPermission(new Path(dependencyTarGzBaseDir.getAbsolutePath()), new FsPermission(\"755\"));\r\n    dependencyTarGz = getDependencyTarGz(dependencyTarGzBaseDir);\r\n    dependencyTarGzProp = DEPENDENCY_TARBALL_PATH + \"=\" + dependencyTarGz.toString();\r\n    conf.set(DEPENDENCY_TARBALL_PATH, dependencyTarGz.toString());\r\n    if (basedir.exists()) {\r\n        FileUtils.deleteDirectory(basedir);\r\n    } else {\r\n        basedir.mkdirs();\r\n    }\r\n    yarnAdminNoneAclProp = YarnConfiguration.YARN_ADMIN_ACL + \"=none\";\r\n    dfsAdminAclProp = DFSConfigKeys.DFS_ADMIN + \"=\" + UserGroupInformation.getCurrentUser();\r\n    System.setProperty(YarnServiceConstants.PROPERTY_LIB_DIR, basedir.getAbsolutePath());\r\n    createCLI();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    if (basedir != null) {\r\n        FileUtils.deleteDirectory(basedir);\r\n    }\r\n    cli.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testFlexComponents",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testFlexComponents() throws Throwable\n{\r\n    String serviceName = \"app-1\";\r\n    buildApp(serviceName, ExampleAppJson.APP_JSON);\r\n    checkApp(serviceName, \"master\", 1L, 3600L, null);\r\n    serviceName = \"app-2\";\r\n    buildApp(serviceName, ExampleAppJson.APP_JSON, \"1000\", \"qname\");\r\n    checkApp(serviceName, \"master\", 1L, 1000L, \"qname\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testInitiateServiceUpgrade",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testInitiateServiceUpgrade() throws Exception\n{\r\n    String[] args = { \"app\", \"-upgrade\", \"app-1\", \"-initiate\", ExampleAppJson.resourceName(ExampleAppJson.APP_JSON), \"-appTypes\", DUMMY_APP_TYPE };\r\n    int result = cli.run(ApplicationCLI.preProcessArgs(args));\r\n    assertThat(result).isEqualTo(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testInitiateAutoFinalizeServiceUpgrade",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testInitiateAutoFinalizeServiceUpgrade() throws Exception\n{\r\n    String[] args = { \"app\", \"-upgrade\", \"app-1\", \"-initiate\", ExampleAppJson.resourceName(ExampleAppJson.APP_JSON), \"-autoFinalize\", \"-appTypes\", DUMMY_APP_TYPE };\r\n    int result = cli.run(ApplicationCLI.preProcessArgs(args));\r\n    assertThat(result).isEqualTo(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testUpgradeInstances",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testUpgradeInstances() throws Exception\n{\r\n    conf.set(YARN_APP_ADMIN_CLIENT_PREFIX + DUMMY_APP_TYPE, DummyServiceClient.class.getName());\r\n    cli.setConf(conf);\r\n    String[] args = { \"app\", \"-upgrade\", \"app-1\", \"-instances\", \"comp1-0,comp1-1\", \"-appTypes\", DUMMY_APP_TYPE };\r\n    int result = cli.run(ApplicationCLI.preProcessArgs(args));\r\n    assertThat(result).isEqualTo(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testUpgradeComponents",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testUpgradeComponents() throws Exception\n{\r\n    conf.set(YARN_APP_ADMIN_CLIENT_PREFIX + DUMMY_APP_TYPE, DummyServiceClient.class.getName());\r\n    cli.setConf(conf);\r\n    String[] args = { \"app\", \"-upgrade\", \"app-1\", \"-components\", \"comp1,comp2\", \"-appTypes\", DUMMY_APP_TYPE };\r\n    int result = cli.run(ApplicationCLI.preProcessArgs(args));\r\n    assertThat(result).isEqualTo(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testGetInstances",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetInstances() throws Exception\n{\r\n    conf.set(YARN_APP_ADMIN_CLIENT_PREFIX + DUMMY_APP_TYPE, DummyServiceClient.class.getName());\r\n    cli.setConf(conf);\r\n    String[] args = { \"container\", \"-list\", \"app-1\", \"-components\", \"comp1,comp2\", \"-appTypes\", DUMMY_APP_TYPE };\r\n    int result = cli.run(ApplicationCLI.preProcessArgs(args));\r\n    assertThat(result).isEqualTo(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testCancelUpgrade",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testCancelUpgrade() throws Exception\n{\r\n    conf.set(YARN_APP_ADMIN_CLIENT_PREFIX + DUMMY_APP_TYPE, DummyServiceClient.class.getName());\r\n    cli.setConf(conf);\r\n    String[] args = { \"app\", \"-upgrade\", \"app-1\", \"-cancel\", \"-appTypes\", DUMMY_APP_TYPE };\r\n    int result = cli.run(ApplicationCLI.preProcessArgs(args));\r\n    assertThat(result).isEqualTo(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testEnableFastLaunch",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testEnableFastLaunch() throws Exception\n{\r\n    fs.getFileSystem().create(new Path(basedir.getAbsolutePath(), \"test.jar\")).close();\r\n    Path defaultPath = new Path(dependencyTarGz.toString());\r\n    Assert.assertFalse(\"Dependency tarball should not exist before the test\", fs.isFile(defaultPath));\r\n    String[] args = { \"app\", \"-D\", dependencyTarGzProp, \"-enableFastLaunch\", \"-appTypes\", DUMMY_APP_TYPE };\r\n    Assert.assertEquals(EXIT_SUCCESS, runCLI(args));\r\n    Assert.assertTrue(\"Dependency tarball did not exist after the test\", fs.isFile(defaultPath));\r\n    File secondBaseDir = new File(dependencyTarGzBaseDir, \"2\");\r\n    Path secondTarGz = getDependencyTarGz(secondBaseDir);\r\n    Assert.assertFalse(\"Dependency tarball should not exist before the test\", fs.isFile(secondTarGz));\r\n    String[] args2 = { \"app\", \"-D\", yarnAdminNoneAclProp, \"-D\", dfsAdminAclProp, \"-D\", dependencyTarGzProp, \"-enableFastLaunch\", secondBaseDir.getAbsolutePath(), \"-appTypes\", DUMMY_APP_TYPE };\r\n    Assert.assertEquals(EXIT_SUCCESS, runCLI(args2));\r\n    Assert.assertTrue(\"Dependency tarball did not exist after the test\", fs.isFile(secondTarGz));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testEnableFastLaunchUserPermissions",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testEnableFastLaunchUserPermissions() throws Exception\n{\r\n    String[] args = { \"app\", \"-D\", yarnAdminNoneAclProp, \"-D\", dependencyTarGzProp, \"-enableFastLaunch\", \"-appTypes\", DUMMY_APP_TYPE };\r\n    Assert.assertEquals(EXIT_UNAUTHORIZED, runCLI(args));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testEnableFastLaunchFilePermissions",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testEnableFastLaunchFilePermissions() throws Exception\n{\r\n    File badDir = new File(dependencyTarGzBaseDir, \"bad\");\r\n    badDir.mkdir();\r\n    fs.getFileSystem().setPermission(new Path(badDir.getAbsolutePath()), new FsPermission(\"751\"));\r\n    String[] args = { \"app\", \"-D\", dependencyTarGzProp, \"-enableFastLaunch\", badDir.getAbsolutePath(), \"-appTypes\", DUMMY_APP_TYPE };\r\n    Assert.assertEquals(EXIT_UNAUTHORIZED, runCLI(args));\r\n    badDir = new File(badDir, \"child\");\r\n    badDir.mkdir();\r\n    fs.getFileSystem().setPermission(new Path(badDir.getAbsolutePath()), new FsPermission(\"755\"));\r\n    String[] args2 = { \"app\", \"-D\", dependencyTarGzProp, \"-enableFastLaunch\", badDir.getAbsolutePath(), \"-appTypes\", DUMMY_APP_TYPE };\r\n    Assert.assertEquals(EXIT_UNAUTHORIZED, runCLI(args2));\r\n    badDir = new File(dependencyTarGzBaseDir, \"badx\");\r\n    badDir.mkdir();\r\n    fs.getFileSystem().setPermission(new Path(badDir.getAbsolutePath()), new FsPermission(\"754\"));\r\n    String[] args3 = { \"app\", \"-D\", dependencyTarGzProp, \"-enableFastLaunch\", badDir.getAbsolutePath(), \"-appTypes\", DUMMY_APP_TYPE };\r\n    Assert.assertEquals(EXIT_UNAUTHORIZED, runCLI(args3));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "checkApp",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void checkApp(String serviceName, String compName, long count, Long lifetime, String queue) throws IOException\n{\r\n    Service service = ServiceApiUtil.loadService(fs, serviceName);\r\n    Assert.assertEquals(serviceName, service.getName());\r\n    Assert.assertEquals(lifetime, service.getLifetime());\r\n    Assert.assertEquals(queue, service.getQueue());\r\n    List<Component> components = service.getComponents();\r\n    for (Component component : components) {\r\n        if (component.getName().equals(compName)) {\r\n            Assert.assertEquals(count, component.getNumberOfContainers().longValue());\r\n            return;\r\n        }\r\n    }\r\n    Assert.fail();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "assertValidName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertValidName(String name)\n{\r\n    ServiceApiUtil.validateNameFormat(name, new Configuration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "assertInvalidName",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertInvalidName(String name)\n{\r\n    try {\r\n        ServiceApiUtil.validateNameFormat(name, new Configuration());\r\n        Assert.fail();\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "assertInvalid",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertInvalid(List<String> names)\n{\r\n    for (String name : names) {\r\n        assertInvalidName(name);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "assertValid",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertValid(List<String> names)\n{\r\n    for (String name : names) {\r\n        assertValidName(name);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testEmptyName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testEmptyName() throws Throwable\n{\r\n    assertInvalidName(\"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testSpaceName",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSpaceName() throws Throwable\n{\r\n    assertInvalidName(\" \");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testLeadingHyphen",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLeadingHyphen() throws Throwable\n{\r\n    assertInvalidName(\"-hyphen\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testTitleLetters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testTitleLetters() throws Throwable\n{\r\n    assertInvalidName(\"Title\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testCapitalLetters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testCapitalLetters() throws Throwable\n{\r\n    assertInvalidName(\"UPPER-CASE-CLUSTER\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testInnerBraced",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testInnerBraced() throws Throwable\n{\r\n    assertInvalidName(\"a[a\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testLeadingBrace",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testLeadingBrace() throws Throwable\n{\r\n    assertInvalidName(\"[\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testNonalphaLeadingChars",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNonalphaLeadingChars() throws Throwable\n{\r\n    assertInvalid(Arrays.asList(\"[a\", \"#\", \"@\", \"=\", \"*\", \".\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testNonalphaInnerChars",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNonalphaInnerChars() throws Throwable\n{\r\n    assertInvalid(Arrays.asList(\"a[a\", \"b#\", \"c@\", \"d=\", \"e*\", \"f.\", \"g \", \"h i\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testClusterValid",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testClusterValid() throws Throwable\n{\r\n    assertValidName(\"cluster\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testValidNames",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testValidNames() throws Throwable\n{\r\n    assertValid(Arrays.asList(\"cluster\", \"cluster1\", \"very-very-very-long-cluster-name\", \"c1234567890\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    testService = TestServiceManager.createBaseDef(\"testService\");\r\n    serviceContext = new MockRunningServiceContext(rule, testService);\r\n    launcher = new AbstractLauncher(serviceContext);\r\n    rule.getFs().setAppDir(new Path(\"target/testAbstractProviderService\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "teardown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void teardown() throws Exception\n{\r\n    FileUtils.deleteQuietly(new File(rule.getFs().getAppDir().toUri().getPath()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "testBuildContainerLaunchCommand",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testBuildContainerLaunchCommand() throws Exception\n{\r\n    AbstractProviderService providerService = new DockerProviderService();\r\n    Component component = serviceContext.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    ContainerLaunchService.ComponentLaunchContext clc = createEntryPointCLCFor(testService, component, \"sleep,9000\");\r\n    ComponentInstance instance = component.getAllComponentInstances().iterator().next();\r\n    Container container = mock(Container.class);\r\n    providerService.buildContainerLaunchCommand(launcher, testService, instance, rule.getFs(), serviceContext.scheduler.getConfig(), container, clc, null);\r\n    Assert.assertEquals(\"commands\", Lists.newArrayList(clc.getLaunchCommand()), launcher.getCommands());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "testBuildContainerLaunchCommandWithSpace",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testBuildContainerLaunchCommandWithSpace() throws Exception\n{\r\n    AbstractProviderService providerService = new DockerProviderService();\r\n    Component component = serviceContext.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    ContainerLaunchService.ComponentLaunchContext clc = createEntryPointCLCFor(testService, component, \"ls -l \\\" space\\\"\");\r\n    ComponentInstance instance = component.getAllComponentInstances().iterator().next();\r\n    Container container = mock(Container.class);\r\n    providerService.buildContainerLaunchCommand(launcher, testService, instance, rule.getFs(), serviceContext.scheduler.getConfig(), container, clc, null);\r\n    Assert.assertEquals(\"commands don't match.\", Lists.newArrayList(\"ls,-l, space\"), launcher.getCommands());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "testBuildContainerLaunchContext",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testBuildContainerLaunchContext() throws Exception\n{\r\n    AbstractProviderService providerService = new DockerProviderService();\r\n    Component component = serviceContext.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    ContainerLaunchService.ComponentLaunchContext clc = createEntryPointCLCFor(testService, component, \"sleep,9000\");\r\n    ComponentInstance instance = component.getAllComponentInstances().iterator().next();\r\n    Container container = mock(Container.class);\r\n    ContainerId containerId = ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(System.currentTimeMillis(), 1), 1), 1L);\r\n    when(container.getId()).thenReturn(containerId);\r\n    providerService.buildContainerLaunchContext(launcher, testService, instance, rule.getFs(), serviceContext.scheduler.getConfig(), container, clc);\r\n    Assert.assertEquals(\"artifact\", clc.getArtifact().getId(), launcher.getDockerImage());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "createEntryPointCLCFor",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "ContainerLaunchService.ComponentLaunchContext createEntryPointCLCFor(Service service, Component component, String launchCmd)\n{\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(Artifact.TypeEnum.DOCKER);\r\n    artifact.setId(\"example\");\r\n    Map<String, String> env = new HashMap<>();\r\n    env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_DELAYED_REMOVAL\", \"true\");\r\n    env.put(\"YARN_CONTAINER_RUNTIME_DOCKER_RUN_OVERRIDE_DISABLE\", \"true\");\r\n    component.getComponentSpec().getConfiguration().setEnv(env);\r\n    return new ContainerLaunchService.ComponentLaunchContext(component.getName(), service.getVersion()).setArtifact(artifact).setConfiguration(component.getComponentSpec().getConfiguration()).setLaunchCommand(launchCmd);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    File tmpYarnDir = new File(\"target\", \"tmp\");\r\n    FileUtils.deleteQuietly(tmpYarnDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testDecommissionInstances",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testDecommissionInstances() throws Exception\n{\r\n    setupInternal(3);\r\n    ServiceClient client = createClient(getConf());\r\n    Service exampleApp = new Service();\r\n    exampleApp.setName(APP_NAME);\r\n    exampleApp.setVersion(\"v1\");\r\n    Component comp = createComponent(COMPA, 6L, \"sleep 1000\");\r\n    exampleApp.addComponent(comp);\r\n    client.actionCreate(exampleApp);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    checkInstances(client, COMPA + \"-0\", COMPA + \"-1\", COMPA + \"-2\", COMPA + \"-3\", COMPA + \"-4\", COMPA + \"-5\");\r\n    client.actionDecommissionInstances(APP_NAME, Arrays.asList(COMPA + \"-1\", COMPA + \"-5\"));\r\n    waitForNumInstances(client, 4);\r\n    checkInstances(client, COMPA + \"-0\", COMPA + \"-2\", COMPA + \"-3\", COMPA + \"-4\");\r\n    client.actionStop(APP_NAME);\r\n    waitForServiceToBeInState(client, exampleApp, ServiceState.STOPPED);\r\n    client.actionStart(APP_NAME);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    checkInstances(client, COMPA + \"-0\", COMPA + \"-2\", COMPA + \"-3\", COMPA + \"-4\");\r\n    Map<String, String> compCounts = new HashMap<>();\r\n    compCounts.put(COMPA, \"5\");\r\n    client.actionFlex(APP_NAME, compCounts);\r\n    waitForNumInstances(client, 5);\r\n    checkInstances(client, COMPA + \"-0\", COMPA + \"-2\", COMPA + \"-3\", COMPA + \"-4\", COMPA + \"-6\");\r\n    client.actionDecommissionInstances(APP_NAME, Arrays.asList(COMPA + \"-0.\" + APP_NAME + \".\" + RegistryUtils.currentUser()));\r\n    waitForNumInstances(client, 4);\r\n    checkInstances(client, COMPA + \"-2\", COMPA + \"-3\", COMPA + \"-4\", COMPA + \"-6\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "waitForNumInstances",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForNumInstances(ServiceClient client, int expectedInstances) throws TimeoutException, InterruptedException\n{\r\n    GenericTestUtils.waitFor(() -> {\r\n        try {\r\n            Service retrievedApp = client.getStatus(APP_NAME);\r\n            return retrievedApp.getComponent(COMPA).getContainers().size() == expectedInstances && retrievedApp.getState() == ServiceState.STABLE;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }, 2000, 200000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "checkInstances",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void checkInstances(ServiceClient client, String... instances) throws IOException, YarnException\n{\r\n    Service service = client.getStatus(APP_NAME);\r\n    Component component = service.getComponent(COMPA);\r\n    Assert.assertEquals(\"Service state should be STABLE\", ServiceState.STABLE, service.getState());\r\n    Assert.assertEquals(instances.length + \" containers are expected to be \" + \"running\", instances.length, component.getContainers().size());\r\n    Set<String> existingInstances = new HashSet<>();\r\n    for (Container cont : component.getContainers()) {\r\n        existingInstances.add(cont.getComponentInstanceName());\r\n    }\r\n    Assert.assertEquals(instances.length + \" instances are expected to be \" + \"running\", instances.length, existingInstances.size());\r\n    for (String instance : instances) {\r\n        Assert.assertTrue(\"Expected instance did not exist \" + instance, existingInstances.contains(instance));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createExampleApplication",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Service createExampleApplication()\n{\r\n    Service exampleApp = new Service();\r\n    exampleApp.setName(\"example-app\");\r\n    exampleApp.setVersion(\"v1\");\r\n    exampleApp.addComponent(createComponent(\"compa\"));\r\n    exampleApp.addComponent(createComponent(\"compb\"));\r\n    return exampleApp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createTerminatingJobExample",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Service createTerminatingJobExample(String serviceName)\n{\r\n    Service exampleApp = new Service();\r\n    exampleApp.setName(serviceName);\r\n    exampleApp.setVersion(\"v1\");\r\n    exampleApp.addComponent(createComponent(\"terminating-comp1\", 2, \"sleep 1000\", Component.RestartPolicyEnum.NEVER, null));\r\n    exampleApp.addComponent(createComponent(\"terminating-comp2\", 2, \"sleep 1000\", Component.RestartPolicyEnum.ON_FAILURE, null));\r\n    exampleApp.addComponent(createComponent(\"terminating-comp3\", 2, \"sleep 1000\", Component.RestartPolicyEnum.ON_FAILURE, null));\r\n    return exampleApp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createTerminatingDominantComponentJobExample",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Service createTerminatingDominantComponentJobExample(String serviceName)\n{\r\n    Service exampleApp = new Service();\r\n    exampleApp.setName(serviceName);\r\n    exampleApp.setVersion(\"v1\");\r\n    Component serviceStateComponent = createComponent(\"terminating-comp1\", 2, \"sleep 1000\", Component.RestartPolicyEnum.NEVER, null);\r\n    serviceStateComponent.getConfiguration().setProperty(CONTAINER_STATE_REPORT_AS_SERVICE_STATE, \"true\");\r\n    exampleApp.addComponent(serviceStateComponent);\r\n    exampleApp.addComponent(createComponent(\"terminating-comp2\", 2, \"sleep 60000\", Component.RestartPolicyEnum.ON_FAILURE, null));\r\n    return exampleApp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createComponent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Component createComponent(String name)\n{\r\n    return createComponent(name, 2L, \"sleep 1000\", Component.RestartPolicyEnum.ALWAYS, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createComponent",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Component createComponent(String name, long numContainers, String command)\n{\r\n    Component comp1 = new Component();\r\n    comp1.setNumberOfContainers(numContainers);\r\n    comp1.setLaunchCommand(command);\r\n    comp1.setName(name);\r\n    Resource resource = new Resource();\r\n    comp1.setResource(resource);\r\n    resource.setMemory(\"128\");\r\n    resource.setCpus(1);\r\n    return comp1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createComponent",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Component createComponent(String name, long numContainers, String command, Component.RestartPolicyEnum restartPolicyEnum, List<String> dependencies)\n{\r\n    Component comp = createComponent(name, numContainers, command);\r\n    comp.setRestartPolicy(restartPolicyEnum);\r\n    if (dependencies != null) {\r\n        comp.dependencies(dependencies);\r\n    }\r\n    return comp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "initMockFs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SliderFileSystem initMockFs() throws IOException\n{\r\n    return initMockFs(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "initMockFs",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "SliderFileSystem initMockFs(Service ext) throws IOException\n{\r\n    SliderFileSystem sfs = mock(SliderFileSystem.class);\r\n    FileSystem mockFs = mock(FileSystem.class);\r\n    JsonSerDeser<Service> jsonSerDeser = mock(JsonSerDeser.class);\r\n    when(sfs.getFileSystem()).thenReturn(mockFs);\r\n    when(sfs.buildClusterDirPath(any())).thenReturn(new Path(\"cluster_dir_path\"));\r\n    if (ext != null) {\r\n        when(jsonSerDeser.load(any(), any())).thenReturn(ext);\r\n    }\r\n    ServiceApiUtil.setJsonSerDeser(jsonSerDeser);\r\n    return sfs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConf(YarnConfiguration conf)\n{\r\n    this.conf = conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getFS",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FileSystem getFS()\n{\r\n    return fs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getYarnCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "MiniYARNCluster getYarnCluster()\n{\r\n    return yarnCluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setupInternal",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 48,
  "sourceCodeText" : "void setupInternal(int numNodeManager) throws Exception\n{\r\n    LOG.info(\"Starting up YARN cluster\");\r\n    if (conf == null) {\r\n        setConf(new YarnConfiguration());\r\n        conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS, false);\r\n        conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_USE_RPC, false);\r\n        conf.setInt(YarnConfiguration.RM_MAX_COMPLETED_APPLICATIONS, YarnConfiguration.DEFAULT_RM_MAX_COMPLETED_APPLICATIONS);\r\n    }\r\n    conf.setInt(YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB, 128);\r\n    conf.setLong(YarnConfiguration.DISPATCHER_DRAIN_EVENTS_TIMEOUT, 1000);\r\n    conf.set(\"yarn.log.dir\", \"target\");\r\n    conf.set(YarnConfiguration.NM_AUX_SERVICES, \"\");\r\n    conf.set(YarnConfiguration.NM_VMEM_PMEM_RATIO, \"8\");\r\n    conf.set(YarnConfiguration.NM_CONTAINER_MON_RESOURCE_CALCULATOR, LinuxResourceCalculatorPlugin.class.getName());\r\n    conf.set(YarnConfiguration.NM_CONTAINER_MON_PROCESS_TREE, ProcfsBasedProcessTree.class.getName());\r\n    conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_CONTROL_RESOURCE_MONITORING, true);\r\n    conf.setBoolean(TIMELINE_SERVICE_ENABLED, false);\r\n    conf.setInt(YarnConfiguration.NM_MAX_PER_DISK_UTILIZATION_PERCENTAGE, 100);\r\n    conf.setLong(DEBUG_NM_DELETE_DELAY_SEC, 60000);\r\n    conf.setLong(AM_RESOURCE_MEM, 526);\r\n    conf.setLong(YarnServiceConf.READINESS_CHECK_INTERVAL, 5);\r\n    conf.setBoolean(NM_VMEM_CHECK_ENABLED, false);\r\n    conf.setBoolean(NM_PMEM_CHECK_ENABLED, false);\r\n    conf.set(HttpServer2.FILTER_INITIALIZER_PROPERTY, \"org.apache.hadoop.security.AuthenticationFilterInitializer,\" + \"org.apache.hadoop.security.HttpCrossOriginFilterInitializer\");\r\n    zkCluster = new TestingCluster(1);\r\n    zkCluster.start();\r\n    conf.set(YarnConfiguration.RM_ZK_ADDRESS, zkCluster.getConnectString());\r\n    conf.set(KEY_REGISTRY_ZK_QUORUM, zkCluster.getConnectString());\r\n    LOG.info(\"ZK cluster: \" + zkCluster.getConnectString());\r\n    curatorService = new CuratorService(\"testCuratorService\");\r\n    curatorService.init(conf);\r\n    curatorService.start();\r\n    fs = FileSystem.get(conf);\r\n    basedir = new File(\"target\", \"apps\");\r\n    if (basedir.exists()) {\r\n        FileUtils.deleteDirectory(basedir);\r\n    } else {\r\n        basedir.mkdirs();\r\n    }\r\n    conf.set(YARN_SERVICE_BASE_PATH, basedir.getAbsolutePath());\r\n    if (yarnCluster == null) {\r\n        yarnCluster = new MiniYARNCluster(this.getClass().getSimpleName(), 1, numNodeManager, 1, 1);\r\n        yarnCluster.init(conf);\r\n        yarnCluster.start();\r\n        waitForNMsToRegister();\r\n        URL url = Thread.currentThread().getContextClassLoader().getResource(\"yarn-site.xml\");\r\n        if (url == null) {\r\n            throw new RuntimeException(\"Could not find 'yarn-site.xml' dummy file in classpath\");\r\n        }\r\n        Configuration yarnClusterConfig = yarnCluster.getConfig();\r\n        yarnClusterConfig.set(YarnConfiguration.YARN_APPLICATION_CLASSPATH, new File(url.getPath()).getParent());\r\n        ByteArrayOutputStream bytesOut = new ByteArrayOutputStream();\r\n        yarnClusterConfig.writeXml(bytesOut);\r\n        bytesOut.close();\r\n        OutputStream os = new FileOutputStream(new File(url.getPath()));\r\n        os.write(bytesOut.toByteArray());\r\n        os.close();\r\n        LOG.info(\"Write yarn-site.xml configs to: \" + url);\r\n    }\r\n    if (hdfsCluster == null) {\r\n        HdfsConfiguration hdfsConfig = new HdfsConfiguration();\r\n        hdfsCluster = new MiniDFSCluster.Builder(hdfsConfig).numDataNodes(1).build();\r\n    }\r\n    try {\r\n        Thread.sleep(2000);\r\n    } catch (InterruptedException e) {\r\n        LOG.info(\"setup thread sleep interrupted. message=\" + e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "shutdown",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void shutdown() throws IOException\n{\r\n    if (yarnCluster != null) {\r\n        try {\r\n            yarnCluster.stop();\r\n        } finally {\r\n            yarnCluster = null;\r\n        }\r\n    }\r\n    if (hdfsCluster != null) {\r\n        try {\r\n            hdfsCluster.shutdown();\r\n        } finally {\r\n            hdfsCluster = null;\r\n        }\r\n    }\r\n    if (curatorService != null) {\r\n        ServiceOperations.stop(curatorService);\r\n    }\r\n    if (zkCluster != null) {\r\n        zkCluster.stop();\r\n    }\r\n    if (basedir != null) {\r\n        FileUtils.deleteDirectory(basedir);\r\n    }\r\n    SliderFileSystem sfs = new SliderFileSystem(conf);\r\n    Path appDir = sfs.getBaseApplicationPath();\r\n    sfs.getFileSystem().delete(appDir, true);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForNMsToRegister",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void waitForNMsToRegister() throws Exception\n{\r\n    int sec = 60;\r\n    while (sec >= 0) {\r\n        if (yarnCluster.getResourceManager().getRMContext().getRMNodes().size() >= NUM_NMS) {\r\n            break;\r\n        }\r\n        Thread.sleep(1000);\r\n        sec--;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createClient",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ServiceClient createClient(Configuration conf) throws Exception\n{\r\n    ServiceClient client = new ServiceClient() {\r\n\r\n        @Override\r\n        protected Path addJarResource(String appName, Map<String, LocalResource> localResources) throws IOException, SliderException {\r\n            return null;\r\n        }\r\n    };\r\n    client.init(conf);\r\n    client.start();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createServiceManager",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ServiceManager createServiceManager(ServiceContext context)\n{\r\n    ServiceManager serviceManager = new ServiceManager(context);\r\n    context.setServiceManager(serviceManager);\r\n    return serviceManager;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createYarnClient",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "YarnClient createYarnClient(Configuration conf)\n{\r\n    YarnClient client = YarnClient.createYarnClient();\r\n    client.init(conf);\r\n    client.start();\r\n    return client;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getCuratorService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "CuratorService getCuratorService() throws IOException\n{\r\n    return curatorService;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForAllCompToBeReady",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Multimap<String, String> waitForAllCompToBeReady(ServiceClient client, Service exampleApp) throws TimeoutException, InterruptedException\n{\r\n    int expectedTotalContainers = countTotalContainers(exampleApp);\r\n    Multimap<String, String> allContainers = HashMultimap.create();\r\n    GenericTestUtils.waitFor(() -> {\r\n        try {\r\n            Service retrievedApp = client.getStatus(exampleApp.getName());\r\n            int totalReadyContainers = 0;\r\n            allContainers.clear();\r\n            LOG.info(\"Num Components \" + retrievedApp.getComponents().size());\r\n            for (Component component : retrievedApp.getComponents()) {\r\n                LOG.info(\"looking for  \" + component.getName());\r\n                LOG.info(component.toString());\r\n                if (component.getContainers() != null) {\r\n                    if (component.getContainers().size() == exampleApp.getComponent(component.getName()).getNumberOfContainers()) {\r\n                        for (Container container : component.getContainers()) {\r\n                            LOG.info(\"Container state \" + container.getState() + \", component \" + component.getName());\r\n                            if (container.getState() == ContainerState.READY) {\r\n                                totalReadyContainers++;\r\n                                allContainers.put(component.getName(), container.getId());\r\n                                LOG.info(\"Found 1 ready container \" + container.getId());\r\n                            }\r\n                        }\r\n                    } else {\r\n                        LOG.info(component.getName() + \" Expected number of containers \" + exampleApp.getComponent(component.getName()).getNumberOfContainers() + \", current = \" + component.getContainers());\r\n                    }\r\n                }\r\n            }\r\n            LOG.info(\"Exit loop, totalReadyContainers= \" + totalReadyContainers + \" expected = \" + expectedTotalContainers);\r\n            return totalReadyContainers == expectedTotalContainers;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }, 2000, 200000);\r\n    return allContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForServiceToBeStable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForServiceToBeStable(ServiceClient client, Service exampleApp) throws TimeoutException, InterruptedException\n{\r\n    waitForServiceToBeStable(client, exampleApp, 200000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForServiceToBeStable",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForServiceToBeStable(ServiceClient client, Service exampleApp, int waitForMillis) throws TimeoutException, InterruptedException\n{\r\n    waitForServiceToBeInState(client, exampleApp, ServiceState.STABLE, waitForMillis);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForServiceToBeStarted",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForServiceToBeStarted(ServiceClient client, Service exampleApp) throws TimeoutException, InterruptedException\n{\r\n    waitForServiceToBeInState(client, exampleApp, ServiceState.STARTED);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForServiceToBeExpressUpgrading",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForServiceToBeExpressUpgrading(ServiceClient client, Service exampleApp) throws TimeoutException, InterruptedException\n{\r\n    waitForServiceToBeInState(client, exampleApp, ServiceState.EXPRESS_UPGRADING);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForServiceToBeInState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForServiceToBeInState(ServiceClient client, Service exampleApp, ServiceState desiredState) throws TimeoutException, InterruptedException\n{\r\n    waitForServiceToBeInState(client, exampleApp, desiredState, 200000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForServiceToBeInState",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForServiceToBeInState(ServiceClient client, Service exampleApp, ServiceState desiredState, int waitForMillis) throws TimeoutException, InterruptedException\n{\r\n    GenericTestUtils.waitFor(() -> {\r\n        try {\r\n            Service retrievedApp = client.getStatus(exampleApp.getName());\r\n            return retrievedApp.getState() == desiredState;\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        }\r\n    }, 2000, waitForMillis);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "countTotalContainers",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "int countTotalContainers(Service service)\n{\r\n    int totalContainers = 0;\r\n    for (Component component : service.getComponents()) {\r\n        totalContainers += component.getNumberOfContainers();\r\n    }\r\n    return totalContainers;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\monitor",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    basedir = new File(\"target\", \"apps\");\r\n    if (basedir.exists()) {\r\n        FileUtils.deleteDirectory(basedir);\r\n    } else {\r\n        basedir.mkdirs();\r\n    }\r\n    conf.setLong(YarnServiceConf.READINESS_CHECK_INTERVAL, 2);\r\n    zkCluster = new TestingCluster(1);\r\n    zkCluster.start();\r\n    conf.set(KEY_REGISTRY_ZK_QUORUM, zkCluster.getConnectString());\r\n    System.out.println(\"ZK cluster: \" + zkCluster.getConnectString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\monitor",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    if (basedir != null) {\r\n        FileUtils.deleteDirectory(basedir);\r\n    }\r\n    if (zkCluster != null) {\r\n        zkCluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\monitor",
  "methodName" : "testComponentDependency",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testComponentDependency() throws Exception\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(123456, 1);\r\n    Service exampleApp = new Service();\r\n    exampleApp.setVersion(\"v1\");\r\n    exampleApp.setId(applicationId.toString());\r\n    exampleApp.setName(\"testComponentDependency\");\r\n    exampleApp.addComponent(createComponent(\"compa\", 1, \"sleep 1000\"));\r\n    Component compb = createComponent(\"compb\", 1, \"sleep 1000\", Component.RestartPolicyEnum.ON_FAILURE, Collections.singletonList(\"compa\"));\r\n    Component compc = createComponent(\"compc\", 1, \"sleep 1000\", Component.RestartPolicyEnum.NEVER, Collections.singletonList(\"compb\"));\r\n    exampleApp.addComponent(compb);\r\n    exampleApp.addComponent(compc);\r\n    MockServiceAM am = new MockServiceAM(exampleApp);\r\n    am.init(conf);\r\n    am.start();\r\n    Assert.assertTrue(am.getComponent(\"compa\").areDependenciesReady());\r\n    Assert.assertFalse(am.getComponent(\"compb\").areDependenciesReady());\r\n    am.feedContainerToComp(exampleApp, 1, \"compa\");\r\n    am.waitForDependenciesSatisfied(\"compb\");\r\n    am.feedContainerToComp(exampleApp, 2, \"compb\");\r\n    am.waitForDependenciesSatisfied(\"compc\");\r\n    am.feedContainerToComp(exampleApp, 2, \"compb\");\r\n    am.flexComponent(\"compa\", 2);\r\n    am.waitForNumDesiredContainers(\"compa\", 2);\r\n    Assert.assertFalse(am.getComponent(\"compb\").areDependenciesReady());\r\n    am.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "filenames",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Collection<String[]> filenames()\n{\r\n    String[][] stringArray = new String[ExampleAppJson.ALL_EXAMPLE_RESOURCES.size()][1];\r\n    int i = 0;\r\n    for (String s : ExampleAppJson.ALL_EXAMPLE_RESOURCES) {\r\n        stringArray[i++][0] = s;\r\n    }\r\n    return Arrays.asList(stringArray);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "testLoadResource",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testLoadResource() throws Throwable\n{\r\n    try {\r\n        Service service = JSON_SER_DESER.fromResource(resource);\r\n        SliderFileSystem sfs = ServiceTestUtils.initMockFs();\r\n        ServiceApiUtil.validateAndResolveService(service, sfs, new YarnConfiguration());\r\n    } catch (Exception e) {\r\n        throw new Exception(\"exception loading \" + resource + \":\" + e.toString());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testAlwaysRestartPolicy",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testAlwaysRestartPolicy() throws Exception\n{\r\n    AlwaysRestartPolicy alwaysRestartPolicy = AlwaysRestartPolicy.getInstance();\r\n    Component component = mock(Component.class);\r\n    when(component.getNumReadyInstances()).thenReturn(1);\r\n    when(component.getNumDesiredInstances()).thenReturn(2);\r\n    ComponentInstance instance = mock(ComponentInstance.class);\r\n    when(instance.getComponent()).thenReturn(component);\r\n    ContainerStatus containerStatus = mock(ContainerStatus.class);\r\n    assertEquals(true, alwaysRestartPolicy.isLongLived());\r\n    assertEquals(true, alwaysRestartPolicy.allowUpgrades());\r\n    assertEquals(false, alwaysRestartPolicy.hasCompleted(component));\r\n    assertEquals(false, alwaysRestartPolicy.hasCompletedSuccessfully(component));\r\n    assertEquals(true, alwaysRestartPolicy.shouldRelaunchInstance(instance, containerStatus));\r\n    assertEquals(false, alwaysRestartPolicy.isReadyForDownStream(component));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testNeverRestartPolicy",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testNeverRestartPolicy() throws Exception\n{\r\n    NeverRestartPolicy restartPolicy = NeverRestartPolicy.getInstance();\r\n    Component component = mock(Component.class);\r\n    when(component.getNumSucceededInstances()).thenReturn(new Long(1));\r\n    when(component.getNumFailedInstances()).thenReturn(new Long(2));\r\n    when(component.getNumDesiredInstances()).thenReturn(3);\r\n    when(component.getNumReadyInstances()).thenReturn(3);\r\n    ComponentInstance instance = mock(ComponentInstance.class);\r\n    when(instance.getComponent()).thenReturn(component);\r\n    ContainerStatus containerStatus = mock(ContainerStatus.class);\r\n    assertEquals(false, restartPolicy.isLongLived());\r\n    assertEquals(false, restartPolicy.allowUpgrades());\r\n    assertEquals(true, restartPolicy.hasCompleted(component));\r\n    assertEquals(false, restartPolicy.hasCompletedSuccessfully(component));\r\n    assertEquals(false, restartPolicy.shouldRelaunchInstance(instance, containerStatus));\r\n    assertEquals(true, restartPolicy.isReadyForDownStream(component));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testOnFailureRestartPolicy",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testOnFailureRestartPolicy() throws Exception\n{\r\n    OnFailureRestartPolicy restartPolicy = OnFailureRestartPolicy.getInstance();\r\n    Component component = mock(Component.class);\r\n    when(component.getNumSucceededInstances()).thenReturn(new Long(3));\r\n    when(component.getNumFailedInstances()).thenReturn(new Long(0));\r\n    when(component.getNumDesiredInstances()).thenReturn(3);\r\n    when(component.getNumReadyInstances()).thenReturn(3);\r\n    ComponentInstance instance = mock(ComponentInstance.class);\r\n    when(instance.getComponent()).thenReturn(component);\r\n    ContainerStatus containerStatus = mock(ContainerStatus.class);\r\n    when(containerStatus.getExitStatus()).thenReturn(0);\r\n    assertEquals(false, restartPolicy.isLongLived());\r\n    assertEquals(false, restartPolicy.allowUpgrades());\r\n    assertEquals(true, restartPolicy.hasCompleted(component));\r\n    assertEquals(true, restartPolicy.hasCompletedSuccessfully(component));\r\n    assertEquals(false, restartPolicy.shouldRelaunchInstance(instance, containerStatus));\r\n    assertEquals(true, restartPolicy.isReadyForDownStream(component));\r\n    when(component.getNumSucceededInstances()).thenReturn(new Long(2));\r\n    when(component.getNumFailedInstances()).thenReturn(new Long(1));\r\n    when(component.getNumDesiredInstances()).thenReturn(3);\r\n    assertEquals(false, restartPolicy.hasCompleted(component));\r\n    assertEquals(false, restartPolicy.hasCompletedSuccessfully(component));\r\n    when(containerStatus.getExitStatus()).thenReturn(-1000);\r\n    assertEquals(true, restartPolicy.shouldRelaunchInstance(instance, containerStatus));\r\n    assertEquals(true, restartPolicy.isReadyForDownStream(component));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testUpgrade",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testUpgrade() throws Exception\n{\r\n    ServiceContext context = createServiceContext(\"testUpgrade\");\r\n    initUpgrade(context, \"v2\", false, false, false);\r\n    Assert.assertEquals(\"service not upgraded\", ServiceState.UPGRADING, context.getServiceManager().getServiceSpec().getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testRestartNothingToUpgrade",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRestartNothingToUpgrade() throws Exception\n{\r\n    ServiceContext context = createServiceContext(\"testRestartNothingToUpgrade\");\r\n    initUpgrade(context, \"v2\", false, false, false);\r\n    ServiceManager manager = context.getServiceManager();\r\n    upgradeAndReadyAllInstances(context);\r\n    context.scheduler.getDispatcher().getEventHandler().handle(new ServiceEvent(ServiceEventType.START));\r\n    GenericTestUtils.waitFor(() -> context.service.getState().equals(ServiceState.STABLE), CHECK_EVERY_MILLIS, TIMEOUT);\r\n    Assert.assertEquals(\"service not re-started\", ServiceState.STABLE, manager.getServiceSpec().getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testAutoFinalizeNothingToUpgrade",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testAutoFinalizeNothingToUpgrade() throws Exception\n{\r\n    ServiceContext context = createServiceContext(\"testAutoFinalizeNothingToUpgrade\");\r\n    initUpgrade(context, \"v2\", false, true, false);\r\n    ServiceManager manager = context.getServiceManager();\r\n    upgradeAndReadyAllInstances(context);\r\n    GenericTestUtils.waitFor(() -> context.service.getState().equals(ServiceState.STABLE), CHECK_EVERY_MILLIS, TIMEOUT);\r\n    Assert.assertEquals(\"service stable\", ServiceState.STABLE, manager.getServiceSpec().getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testRestartWithPendingUpgrade",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testRestartWithPendingUpgrade() throws Exception\n{\r\n    ServiceContext context = createServiceContext(\"testRestart\");\r\n    initUpgrade(context, \"v2\", true, false, false);\r\n    ServiceManager manager = context.getServiceManager();\r\n    context.scheduler.getDispatcher().getEventHandler().handle(new ServiceEvent(ServiceEventType.START));\r\n    context.scheduler.getDispatcher().stop();\r\n    Assert.assertEquals(\"service should still be upgrading\", ServiceState.UPGRADING, manager.getServiceSpec().getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testFinalize",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testFinalize() throws Exception\n{\r\n    ServiceContext context = createServiceContext(\"testCheckState\");\r\n    initUpgrade(context, \"v2\", true, false, false);\r\n    ServiceManager manager = context.getServiceManager();\r\n    Assert.assertEquals(\"service not upgrading\", ServiceState.UPGRADING, manager.getServiceSpec().getState());\r\n    upgradeAndReadyAllInstances(context);\r\n    context.scheduler.getDispatcher().getEventHandler().handle(new ServiceEvent(ServiceEventType.START));\r\n    GenericTestUtils.waitFor(() -> context.service.getState().equals(ServiceState.STABLE), CHECK_EVERY_MILLIS, TIMEOUT);\r\n    Assert.assertEquals(\"service not re-started\", ServiceState.STABLE, manager.getServiceSpec().getState());\r\n    validateUpgradeFinalization(manager.getName(), \"v2\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testAutoFinalize",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAutoFinalize() throws Exception\n{\r\n    ServiceContext context = createServiceContext(\"testCheckStateAutoFinalize\");\r\n    ServiceManager manager = context.getServiceManager();\r\n    manager.getServiceSpec().setState(ServiceState.UPGRADING_AUTO_FINALIZE);\r\n    initUpgrade(context, \"v2\", true, true, false);\r\n    upgradeAndReadyAllInstances(context);\r\n    GenericTestUtils.waitFor(() -> context.service.getState().equals(ServiceState.STABLE), CHECK_EVERY_MILLIS, TIMEOUT);\r\n    Assert.assertEquals(\"service not stable\", ServiceState.STABLE, manager.getServiceSpec().getState());\r\n    validateUpgradeFinalization(manager.getName(), \"v2\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testInvalidUpgrade",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testInvalidUpgrade() throws Exception\n{\r\n    ServiceContext serviceContext = createServiceContext(\"testInvalidUpgrade\");\r\n    ServiceManager manager = serviceContext.getServiceManager();\r\n    manager.getServiceSpec().setState(ServiceState.UPGRADING_AUTO_FINALIZE);\r\n    Service upgradedDef = ServiceTestUtils.createExampleApplication();\r\n    upgradedDef.setName(manager.getName());\r\n    upgradedDef.setVersion(\"v2\");\r\n    upgradedDef.setLifetime(2L);\r\n    writeUpgradedDef(upgradedDef);\r\n    try {\r\n        manager.processUpgradeRequest(\"v2\", true, false);\r\n    } catch (Exception ex) {\r\n        Assert.assertTrue(ex instanceof UnsupportedOperationException);\r\n        return;\r\n    }\r\n    Assert.fail();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testExpressUpgrade",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testExpressUpgrade() throws Exception\n{\r\n    ServiceContext context = createServiceContext(\"testExpressUpgrade\");\r\n    ServiceManager manager = context.getServiceManager();\r\n    manager.getServiceSpec().setState(ServiceState.EXPRESS_UPGRADING);\r\n    initUpgrade(context, \"v2\", true, true, true);\r\n    List<String> comps = ServiceApiUtil.resolveCompsDependency(context.service);\r\n    String compA = comps.get(0);\r\n    makeInstancesReadyAfterUpgrade(context, compA);\r\n    String compB = comps.get(1);\r\n    makeInstancesReadyAfterUpgrade(context, compB);\r\n    GenericTestUtils.waitFor(() -> context.service.getState().equals(ServiceState.STABLE), CHECK_EVERY_MILLIS, TIMEOUT);\r\n    Assert.assertEquals(\"service not stable\", ServiceState.STABLE, manager.getServiceSpec().getState());\r\n    validateUpgradeFinalization(manager.getName(), \"v2\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testCancelUpgrade",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testCancelUpgrade() throws Exception\n{\r\n    ServiceContext context = createServiceContext(\"testCancelUpgrade\");\r\n    writeInitialDef(context.service);\r\n    initUpgrade(context, \"v2\", true, false, false);\r\n    ServiceManager manager = context.getServiceManager();\r\n    Assert.assertEquals(\"service not upgrading\", ServiceState.UPGRADING, manager.getServiceSpec().getState());\r\n    List<String> comps = ServiceApiUtil.resolveCompsDependency(context.service);\r\n    String compA = comps.get(0);\r\n    upgradeInstances(context, compA);\r\n    makeInstancesReadyAfterUpgrade(context, compA);\r\n    context.scheduler.getDispatcher().getEventHandler().handle(new ServiceEvent(ServiceEventType.CANCEL_UPGRADE));\r\n    makeInstancesReadyAfterUpgrade(context, compA);\r\n    GenericTestUtils.waitFor(() -> context.service.getState().equals(ServiceState.STABLE), CHECK_EVERY_MILLIS, TIMEOUT);\r\n    Assert.assertEquals(\"service upgrade not cancelled\", ServiceState.STABLE, manager.getServiceSpec().getState());\r\n    validateUpgradeFinalization(manager.getName(), \"v1\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testCancelUpgradeAfterInitiate",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testCancelUpgradeAfterInitiate() throws Exception\n{\r\n    ServiceContext context = createServiceContext(\"testCancelUpgrade\");\r\n    writeInitialDef(context.service);\r\n    initUpgrade(context, \"v2\", true, false, false);\r\n    ServiceManager manager = context.getServiceManager();\r\n    Assert.assertEquals(\"service not upgrading\", ServiceState.UPGRADING, manager.getServiceSpec().getState());\r\n    context.scheduler.getDispatcher().getEventHandler().handle(new ServiceEvent(ServiceEventType.CANCEL_UPGRADE));\r\n    GenericTestUtils.waitFor(() -> context.service.getState().equals(ServiceState.STABLE), CHECK_EVERY_MILLIS, TIMEOUT);\r\n    Assert.assertEquals(\"service upgrade not cancelled\", ServiceState.STABLE, manager.getServiceSpec().getState());\r\n    validateUpgradeFinalization(manager.getName(), \"v1\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "validateUpgradeFinalization",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void validateUpgradeFinalization(String serviceName, String expectedVersion) throws IOException\n{\r\n    Service savedSpec = ServiceApiUtil.loadService(rule.getFs(), serviceName);\r\n    Assert.assertEquals(\"service def not re-written\", expectedVersion, savedSpec.getVersion());\r\n    Assert.assertNotNull(\"app id not present\", savedSpec.getId());\r\n    Assert.assertEquals(\"state not stable\", ServiceState.STABLE, savedSpec.getState());\r\n    savedSpec.getComponents().forEach(compSpec -> Assert.assertEquals(\"comp not stable\", ComponentState.STABLE, compSpec.getState()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "initUpgrade",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void initUpgrade(ServiceContext context, String version, boolean upgradeArtifact, boolean autoFinalize, boolean expressUpgrade) throws IOException, SliderException, TimeoutException, InterruptedException\n{\r\n    ServiceManager serviceManager = context.getServiceManager();\r\n    Service upgradedDef = ServiceTestUtils.createExampleApplication();\r\n    upgradedDef.setName(serviceManager.getName());\r\n    upgradedDef.setVersion(version);\r\n    if (upgradeArtifact) {\r\n        Artifact upgradedArtifact = createTestArtifact(\"2\");\r\n        upgradedDef.getComponents().forEach(component -> {\r\n            component.setArtifact(upgradedArtifact);\r\n        });\r\n    }\r\n    writeUpgradedDef(upgradedDef);\r\n    serviceManager.processUpgradeRequest(version, autoFinalize, expressUpgrade);\r\n    GenericTestUtils.waitFor(() -> {\r\n        for (Component comp : context.scheduler.getAllComponents().values()) {\r\n            if (!comp.getComponentSpec().getState().equals(ComponentState.NEEDS_UPGRADE)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }, CHECK_EVERY_MILLIS, TIMEOUT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "upgradeAndReadyAllInstances",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void upgradeAndReadyAllInstances(ServiceContext context) throws TimeoutException, InterruptedException\n{\r\n    upgradeAllInstances(context);\r\n    makeAllInstancesReady(context);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "upgradeAllInstances",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void upgradeAllInstances(ServiceContext context) throws TimeoutException, InterruptedException\n{\r\n    context.scheduler.getLiveInstances().forEach(((containerId, instance) -> {\r\n        ComponentInstanceEvent event = new ComponentInstanceEvent(containerId, ComponentInstanceEventType.UPGRADE);\r\n        context.scheduler.getDispatcher().getEventHandler().handle(event);\r\n    }));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "makeAllInstancesReady",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void makeAllInstancesReady(ServiceContext context) throws TimeoutException, InterruptedException\n{\r\n    context.scheduler.getLiveInstances().forEach(((containerId, instance) -> {\r\n        ComponentInstanceEvent startEvent = new ComponentInstanceEvent(containerId, ComponentInstanceEventType.START);\r\n        context.scheduler.getDispatcher().getEventHandler().handle(startEvent);\r\n        ComponentInstanceEvent becomeReadyEvent = new ComponentInstanceEvent(containerId, ComponentInstanceEventType.BECOME_READY);\r\n        context.scheduler.getDispatcher().getEventHandler().handle(becomeReadyEvent);\r\n    }));\r\n    GenericTestUtils.waitFor(() -> {\r\n        for (ComponentInstance instance : context.scheduler.getLiveInstances().values()) {\r\n            if (!instance.getContainerState().equals(ContainerState.READY)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }, CHECK_EVERY_MILLIS, TIMEOUT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "upgradeInstances",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void upgradeInstances(ServiceContext context, String compName)\n{\r\n    Collection<ComponentInstance> compInstances = context.scheduler.getAllComponents().get(compName).getAllComponentInstances();\r\n    compInstances.forEach(instance -> {\r\n        ComponentInstanceEvent event = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.UPGRADE);\r\n        context.scheduler.getDispatcher().getEventHandler().handle(event);\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "makeInstancesReadyAfterUpgrade",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void makeInstancesReadyAfterUpgrade(ServiceContext context, String compName) throws TimeoutException, InterruptedException\n{\r\n    Collection<ComponentInstance> compInstances = context.scheduler.getAllComponents().get(compName).getAllComponentInstances();\r\n    GenericTestUtils.waitFor(() -> {\r\n        for (ComponentInstance instance : compInstances) {\r\n            if (!instance.getContainerState().equals(ContainerState.UPGRADING)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }, CHECK_EVERY_MILLIS, TIMEOUT);\r\n    compInstances.forEach(instance -> {\r\n        ComponentInstanceEvent startEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.START);\r\n        context.scheduler.getDispatcher().getEventHandler().handle(startEvent);\r\n        ComponentInstanceEvent becomeReadyEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.BECOME_READY);\r\n        context.scheduler.getDispatcher().getEventHandler().handle(becomeReadyEvent);\r\n    });\r\n    GenericTestUtils.waitFor(() -> {\r\n        for (ComponentInstance instance : compInstances) {\r\n            if (!instance.getContainerState().equals(ContainerState.READY)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }, CHECK_EVERY_MILLIS, TIMEOUT);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createServiceContext",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "ServiceContext createServiceContext(String name) throws Exception\n{\r\n    Service service = createBaseDef(name);\r\n    ServiceContext context = new MockRunningServiceContext(rule, service);\r\n    context.scheduler.getDispatcher().setDrainEventsOnStop();\r\n    context.scheduler.getDispatcher().start();\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createBaseDef",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Service createBaseDef(String name)\n{\r\n    return createDef(name, ServiceTestUtils.createExampleApplication());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createDef",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Service createDef(String name, Service serviceDef)\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    serviceDef.setId(applicationId.toString());\r\n    serviceDef.setName(name);\r\n    serviceDef.setState(ServiceState.STARTED);\r\n    Artifact artifact = createTestArtifact(\"1\");\r\n    serviceDef.getComponents().forEach(component -> component.setArtifact(artifact));\r\n    return serviceDef;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createTestArtifact",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Artifact createTestArtifact(String artifactId)\n{\r\n    Artifact artifact = new Artifact();\r\n    artifact.setId(artifactId);\r\n    artifact.setType(Artifact.TypeEnum.TARBALL);\r\n    return artifact;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "writeInitialDef",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeInitialDef(Service service) throws IOException, SliderException\n{\r\n    Path servicePath = rule.getFs().buildClusterDirPath(service.getName());\r\n    ServiceApiUtil.createDirAndPersistApp(rule.getFs(), servicePath, service);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "writeUpgradedDef",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeUpgradedDef(Service upgradedDef) throws IOException, SliderException\n{\r\n    Path upgradePath = rule.getFs().buildClusterUpgradeDirPath(upgradedDef.getName(), upgradedDef.getVersion());\r\n    ServiceApiUtil.createDirAndPersistApp(rule.getFs(), upgradePath, upgradedDef);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testContainerUpgrade",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testContainerUpgrade() throws Exception\n{\r\n    ServiceContext context = TestComponent.createTestContext(rule, \"testContainerUpgrade\");\r\n    Component component = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    upgradeComponent(component);\r\n    ComponentInstance instance = component.getAllComponentInstances().iterator().next();\r\n    ComponentInstanceEvent instanceEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.UPGRADE);\r\n    instance.handle(instanceEvent);\r\n    Container containerSpec = component.getComponentSpec().getContainer(instance.getContainer().getId().toString());\r\n    Assert.assertEquals(\"instance not upgrading\", ContainerState.UPGRADING, containerSpec.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testContainerReadyAfterUpgrade",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testContainerReadyAfterUpgrade() throws Exception\n{\r\n    ServiceContext context = TestComponent.createTestContext(rule, \"testContainerReadyAfterUpgrade\");\r\n    Component component = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    upgradeComponent(component);\r\n    ComponentInstance instance = component.getAllComponentInstances().iterator().next();\r\n    ComponentInstanceEvent instanceEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.UPGRADE);\r\n    instance.handle(instanceEvent);\r\n    instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.START));\r\n    Assert.assertEquals(\"instance not running\", ContainerState.RUNNING_BUT_UNREADY, component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());\r\n    instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.BECOME_READY));\r\n    Assert.assertEquals(\"instance not ready\", ContainerState.READY, component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testContainerUpgradeFailed",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testContainerUpgradeFailed() throws Exception\n{\r\n    ServiceContext context = TestComponent.createTestContext(rule, \"testContainerUpgradeFailed\");\r\n    Component component = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    upgradeComponent(component);\r\n    ComponentInstance instance = component.getAllComponentInstances().iterator().next();\r\n    ComponentInstanceEvent upgradeEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.UPGRADE);\r\n    instance.handle(upgradeEvent);\r\n    ContainerStatus containerStatus = mock(ContainerStatus.class);\r\n    when(containerStatus.getExitStatus()).thenReturn(ContainerExitStatus.ABORTED);\r\n    ComponentInstanceEvent stopEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.STOP).setStatus(containerStatus);\r\n    instance.handle(stopEvent);\r\n    Assert.assertEquals(\"instance did not fail\", ContainerState.FAILED_UPGRADE, component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testFailureAfterReinit",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testFailureAfterReinit() throws Exception\n{\r\n    ServiceContext context = TestComponent.createTestContext(rule, \"testContainerUpgradeFailed\");\r\n    Component component = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    upgradeComponent(component);\r\n    ComponentInstance instance = component.getAllComponentInstances().iterator().next();\r\n    ComponentInstanceEvent upgradeEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.UPGRADE);\r\n    instance.handle(upgradeEvent);\r\n    instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.START));\r\n    Assert.assertEquals(\"instance not running\", ContainerState.RUNNING_BUT_UNREADY, component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());\r\n    ContainerStatus containerStatus = mock(ContainerStatus.class);\r\n    when(containerStatus.getExitStatus()).thenReturn(ContainerExitStatus.ABORTED);\r\n    ComponentInstanceEvent stopEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.STOP).setStatus(containerStatus);\r\n    instance.handle(stopEvent);\r\n    Assert.assertEquals(\"instance did not fail\", ContainerState.FAILED_UPGRADE, component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testCancelNothingToUpgrade",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testCancelNothingToUpgrade() throws Exception\n{\r\n    ServiceContext context = TestComponent.createTestContext(rule, \"testCancelUpgradeWhenContainerReady\");\r\n    Component component = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    cancelCompUpgrade(component);\r\n    ComponentInstance instance = component.getAllComponentInstances().iterator().next();\r\n    ComponentInstanceEvent cancelEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.CANCEL_UPGRADE);\r\n    instance.handle(cancelEvent);\r\n    Assert.assertEquals(\"instance not ready\", ContainerState.READY, component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testCancelUpgradeFailed",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testCancelUpgradeFailed() throws Exception\n{\r\n    ServiceContext context = TestComponent.createTestContext(rule, \"testCancelUpgradeFailed\");\r\n    Component component = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    cancelCompUpgrade(component);\r\n    ComponentInstance instance = component.getAllComponentInstances().iterator().next();\r\n    ComponentInstanceEvent cancelEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.CANCEL_UPGRADE);\r\n    instance.handle(cancelEvent);\r\n    instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.STOP));\r\n    Assert.assertEquals(\"instance not init\", ComponentInstanceState.INIT, instance.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testCancelAfterCompProcessedCancel",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testCancelAfterCompProcessedCancel() throws Exception\n{\r\n    ServiceContext context = TestComponent.createTestContext(rule, \"testCancelAfterCompProcessedCancel\");\r\n    Component component = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    upgradeComponent(component);\r\n    cancelCompUpgrade(component);\r\n    ComponentInstance instance = component.getAllComponentInstances().iterator().next();\r\n    ComponentInstanceEvent upgradeEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.UPGRADE);\r\n    instance.handle(upgradeEvent);\r\n    Assert.assertEquals(\"instance should start upgrading\", ContainerState.NEEDS_UPGRADE, component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testCancelWhileUpgradeWithSuccess",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testCancelWhileUpgradeWithSuccess() throws Exception\n{\r\n    validateCancelWhileUpgrading(true, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testCancelWhileUpgradeWithFailure",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testCancelWhileUpgradeWithFailure() throws Exception\n{\r\n    validateCancelWhileUpgrading(false, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testCancelFailedWhileUpgradeWithSuccess",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testCancelFailedWhileUpgradeWithSuccess() throws Exception\n{\r\n    validateCancelWhileUpgrading(true, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testCancelFailedWhileUpgradeWithFailure",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testCancelFailedWhileUpgradeWithFailure() throws Exception\n{\r\n    validateCancelWhileUpgrading(false, false);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testUpdateLocalizationStatuses",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testUpdateLocalizationStatuses() throws Exception\n{\r\n    Service def = TestServiceManager.createBaseDef(\"testUpdateLocalizationStatuses\");\r\n    String file1 = rule.getServiceBasePath().toString() + \"/file1\";\r\n    Files.write(Paths.get(file1), \"test file\".getBytes(), StandardOpenOption.CREATE_NEW);\r\n    org.apache.hadoop.yarn.service.api.records.Component compDef = def.getComponents().iterator().next();\r\n    ConfigFile configFile1 = new ConfigFile();\r\n    configFile1.setType(ConfigFile.TypeEnum.STATIC);\r\n    configFile1.setSrcFile(file1);\r\n    compDef.setConfiguration(new Configuration().files(Lists.newArrayList(configFile1)));\r\n    ServiceContext context = new MockRunningServiceContext(rule, def);\r\n    Component component = context.scheduler.getAllComponents().get(compDef.getName());\r\n    ComponentInstance instance = component.getAllComponentInstances().iterator().next();\r\n    LocalizationStatus status = LocalizationStatus.newInstance(\"file1\", LocalizationState.PENDING);\r\n    instance.updateLocalizationStatuses(Lists.newArrayList(status));\r\n    Assert.assertTrue(\"retriever should still be active\", instance.isLclRetrieverActive());\r\n    Container container = instance.getContainerSpec();\r\n    Assert.assertTrue(container.getLocalizationStatuses() != null);\r\n    Assert.assertEquals(\"dest file\", container.getLocalizationStatuses().get(0).getDestFile(), status.getResourceKey());\r\n    Assert.assertEquals(\"state\", container.getLocalizationStatuses().get(0).getState(), status.getLocalizationState());\r\n    status = LocalizationStatus.newInstance(\"file1\", LocalizationState.COMPLETED);\r\n    instance.updateLocalizationStatuses(Lists.newArrayList(status));\r\n    Assert.assertTrue(\"retriever should not be active\", !instance.isLclRetrieverActive());\r\n    Assert.assertTrue(container.getLocalizationStatuses() != null);\r\n    Assert.assertEquals(\"dest file\", container.getLocalizationStatuses().get(0).getDestFile(), status.getResourceKey());\r\n    Assert.assertEquals(\"state\", container.getLocalizationStatuses().get(0).getState(), status.getLocalizationState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "validateCancelWhileUpgrading",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void validateCancelWhileUpgrading(boolean upgradeSuccessful, boolean cancelUpgradeSuccessful) throws Exception\n{\r\n    ServiceContext context = TestComponent.createTestContext(rule, \"testCancelWhileUpgrading\");\r\n    Component component = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    upgradeComponent(component);\r\n    ComponentInstance instance = component.getAllComponentInstances().iterator().next();\r\n    ComponentInstanceEvent upgradeEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.UPGRADE);\r\n    instance.handle(upgradeEvent);\r\n    Assert.assertEquals(\"instance should be upgrading\", ContainerState.UPGRADING, component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());\r\n    cancelCompUpgrade(component);\r\n    ComponentInstanceEvent cancelEvent = new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.CANCEL_UPGRADE);\r\n    instance.handle(cancelEvent);\r\n    if (upgradeSuccessful) {\r\n        instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.START));\r\n        instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.BECOME_READY));\r\n    } else {\r\n        instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.STOP));\r\n    }\r\n    Assert.assertEquals(\"instance not upgrading\", ContainerState.UPGRADING, component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());\r\n    if (cancelUpgradeSuccessful) {\r\n        instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.START));\r\n        instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.BECOME_READY));\r\n    } else {\r\n        instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.STOP));\r\n    }\r\n    if (cancelUpgradeSuccessful) {\r\n        Assert.assertEquals(\"instance not ready\", ContainerState.READY, component.getComponentSpec().getContainer(instance.getContainer().getId().toString()).getState());\r\n    } else {\r\n        Assert.assertEquals(\"instance not init\", ComponentInstanceState.INIT, instance.getState());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "upgradeComponent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void upgradeComponent(Component component)\n{\r\n    component.handle(new ComponentEvent(component.getName(), ComponentEventType.UPGRADE).setTargetSpec(component.getComponentSpec()).setUpgradeVersion(\"v2\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "cancelCompUpgrade",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cancelCompUpgrade(Component component)\n{\r\n    component.handle(new ComponentEvent(component.getName(), ComponentEventType.CANCEL_UPGRADE).setTargetSpec(component.getComponentSpec()).setUpgradeVersion(\"v1\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "createComponent",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "Component createComponent(ServiceScheduler scheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum restartPolicy, int nSucceededInstances, int nFailedInstances, int totalAsk, int componentId)\n{\r\n    assert (nSucceededInstances + nFailedInstances) <= totalAsk;\r\n    Component comp = mock(Component.class);\r\n    org.apache.hadoop.yarn.service.api.records.Component componentSpec = mock(org.apache.hadoop.yarn.service.api.records.Component.class);\r\n    when(componentSpec.getRestartPolicy()).thenReturn(restartPolicy);\r\n    Configuration conf = new Configuration();\r\n    when(componentSpec.getConfiguration()).thenReturn(conf);\r\n    when(comp.getRestartPolicyHandler()).thenReturn(Component.getRestartPolicyHandler(restartPolicy));\r\n    when(componentSpec.getNumberOfContainers()).thenReturn(Long.valueOf(totalAsk));\r\n    when(comp.getComponentSpec()).thenReturn(componentSpec);\r\n    when(comp.getScheduler()).thenReturn(scheduler);\r\n    Map<String, ComponentInstance> succeeded = new ConcurrentHashMap<>();\r\n    Map<String, ComponentInstance> failed = new ConcurrentHashMap<>();\r\n    scheduler.getAllComponents().put(\"comp\" + componentId, comp);\r\n    Map<String, ComponentInstance> componentInstances = new HashMap<>();\r\n    for (int i = 0; i < nSucceededInstances; i++) {\r\n        ComponentInstance componentInstance = createComponentInstance(comp, i);\r\n        componentInstances.put(componentInstance.getCompInstanceName(), componentInstance);\r\n        succeeded.put(componentInstance.getCompInstanceName(), componentInstance);\r\n    }\r\n    for (int i = 0; i < nFailedInstances; i++) {\r\n        ComponentInstance componentInstance = createComponentInstance(comp, i + nSucceededInstances);\r\n        componentInstances.put(componentInstance.getCompInstanceName(), componentInstance);\r\n        failed.put(componentInstance.getCompInstanceName(), componentInstance);\r\n    }\r\n    int delta = totalAsk - nFailedInstances - nSucceededInstances;\r\n    for (int i = 0; i < delta; i++) {\r\n        ComponentInstance componentInstance = createComponentInstance(comp, i + nSucceededInstances + nFailedInstances);\r\n        componentInstances.put(componentInstance.getCompInstanceName(), componentInstance);\r\n    }\r\n    when(comp.getAllComponentInstances()).thenReturn(componentInstances.values());\r\n    when(comp.getSucceededInstances()).thenReturn(succeeded.values());\r\n    when(comp.getFailedInstances()).thenReturn(failed.values());\r\n    return comp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "createComponent",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "Component createComponent(ServiceScheduler scheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum restartPolicy, int totalAsk, int componentId)\n{\r\n    Component comp = mock(Component.class);\r\n    org.apache.hadoop.yarn.service.api.records.Component componentSpec = mock(org.apache.hadoop.yarn.service.api.records.Component.class);\r\n    when(componentSpec.getRestartPolicy()).thenReturn(restartPolicy);\r\n    Configuration conf = new Configuration();\r\n    when(componentSpec.getConfiguration()).thenReturn(conf);\r\n    when(comp.getRestartPolicyHandler()).thenReturn(Component.getRestartPolicyHandler(restartPolicy));\r\n    when(componentSpec.getNumberOfContainers()).thenReturn(Long.valueOf(totalAsk));\r\n    when(comp.getComponentSpec()).thenReturn(componentSpec);\r\n    when(comp.getScheduler()).thenReturn(scheduler);\r\n    scheduler.getAllComponents().put(\"comp\" + componentId, comp);\r\n    Map<String, ComponentInstance> componentInstances = new HashMap<>();\r\n    for (int i = 0; i < totalAsk; i++) {\r\n        ComponentInstance componentInstance = createComponentInstance(comp, i);\r\n        componentInstances.put(componentInstance.getCompInstanceName(), componentInstance);\r\n    }\r\n    when(comp.getAllComponentInstances()).thenReturn(componentInstances.values());\r\n    return comp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "createComponentInstance",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ComponentInstance createComponentInstance(Component component, int instanceId)\n{\r\n    ComponentInstance componentInstance = mock(ComponentInstance.class);\r\n    when(componentInstance.getComponent()).thenReturn(component);\r\n    when(componentInstance.getCompInstanceName()).thenReturn(\"compInstance\" + instanceId);\r\n    Container container = mock(Container.class);\r\n    when(componentInstance.getContainerSpec()).thenReturn(container);\r\n    ServiceUtils.ProcessTerminationHandler terminationHandler = mock(ServiceUtils.ProcessTerminationHandler.class);\r\n    when(component.getScheduler().getTerminationHandler()).thenReturn(terminationHandler);\r\n    return componentInstance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component\\instance",
  "methodName" : "testComponentRestartPolicy",
  "errType" : null,
  "containingMethodsNum" : 116,
  "sourceCodeText" : "void testComponentRestartPolicy()\n{\r\n    Map<String, Component> allComponents = new HashMap<>();\r\n    Service mockService = mock(Service.class);\r\n    ServiceContext serviceContext = mock(ServiceContext.class);\r\n    when(serviceContext.getService()).thenReturn(mockService);\r\n    ServiceScheduler serviceSchedulerInstance = new ServiceScheduler(serviceContext);\r\n    ServiceScheduler serviceScheduler = spy(serviceSchedulerInstance);\r\n    when(serviceScheduler.getAllComponents()).thenReturn(allComponents);\r\n    Mockito.doNothing().when(serviceScheduler).setGracefulStop(any(FinalApplicationStatus.class));\r\n    final String containerDiag = \"Container succeeded\";\r\n    ComponentInstanceEvent componentInstanceEvent = mock(ComponentInstanceEvent.class);\r\n    ContainerId containerId = ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1234L, 1), 1), 1);\r\n    ContainerStatus containerStatus = ContainerStatus.newInstance(containerId, org.apache.hadoop.yarn.api.records.ContainerState.COMPLETE, containerDiag, 0);\r\n    when(componentInstanceEvent.getStatus()).thenReturn(containerStatus);\r\n    Component comp = createComponent(serviceScheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ALWAYS, 1, 0, 1, 0);\r\n    ComponentInstance componentInstance = comp.getAllComponentInstances().iterator().next();\r\n    ComponentInstance.handleComponentInstanceRelaunch(componentInstance, componentInstanceEvent, false, containerDiag);\r\n    verify(comp, never()).markAsSucceeded(any(ComponentInstance.class));\r\n    verify(comp, never()).markAsFailed(any(ComponentInstance.class));\r\n    verify(comp, times(1)).reInsertPendingInstance(any(ComponentInstance.class));\r\n    verify(serviceScheduler.getTerminationHandler(), never()).terminate(anyInt());\r\n    comp = createComponent(serviceScheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ALWAYS, 0, 1, 1, 0);\r\n    componentInstance = comp.getAllComponentInstances().iterator().next();\r\n    containerStatus.setExitStatus(1);\r\n    ComponentInstance.handleComponentInstanceRelaunch(componentInstance, componentInstanceEvent, false, containerDiag);\r\n    verify(comp, never()).markAsSucceeded(any(ComponentInstance.class));\r\n    verify(comp, never()).markAsFailed(any(ComponentInstance.class));\r\n    verify(comp, times(1)).reInsertPendingInstance(any(ComponentInstance.class));\r\n    verify(serviceScheduler.getTerminationHandler(), never()).terminate(anyInt());\r\n    comp = createComponent(serviceScheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER, 1, 0, 1, 0);\r\n    componentInstance = comp.getAllComponentInstances().iterator().next();\r\n    containerStatus.setExitStatus(0);\r\n    Map<String, ComponentInstance> succeededInstances = new HashMap<>();\r\n    succeededInstances.put(componentInstance.getCompInstanceName(), componentInstance);\r\n    when(comp.getSucceededInstances()).thenReturn(succeededInstances.values());\r\n    when(comp.getNumSucceededInstances()).thenReturn(new Long(1));\r\n    ComponentInstance.handleComponentInstanceRelaunch(componentInstance, componentInstanceEvent, false, containerDiag);\r\n    verify(comp, times(1)).markAsSucceeded(any(ComponentInstance.class));\r\n    verify(comp, never()).markAsFailed(any(ComponentInstance.class));\r\n    verify(comp, times(0)).reInsertPendingInstance(any(ComponentInstance.class));\r\n    verify(serviceScheduler.getTerminationHandler(), times(1)).terminate(eq(0));\r\n    comp = createComponent(serviceScheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER, 0, 1, 1, 0);\r\n    componentInstance = comp.getAllComponentInstances().iterator().next();\r\n    containerStatus.setExitStatus(-1);\r\n    when(comp.getNumFailedInstances()).thenReturn(new Long(1));\r\n    ComponentInstance.handleComponentInstanceRelaunch(componentInstance, componentInstanceEvent, false, containerDiag);\r\n    verify(comp, never()).markAsSucceeded(any(ComponentInstance.class));\r\n    verify(comp, times(1)).markAsFailed(any(ComponentInstance.class));\r\n    verify(comp, times(0)).reInsertPendingInstance(any(ComponentInstance.class));\r\n    verify(serviceScheduler.getTerminationHandler(), times(1)).terminate(eq(-1));\r\n    comp = createComponent(serviceScheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ON_FAILURE, 0, 1, 1, 0);\r\n    componentInstance = comp.getAllComponentInstances().iterator().next();\r\n    containerStatus.setExitStatus(1);\r\n    ComponentInstance.handleComponentInstanceRelaunch(componentInstance, componentInstanceEvent, false, containerDiag);\r\n    verify(comp, never()).markAsSucceeded(any(ComponentInstance.class));\r\n    verify(comp, never()).markAsFailed(any(ComponentInstance.class));\r\n    verify(comp, times(1)).reInsertPendingInstance(any(ComponentInstance.class));\r\n    verify(serviceScheduler.getTerminationHandler(), times(0)).terminate(anyInt());\r\n    comp = createComponent(serviceScheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER, 0, 1, 3, 0);\r\n    componentInstance = comp.getAllComponentInstances().iterator().next();\r\n    containerStatus.setExitStatus(1);\r\n    ComponentInstance.handleComponentInstanceRelaunch(componentInstance, componentInstanceEvent, false, containerDiag);\r\n    verify(comp, never()).markAsSucceeded(any(ComponentInstance.class));\r\n    verify(comp, times(1)).markAsFailed(any(ComponentInstance.class));\r\n    verify(comp, times(0)).reInsertPendingInstance(any(ComponentInstance.class));\r\n    verify(serviceScheduler.getTerminationHandler(), times(0)).terminate(anyInt());\r\n    comp = createComponent(serviceScheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ON_FAILURE, 0, 1, 3, 0);\r\n    Iterator<ComponentInstance> iter = comp.getAllComponentInstances().iterator();\r\n    containerStatus.setExitStatus(1);\r\n    ComponentInstance commponentInstance = iter.next();\r\n    ComponentInstance.handleComponentInstanceRelaunch(commponentInstance, componentInstanceEvent, false, containerDiag);\r\n    verify(comp, never()).markAsSucceeded(any(ComponentInstance.class));\r\n    verify(comp, never()).markAsFailed(any(ComponentInstance.class));\r\n    verify(comp, times(1)).reInsertPendingInstance(any(ComponentInstance.class));\r\n    verify(serviceScheduler.getTerminationHandler(), times(0)).terminate(anyInt());\r\n    comp = createComponent(serviceScheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER, 2, 0);\r\n    Collection<ComponentInstance> component1Instances = comp.getAllComponentInstances();\r\n    containerStatus.setExitStatus(-1);\r\n    Component comp2 = createComponent(componentInstance.getComponent().getScheduler(), org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER, 2, 1);\r\n    Collection<ComponentInstance> component2Instances = comp2.getAllComponentInstances();\r\n    Map<String, ComponentInstance> failed2Instances = new HashMap<>();\r\n    for (ComponentInstance component2Instance : component2Instances) {\r\n        failed2Instances.put(component2Instance.getCompInstanceName(), component2Instance);\r\n        when(component2Instance.getComponent().getFailedInstances()).thenReturn(failed2Instances.values());\r\n        when(component2Instance.getComponent().getNumFailedInstances()).thenReturn(new Long(failed2Instances.size()));\r\n        ComponentInstance.handleComponentInstanceRelaunch(component2Instance, componentInstanceEvent, false, containerDiag);\r\n    }\r\n    Map<String, ComponentInstance> failed1Instances = new HashMap<>();\r\n    for (ComponentInstance component1Instance : component1Instances) {\r\n        failed1Instances.put(component1Instance.getCompInstanceName(), component1Instance);\r\n        when(component1Instance.getComponent().getFailedInstances()).thenReturn(failed1Instances.values());\r\n        when(component1Instance.getComponent().getNumFailedInstances()).thenReturn(new Long(failed1Instances.size()));\r\n        ComponentInstance.handleComponentInstanceRelaunch(component1Instance, componentInstanceEvent, false, containerDiag);\r\n    }\r\n    verify(comp, never()).markAsSucceeded(any(ComponentInstance.class));\r\n    verify(comp, times(2)).markAsFailed(any(ComponentInstance.class));\r\n    verify(comp, times(0)).reInsertPendingInstance(any(ComponentInstance.class));\r\n    verify(serviceScheduler.getTerminationHandler(), times(1)).terminate(eq(-1));\r\n    containerStatus.setExitStatus(0);\r\n    comp = createComponent(serviceScheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ON_FAILURE, 2, 0);\r\n    component1Instances = comp.getAllComponentInstances();\r\n    comp2 = createComponent(componentInstance.getComponent().getScheduler(), org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.ON_FAILURE, 2, 1);\r\n    component2Instances = comp2.getAllComponentInstances();\r\n    Map<String, ComponentInstance> succeeded2Instances = new HashMap<>();\r\n    for (ComponentInstance component2Instance : component2Instances) {\r\n        succeeded2Instances.put(component2Instance.getCompInstanceName(), component2Instance);\r\n        when(component2Instance.getComponent().getSucceededInstances()).thenReturn(succeeded2Instances.values());\r\n        when(component2Instance.getComponent().getNumSucceededInstances()).thenReturn(new Long(succeeded2Instances.size()));\r\n        ComponentInstance.handleComponentInstanceRelaunch(component2Instance, componentInstanceEvent, false, containerDiag);\r\n    }\r\n    Map<String, ComponentInstance> succeeded1Instances = new HashMap<>();\r\n    for (ComponentInstance component1Instance : component1Instances) {\r\n        succeeded1Instances.put(component1Instance.getCompInstanceName(), component1Instance);\r\n        when(component1Instance.getComponent().getSucceededInstances()).thenReturn(succeeded1Instances.values());\r\n        when(component1Instance.getComponent().getNumSucceededInstances()).thenReturn(new Long(succeeded1Instances.size()));\r\n        ComponentInstance.handleComponentInstanceRelaunch(component1Instance, componentInstanceEvent, false, containerDiag);\r\n    }\r\n    verify(comp, times(2)).markAsSucceeded(any(ComponentInstance.class));\r\n    verify(comp, never()).markAsFailed(any(ComponentInstance.class));\r\n    verify(componentInstance.getComponent(), times(0)).reInsertPendingInstance(any(ComponentInstance.class));\r\n    verify(serviceScheduler.getTerminationHandler(), times(1)).terminate(eq(0));\r\n    comp = createComponent(serviceScheduler, org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER, 2, 0);\r\n    component1Instances = comp.getAllComponentInstances();\r\n    comp2 = createComponent(componentInstance.getComponent().getScheduler(), org.apache.hadoop.yarn.service.api.records.Component.RestartPolicyEnum.NEVER, 2, 1);\r\n    component2Instances = comp2.getAllComponentInstances();\r\n    for (ComponentInstance component2Instance : component2Instances) {\r\n        ComponentInstance.handleComponentInstanceRelaunch(component2Instance, componentInstanceEvent, false, containerDiag);\r\n    }\r\n    succeeded1Instances = new HashMap<>();\r\n    for (ComponentInstance component1Instance : component1Instances) {\r\n        succeeded1Instances.put(component1Instance.getCompInstanceName(), component1Instance);\r\n        when(component1Instance.getComponent().getSucceededInstances()).thenReturn(succeeded1Instances.values());\r\n        ComponentInstance.handleComponentInstanceRelaunch(component1Instance, componentInstanceEvent, false, containerDiag);\r\n    }\r\n    verify(comp, times(2)).markAsSucceeded(any(ComponentInstance.class));\r\n    verify(comp, never()).markAsFailed(any(ComponentInstance.class));\r\n    verify(componentInstance.getComponent(), times(0)).reInsertPendingInstance(any(ComponentInstance.class));\r\n    verify(serviceScheduler.getTerminationHandler(), never()).terminate(eq(0));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getAMContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId getAMContainerId() throws BadClusterStateException\n{\r\n    return ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.fromString(service.getId()), 1), 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getAppDir",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Path getAppDir()\n{\r\n    Path path = new Path(new Path(\"target\", \"apps\"), service.getName());\r\n    LOG.info(\"Service path: {}\", path);\r\n    return path;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createClientAMService",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ClientAMService createClientAMService()\n{\r\n    return new ClientAMService(context) {\r\n\r\n        @Override\r\n        String getNMHostName() {\r\n            return \"0.0.0.0\";\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createServiceScheduler",
  "errType" : [ "IOException", "YarnException|IOException" ],
  "containingMethodsNum" : 34,
  "sourceCodeText" : "ServiceScheduler createServiceScheduler(ServiceContext context) throws IOException, YarnException\n{\r\n    return new ServiceScheduler(context) {\r\n\r\n        @SuppressWarnings(\"SuspiciousMethodCalls\")\r\n        @Override\r\n        protected YarnRegistryViewForProviders createYarnRegistryOperations(ServiceContext context, RegistryOperations registryClient) {\r\n            YarnRegistryViewForProviders yarnRegistryView = mock(YarnRegistryViewForProviders.class);\r\n            if (!registryComponents.isEmpty()) {\r\n                try {\r\n                    when(yarnRegistryView.listComponents()).thenReturn(new LinkedList<>(registryComponents.keySet()));\r\n                    when(yarnRegistryView.getComponent(anyString())).thenAnswer(invocation -> registryComponents.get(invocation.getArguments()[0]));\r\n                } catch (IOException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            }\r\n            return yarnRegistryView;\r\n        }\r\n\r\n        @Override\r\n        protected AMRMClientAsync<AMRMClient.ContainerRequest> createAMRMClient() {\r\n            AMRMClientImpl client1 = new AMRMClientImpl() {\r\n\r\n                @Override\r\n                public AllocateResponse allocate(float progressIndicator) throws YarnException, IOException {\r\n                    AllocateResponse.AllocateResponseBuilder builder = AllocateResponse.newBuilder();\r\n                    synchronized (feedContainers) {\r\n                        if (feedContainers.isEmpty()) {\r\n                            LOG.info(\"Allocating........ no containers\");\r\n                        } else {\r\n                            List<Container> allocatedContainers = new LinkedList<>();\r\n                            Iterator<Container> itor = feedContainers.iterator();\r\n                            while (itor.hasNext()) {\r\n                                Container c = itor.next();\r\n                                org.apache.hadoop.yarn.service.component.Component component = componentsById.get(c.getAllocationRequestId());\r\n                                if (component.getState() == ComponentState.FLEXING) {\r\n                                    LOG.info(\"Allocated container {} \", c.getId());\r\n                                    allocatedContainers.add(c);\r\n                                    itor.remove();\r\n                                }\r\n                            }\r\n                            builder.allocatedContainers(allocatedContainers);\r\n                        }\r\n                    }\r\n                    synchronized (recoveredContainers) {\r\n                        if (!recoveredContainers.isEmpty()) {\r\n                            List<Container> containersFromPrevAttempt = new LinkedList<>();\r\n                            containersFromPrevAttempt.addAll(recoveredContainers);\r\n                            recoveredContainers.clear();\r\n                            builder.containersFromPreviousAttempt(containersFromPrevAttempt);\r\n                        }\r\n                    }\r\n                    synchronized (failedContainers) {\r\n                        if (!failedContainers.isEmpty()) {\r\n                            List<ContainerStatus> failed = new LinkedList<>(failedContainers);\r\n                            failedContainers.clear();\r\n                            builder.completedContainersStatuses(failed);\r\n                        }\r\n                    }\r\n                    return builder.build();\r\n                }\r\n\r\n                @Override\r\n                public RegisterApplicationMasterResponse registerApplicationMaster(String appHostName, int appHostPort, String appTrackingUrl, Map placementConstraintsMap) throws YarnException, IOException {\r\n                    return this.registerApplicationMaster(appHostName, appHostPort, appTrackingUrl);\r\n                }\r\n\r\n                @Override\r\n                public RegisterApplicationMasterResponse registerApplicationMaster(String appHostName, int appHostPort, String appTrackingUrl) {\r\n                    RegisterApplicationMasterResponse response = mock(RegisterApplicationMasterResponse.class);\r\n                    when(response.getResourceTypes()).thenReturn(ResourceUtils.getResourcesTypeInfo());\r\n                    return response;\r\n                }\r\n\r\n                @Override\r\n                public synchronized void releaseAssignedContainer(ContainerId containerId) {\r\n                    releasedContainers.add(containerId);\r\n                    super.releaseAssignedContainer(containerId);\r\n                }\r\n\r\n                @Override\r\n                public void unregisterApplicationMaster(FinalApplicationStatus appStatus, String appMessage, String appTrackingUrl) {\r\n                }\r\n            };\r\n            AMRMClientAsync<AMRMClient.ContainerRequest> amrmClientAsync = AMRMClientAsync.createAMRMClientAsync(client1, 1000, this.new AMRMClientCallback());\r\n            return amrmClientAsync;\r\n        }\r\n\r\n        @SuppressWarnings(\"SuspiciousMethodCalls\")\r\n        @Override\r\n        public NMClientAsync createNMClient() {\r\n            NMClientAsync nmClientAsync = super.createNMClient();\r\n            NMClient nmClient = mock(NMClient.class);\r\n            try {\r\n                when(nmClient.getContainerStatus(any(), any())).thenAnswer(invocation -> containerStatuses.get(invocation.getArguments()[0]));\r\n            } catch (YarnException | IOException e) {\r\n                throw new RuntimeException(e);\r\n            }\r\n            nmClientAsync.setClient(nmClient);\r\n            return nmClientAsync;\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "loadApplicationJson",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void loadApplicationJson(ServiceContext context, SliderFileSystem fs) throws IOException\n{\r\n    context.service = service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "feedRegistryComponent",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void feedRegistryComponent(ContainerId containerId, String compName, String compInstName)\n{\r\n    ServiceRecord record = new ServiceRecord();\r\n    record.set(YarnRegistryAttributes.YARN_ID, containerId.toString());\r\n    record.description = compInstName;\r\n    record.set(YarnRegistryAttributes.YARN_PERSISTENCE, PersistencePolicies.CONTAINER);\r\n    record.set(YarnRegistryAttributes.YARN_IP, \"localhost\");\r\n    record.set(YarnRegistryAttributes.YARN_HOSTNAME, \"localhost\");\r\n    record.set(YarnRegistryAttributes.YARN_COMPONENT, compName);\r\n    registryComponents.put(RegistryPathUtils.encodeYarnID(containerId.toString()), record);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "feedRecoveredContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void feedRecoveredContainer(ContainerId containerId, String compName)\n{\r\n    Container container = createContainer(containerId, compName);\r\n    recoveredContainers.add(container);\r\n    addContainerStatus(container, ContainerState.RUNNING);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "feedContainerToComp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Container feedContainerToComp(Service service, int id, String compName)\n{\r\n    ContainerId containerId = createContainerId(id);\r\n    return feedContainerToComp(service, containerId, compName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "feedContainerToComp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Container feedContainerToComp(Service service, ContainerId containerId, String compName)\n{\r\n    Container container = createContainer(containerId, compName);\r\n    synchronized (feedContainers) {\r\n        feedContainers.add(container);\r\n    }\r\n    addContainerStatus(container, ContainerState.RUNNING);\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "feedFailedContainerToComp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void feedFailedContainerToComp(Service service, int id, String compName)\n{\r\n    ApplicationId applicationId = ApplicationId.fromString(service.getId());\r\n    ContainerId containerId = ContainerId.newContainerId(ApplicationAttemptId.newInstance(applicationId, 1), id);\r\n    ContainerStatus status = Records.newRecord(ContainerStatus.class);\r\n    status.setContainerId(containerId);\r\n    synchronized (failedContainers) {\r\n        failedContainers.add(status);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "updateContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Container updateContainerStatus(Service service, int id, String compName, String host)\n{\r\n    ContainerId containerId = createContainerId(id);\r\n    Container container = createContainer(containerId, compName);\r\n    addContainerStatus(container, ContainerState.RUNNING, host);\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createContainerId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerId createContainerId(int id)\n{\r\n    ApplicationId applicationId = ApplicationId.fromString(service.getId());\r\n    return ContainerId.newContainerId(ApplicationAttemptId.newInstance(applicationId, 1), id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createContainer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Container createContainer(ContainerId containerId, String compName)\n{\r\n    NodeId nodeId = NodeId.newInstance(\"localhost\", 1234);\r\n    Container container = Container.newInstance(containerId, nodeId, \"localhost\", Resource.newInstance(100, 1), Priority.newInstance(0), null);\r\n    long allocateId = context.scheduler.getAllComponents().get(compName).getAllocateId();\r\n    container.setAllocationRequestId(allocateId);\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "flexComponent",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void flexComponent(String compName, long numberOfContainers) throws IOException\n{\r\n    ClientAMProtocol.ComponentCountProto componentCountProto = ClientAMProtocol.ComponentCountProto.newBuilder().setName(compName).setNumberOfContainers(numberOfContainers).build();\r\n    ClientAMProtocol.FlexComponentsRequestProto requestProto = ClientAMProtocol.FlexComponentsRequestProto.newBuilder().addComponents(componentCountProto).build();\r\n    context.clientAMService.flexComponents(requestProto);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getComponent",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Component getComponent(String compName)\n{\r\n    return context.scheduler.getAllComponents().get(compName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForDependenciesSatisfied",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForDependenciesSatisfied(String compName) throws TimeoutException, InterruptedException\n{\r\n    GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean get() {\r\n            return context.scheduler.getAllComponents().get(compName).areDependenciesReady();\r\n        }\r\n    }, 1000, 20000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForNumDesiredContainers",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForNumDesiredContainers(String compName, int numDesiredContainers) throws TimeoutException, InterruptedException\n{\r\n    GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean get() {\r\n            return context.scheduler.getAllComponents().get(compName).getNumDesiredInstances() == numDesiredContainers;\r\n        }\r\n    }, 1000, 20000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getCompInstance",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ComponentInstance getCompInstance(String compName, String instanceName)\n{\r\n    return context.scheduler.getAllComponents().get(compName).getComponentInstance(instanceName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForCompInstanceState",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForCompInstanceState(ComponentInstance instance, ComponentInstanceState state) throws TimeoutException, InterruptedException\n{\r\n    GenericTestUtils.waitFor(new Supplier<Boolean>() {\r\n\r\n        @Override\r\n        public Boolean get() {\r\n            return instance.getState().equals(state);\r\n        }\r\n    }, 1000, 20000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "addContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addContainerStatus(Container container, ContainerState state)\n{\r\n    addContainerStatus(container, state, container.getNodeId().getHost());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "addContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void addContainerStatus(Container container, ContainerState state, String host)\n{\r\n    ContainerStatus status = ContainerStatus.newInstance(container.getId(), state, \"\", 0);\r\n    status.setHost(host);\r\n    status.setIPs(Lists.newArrayList(host));\r\n    containerStatuses.put(container.getId(), status);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "recordTokensForContainers",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ByteBuffer recordTokensForContainers() throws IOException\n{\r\n    DataOutputBuffer dob = new DataOutputBuffer();\r\n    if (amCreds == null) {\r\n        return ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n    }\r\n    try {\r\n        amCreds.writeTokenStorageToStream(dob);\r\n    } finally {\r\n        dob.close();\r\n    }\r\n    return ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForContainerToRelease",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForContainerToRelease(ContainerId containerId) throws TimeoutException, InterruptedException\n{\r\n    GenericTestUtils.waitFor(() -> releasedContainers.contains(containerId), 1000, 30000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    launcher = new AbstractLauncher(mock(ServiceContext.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "testDockerContainerMounts",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDockerContainerMounts() throws IOException\n{\r\n    launcher.yarnDockerMode = true;\r\n    launcher.envVars.put(AbstractLauncher.ENV_DOCKER_CONTAINER_MOUNTS, \"s1:t1:ro\");\r\n    launcher.mountPaths.put(\"s2\", \"t2\");\r\n    launcher.completeContainerLaunch();\r\n    String dockerContainerMounts = launcher.containerLaunchContext.getEnvironment().get(AbstractLauncher.ENV_DOCKER_CONTAINER_MOUNTS);\r\n    Assert.assertEquals(\"s1:t1:ro,s2:t2:ro\", dockerContainerMounts);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\containerlaunch",
  "methodName" : "testContainerRetries",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testContainerRetries() throws Exception\n{\r\n    DefaultProviderService providerService = new DefaultProviderService();\r\n    AbstractLauncher mockLauncher = mock(AbstractLauncher.class);\r\n    ContainerLaunchService.ComponentLaunchContext componentLaunchContext = mock(ContainerLaunchService.ComponentLaunchContext.class);\r\n    ComponentInstance componentInstance = mock(ComponentInstance.class);\r\n    Component component = mock(Component.class);\r\n    when(componentInstance.getComponent()).thenReturn(component);\r\n    when(component.getRestartPolicyHandler()).thenReturn(NeverRestartPolicy.getInstance());\r\n    providerService.buildContainerRetry(mockLauncher, getConfig(), componentLaunchContext, componentInstance);\r\n    verifyZeroInteractions(mockLauncher);\r\n    when(component.getRestartPolicyHandler()).thenReturn(OnFailureRestartPolicy.getInstance());\r\n    when(componentLaunchContext.getConfiguration()).thenReturn(new Configuration());\r\n    providerService.buildContainerRetry(mockLauncher, getConfig(), componentLaunchContext, componentInstance);\r\n    verify(mockLauncher).setRetryContext(DEFAULT_CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_INTERVAL, DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL);\r\n    reset(mockLauncher);\r\n    when(component.getRestartPolicyHandler()).thenReturn(AlwaysRestartPolicy.getInstance());\r\n    providerService.buildContainerRetry(mockLauncher, getConfig(), componentLaunchContext, componentInstance);\r\n    verify(mockLauncher).setRetryContext(DEFAULT_CONTAINER_RETRY_MAX, DEFAULT_CONTAINER_RETRY_INTERVAL, DEFAULT_CONTAINER_FAILURES_VALIDITY_INTERVAL);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "loadResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Service loadResource(String name) throws IOException\n{\r\n    return JSON_SER_DESER.fromResource(PACKAGE + name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\conf",
  "methodName" : "resourceName",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String resourceName(String name)\n{\r\n    return \"target/test-classes\" + PACKAGE + name;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    basedir = new File(\"target\", \"apps\");\r\n    if (basedir.exists()) {\r\n        FileUtils.deleteDirectory(basedir);\r\n    } else {\r\n        basedir.mkdirs();\r\n    }\r\n    zkCluster = new TestingCluster(1);\r\n    zkCluster.start();\r\n    conf.set(KEY_REGISTRY_ZK_QUORUM, zkCluster.getConnectString());\r\n    LOG.info(\"ZK cluster: {}\", zkCluster.getConnectString());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    if (basedir != null) {\r\n        FileUtils.deleteDirectory(basedir);\r\n    }\r\n    if (zkCluster != null) {\r\n        zkCluster.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testContainerCompleted",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testContainerCompleted() throws TimeoutException, InterruptedException\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(123456, 1);\r\n    Service exampleApp = new Service();\r\n    exampleApp.setId(applicationId.toString());\r\n    exampleApp.setVersion(\"v1\");\r\n    exampleApp.setName(\"testContainerCompleted\");\r\n    exampleApp.addComponent(createComponent(\"compa\", 1, \"pwd\"));\r\n    MockServiceAM am = new MockServiceAM(exampleApp);\r\n    am.init(conf);\r\n    am.start();\r\n    ComponentInstance compa0 = am.getCompInstance(\"compa\", \"compa-0\");\r\n    am.feedContainerToComp(exampleApp, 1, \"compa\");\r\n    am.waitForCompInstanceState(compa0, ComponentInstanceState.STARTED);\r\n    LOG.info(\"Fail the container 1\");\r\n    am.feedFailedContainerToComp(exampleApp, 1, \"compa\");\r\n    am.feedContainerToComp(exampleApp, 2, \"compa\");\r\n    am.waitForCompInstanceState(compa0, ComponentInstanceState.INIT);\r\n    Assert.assertEquals(1, am.getComponent(\"compa\").getPendingInstances().size());\r\n    am.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testContainersFromPreviousAttemptsWithRMRestart",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testContainersFromPreviousAttemptsWithRMRestart() throws Exception\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    Service exampleApp = new Service();\r\n    exampleApp.setId(applicationId.toString());\r\n    exampleApp.setVersion(\"v1\");\r\n    exampleApp.setName(\"testContainersRecovers\");\r\n    String comp1Name = \"comp1\";\r\n    String comp1InstName = \"comp1-0\";\r\n    org.apache.hadoop.yarn.service.api.records.Component compA = createComponent(comp1Name, 1, \"sleep\");\r\n    exampleApp.addComponent(compA);\r\n    MockServiceAM am = new MockServiceAM(exampleApp);\r\n    ContainerId containerId = am.createContainerId(1);\r\n    am.feedRegistryComponent(containerId, comp1Name, comp1InstName);\r\n    am.init(conf);\r\n    am.start();\r\n    ComponentInstance comp10 = am.getCompInstance(comp1Name, comp1InstName);\r\n    am.feedRecoveredContainer(containerId, comp1Name);\r\n    am.waitForCompInstanceState(comp10, ComponentInstanceState.STARTED);\r\n    Assert.assertEquals(0, am.getComponent(comp1Name).getPendingInstances().size());\r\n    GenericTestUtils.waitFor(() -> am.getCompInstance(comp1Name, comp1InstName).getContainerStatus() != null, 2000, 200000);\r\n    Assert.assertEquals(\"container state\", org.apache.hadoop.yarn.api.records.ContainerState.RUNNING, am.getCompInstance(comp1Name, comp1InstName).getContainerStatus().getState());\r\n    am.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testContainersReleasedWhenExpired",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testContainersReleasedWhenExpired() throws Exception\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    Service exampleApp = new Service();\r\n    exampleApp.setId(applicationId.toString());\r\n    exampleApp.setName(\"testContainersRecovers\");\r\n    exampleApp.setVersion(\"v1\");\r\n    String comp1Name = \"comp1\";\r\n    String comp1InstName = \"comp1-0\";\r\n    org.apache.hadoop.yarn.service.api.records.Component compA = createComponent(comp1Name, 1, \"sleep\");\r\n    exampleApp.addComponent(compA);\r\n    MockServiceAM am = new MockServiceAM(exampleApp);\r\n    ContainerId containerId = am.createContainerId(1);\r\n    am.feedRegistryComponent(containerId, comp1Name, comp1InstName);\r\n    conf.setLong(YarnServiceConf.CONTAINER_RECOVERY_TIMEOUT_MS, 10);\r\n    am.init(conf);\r\n    am.start();\r\n    Thread.sleep(100);\r\n    GenericTestUtils.waitFor(() -> am.getComponent(comp1Name).getState().equals(ComponentState.FLEXING), 100, 2000);\r\n    Assert.assertEquals(1, am.getComponent(comp1Name).getPendingInstances().size());\r\n    am.feedContainerToComp(exampleApp, 2, comp1Name);\r\n    GenericTestUtils.waitFor(() -> am.getCompInstance(comp1Name, comp1InstName).getContainerStatus() != null, 2000, 200000);\r\n    Assert.assertEquals(\"container state\", org.apache.hadoop.yarn.api.records.ContainerState.RUNNING, am.getCompInstance(comp1Name, comp1InstName).getContainerStatus().getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testContainersFromDifferentApp",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testContainersFromDifferentApp() throws Exception\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    Service exampleApp = new Service();\r\n    exampleApp.setId(applicationId.toString());\r\n    exampleApp.setName(\"testContainersFromDifferentApp\");\r\n    exampleApp.setVersion(\"v1\");\r\n    String comp1Name = \"comp1\";\r\n    String comp1InstName = \"comp1-0\";\r\n    org.apache.hadoop.yarn.service.api.records.Component compA = createComponent(comp1Name, 1, \"sleep\");\r\n    exampleApp.addComponent(compA);\r\n    MockServiceAM am = new MockServiceAM(exampleApp);\r\n    ContainerId containerId = am.createContainerId(1);\r\n    am.feedRegistryComponent(containerId, comp1Name, comp1InstName);\r\n    ApplicationId changedAppId = ApplicationId.newInstance(System.currentTimeMillis(), 2);\r\n    exampleApp.setId(changedAppId.toString());\r\n    am.init(conf);\r\n    am.start();\r\n    Assert.assertEquals(1, am.getComponent(comp1Name).getPendingInstances().size());\r\n    am.feedContainerToComp(exampleApp, 1, comp1Name);\r\n    GenericTestUtils.waitFor(() -> am.getCompInstance(comp1Name, comp1InstName).getContainerStatus() != null, 2000, 200000);\r\n    Assert.assertEquals(\"container state\", org.apache.hadoop.yarn.api.records.ContainerState.RUNNING, am.getCompInstance(comp1Name, comp1InstName).getContainerStatus().getState());\r\n    am.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testScheduleWithMultipleResourceTypes",
  "errType" : null,
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testScheduleWithMultipleResourceTypes() throws TimeoutException, InterruptedException, IOException\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(123456, 1);\r\n    Service exampleApp = new Service();\r\n    exampleApp.setId(applicationId.toString());\r\n    exampleApp.setName(\"testScheduleWithMultipleResourceTypes\");\r\n    exampleApp.setVersion(\"v1\");\r\n    List<ResourceTypeInfo> resourceTypeInfos = new ArrayList<>(ResourceUtils.getResourcesTypeInfo());\r\n    resourceTypeInfos.add(ResourceTypeInfo.newInstance(\"resource-1\", \"\", ResourceTypes.COUNTABLE));\r\n    ResourceUtils.reinitializeResources(resourceTypeInfos);\r\n    Component serviceCompoent = createComponent(\"compa\", 1, \"pwd\");\r\n    serviceCompoent.getResource().setResourceInformations(ImmutableMap.of(\"resource-1\", new ResourceInformation().value(3333L).unit(\"Gi\")));\r\n    exampleApp.addComponent(serviceCompoent);\r\n    MockServiceAM am = new MockServiceAM(exampleApp);\r\n    am.init(conf);\r\n    am.start();\r\n    ServiceScheduler serviceScheduler = am.context.scheduler;\r\n    AMRMClientAsync<AMRMClient.ContainerRequest> amrmClientAsync = serviceScheduler.getAmRMClient();\r\n    Collection<AMRMClient.ContainerRequest> rr = amrmClientAsync.getMatchingRequests(0);\r\n    Assert.assertEquals(1, rr.size());\r\n    org.apache.hadoop.yarn.api.records.Resource capability = rr.iterator().next().getCapability();\r\n    Assert.assertEquals(3333L, capability.getResourceValue(\"resource-1\"));\r\n    Assert.assertEquals(\"Gi\", capability.getResourceInformation(\"resource-1\").getUnits());\r\n    am.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testContainerCompletedEventProcessed",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testContainerCompletedEventProcessed() throws Exception\n{\r\n    ServiceContext context = createServiceContext(\"abc\");\r\n    MockServiceScheduler scheduler = new MockServiceScheduler(context);\r\n    scheduler.init(conf);\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId appAttemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId1 = ContainerId.newContainerId(appAttemptId, 0);\r\n    ContainerStatus containerStatus1 = ContainerStatus.newInstance(containerId1, org.apache.hadoop.yarn.api.records.ContainerState.COMPLETE, \"successful\", 0);\r\n    ContainerId containerId2 = ContainerId.newContainerId(appAttemptId, 1);\r\n    ContainerStatus containerStatus2 = ContainerStatus.newInstance(containerId2, org.apache.hadoop.yarn.api.records.ContainerState.COMPLETE, \"successful\", 0);\r\n    ComponentInstance instance = Mockito.mock(ComponentInstance.class);\r\n    Mockito.doReturn(\"componentInstance\").when(instance).getCompName();\r\n    scheduler.addLiveCompInstance(containerId2, instance);\r\n    List<ContainerStatus> statuses = new ArrayList<>();\r\n    statuses.add(containerStatus1);\r\n    scheduler.addLiveCompInstance(containerId2, instance);\r\n    statuses.add(containerStatus2);\r\n    scheduler.callbackHandler.onContainersCompleted(statuses);\r\n    verify(scheduler.dispatcher, times(1)).getEventHandler();\r\n    DefaultMetricsSystem.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createServiceContext",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "ServiceContext createServiceContext(String name) throws Exception\n{\r\n    Artifact artifact = new Artifact();\r\n    artifact.setId(\"1\");\r\n    artifact.setType(Artifact.TypeEnum.TARBALL);\r\n    Service serviceDef = ServiceTestUtils.createExampleApplication();\r\n    ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    serviceDef.setId(applicationId.toString());\r\n    serviceDef.setName(name);\r\n    serviceDef.setState(ServiceState.STARTED);\r\n    serviceDef.getComponents().forEach(component -> component.setArtifact(artifact));\r\n    ServiceContext context = new MockRunningServiceContext(rule, serviceDef);\r\n    context.scheduler.getDispatcher().setDrainEventsOnStop();\r\n    context.scheduler.getDispatcher().start();\r\n    return context;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testRecordTokensForContainers",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testRecordTokensForContainers() throws Exception\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(123456, 1);\r\n    Service exampleApp = new Service();\r\n    exampleApp.setId(applicationId.toString());\r\n    exampleApp.setName(\"testContainerCompleted\");\r\n    exampleApp.addComponent(createComponent(\"compa\", 1, \"pwd\"));\r\n    String json = \"{\\\"auths\\\": \" + \"{\\\"https://index.docker.io/v1/\\\": \" + \"{\\\"auth\\\": \\\"foobarbaz\\\"},\" + \"\\\"registry.example.com\\\": \" + \"{\\\"auth\\\": \\\"bazbarfoo\\\"}}}\";\r\n    File dockerTmpDir = new File(\"target\", \"docker-tmp\");\r\n    FileUtils.deleteQuietly(dockerTmpDir);\r\n    dockerTmpDir.mkdirs();\r\n    String dockerConfig = dockerTmpDir + \"/config.json\";\r\n    BufferedWriter bw = new BufferedWriter(new FileWriter(dockerConfig));\r\n    bw.write(json);\r\n    bw.close();\r\n    Credentials dockerCred = DockerClientConfigHandler.readCredentialsFromConfigFile(new Path(dockerConfig), conf, applicationId.toString());\r\n    MockServiceAM am = new MockServiceAM(exampleApp, dockerCred);\r\n    ByteBuffer amCredBuffer = am.recordTokensForContainers();\r\n    Credentials amCreds = DockerClientConfigHandler.getCredentialsFromTokensByteBuffer(amCredBuffer);\r\n    assertEquals(2, amCreds.numberOfTokens());\r\n    for (Token<? extends TokenIdentifier> tk : amCreds.getAllTokens()) {\r\n        Assert.assertTrue(tk.getKind().equals(DockerCredentialTokenIdentifier.KIND));\r\n    }\r\n    am.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testIPChange",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testIPChange() throws TimeoutException, InterruptedException\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(123456, 1);\r\n    String comp1Name = \"comp1\";\r\n    String comp1InstName = \"comp1-0\";\r\n    Service exampleApp = new Service();\r\n    exampleApp.setId(applicationId.toString());\r\n    exampleApp.setVersion(\"v1\");\r\n    exampleApp.setName(\"testIPChange\");\r\n    Component comp1 = createComponent(comp1Name, 1, \"sleep 60\");\r\n    comp1.setArtifact(new Artifact().type(Artifact.TypeEnum.DOCKER));\r\n    exampleApp.addComponent(comp1);\r\n    MockServiceAM am = new MockServiceAM(exampleApp);\r\n    am.init(conf);\r\n    am.start();\r\n    ComponentInstance comp1inst0 = am.getCompInstance(comp1Name, comp1InstName);\r\n    am.feedContainerToComp(exampleApp, 1, comp1Name);\r\n    GenericTestUtils.waitFor(() -> comp1inst0.getContainerStatus() != null, 2000, 200000);\r\n    Assert.assertEquals(\"localhost\", comp1inst0.getContainerStatus().getHost());\r\n    LOG.info(\"Change the IP and host\");\r\n    am.updateContainerStatus(exampleApp, 1, comp1Name, \"new.host\");\r\n    GenericTestUtils.waitFor(() -> comp1inst0.getContainerStatus().getHost().equals(\"new.host\"), 2000, 200000);\r\n    LOG.info(\"Change the IP and host again\");\r\n    am.updateContainerStatus(exampleApp, 1, comp1Name, \"newer.host\");\r\n    GenericTestUtils.waitFor(() -> comp1inst0.getContainerStatus().getHost().equals(\"newer.host\"), 2000, 200000);\r\n    am.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testContainersReleasedWhenPreLaunchFails",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testContainersReleasedWhenPreLaunchFails() throws Exception\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    Service exampleApp = new Service();\r\n    exampleApp.setId(applicationId.toString());\r\n    exampleApp.setVersion(\"v1\");\r\n    exampleApp.setName(\"testContainersReleasedWhenPreLaunchFails\");\r\n    Component compA = createComponent(\"compa\", 1, \"pwd\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(Artifact.TypeEnum.TARBALL);\r\n    compA.artifact(artifact);\r\n    exampleApp.addComponent(compA);\r\n    MockServiceAM am = new MockServiceAM(exampleApp);\r\n    am.init(conf);\r\n    am.start();\r\n    ContainerId containerId = am.createContainerId(1);\r\n    am.feedContainerToComp(exampleApp, containerId, \"compa\");\r\n    am.waitForContainerToRelease(containerId);\r\n    ComponentInstance compAinst0 = am.getCompInstance(compA.getName(), \"compa-0\");\r\n    GenericTestUtils.waitFor(() -> am.getComponent(compA.getName()).getPendingInstances().contains(compAinst0), 2000, 30000);\r\n    Assert.assertEquals(1, am.getComponent(\"compa\").getPendingInstances().size());\r\n    am.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testSyncSysFS",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testSyncSysFS()\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(System.currentTimeMillis(), 1);\r\n    Service exampleApp = new Service();\r\n    exampleApp.setId(applicationId.toString());\r\n    exampleApp.setVersion(\"v1\");\r\n    exampleApp.setName(\"tensorflow\");\r\n    Component compA = createComponent(\"compa\", 1, \"pwd\");\r\n    compA.getConfiguration().getEnv().put(\"YARN_CONTAINER_RUNTIME_YARN_SYSFS_ENABLE\", \"true\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(Artifact.TypeEnum.TARBALL);\r\n    compA.artifact(artifact);\r\n    exampleApp.addComponent(compA);\r\n    try {\r\n        MockServiceAM am = new MockServiceAM(exampleApp);\r\n        am.init(conf);\r\n        am.start();\r\n        ServiceScheduler scheduler = am.context.scheduler;\r\n        scheduler.syncSysFs(exampleApp);\r\n        scheduler.close();\r\n        am.stop();\r\n        am.close();\r\n    } catch (Exception e) {\r\n        LOG.error(\"Fail to sync sysfs: {}\", e);\r\n        Assert.fail(\"Fail to sync sysfs.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testScheduleWithResourceAttributes",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testScheduleWithResourceAttributes() throws Exception\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(123456, 1);\r\n    Service exampleApp = new Service();\r\n    exampleApp.setId(applicationId.toString());\r\n    exampleApp.setName(\"testScheduleWithResourceAttributes\");\r\n    exampleApp.setVersion(\"v1\");\r\n    List<ResourceTypeInfo> resourceTypeInfos = new ArrayList<>(ResourceUtils.getResourcesTypeInfo());\r\n    resourceTypeInfos.add(ResourceTypeInfo.newInstance(\"test-resource\", \"\", ResourceTypes.COUNTABLE));\r\n    ResourceUtils.reinitializeResources(resourceTypeInfos);\r\n    Component serviceCompoent = createComponent(\"compa\", 1, \"pwd\");\r\n    serviceCompoent.getResource().setResourceInformations(ImmutableMap.of(\"test-resource\", new ResourceInformation().value(1234L).unit(\"Gi\").attributes(ImmutableMap.of(\"k1\", \"v1\", \"k2\", \"v2\"))));\r\n    exampleApp.addComponent(serviceCompoent);\r\n    MockServiceAM am = new MockServiceAM(exampleApp);\r\n    am.init(conf);\r\n    am.start();\r\n    ServiceScheduler serviceScheduler = am.context.scheduler;\r\n    AMRMClientAsync<AMRMClient.ContainerRequest> amrmClientAsync = serviceScheduler.getAmRMClient();\r\n    Collection<AMRMClient.ContainerRequest> rr = amrmClientAsync.getMatchingRequests(0);\r\n    Assert.assertEquals(1, rr.size());\r\n    org.apache.hadoop.yarn.api.records.Resource capability = rr.iterator().next().getCapability();\r\n    Assert.assertEquals(1234L, capability.getResourceValue(\"test-resource\"));\r\n    Assert.assertEquals(\"Gi\", capability.getResourceInformation(\"test-resource\").getUnits());\r\n    Assert.assertEquals(2, capability.getResourceInformation(\"test-resource\").getAttributes().size());\r\n    am.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void init()\n{\r\n    CONF_DNS_ENABLED.setBoolean(RegistryConstants.KEY_DNS_ENABLED, true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testResourceValidation",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 52,
  "sourceCodeText" : "void testResourceValidation() throws Exception\n{\r\n    assertEquals(RegistryConstants.MAX_FQDN_LABEL_LENGTH + 1, LEN_64_STR.length());\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs();\r\n    Service app = new Service();\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with no name\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(ERROR_APPLICATION_NAME_INVALID, e.getMessage());\r\n    }\r\n    app.setName(\"test\");\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \" service with no version\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(String.format(ERROR_APPLICATION_VERSION_INVALID, app.getName()), e.getMessage());\r\n    }\r\n    app.setVersion(\"v1\");\r\n    String[] badNames = { \"4finance\", \"Finance\", \"finance@home\", LEN_64_STR };\r\n    for (String badName : badNames) {\r\n        app.setName(badName);\r\n        try {\r\n            ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n            Assert.fail(EXCEPTION_PREFIX + \"service with bad name \" + badName);\r\n        } catch (IllegalArgumentException e) {\r\n        }\r\n    }\r\n    app.setName(LEN_64_STR);\r\n    Component comp = new Component().name(\"comp1\");\r\n    app.addComponent(comp);\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DEFAULT_DNS);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with no launch command\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(RestApiErrorMessages.ERROR_ABSENT_LAUNCH_COMMAND, e.getMessage());\r\n    }\r\n    app.setName(LEN_64_STR.substring(0, RegistryConstants.MAX_FQDN_LABEL_LENGTH));\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with no launch command\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(RestApiErrorMessages.ERROR_ABSENT_LAUNCH_COMMAND, e.getMessage());\r\n    }\r\n    comp.setLaunchCommand(\"sleep 1\");\r\n    Resource res = new Resource();\r\n    app.setResource(res);\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with no memory\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(String.format(RestApiErrorMessages.ERROR_RESOURCE_MEMORY_FOR_COMP_INVALID, comp.getName()), e.getMessage());\r\n    }\r\n    res.setMemory(\"100mb\");\r\n    res.setCpus(-2);\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with invalid no of cpus\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(String.format(RestApiErrorMessages.ERROR_RESOURCE_CPUS_FOR_COMP_INVALID_RANGE, comp.getName()), e.getMessage());\r\n    }\r\n    res.setCpus(2);\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with no container count\");\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.assertTrue(e.getMessage().contains(ERROR_CONTAINERS_COUNT_INVALID));\r\n    }\r\n    res.setProfile(\"hbase_finance_large\");\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with resource profile along with cpus/memory\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(String.format(RestApiErrorMessages.ERROR_RESOURCE_PROFILE_MULTIPLE_VALUES_FOR_COMP_NOT_SUPPORTED, comp.getName()), e.getMessage());\r\n    }\r\n    res.setCpus(null);\r\n    res.setMemory(null);\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with resource profile only\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(ERROR_RESOURCE_PROFILE_NOT_SUPPORTED_YET, e.getMessage());\r\n    }\r\n    res.setProfile(null);\r\n    res.setCpus(2);\r\n    res.setMemory(\"2gb\");\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"null number of containers\");\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(ERROR_CONTAINERS_COUNT_INVALID));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 11,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testArtifacts",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testArtifacts() throws IOException\n{\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs();\r\n    Service app = new Service();\r\n    app.setName(\"service1\");\r\n    app.setVersion(\"v1\");\r\n    Resource res = new Resource();\r\n    app.setResource(res);\r\n    res.setMemory(\"512M\");\r\n    Artifact artifact = new Artifact();\r\n    app.setArtifact(artifact);\r\n    String compName = \"comp1\";\r\n    Component comp = ServiceTestUtils.createComponent(compName);\r\n    app.setComponents(Collections.singletonList(comp));\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with no artifact id\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(String.format(ERROR_ARTIFACT_ID_FOR_COMP_INVALID, compName), e.getMessage());\r\n    }\r\n    artifact.setType(Artifact.TypeEnum.SERVICE);\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with no artifact id\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(ERROR_ARTIFACT_ID_INVALID, e.getMessage());\r\n    }\r\n    artifact.setType(Artifact.TypeEnum.TARBALL);\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with no artifact id\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(String.format(ERROR_ARTIFACT_ID_FOR_COMP_INVALID, compName), e.getMessage());\r\n    }\r\n    artifact.setType(Artifact.TypeEnum.DOCKER);\r\n    artifact.setId(\"docker.io/centos:centos7\");\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n    } catch (IllegalArgumentException e) {\r\n        LOG.error(\"service attributes specified should be valid here\", e);\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n    assertThat(app.getLifetime()).isEqualTo(DEFAULT_UNLIMITED_LIFETIME);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createValidResource",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Resource createValidResource()\n{\r\n    Resource res = new Resource();\r\n    res.setMemory(\"512M\");\r\n    return res;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createValidComponent",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Component createValidComponent(String compName)\n{\r\n    Component comp = new Component();\r\n    comp.setName(compName);\r\n    comp.setResource(createValidResource());\r\n    comp.setNumberOfContainers(1L);\r\n    comp.setLaunchCommand(\"sleep 1\");\r\n    return comp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createValidApplication",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Service createValidApplication(String compName)\n{\r\n    Service app = new Service();\r\n    app.setName(\"name\");\r\n    app.setVersion(\"v1\");\r\n    app.setResource(createValidResource());\r\n    if (compName != null) {\r\n        app.addComponent(createValidComponent(compName));\r\n    }\r\n    return app;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testExternalApplication",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testExternalApplication() throws IOException\n{\r\n    Service ext = createValidApplication(\"comp1\");\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs(ext);\r\n    Service app = createValidApplication(null);\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(Artifact.TypeEnum.SERVICE);\r\n    artifact.setId(\"id\");\r\n    app.setArtifact(artifact);\r\n    app.addComponent(ServiceTestUtils.createComponent(\"comp2\"));\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n    assertEquals(1, app.getComponents().size());\r\n    assertNotNull(app.getComponent(\"comp2\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testDuplicateComponents",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testDuplicateComponents() throws IOException\n{\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs();\r\n    String compName = \"comp1\";\r\n    Service app = createValidApplication(compName);\r\n    app.addComponent(createValidComponent(compName));\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with component collision\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(\"Component name collision: \" + compName, e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testComponentNameSameAsServiceName",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testComponentNameSameAsServiceName() throws IOException\n{\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs();\r\n    Service app = new Service();\r\n    app.setName(\"test\");\r\n    app.setVersion(\"v1\");\r\n    app.addComponent(createValidComponent(\"test\"));\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"component name matches service name\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(\"Component name test must not be same as service name test\", e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testExternalDuplicateComponent",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testExternalDuplicateComponent() throws IOException\n{\r\n    Service ext = createValidApplication(\"comp1\");\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs(ext);\r\n    Service app = createValidApplication(\"comp1\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(Artifact.TypeEnum.SERVICE);\r\n    artifact.setId(\"id\");\r\n    app.getComponent(\"comp1\").setArtifact(artifact);\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testExternalComponent",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testExternalComponent() throws IOException\n{\r\n    Service ext = createValidApplication(\"comp1\");\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs(ext);\r\n    Service app = createValidApplication(\"comp2\");\r\n    Artifact artifact = new Artifact();\r\n    artifact.setType(Artifact.TypeEnum.SERVICE);\r\n    artifact.setId(\"id\");\r\n    app.setArtifact(artifact);\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n    assertEquals(1, app.getComponents().size());\r\n    assertNotNull(app.getComponent(\"comp2\"));\r\n    app.getComponent(\"comp2\").setArtifact(artifact);\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n    assertEquals(1, app.getComponents().size());\r\n    assertNotNull(app.getComponent(\"comp1\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "verifyDependencySorting",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void verifyDependencySorting(List<Component> components, Component... expectedSorting)\n{\r\n    Collection<Component> actualSorting = ServiceApiUtil.sortByDependencies(components);\r\n    assertEquals(expectedSorting.length, actualSorting.size());\r\n    int i = 0;\r\n    for (Component component : actualSorting) {\r\n        assertEquals(expectedSorting[i++], component);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testDependencySorting",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 19,
  "sourceCodeText" : "void testDependencySorting() throws IOException\n{\r\n    Component a = ServiceTestUtils.createComponent(\"a\");\r\n    Component b = ServiceTestUtils.createComponent(\"b\");\r\n    Component c = ServiceTestUtils.createComponent(\"c\");\r\n    Component d = ServiceTestUtils.createComponent(\"d\").dependencies(Arrays.asList(\"c\"));\r\n    Component e = ServiceTestUtils.createComponent(\"e\").dependencies(Arrays.asList(\"b\", \"d\"));\r\n    verifyDependencySorting(Arrays.asList(a, b, c), a, b, c);\r\n    verifyDependencySorting(Arrays.asList(c, a, b), c, a, b);\r\n    verifyDependencySorting(Arrays.asList(a, b, c, d, e), a, b, c, d, e);\r\n    verifyDependencySorting(Arrays.asList(e, d, c, b, a), c, b, a, d, e);\r\n    c.setDependencies(Arrays.asList(\"e\"));\r\n    try {\r\n        verifyDependencySorting(Arrays.asList(a, b, c, d, e));\r\n        Assert.fail(EXCEPTION_PREFIX + \"components with dependency cycle\");\r\n    } catch (IllegalArgumentException ex) {\r\n        assertEquals(String.format(RestApiErrorMessages.ERROR_DEPENDENCY_CYCLE, Arrays.asList(c, d, e)), ex.getMessage());\r\n    }\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs();\r\n    Service service = createValidApplication(null);\r\n    service.setComponents(Arrays.asList(c, d, e));\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(service, sfs, CONF_DEFAULT_DNS);\r\n        Assert.fail(EXCEPTION_PREFIX + \"components with bad dependencies\");\r\n    } catch (IllegalArgumentException ex) {\r\n        assertEquals(String.format(RestApiErrorMessages.ERROR_DEPENDENCY_INVALID, \"b\", \"e\"), ex.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testInvalidComponent",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testInvalidComponent() throws IOException\n{\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs();\r\n    testComponent(sfs);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testValidateCompName",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testValidateCompName()\n{\r\n    String[] invalidNames = { \"EXAMPLE\", \"example_app\" };\r\n    for (String name : invalidNames) {\r\n        try {\r\n            ServiceApiUtil.validateNameFormat(name, new Configuration());\r\n            Assert.fail();\r\n        } catch (IllegalArgumentException ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testComponent",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testComponent(SliderFileSystem sfs) throws IOException\n{\r\n    int maxLen = RegistryConstants.MAX_FQDN_LABEL_LENGTH;\r\n    assertEquals(19, Long.toString(Long.MAX_VALUE).length());\r\n    maxLen = maxLen - Long.toString(Long.MAX_VALUE).length();\r\n    String compName = LEN_64_STR.substring(0, maxLen + 1);\r\n    Service app = createValidApplication(null);\r\n    app.addComponent(createValidComponent(compName));\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with invalid component name\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(String.format(RestApiErrorMessages.ERROR_COMPONENT_NAME_INVALID, maxLen, compName), e.getMessage());\r\n    }\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DEFAULT_DNS);\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n    compName = LEN_64_STR.substring(0, maxLen);\r\n    app = createValidApplication(null);\r\n    app.addComponent(createValidComponent(compName));\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testPlacementPolicy",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testPlacementPolicy() throws IOException\n{\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs();\r\n    Service app = createValidApplication(\"comp-a\");\r\n    Component comp = app.getComponents().get(0);\r\n    PlacementPolicy pp = new PlacementPolicy();\r\n    PlacementConstraint pc = new PlacementConstraint();\r\n    pc.setName(\"CA1\");\r\n    pp.setConstraints(Collections.singletonList(pc));\r\n    comp.setPlacementPolicy(pp);\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"constraint with no type\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(String.format(RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_TYPE_NULL, \"CA1 \", \"comp-a\"), e.getMessage());\r\n    }\r\n    pc.setType(PlacementType.ANTI_AFFINITY);\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n        Assert.fail(EXCEPTION_PREFIX + \"constraint with no scope\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(String.format(RestApiErrorMessages.ERROR_PLACEMENT_POLICY_CONSTRAINT_SCOPE_NULL, \"CA1 \", \"comp-a\"), e.getMessage());\r\n    }\r\n    pc.setScope(PlacementScope.NODE);\r\n    pc.setTargetTags(Collections.singletonList(\"comp-a\"));\r\n    try {\r\n        ServiceApiUtil.validateAndResolveService(app, sfs, CONF_DNS_ENABLED);\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testKerberosPrincipal",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testKerberosPrincipal() throws IOException\n{\r\n    SliderFileSystem sfs = ServiceTestUtils.initMockFs();\r\n    Service app = createValidApplication(\"comp-a\");\r\n    KerberosPrincipal kp = new KerberosPrincipal();\r\n    kp.setKeytab(\"file:///tmp/a.keytab\");\r\n    kp.setPrincipalName(\"user/_HOST@domain.com\");\r\n    app.setKerberosPrincipal(kp);\r\n    try {\r\n        ServiceApiUtil.validateKerberosPrincipal(app.getKerberosPrincipal());\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n    kp.setKeytab(\"/some/path\");\r\n    try {\r\n        ServiceApiUtil.validateKerberosPrincipal(app.getKerberosPrincipal());\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testKerberosPrincipalNameFormat",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException", "NullPointerException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testKerberosPrincipalNameFormat() throws IOException\n{\r\n    Service app = createValidApplication(\"comp-a\");\r\n    KerberosPrincipal kp = new KerberosPrincipal();\r\n    kp.setPrincipalName(\"user@domain.com\");\r\n    app.setKerberosPrincipal(kp);\r\n    try {\r\n        ServiceApiUtil.validateKerberosPrincipal(app.getKerberosPrincipal());\r\n        Assert.fail(EXCEPTION_PREFIX + \"service with invalid principal name \" + \"format.\");\r\n    } catch (IllegalArgumentException e) {\r\n        assertEquals(String.format(RestApiErrorMessages.ERROR_KERBEROS_PRINCIPAL_NAME_FORMAT, kp.getPrincipalName()), e.getMessage());\r\n    }\r\n    kp.setPrincipalName(\"user/_HOST@domain.com\");\r\n    try {\r\n        ServiceApiUtil.validateKerberosPrincipal(app.getKerberosPrincipal());\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n    kp.setPrincipalName(null);\r\n    kp.setKeytab(null);\r\n    try {\r\n        ServiceApiUtil.validateKerberosPrincipal(app.getKerberosPrincipal());\r\n    } catch (NullPointerException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testResolveCompsDependency",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testResolveCompsDependency()\n{\r\n    Service service = createExampleApplication();\r\n    List<String> dependencies = new ArrayList<String>();\r\n    dependencies.add(\"compb\");\r\n    Component compa = createComponent(\"compa\");\r\n    compa.setDependencies(dependencies);\r\n    Component compb = createComponent(\"compb\");\r\n    service.addComponent(compa);\r\n    service.addComponent(compb);\r\n    List<String> order = ServiceApiUtil.resolveCompsDependency(service);\r\n    List<String> expected = new ArrayList<String>();\r\n    expected.add(\"compb\");\r\n    expected.add(\"compa\");\r\n    for (int i = 0; i < expected.size(); i++) {\r\n        Assert.assertEquals(\"Components are not equal.\", expected.get(i), order.get(i));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testResolveCompsDependencyReversed",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testResolveCompsDependencyReversed()\n{\r\n    Service service = createExampleApplication();\r\n    List<String> dependencies = new ArrayList<String>();\r\n    dependencies.add(\"compa\");\r\n    Component compa = createComponent(\"compa\");\r\n    Component compb = createComponent(\"compb\");\r\n    compb.setDependencies(dependencies);\r\n    service.addComponent(compa);\r\n    service.addComponent(compb);\r\n    List<String> order = ServiceApiUtil.resolveCompsDependency(service);\r\n    List<String> expected = new ArrayList<String>();\r\n    expected.add(\"compa\");\r\n    expected.add(\"compb\");\r\n    for (int i = 0; i < expected.size(); i++) {\r\n        Assert.assertEquals(\"Components are not equal.\", expected.get(i), order.get(i));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testResolveCompsCircularDependency",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testResolveCompsCircularDependency()\n{\r\n    Service service = createExampleApplication();\r\n    List<String> dependencies = new ArrayList<String>();\r\n    List<String> dependencies2 = new ArrayList<String>();\r\n    dependencies.add(\"compb\");\r\n    dependencies2.add(\"compa\");\r\n    Component compa = createComponent(\"compa\");\r\n    compa.setDependencies(dependencies);\r\n    Component compb = createComponent(\"compb\");\r\n    compa.setDependencies(dependencies2);\r\n    service.addComponent(compa);\r\n    service.addComponent(compb);\r\n    List<String> order = ServiceApiUtil.resolveCompsDependency(service);\r\n    List<String> expected = new ArrayList<String>();\r\n    expected.add(\"compa\");\r\n    expected.add(\"compb\");\r\n    for (int i = 0; i < expected.size(); i++) {\r\n        Assert.assertEquals(\"Components are not equal.\", expected.get(i), order.get(i));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testResolveNoCompsDependency",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testResolveNoCompsDependency()\n{\r\n    Service service = createExampleApplication();\r\n    Component compa = createComponent(\"compa\");\r\n    Component compb = createComponent(\"compb\");\r\n    service.addComponent(compa);\r\n    service.addComponent(compb);\r\n    List<String> order = ServiceApiUtil.resolveCompsDependency(service);\r\n    List<String> expected = new ArrayList<String>();\r\n    expected.add(\"compa\");\r\n    expected.add(\"compb\");\r\n    for (int i = 0; i < expected.size(); i++) {\r\n        Assert.assertEquals(\"Components are not equal.\", expected.get(i), order.get(i));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testNoServiceDependencies",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testNoServiceDependencies()\n{\r\n    Service service = createExampleApplication();\r\n    Component compa = createComponent(\"compa\");\r\n    Component compb = createComponent(\"compb\");\r\n    service.addComponent(compa);\r\n    service.addComponent(compb);\r\n    List<String> dependencies = new ArrayList<String>();\r\n    service.setDependencies(dependencies);\r\n    ServiceApiUtil.checkServiceDependencySatisified(service);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testServiceDependencies",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testServiceDependencies()\n{\r\n    Thread thread = new Thread() {\r\n\r\n        @Override\r\n        public void run() {\r\n            Service service = createExampleApplication();\r\n            Component compa = createComponent(\"compa\");\r\n            Component compb = createComponent(\"compb\");\r\n            service.addComponent(compa);\r\n            service.addComponent(compb);\r\n            List<String> dependencies = new ArrayList<String>();\r\n            dependencies.add(\"abc\");\r\n            service.setDependencies(dependencies);\r\n            Service dependent = createExampleApplication();\r\n            dependent.setState(ServiceState.STOPPED);\r\n            ServiceApiUtil.checkServiceDependencySatisified(service);\r\n        }\r\n    };\r\n    thread.start();\r\n    try {\r\n        Thread.sleep(1000);\r\n    } catch (InterruptedException e) {\r\n    }\r\n    Assert.assertTrue(thread.isAlive());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testJvmOpts",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testJvmOpts() throws Exception\n{\r\n    String invalidJvmOpts = \"`ping -c 3 example.com`\";\r\n    intercept(IllegalArgumentException.class, \"Invalid character in yarn.service.am.java.opts.\", () -> ServiceApiUtil.validateJvmOpts(invalidJvmOpts));\r\n    String validJvmOpts = \"-Dyarn.service.am.java.opts=-Xmx768m \" + \"-Djava.security.auth.login.config=/opt/hadoop/etc/jaas-zk.conf\";\r\n    try {\r\n        ServiceApiUtil.validateJvmOpts(validJvmOpts);\r\n    } catch (Exception ex) {\r\n        fail(\"Invalid character in yarn.service.am.java.opts.\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "createExampleApplication",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Service createExampleApplication()\n{\r\n    Service exampleApp = new Service();\r\n    exampleApp.setName(\"example-app\");\r\n    exampleApp.setVersion(\"v1\");\r\n    return exampleApp;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "data",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "Collection<Object[]> data()\n{\r\n    Probe p1 = MonitorUtils.getProbe(null);\r\n    ReadinessCheck rc2 = new ReadinessCheck().type(ReadinessCheck.TypeEnum.DEFAULT).properties(Collections.singletonMap(MonitorKeys.DEFAULT_PROBE_DNS_CHECK_ENABLED, \"true\"));\r\n    Probe p2 = MonitorUtils.getProbe(rc2);\r\n    Map<String, String> props = new HashMap<>();\r\n    props.put(MonitorKeys.DEFAULT_PROBE_DNS_CHECK_ENABLED, \"true\");\r\n    props.put(MonitorKeys.DEFAULT_PROBE_DNS_ADDRESS, \"8.8.8.8\");\r\n    ReadinessCheck rc3 = new ReadinessCheck().type(ReadinessCheck.TypeEnum.DEFAULT).properties(props);\r\n    Probe p3 = MonitorUtils.getProbe(rc3);\r\n    return Arrays.asList(new Object[][] { { p1 }, { p2 }, { p3 } });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "testDefaultProbe",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testDefaultProbe()\n{\r\n    ComponentInstance componentInstance = createMockComponentInstance(\"example.com\");\r\n    checkPingResults(probe, componentInstance, false);\r\n    componentInstance = createMockComponentInstance(\"bad.dns.test\");\r\n    checkPingResults(probe, componentInstance, probe.isDnsCheckEnabled());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "checkPingResults",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void checkPingResults(Probe probe, ComponentInstance componentInstance, boolean expectDNSCheckFailure)\n{\r\n    ProbeStatus probeStatus = probe.ping(componentInstance);\r\n    assertFalse(\"Expected failure for \" + probeStatus.toString(), probeStatus.isSuccess());\r\n    assertTrue(\"Expected IP failure for \" + probeStatus.toString(), probeStatus.toString().contains(componentInstance.getCompInstanceName() + \": IP is not available yet\"));\r\n    probeStatus = probe.ping(componentInstance);\r\n    assertFalse(\"Expected failure for \" + probeStatus.toString(), probeStatus.isSuccess());\r\n    assertTrue(\"Expected IP failure for \" + probeStatus.toString(), probeStatus.toString().contains(componentInstance.getCompInstanceName() + \": IP is not available yet\"));\r\n    probeStatus = probe.ping(componentInstance);\r\n    if (expectDNSCheckFailure) {\r\n        assertFalse(\"Expected failure for \" + probeStatus.toString(), probeStatus.isSuccess());\r\n        assertTrue(\"Expected DNS failure for \" + probeStatus.toString(), probeStatus.toString().contains(componentInstance.getCompInstanceName() + \": DNS checking is enabled, but lookup\" + \" for \" + componentInstance.getHostname() + \" is not available \" + \"yet\"));\r\n    } else {\r\n        assertTrue(\"Expected success for \" + probeStatus.toString(), probeStatus.isSuccess());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\monitor\\probe",
  "methodName" : "createMockComponentInstance",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ComponentInstance createMockComponentInstance(String hostname)\n{\r\n    ComponentInstance componentInstance = mock(ComponentInstance.class);\r\n    when(componentInstance.getHostname()).thenReturn(hostname);\r\n    when(componentInstance.getCompInstanceName()).thenReturn(\"comp-0\");\r\n    when(componentInstance.getContainerStatus()).thenAnswer(new Answer<ContainerStatus>() {\r\n\r\n        private int count = 0;\r\n\r\n        @Override\r\n        public ContainerStatus answer(InvocationOnMock invocationOnMock) {\r\n            count++;\r\n            if (count == 1) {\r\n                return null;\r\n            } else if (count == 2) {\r\n                ContainerStatus containerStatus = mock(ContainerStatus.class);\r\n                when(containerStatus.getIPs()).thenReturn(null);\r\n                return containerStatus;\r\n            } else {\r\n                ContainerStatus containerStatus = mock(ContainerStatus.class);\r\n                when(containerStatus.getIPs()).thenReturn(Collections.singletonList(\"1.2.3.4\"));\r\n                return containerStatus;\r\n            }\r\n        }\r\n    });\r\n    return componentInstance;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testNoFilter",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testNoFilter() throws Exception\n{\r\n    GetCompInstancesRequestProto req = GetCompInstancesRequestProto.newBuilder().build();\r\n    List<ComponentContainers> compContainers = FilterUtils.filterInstances(new MockRunningServiceContext(rule, TestServiceManager.createBaseDef(\"service\")), req);\r\n    Assert.assertEquals(\"num comps\", 2, compContainers.size());\r\n    compContainers.forEach(item -> {\r\n        Assert.assertEquals(\"num containers\", 2, item.getContainers().size());\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testFilterWithComp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testFilterWithComp() throws Exception\n{\r\n    GetCompInstancesRequestProto req = GetCompInstancesRequestProto.newBuilder().addAllComponentNames(Lists.newArrayList(\"compa\")).build();\r\n    List<ComponentContainers> compContainers = FilterUtils.filterInstances(new MockRunningServiceContext(rule, TestServiceManager.createBaseDef(\"service\")), req);\r\n    Assert.assertEquals(\"num comps\", 1, compContainers.size());\r\n    Assert.assertEquals(\"comp name\", \"compa\", compContainers.get(0).getComponentName());\r\n    Assert.assertEquals(\"num containers\", 2, compContainers.get(0).getContainers().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testFilterWithVersion",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testFilterWithVersion() throws Exception\n{\r\n    ServiceContext sc = new MockRunningServiceContext(rule, TestServiceManager.createBaseDef(\"service\"));\r\n    GetCompInstancesRequestProto.Builder reqBuilder = GetCompInstancesRequestProto.newBuilder();\r\n    reqBuilder.setVersion(\"v2\");\r\n    Assert.assertEquals(\"num comps\", 0, FilterUtils.filterInstances(sc, reqBuilder.build()).size());\r\n    reqBuilder.addAllComponentNames(Lists.newArrayList(\"compa\")).setVersion(\"v1\").build();\r\n    Assert.assertEquals(\"num containers\", 2, FilterUtils.filterInstances(sc, reqBuilder.build()).get(0).getContainers().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testFilterWithState",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testFilterWithState() throws Exception\n{\r\n    ServiceContext sc = new MockRunningServiceContext(rule, TestServiceManager.createBaseDef(\"service\"));\r\n    GetCompInstancesRequestProto.Builder reqBuilder = GetCompInstancesRequestProto.newBuilder();\r\n    reqBuilder.addAllContainerStates(Lists.newArrayList(ContainerState.READY.toString()));\r\n    List<ComponentContainers> compContainers = FilterUtils.filterInstances(sc, reqBuilder.build());\r\n    Assert.assertEquals(\"num comps\", 2, compContainers.size());\r\n    compContainers.forEach(item -> {\r\n        Assert.assertEquals(\"num containers\", 2, item.getContainers().size());\r\n    });\r\n    reqBuilder.clearContainerStates();\r\n    reqBuilder.addAllContainerStates(Lists.newArrayList(ContainerState.STOPPED.toString()));\r\n    Assert.assertEquals(\"num comps\", 0, FilterUtils.filterInstances(sc, reqBuilder.build()).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testServiceArtifactChange",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testServiceArtifactChange()\n{\r\n    Service currentDef = ServiceTestUtils.createExampleApplication();\r\n    Service targetDef = ServiceTestUtils.createExampleApplication();\r\n    targetDef.getComponents().forEach(x -> x.setArtifact(TestServiceManager.createTestArtifact(\"v1\")));\r\n    assertEquals(\"all components need upgrade\", targetDef.getComponents(), finder.findTargetComponentSpecs(currentDef, targetDef));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testServiceUpgradeWithNewComponentAddition",
  "errType" : [ "UnsupportedOperationException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testServiceUpgradeWithNewComponentAddition()\n{\r\n    Service currentDef = ServiceTestUtils.createExampleApplication();\r\n    Service targetDef = ServiceTestUtils.createExampleApplication();\r\n    Iterator<Component> targetComponentsIter = targetDef.getComponents().iterator();\r\n    Component firstComponent = targetComponentsIter.next();\r\n    firstComponent.setName(\"newComponentA\");\r\n    try {\r\n        finder.findTargetComponentSpecs(currentDef, targetDef);\r\n        Assert.fail(\"Expected error since component does not exist in service \" + \"definition\");\r\n    } catch (UnsupportedOperationException usoe) {\r\n        assertEquals(\"addition/deletion of components not supported by upgrade. Could \" + \"not find component newComponentA in current service \" + \"definition.\", usoe.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testComponentArtifactChange",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testComponentArtifactChange()\n{\r\n    Service currentDef = TestServiceManager.createBaseDef(\"test\");\r\n    Service targetDef = TestServiceManager.createBaseDef(\"test\");\r\n    targetDef.getComponents().get(0).setArtifact(TestServiceManager.createTestArtifact(\"v2\"));\r\n    List<Component> expected = new ArrayList<>();\r\n    expected.add(targetDef.getComponents().get(0));\r\n    assertEquals(\"single components needs upgrade\", expected, finder.findTargetComponentSpecs(currentDef, targetDef));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testChangeInConfigFileProperty",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testChangeInConfigFileProperty()\n{\r\n    ConfigFile file = new ConfigFile().srcFile(\"src\").destFile(\"dest\").type(ConfigFile.TypeEnum.HADOOP_XML);\r\n    Map<String, String> props = new HashMap<>();\r\n    props.put(\"k1\", \"v1\");\r\n    file.setProperties(props);\r\n    Configuration conf = new Configuration().files(Lists.newArrayList(file));\r\n    Service currentDef = TestServiceManager.createBaseDef(\"test\");\r\n    currentDef.setConfiguration(conf);\r\n    file = new ConfigFile().srcFile(\"src\").destFile(\"dest\").type(ConfigFile.TypeEnum.HADOOP_XML);\r\n    Map<String, String> changedProps = new HashMap<>();\r\n    changedProps.put(\"k1\", \"v2\");\r\n    file.setProperties(changedProps);\r\n    conf = new Configuration().files(Lists.newArrayList(file));\r\n    Service targetDef = TestServiceManager.createBaseDef(\"test\");\r\n    targetDef.setConfiguration(conf);\r\n    List<Component> expected = new ArrayList<>();\r\n    expected.addAll(targetDef.getComponents());\r\n    assertEquals(\"all components needs upgrade\", expected, finder.findTargetComponentSpecs(currentDef, targetDef));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\providers",
  "methodName" : "testConfigFiles",
  "errType" : [ "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException", "IllegalArgumentException" ],
  "containingMethodsNum" : 49,
  "sourceCodeText" : "void testConfigFiles() throws IOException\n{\r\n    ClientProvider clientProvider = new ClientProvider();\r\n    FileSystem mockFs = mock(FileSystem.class);\r\n    FileStatus mockFileStatus = mock(FileStatus.class);\r\n    when(mockFs.exists(any())).thenReturn(true);\r\n    String compName = \"sleeper\";\r\n    ConfigFile configFile = new ConfigFile();\r\n    List<ConfigFile> configFiles = new ArrayList<>();\r\n    configFiles.add(configFile);\r\n    try {\r\n        clientProvider.validateConfigFiles(configFiles, compName, mockFs);\r\n        Assert.fail(EXCEPTION_PREFIX + \"null file type\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n    configFile.setType(ConfigFile.TypeEnum.TEMPLATE);\r\n    try {\r\n        clientProvider.validateConfigFiles(configFiles, compName, mockFs);\r\n        Assert.fail(EXCEPTION_PREFIX + \"empty src_file for type template\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n    configFile.setSrcFile(\"srcfile\");\r\n    try {\r\n        clientProvider.validateConfigFiles(configFiles, compName, mockFs);\r\n        Assert.fail(EXCEPTION_PREFIX + \"empty dest file\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n    configFile.setDestFile(\"destfile\");\r\n    try {\r\n        clientProvider.validateConfigFiles(configFiles, compName, mockFs);\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n    configFile = new ConfigFile();\r\n    configFile.setType(ConfigFile.TypeEnum.JSON);\r\n    configFile.setSrcFile(null);\r\n    configFile.setDestFile(\"path/destfile2\");\r\n    configFiles.add(configFile);\r\n    try {\r\n        clientProvider.validateConfigFiles(configFiles, compName, mockFs);\r\n        Assert.fail(EXCEPTION_PREFIX + \"dest file with multiple path elements\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n    configFile.setDestFile(\"/path/destfile2\");\r\n    try {\r\n        clientProvider.validateConfigFiles(configFiles, compName, mockFs);\r\n    } catch (IllegalArgumentException e) {\r\n        Assert.fail(NO_EXCEPTION_PREFIX + e.getMessage());\r\n    }\r\n    configFile.setDestFile(\"destfile\");\r\n    try {\r\n        clientProvider.validateConfigFiles(configFiles, compName, mockFs);\r\n        Assert.fail(EXCEPTION_PREFIX + \"duplicate dest file\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n    configFiles.clear();\r\n    configFile = new ConfigFile();\r\n    configFile.setType(ConfigFile.TypeEnum.STATIC);\r\n    configFile.setSrcFile(null);\r\n    configFile.setDestFile(\"path/destfile3\");\r\n    configFiles.add(configFile);\r\n    try {\r\n        clientProvider.validateConfigFiles(configFiles, compName, mockFs);\r\n        Assert.fail(EXCEPTION_PREFIX + \"dest file with multiple path elements\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n    configFile.setDestFile(\"/path/destfile3\");\r\n    try {\r\n        clientProvider.validateConfigFiles(configFiles, compName, mockFs);\r\n        Assert.fail(EXCEPTION_PREFIX + \"src file should be specified\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n    configFile.setSrcFile(\"srcFile\");\r\n    configFile.setDestFile(\"destfile3\");\r\n    clientProvider.validateConfigFiles(configFiles, compName, mockFs);\r\n    when(mockFileStatus.isDirectory()).thenReturn(true);\r\n    when(mockFs.getFileStatus(new Path(\"srcFile\"))).thenReturn(mockFileStatus).thenReturn(mockFileStatus);\r\n    configFiles.clear();\r\n    configFile = new ConfigFile();\r\n    configFile.setType(ConfigFile.TypeEnum.STATIC);\r\n    configFile.setSrcFile(\"srcFile\");\r\n    configFile.setDestFile(\"destfile3\");\r\n    configFiles.add(configFile);\r\n    try {\r\n        clientProvider.validateConfigFiles(configFiles, compName, mockFs);\r\n        Assert.fail(EXCEPTION_PREFIX + \"src file is a directory\");\r\n    } catch (IllegalArgumentException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 10,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\utils",
  "methodName" : "testClusterUpgradeDirPath",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testClusterUpgradeDirPath()\n{\r\n    String serviceName = \"testClusterUpgrade\";\r\n    String version = \"v1\";\r\n    Path expectedPath = new Path(rule.getFs().buildClusterDirPath(serviceName), YarnServiceConstants.UPGRADE_DIR + \"/\" + version);\r\n    Assert.assertEquals(\"incorrect upgrade path\", expectedPath, rule.getFs().buildClusterUpgradeDirPath(serviceName, version));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testComponentUpgrade",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testComponentUpgrade() throws Exception\n{\r\n    ServiceContext context = createTestContext(rule, \"testComponentUpgrade\");\r\n    Component comp = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    ComponentEvent upgradeEvent = new ComponentEvent(comp.getName(), ComponentEventType.UPGRADE);\r\n    comp.handle(upgradeEvent);\r\n    Assert.assertEquals(\"component not in need upgrade state\", ComponentState.NEEDS_UPGRADE, comp.getComponentSpec().getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testCheckState",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testCheckState() throws Exception\n{\r\n    String serviceName = \"testCheckState\";\r\n    ServiceContext context = createTestContext(rule, serviceName);\r\n    Component comp = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.UPGRADE).setTargetSpec(createSpecWithEnv(serviceName, comp.getName(), \"key1\", \"val1\")).setUpgradeVersion(\"v2\"));\r\n    comp.getUpgradeStatus().decContainersThatNeedUpgrade();\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CHECK_STABLE));\r\n    Assert.assertEquals(\"component not in need upgrade state\", ComponentState.NEEDS_UPGRADE, comp.getComponentSpec().getState());\r\n    comp.getUpgradeStatus().decContainersThatNeedUpgrade();\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CHECK_STABLE));\r\n    Assert.assertEquals(\"component not in stable state\", ComponentState.STABLE, comp.getComponentSpec().getState());\r\n    Assert.assertEquals(\"component did not upgrade successfully\", \"val1\", comp.getComponentSpec().getConfiguration().getEnv(\"key1\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testContainerCompletedWhenUpgrading",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testContainerCompletedWhenUpgrading() throws Exception\n{\r\n    String serviceName = \"testContainerCompletedWhenUpgrading\";\r\n    MockRunningServiceContext context = createTestContext(rule, serviceName);\r\n    Component comp = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.UPGRADE).setTargetSpec(createSpecWithEnv(serviceName, comp.getName(), \"key1\", \"val1\")).setUpgradeVersion(\"v2\"));\r\n    comp.getAllComponentInstances().forEach(instance -> instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.UPGRADE)));\r\n    for (ComponentInstance instance : comp.getAllComponentInstances()) {\r\n        ComponentEvent stopEvent = new ComponentEvent(comp.getName(), ComponentEventType.CONTAINER_COMPLETED).setInstance(instance).setContainerId(instance.getContainer().getId());\r\n        comp.handle(stopEvent);\r\n        instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), STOP));\r\n    }\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CHECK_STABLE));\r\n    Assert.assertEquals(\"component not in needs upgrade state\", ComponentState.NEEDS_UPGRADE, comp.getComponentSpec().getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testCancelUpgrade",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testCancelUpgrade() throws Exception\n{\r\n    ServiceContext context = createTestContext(rule, \"testCancelUpgrade\");\r\n    Component comp = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    ComponentEvent upgradeEvent = new ComponentEvent(comp.getName(), ComponentEventType.CANCEL_UPGRADE);\r\n    comp.handle(upgradeEvent);\r\n    Assert.assertEquals(\"component not in need upgrade state\", ComponentState.NEEDS_UPGRADE, comp.getComponentSpec().getState());\r\n    Assert.assertEquals(org.apache.hadoop.yarn.service.component.ComponentState.CANCEL_UPGRADING, comp.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testContainerCompletedCancelUpgrade",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testContainerCompletedCancelUpgrade() throws Exception\n{\r\n    String serviceName = \"testContainerCompletedCancelUpgrade\";\r\n    MockRunningServiceContext context = createTestContext(rule, serviceName);\r\n    Component comp = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.UPGRADE).setTargetSpec(createSpecWithEnv(serviceName, comp.getName(), \"key1\", \"val1\")).setUpgradeVersion(\"v2\"));\r\n    comp.getAllComponentInstances().forEach(instance -> instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.UPGRADE)));\r\n    for (ComponentInstance instance : comp.getAllComponentInstances()) {\r\n        instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), START));\r\n        instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), BECOME_READY));\r\n    }\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CANCEL_UPGRADE).setTargetSpec(createSpecWithEnv(serviceName, comp.getName(), \"key1\", \"val0\")).setUpgradeVersion(\"v1\"));\r\n    comp.getAllComponentInstances().forEach(instance -> instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.CANCEL_UPGRADE)));\r\n    Iterator<ComponentInstance> iter = comp.getAllComponentInstances().iterator();\r\n    ComponentInstance instance1 = iter.next();\r\n    ComponentEvent stopEvent = new ComponentEvent(comp.getName(), ComponentEventType.CONTAINER_COMPLETED).setInstance(instance1).setContainerId(instance1.getContainer().getId());\r\n    comp.handle(stopEvent);\r\n    instance1.handle(new ComponentInstanceEvent(instance1.getContainer().getId(), STOP));\r\n    Assert.assertEquals(org.apache.hadoop.yarn.service.component.ComponentState.CANCEL_UPGRADING, comp.getState());\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CHECK_STABLE));\r\n    Assert.assertEquals(\"component not in needs upgrade state\", ComponentState.NEEDS_UPGRADE, comp.getComponentSpec().getState());\r\n    Assert.assertEquals(org.apache.hadoop.yarn.service.component.ComponentState.CANCEL_UPGRADING, comp.getState());\r\n    ComponentInstance instance2 = iter.next();\r\n    instance2.handle(new ComponentInstanceEvent(instance2.getContainer().getId(), ComponentInstanceEventType.START));\r\n    instance2.handle(new ComponentInstanceEvent(instance2.getContainer().getId(), ComponentInstanceEventType.BECOME_READY));\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CHECK_STABLE));\r\n    Assert.assertEquals(\"component not in flexing state\", ComponentState.FLEXING, comp.getComponentSpec().getState());\r\n    context.assignNewContainer(context.attemptId, 10, comp);\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CHECK_STABLE));\r\n    Assert.assertEquals(\"component not in stable state\", ComponentState.STABLE, comp.getComponentSpec().getState());\r\n    Assert.assertEquals(\"cancel upgrade failed\", \"val0\", comp.getComponentSpec().getConfiguration().getEnv(\"key1\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testCancelUpgradeSuccessWhileUpgrading",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testCancelUpgradeSuccessWhileUpgrading() throws Exception\n{\r\n    String serviceName = \"testCancelUpgradeWhileUpgrading\";\r\n    MockRunningServiceContext context = createTestContext(rule, serviceName);\r\n    Component comp = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    cancelUpgradeWhileUpgrading(context, comp);\r\n    for (ComponentInstance instance : comp.getAllComponentInstances()) {\r\n        instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.START));\r\n        instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.BECOME_READY));\r\n    }\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CHECK_STABLE));\r\n    Assert.assertEquals(\"component not in stable state\", ComponentState.STABLE, comp.getComponentSpec().getState());\r\n    Assert.assertEquals(\"cancel upgrade failed\", \"val0\", comp.getComponentSpec().getConfiguration().getEnv(\"key1\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testCancelUpgradeFailureWhileUpgrading",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testCancelUpgradeFailureWhileUpgrading() throws Exception\n{\r\n    String serviceName = \"testCancelUpgradeFailureWhileUpgrading\";\r\n    MockRunningServiceContext context = createTestContext(rule, serviceName);\r\n    Component comp = context.scheduler.getAllComponents().entrySet().iterator().next().getValue();\r\n    cancelUpgradeWhileUpgrading(context, comp);\r\n    for (ComponentInstance instance : comp.getAllComponentInstances()) {\r\n        instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.STOP));\r\n    }\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CHECK_STABLE));\r\n    Assert.assertEquals(\"component not in flexing state\", ComponentState.FLEXING, comp.getComponentSpec().getState());\r\n    for (ComponentInstance instance : comp.getAllComponentInstances()) {\r\n        context.assignNewContainer(context.attemptId, 10, comp);\r\n    }\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CHECK_STABLE));\r\n    Assert.assertEquals(\"component not in stable state\", ComponentState.STABLE, comp.getComponentSpec().getState());\r\n    Assert.assertEquals(\"cancel upgrade failed\", \"val0\", comp.getComponentSpec().getConfiguration().getEnv(\"key1\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "cancelUpgradeWhileUpgrading",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void cancelUpgradeWhileUpgrading(MockRunningServiceContext context, Component comp) throws Exception\n{\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.UPGRADE).setTargetSpec(createSpecWithEnv(context.service.getName(), comp.getName(), \"key1\", \"val1\")).setUpgradeVersion(\"v0\"));\r\n    Iterator<ComponentInstance> iter = comp.getAllComponentInstances().iterator();\r\n    ComponentInstance instance1 = iter.next();\r\n    instance1.handle(new ComponentInstanceEvent(instance1.getContainer().getId(), ComponentInstanceEventType.UPGRADE));\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CANCEL_UPGRADE).setTargetSpec(createSpecWithEnv(context.service.getName(), comp.getName(), \"key1\", \"val0\")).setUpgradeVersion(\"v0\"));\r\n    comp.getAllComponentInstances().forEach(instance -> instance.handle(new ComponentInstanceEvent(instance.getContainer().getId(), ComponentInstanceEventType.CANCEL_UPGRADE)));\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CONTAINER_COMPLETED).setInstance(instance1).setContainerId(instance1.getContainer().getId()));\r\n    instance1.handle(new ComponentInstanceEvent(instance1.getContainer().getId(), STOP));\r\n    Assert.assertEquals(org.apache.hadoop.yarn.service.component.ComponentState.CANCEL_UPGRADING, comp.getState());\r\n    comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CHECK_STABLE));\r\n    Assert.assertEquals(\"component not in needs upgrade state\", ComponentState.NEEDS_UPGRADE, comp.getComponentSpec().getState());\r\n    Assert.assertEquals(org.apache.hadoop.yarn.service.component.ComponentState.CANCEL_UPGRADING, comp.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testComponentStateReachesStableStateWithTerminatingComponents",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testComponentStateReachesStableStateWithTerminatingComponents() throws Exception\n{\r\n    final String serviceName = \"testComponentStateUpdatesWithTerminatingComponents\";\r\n    Service testService = ServiceTestUtils.createTerminatingJobExample(serviceName);\r\n    TestServiceManager.createDef(serviceName, testService);\r\n    ServiceContext context = new MockRunningServiceContext(rule, testService);\r\n    for (Component comp : context.scheduler.getAllComponents().values()) {\r\n        Iterator<ComponentInstance> instanceIter = comp.getAllComponentInstances().iterator();\r\n        ComponentInstance componentInstance = instanceIter.next();\r\n        Container instanceContainer = componentInstance.getContainer();\r\n        Assert.assertEquals(0, comp.getNumSucceededInstances());\r\n        Assert.assertEquals(0, comp.getNumFailedInstances());\r\n        Assert.assertEquals(2, comp.getNumRunningInstances());\r\n        Assert.assertEquals(2, comp.getNumReadyInstances());\r\n        Assert.assertEquals(0, comp.getPendingInstances().size());\r\n        ContainerStatus containerStatus = ContainerStatus.newInstance(instanceContainer.getId(), org.apache.hadoop.yarn.api.records.ContainerState.COMPLETE, \"successful\", 0);\r\n        comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CONTAINER_COMPLETED).setStatus(containerStatus).setContainerId(instanceContainer.getId()));\r\n        componentInstance.handle(new ComponentInstanceEvent(componentInstance.getContainer().getId(), ComponentInstanceEventType.STOP).setStatus(containerStatus));\r\n        Assert.assertEquals(1, comp.getNumSucceededInstances());\r\n        Assert.assertEquals(0, comp.getNumFailedInstances());\r\n        Assert.assertEquals(1, comp.getNumRunningInstances());\r\n        Assert.assertEquals(1, comp.getNumReadyInstances());\r\n        Assert.assertEquals(0, comp.getPendingInstances().size());\r\n        org.apache.hadoop.yarn.service.component.ComponentState componentState = Component.checkIfStable(comp);\r\n        Assert.assertEquals(org.apache.hadoop.yarn.service.component.ComponentState.STABLE, componentState);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testComponentStateUpdatesWithTerminatingComponents",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testComponentStateUpdatesWithTerminatingComponents() throws Exception\n{\r\n    final String serviceName = \"testComponentStateUpdatesWithTerminatingComponents\";\r\n    Service testService = ServiceTestUtils.createTerminatingJobExample(serviceName);\r\n    TestServiceManager.createDef(serviceName, testService);\r\n    ServiceContext context = new MockRunningServiceContext(rule, testService);\r\n    for (Component comp : context.scheduler.getAllComponents().values()) {\r\n        Iterator<ComponentInstance> instanceIter = comp.getAllComponentInstances().iterator();\r\n        while (instanceIter.hasNext()) {\r\n            ComponentInstance componentInstance = instanceIter.next();\r\n            Container instanceContainer = componentInstance.getContainer();\r\n            ContainerStatus containerStatus = ContainerStatus.newInstance(instanceContainer.getId(), org.apache.hadoop.yarn.api.records.ContainerState.COMPLETE, \"successful\", 0);\r\n            comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CONTAINER_COMPLETED).setStatus(containerStatus).setContainerId(instanceContainer.getId()));\r\n            componentInstance.handle(new ComponentInstanceEvent(componentInstance.getContainer().getId(), ComponentInstanceEventType.STOP).setStatus(containerStatus));\r\n        }\r\n        ComponentState componentState = comp.getComponentSpec().getState();\r\n        Assert.assertEquals(ComponentState.SUCCEEDED, componentState);\r\n    }\r\n    ServiceState serviceState = testService.getState();\r\n    Assert.assertEquals(ServiceState.SUCCEEDED, serviceState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "testComponentStateUpdatesWithTerminatingDominantComponents",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testComponentStateUpdatesWithTerminatingDominantComponents() throws Exception\n{\r\n    final String serviceName = \"testComponentStateUpdatesWithTerminatingServiceStateComponents\";\r\n    Service testService = ServiceTestUtils.createTerminatingDominantComponentJobExample(serviceName);\r\n    TestServiceManager.createDef(serviceName, testService);\r\n    ServiceContext context = new MockRunningServiceContext(rule, testService);\r\n    for (Component comp : context.scheduler.getAllComponents().values()) {\r\n        boolean componentIsDominant = comp.getComponentSpec().getConfiguration().getPropertyBool(CONTAINER_STATE_REPORT_AS_SERVICE_STATE, false);\r\n        if (componentIsDominant) {\r\n            Iterator<ComponentInstance> instanceIter = comp.getAllComponentInstances().iterator();\r\n            while (instanceIter.hasNext()) {\r\n                ComponentInstance componentInstance = instanceIter.next();\r\n                Container instanceContainer = componentInstance.getContainer();\r\n                ContainerStatus containerStatus = ContainerStatus.newInstance(instanceContainer.getId(), org.apache.hadoop.yarn.api.records.ContainerState.COMPLETE, \"successful\", 0);\r\n                comp.handle(new ComponentEvent(comp.getName(), ComponentEventType.CONTAINER_COMPLETED).setStatus(containerStatus).setContainerId(instanceContainer.getId()));\r\n                componentInstance.handle(new ComponentInstanceEvent(componentInstance.getContainer().getId(), ComponentInstanceEventType.STOP).setStatus(containerStatus));\r\n            }\r\n            ComponentState componentState = comp.getComponentSpec().getState();\r\n            Assert.assertEquals(ComponentState.SUCCEEDED, componentState);\r\n        }\r\n    }\r\n    ServiceState serviceState = testService.getState();\r\n    Assert.assertEquals(ServiceState.SUCCEEDED, serviceState);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "createSpecWithEnv",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "org.apache.hadoop.yarn.service.api.records.Component createSpecWithEnv(String serviceName, String compName, String key, String val)\n{\r\n    Service service = TestServiceManager.createBaseDef(serviceName);\r\n    org.apache.hadoop.yarn.service.api.records.Component spec = service.getComponent(compName);\r\n    spec.getConfiguration().getEnv().put(key, val);\r\n    return spec;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\component",
  "methodName" : "createTestContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "MockRunningServiceContext createTestContext(ServiceTestUtils.ServiceFSWatcher fsWatcher, String serviceName) throws Exception\n{\r\n    return new MockRunningServiceContext(fsWatcher, TestServiceManager.createBaseDef(serviceName));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    config = new Configuration();\r\n    config.setBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED, true);\r\n    config.setFloat(YarnConfiguration.TIMELINE_SERVICE_VERSION, 2.0f);\r\n    timelineClient = new DummyTimelineClient(ApplicationId.fromString(SERVICEID));\r\n    serviceTimelinePublisher = new ServiceTimelinePublisher(timelineClient);\r\n    serviceTimelinePublisher.init(config);\r\n    serviceTimelinePublisher.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    if (serviceTimelinePublisher != null) {\r\n        serviceTimelinePublisher.stop();\r\n    }\r\n    if (timelineClient != null) {\r\n        timelineClient.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "testServiceAttemptEntity",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testServiceAttemptEntity()\n{\r\n    Service service = createMockApplication();\r\n    serviceTimelinePublisher.serviceAttemptRegistered(service, new YarnConfiguration());\r\n    Collection<TimelineEntity> lastPublishedEntities = ((DummyTimelineClient) timelineClient).getLastPublishedEntities();\r\n    assertEquals(2, lastPublishedEntities.size());\r\n    for (TimelineEntity timelineEntity : lastPublishedEntities) {\r\n        if (timelineEntity.getType() == ServiceTimelineEntityType.COMPONENT.toString()) {\r\n            verifyComponentTimelineEntity(timelineEntity);\r\n        } else {\r\n            verifyServiceAttemptTimelineEntity(timelineEntity, null, true);\r\n        }\r\n    }\r\n    ServiceContext context = new ServiceContext();\r\n    context.attemptId = ApplicationAttemptId.newInstance(ApplicationId.fromString(service.getId()), 1);\r\n    String exitDiags = \"service killed\";\r\n    serviceTimelinePublisher.serviceAttemptUnregistered(context, FinalApplicationStatus.ENDED, exitDiags);\r\n    lastPublishedEntities = ((DummyTimelineClient) timelineClient).getLastPublishedEntities();\r\n    for (TimelineEntity timelineEntity : lastPublishedEntities) {\r\n        if (timelineEntity.getType() == ServiceTimelineEntityType.SERVICE_ATTEMPT.toString()) {\r\n            verifyServiceAttemptTimelineEntity(timelineEntity, exitDiags, false);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "testComponentInstanceEntity",
  "errType" : null,
  "containingMethodsNum" : 20,
  "sourceCodeText" : "void testComponentInstanceEntity()\n{\r\n    Container container = new Container();\r\n    container.id(CONTAINER_ID).ip(CONTAINER_IP).bareHost(CONTAINER_BAREHOST).hostname(CONTAINER_HOSTNAME).state(ContainerState.RUNNING_BUT_UNREADY).launchTime(new Date());\r\n    ComponentInstanceId id = new ComponentInstanceId(0, COMPONENT_NAME);\r\n    ComponentInstance instance = mock(ComponentInstance.class);\r\n    when(instance.getCompName()).thenReturn(COMPONENT_NAME);\r\n    when(instance.getCompInstanceName()).thenReturn(\"comp_instance_name\");\r\n    serviceTimelinePublisher.componentInstanceStarted(container, instance);\r\n    Collection<TimelineEntity> lastPublishedEntities = ((DummyTimelineClient) timelineClient).getLastPublishedEntities();\r\n    assertEquals(1, lastPublishedEntities.size());\r\n    TimelineEntity entity = lastPublishedEntities.iterator().next();\r\n    assertEquals(1, entity.getEvents().size());\r\n    assertEquals(CONTAINER_ID, entity.getId());\r\n    assertEquals(CONTAINER_BAREHOST, entity.getInfo().get(ServiceTimelineMetricsConstants.BARE_HOST));\r\n    assertEquals(COMPONENT_NAME, entity.getInfo().get(ServiceTimelineMetricsConstants.COMPONENT_NAME));\r\n    assertEquals(ContainerState.RUNNING_BUT_UNREADY.toString(), entity.getInfo().get(ServiceTimelineMetricsConstants.STATE));\r\n    container.setState(ContainerState.READY);\r\n    serviceTimelinePublisher.componentInstanceIPHostUpdated(container);\r\n    lastPublishedEntities = ((DummyTimelineClient) timelineClient).getLastPublishedEntities();\r\n    assertEquals(1, lastPublishedEntities.size());\r\n    entity = lastPublishedEntities.iterator().next();\r\n    assertEquals(2, entity.getEvents().size());\r\n    assertEquals(ContainerState.READY.toString(), entity.getInfo().get(ServiceTimelineMetricsConstants.STATE));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "verifyServiceAttemptTimelineEntity",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void verifyServiceAttemptTimelineEntity(TimelineEntity timelineEntity, String message, boolean isRegistedEntity)\n{\r\n    assertEquals(SERVICEID, timelineEntity.getId());\r\n    assertEquals(SERVICE_NAME, timelineEntity.getInfo().get(ServiceTimelineMetricsConstants.NAME));\r\n    if (isRegistedEntity) {\r\n        assertEquals(ServiceState.STARTED.toString(), timelineEntity.getInfo().get(ServiceTimelineMetricsConstants.STATE));\r\n        assertEquals(ServiceTimelineEvent.SERVICE_ATTEMPT_REGISTERED.toString(), timelineEntity.getEvents().iterator().next().getId());\r\n    } else {\r\n        assertEquals(\"ENDED\", timelineEntity.getInfo().get(ServiceTimelineMetricsConstants.STATE).toString());\r\n        assertEquals(message, timelineEntity.getInfo().get(ServiceTimelineMetricsConstants.DIAGNOSTICS_INFO));\r\n        assertEquals(2, timelineEntity.getEvents().size());\r\n        assertEquals(ServiceTimelineEvent.SERVICE_ATTEMPT_UNREGISTERED.toString(), timelineEntity.getEvents().iterator().next().getId());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "verifyComponentTimelineEntity",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void verifyComponentTimelineEntity(TimelineEntity entity)\n{\r\n    Map<String, Object> info = entity.getInfo();\r\n    assertEquals(\"DEFAULT\", entity.getId());\r\n    assertEquals(ARTIFACTID, info.get(ServiceTimelineMetricsConstants.ARTIFACT_ID));\r\n    assertEquals(\"DOCKER\", info.get(ServiceTimelineMetricsConstants.ARTIFACT_TYPE));\r\n    assertEquals(\"medium\", info.get(ServiceTimelineMetricsConstants.RESOURCE_PROFILE));\r\n    assertEquals(1, info.get(ServiceTimelineMetricsConstants.RESOURCE_CPU));\r\n    assertEquals(\"1024\", info.get(ServiceTimelineMetricsConstants.RESOURCE_MEMORY));\r\n    assertEquals(\"sleep 1\", info.get(ServiceTimelineMetricsConstants.LAUNCH_COMMAND));\r\n    assertEquals(\"false\", info.get(ServiceTimelineMetricsConstants.RUN_PRIVILEGED_CONTAINER));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\timelineservice",
  "methodName" : "createMockApplication",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "Service createMockApplication()\n{\r\n    Service service = mock(Service.class);\r\n    when(service.getId()).thenReturn(SERVICEID);\r\n    when(service.getLaunchTime()).thenReturn(new Date());\r\n    when(service.getState()).thenReturn(ServiceState.STARTED);\r\n    when(service.getName()).thenReturn(SERVICE_NAME);\r\n    when(service.getConfiguration()).thenReturn(new org.apache.hadoop.yarn.service.api.records.Configuration());\r\n    Component component = mock(Component.class);\r\n    Artifact artifact = new Artifact();\r\n    artifact.setId(ARTIFACTID);\r\n    Resource resource = new Resource();\r\n    resource.setCpus(1);\r\n    resource.setMemory(1024 + \"\");\r\n    resource.setProfile(\"medium\");\r\n    when(component.getArtifact()).thenReturn(artifact);\r\n    when(component.getName()).thenReturn(COMPONENT_NAME);\r\n    when(component.getResource()).thenReturn(resource);\r\n    when(component.getLaunchCommand()).thenReturn(\"sleep 1\");\r\n    PlacementPolicy placementPolicy = new PlacementPolicy();\r\n    PlacementConstraint placementConstraint = new PlacementConstraint();\r\n    placementConstraint.setType(PlacementType.ANTI_AFFINITY);\r\n    placementPolicy.setConstraints(Collections.singletonList(placementConstraint));\r\n    when(component.getPlacementPolicy()).thenReturn(placementPolicy);\r\n    when(component.getConfiguration()).thenReturn(new org.apache.hadoop.yarn.service.api.records.Configuration());\r\n    List<Component> components = new ArrayList<Component>();\r\n    components.add(component);\r\n    when(service.getComponents()).thenReturn(components);\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "testStaticFileLocalization",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testStaticFileLocalization() throws IOException\n{\r\n    ContainerLaunchService.ComponentLaunchContext compLaunchCtx = mock(ContainerLaunchService.ComponentLaunchContext.class);\r\n    AbstractLauncher launcher = mock(AbstractLauncher.class);\r\n    SliderFileSystem sfs = mock(SliderFileSystem.class);\r\n    FileSystem fs = mock(FileSystem.class);\r\n    when(fs.getFileStatus(any(Path.class))).thenAnswer(invocationOnMock -> new FileStatus(1L, false, 1, 1L, 1L, (Path) invocationOnMock.getArguments()[0]));\r\n    when(fs.exists(any(Path.class))).thenReturn(true);\r\n    when(sfs.getFileSystem()).thenReturn(fs);\r\n    Configuration conf = mock(Configuration.class);\r\n    List<ConfigFile> configFileList = new ArrayList<>();\r\n    when(conf.getFiles()).thenReturn(configFileList);\r\n    when(compLaunchCtx.getConfiguration()).thenReturn(conf);\r\n    when(sfs.createAmResource(any(Path.class), any(LocalResourceType.class), any(LocalResourceVisibility.class))).thenAnswer(invocationOnMock -> new LocalResource() {\r\n\r\n        @Override\r\n        public URL getResource() {\r\n            return URL.fromPath(((Path) invocationOnMock.getArguments()[0]));\r\n        }\r\n\r\n        @Override\r\n        public void setResource(URL resource) {\r\n        }\r\n\r\n        @Override\r\n        public long getSize() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public void setSize(long size) {\r\n        }\r\n\r\n        @Override\r\n        public long getTimestamp() {\r\n            return 0;\r\n        }\r\n\r\n        @Override\r\n        public void setTimestamp(long timestamp) {\r\n        }\r\n\r\n        @Override\r\n        public LocalResourceType getType() {\r\n            return (LocalResourceType) invocationOnMock.getArguments()[1];\r\n        }\r\n\r\n        @Override\r\n        public void setType(LocalResourceType type) {\r\n        }\r\n\r\n        @Override\r\n        public LocalResourceVisibility getVisibility() {\r\n            return LocalResourceVisibility.APPLICATION;\r\n        }\r\n\r\n        @Override\r\n        public void setVisibility(LocalResourceVisibility visibility) {\r\n        }\r\n\r\n        @Override\r\n        public String getPattern() {\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        public void setPattern(String pattern) {\r\n        }\r\n\r\n        @Override\r\n        public boolean getShouldBeUploadedToSharedCache() {\r\n            return false;\r\n        }\r\n\r\n        @Override\r\n        public void setShouldBeUploadedToSharedCache(boolean shouldBeUploadedToSharedCache) {\r\n        }\r\n    });\r\n    configFileList.add(new ConfigFile().srcFile(\"hdfs://default/sourceFile1\").destFile(\"destFile1\").type(ConfigFile.TypeEnum.ARCHIVE).visibility(LocalResourceVisibility.APPLICATION));\r\n    configFileList.add(new ConfigFile().srcFile(\"hdfs://default/sourceFile2\").destFile(\"folder/destFile_2\").type(ConfigFile.TypeEnum.STATIC).visibility(LocalResourceVisibility.APPLICATION));\r\n    configFileList.add(new ConfigFile().srcFile(\"hdfs://default/sourceFile3\").destFile(\"destFile3\").type(ConfigFile.TypeEnum.JSON).visibility(LocalResourceVisibility.APPLICATION));\r\n    configFileList.add(new ConfigFile().srcFile(\"hdfs://default/sourceFile4\").type(ConfigFile.TypeEnum.STATIC).visibility(LocalResourceVisibility.APPLICATION));\r\n    ProviderService.ResolvedLaunchParams resolved = new ProviderService.ResolvedLaunchParams();\r\n    ProviderUtils.handleStaticFilesForLocalization(launcher, sfs, compLaunchCtx, resolved);\r\n    Mockito.verify(launcher).addLocalResource(Mockito.eq(\"destFile1\"), any(LocalResource.class));\r\n    Mockito.verify(launcher).addLocalResource(Mockito.eq(\"destFile_2\"), any(LocalResource.class));\r\n    Mockito.verify(launcher).addLocalResource(Mockito.eq(\"sourceFile4\"), any(LocalResource.class));\r\n    Assert.assertEquals(3, resolved.getResolvedRsrcPaths().size());\r\n    Assert.assertEquals(resolved.getResolvedRsrcPaths().get(\"destFile1\"), \"destFile1\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\provider",
  "methodName" : "testReplaceSpacesWithDelimiter",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testReplaceSpacesWithDelimiter()\n{\r\n    String command = \"ls  -l \\\" space\\\"\";\r\n    String expected = \"ls,-l, space\";\r\n    String actual = ProviderUtils.replaceSpacesWithDelimiter(command, \",\");\r\n    Assert.assertEquals(\"replaceSpaceWithDelimiter produces unexpected result.\", expected, actual);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    File tmpYarnDir = new File(\"target\", \"tmp\");\r\n    FileUtils.deleteQuietly(tmpYarnDir);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws IOException\n{\r\n    shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testCreateFlexStopDestroyService",
  "errType" : null,
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testCreateFlexStopDestroyService() throws Exception\n{\r\n    setupInternal(NUM_NMS);\r\n    ServiceClient client = createClient(getConf());\r\n    Service exampleApp = createExampleApplication();\r\n    client.actionCreate(exampleApp);\r\n    SliderFileSystem fileSystem = new SliderFileSystem(getConf());\r\n    Path appDir = fileSystem.buildClusterDirPath(exampleApp.getName());\r\n    Assert.assertTrue(getFS().exists(new Path(appDir, exampleApp.getName() + \".json\")));\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    flexComponents(client, exampleApp, 3L);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    checkCompInstancesInOrder(client, exampleApp);\r\n    flexComponents(client, exampleApp, 1L);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    checkCompInstancesInOrder(client, exampleApp);\r\n    flexComponents(client, exampleApp, 2L);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    checkCompInstancesInOrder(client, exampleApp);\r\n    LOG.info(\"Stop the service\");\r\n    client.actionStop(exampleApp.getName(), true);\r\n    ApplicationReport report = client.getYarnClient().getApplicationReport(ApplicationId.fromString(exampleApp.getId()));\r\n    Assert.assertEquals(FINISHED, report.getYarnApplicationState());\r\n    Assert.assertEquals(FinalApplicationStatus.ENDED, report.getFinalApplicationStatus());\r\n    String serviceZKPath = RegistryUtils.servicePath(RegistryUtils.currentUser(), YarnServiceConstants.APP_TYPE, exampleApp.getName());\r\n    Assert.assertFalse(\"Registry ZK service path still exists after stop\", getCuratorService().zkPathExists(serviceZKPath));\r\n    LOG.info(\"Destroy the service\");\r\n    Assert.assertEquals(0, client.actionDestroy(exampleApp.getName()));\r\n    Assert.assertFalse(getFS().exists(appDir));\r\n    Assert.assertEquals(EXIT_NOT_FOUND, client.actionDestroy(exampleApp.getName()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testStopDestroySavedService",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testStopDestroySavedService() throws Exception\n{\r\n    setupInternal(NUM_NMS);\r\n    ServiceClient client = createClient(getConf());\r\n    Service exampleApp = createExampleApplication();\r\n    client.actionBuild(exampleApp);\r\n    Assert.assertEquals(EXIT_COMMAND_ARGUMENT_ERROR, client.actionStop(exampleApp.getName()));\r\n    Assert.assertEquals(0, client.actionDestroy(exampleApp.getName()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testComponentStartOrder",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testComponentStartOrder() throws Exception\n{\r\n    setupInternal(NUM_NMS);\r\n    ServiceClient client = createClient(getConf());\r\n    Service exampleApp = new Service();\r\n    exampleApp.setName(\"teststartorder\");\r\n    exampleApp.setVersion(\"v1\");\r\n    exampleApp.addComponent(createComponent(\"compa\", 2, \"sleep 1000\"));\r\n    Component compb = createComponent(\"compb\", 2, \"sleep 1000\");\r\n    compb.setDependencies(Collections.singletonList(\"compa\"));\r\n    exampleApp.addComponent(compb);\r\n    Component compc = createComponent(\"compc\", 2, \"sleep 1000\");\r\n    compc.setDependencies(Collections.singletonList(\"compb\"));\r\n    exampleApp.addComponent(compc);\r\n    client.actionCreate(exampleApp);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    checkContainerLaunchDependencies(client, exampleApp, \"compa\", \"compb\", \"compc\");\r\n    client.actionStop(exampleApp.getName(), true);\r\n    client.actionDestroy(exampleApp.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testCreateServiceSameNameDifferentUser",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testCreateServiceSameNameDifferentUser() throws Exception\n{\r\n    String sameAppName = \"same-name\";\r\n    String userA = \"usera\";\r\n    String userB = \"userb\";\r\n    setupInternal(NUM_NMS);\r\n    ServiceClient client = createClient(getConf());\r\n    String origBasePath = getConf().get(YARN_SERVICE_BASE_PATH);\r\n    Service userAApp = new Service();\r\n    userAApp.setName(sameAppName);\r\n    userAApp.setVersion(\"v1\");\r\n    userAApp.addComponent(createComponent(\"comp\", 1, \"sleep 1000\"));\r\n    Service userBApp = new Service();\r\n    userBApp.setName(sameAppName);\r\n    userBApp.setVersion(\"v1\");\r\n    userBApp.addComponent(createComponent(\"comp\", 1, \"sleep 1000\"));\r\n    File userABasePath = null, userBBasePath = null;\r\n    try {\r\n        userABasePath = new File(origBasePath, userA);\r\n        userABasePath.mkdirs();\r\n        getConf().set(YARN_SERVICE_BASE_PATH, userABasePath.getAbsolutePath());\r\n        client.actionCreate(userAApp);\r\n        waitForServiceToBeStarted(client, userAApp);\r\n        userBBasePath = new File(origBasePath, userB);\r\n        userBBasePath.mkdirs();\r\n        getConf().set(YARN_SERVICE_BASE_PATH, userBBasePath.getAbsolutePath());\r\n        client.actionBuild(userBApp);\r\n    } catch (Exception e) {\r\n        Assert.fail(\"Exception should not be thrown - \" + e.getLocalizedMessage());\r\n    } finally {\r\n        if (userABasePath != null) {\r\n            getConf().set(YARN_SERVICE_BASE_PATH, userABasePath.getAbsolutePath());\r\n            client.actionStop(sameAppName, true);\r\n            client.actionDestroy(sameAppName);\r\n        }\r\n        if (userBBasePath != null) {\r\n            getConf().set(YARN_SERVICE_BASE_PATH, userBBasePath.getAbsolutePath());\r\n            client.actionDestroy(sameAppName);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testCreateServiceSameNameSameUser",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testCreateServiceSameNameSameUser() throws Exception\n{\r\n    String sameAppName = \"same-name\";\r\n    String user = UserGroupInformation.getCurrentUser().getUserName();\r\n    System.setProperty(\"user.name\", user);\r\n    setupInternal(NUM_NMS);\r\n    ServiceClient client = createClient(getConf());\r\n    Service appA = new Service();\r\n    appA.setName(sameAppName);\r\n    appA.setVersion(\"v1\");\r\n    appA.addComponent(createComponent(\"comp\", 1, \"sleep 1000\"));\r\n    Service appB = new Service();\r\n    appB.setName(sameAppName);\r\n    appB.setVersion(\"v1\");\r\n    appB.addComponent(createComponent(\"comp\", 1, \"sleep 1000\"));\r\n    try {\r\n        client.actionBuild(appA);\r\n        client.actionBuild(appB);\r\n    } catch (Exception e) {\r\n        String expectedMsg = \"Service Instance dir already exists:\";\r\n        if (e.getLocalizedMessage() != null) {\r\n            Assert.assertThat(e.getLocalizedMessage(), CoreMatchers.containsString(expectedMsg));\r\n        } else {\r\n            Assert.fail(\"Message cannot be null. It has to say - \" + expectedMsg);\r\n        }\r\n    } finally {\r\n        client.actionDestroy(sameAppName);\r\n    }\r\n    try {\r\n        client.actionCreate(appA);\r\n        waitForServiceToBeStarted(client, appA);\r\n        client.actionCreate(appB);\r\n        waitForServiceToBeStarted(client, appB);\r\n    } catch (Exception e) {\r\n        String expectedMsg = \"Failed to create service \" + sameAppName + \", because it already exists.\";\r\n        if (e.getLocalizedMessage() != null) {\r\n            Assert.assertThat(e.getLocalizedMessage(), CoreMatchers.containsString(expectedMsg));\r\n        } else {\r\n            Assert.fail(\"Message cannot be null. It has to say - \" + expectedMsg);\r\n        }\r\n    } finally {\r\n        client.actionStop(sameAppName, true);\r\n        client.actionDestroy(sameAppName);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testRecoverComponentsAfterRMRestart",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 26,
  "sourceCodeText" : "void testRecoverComponentsAfterRMRestart() throws Exception\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setBoolean(YarnConfiguration.RECOVERY_ENABLED, true);\r\n    conf.setBoolean(YarnConfiguration.RM_WORK_PRESERVING_RECOVERY_ENABLED, true);\r\n    conf.setLong(YarnConfiguration.NM_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS, 500L);\r\n    conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_FIXED_PORTS, true);\r\n    conf.setBoolean(YarnConfiguration.YARN_MINICLUSTER_USE_RPC, true);\r\n    conf.setInt(YarnConfiguration.RM_MAX_COMPLETED_APPLICATIONS, YarnConfiguration.DEFAULT_RM_MAX_COMPLETED_APPLICATIONS);\r\n    setConf(conf);\r\n    setupInternal(NUM_NMS);\r\n    ServiceClient client = createClient(getConf());\r\n    Service exampleApp = createExampleApplication();\r\n    client.actionCreate(exampleApp);\r\n    Multimap<String, String> containersBeforeFailure = waitForAllCompToBeReady(client, exampleApp);\r\n    LOG.info(\"Restart the resource manager\");\r\n    getYarnCluster().restartResourceManager(getYarnCluster().getActiveRMIndex());\r\n    GenericTestUtils.waitFor(() -> getYarnCluster().getResourceManager().getServiceState() == org.apache.hadoop.service.Service.STATE.STARTED, 2000, 200000);\r\n    Assert.assertTrue(\"node managers connected\", getYarnCluster().waitForNodeManagersToConnect(5000));\r\n    ApplicationId exampleAppId = ApplicationId.fromString(exampleApp.getId());\r\n    ApplicationAttemptId applicationAttemptId = client.getYarnClient().getApplicationReport(exampleAppId).getCurrentApplicationAttemptId();\r\n    LOG.info(\"Fail the application attempt {}\", applicationAttemptId);\r\n    client.getYarnClient().failApplicationAttempt(applicationAttemptId);\r\n    GenericTestUtils.waitFor(() -> {\r\n        try {\r\n            ApplicationReport ar = client.getYarnClient().getApplicationReport(exampleAppId);\r\n            return ar.getCurrentApplicationAttemptId().getAttemptId() == 2 && ar.getYarnApplicationState() == YarnApplicationState.RUNNING;\r\n        } catch (YarnException | IOException e) {\r\n            throw new RuntimeException(\"while waiting\", e);\r\n        }\r\n    }, 2000, 200000);\r\n    Multimap<String, String> containersAfterFailure = waitForAllCompToBeReady(client, exampleApp);\r\n    containersBeforeFailure.keys().forEach(compName -> {\r\n        Assert.assertEquals(\"num containers after by restart for \" + compName, containersBeforeFailure.get(compName).size(), containersAfterFailure.get(compName) == null ? 0 : containersAfterFailure.get(compName).size());\r\n    });\r\n    LOG.info(\"Stop/destroy service {}\", exampleApp);\r\n    client.actionStop(exampleApp.getName(), true);\r\n    client.actionDestroy(exampleApp.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testUpgrade",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testUpgrade() throws Exception\n{\r\n    setupInternal(NUM_NMS);\r\n    getConf().setBoolean(YARN_SERVICE_UPGRADE_ENABLED, true);\r\n    ServiceClient client = createClient(getConf());\r\n    Service service = createExampleApplication();\r\n    client.actionCreate(service);\r\n    waitForServiceToBeStable(client, service);\r\n    Component component = service.getComponents().iterator().next();\r\n    service.setState(ServiceState.UPGRADING);\r\n    service.setVersion(\"v2\");\r\n    component.getConfiguration().getEnv().put(\"key1\", \"val1\");\r\n    client.initiateUpgrade(service);\r\n    waitForServiceToBeInState(client, service, ServiceState.UPGRADING);\r\n    SliderFileSystem fs = new SliderFileSystem(getConf());\r\n    Service fromFs = ServiceApiUtil.loadServiceUpgrade(fs, service.getName(), service.getVersion());\r\n    Assert.assertEquals(service.getName(), fromFs.getName());\r\n    Assert.assertEquals(service.getVersion(), fromFs.getVersion());\r\n    Service liveService = client.getStatus(service.getName());\r\n    client.actionUpgrade(service, liveService.getComponent(component.getName()).getContainers());\r\n    waitForAllCompToBeReady(client, service);\r\n    client.actionStart(service.getName());\r\n    waitForServiceToBeStable(client, service);\r\n    Service active = client.getStatus(service.getName());\r\n    Assert.assertEquals(\"component not stable\", ComponentState.STABLE, active.getComponent(component.getName()).getState());\r\n    Assert.assertEquals(\"comp does not have new env\", \"val1\", active.getComponent(component.getName()).getConfiguration().getEnv(\"key1\"));\r\n    LOG.info(\"Stop/destroy service {}\", service);\r\n    client.actionStop(service.getName(), true);\r\n    client.actionDestroy(service.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testExpressUpgrade",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testExpressUpgrade() throws Exception\n{\r\n    setupInternal(NUM_NMS);\r\n    getConf().setBoolean(YARN_SERVICE_UPGRADE_ENABLED, true);\r\n    ServiceClient client = createClient(getConf());\r\n    Service service = createExampleApplication();\r\n    client.actionCreate(service);\r\n    waitForServiceToBeStable(client, service);\r\n    Component component = service.getComponents().iterator().next();\r\n    service.setState(ServiceState.EXPRESS_UPGRADING);\r\n    service.setVersion(\"v2\");\r\n    component.getConfiguration().getEnv().put(\"key1\", \"val1\");\r\n    Component component2 = service.getComponent(\"compb\");\r\n    component2.getConfiguration().getEnv().put(\"key2\", \"val2\");\r\n    client.actionUpgradeExpress(service);\r\n    waitForServiceToBeExpressUpgrading(client, service);\r\n    waitForServiceToBeStable(client, service);\r\n    Service active = client.getStatus(service.getName());\r\n    Assert.assertEquals(\"version mismatch\", service.getVersion(), active.getVersion());\r\n    Assert.assertEquals(\"component not stable\", ComponentState.STABLE, active.getComponent(component.getName()).getState());\r\n    Assert.assertEquals(\"compa does not have new env\", \"val1\", active.getComponent(component.getName()).getConfiguration().getEnv(\"key1\"));\r\n    Assert.assertEquals(\"compb does not have new env\", \"val2\", active.getComponent(component2.getName()).getConfiguration().getEnv(\"key2\"));\r\n    LOG.info(\"Stop/destroy service {}\", service);\r\n    client.actionStop(service.getName(), true);\r\n    client.actionDestroy(service.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testCancelUpgrade",
  "errType" : null,
  "containingMethodsNum" : 25,
  "sourceCodeText" : "void testCancelUpgrade() throws Exception\n{\r\n    setupInternal(NUM_NMS);\r\n    getConf().setBoolean(YARN_SERVICE_UPGRADE_ENABLED, true);\r\n    ServiceClient client = createClient(getConf());\r\n    Service service = createExampleApplication();\r\n    Component component = service.getComponents().iterator().next();\r\n    component.getConfiguration().getEnv().put(\"key1\", \"val0\");\r\n    client.actionCreate(service);\r\n    waitForServiceToBeStable(client, service);\r\n    service.setState(ServiceState.UPGRADING);\r\n    service.setVersion(\"v2\");\r\n    component.getConfiguration().getEnv().put(\"key1\", \"val1\");\r\n    client.initiateUpgrade(service);\r\n    waitForServiceToBeInState(client, service, ServiceState.UPGRADING);\r\n    Service liveService = client.getStatus(service.getName());\r\n    Container container = liveService.getComponent(component.getName()).getContainers().iterator().next();\r\n    client.actionUpgrade(service, Lists.newArrayList(container));\r\n    Thread.sleep(500);\r\n    client.actionCancelUpgrade(service.getName());\r\n    waitForServiceToBeStable(client, service);\r\n    Service active = client.getStatus(service.getName());\r\n    Assert.assertEquals(\"component not stable\", ComponentState.STABLE, active.getComponent(component.getName()).getState());\r\n    Assert.assertEquals(\"comp does not have new env\", \"val0\", active.getComponent(component.getName()).getConfiguration().getEnv(\"key1\"));\r\n    LOG.info(\"Stop/destroy service {}\", service);\r\n    client.actionStop(service.getName(), true);\r\n    client.actionDestroy(service.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testCreateServiceWithPlacementPolicy",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 58,
  "sourceCodeText" : "void testCreateServiceWithPlacementPolicy() throws Exception\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_HANDLER, YarnConfiguration.SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER);\r\n    conf.setInt(YarnConfiguration.RM_MAX_COMPLETED_APPLICATIONS, YarnConfiguration.DEFAULT_RM_MAX_COMPLETED_APPLICATIONS);\r\n    setConf(conf);\r\n    setupInternal(3);\r\n    ServiceClient client = createClient(getConf());\r\n    Service exampleApp = new Service();\r\n    exampleApp.setName(\"example-app\");\r\n    exampleApp.setVersion(\"v1\");\r\n    Component comp = createComponent(\"compa\", 3L, \"sleep 1000\");\r\n    PlacementPolicy pp = new PlacementPolicy();\r\n    PlacementConstraint pc = new PlacementConstraint();\r\n    pc.setName(\"CA1\");\r\n    pc.setTargetTags(Collections.singletonList(\"compa\"));\r\n    pc.setScope(PlacementScope.NODE);\r\n    pc.setType(PlacementType.ANTI_AFFINITY);\r\n    pp.setConstraints(Collections.singletonList(pc));\r\n    comp.setPlacementPolicy(pp);\r\n    exampleApp.addComponent(comp);\r\n    client.actionCreate(exampleApp);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    Service service = client.getStatus(exampleApp.getName());\r\n    Component component = service.getComponent(\"compa\");\r\n    Assert.assertEquals(\"Service state should be STABLE\", ServiceState.STABLE, service.getState());\r\n    Assert.assertEquals(\"3 containers are expected to be running\", 3, component.getContainers().size());\r\n    Set<String> nonAMContainerIdSet = new HashSet<>();\r\n    for (Container cont : component.getContainers()) {\r\n        nonAMContainerIdSet.add(cont.getId());\r\n    }\r\n    Set<String> hosts = new HashSet<>();\r\n    ApplicationReport report = client.getYarnClient().getApplicationReport(ApplicationId.fromString(exampleApp.getId()));\r\n    GetContainersRequest req = GetContainersRequest.newInstance(report.getCurrentApplicationAttemptId());\r\n    ResourceManager rm = getYarnCluster().getResourceManager();\r\n    for (ContainerReport contReport : rm.getClientRMService().getContainers(req).getContainerList()) {\r\n        if (!nonAMContainerIdSet.contains(contReport.getContainerId().toString())) {\r\n            continue;\r\n        }\r\n        if (hosts.contains(contReport.getNodeHttpAddress())) {\r\n            Assert.fail(\"Container \" + contReport.getContainerId() + \" came up in the same host as another container.\");\r\n        } else {\r\n            hosts.add(contReport.getNodeHttpAddress());\r\n        }\r\n    }\r\n    Map<String, Long> compCounts = new HashMap<>();\r\n    compCounts.put(\"compa\", 5L);\r\n    exampleApp.getComponent(\"compa\").setNumberOfContainers(5L);\r\n    client.flexByRestService(exampleApp.getName(), compCounts);\r\n    try {\r\n        waitForServiceToBeStable(client, exampleApp, 10000);\r\n        Assert.fail(\"Service should not be in a stable state. It should throw \" + \"a timeout exception.\");\r\n    } catch (Exception e) {\r\n        service = client.getStatus(exampleApp.getName());\r\n        component = service.getComponent(\"compa\");\r\n        Assert.assertNotEquals(\"Service state should not be STABLE\", ServiceState.STABLE, service.getState());\r\n        Assert.assertEquals(\"Component state should be FLEXING\", ComponentState.FLEXING, component.getState());\r\n        Assert.assertEquals(\"3 containers are expected to be running\", 3, component.getContainers().size());\r\n    }\r\n    compCounts = new HashMap<>();\r\n    compCounts.put(\"compa\", 4L);\r\n    exampleApp.getComponent(\"compa\").setNumberOfContainers(4L);\r\n    client.flexByRestService(exampleApp.getName(), compCounts);\r\n    try {\r\n        waitForServiceToBeStable(client, exampleApp, 10000);\r\n        Assert.fail(\"Service should not be in a stable state. It should throw \" + \"a timeout exception.\");\r\n    } catch (Exception e) {\r\n        service = client.getStatus(exampleApp.getName());\r\n        component = service.getComponent(\"compa\");\r\n        Assert.assertNotEquals(\"Service state should not be STABLE\", ServiceState.STABLE, service.getState());\r\n        Assert.assertEquals(\"Component state should be FLEXING\", ComponentState.FLEXING, component.getState());\r\n        Assert.assertEquals(\"3 containers are expected to be running\", 3, component.getContainers().size());\r\n    }\r\n    compCounts = new HashMap<>();\r\n    compCounts.put(\"compa\", 3L);\r\n    exampleApp.getComponent(\"compa\").setNumberOfContainers(3L);\r\n    client.flexByRestService(exampleApp.getName(), compCounts);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    LOG.info(\"Stop/destroy service {}\", exampleApp);\r\n    client.actionStop(exampleApp.getName(), true);\r\n    client.actionDestroy(exampleApp.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testAMSigtermDoesNotKillApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testAMSigtermDoesNotKillApplication() throws Exception\n{\r\n    runAMSignalTest(SignalContainerCommand.GRACEFUL_SHUTDOWN);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testAMSigkillDoesNotKillApplication",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testAMSigkillDoesNotKillApplication() throws Exception\n{\r\n    runAMSignalTest(SignalContainerCommand.FORCEFUL_SHUTDOWN);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "runAMSignalTest",
  "errType" : [ "YarnException|IOException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void runAMSignalTest(SignalContainerCommand signal) throws Exception\n{\r\n    setupInternal(NUM_NMS);\r\n    ServiceClient client = createClient(getConf());\r\n    Service exampleApp = createExampleApplication();\r\n    client.actionCreate(exampleApp);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    Service appStatus1 = client.getStatus(exampleApp.getName());\r\n    ApplicationId exampleAppId = ApplicationId.fromString(appStatus1.getId());\r\n    YarnClient yarnClient = createYarnClient(getConf());\r\n    ApplicationReport applicationReport = yarnClient.getApplicationReport(exampleAppId);\r\n    ApplicationAttemptId firstAttemptId = applicationReport.getCurrentApplicationAttemptId();\r\n    ApplicationAttemptReport attemptReport = yarnClient.getApplicationAttemptReport(firstAttemptId);\r\n    yarnClient.signalToContainer(attemptReport.getAMContainerId(), signal);\r\n    GenericTestUtils.waitFor(() -> {\r\n        try {\r\n            ApplicationReport ar = client.getYarnClient().getApplicationReport(exampleAppId);\r\n            YarnApplicationState state = ar.getYarnApplicationState();\r\n            Assert.assertTrue(state == YarnApplicationState.RUNNING || state == YarnApplicationState.ACCEPTED);\r\n            if (state != YarnApplicationState.RUNNING) {\r\n                return false;\r\n            }\r\n            if (ar.getCurrentApplicationAttemptId() == null || ar.getCurrentApplicationAttemptId().equals(firstAttemptId)) {\r\n                return false;\r\n            }\r\n            Service appStatus2 = client.getStatus(exampleApp.getName());\r\n            if (appStatus2.getState() != ServiceState.STABLE) {\r\n                return false;\r\n            }\r\n            Assert.assertEquals(getSortedContainerIds(appStatus1).toString(), getSortedContainerIds(appStatus2).toString());\r\n            return true;\r\n        } catch (YarnException | IOException e) {\r\n            throw new RuntimeException(\"while waiting\", e);\r\n        }\r\n    }, 2000, 200000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "getSortedContainerIds",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<String> getSortedContainerIds(Service s)\n{\r\n    List<String> containerIds = new ArrayList<>();\r\n    for (Component component : s.getComponents()) {\r\n        for (Container container : component.getContainers()) {\r\n            containerIds.add(container.getId());\r\n        }\r\n    }\r\n    Collections.sort(containerIds);\r\n    return containerIds;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testComponentHealthThresholdMonitor",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 47,
  "sourceCodeText" : "void testComponentHealthThresholdMonitor() throws Exception\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.RM_PLACEMENT_CONSTRAINTS_HANDLER, YarnConfiguration.SCHEDULER_RM_PLACEMENT_CONSTRAINTS_HANDLER);\r\n    conf.setInt(YarnConfiguration.RM_MAX_COMPLETED_APPLICATIONS, YarnConfiguration.DEFAULT_RM_MAX_COMPLETED_APPLICATIONS);\r\n    conf.setInt(YarnConfiguration.NM_VCORES, 1);\r\n    setConf(conf);\r\n    setupInternal(3);\r\n    ServiceClient client = createClient(getConf());\r\n    Service exampleApp = new Service();\r\n    exampleApp.setName(\"example-app\");\r\n    exampleApp.setVersion(\"v1\");\r\n    Component comp = createComponent(\"compa\", 3L, \"sleep 1000\");\r\n    PlacementPolicy pp = new PlacementPolicy();\r\n    PlacementConstraint pc = new PlacementConstraint();\r\n    pc.setName(\"CA1\");\r\n    pc.setTargetTags(Collections.singletonList(\"compa\"));\r\n    pc.setScope(PlacementScope.NODE);\r\n    pc.setType(PlacementType.ANTI_AFFINITY);\r\n    pp.setConstraints(Collections.singletonList(pc));\r\n    comp.setPlacementPolicy(pp);\r\n    Configuration config = new Configuration();\r\n    config.setProperty(CONTAINER_HEALTH_THRESHOLD_PERCENT, \"65\");\r\n    config.setProperty(CONTAINER_HEALTH_THRESHOLD_WINDOW_SEC, \"3\");\r\n    config.setProperty(CONTAINER_HEALTH_THRESHOLD_INIT_DELAY_SEC, \"0\");\r\n    config.setProperty(CONTAINER_HEALTH_THRESHOLD_POLL_FREQUENCY_SEC, \"1\");\r\n    config.setProperty(DEFAULT_READINESS_CHECK_ENABLED, \"false\");\r\n    comp.setConfiguration(config);\r\n    exampleApp.addComponent(comp);\r\n    Configuration serviceConfig = new Configuration();\r\n    serviceConfig.setProperty(AM_RESTART_MAX, \"1\");\r\n    exampleApp.setConfiguration(serviceConfig);\r\n    client.actionCreate(exampleApp);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    Service service = client.getStatus(exampleApp.getName());\r\n    Component component = service.getComponent(\"compa\");\r\n    Assert.assertEquals(\"Service state should be STABLE\", ServiceState.STABLE, service.getState());\r\n    Assert.assertEquals(\"3 containers are expected to be running\", 3, component.getContainers().size());\r\n    Map<String, Long> compCounts = new HashMap<>();\r\n    compCounts.put(\"compa\", 4L);\r\n    exampleApp.getComponent(\"compa\").setNumberOfContainers(4L);\r\n    client.flexByRestService(exampleApp.getName(), compCounts);\r\n    try {\r\n        waitForServiceToBeStable(client, exampleApp, 6000);\r\n        Assert.fail(\"Service should not be in a stable state. It should throw \" + \"a timeout exception.\");\r\n    } catch (Exception e) {\r\n        service = client.getStatus(exampleApp.getName());\r\n        component = service.getComponent(\"compa\");\r\n        Assert.assertEquals(\"Service state should be STARTED\", ServiceState.STARTED, service.getState());\r\n        Assert.assertEquals(\"Component state should be FLEXING\", ComponentState.FLEXING, component.getState());\r\n        Assert.assertEquals(\"3 containers are expected to be running\", 3, component.getContainers().size());\r\n    }\r\n    compCounts.put(\"compa\", 5L);\r\n    exampleApp.getComponent(\"compa\").setNumberOfContainers(5L);\r\n    client.flexByRestService(exampleApp.getName(), compCounts);\r\n    try {\r\n        waitForServiceToBeInState(client, exampleApp, ServiceState.FAILED, 14000);\r\n    } catch (Exception e) {\r\n        Assert.fail(\"Should not have thrown exception\");\r\n    }\r\n    LOG.info(\"Destroy service {}\", exampleApp);\r\n    client.actionDestroy(exampleApp.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "checkContainerLaunchDependencies",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void checkContainerLaunchDependencies(ServiceClient client, Service exampleApp, String... compOrder) throws IOException, YarnException\n{\r\n    Service retrievedApp = client.getStatus(exampleApp.getName());\r\n    List<Container> containerList = new ArrayList<>();\r\n    for (Component component : retrievedApp.getComponents()) {\r\n        containerList.addAll(component.getContainers());\r\n    }\r\n    containerList.sort((o1, o2) -> o1.getLaunchTime().compareTo(o2.getLaunchTime()));\r\n    LOG.info(\"containerList: \" + containerList);\r\n    int index = 0;\r\n    for (String comp : compOrder) {\r\n        long num = retrievedApp.getComponent(comp).getNumberOfContainers();\r\n        for (int i = 0; i < num; i++) {\r\n            String compInstanceName = containerList.get(index).getComponentInstanceName();\r\n            String compName = compInstanceName.substring(0, compInstanceName.lastIndexOf('-'));\r\n            Assert.assertEquals(comp, compName);\r\n            index++;\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "flexComponents",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Map<String, Long> flexComponents(ServiceClient client, Service exampleApp, long count) throws YarnException, IOException\n{\r\n    Map<String, Long> compCounts = new HashMap<>();\r\n    compCounts.put(\"compa\", count);\r\n    compCounts.put(\"compb\", count);\r\n    exampleApp.getComponent(\"compa\").setNumberOfContainers(count);\r\n    exampleApp.getComponent(\"compb\").setNumberOfContainers(count);\r\n    client.flexByRestService(exampleApp.getName(), compCounts);\r\n    return compCounts;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "checkCompInstancesInOrder",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkCompInstancesInOrder(ServiceClient client, Service exampleApp) throws IOException, YarnException, TimeoutException, InterruptedException\n{\r\n    waitForContainers(client, exampleApp);\r\n    Service service = client.getStatus(exampleApp.getName());\r\n    for (Component comp : service.getComponents()) {\r\n        checkEachCompInstancesInOrder(comp, exampleApp.getName());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "waitForContainers",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void waitForContainers(ServiceClient client, Service exampleApp) throws TimeoutException, InterruptedException\n{\r\n    GenericTestUtils.waitFor(() -> {\r\n        try {\r\n            Service service = client.getStatus(exampleApp.getName());\r\n            for (Component comp : service.getComponents()) {\r\n                if (comp.getContainers().size() != comp.getNumberOfContainers()) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        } catch (Exception e) {\r\n            return false;\r\n        }\r\n    }, 2000, 200000);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "checkEachCompInstancesInOrder",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void checkEachCompInstancesInOrder(Component component, String serviceName) throws TimeoutException, InterruptedException\n{\r\n    TreeSet<String> instances = new TreeSet<>();\r\n    for (Container container : component.getContainers()) {\r\n        instances.add(container.getComponentInstanceName());\r\n        String componentZKPath = RegistryUtils.componentPath(RegistryUtils.currentUser(), YarnServiceConstants.APP_TYPE, serviceName, RegistryPathUtils.encodeYarnID(container.getId()));\r\n        GenericTestUtils.waitFor(() -> {\r\n            try {\r\n                return getCuratorService().zkPathExists(componentZKPath);\r\n            } catch (IOException e) {\r\n                return false;\r\n            }\r\n        }, 1000, 60000);\r\n    }\r\n    int i = 0;\r\n    for (String s : instances) {\r\n        assertThat(s).isEqualTo(component.getName() + \"-\" + i);\r\n        i++;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testRestartServiceForNonExistingInRM",
  "errType" : [ "ApplicationNotFoundException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testRestartServiceForNonExistingInRM() throws Exception\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setInt(YarnConfiguration.RM_MAX_COMPLETED_APPLICATIONS, 0);\r\n    setConf(conf);\r\n    setupInternal(NUM_NMS);\r\n    ServiceClient client = createClient(getConf());\r\n    Service exampleApp = createExampleApplication();\r\n    client.actionCreate(exampleApp);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    try {\r\n        client.actionStop(exampleApp.getName(), true);\r\n    } catch (ApplicationNotFoundException e) {\r\n        LOG.info(\"ignore ApplicationNotFoundException during stopping\");\r\n    }\r\n    client.actionStart(exampleApp.getName());\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    Service service = client.getStatus(exampleApp.getName());\r\n    Assert.assertEquals(\"Restarted service state should be STABLE\", ServiceState.STABLE, service.getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testAMFailureValidity",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testAMFailureValidity() throws Exception\n{\r\n    setupInternal(NUM_NMS);\r\n    ServiceClient client = createClient(getConf());\r\n    Service exampleApp = new Service();\r\n    exampleApp.setName(\"example-app\");\r\n    exampleApp.setVersion(\"v1\");\r\n    exampleApp.addComponent(createComponent(\"compa\", 2, \"sleep 1000\"));\r\n    Configuration serviceConfig = new Configuration();\r\n    serviceConfig.setProperty(AM_RESTART_MAX, \"2\");\r\n    serviceConfig.setProperty(AM_FAILURES_VALIDITY_INTERVAL, \"1000\");\r\n    exampleApp.setConfiguration(serviceConfig);\r\n    client.actionCreate(exampleApp);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    Service appStatus1 = client.getStatus(exampleApp.getName());\r\n    ApplicationId exampleAppId = ApplicationId.fromString(appStatus1.getId());\r\n    YarnClient yarnClient = createYarnClient(getConf());\r\n    ApplicationReport applicationReport = yarnClient.getApplicationReport(exampleAppId);\r\n    ApplicationAttemptReport attemptReport = yarnClient.getApplicationAttemptReport(applicationReport.getCurrentApplicationAttemptId());\r\n    yarnClient.signalToContainer(attemptReport.getAMContainerId(), SignalContainerCommand.GRACEFUL_SHUTDOWN);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    Assert.assertEquals(ServiceState.STABLE, client.getStatus(exampleApp.getName()).getState());\r\n    Thread.sleep(2000);\r\n    applicationReport = yarnClient.getApplicationReport(exampleAppId);\r\n    attemptReport = yarnClient.getApplicationAttemptReport(applicationReport.getCurrentApplicationAttemptId());\r\n    yarnClient.signalToContainer(attemptReport.getAMContainerId(), SignalContainerCommand.GRACEFUL_SHUTDOWN);\r\n    waitForServiceToBeStable(client, exampleApp);\r\n    Assert.assertEquals(ServiceState.STABLE, client.getStatus(exampleApp.getName()).getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "createServiceWithSingleComp",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Service createServiceWithSingleComp(int memory)\n{\r\n    Service service = new Service();\r\n    service.setName(\"example-app\");\r\n    service.setVersion(\"v1\");\r\n    Component component = new Component();\r\n    component.setName(\"sleep\");\r\n    component.setNumberOfContainers(1L);\r\n    component.setLaunchCommand(\"sleep 1000\");\r\n    org.apache.hadoop.yarn.service.api.records.Resource resource = new Resource();\r\n    resource.setMemory(Integer.toString(memory));\r\n    resource.setCpus(1);\r\n    component.setResource(resource);\r\n    service.addComponent(component);\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service",
  "methodName" : "testServiceSameNameWithFailure",
  "errType" : [ "YarnException", "SliderException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testServiceSameNameWithFailure() throws Exception\n{\r\n    setupInternal(NUM_NMS);\r\n    ServiceClient client = createClient(getConf());\r\n    try {\r\n        client.actionCreate(createServiceWithSingleComp(1024000));\r\n        Assert.fail(\"Service should throw YarnException as memory is \" + \"configured as 1000GB, which is more than allowed\");\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(true);\r\n    }\r\n    Service service = createServiceWithSingleComp(128);\r\n    try {\r\n        client.actionCreate(service);\r\n    } catch (SliderException e) {\r\n        Assert.fail(\"Not able to submit service as the files related to\" + \" failed service with same name are not cleared\");\r\n    }\r\n    waitForServiceToBeStable(client, service);\r\n    client.actionStop(service.getName(), true);\r\n    client.actionDestroy(service.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testAMEnvCustomClasspath",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testAMEnvCustomClasspath() throws Exception\n{\r\n    Service service = createService();\r\n    service.getComponents().forEach(comp -> comp.setRestartPolicy(Component.RestartPolicyEnum.NEVER));\r\n    ServiceClient client = MockServiceClient.create(rule, service, true);\r\n    String oldParam = client.getConfig().get(\"yarn.service.classpath\", \"\");\r\n    String originalPath = client.addAMEnv().get(\"CLASSPATH\");\r\n    client.getConfig().set(\"yarn.service.classpath\", \"{{VAR_1}},{{VAR_2}}\");\r\n    String newPath = client.addAMEnv().get(\"CLASSPATH\");\r\n    Assert.assertEquals(originalPath + \"<CPS>{{VAR_1}}<CPS>{{VAR_2}}\", newPath);\r\n    client.getConfig().set(\"yarn.service.classpath\", oldParam);\r\n    newPath = client.addAMEnv().get(\"CLASSPATH\");\r\n    Assert.assertEquals(originalPath, newPath);\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testUpgradeDisabledByDefault",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testUpgradeDisabledByDefault() throws Exception\n{\r\n    Service service = createService();\r\n    ServiceClient client = MockServiceClient.create(rule, service, false);\r\n    service.setVersion(\"v2\");\r\n    try {\r\n        client.initiateUpgrade(service);\r\n    } catch (YarnException ex) {\r\n        Assert.assertEquals(ErrorStrings.SERVICE_UPGRADE_DISABLED, ex.getMessage());\r\n        return;\r\n    }\r\n    Assert.fail();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testActionServiceUpgrade",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testActionServiceUpgrade() throws Exception\n{\r\n    Service service = createService();\r\n    ServiceClient client = MockServiceClient.create(rule, service, true);\r\n    service.setVersion(\"v2\");\r\n    client.initiateUpgrade(service);\r\n    Service fromFs = ServiceApiUtil.loadServiceUpgrade(rule.getFs(), service.getName(), service.getVersion());\r\n    Assert.assertEquals(service.getName(), fromFs.getName());\r\n    Assert.assertEquals(service.getVersion(), fromFs.getVersion());\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testActionCompInstanceUpgrade",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testActionCompInstanceUpgrade() throws Exception\n{\r\n    Service service = createService();\r\n    MockServiceClient client = MockServiceClient.create(rule, service, true);\r\n    service.setVersion(\"v2\");\r\n    client.initiateUpgrade(service);\r\n    Component comp = service.getComponents().iterator().next();\r\n    ContainerId containerId = ContainerId.newContainerId(client.attemptId, 1L);\r\n    comp.addContainer(new Container().id(containerId.toString()));\r\n    client.actionUpgrade(service, comp.getContainers());\r\n    CompInstancesUpgradeResponseProto response = client.getLastProxyResponse(CompInstancesUpgradeResponseProto.class);\r\n    Assert.assertNotNull(\"upgrade did not complete\", response);\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testGetCompInstances",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testGetCompInstances() throws Exception\n{\r\n    Service service = createService();\r\n    MockServiceClient client = MockServiceClient.create(rule, service, true);\r\n    service.setVersion(\"v2\");\r\n    client.initiateUpgrade(service);\r\n    Component comp = service.getComponents().iterator().next();\r\n    ContainerId containerId = ContainerId.newContainerId(client.attemptId, 1L);\r\n    comp.addContainer(new Container().id(containerId.toString()));\r\n    ComponentContainers[] compContainers = client.getContainers(service.getName(), Lists.newArrayList(\"compa\"), \"v1\", null);\r\n    Assert.assertEquals(\"num comp\", 1, compContainers.length);\r\n    Assert.assertEquals(\"comp name\", \"compa\", compContainers[0].getComponentName());\r\n    Assert.assertEquals(\"num containers\", 2, compContainers[0].getContainers().size());\r\n    client.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "testUpgradeDisabledWhenAllCompsHaveNeverRestartPolicy",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testUpgradeDisabledWhenAllCompsHaveNeverRestartPolicy() throws Exception\n{\r\n    Service service = createService();\r\n    service.getComponents().forEach(comp -> comp.setRestartPolicy(Component.RestartPolicyEnum.NEVER));\r\n    ServiceClient client = MockServiceClient.create(rule, service, true);\r\n    service.setVersion(\"v2\");\r\n    try {\r\n        client.initiateUpgrade(service);\r\n    } catch (YarnException ex) {\r\n        Assert.assertEquals(\"All the components of the service \" + service.getName() + \" have \" + Component.RestartPolicyEnum.NEVER + \" restart policy, so it cannot be upgraded.\", ex.getMessage());\r\n        return;\r\n    }\r\n    Assert.fail();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "createService",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Service createService() throws IOException, YarnException\n{\r\n    Service service = ServiceTestUtils.createExampleApplication();\r\n    service.setVersion(\"v1\");\r\n    service.setState(ServiceState.UPGRADING);\r\n    return service;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-applications\\hadoop-yarn-services\\hadoop-yarn-services-core\\src\\test\\java\\org\\apache\\hadoop\\yarn\\service\\client",
  "methodName" : "createMockYarnClient",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "YarnClient createMockYarnClient() throws IOException, YarnException\n{\r\n    YarnClient yarnClient = mock(YarnClient.class);\r\n    when(yarnClient.getApplications(any(GetApplicationsRequest.class))).thenReturn(new ArrayList<>());\r\n    return yarnClient;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]