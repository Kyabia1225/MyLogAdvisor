[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    setPolicy(new RejectAMRMProxyPolicy());\r\n    setPolicyInfo(mock(WeightedPolicyInfo.class));\r\n    for (int i = 1; i <= 2; i++) {\r\n        SubClusterIdInfo sc = new SubClusterIdInfo(\"sc\" + i);\r\n        SubClusterInfo sci = mock(SubClusterInfo.class);\r\n        when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);\r\n        when(sci.getSubClusterId()).thenReturn(sc.toId());\r\n        getActiveSubclusters().put(sc.toId(), sci);\r\n    }\r\n    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(), mock(WeightedPolicyInfo.class), getActiveSubclusters());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testSplitAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testSplitAllocateRequest() throws Exception\n{\r\n    String[] hosts = new String[] { \"host1\", \"host2\" };\r\n    List<ResourceRequest> resourceRequests = FederationPoliciesTestUtil.createResourceRequests(hosts, 2 * 1024, 2, 1, 3, null, false);\r\n    Map<SubClusterId, List<ResourceRequest>> response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "createStateStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FederationStateStore createStateStore()\n{\r\n    Configuration conf = new Configuration();\r\n    super.setConf(conf);\r\n    return new MemoryFederationStateStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    generateByNewInstance(ApplicationId.class);\r\n    generateByNewInstance(Version.class);\r\n    generateByNewInstance(SubClusterId.class);\r\n    generateByNewInstance(SubClusterInfo.class);\r\n    generateByNewInstance(ApplicationHomeSubCluster.class);\r\n    generateByNewInstance(SubClusterPolicyConfiguration.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testSubClusterId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSubClusterId() throws Exception\n{\r\n    validatePBImplRecord(SubClusterIdPBImpl.class, SubClusterIdProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSubClusterInfo() throws Exception\n{\r\n    validatePBImplRecord(SubClusterInfoPBImpl.class, SubClusterInfoProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testSubClusterRegisterRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSubClusterRegisterRequest() throws Exception\n{\r\n    validatePBImplRecord(SubClusterRegisterRequestPBImpl.class, SubClusterRegisterRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testSubClusterRegisterResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSubClusterRegisterResponse() throws Exception\n{\r\n    validatePBImplRecord(SubClusterRegisterResponsePBImpl.class, SubClusterRegisterResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testSubClusterDeregisterRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSubClusterDeregisterRequest() throws Exception\n{\r\n    validatePBImplRecord(SubClusterDeregisterRequestPBImpl.class, SubClusterDeregisterRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testSubClusterDeregisterResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSubClusterDeregisterResponse() throws Exception\n{\r\n    validatePBImplRecord(SubClusterDeregisterResponsePBImpl.class, SubClusterDeregisterResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testSubClusterHeartbeatRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSubClusterHeartbeatRequest() throws Exception\n{\r\n    validatePBImplRecord(SubClusterHeartbeatRequestPBImpl.class, SubClusterHeartbeatRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testSubClusterHeartbeatResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSubClusterHeartbeatResponse() throws Exception\n{\r\n    validatePBImplRecord(SubClusterHeartbeatResponsePBImpl.class, SubClusterHeartbeatResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testGetSubClusterRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetSubClusterRequest() throws Exception\n{\r\n    validatePBImplRecord(GetSubClusterInfoRequestPBImpl.class, GetSubClusterInfoRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testGetSubClusterResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetSubClusterResponse() throws Exception\n{\r\n    validatePBImplRecord(GetSubClusterInfoResponsePBImpl.class, GetSubClusterInfoResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testGetSubClustersInfoRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetSubClustersInfoRequest() throws Exception\n{\r\n    validatePBImplRecord(GetSubClustersInfoRequestPBImpl.class, GetSubClustersInfoRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testGetSubClustersInfoResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetSubClustersInfoResponse() throws Exception\n{\r\n    validatePBImplRecord(GetSubClustersInfoResponsePBImpl.class, GetSubClustersInfoResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testAddApplicationHomeSubClusterRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testAddApplicationHomeSubClusterRequest() throws Exception\n{\r\n    validatePBImplRecord(AddApplicationHomeSubClusterRequestPBImpl.class, AddApplicationHomeSubClusterRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testAddApplicationHomeSubClusterResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testAddApplicationHomeSubClusterResponse() throws Exception\n{\r\n    validatePBImplRecord(AddApplicationHomeSubClusterResponsePBImpl.class, AddApplicationHomeSubClusterResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testUpdateApplicationHomeSubClusterRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testUpdateApplicationHomeSubClusterRequest() throws Exception\n{\r\n    validatePBImplRecord(UpdateApplicationHomeSubClusterRequestPBImpl.class, UpdateApplicationHomeSubClusterRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testUpdateApplicationHomeSubClusterResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testUpdateApplicationHomeSubClusterResponse() throws Exception\n{\r\n    validatePBImplRecord(UpdateApplicationHomeSubClusterResponsePBImpl.class, UpdateApplicationHomeSubClusterResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testGetApplicationHomeSubClusterRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetApplicationHomeSubClusterRequest() throws Exception\n{\r\n    validatePBImplRecord(GetApplicationHomeSubClusterRequestPBImpl.class, GetApplicationHomeSubClusterRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testGetApplicationHomeSubClusterResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetApplicationHomeSubClusterResponse() throws Exception\n{\r\n    validatePBImplRecord(GetApplicationHomeSubClusterResponsePBImpl.class, GetApplicationHomeSubClusterResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testGetApplicationsHomeSubClusterRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetApplicationsHomeSubClusterRequest() throws Exception\n{\r\n    validatePBImplRecord(GetApplicationsHomeSubClusterRequestPBImpl.class, GetApplicationsHomeSubClusterRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testGetApplicationsHomeSubClusterResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetApplicationsHomeSubClusterResponse() throws Exception\n{\r\n    validatePBImplRecord(GetApplicationsHomeSubClusterResponsePBImpl.class, GetApplicationsHomeSubClusterResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testDeleteApplicationHomeSubClusterRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDeleteApplicationHomeSubClusterRequest() throws Exception\n{\r\n    validatePBImplRecord(DeleteApplicationHomeSubClusterRequestPBImpl.class, DeleteApplicationHomeSubClusterRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testDeleteApplicationHomeSubClusterResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testDeleteApplicationHomeSubClusterResponse() throws Exception\n{\r\n    validatePBImplRecord(DeleteApplicationHomeSubClusterResponsePBImpl.class, DeleteApplicationHomeSubClusterResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testGetSubClusterPolicyConfigurationRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetSubClusterPolicyConfigurationRequest() throws Exception\n{\r\n    validatePBImplRecord(GetSubClusterPolicyConfigurationRequestPBImpl.class, GetSubClusterPolicyConfigurationRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testGetSubClusterPolicyConfigurationResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetSubClusterPolicyConfigurationResponse() throws Exception\n{\r\n    validatePBImplRecord(GetSubClusterPolicyConfigurationResponsePBImpl.class, GetSubClusterPolicyConfigurationResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testSetSubClusterPolicyConfigurationRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSetSubClusterPolicyConfigurationRequest() throws Exception\n{\r\n    validatePBImplRecord(SetSubClusterPolicyConfigurationRequestPBImpl.class, SetSubClusterPolicyConfigurationRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testSetSubClusterPolicyConfigurationResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSetSubClusterPolicyConfigurationResponse() throws Exception\n{\r\n    validatePBImplRecord(SetSubClusterPolicyConfigurationResponsePBImpl.class, SetSubClusterPolicyConfigurationResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testGetSubClusterPoliciesConfigurationsRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetSubClusterPoliciesConfigurationsRequest() throws Exception\n{\r\n    validatePBImplRecord(GetSubClusterPoliciesConfigurationsRequestPBImpl.class, GetSubClusterPoliciesConfigurationsRequestProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\records",
  "methodName" : "testGetSubClusterPoliciesConfigurationsResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetSubClusterPoliciesConfigurationsResponse() throws Exception\n{\r\n    validatePBImplRecord(GetSubClusterPoliciesConfigurationsResponsePBImpl.class, GetSubClusterPoliciesConfigurationsResponseProto.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "send4LetterWord",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "String send4LetterWord(String host, int port, String cmd) throws IOException\n{\r\n    Socket sock = new Socket(host, port);\r\n    BufferedReader reader = null;\r\n    try {\r\n        OutputStream outstream = sock.getOutputStream();\r\n        outstream.write(cmd.getBytes());\r\n        outstream.flush();\r\n        sock.shutdownOutput();\r\n        reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));\r\n        StringBuilder sb = new StringBuilder();\r\n        String line;\r\n        while ((line = reader.readLine()) != null) {\r\n            sb.append(line + \"\\n\");\r\n        }\r\n        return sb.toString();\r\n    } finally {\r\n        sock.close();\r\n        if (reader != null) {\r\n            reader.close();\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "waitForServerDown",
  "errType" : [ "IOException", "InterruptedException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "boolean waitForServerDown(String hp, long timeout)\n{\r\n    long start = System.currentTimeMillis();\r\n    while (true) {\r\n        try {\r\n            String host = hp.split(\":\")[0];\r\n            int port = Integer.parseInt(hp.split(\":\")[1]);\r\n            send4LetterWord(host, port, \"stat\");\r\n        } catch (IOException e) {\r\n            return true;\r\n        }\r\n        if (System.currentTimeMillis() > start + timeout) {\r\n            break;\r\n        }\r\n        try {\r\n            Thread.sleep(250);\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "waitForServerUp",
  "errType" : [ "IOException", "InterruptedException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "boolean waitForServerUp(String hp, long timeout)\n{\r\n    long start = System.currentTimeMillis();\r\n    while (true) {\r\n        try {\r\n            String host = hp.split(\":\")[0];\r\n            int port = Integer.parseInt(hp.split(\":\")[1]);\r\n            String result = send4LetterWord(host, port, \"stat\");\r\n            if (result.startsWith(\"Zookeeper version:\")) {\r\n                return true;\r\n            }\r\n        } catch (IOException e) {\r\n        }\r\n        if (System.currentTimeMillis() > start + timeout) {\r\n            break;\r\n        }\r\n        try {\r\n            Thread.sleep(250);\r\n        } catch (InterruptedException e) {\r\n        }\r\n    }\r\n    return false;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "createTmpDir",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "File createTmpDir(File parentDir) throws IOException\n{\r\n    File tmpFile = File.createTempFile(\"test\", \".junit\", parentDir);\r\n    File tmpDir = new File(tmpFile + \".dir\");\r\n    Assert.assertFalse(tmpDir.exists());\r\n    Assert.assertTrue(tmpDir.mkdirs());\r\n    return tmpDir;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setUp() throws IOException, InterruptedException\n{\r\n    System.setProperty(\"zookeeper.preAllocSize\", \"100\");\r\n    System.setProperty(\"zookeeper.4lw.commands.whitelist\", \"*\");\r\n    FileTxnLog.setPreallocSize(100 * 1024);\r\n    if (!BASETEST.exists()) {\r\n        BASETEST.mkdirs();\r\n    }\r\n    File dataDir = createTmpDir(BASETEST);\r\n    zks = new ZooKeeperServer(dataDir, dataDir, 3000);\r\n    final int PORT = Integer.parseInt(hostPort.split(\":\")[1]);\r\n    if (factory == null) {\r\n        factory = new NIOServerCnxnFactory();\r\n        factory.configure(new InetSocketAddress(PORT), maxCnxns);\r\n    }\r\n    factory.startup(zks);\r\n    Assert.assertTrue(\"waiting for server up\", waitForServerUp(\"127.0.0.1:\" + PORT, CONNECTION_TIMEOUT));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "tearDown",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void tearDown() throws IOException, InterruptedException\n{\r\n    if (zks != null) {\r\n        ZKDatabase zkDb = zks.getZKDatabase();\r\n        factory.shutdown();\r\n        try {\r\n            zkDb.close();\r\n        } catch (IOException ie) {\r\n        }\r\n        final int PORT = Integer.parseInt(hostPort.split(\":\")[1]);\r\n        Assert.assertTrue(\"waiting for server down\", waitForServerDown(\"127.0.0.1:\" + PORT, CONNECTION_TIMEOUT));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "testzkClient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testzkClient() throws Exception\n{\r\n    test(\"/some/test\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "test",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void test(String testClient) throws Exception\n{\r\n    ZKClient client = new ZKClient(hostPort);\r\n    client.registerService(\"/nodemanager\", \"hostPort\");\r\n    client.unregisterService(\"/nodemanager\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\lib",
  "methodName" : "getOpenPort",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 1,
  "sourceCodeText" : "int getOpenPort()\n{\r\n    try {\r\n        return ServerSocketUtil.getPorts(1)[0];\r\n    } catch (IOException e) {\r\n        return DEFAULT_PORT;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testPbRecordFactory",
  "errType" : [ "YarnRuntimeException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testPbRecordFactory()\n{\r\n    RecordFactory pbRecordFactory = RecordFactoryPBImpl.get();\r\n    try {\r\n        NodeHeartbeatRequest request = pbRecordFactory.newRecordInstance(NodeHeartbeatRequest.class);\r\n        Assert.assertEquals(NodeHeartbeatRequestPBImpl.class, request.getClass());\r\n    } catch (YarnRuntimeException e) {\r\n        e.printStackTrace();\r\n        Assert.fail(\"Failed to crete record\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    wfp = new UniformBroadcastPolicyManager();\r\n    wfp.setQueue(\"queue1\");\r\n    expectedPolicyManager = UniformBroadcastPolicyManager.class;\r\n    expectedAMRMProxyPolicy = BroadcastAMRMProxyPolicy.class;\r\n    expectedRouterPolicy = UniformRandomRouterPolicy.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\utils",
  "methodName" : "testExceptionHandling",
  "errType" : [ "InvocationTargetException", "IOException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testExceptionHandling() throws Exception\n{\r\n    InvocationHandler rtExcHandler = new InvocationHandler() {\r\n\r\n        @Override\r\n        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\r\n            throw new RuntimeException(\"forced runtime error\");\r\n        }\r\n    };\r\n    DBIterator dbiter = (DBIterator) Proxy.newProxyInstance(DBIterator.class.getClassLoader(), new Class[] { DBIterator.class }, rtExcHandler);\r\n    LeveldbIterator iter = new LeveldbIterator(dbiter);\r\n    for (CallInfo ci : RTEXC_METHODS) {\r\n        Method method = iter.getClass().getMethod(ci.methodName, ci.argTypes);\r\n        assertNotNull(\"unable to locate method \" + ci.methodName, method);\r\n        try {\r\n            method.invoke(iter, ci.args);\r\n            fail(\"operation should have thrown\");\r\n        } catch (InvocationTargetException ite) {\r\n            Throwable exc = ite.getTargetException();\r\n            assertTrue(\"Method \" + ci.methodName + \" threw non-DBException: \" + exc, exc instanceof DBException);\r\n            assertFalse(\"Method \" + ci.methodName + \" double-wrapped DBException\", exc.getCause() instanceof DBException);\r\n        }\r\n    }\r\n    try {\r\n        iter.close();\r\n        fail(\"operation shoul have thrown\");\r\n    } catch (IOException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "testGetWeightedRandom",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetWeightedRandom()\n{\r\n    int i;\r\n    float[] weights = new float[] { 0, 0.1f, 0.2f, 0.2f, -0.1f, 0.1f, 0.2f, 0.1f, 0.1f };\r\n    float[] expectedWeights = new float[] { 0, 0.1f, 0.2f, 0.2f, 0, 0.1f, 0.2f, 0.1f, 0.1f };\r\n    int[] result = new int[weights.length];\r\n    ArrayList<Float> weightsList = new ArrayList<>();\r\n    for (float weight : weights) {\r\n        weightsList.add(weight);\r\n    }\r\n    int n = 10000000;\r\n    for (i = 0; i < n; i++) {\r\n        int sample = FederationPolicyUtils.getWeightedRandom(weightsList);\r\n        result[sample]++;\r\n    }\r\n    for (i = 0; i < weights.length; i++) {\r\n        double actualWeight = (float) result[i] / n;\r\n        System.out.println(i + \" \" + actualWeight);\r\n        Assert.assertTrue(\"Index \" + i + \" Actual weight: \" + actualWeight + \" expected weight: \" + expectedWeights[i], Math.abs(actualWeight - expectedWeights[i]) < 0.01);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "init",
  "errType" : [ "YarnException", "SQLException" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void init(Configuration conf)\n{\r\n    try {\r\n        super.init(conf);\r\n    } catch (YarnException e1) {\r\n        LOG.error(\"ERROR: failed to init HSQLDB \" + e1.getMessage());\r\n    }\r\n    try {\r\n        conn = super.conn;\r\n        LOG.info(\"Database Init: Start\");\r\n        conn.prepareStatement(TABLE_APPLICATIONSHOMESUBCLUSTER).execute();\r\n        conn.prepareStatement(TABLE_MEMBERSHIP).execute();\r\n        conn.prepareStatement(TABLE_POLICIES).execute();\r\n        conn.prepareStatement(SP_REGISTERSUBCLUSTER).execute();\r\n        conn.prepareStatement(SP_DEREGISTERSUBCLUSTER).execute();\r\n        conn.prepareStatement(SP_SUBCLUSTERHEARTBEAT).execute();\r\n        conn.prepareStatement(SP_GETSUBCLUSTER).execute();\r\n        conn.prepareStatement(SP_GETSUBCLUSTERS).execute();\r\n        conn.prepareStatement(SP_ADDAPPLICATIONHOMESUBCLUSTER).execute();\r\n        conn.prepareStatement(SP_UPDATEAPPLICATIONHOMESUBCLUSTER).execute();\r\n        conn.prepareStatement(SP_GETAPPLICATIONHOMESUBCLUSTER).execute();\r\n        conn.prepareStatement(SP_GETAPPLICATIONSHOMESUBCLUSTER).execute();\r\n        conn.prepareStatement(SP_DELETEAPPLICATIONHOMESUBCLUSTER).execute();\r\n        conn.prepareStatement(SP_SETPOLICYCONFIGURATION).execute();\r\n        conn.prepareStatement(SP_GETPOLICYCONFIGURATION).execute();\r\n        conn.prepareStatement(SP_GETPOLICIESCONFIGURATIONS).execute();\r\n        LOG.info(\"Database Init: Complete\");\r\n    } catch (SQLException e) {\r\n        LOG.error(\"ERROR: failed to inizialize HSQLDB \" + e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "closeConnection",
  "errType" : [ "SQLException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void closeConnection()\n{\r\n    try {\r\n        conn.close();\r\n    } catch (SQLException e) {\r\n        LOG.error(\"ERROR: failed to close connection to HSQLDB DB \" + e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "testReinitilialize",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testReinitilialize() throws YarnException\n{\r\n    FederationPolicyInitializationContext fpc = new FederationPolicyInitializationContext();\r\n    ByteBuffer buf = getPolicyInfo().toByteBuffer();\r\n    fpc.setSubClusterPolicyConfiguration(SubClusterPolicyConfiguration.newInstance(\"queue1\", getPolicy().getClass().getCanonicalName(), buf));\r\n    fpc.setFederationSubclusterResolver(FederationPoliciesTestUtil.initResolver());\r\n    fpc.setFederationStateStoreFacade(FederationPoliciesTestUtil.initFacade());\r\n    getPolicy().reinitialize(fpc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "testReinitilializeBad1",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testReinitilializeBad1() throws YarnException\n{\r\n    getPolicy().reinitialize(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "testReinitilializeBad2",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testReinitilializeBad2() throws YarnException\n{\r\n    FederationPolicyInitializationContext fpc = new FederationPolicyInitializationContext();\r\n    getPolicy().reinitialize(fpc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "testReinitilializeBad3",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testReinitilializeBad3() throws YarnException\n{\r\n    FederationPolicyInitializationContext fpc = new FederationPolicyInitializationContext();\r\n    ByteBuffer buf = mock(ByteBuffer.class);\r\n    fpc.setSubClusterPolicyConfiguration(SubClusterPolicyConfiguration.newInstance(\"queue1\", \"WrongPolicyName\", buf));\r\n    fpc.setFederationSubclusterResolver(FederationPoliciesTestUtil.initResolver());\r\n    fpc.setFederationStateStoreFacade(FederationPoliciesTestUtil.initFacade());\r\n    getPolicy().reinitialize(fpc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "testNoSubclusters",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNoSubclusters() throws YarnException\n{\r\n    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(), getPolicyInfo(), new HashMap<>());\r\n    ConfigurableFederationPolicy localPolicy = getPolicy();\r\n    if (localPolicy instanceof FederationRouterPolicy) {\r\n        ((FederationRouterPolicy) localPolicy).getHomeSubcluster(getApplicationSubmissionContext(), null);\r\n    } else {\r\n        String[] hosts = new String[] { \"host1\", \"host2\" };\r\n        List<ResourceRequest> resourceRequests = FederationPoliciesTestUtil.createResourceRequests(hosts, 2 * 1024, 2, 1, 3, null, false);\r\n        ((FederationAMRMProxyPolicy) localPolicy).splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getPolicy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ConfigurableFederationPolicy getPolicy()\n{\r\n    return policy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setPolicy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPolicy(ConfigurableFederationPolicy policy)\n{\r\n    this.policy = policy;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getPolicyInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "WeightedPolicyInfo getPolicyInfo()\n{\r\n    return policyInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setPolicyInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setPolicyInfo(WeightedPolicyInfo policyInfo)\n{\r\n    this.policyInfo = policyInfo;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getActiveSubclusters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Map<SubClusterId, SubClusterInfo> getActiveSubclusters()\n{\r\n    return activeSubclusters;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setActiveSubclusters",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setActiveSubclusters(Map<SubClusterId, SubClusterInfo> activeSubclusters)\n{\r\n    this.activeSubclusters = activeSubclusters;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getFederationPolicyContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FederationPolicyInitializationContext getFederationPolicyContext()\n{\r\n    return federationPolicyContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setFederationPolicyContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setFederationPolicyContext(FederationPolicyInitializationContext federationPolicyContext)\n{\r\n    this.federationPolicyContext = federationPolicyContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getApplicationSubmissionContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "ApplicationSubmissionContext getApplicationSubmissionContext()\n{\r\n    return applicationSubmissionContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setApplicationSubmissionContext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setApplicationSubmissionContext(ApplicationSubmissionContext applicationSubmissionContext)\n{\r\n    this.applicationSubmissionContext = applicationSubmissionContext;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getRand",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Random getRand()\n{\r\n    return rand;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setRand",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setRand(long seed)\n{\r\n    this.rand.setSeed(seed);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "SubClusterId getHomeSubCluster()\n{\r\n    return homeSubCluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setHomeSubCluster(SubClusterId homeSubCluster)\n{\r\n    this.homeSubCluster = homeSubCluster;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setMockActiveSubclusters",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setMockActiveSubclusters(int numSubclusters)\n{\r\n    for (int i = 1; i <= numSubclusters; i++) {\r\n        SubClusterIdInfo sc = new SubClusterIdInfo(\"sc\" + i);\r\n        SubClusterInfo sci = mock(SubClusterInfo.class);\r\n        when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);\r\n        when(sci.getSubClusterId()).thenReturn(sc.toId());\r\n        getActiveSubclusters().put(sc.toId(), sci);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testRegisterNodeManagerResponsePBImpl",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testRegisterNodeManagerResponsePBImpl()\n{\r\n    RegisterNodeManagerResponsePBImpl original = new RegisterNodeManagerResponsePBImpl();\r\n    original.setContainerTokenMasterKey(getMasterKey());\r\n    original.setNMTokenMasterKey(getMasterKey());\r\n    original.setNodeAction(NodeAction.NORMAL);\r\n    original.setDiagnosticsMessage(\"testDiagnosticMessage\");\r\n    RegisterNodeManagerResponsePBImpl copy = new RegisterNodeManagerResponsePBImpl(original.getProto());\r\n    assertEquals(1, copy.getContainerTokenMasterKey().getKeyId());\r\n    assertEquals(1, copy.getNMTokenMasterKey().getKeyId());\r\n    assertEquals(NodeAction.NORMAL, copy.getNodeAction());\r\n    assertEquals(\"testDiagnosticMessage\", copy.getDiagnosticsMessage());\r\n    assertFalse(copy.getAreNodeLabelsAcceptedByRM());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testRegisterNodeManagerResponsePBImplWithRMAcceptLbls",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRegisterNodeManagerResponsePBImplWithRMAcceptLbls()\n{\r\n    RegisterNodeManagerResponsePBImpl original = new RegisterNodeManagerResponsePBImpl();\r\n    original.setAreNodeLabelsAcceptedByRM(true);\r\n    RegisterNodeManagerResponsePBImpl copy = new RegisterNodeManagerResponsePBImpl(original.getProto());\r\n    assertTrue(copy.getAreNodeLabelsAcceptedByRM());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testNodeHeartbeatRequestPBImpl",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testNodeHeartbeatRequestPBImpl()\n{\r\n    NodeHeartbeatRequestPBImpl original = new NodeHeartbeatRequestPBImpl();\r\n    original.setLastKnownContainerTokenMasterKey(getMasterKey());\r\n    original.setLastKnownNMTokenMasterKey(getMasterKey());\r\n    original.setNodeStatus(getNodeStatus());\r\n    original.setNodeLabels(getValidNodeLabels());\r\n    Map<ApplicationId, AppCollectorData> collectors = getCollectors(false);\r\n    original.setRegisteringCollectors(collectors);\r\n    NodeHeartbeatRequestPBImpl copy = new NodeHeartbeatRequestPBImpl(original.getProto());\r\n    assertEquals(1, copy.getLastKnownContainerTokenMasterKey().getKeyId());\r\n    assertEquals(1, copy.getLastKnownNMTokenMasterKey().getKeyId());\r\n    assertEquals(\"localhost\", copy.getNodeStatus().getNodeId().getHost());\r\n    assertEquals(collectors, copy.getRegisteringCollectors());\r\n    Assert.assertTrue(original.getNodeLabels().containsAll(copy.getNodeLabels()));\r\n    original.setNodeLabels(new HashSet<NodeLabel>());\r\n    copy = new NodeHeartbeatRequestPBImpl(original.getProto());\r\n    Assert.assertNotNull(copy.getNodeLabels());\r\n    Assert.assertEquals(0, copy.getNodeLabels().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testNodeHBRequestPBImplWithNullCollectorToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testNodeHBRequestPBImplWithNullCollectorToken()\n{\r\n    NodeHeartbeatRequestPBImpl original = new NodeHeartbeatRequestPBImpl();\r\n    Map<ApplicationId, AppCollectorData> collectors = getCollectors(true);\r\n    original.setRegisteringCollectors(collectors);\r\n    NodeHeartbeatRequestPBImpl copy = new NodeHeartbeatRequestPBImpl(original.getProto());\r\n    assertEquals(collectors, copy.getRegisteringCollectors());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testNodeHeartbeatRequestPBImplWithNullLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testNodeHeartbeatRequestPBImplWithNullLabels()\n{\r\n    NodeHeartbeatRequestPBImpl original = new NodeHeartbeatRequestPBImpl();\r\n    NodeHeartbeatRequestPBImpl copy = new NodeHeartbeatRequestPBImpl(original.getProto());\r\n    Assert.assertNull(copy.getNodeLabels());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testNodeHeartbeatResponsePBImpl",
  "errType" : null,
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testNodeHeartbeatResponsePBImpl() throws IOException\n{\r\n    NodeHeartbeatResponsePBImpl original = new NodeHeartbeatResponsePBImpl();\r\n    original.setDiagnosticsMessage(\"testDiagnosticMessage\");\r\n    original.setContainerTokenMasterKey(getMasterKey());\r\n    original.setNMTokenMasterKey(getMasterKey());\r\n    original.setNextHeartBeatInterval(1000);\r\n    original.setNodeAction(NodeAction.NORMAL);\r\n    original.setResponseId(100);\r\n    Map<ApplicationId, AppCollectorData> collectors = getCollectors(false);\r\n    original.setAppCollectors(collectors);\r\n    Text userText1 = new Text(\"user1\");\r\n    DelegationTokenIdentifier dtId1 = new DelegationTokenIdentifier(userText1, new Text(\"renewer1\"), userText1);\r\n    final Token<DelegationTokenIdentifier> expectedToken1 = new Token<DelegationTokenIdentifier>(dtId1.getBytes(), \"password12\".getBytes(), dtId1.getKind(), new Text(\"service1\"));\r\n    Credentials credentials1 = new Credentials();\r\n    credentials1.addToken(expectedToken1.getService(), expectedToken1);\r\n    DataOutputBuffer dob1 = new DataOutputBuffer();\r\n    credentials1.writeTokenStorageToStream(dob1);\r\n    ByteBuffer byteBuffer1 = ByteBuffer.wrap(dob1.getData(), 0, dob1.getLength());\r\n    Map<ApplicationId, ByteBuffer> systemCredentials = new HashMap<ApplicationId, ByteBuffer>();\r\n    systemCredentials.put(getApplicationId(1), byteBuffer1);\r\n    original.setSystemCredentialsForApps(YarnServerBuilderUtils.convertToProtoFormat(systemCredentials));\r\n    NodeHeartbeatResponsePBImpl copy = new NodeHeartbeatResponsePBImpl(original.getProto());\r\n    assertEquals(100, copy.getResponseId());\r\n    assertEquals(NodeAction.NORMAL, copy.getNodeAction());\r\n    assertEquals(1000, copy.getNextHeartBeatInterval());\r\n    assertEquals(1, copy.getContainerTokenMasterKey().getKeyId());\r\n    assertEquals(1, copy.getNMTokenMasterKey().getKeyId());\r\n    assertEquals(\"testDiagnosticMessage\", copy.getDiagnosticsMessage());\r\n    assertEquals(collectors, copy.getAppCollectors());\r\n    assertEquals(false, copy.getAreNodeLabelsAcceptedByRM());\r\n    assertEquals(1, copy.getSystemCredentialsForApps().size());\r\n    Credentials credentials1Out = new Credentials();\r\n    DataInputByteBuffer buf = new DataInputByteBuffer();\r\n    ByteBuffer buffer = YarnServerBuilderUtils.convertFromProtoFormat(copy.getSystemCredentialsForApps()).get(getApplicationId(1));\r\n    Assert.assertNotNull(buffer);\r\n    buffer.rewind();\r\n    buf.reset(buffer);\r\n    credentials1Out.readTokenStorageStream(buf);\r\n    assertEquals(1, credentials1Out.getAllTokens().size());\r\n    assertEquals(10, credentials1Out.getAllTokens().iterator().next().getPassword().length);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testNodeHeartbeatResponsePBImplWithRMAcceptLbls",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testNodeHeartbeatResponsePBImplWithRMAcceptLbls()\n{\r\n    NodeHeartbeatResponsePBImpl original = new NodeHeartbeatResponsePBImpl();\r\n    original.setAreNodeLabelsAcceptedByRM(true);\r\n    NodeHeartbeatResponsePBImpl copy = new NodeHeartbeatResponsePBImpl(original.getProto());\r\n    assertTrue(copy.getAreNodeLabelsAcceptedByRM());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testNodeHBResponsePBImplWithNullCollectorToken",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testNodeHBResponsePBImplWithNullCollectorToken()\n{\r\n    NodeHeartbeatResponsePBImpl original = new NodeHeartbeatResponsePBImpl();\r\n    Map<ApplicationId, AppCollectorData> collectors = getCollectors(true);\r\n    original.setAppCollectors(collectors);\r\n    NodeHeartbeatResponsePBImpl copy = new NodeHeartbeatResponsePBImpl(original.getProto());\r\n    assertEquals(collectors, copy.getAppCollectors());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testNodeHeartbeatResponsePBImplWithDecreasedContainers",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testNodeHeartbeatResponsePBImplWithDecreasedContainers()\n{\r\n    NodeHeartbeatResponsePBImpl original = new NodeHeartbeatResponsePBImpl();\r\n    original.addAllContainersToUpdate(Arrays.asList(getDecreasedContainer(1, 2, 2048, 2), getDecreasedContainer(2, 3, 1024, 1)));\r\n    NodeHeartbeatResponsePBImpl copy = new NodeHeartbeatResponsePBImpl(original.getProto());\r\n    assertEquals(1, copy.getContainersToUpdate().get(0).getId().getContainerId());\r\n    assertEquals(1024, copy.getContainersToUpdate().get(1).getResource().getMemorySize());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testRegisterNodeManagerRequestPBImpl",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testRegisterNodeManagerRequestPBImpl()\n{\r\n    RegisterNodeManagerRequestPBImpl original = new RegisterNodeManagerRequestPBImpl();\r\n    original.setHttpPort(8080);\r\n    original.setNodeId(getNodeId());\r\n    Resource resource = recordFactory.newRecordInstance(Resource.class);\r\n    resource.setMemorySize(10000);\r\n    resource.setVirtualCores(2);\r\n    original.setResource(resource);\r\n    original.setPhysicalResource(resource);\r\n    RegisterNodeManagerRequestPBImpl copy = new RegisterNodeManagerRequestPBImpl(original.getProto());\r\n    assertEquals(8080, copy.getHttpPort());\r\n    assertEquals(9090, copy.getNodeId().getPort());\r\n    assertEquals(10000, copy.getResource().getMemorySize());\r\n    assertEquals(2, copy.getResource().getVirtualCores());\r\n    assertEquals(10000, copy.getPhysicalResource().getMemorySize());\r\n    assertEquals(2, copy.getPhysicalResource().getVirtualCores());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testMasterKeyPBImpl",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testMasterKeyPBImpl()\n{\r\n    MasterKeyPBImpl original = new MasterKeyPBImpl();\r\n    original.setBytes(ByteBuffer.allocate(0));\r\n    original.setKeyId(1);\r\n    MasterKeyPBImpl copy = new MasterKeyPBImpl(original.getProto());\r\n    assertEquals(1, copy.getKeyId());\r\n    assertTrue(original.equals(copy));\r\n    assertEquals(original.hashCode(), copy.hashCode());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testSerializedExceptionPBImpl",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testSerializedExceptionPBImpl()\n{\r\n    SerializedExceptionPBImpl original = new SerializedExceptionPBImpl();\r\n    original.init(\"testMessage\");\r\n    SerializedExceptionPBImpl copy = new SerializedExceptionPBImpl(original.getProto());\r\n    assertEquals(\"testMessage\", copy.getMessage());\r\n    original = new SerializedExceptionPBImpl();\r\n    original.init(\"testMessage\", new Throwable(new Throwable(\"parent\")));\r\n    copy = new SerializedExceptionPBImpl(original.getProto());\r\n    assertEquals(\"testMessage\", copy.getMessage());\r\n    assertEquals(\"parent\", copy.getCause().getMessage());\r\n    assertTrue(copy.getRemoteTrace().startsWith(\"java.lang.Throwable: java.lang.Throwable: parent\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testNodeStatusPBImpl",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testNodeStatusPBImpl()\n{\r\n    NodeStatusPBImpl original = new NodeStatusPBImpl();\r\n    original.setContainersStatuses(Arrays.asList(getContainerStatus(1, 2, 1), getContainerStatus(2, 3, 1)));\r\n    original.setKeepAliveApplications(Arrays.asList(getApplicationId(3), getApplicationId(4)));\r\n    original.setNodeHealthStatus(getNodeHealthStatus());\r\n    original.setNodeId(getNodeId());\r\n    original.setResponseId(1);\r\n    original.setIncreasedContainers(Arrays.asList(getIncreasedContainer(1, 2, 2048, 2), getIncreasedContainer(2, 3, 4096, 3)));\r\n    NodeStatusPBImpl copy = new NodeStatusPBImpl(original.getProto());\r\n    assertEquals(3L, copy.getContainersStatuses().get(1).getContainerId().getContainerId());\r\n    assertEquals(3, copy.getKeepAliveApplications().get(0).getId());\r\n    assertEquals(1000, copy.getNodeHealthStatus().getLastHealthReportTime());\r\n    assertEquals(9090, copy.getNodeId().getPort());\r\n    assertEquals(1, copy.getResponseId());\r\n    assertEquals(1, copy.getIncreasedContainers().get(0).getId().getContainerId());\r\n    assertEquals(4096, copy.getIncreasedContainers().get(1).getResource().getMemorySize());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testRegisterNodeManagerRequestWithNullLabels",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testRegisterNodeManagerRequestWithNullLabels()\n{\r\n    RegisterNodeManagerRequest request = RegisterNodeManagerRequest.newInstance(NodeId.newInstance(\"host\", 1234), 1234, Resource.newInstance(0, 0), \"version\", null, null);\r\n    RegisterNodeManagerRequest request1 = new RegisterNodeManagerRequestPBImpl(((RegisterNodeManagerRequestPBImpl) request).getProto());\r\n    Assert.assertNull(request1.getNodeLabels());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testRegisterNodeManagerRequestWithValidLabels",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testRegisterNodeManagerRequestWithValidLabels()\n{\r\n    HashSet<NodeLabel> nodeLabels = getValidNodeLabels();\r\n    RegisterNodeManagerRequest request = RegisterNodeManagerRequest.newInstance(NodeId.newInstance(\"host\", 1234), 1234, Resource.newInstance(0, 0), \"version\", null, null, nodeLabels);\r\n    RegisterNodeManagerRequest copy = new RegisterNodeManagerRequestPBImpl(((RegisterNodeManagerRequestPBImpl) request).getProto());\r\n    Assert.assertEquals(true, nodeLabels.containsAll(copy.getNodeLabels()));\r\n    request.setNodeLabels(new HashSet<NodeLabel>());\r\n    copy = new RegisterNodeManagerRequestPBImpl(((RegisterNodeManagerRequestPBImpl) request).getProto());\r\n    Assert.assertNotNull(copy.getNodeLabels());\r\n    Assert.assertEquals(0, copy.getNodeLabels().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testUnRegisterNodeManagerRequestPBImpl",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testUnRegisterNodeManagerRequestPBImpl() throws Exception\n{\r\n    UnRegisterNodeManagerRequestPBImpl request = new UnRegisterNodeManagerRequestPBImpl();\r\n    NodeId nodeId = NodeId.newInstance(\"host\", 1234);\r\n    request.setNodeId(nodeId);\r\n    UnRegisterNodeManagerRequestPBImpl copy = new UnRegisterNodeManagerRequestPBImpl(request.getProto());\r\n    Assert.assertEquals(nodeId, copy.getNodeId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getValidNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "HashSet<NodeLabel> getValidNodeLabels()\n{\r\n    HashSet<NodeLabel> nodeLabels = new HashSet<NodeLabel>();\r\n    nodeLabels.add(NodeLabel.newInstance(\"java\"));\r\n    nodeLabels.add(NodeLabel.newInstance(\"windows\"));\r\n    nodeLabels.add(NodeLabel.newInstance(\"gpu\"));\r\n    nodeLabels.add(NodeLabel.newInstance(\"x86\"));\r\n    return nodeLabels;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getCollectors",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Map<ApplicationId, AppCollectorData> getCollectors(boolean hasNullCollectorToken)\n{\r\n    ApplicationId appID = ApplicationId.newInstance(1L, 1);\r\n    String collectorAddr = \"localhost:0\";\r\n    AppCollectorData data = AppCollectorData.newInstance(appID, collectorAddr);\r\n    if (!hasNullCollectorToken) {\r\n        data.setCollectorToken(org.apache.hadoop.yarn.api.records.Token.newInstance(new byte[0], \"kind\", new byte[0], \"s\"));\r\n    }\r\n    Map<ApplicationId, AppCollectorData> collectorMap = new HashMap<>();\r\n    collectorMap.put(appID, data);\r\n    return collectorMap;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ContainerStatus getContainerStatus(int applicationId, int containerID, int appAttemptId)\n{\r\n    ContainerStatus status = recordFactory.newRecordInstance(ContainerStatus.class);\r\n    status.setContainerId(getContainerId(containerID, appAttemptId));\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId(int appAttemptId)\n{\r\n    ApplicationAttemptId result = ApplicationAttemptIdPBImpl.newInstance(getApplicationId(appAttemptId), appAttemptId);\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId getContainerId(int containerID, int appAttemptId)\n{\r\n    ContainerId containerId = ContainerIdPBImpl.newContainerId(getApplicationAttemptId(appAttemptId), containerID);\r\n    return containerId;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ApplicationId getApplicationId(int applicationId)\n{\r\n    ApplicationIdPBImpl appId = new ApplicationIdPBImpl() {\r\n\r\n        public ApplicationIdPBImpl setParameters(int id, long timestamp) {\r\n            setClusterTimestamp(timestamp);\r\n            setId(id);\r\n            build();\r\n            return this;\r\n        }\r\n    }.setParameters(applicationId, 1000);\r\n    return new ApplicationIdPBImpl(appId.getProto());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getDecreasedContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Container getDecreasedContainer(int containerID, int appAttemptId, int memory, int vCores)\n{\r\n    ContainerId containerId = getContainerId(containerID, appAttemptId);\r\n    Resource capability = Resource.newInstance(memory, vCores);\r\n    return Container.newInstance(containerId, null, null, capability, null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getIncreasedContainer",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Container getIncreasedContainer(int containerID, int appAttemptId, int memory, int vCores)\n{\r\n    ContainerId containerId = getContainerId(containerID, appAttemptId);\r\n    Resource capability = Resource.newInstance(memory, vCores);\r\n    return Container.newInstance(containerId, null, null, capability, null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getNodeStatus",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "NodeStatus getNodeStatus()\n{\r\n    NodeStatus status = recordFactory.newRecordInstance(NodeStatus.class);\r\n    status.setContainersStatuses(new ArrayList<ContainerStatus>());\r\n    status.setKeepAliveApplications(new ArrayList<ApplicationId>());\r\n    status.setNodeHealthStatus(getNodeHealthStatus());\r\n    status.setNodeId(getNodeId());\r\n    status.setResponseId(1);\r\n    return status;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getNodeId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "NodeId getNodeId()\n{\r\n    return NodeId.newInstance(\"localhost\", 9090);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getNodeHealthStatus",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "NodeHealthStatus getNodeHealthStatus()\n{\r\n    NodeHealthStatus healStatus = recordFactory.newRecordInstance(NodeHealthStatus.class);\r\n    healStatus.setHealthReport(\"healthReport\");\r\n    healStatus.setIsNodeHealthy(true);\r\n    healStatus.setLastHealthReportTime(1000);\r\n    return healStatus;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "getMasterKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "MasterKey getMasterKey()\n{\r\n    MasterKey key = recordFactory.newRecordInstance(MasterKey.class);\r\n    key.setBytes(ByteBuffer.allocate(0));\r\n    key.setKeyId(1);\r\n    return key;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    wfp = new HashBroadcastPolicyManager();\r\n    wfp.setQueue(\"queue1\");\r\n    expectedPolicyManager = HashBroadcastPolicyManager.class;\r\n    expectedAMRMProxyPolicy = BroadcastAMRMProxyPolicy.class;\r\n    expectedRouterPolicy = HashBasedRouterPolicy.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "testInvalidAppState",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testInvalidAppState()\n{\r\n    AppsBlock appBlock = new AppsBlock(null, null) {\r\n\r\n        @Override\r\n        public Map<String, String> moreParams() {\r\n            Map<String, String> map = new HashMap<>();\r\n            map.put(YarnWebParams.APP_STATE, \"ACCEPTEDPING\");\r\n            return map;\r\n        }\r\n\r\n        @Override\r\n        protected void renderData(Block html) {\r\n        }\r\n    };\r\n    OutputStream outputStream = new ByteArrayOutputStream();\r\n    HtmlBlock.Block block = createBlockToCreateTo(outputStream);\r\n    appBlock.render(block);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createBlockToCreateTo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "HtmlBlock.Block createBlockToCreateTo(OutputStream outputStream)\n{\r\n    PrintWriter printWriter = new PrintWriter(outputStream);\r\n    HtmlBlock html = new HtmlBlockForTest();\r\n    return new BlockForTest(html, printWriter, 10, false) {\r\n\r\n        @Override\r\n        protected void subView(Class<? extends SubView> cls) {\r\n        }\r\n    };\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void setup()\n{\r\n    wfp = new WeightedLocalityPolicyManager();\r\n    wfp.setQueue(\"queue1\");\r\n    SubClusterId sc1 = SubClusterId.newInstance(\"sc1\");\r\n    SubClusterId sc2 = SubClusterId.newInstance(\"sc2\");\r\n    policyInfo = new WeightedPolicyInfo();\r\n    Map<SubClusterIdInfo, Float> routerWeights = new HashMap<>();\r\n    routerWeights.put(new SubClusterIdInfo(sc1), 0.2f);\r\n    routerWeights.put(new SubClusterIdInfo(sc2), 0.8f);\r\n    policyInfo.setRouterPolicyWeights(routerWeights);\r\n    Map<SubClusterIdInfo, Float> amrmWeights = new HashMap<>();\r\n    amrmWeights.put(new SubClusterIdInfo(sc1), 0.2f);\r\n    amrmWeights.put(new SubClusterIdInfo(sc2), 0.8f);\r\n    policyInfo.setAMRMPolicyWeights(amrmWeights);\r\n    ((WeightedLocalityPolicyManager) wfp).setWeightedPolicyInfo(policyInfo);\r\n    expectedPolicyManager = WeightedLocalityPolicyManager.class;\r\n    expectedAMRMProxyPolicy = LocalityMulticastAMRMProxyPolicy.class;\r\n    expectedRouterPolicy = LocalityRouterPolicy.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "testPolicyInfoSetCorrectly",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testPolicyInfoSetCorrectly() throws Exception\n{\r\n    serializeAndDeserializePolicyManager(wfp, expectedPolicyManager, expectedAMRMProxyPolicy, expectedRouterPolicy);\r\n    Assert.assertEquals(((WeightedLocalityPolicyManager) wfp).getWeightedPolicyInfo(), policyInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "testRegisterNodeManagerRequest",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testRegisterNodeManagerRequest()\n{\r\n    RegisterNodeManagerRequest request = RegisterNodeManagerRequest.newInstance(NodeId.newInstance(\"host\", 1234), 1234, Resource.newInstance(0, 0), \"version\", Arrays.asList(NMContainerStatus.newInstance(ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1234L, 1), 1), 1), 0, ContainerState.RUNNING, Resource.newInstance(1024, 1), \"good\", -1, Priority.newInstance(0), 1234)), Arrays.asList(ApplicationId.newInstance(1234L, 1), ApplicationId.newInstance(1234L, 2)));\r\n    RegisterNodeManagerRequest request1 = new RegisterNodeManagerRequestPBImpl(((RegisterNodeManagerRequestPBImpl) request).getProto());\r\n    Assert.assertEquals(request1.getNMContainerStatuses().size(), request.getNMContainerStatuses().size());\r\n    Assert.assertEquals(request1.getNMContainerStatuses().get(0).getContainerId(), request.getNMContainerStatuses().get(0).getContainerId());\r\n    Assert.assertEquals(request1.getRunningApplications().size(), request.getRunningApplications().size());\r\n    Assert.assertEquals(request1.getRunningApplications().get(0), request.getRunningApplications().get(0));\r\n    Assert.assertEquals(request1.getRunningApplications().get(1), request.getRunningApplications().get(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "testRegisterNodeManagerRequestWithNullArrays",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testRegisterNodeManagerRequestWithNullArrays()\n{\r\n    RegisterNodeManagerRequest request = RegisterNodeManagerRequest.newInstance(NodeId.newInstance(\"host\", 1234), 1234, Resource.newInstance(0, 0), \"version\", null, null);\r\n    RegisterNodeManagerRequest request1 = new RegisterNodeManagerRequestPBImpl(((RegisterNodeManagerRequestPBImpl) request).getProto());\r\n    Assert.assertEquals(0, request1.getNMContainerStatuses().size());\r\n    Assert.assertEquals(0, request1.getRunningApplications().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "testLogServletNoException",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testLogServletNoException()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.LOG_AGGREGATION_FILE_FORMATS, \"22\");\r\n    try {\r\n        LogAggregationFileControllerFactory factory = new LogAggregationFileControllerFactory(conf);\r\n        fail(\"LogAggregationFileControllerFactory should have thrown exception\");\r\n    } catch (IllegalArgumentException expected) {\r\n    }\r\n    AppInfoProvider aip = mock(AppInfoProvider.class);\r\n    LogServlet ls = new LogServlet(conf, aip);\r\n    assertThat(ls).isNotNull();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testUnknownCall",
  "errType" : [ "YarnException", "Exception" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testUnknownCall()\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.IPC_RPC_IMPL, HadoopYarnProtoRPC.class.getName());\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    String bindAddr = \"localhost:0\";\r\n    InetSocketAddress addr = NetUtils.createSocketAddr(bindAddr);\r\n    Server server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, null, 1);\r\n    server.start();\r\n    ApplicationClientProtocol proxy = (ApplicationClientProtocol) rpc.getProxy(ApplicationClientProtocol.class, NetUtils.getConnectAddress(server), conf);\r\n    try {\r\n        proxy.getNewApplication(Records.newRecord(GetNewApplicationRequest.class));\r\n        Assert.fail(\"Excepted RPC call to fail with unknown method.\");\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().matches(\"Unknown method getNewApplication called on.*\" + \"org.apache.hadoop.yarn.proto.ApplicationClientProtocol\" + \"\\\\$ApplicationClientProtocolService\\\\$BlockingInterface \" + \"protocol.\"));\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    } finally {\r\n        server.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testRPCOnCollectorNodeManagerProtocol",
  "errType" : [ "YarnException", "Exception", "YarnException", "YarnException", "YarnException", "YarnException|IOException", "YarnException|IOException" ],
  "containingMethodsNum" : 33,
  "sourceCodeText" : "void testRPCOnCollectorNodeManagerProtocol() throws IOException\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.IPC_RPC_IMPL, HadoopYarnProtoRPC.class.getName());\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    String bindAddr = \"localhost:0\";\r\n    InetSocketAddress addr = NetUtils.createSocketAddr(bindAddr);\r\n    Server server = rpc.getServer(CollectorNodemanagerProtocol.class, new DummyNMCollectorService(), addr, conf, null, 1);\r\n    server.start();\r\n    ApplicationClientProtocol unknownProxy = (ApplicationClientProtocol) rpc.getProxy(ApplicationClientProtocol.class, NetUtils.getConnectAddress(server), conf);\r\n    try {\r\n        unknownProxy.getNewApplication(Records.newRecord(GetNewApplicationRequest.class));\r\n        Assert.fail(\"Excepted RPC call to fail with unknown method.\");\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().matches(\"Unknown method getNewApplication called on.*\" + \"org.apache.hadoop.yarn.proto.ApplicationClientProtocol\" + \"\\\\$ApplicationClientProtocolService\\\\$BlockingInterface \" + \"protocol.\"));\r\n    } catch (Exception e) {\r\n        e.printStackTrace();\r\n    }\r\n    CollectorNodemanagerProtocol proxy = (CollectorNodemanagerProtocol) rpc.getProxy(CollectorNodemanagerProtocol.class, NetUtils.getConnectAddress(server), conf);\r\n    try {\r\n        ReportNewCollectorInfoRequest request = ReportNewCollectorInfoRequest.newInstance(DEFAULT_APP_ID, DEFAULT_COLLECTOR_ADDR, null);\r\n        proxy.reportNewCollectorInfo(request);\r\n    } catch (YarnException e) {\r\n        Assert.fail(\"RPC call failured is not expected here.\");\r\n    }\r\n    try {\r\n        ReportNewCollectorInfoRequest request = ReportNewCollectorInfoRequest.newInstance(DEFAULT_APP_ID, DEFAULT_COLLECTOR_ADDR, DEFAULT_COLLECTOR_TOKEN);\r\n        proxy.reportNewCollectorInfo(request);\r\n    } catch (YarnException e) {\r\n        Assert.fail(\"RPC call failured is not expected here.\");\r\n    }\r\n    try {\r\n        proxy.reportNewCollectorInfo(Records.newRecord(ReportNewCollectorInfoRequest.class));\r\n        Assert.fail(\"Excepted RPC call to fail with YarnException.\");\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().contains(ILLEGAL_NUMBER_MESSAGE));\r\n    }\r\n    try {\r\n        GetTimelineCollectorContextRequest request = GetTimelineCollectorContextRequest.newInstance(ApplicationId.newInstance(0, 1));\r\n        GetTimelineCollectorContextResponse response = proxy.getTimelineCollectorContext(request);\r\n        Assert.assertEquals(\"test_user_id\", response.getUserId());\r\n        Assert.assertEquals(\"test_flow_name\", response.getFlowName());\r\n        Assert.assertEquals(\"test_flow_version\", response.getFlowVersion());\r\n        Assert.assertEquals(12345678L, response.getFlowRunId());\r\n    } catch (YarnException | IOException e) {\r\n        Assert.fail(\"RPC call failured is not expected here.\");\r\n    }\r\n    try {\r\n        GetTimelineCollectorContextRequest request = GetTimelineCollectorContextRequest.newInstance(ApplicationId.newInstance(0, 2));\r\n        proxy.getTimelineCollectorContext(request);\r\n        Assert.fail(\"RPC call failured is expected here.\");\r\n    } catch (YarnException | IOException e) {\r\n        Assert.assertTrue(e instanceof YarnException);\r\n        Assert.assertTrue(e.getMessage().contains(\"The application is not found.\"));\r\n    }\r\n    server.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 6,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testHadoopProtoRPC",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testHadoopProtoRPC() throws Exception\n{\r\n    test(HadoopYarnProtoRPC.class.getName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "test",
  "errType" : [ "YarnException", "Exception" ],
  "containingMethodsNum" : 35,
  "sourceCodeText" : "void test(String rpcClass) throws Exception\n{\r\n    Configuration conf = new Configuration();\r\n    conf.set(YarnConfiguration.IPC_RPC_IMPL, rpcClass);\r\n    YarnRPC rpc = YarnRPC.create(conf);\r\n    String bindAddr = \"localhost:0\";\r\n    InetSocketAddress addr = NetUtils.createSocketAddr(bindAddr);\r\n    Server server = rpc.getServer(ContainerManagementProtocol.class, new DummyContainerManager(), addr, conf, null, 1);\r\n    server.start();\r\n    RPC.setProtocolEngine(conf, ContainerManagementProtocolPB.class, ProtobufRpcEngine2.class);\r\n    ContainerManagementProtocol proxy = (ContainerManagementProtocol) rpc.getProxy(ContainerManagementProtocol.class, NetUtils.getConnectAddress(server), conf);\r\n    ContainerLaunchContext containerLaunchContext = RECORD_FACTORY.newRecordInstance(ContainerLaunchContext.class);\r\n    ApplicationId applicationId = ApplicationId.newInstance(0, 0);\r\n    ApplicationAttemptId applicationAttemptId = ApplicationAttemptId.newInstance(applicationId, 0);\r\n    ContainerId containerId = ContainerId.newContainerId(applicationAttemptId, 100);\r\n    NodeId nodeId = NodeId.newInstance(\"localhost\", 1234);\r\n    Resource resource = Resource.newInstance(1234, 2);\r\n    ContainerTokenIdentifier containerTokenIdentifier = new ContainerTokenIdentifier(containerId, \"localhost\", \"user\", resource, System.currentTimeMillis() + 10000, 42, 42, Priority.newInstance(0), 0);\r\n    Token containerToken = newContainerToken(nodeId, \"password\".getBytes(), containerTokenIdentifier);\r\n    StartContainerRequest scRequest = StartContainerRequest.newInstance(containerLaunchContext, containerToken);\r\n    List<StartContainerRequest> list = new ArrayList<StartContainerRequest>();\r\n    list.add(scRequest);\r\n    StartContainersRequest allRequests = StartContainersRequest.newInstance(list);\r\n    proxy.startContainers(allRequests);\r\n    List<ContainerId> containerIds = new ArrayList<ContainerId>();\r\n    containerIds.add(containerId);\r\n    GetContainerStatusesRequest gcsRequest = GetContainerStatusesRequest.newInstance(containerIds);\r\n    GetContainerStatusesResponse response = proxy.getContainerStatuses(gcsRequest);\r\n    List<ContainerStatus> statuses = response.getContainerStatuses();\r\n    boolean exception = false;\r\n    try {\r\n        StopContainersRequest stopRequest = RECORD_FACTORY.newRecordInstance(StopContainersRequest.class);\r\n        stopRequest.setContainerIds(containerIds);\r\n        proxy.stopContainers(stopRequest);\r\n    } catch (YarnException e) {\r\n        exception = true;\r\n        Assert.assertTrue(e.getMessage().contains(EXCEPTION_MSG));\r\n        Assert.assertTrue(e.getMessage().contains(EXCEPTION_CAUSE));\r\n        System.out.println(\"Test Exception is \" + e.getMessage());\r\n    } catch (Exception ex) {\r\n        ex.printStackTrace();\r\n    } finally {\r\n        server.stop();\r\n    }\r\n    Assert.assertTrue(exception);\r\n    Assert.assertNotNull(statuses.get(0));\r\n    Assert.assertEquals(ContainerState.RUNNING, statuses.get(0).getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "newContainerTokenIdentifier",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "ContainerTokenIdentifier newContainerTokenIdentifier(Token containerToken) throws IOException\n{\r\n    org.apache.hadoop.security.token.Token<ContainerTokenIdentifier> token = new org.apache.hadoop.security.token.Token<ContainerTokenIdentifier>(containerToken.getIdentifier().array(), containerToken.getPassword().array(), new Text(containerToken.getKind()), new Text(containerToken.getService()));\r\n    return token.decodeIdentifier();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "newContainerToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Token newContainerToken(NodeId nodeId, byte[] password, ContainerTokenIdentifier tokenIdentifier)\n{\r\n    InetSocketAddress addr = NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\r\n    Token containerToken = Token.newInstance(tokenIdentifier.getBytes(), ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil.buildTokenService(addr).toString());\r\n    return containerToken;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    setPolicy(new LocalityRouterPolicy());\r\n    setPolicyInfo(new WeightedPolicyInfo());\r\n    configureWeights(4);\r\n    initializePolicy(new YarnConfiguration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "initializePolicy",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void initializePolicy(Configuration conf) throws YarnException\n{\r\n    setFederationPolicyContext(new FederationPolicyInitializationContext());\r\n    SubClusterResolver resolver = FederationPoliciesTestUtil.initResolver();\r\n    getFederationPolicyContext().setFederationSubclusterResolver(resolver);\r\n    ByteBuffer buf = getPolicyInfo().toByteBuffer();\r\n    getFederationPolicyContext().setSubClusterPolicyConfiguration(SubClusterPolicyConfiguration.newInstance(\"queue1\", getPolicy().getClass().getCanonicalName(), buf));\r\n    getFederationPolicyContext().setHomeSubcluster(getHomeSubCluster());\r\n    FederationPoliciesTestUtil.initializePolicyContext(getFederationPolicyContext(), getPolicy(), getPolicyInfo(), getActiveSubclusters(), conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testNodeInActiveSubCluster",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testNodeInActiveSubCluster() throws YarnException\n{\r\n    List<ResourceRequest> requests = new ArrayList<ResourceRequest>();\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, \"node1\", Resource.newInstance(10, 1), 1));\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, \"rack1\", Resource.newInstance(10, 1), 1));\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, ResourceRequest.ANY, Resource.newInstance(10, 1), 1));\r\n    ApplicationSubmissionContext asc = ApplicationSubmissionContext.newInstance(null, null, null, null, null, false, false, 0, Resources.none(), null, false, null, null);\r\n    asc.setAMContainerResourceRequests(requests);\r\n    SubClusterId chosen = ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(asc, null);\r\n    if (getActiveSubclusters().containsKey(getFederationPolicyContext().getFederationSubclusterResolver().getSubClusterForNode(\"node1\").getId())) {\r\n        Assert.assertEquals(getFederationPolicyContext().getFederationSubclusterResolver().getSubClusterForNode(\"node1\"), chosen);\r\n    }\r\n    Assert.assertTrue(getActiveSubclusters().containsKey(chosen));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testMultipleResourceRequests",
  "errType" : [ "FederationPolicyException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testMultipleResourceRequests() throws YarnException\n{\r\n    List<ResourceRequest> requests = new ArrayList<ResourceRequest>();\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, \"node1\", Resource.newInstance(10, 1), 1));\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, \"node2\", Resource.newInstance(10, 1), 1));\r\n    ApplicationSubmissionContext asc = ApplicationSubmissionContext.newInstance(null, null, null, null, null, false, false, 0, Resources.none(), null, false, null, null);\r\n    asc.setAMContainerResourceRequests(requests);\r\n    try {\r\n        ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(asc, null);\r\n        Assert.fail();\r\n    } catch (FederationPolicyException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid number of resource requests: \"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testNodeNotExists",
  "errType" : [ "FederationPolicyException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testNodeNotExists() throws YarnException\n{\r\n    List<ResourceRequest> requests = new ArrayList<ResourceRequest>();\r\n    boolean relaxLocality = true;\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, \"node5\", Resource.newInstance(10, 1), 1, relaxLocality));\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, \"rack1\", Resource.newInstance(10, 1), 1));\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, ResourceRequest.ANY, Resource.newInstance(10, 1), 1));\r\n    ApplicationSubmissionContext asc = ApplicationSubmissionContext.newInstance(null, null, null, null, null, false, false, 0, Resources.none(), null, false, null, null);\r\n    asc.setAMContainerResourceRequests(requests);\r\n    try {\r\n        ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(asc, null);\r\n    } catch (FederationPolicyException e) {\r\n        Assert.fail();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testNodeInABlacklistSubCluster",
  "errType" : [ "FederationPolicyException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testNodeInABlacklistSubCluster() throws YarnException\n{\r\n    String subClusterToBlacklist = \"subcluster3\";\r\n    Float value = getPolicyInfo().getRouterPolicyWeights().get(subClusterToBlacklist);\r\n    getPolicyInfo().getRouterPolicyWeights().put(new SubClusterIdInfo(subClusterToBlacklist), 0.0f);\r\n    initializePolicy(new YarnConfiguration());\r\n    FederationPoliciesTestUtil.initializePolicyContext(getFederationPolicyContext(), getPolicy(), getPolicyInfo(), getActiveSubclusters(), new Configuration());\r\n    List<ResourceRequest> requests = new ArrayList<ResourceRequest>();\r\n    boolean relaxLocality = true;\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, \"node4\", Resource.newInstance(10, 1), 1, relaxLocality));\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, \"rack1\", Resource.newInstance(10, 1), 1));\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, ResourceRequest.ANY, Resource.newInstance(10, 1), 1));\r\n    ApplicationSubmissionContext asc = ApplicationSubmissionContext.newInstance(null, null, null, null, null, false, false, 0, Resources.none(), null, false, null, null);\r\n    asc.setAMContainerResourceRequests(requests);\r\n    try {\r\n        SubClusterId targetId = ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(asc, null);\r\n        Assert.assertNotEquals(targetId.getId(), subClusterToBlacklist);\r\n    } catch (FederationPolicyException e) {\r\n        Assert.fail();\r\n    }\r\n    getPolicyInfo().getRouterPolicyWeights().put(new SubClusterIdInfo(subClusterToBlacklist), value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testNodeNotInPolicy",
  "errType" : [ "FederationPolicyException" ],
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testNodeNotInPolicy() throws YarnException\n{\r\n    String subClusterToBlacklist = \"subcluster3\";\r\n    Float value = getPolicyInfo().getRouterPolicyWeights().get(subClusterToBlacklist);\r\n    getPolicyInfo().getRouterPolicyWeights().remove(subClusterToBlacklist);\r\n    initializePolicy(new YarnConfiguration());\r\n    FederationPoliciesTestUtil.initializePolicyContext(getFederationPolicyContext(), getPolicy(), getPolicyInfo(), getActiveSubclusters(), new Configuration());\r\n    List<ResourceRequest> requests = new ArrayList<ResourceRequest>();\r\n    boolean relaxLocality = true;\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, \"node4\", Resource.newInstance(10, 1), 1, relaxLocality));\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, \"rack1\", Resource.newInstance(10, 1), 1));\r\n    requests.add(ResourceRequest.newInstance(Priority.UNDEFINED, ResourceRequest.ANY, Resource.newInstance(10, 1), 1));\r\n    ApplicationSubmissionContext asc = ApplicationSubmissionContext.newInstance(null, null, null, null, null, false, false, 0, Resources.none(), null, false, null, null);\r\n    asc.setAMContainerResourceRequests(requests);\r\n    try {\r\n        SubClusterId targetId = ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(asc, null);\r\n        Assert.assertNotEquals(targetId.getId(), subClusterToBlacklist);\r\n    } catch (FederationPolicyException e) {\r\n        Assert.fail();\r\n    }\r\n    getPolicyInfo().getRouterPolicyWeights().put(new SubClusterIdInfo(subClusterToBlacklist), value);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setup() throws YarnException, IOException\n{\r\n    this.conf = new Configuration();\r\n    this.mockAMS = new MockApplicationMasterService();\r\n    this.relayer = new AMRMClientRelayer(this.mockAMS, null, \"TEST\");\r\n    this.relayer.registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(\"\", 0, \"\"));\r\n    clearAllocateRequestLists();\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void cleanup()\n{\r\n    this.relayer.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "assertAsksAndReleases",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertAsksAndReleases(int expectedAsk, int expectedRelease)\n{\r\n    Assert.assertEquals(expectedAsk, this.mockAMS.lastAsk.size());\r\n    Assert.assertEquals(expectedRelease, this.mockAMS.lastRelease.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "assertBlacklistAdditionsAndRemovals",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void assertBlacklistAdditionsAndRemovals(int expectedAdditions, int expectedRemovals)\n{\r\n    Assert.assertEquals(expectedAdditions, this.mockAMS.lastBlacklistAdditions.size());\r\n    Assert.assertEquals(expectedRemovals, this.mockAMS.lastBlacklistRemovals.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AllocateRequest getAllocateRequest()\n{\r\n    return AllocateRequest.newInstance(responseId, 0, asks, releases, ResourceBlacklistRequest.newInstance(blacklistAdditions, blacklistRemoval));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "clearAllocateRequestLists",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void clearAllocateRequestLists()\n{\r\n    this.asks.clear();\r\n    this.releases.clear();\r\n    this.blacklistAdditions.clear();\r\n    this.blacklistRemoval.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "createContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId createContainerId(int id)\n{\r\n    return ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1, 1), 1), id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "createResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ResourceRequest createResourceRequest(long id, String resource, int memory, int vCores, int priority, ExecutionType execType, int containers)\n{\r\n    ResourceRequest req = Records.newRecord(ResourceRequest.class);\r\n    req.setAllocationRequestId(id);\r\n    req.setResourceName(resource);\r\n    req.setCapability(Resource.newInstance(memory, vCores));\r\n    req.setPriority(Priority.newInstance(priority));\r\n    req.setExecutionTypeRequest(ExecutionTypeRequest.newInstance(execType));\r\n    req.setNumContainers(containers);\r\n    return req;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testResourceRequestCleanup",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "void testResourceRequestCleanup() throws YarnException, IOException\n{\r\n    this.asks.add(createResourceRequest(0, \"node\", 2048, 1, 1, ExecutionType.GUARANTEED, 1));\r\n    this.asks.add(createResourceRequest(0, \"rack\", 2048, 1, 1, ExecutionType.GUARANTEED, 1));\r\n    this.asks.add(createResourceRequest(0, ResourceRequest.ANY, 2048, 1, 1, ExecutionType.GUARANTEED, 2));\r\n    this.relayer.allocate(getAllocateRequest());\r\n    assertAsksAndReleases(3, 0);\r\n    Assert.assertEquals(1, this.relayer.getRemotePendingAsks().size());\r\n    ResourceRequestSet set = this.relayer.getRemotePendingAsks().values().iterator().next();\r\n    Assert.assertEquals(3, set.getAsks().size());\r\n    clearAllocateRequestLists();\r\n    this.asks.add(createResourceRequest(0, \"node\", 2048, 1, 1, ExecutionType.GUARANTEED, 0));\r\n    this.asks.add(createResourceRequest(0, ResourceRequest.ANY, 2048, 1, 1, ExecutionType.GUARANTEED, 1));\r\n    this.relayer.allocate(getAllocateRequest());\r\n    assertAsksAndReleases(2, 0);\r\n    Assert.assertEquals(1, relayer.getRemotePendingAsks().size());\r\n    set = this.relayer.getRemotePendingAsks().values().iterator().next();\r\n    Assert.assertEquals(2, set.getAsks().size());\r\n    clearAllocateRequestLists();\r\n    this.asks.add(createResourceRequest(0, ResourceRequest.ANY, 2048, 1, 1, ExecutionType.GUARANTEED, 0));\r\n    this.relayer.allocate(AllocateRequest.newInstance(0, 0, asks, null, null));\r\n    assertAsksAndReleases(1, 0);\r\n    Assert.assertEquals(0, this.relayer.getRemotePendingAsks().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testResendRequestsOnRMRestart",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testResendRequestsOnRMRestart() throws YarnException, IOException\n{\r\n    ContainerId c1 = createContainerId(1);\r\n    ContainerId c2 = createContainerId(2);\r\n    ContainerId c3 = createContainerId(3);\r\n    this.asks.add(createResourceRequest(0, \"node1\", 2048, 1, 1, ExecutionType.GUARANTEED, 1));\r\n    this.asks.add(createResourceRequest(0, \"rack\", 2048, 1, 1, ExecutionType.GUARANTEED, 1));\r\n    this.asks.add(createResourceRequest(0, ResourceRequest.ANY, 2048, 1, 1, ExecutionType.GUARANTEED, 2));\r\n    this.releases.add(c1);\r\n    this.blacklistAdditions.add(\"node1\");\r\n    this.blacklistRemoval.add(\"node0\");\r\n    this.relayer.allocate(getAllocateRequest());\r\n    assertAsksAndReleases(3, 1);\r\n    assertBlacklistAdditionsAndRemovals(1, 1);\r\n    clearAllocateRequestLists();\r\n    this.relayer.allocate(getAllocateRequest());\r\n    assertAsksAndReleases(0, 0);\r\n    assertBlacklistAdditionsAndRemovals(0, 0);\r\n    clearAllocateRequestLists();\r\n    this.mockAMS.setFailoverFlag();\r\n    this.blacklistAdditions.add(\"node2\");\r\n    this.releases.add(c2);\r\n    this.relayer.allocate(getAllocateRequest());\r\n    assertAsksAndReleases(3, 2);\r\n    assertBlacklistAdditionsAndRemovals(2, 0);\r\n    clearAllocateRequestLists();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testResponseIdResync",
  "errType" : [ "InvalidApplicationMasterRequestException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testResponseIdResync() throws YarnException, IOException\n{\r\n    this.responseId = 10;\r\n    AllocateResponse response = this.relayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(this.responseId + 1, response.getResponseId());\r\n    int expected = 5;\r\n    this.mockAMS.setResponseIdReset(expected);\r\n    try {\r\n        this.relayer.allocate(getAllocateRequest());\r\n        Assert.fail(\"Expecting exception from RM\");\r\n    } catch (InvalidApplicationMasterRequestException e) {\r\n    }\r\n    response = this.relayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(expected + 1, response.getResponseId());\r\n    this.responseId = response.getResponseId();\r\n    response = this.relayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(this.responseId + 1, response.getResponseId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "testConcurrentReregister",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testConcurrentReregister() throws YarnException, IOException\n{\r\n    this.mockAMS.setFailoverFlag();\r\n    this.mockAMS.setThrowAlreadyRegister();\r\n    relayer.finishApplicationMaster(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "createSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterInfo createSubClusterInfo(SubClusterId subClusterId)\n{\r\n    String amRMAddress = \"1.2.3.4:1\";\r\n    String clientRMAddress = \"1.2.3.4:2\";\r\n    String rmAdminAddress = \"1.2.3.4:3\";\r\n    String webAppAddress = \"1.2.3.4:4\";\r\n    return SubClusterInfo.newInstance(subClusterId, amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress, SubClusterState.SC_RUNNING, CLOCK.getTime(), \"capability\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "registerSubCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void registerSubCluster(SubClusterId subClusterId) throws YarnException\n{\r\n    SubClusterInfo subClusterInfo = createSubClusterInfo(subClusterId);\r\n    stateStore.registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "registerSubClusters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void registerSubClusters(int numSubClusters) throws YarnException\n{\r\n    for (int i = 0; i < numSubClusters; i++) {\r\n        registerSubCluster(SubClusterId.newInstance(SC_PREFIX + i));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "addApplicationHomeSC",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addApplicationHomeSC(ApplicationId appId, SubClusterId subClusterId) throws YarnException\n{\r\n    ApplicationHomeSubCluster ahsc = ApplicationHomeSubCluster.newInstance(appId, subClusterId);\r\n    AddApplicationHomeSubClusterRequest request = AddApplicationHomeSubClusterRequest.newInstance(ahsc);\r\n    stateStore.addApplicationHomeSubCluster(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "addAppsHomeSC",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addAppsHomeSC(long clusterTs, int numApps) throws YarnException\n{\r\n    for (int i = 0; i < numApps; i++) {\r\n        addApplicationHomeSC(ApplicationId.newInstance(clusterTs, i), SubClusterId.newInstance(SC_PREFIX + i));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getAllSubClusterIds",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "List<SubClusterId> getAllSubClusterIds(boolean filterInactiveSubclusters) throws YarnException\n{\r\n    List<SubClusterInfo> infos = stateStore.getSubClusters(GetSubClustersInfoRequest.newInstance(filterInactiveSubclusters)).getSubClusters();\r\n    List<SubClusterId> ids = new ArrayList<>();\r\n    for (SubClusterInfo s : infos) {\r\n        ids.add(s.getSubClusterId());\r\n    }\r\n    return ids;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "createSCPolicyConf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterPolicyConfiguration createSCPolicyConf(String queueName, String policyType)\n{\r\n    return SubClusterPolicyConfiguration.newInstance(queueName, policyType, ByteBuffer.allocate(1));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "setPolicyConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPolicyConf(String queue, String policyType) throws YarnException\n{\r\n    SetSubClusterPolicyConfigurationRequest request = SetSubClusterPolicyConfigurationRequest.newInstance(createSCPolicyConf(queue, policyType));\r\n    stateStore.setPolicyConfiguration(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "addPolicyConfigs",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void addPolicyConfigs(int numQueues) throws YarnException\n{\r\n    for (int i = 0; i < numQueues; i++) {\r\n        setPolicyConf(Q_PREFIX + i, POLICY_PREFIX + i);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "querySubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterInfo querySubClusterInfo(SubClusterId subClusterId) throws YarnException\n{\r\n    GetSubClusterInfoRequest request = GetSubClusterInfoRequest.newInstance(subClusterId);\r\n    return stateStore.getSubCluster(request).getSubClusterInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "queryApplicationHomeSC",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SubClusterId queryApplicationHomeSC(ApplicationId appId) throws YarnException\n{\r\n    GetApplicationHomeSubClusterRequest request = GetApplicationHomeSubClusterRequest.newInstance(appId);\r\n    GetApplicationHomeSubClusterResponse response = stateStore.getApplicationHomeSubCluster(request);\r\n    return response.getApplicationHomeSubCluster().getHomeSubCluster();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "queryPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SubClusterPolicyConfiguration queryPolicyConfiguration(String queue) throws YarnException\n{\r\n    GetSubClusterPolicyConfigurationRequest request = GetSubClusterPolicyConfigurationRequest.newInstance(queue);\r\n    GetSubClusterPolicyConfigurationResponse result = stateStore.getPolicyConfiguration(request);\r\n    return result.getPolicyConfiguration();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "deregisterAllSubClusters",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void deregisterAllSubClusters() throws YarnException\n{\r\n    for (SubClusterId sc : getAllSubClusterIds(true)) {\r\n        deRegisterSubCluster(sc);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "deRegisterSubCluster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void deRegisterSubCluster(SubClusterId subClusterId) throws YarnException\n{\r\n    stateStore.deregisterSubCluster(SubClusterDeregisterRequest.newInstance(subClusterId, SubClusterState.SC_UNREGISTERED));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testNullQueueRouting",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testNullQueueRouting() throws YarnException\n{\r\n    FederationRouterPolicy localPolicy = (FederationRouterPolicy) getPolicy();\r\n    ApplicationSubmissionContext applicationSubmissionContext = ApplicationSubmissionContext.newInstance(null, null, null, null, null, false, false, 0, Resources.none(), null, false, null, null);\r\n    SubClusterId chosen = localPolicy.getHomeSubcluster(applicationSubmissionContext, null);\r\n    Assert.assertNotNull(chosen);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testNullAppContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNullAppContext() throws YarnException\n{\r\n    ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testBlacklistSubcluster",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testBlacklistSubcluster() throws YarnException\n{\r\n    FederationRouterPolicy localPolicy = (FederationRouterPolicy) getPolicy();\r\n    ApplicationSubmissionContext applicationSubmissionContext = ApplicationSubmissionContext.newInstance(null, null, null, null, null, false, false, 0, Resources.none(), null, false, null, null);\r\n    Map<SubClusterId, SubClusterInfo> activeSubClusters = getActiveSubclusters();\r\n    if (activeSubClusters != null && activeSubClusters.size() > 1 && !(localPolicy instanceof RejectRouterPolicy)) {\r\n        Random random = new Random();\r\n        List<SubClusterId> blacklistSubclusters = new ArrayList<SubClusterId>(activeSubClusters.keySet());\r\n        SubClusterId removed = blacklistSubclusters.remove(random.nextInt(blacklistSubclusters.size()));\r\n        getPolicyInfo().getRouterPolicyWeights().put(new SubClusterIdInfo(removed), 1.0f);\r\n        FederationPoliciesTestUtil.initializePolicyContext(getPolicy(), getPolicyInfo(), getActiveSubclusters());\r\n        SubClusterId chosen = localPolicy.getHomeSubcluster(applicationSubmissionContext, blacklistSubclusters);\r\n        Assert.assertNotNull(chosen);\r\n        Assert.assertEquals(removed, chosen);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testAllBlacklistSubcluster",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAllBlacklistSubcluster() throws YarnException\n{\r\n    FederationRouterPolicy localPolicy = (FederationRouterPolicy) getPolicy();\r\n    ApplicationSubmissionContext applicationSubmissionContext = ApplicationSubmissionContext.newInstance(null, null, null, null, null, false, false, 0, Resources.none(), null, false, null, null);\r\n    Map<SubClusterId, SubClusterInfo> activeSubClusters = getActiveSubclusters();\r\n    if (activeSubClusters != null && activeSubClusters.size() > 1 && !(localPolicy instanceof RejectRouterPolicy)) {\r\n        List<SubClusterId> blacklistSubclusters = new ArrayList<SubClusterId>(activeSubClusters.keySet());\r\n        try {\r\n            localPolicy.getHomeSubcluster(applicationSubmissionContext, blacklistSubclusters);\r\n            Assert.fail();\r\n        } catch (YarnException e) {\r\n            Assert.assertTrue(e.getMessage().equals(FederationPolicyUtils.NO_ACTIVE_SUBCLUSTER_AVAILABLE));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "createStateStore",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "FederationStateStore createStateStore()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.FEDERATION_STATESTORE_SQL_JDBC_CLASS, HSQLDB_DRIVER);\r\n    conf.set(YarnConfiguration.FEDERATION_STATESTORE_SQL_USERNAME, DATABASE_USERNAME);\r\n    conf.set(YarnConfiguration.FEDERATION_STATESTORE_SQL_PASSWORD, DATABASE_PASSWORD);\r\n    conf.set(YarnConfiguration.FEDERATION_STATESTORE_SQL_URL, DATABASE_URL + System.currentTimeMillis());\r\n    super.setConf(conf);\r\n    return new HSQLDBFederationStateStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testSqlConnectionsCreatedCount",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testSqlConnectionsCreatedCount() throws YarnException\n{\r\n    FederationStateStore stateStore = getStateStore();\r\n    SubClusterId subClusterId = SubClusterId.newInstance(\"SC\");\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    SubClusterInfo subClusterInfo = createSubClusterInfo(subClusterId);\r\n    stateStore.registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo));\r\n    Assert.assertEquals(subClusterInfo, querySubClusterInfo(subClusterId));\r\n    addApplicationHomeSC(appId, subClusterId);\r\n    Assert.assertEquals(subClusterId, queryApplicationHomeSC(appId));\r\n    Assert.assertEquals(1, FederationStateStoreClientMetrics.getNumConnections());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\timeline\\security",
  "methodName" : "testProxyUserConfiguration",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testProxyUserConfiguration()\n{\r\n    FilterContainer container = Mockito.mock(FilterContainer.class);\r\n    for (int i = 0; i < 3; ++i) {\r\n        Configuration conf = new YarnConfiguration();\r\n        switch(i) {\r\n            case 0:\r\n                conf.set(\"hadoop.proxyuser.foo.hosts\", \"*\");\r\n                conf.set(\"hadoop.proxyuser.foo.users\", \"*\");\r\n                conf.set(\"hadoop.proxyuser.foo.groups\", \"*\");\r\n                break;\r\n            case 1:\r\n                conf.set(TIMELINE_HTTP_AUTH_PREFIX + \"proxyuser.foo.hosts\", \"*\");\r\n                conf.set(TIMELINE_HTTP_AUTH_PREFIX + \"proxyuser.foo.users\", \"*\");\r\n                conf.set(TIMELINE_HTTP_AUTH_PREFIX + \"proxyuser.foo.groups\", \"*\");\r\n                break;\r\n            case 2:\r\n                conf.set(\"hadoop.proxyuser.foo.hosts\", \"bar\");\r\n                conf.set(\"hadoop.proxyuser.foo.users\", \"bar\");\r\n                conf.set(\"hadoop.proxyuser.foo.groups\", \"bar\");\r\n                conf.set(TIMELINE_HTTP_AUTH_PREFIX + \"proxyuser.foo.hosts\", \"*\");\r\n                conf.set(TIMELINE_HTTP_AUTH_PREFIX + \"proxyuser.foo.users\", \"*\");\r\n                conf.set(TIMELINE_HTTP_AUTH_PREFIX + \"proxyuser.foo.groups\", \"*\");\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        TimelineAuthenticationFilterInitializer initializer = new TimelineAuthenticationFilterInitializer();\r\n        initializer.initFilter(container, conf);\r\n        Assert.assertEquals(\"*\", initializer.filterConfig.get(\"proxyuser.foo.hosts\"));\r\n        Assert.assertEquals(\"*\", initializer.filterConfig.get(\"proxyuser.foo.users\"));\r\n        Assert.assertEquals(\"*\", initializer.filterConfig.get(\"proxyuser.foo.groups\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setup()\n{\r\n    wfp = new HomePolicyManager();\r\n    expectedPolicyManager = HomePolicyManager.class;\r\n    expectedAMRMProxyPolicy = HomeAMRMProxyPolicy.class;\r\n    expectedRouterPolicy = UniformRandomRouterPolicy.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    wfp = new RejectAllPolicyManager();\r\n    wfp.setQueue(\"queue1\");\r\n    expectedPolicyManager = RejectAllPolicyManager.class;\r\n    expectedAMRMProxyPolicy = RejectAMRMProxyPolicy.class;\r\n    expectedRouterPolicy = RejectRouterPolicy.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "before",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void before() throws IOException, YarnException\n{\r\n    try {\r\n        curatorTestingServer = new TestingServer();\r\n        curatorTestingServer.start();\r\n        String connectString = curatorTestingServer.getConnectString();\r\n        curatorFramework = CuratorFrameworkFactory.builder().connectString(connectString).retryPolicy(new RetryNTimes(100, 100)).build();\r\n        curatorFramework.start();\r\n        Configuration conf = new YarnConfiguration();\r\n        conf.set(CommonConfigurationKeys.ZK_ADDRESS, connectString);\r\n        setConf(conf);\r\n    } catch (Exception e) {\r\n        LOG.error(\"Cannot initialize ZooKeeper store\", e);\r\n        throw new IOException(e);\r\n    }\r\n    super.before();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "after",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void after() throws Exception\n{\r\n    super.after();\r\n    curatorFramework.close();\r\n    try {\r\n        curatorTestingServer.stop();\r\n    } catch (IOException e) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "createStateStore",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FederationStateStore createStateStore()\n{\r\n    super.setConf(getConf());\r\n    return new ZookeeperFederationStateStore();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setup()\n{\r\n    conf = new Configuration();\r\n    conf.setInt(YarnConfiguration.CLIENT_FAILOVER_RETRIES, maxRetries);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testFacadeRetriableException",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testFacadeRetriableException() throws Exception\n{\r\n    RetryPolicy policy = FederationStateStoreFacade.createRetryPolicy(conf);\r\n    RetryAction action = policy.shouldRetry(new FederationStateStoreRetriableException(\"\"), 0, 0, false);\r\n    Assert.assertEquals(RetryAction.RETRY.action, action.action);\r\n    action = policy.shouldRetry(new FederationStateStoreRetriableException(\"\"), maxRetries, 0, false);\r\n    Assert.assertEquals(RetryAction.FAIL.action, action.action);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testFacadeYarnException",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testFacadeYarnException() throws Exception\n{\r\n    RetryPolicy policy = FederationStateStoreFacade.createRetryPolicy(conf);\r\n    RetryAction action = policy.shouldRetry(new YarnException(), 0, 0, false);\r\n    Assert.assertEquals(RetryAction.FAIL.action, action.action);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testFacadeStateStoreException",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testFacadeStateStoreException() throws Exception\n{\r\n    RetryPolicy policy = FederationStateStoreFacade.createRetryPolicy(conf);\r\n    RetryAction action = policy.shouldRetry(new FederationStateStoreException(\"Error\"), 0, 0, false);\r\n    Assert.assertEquals(RetryAction.FAIL.action, action.action);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testFacadeInvalidInputException",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testFacadeInvalidInputException() throws Exception\n{\r\n    RetryPolicy policy = FederationStateStoreFacade.createRetryPolicy(conf);\r\n    RetryAction action = policy.shouldRetry(new FederationStateStoreInvalidInputException(\"\"), 0, 0, false);\r\n    Assert.assertEquals(RetryAction.FAIL.action, action.action);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testFacadeCacheRetriableException",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testFacadeCacheRetriableException() throws Exception\n{\r\n    RetryPolicy policy = FederationStateStoreFacade.createRetryPolicy(conf);\r\n    RetryAction action = policy.shouldRetry(new CacheLoaderException(\"\"), 0, 0, false);\r\n    Assert.assertEquals(RetryAction.RETRY.action, action.action);\r\n    action = policy.shouldRetry(new CacheLoaderException(\"\"), maxRetries, 0, false);\r\n    Assert.assertEquals(RetryAction.FAIL.action, action.action);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testFacadePoolInitRetriableException",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testFacadePoolInitRetriableException() throws Exception\n{\r\n    RetryPolicy policy = FederationStateStoreFacade.createRetryPolicy(conf);\r\n    RetryAction action = policy.shouldRetry(new PoolInitializationException(new YarnException()), 0, 0, false);\r\n    Assert.assertEquals(RetryAction.RETRY.action, action.action);\r\n    action = policy.shouldRetry(new PoolInitializationException(new YarnException()), maxRetries, 0, false);\r\n    Assert.assertEquals(RetryAction.FAIL.action, action.action);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "testRoundTrip",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testRoundTrip() throws Exception\n{\r\n    RegisterNodeManagerResponse resp = recordFactory.newRecordInstance(RegisterNodeManagerResponse.class);\r\n    byte[] b = { 0, 1, 2, 3, 4, 5 };\r\n    MasterKey containerTokenMK = recordFactory.newRecordInstance(MasterKey.class);\r\n    containerTokenMK.setKeyId(54321);\r\n    containerTokenMK.setBytes(ByteBuffer.wrap(b));\r\n    resp.setContainerTokenMasterKey(containerTokenMK);\r\n    MasterKey nmTokenMK = recordFactory.newRecordInstance(MasterKey.class);\r\n    nmTokenMK.setKeyId(12345);\r\n    nmTokenMK.setBytes(ByteBuffer.wrap(b));\r\n    resp.setNMTokenMasterKey(nmTokenMK);\r\n    resp.setNodeAction(NodeAction.NORMAL);\r\n    assertEquals(NodeAction.NORMAL, resp.getNodeAction());\r\n    assertNotNull(resp.getContainerTokenMasterKey());\r\n    assertEquals(54321, resp.getContainerTokenMasterKey().getKeyId());\r\n    assertArrayEquals(b, resp.getContainerTokenMasterKey().getBytes().array());\r\n    RegisterNodeManagerResponse respCopy = serDe(resp);\r\n    assertEquals(NodeAction.NORMAL, respCopy.getNodeAction());\r\n    assertNotNull(respCopy.getContainerTokenMasterKey());\r\n    assertEquals(54321, respCopy.getContainerTokenMasterKey().getKeyId());\r\n    assertArrayEquals(b, respCopy.getContainerTokenMasterKey().getBytes().array());\r\n    assertNotNull(resp.getNMTokenMasterKey());\r\n    assertEquals(12345, resp.getNMTokenMasterKey().getKeyId());\r\n    assertArrayEquals(b, resp.getNMTokenMasterKey().getBytes().array());\r\n    respCopy = serDe(resp);\r\n    assertEquals(NodeAction.NORMAL, respCopy.getNodeAction());\r\n    assertNotNull(respCopy.getNMTokenMasterKey());\r\n    assertEquals(12345, respCopy.getNMTokenMasterKey().getKeyId());\r\n    assertArrayEquals(b, respCopy.getNMTokenMasterKey().getBytes().array());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "serDe",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "RegisterNodeManagerResponse serDe(RegisterNodeManagerResponse orig) throws Exception\n{\r\n    RegisterNodeManagerResponsePBImpl asPB = (RegisterNodeManagerResponsePBImpl) orig;\r\n    RegisterNodeManagerResponseProto proto = asPB.getProto();\r\n    ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n    proto.writeTo(out);\r\n    ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());\r\n    RegisterNodeManagerResponseProto.Builder cp = RegisterNodeManagerResponseProto.newBuilder();\r\n    cp.mergeFrom(in);\r\n    return new RegisterNodeManagerResponsePBImpl(cp.build());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    this.conf = new YarnConfiguration();\r\n    this.registry = new FSRegistryOperationsService();\r\n    this.registry.init(this.conf);\r\n    this.registry.start();\r\n    this.user = UserGroupInformation.getCurrentUser();\r\n    this.registryClient = new FederationRegistryClient(this.conf, this.registry, this.user);\r\n    this.registryClient.cleanAllApplications();\r\n    Assert.assertEquals(0, this.registryClient.getAllApplications().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "breakDown",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void breakDown()\n{\r\n    registryClient.cleanAllApplications();\r\n    Assert.assertEquals(0, registryClient.getAllApplications().size());\r\n    registry.stop();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testBasicCase",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testBasicCase()\n{\r\n    ApplicationId appId = ApplicationId.newInstance(0, 0);\r\n    String scId1 = \"subcluster1\";\r\n    String scId2 = \"subcluster2\";\r\n    this.registryClient.writeAMRMTokenForUAM(appId, scId1, new Token<AMRMTokenIdentifier>());\r\n    this.registryClient.writeAMRMTokenForUAM(appId, scId2, new Token<AMRMTokenIdentifier>());\r\n    this.registryClient.writeAMRMTokenForUAM(appId, scId1, new Token<AMRMTokenIdentifier>());\r\n    Assert.assertEquals(1, this.registryClient.getAllApplications().size());\r\n    Assert.assertEquals(2, this.registryClient.loadStateFromRegistry(appId).size());\r\n    this.registryClient.removeAppFromRegistry(appId);\r\n    Assert.assertEquals(0, this.registryClient.getAllApplications().size());\r\n    Assert.assertEquals(0, this.registryClient.loadStateFromRegistry(appId).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "setUpGoodFile",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setUpGoodFile()\n{\r\n    conf = new YarnConfiguration();\r\n    resolver = new DefaultSubClusterResolverImpl();\r\n    URL url = Thread.currentThread().getContextClassLoader().getResource(\"nodes\");\r\n    if (url == null) {\r\n        throw new RuntimeException(\"Could not find 'nodes' dummy file in classpath\");\r\n    }\r\n    File file = new File(url.getPath());\r\n    conf.set(YarnConfiguration.FEDERATION_MACHINE_LIST, file.getPath());\r\n    resolver.setConf(conf);\r\n    resolver.load();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "setUpMalformedFile",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setUpMalformedFile()\n{\r\n    conf = new YarnConfiguration();\r\n    resolver = new DefaultSubClusterResolverImpl();\r\n    URL url = Thread.currentThread().getContextClassLoader().getResource(\"nodes-malformed\");\r\n    if (url == null) {\r\n        throw new RuntimeException(\"Could not find 'nodes-malformed' dummy file in classpath\");\r\n    }\r\n    File file = new File(url.getPath());\r\n    conf.set(YarnConfiguration.FEDERATION_MACHINE_LIST, file.getPath());\r\n    resolver.setConf(conf);\r\n    resolver.load();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "setUpNonExistentFile",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUpNonExistentFile()\n{\r\n    conf = new YarnConfiguration();\r\n    resolver = new DefaultSubClusterResolverImpl();\r\n    conf.set(YarnConfiguration.FEDERATION_MACHINE_LIST, \"fileDoesNotExist\");\r\n    resolver.setConf(conf);\r\n    resolver.load();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "testGetSubClusterForNode",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetSubClusterForNode() throws YarnException\n{\r\n    setUpGoodFile();\r\n    Assert.assertEquals(SubClusterId.newInstance(\"subcluster1\"), resolver.getSubClusterForNode(\"node1\"));\r\n    Assert.assertEquals(SubClusterId.newInstance(\"subcluster2\"), resolver.getSubClusterForNode(\"node2\"));\r\n    Assert.assertEquals(SubClusterId.newInstance(\"subcluster3\"), resolver.getSubClusterForNode(\"node3\"));\r\n    try {\r\n        resolver.getSubClusterForNode(\"nodeDoesNotExist\");\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Cannot find subClusterId for node\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "testGetSubClusterForNodeMalformedFile",
  "errType" : [ "YarnException", "YarnException", "YarnException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testGetSubClusterForNodeMalformedFile() throws YarnException\n{\r\n    setUpMalformedFile();\r\n    try {\r\n        resolver.getSubClusterForNode(\"node1\");\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Cannot find subClusterId for node\"));\r\n    }\r\n    try {\r\n        resolver.getSubClusterForNode(\"node2\");\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Cannot find subClusterId for node\"));\r\n    }\r\n    Assert.assertEquals(SubClusterId.newInstance(\"subcluster3\"), resolver.getSubClusterForNode(\"node3\"));\r\n    try {\r\n        resolver.getSubClusterForNode(\"nodeDoesNotExist\");\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Cannot find subClusterId for node\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "testGetSubClusterForNodeNoFile",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetSubClusterForNodeNoFile() throws YarnException\n{\r\n    setUpNonExistentFile();\r\n    try {\r\n        resolver.getSubClusterForNode(\"node1\");\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Cannot find subClusterId for node\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "testGetSubClustersForRack",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetSubClustersForRack() throws YarnException\n{\r\n    setUpGoodFile();\r\n    Set<SubClusterId> rack1Expected = new HashSet<SubClusterId>();\r\n    rack1Expected.add(SubClusterId.newInstance(\"subcluster1\"));\r\n    rack1Expected.add(SubClusterId.newInstance(\"subcluster2\"));\r\n    Set<SubClusterId> rack2Expected = new HashSet<SubClusterId>();\r\n    rack2Expected.add(SubClusterId.newInstance(\"subcluster3\"));\r\n    Assert.assertEquals(rack1Expected, resolver.getSubClustersForRack(\"rack1\"));\r\n    Assert.assertEquals(rack2Expected, resolver.getSubClustersForRack(\"rack2\"));\r\n    try {\r\n        resolver.getSubClustersForRack(\"rackDoesNotExist\");\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Cannot resolve rack\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\resolver",
  "methodName" : "testGetSubClustersForRackNoFile",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetSubClustersForRackNoFile() throws YarnException\n{\r\n    setUpNonExistentFile();\r\n    try {\r\n        resolver.getSubClustersForRack(\"rack1\");\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Cannot resolve rack\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "testAggregateMetricInit",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testAggregateMetricInit()\n{\r\n    LOG.info(\"Test: aggregate metrics are initialized correctly\");\r\n    Assert.assertEquals(0, FederationStateStoreClientMetrics.getNumSucceededCalls());\r\n    Assert.assertEquals(0, FederationStateStoreClientMetrics.getNumFailedCalls());\r\n    LOG.info(\"Test: aggregate metrics are updated correctly\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "testSuccessfulCalls",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testSuccessfulCalls()\n{\r\n    LOG.info(\"Test: Aggregate and method successful calls updated correctly\");\r\n    long totalGoodBefore = FederationStateStoreClientMetrics.getNumSucceededCalls();\r\n    long apiGoodBefore = FederationStateStoreClientMetrics.getNumSucceessfulCallsForMethod(\"registerSubCluster\");\r\n    goodStateStore.registerSubCluster(100);\r\n    Assert.assertEquals(totalGoodBefore + 1, FederationStateStoreClientMetrics.getNumSucceededCalls());\r\n    Assert.assertEquals(100, FederationStateStoreClientMetrics.getLatencySucceededCalls(), 0);\r\n    Assert.assertEquals(apiGoodBefore + 1, FederationStateStoreClientMetrics.getNumSucceededCalls());\r\n    Assert.assertEquals(100, FederationStateStoreClientMetrics.getLatencySucceessfulCallsForMethod(\"registerSubCluster\"), 0);\r\n    LOG.info(\"Test: Running stats correctly calculated for 2 metrics\");\r\n    goodStateStore.registerSubCluster(200);\r\n    Assert.assertEquals(totalGoodBefore + 2, FederationStateStoreClientMetrics.getNumSucceededCalls());\r\n    Assert.assertEquals(150, FederationStateStoreClientMetrics.getLatencySucceededCalls(), 0);\r\n    Assert.assertEquals(apiGoodBefore + 2, FederationStateStoreClientMetrics.getNumSucceededCalls());\r\n    Assert.assertEquals(150, FederationStateStoreClientMetrics.getLatencySucceessfulCallsForMethod(\"registerSubCluster\"), 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "testFailedCalls",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testFailedCalls()\n{\r\n    long totalBadbefore = FederationStateStoreClientMetrics.getNumFailedCalls();\r\n    long apiBadBefore = FederationStateStoreClientMetrics.getNumFailedCallsForMethod(\"registerSubCluster\");\r\n    badStateStore.registerSubCluster();\r\n    LOG.info(\"Test: Aggregate and method failed calls updated correctly\");\r\n    Assert.assertEquals(totalBadbefore + 1, FederationStateStoreClientMetrics.getNumFailedCalls());\r\n    Assert.assertEquals(apiBadBefore + 1, FederationStateStoreClientMetrics.getNumFailedCallsForMethod(\"registerSubCluster\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\metrics",
  "methodName" : "testCallsUnknownMethod",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testCallsUnknownMethod()\n{\r\n    long totalBadbefore = FederationStateStoreClientMetrics.getNumFailedCalls();\r\n    long apiBadBefore = FederationStateStoreClientMetrics.getNumFailedCallsForMethod(\"registerSubCluster\");\r\n    long totalGoodBefore = FederationStateStoreClientMetrics.getNumSucceededCalls();\r\n    long apiGoodBefore = FederationStateStoreClientMetrics.getNumSucceessfulCallsForMethod(\"registerSubCluster\");\r\n    LOG.info(\"Calling Metrics class directly\");\r\n    FederationStateStoreClientMetrics.failedStateStoreCall();\r\n    FederationStateStoreClientMetrics.succeededStateStoreCall(100);\r\n    LOG.info(\"Test: Aggregate and method calls did not update\");\r\n    Assert.assertEquals(totalBadbefore, FederationStateStoreClientMetrics.getNumFailedCalls());\r\n    Assert.assertEquals(apiBadBefore, FederationStateStoreClientMetrics.getNumFailedCallsForMethod(\"registerSubCluster\"));\r\n    Assert.assertEquals(totalGoodBefore, FederationStateStoreClientMetrics.getNumSucceededCalls());\r\n    Assert.assertEquals(apiGoodBefore, FederationStateStoreClientMetrics.getNumSucceessfulCallsForMethod(\"registerSubCluster\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup() throws Exception\n{\r\n    appId = ApplicationId.fromString(\"application_1518143905142_509690\");\r\n    cId = ContainerId.fromString(\"container_e138_1518143905142_509690_01_000001\");\r\n    entities = new HashMap<>();\r\n    generateEntity();\r\n    request = Mockito.mock(HttpServletRequest.class);\r\n    Mockito.when(request.getRemoteUser()).thenReturn(System.getProperty(\"user.name\"));\r\n    logWebService = new LogWebServiceTest();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "testGetApp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetApp()\n{\r\n    BasicAppInfo app = logWebService.getApp(request, appId.toString(), null);\r\n    Assert.assertEquals(\"RUNNING\", app.getAppState().toString());\r\n    Assert.assertEquals(user, app.getUser());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "testGetContainer",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetContainer()\n{\r\n    String address = logWebService.getNodeHttpAddress(request, appId.toString(), null, cId.toString(), null);\r\n    Assert.assertEquals(this.nodeHttpAddress, address);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "generateEntity",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void generateEntity()\n{\r\n    createAppEntities();\r\n    createContainerEntities();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createContainerEntities",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void createContainerEntities()\n{\r\n    TimelineEntity timelineEntity = generateEntity(TimelineEntityType.YARN_APPLICATION.toString(), appId.toString());\r\n    timelineEntity.addInfo(ApplicationMetricsConstants.USER_ENTITY_INFO, user);\r\n    timelineEntity.addInfo(ApplicationMetricsConstants.STATE_EVENT_INFO, \"RUNNING\");\r\n    entities.put(appId.toString(), timelineEntity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createAppEntities",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void createAppEntities()\n{\r\n    TimelineEntity timelineEntity = generateEntity(TimelineEntityType.YARN_CONTAINER.toString(), cId.toString());\r\n    timelineEntity.addInfo(ContainerMetricsConstants.ALLOCATED_HOST_HTTP_ADDRESS_INFO, nodeHttpAddress);\r\n    entities.put(cId.toString(), timelineEntity);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "generateEntity",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "TimelineEntity generateEntity(String entityType, String entityId)\n{\r\n    TimelineEntity timelineEntity = new TimelineEntity();\r\n    timelineEntity.setId(entityId);\r\n    timelineEntity.setType(entityType);\r\n    timelineEntity.setCreatedTime(System.currentTimeMillis());\r\n    return timelineEntity;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    setPolicy(new RejectRouterPolicy());\r\n    setMockActiveSubclusters(2);\r\n    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(), getPolicyInfo(), getActiveSubclusters());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testNoClusterIsChosen",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testNoClusterIsChosen() throws YarnException\n{\r\n    ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(getApplicationSubmissionContext(), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testNullQueueRouting",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testNullQueueRouting() throws YarnException\n{\r\n    FederationRouterPolicy localPolicy = (FederationRouterPolicy) getPolicy();\r\n    ApplicationSubmissionContext applicationSubmissionContext = ApplicationSubmissionContext.newInstance(null, null, null, null, null, false, false, 0, Resources.none(), null, false, null, null);\r\n    localPolicy.getHomeSubcluster(applicationSubmissionContext, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    goodFacade = FederationPoliciesTestUtil.initFacade();\r\n    goodConfig = new MockPolicyManager().serializeConf();\r\n    goodSR = FederationPoliciesTestUtil.initResolver();\r\n    goodHome = SubClusterId.newInstance(\"homesubcluster\");\r\n    context = new FederationPolicyInitializationContext(goodConfig, goodSR, goodFacade, goodHome);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "correcInit",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void correcInit() throws Exception\n{\r\n    FederationPolicyInitializationContextValidator.validate(context, MockPolicyManager.class.getCanonicalName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "nullContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void nullContext() throws Exception\n{\r\n    FederationPolicyInitializationContextValidator.validate(null, MockPolicyManager.class.getCanonicalName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "nullType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void nullType() throws Exception\n{\r\n    FederationPolicyInitializationContextValidator.validate(context, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "wrongType",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void wrongType() throws Exception\n{\r\n    FederationPolicyInitializationContextValidator.validate(context, \"WrongType\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "nullConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void nullConf() throws Exception\n{\r\n    context.setSubClusterPolicyConfiguration(null);\r\n    FederationPolicyInitializationContextValidator.validate(context, MockPolicyManager.class.getCanonicalName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "nullResolver",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void nullResolver() throws Exception\n{\r\n    context.setFederationSubclusterResolver(null);\r\n    FederationPolicyInitializationContextValidator.validate(context, MockPolicyManager.class.getCanonicalName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "nullFacade",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void nullFacade() throws Exception\n{\r\n    context.setFederationStateStoreFacade(null);\r\n    FederationPolicyInitializationContextValidator.validate(context, MockPolicyManager.class.getCanonicalName());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "test",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void test()\n{\r\n    testPbServerFactory();\r\n    testPbClientFactory();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testPbServerFactory",
  "errType" : [ "YarnRuntimeException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testPbServerFactory()\n{\r\n    InetSocketAddress addr = new InetSocketAddress(0);\r\n    Configuration conf = new Configuration();\r\n    ResourceTracker instance = new ResourceTrackerTestImpl();\r\n    Server server = null;\r\n    try {\r\n        server = RpcServerFactoryPBImpl.get().getServer(ResourceTracker.class, instance, addr, conf, null, 1);\r\n        server.start();\r\n    } catch (YarnRuntimeException e) {\r\n        e.printStackTrace();\r\n        Assert.fail(\"Failed to create server\");\r\n    } finally {\r\n        server.stop();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testPbClientFactory",
  "errType" : [ "YarnRuntimeException", "YarnRuntimeException" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testPbClientFactory()\n{\r\n    InetSocketAddress addr = new InetSocketAddress(0);\r\n    System.err.println(addr.getHostName() + addr.getPort());\r\n    Configuration conf = new Configuration();\r\n    ResourceTracker instance = new ResourceTrackerTestImpl();\r\n    Server server = null;\r\n    try {\r\n        server = RpcServerFactoryPBImpl.get().getServer(ResourceTracker.class, instance, addr, conf, null, 1);\r\n        server.start();\r\n        System.err.println(server.getListenerAddress());\r\n        System.err.println(NetUtils.getConnectAddress(server));\r\n        ResourceTracker client = null;\r\n        try {\r\n            client = (ResourceTracker) RpcClientFactoryPBImpl.get().getClient(ResourceTracker.class, 1, NetUtils.getConnectAddress(server), conf);\r\n        } catch (YarnRuntimeException e) {\r\n            e.printStackTrace();\r\n            Assert.fail(\"Failed to create client\");\r\n        }\r\n    } catch (YarnRuntimeException e) {\r\n        e.printStackTrace();\r\n        Assert.fail(\"Failed to create server\");\r\n    } finally {\r\n        server.stop();\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    setPolicy(new LoadBasedRouterPolicy());\r\n    setPolicyInfo(new WeightedPolicyInfo());\r\n    Map<SubClusterIdInfo, Float> routerWeights = new HashMap<>();\r\n    Map<SubClusterIdInfo, Float> amrmWeights = new HashMap<>();\r\n    for (int i = 0; i < 20; i++) {\r\n        SubClusterIdInfo sc = new SubClusterIdInfo(String.format(\"sc%02d\", i));\r\n        SubClusterInfo federationSubClusterInfo = SubClusterInfo.newInstance(sc.toId(), null, null, null, null, -1, SubClusterState.SC_RUNNING, -1, generateClusterMetricsInfo(i));\r\n        getActiveSubclusters().put(sc.toId(), federationSubClusterInfo);\r\n        float weight = getRand().nextInt(2);\r\n        if (i == 5) {\r\n            weight = 1.0f;\r\n        }\r\n        if (i <= 5 || getRand().nextFloat() > 0.05f) {\r\n            routerWeights.put(sc, weight);\r\n            amrmWeights.put(sc, weight);\r\n        }\r\n    }\r\n    getPolicyInfo().setRouterPolicyWeights(routerWeights);\r\n    getPolicyInfo().setAMRMPolicyWeights(amrmWeights);\r\n    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(), getPolicyInfo(), getActiveSubclusters());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "generateClusterMetricsInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String generateClusterMetricsInfo(int id)\n{\r\n    long mem = 1024 * getRand().nextInt(277 * 100 - 1);\r\n    if (id == 5) {\r\n        mem = 1024 * 277 * 100;\r\n    }\r\n    String clusterMetrics = \"{\\\"clusterMetrics\\\":{\\\"appsSubmitted\\\":65,\" + \"\\\"appsCompleted\\\":64,\" + \"\\\"appsPending\\\":0,\\\"appsRunning\\\":0,\\\"appsFailed\\\":0,\" + \"\\\"appsKilled\\\":1,\\\"reservedMB\\\":0,\\\"availableMB\\\":\" + mem + \",\" + \"\\\"allocatedMB\\\":0,\\\"reservedVirtualCores\\\":0,\" + \"\\\"availableVirtualCores\\\":2216,\\\"allocatedVirtualCores\\\":0,\" + \"\\\"containersAllocated\\\":0,\\\"containersReserved\\\":0,\" + \"\\\"containersPending\\\":0,\\\"totalMB\\\":28364800,\" + \"\\\"totalVirtualCores\\\":2216,\\\"totalNodes\\\":278,\\\"lostNodes\\\":1,\" + \"\\\"unhealthyNodes\\\":0,\\\"decommissionedNodes\\\":0,\" + \"\\\"rebootedNodes\\\":0,\\\"activeNodes\\\":277}}\\n\";\r\n    return clusterMetrics;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testLoadIsRespected",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testLoadIsRespected() throws YarnException\n{\r\n    SubClusterId chosen = ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(getApplicationSubmissionContext(), null);\r\n    Assert.assertEquals(\"sc05\", chosen.getId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testIfNoSubclustersWithWeightOne",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testIfNoSubclustersWithWeightOne()\n{\r\n    setPolicy(new LoadBasedRouterPolicy());\r\n    setPolicyInfo(new WeightedPolicyInfo());\r\n    Map<SubClusterIdInfo, Float> routerWeights = new HashMap<>();\r\n    Map<SubClusterIdInfo, Float> amrmWeights = new HashMap<>();\r\n    SubClusterIdInfo sc = new SubClusterIdInfo(String.format(\"sc%02d\", 0));\r\n    SubClusterInfo federationSubClusterInfo = SubClusterInfo.newInstance(sc.toId(), null, null, null, null, -1, SubClusterState.SC_RUNNING, -1, generateClusterMetricsInfo(0));\r\n    getActiveSubclusters().clear();\r\n    getActiveSubclusters().put(sc.toId(), federationSubClusterInfo);\r\n    routerWeights.put(sc, 0.0f);\r\n    amrmWeights.put(sc, 0.0f);\r\n    getPolicyInfo().setRouterPolicyWeights(routerWeights);\r\n    getPolicyInfo().setAMRMPolicyWeights(amrmWeights);\r\n    try {\r\n        FederationPoliciesTestUtil.initializePolicyContext(getPolicy(), getPolicyInfo(), getActiveSubclusters());\r\n        ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(getApplicationSubmissionContext(), null);\r\n        fail();\r\n    } catch (YarnException ex) {\r\n        Assert.assertTrue(ex.getMessage().contains(\"Zero Active Subcluster with weight 1\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "createStateStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FederationStateStore createStateStore()",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "before",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void before() throws IOException, YarnException\n{\r\n    stateStore = createStateStore();\r\n    stateStore.init(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "after",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void after() throws Exception\n{\r\n    stateStore.close();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testRegisterSubCluster",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testRegisterSubCluster() throws Exception\n{\r\n    SubClusterId subClusterId = SubClusterId.newInstance(\"SC\");\r\n    SubClusterInfo subClusterInfo = createSubClusterInfo(subClusterId);\r\n    long previousTimeStamp = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\")).getTimeInMillis();\r\n    SubClusterRegisterResponse result = stateStore.registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo));\r\n    long currentTimeStamp = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\")).getTimeInMillis();\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(subClusterInfo, querySubClusterInfo(subClusterId));\r\n    Assert.assertTrue(querySubClusterInfo(subClusterId).getLastHeartBeat() <= currentTimeStamp);\r\n    Assert.assertTrue(querySubClusterInfo(subClusterId).getLastHeartBeat() >= previousTimeStamp);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testDeregisterSubCluster",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDeregisterSubCluster() throws Exception\n{\r\n    SubClusterId subClusterId = SubClusterId.newInstance(\"SC\");\r\n    registerSubCluster(createSubClusterInfo(subClusterId));\r\n    SubClusterDeregisterRequest deregisterRequest = SubClusterDeregisterRequest.newInstance(subClusterId, SubClusterState.SC_UNREGISTERED);\r\n    stateStore.deregisterSubCluster(deregisterRequest);\r\n    Assert.assertEquals(SubClusterState.SC_UNREGISTERED, querySubClusterInfo(subClusterId).getState());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testDeregisterSubClusterUnknownSubCluster",
  "errType" : [ "FederationStateStoreException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDeregisterSubClusterUnknownSubCluster() throws Exception\n{\r\n    SubClusterId subClusterId = SubClusterId.newInstance(\"SC\");\r\n    SubClusterDeregisterRequest deregisterRequest = SubClusterDeregisterRequest.newInstance(subClusterId, SubClusterState.SC_UNREGISTERED);\r\n    try {\r\n        stateStore.deregisterSubCluster(deregisterRequest);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"SubCluster SC not found\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testGetSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetSubClusterInfo() throws Exception\n{\r\n    SubClusterId subClusterId = SubClusterId.newInstance(\"SC\");\r\n    SubClusterInfo subClusterInfo = createSubClusterInfo(subClusterId);\r\n    registerSubCluster(subClusterInfo);\r\n    GetSubClusterInfoRequest request = GetSubClusterInfoRequest.newInstance(subClusterId);\r\n    Assert.assertEquals(subClusterInfo, stateStore.getSubCluster(request).getSubClusterInfo());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testGetSubClusterInfoUnknownSubCluster",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testGetSubClusterInfoUnknownSubCluster() throws Exception\n{\r\n    SubClusterId subClusterId = SubClusterId.newInstance(\"SC\");\r\n    GetSubClusterInfoRequest request = GetSubClusterInfoRequest.newInstance(subClusterId);\r\n    GetSubClusterInfoResponse response = stateStore.getSubCluster(request);\r\n    Assert.assertNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testGetAllSubClustersInfo",
  "errType" : null,
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void testGetAllSubClustersInfo() throws Exception\n{\r\n    SubClusterId subClusterId1 = SubClusterId.newInstance(\"SC1\");\r\n    SubClusterInfo subClusterInfo1 = createSubClusterInfo(subClusterId1);\r\n    SubClusterId subClusterId2 = SubClusterId.newInstance(\"SC2\");\r\n    SubClusterInfo subClusterInfo2 = createSubClusterInfo(subClusterId2);\r\n    stateStore.registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo1));\r\n    stateStore.registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo2));\r\n    stateStore.subClusterHeartbeat(SubClusterHeartbeatRequest.newInstance(subClusterId1, SubClusterState.SC_RUNNING, \"capability\"));\r\n    stateStore.subClusterHeartbeat(SubClusterHeartbeatRequest.newInstance(subClusterId2, SubClusterState.SC_UNHEALTHY, \"capability\"));\r\n    List<SubClusterInfo> subClustersActive = stateStore.getSubClusters(GetSubClustersInfoRequest.newInstance(true)).getSubClusters();\r\n    List<SubClusterInfo> subClustersAll = stateStore.getSubClusters(GetSubClustersInfoRequest.newInstance(false)).getSubClusters();\r\n    Assert.assertEquals(1, subClustersActive.size());\r\n    SubClusterInfo sc1 = subClustersActive.get(0);\r\n    Assert.assertEquals(subClusterId1, sc1.getSubClusterId());\r\n    Assert.assertEquals(2, subClustersAll.size());\r\n    Assert.assertTrue(subClustersAll.contains(sc1));\r\n    subClustersAll.remove(sc1);\r\n    SubClusterInfo sc2 = subClustersAll.get(0);\r\n    Assert.assertEquals(subClusterId2, sc2.getSubClusterId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testSubClusterHeartbeat",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testSubClusterHeartbeat() throws Exception\n{\r\n    SubClusterId subClusterId = SubClusterId.newInstance(\"SC\");\r\n    registerSubCluster(createSubClusterInfo(subClusterId));\r\n    long previousHeartBeat = querySubClusterInfo(subClusterId).getLastHeartBeat();\r\n    SubClusterHeartbeatRequest heartbeatRequest = SubClusterHeartbeatRequest.newInstance(subClusterId, SubClusterState.SC_RUNNING, \"capability\");\r\n    stateStore.subClusterHeartbeat(heartbeatRequest);\r\n    long currentTimeStamp = Calendar.getInstance(TimeZone.getTimeZone(\"UTC\")).getTimeInMillis();\r\n    Assert.assertEquals(SubClusterState.SC_RUNNING, querySubClusterInfo(subClusterId).getState());\r\n    Assert.assertTrue(querySubClusterInfo(subClusterId).getLastHeartBeat() <= currentTimeStamp);\r\n    Assert.assertTrue(querySubClusterInfo(subClusterId).getLastHeartBeat() >= previousHeartBeat);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testSubClusterHeartbeatUnknownSubCluster",
  "errType" : [ "FederationStateStoreException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testSubClusterHeartbeatUnknownSubCluster() throws Exception\n{\r\n    SubClusterId subClusterId = SubClusterId.newInstance(\"SC\");\r\n    SubClusterHeartbeatRequest heartbeatRequest = SubClusterHeartbeatRequest.newInstance(subClusterId, SubClusterState.SC_RUNNING, \"capability\");\r\n    try {\r\n        stateStore.subClusterHeartbeat(heartbeatRequest);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"SubCluster SC does not exist; cannot heartbeat\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testAddApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAddApplicationHomeSubCluster() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    SubClusterId subClusterId = SubClusterId.newInstance(\"SC\");\r\n    ApplicationHomeSubCluster ahsc = ApplicationHomeSubCluster.newInstance(appId, subClusterId);\r\n    AddApplicationHomeSubClusterRequest request = AddApplicationHomeSubClusterRequest.newInstance(ahsc);\r\n    AddApplicationHomeSubClusterResponse response = stateStore.addApplicationHomeSubCluster(request);\r\n    Assert.assertEquals(subClusterId, response.getHomeSubCluster());\r\n    Assert.assertEquals(subClusterId, queryApplicationHomeSC(appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testAddApplicationHomeSubClusterAppAlreadyExists",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testAddApplicationHomeSubClusterAppAlreadyExists() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    SubClusterId subClusterId1 = SubClusterId.newInstance(\"SC1\");\r\n    addApplicationHomeSC(appId, subClusterId1);\r\n    SubClusterId subClusterId2 = SubClusterId.newInstance(\"SC2\");\r\n    ApplicationHomeSubCluster ahsc2 = ApplicationHomeSubCluster.newInstance(appId, subClusterId2);\r\n    AddApplicationHomeSubClusterResponse response = stateStore.addApplicationHomeSubCluster(AddApplicationHomeSubClusterRequest.newInstance(ahsc2));\r\n    Assert.assertEquals(subClusterId1, response.getHomeSubCluster());\r\n    Assert.assertEquals(subClusterId1, queryApplicationHomeSC(appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testAddApplicationHomeSubClusterAppAlreadyExistsInTheSameSC",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testAddApplicationHomeSubClusterAppAlreadyExistsInTheSameSC() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    SubClusterId subClusterId1 = SubClusterId.newInstance(\"SC1\");\r\n    addApplicationHomeSC(appId, subClusterId1);\r\n    ApplicationHomeSubCluster ahsc2 = ApplicationHomeSubCluster.newInstance(appId, subClusterId1);\r\n    AddApplicationHomeSubClusterResponse response = stateStore.addApplicationHomeSubCluster(AddApplicationHomeSubClusterRequest.newInstance(ahsc2));\r\n    Assert.assertEquals(subClusterId1, response.getHomeSubCluster());\r\n    Assert.assertEquals(subClusterId1, queryApplicationHomeSC(appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testDeleteApplicationHomeSubCluster",
  "errType" : [ "FederationStateStoreException" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testDeleteApplicationHomeSubCluster() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    SubClusterId subClusterId = SubClusterId.newInstance(\"SC\");\r\n    addApplicationHomeSC(appId, subClusterId);\r\n    DeleteApplicationHomeSubClusterRequest delRequest = DeleteApplicationHomeSubClusterRequest.newInstance(appId);\r\n    DeleteApplicationHomeSubClusterResponse response = stateStore.deleteApplicationHomeSubCluster(delRequest);\r\n    Assert.assertNotNull(response);\r\n    try {\r\n        queryApplicationHomeSC(appId);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Application \" + appId + \" does not exist\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testDeleteApplicationHomeSubClusterUnknownApp",
  "errType" : [ "FederationStateStoreException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testDeleteApplicationHomeSubClusterUnknownApp() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    DeleteApplicationHomeSubClusterRequest delRequest = DeleteApplicationHomeSubClusterRequest.newInstance(appId);\r\n    try {\r\n        stateStore.deleteApplicationHomeSubCluster(delRequest);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Application \" + appId.toString() + \" does not exist\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testGetApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testGetApplicationHomeSubCluster() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    SubClusterId subClusterId = SubClusterId.newInstance(\"SC\");\r\n    addApplicationHomeSC(appId, subClusterId);\r\n    GetApplicationHomeSubClusterRequest getRequest = GetApplicationHomeSubClusterRequest.newInstance(appId);\r\n    GetApplicationHomeSubClusterResponse result = stateStore.getApplicationHomeSubCluster(getRequest);\r\n    Assert.assertEquals(appId, result.getApplicationHomeSubCluster().getApplicationId());\r\n    Assert.assertEquals(subClusterId, result.getApplicationHomeSubCluster().getHomeSubCluster());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testGetApplicationHomeSubClusterUnknownApp",
  "errType" : [ "FederationStateStoreException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetApplicationHomeSubClusterUnknownApp() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    GetApplicationHomeSubClusterRequest request = GetApplicationHomeSubClusterRequest.newInstance(appId);\r\n    try {\r\n        stateStore.getApplicationHomeSubCluster(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Application \" + appId.toString() + \" does not exist\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testGetApplicationsHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testGetApplicationsHomeSubCluster() throws Exception\n{\r\n    ApplicationId appId1 = ApplicationId.newInstance(1, 1);\r\n    SubClusterId subClusterId1 = SubClusterId.newInstance(\"SC1\");\r\n    ApplicationHomeSubCluster ahsc1 = ApplicationHomeSubCluster.newInstance(appId1, subClusterId1);\r\n    ApplicationId appId2 = ApplicationId.newInstance(1, 2);\r\n    SubClusterId subClusterId2 = SubClusterId.newInstance(\"SC2\");\r\n    ApplicationHomeSubCluster ahsc2 = ApplicationHomeSubCluster.newInstance(appId2, subClusterId2);\r\n    addApplicationHomeSC(appId1, subClusterId1);\r\n    addApplicationHomeSC(appId2, subClusterId2);\r\n    GetApplicationsHomeSubClusterRequest getRequest = GetApplicationsHomeSubClusterRequest.newInstance();\r\n    GetApplicationsHomeSubClusterResponse result = stateStore.getApplicationsHomeSubCluster(getRequest);\r\n    Assert.assertEquals(2, result.getAppsHomeSubClusters().size());\r\n    Assert.assertTrue(result.getAppsHomeSubClusters().contains(ahsc1));\r\n    Assert.assertTrue(result.getAppsHomeSubClusters().contains(ahsc2));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testUpdateApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testUpdateApplicationHomeSubCluster() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    SubClusterId subClusterId1 = SubClusterId.newInstance(\"SC1\");\r\n    addApplicationHomeSC(appId, subClusterId1);\r\n    SubClusterId subClusterId2 = SubClusterId.newInstance(\"SC2\");\r\n    ApplicationHomeSubCluster ahscUpdate = ApplicationHomeSubCluster.newInstance(appId, subClusterId2);\r\n    UpdateApplicationHomeSubClusterRequest updateRequest = UpdateApplicationHomeSubClusterRequest.newInstance(ahscUpdate);\r\n    UpdateApplicationHomeSubClusterResponse response = stateStore.updateApplicationHomeSubCluster(updateRequest);\r\n    Assert.assertNotNull(response);\r\n    Assert.assertEquals(subClusterId2, queryApplicationHomeSC(appId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testUpdateApplicationHomeSubClusterUnknownApp",
  "errType" : [ "FederationStateStoreException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testUpdateApplicationHomeSubClusterUnknownApp() throws Exception\n{\r\n    ApplicationId appId = ApplicationId.newInstance(1, 1);\r\n    SubClusterId subClusterId1 = SubClusterId.newInstance(\"SC1\");\r\n    ApplicationHomeSubCluster ahsc = ApplicationHomeSubCluster.newInstance(appId, subClusterId1);\r\n    UpdateApplicationHomeSubClusterRequest updateRequest = UpdateApplicationHomeSubClusterRequest.newInstance(ahsc);\r\n    try {\r\n        stateStore.updateApplicationHomeSubCluster((updateRequest));\r\n        Assert.fail();\r\n    } catch (FederationStateStoreException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Application \" + appId.toString() + \" does not exist\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testSetPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testSetPolicyConfiguration() throws Exception\n{\r\n    SetSubClusterPolicyConfigurationRequest request = SetSubClusterPolicyConfigurationRequest.newInstance(createSCPolicyConf(\"Queue\", \"PolicyType\"));\r\n    SetSubClusterPolicyConfigurationResponse result = stateStore.setPolicyConfiguration(request);\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(createSCPolicyConf(\"Queue\", \"PolicyType\"), queryPolicy(\"Queue\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testSetPolicyConfigurationUpdateExisting",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testSetPolicyConfigurationUpdateExisting() throws Exception\n{\r\n    setPolicyConf(\"Queue\", \"PolicyType1\");\r\n    SetSubClusterPolicyConfigurationRequest request2 = SetSubClusterPolicyConfigurationRequest.newInstance(createSCPolicyConf(\"Queue\", \"PolicyType2\"));\r\n    SetSubClusterPolicyConfigurationResponse result = stateStore.setPolicyConfiguration(request2);\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(createSCPolicyConf(\"Queue\", \"PolicyType2\"), queryPolicy(\"Queue\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testGetPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testGetPolicyConfiguration() throws Exception\n{\r\n    setPolicyConf(\"Queue\", \"PolicyType\");\r\n    GetSubClusterPolicyConfigurationRequest getRequest = GetSubClusterPolicyConfigurationRequest.newInstance(\"Queue\");\r\n    GetSubClusterPolicyConfigurationResponse result = stateStore.getPolicyConfiguration(getRequest);\r\n    Assert.assertNotNull(result);\r\n    Assert.assertEquals(createSCPolicyConf(\"Queue\", \"PolicyType\"), result.getPolicyConfiguration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testGetPolicyConfigurationUnknownQueue",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetPolicyConfigurationUnknownQueue() throws Exception\n{\r\n    GetSubClusterPolicyConfigurationRequest request = GetSubClusterPolicyConfigurationRequest.newInstance(\"Queue\");\r\n    GetSubClusterPolicyConfigurationResponse response = stateStore.getPolicyConfiguration(request);\r\n    Assert.assertNull(response);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "testGetPoliciesConfigurations",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testGetPoliciesConfigurations() throws Exception\n{\r\n    setPolicyConf(\"Queue1\", \"PolicyType1\");\r\n    setPolicyConf(\"Queue2\", \"PolicyType2\");\r\n    GetSubClusterPoliciesConfigurationsResponse response = stateStore.getPoliciesConfigurations(GetSubClusterPoliciesConfigurationsRequest.newInstance());\r\n    Assert.assertNotNull(response);\r\n    Assert.assertNotNull(response.getPoliciesConfigs());\r\n    Assert.assertEquals(2, response.getPoliciesConfigs().size());\r\n    Assert.assertTrue(response.getPoliciesConfigs().contains(createSCPolicyConf(\"Queue1\", \"PolicyType1\")));\r\n    Assert.assertTrue(response.getPoliciesConfigs().contains(createSCPolicyConf(\"Queue2\", \"PolicyType2\")));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "createSubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SubClusterInfo createSubClusterInfo(SubClusterId subClusterId)\n{\r\n    String amRMAddress = \"1.2.3.4:1\";\r\n    String clientRMAddress = \"1.2.3.4:2\";\r\n    String rmAdminAddress = \"1.2.3.4:3\";\r\n    String webAppAddress = \"1.2.3.4:4\";\r\n    return SubClusterInfo.newInstance(subClusterId, amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress, SubClusterState.SC_NEW, CLOCK.getTime(), \"capability\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "createSCPolicyConf",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SubClusterPolicyConfiguration createSCPolicyConf(String queueName, String policyType)\n{\r\n    ByteBuffer bb = ByteBuffer.allocate(100);\r\n    bb.put((byte) 0x02);\r\n    return SubClusterPolicyConfiguration.newInstance(queueName, policyType, bb);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "addApplicationHomeSC",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void addApplicationHomeSC(ApplicationId appId, SubClusterId subClusterId) throws YarnException\n{\r\n    ApplicationHomeSubCluster ahsc = ApplicationHomeSubCluster.newInstance(appId, subClusterId);\r\n    AddApplicationHomeSubClusterRequest request = AddApplicationHomeSubClusterRequest.newInstance(ahsc);\r\n    stateStore.addApplicationHomeSubCluster(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "setPolicyConf",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void setPolicyConf(String queue, String policyType) throws YarnException\n{\r\n    SetSubClusterPolicyConfigurationRequest request = SetSubClusterPolicyConfigurationRequest.newInstance(createSCPolicyConf(queue, policyType));\r\n    stateStore.setPolicyConfiguration(request);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "registerSubCluster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void registerSubCluster(SubClusterInfo subClusterInfo) throws YarnException\n{\r\n    stateStore.registerSubCluster(SubClusterRegisterRequest.newInstance(subClusterInfo));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "querySubClusterInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterInfo querySubClusterInfo(SubClusterId subClusterId) throws YarnException\n{\r\n    GetSubClusterInfoRequest request = GetSubClusterInfoRequest.newInstance(subClusterId);\r\n    return stateStore.getSubCluster(request).getSubClusterInfo();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "queryApplicationHomeSC",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SubClusterId queryApplicationHomeSC(ApplicationId appId) throws YarnException\n{\r\n    GetApplicationHomeSubClusterRequest request = GetApplicationHomeSubClusterRequest.newInstance(appId);\r\n    GetApplicationHomeSubClusterResponse response = stateStore.getApplicationHomeSubCluster(request);\r\n    return response.getApplicationHomeSubCluster().getHomeSubCluster();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "queryPolicy",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "SubClusterPolicyConfiguration queryPolicy(String queue) throws YarnException\n{\r\n    GetSubClusterPolicyConfigurationRequest request = GetSubClusterPolicyConfigurationRequest.newInstance(queue);\r\n    GetSubClusterPolicyConfigurationResponse result = stateStore.getPolicyConfiguration(request);\r\n    return result.getPolicyConfiguration();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "setConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setConf(Configuration conf)\n{\r\n    this.conf = conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getConf",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConf()\n{\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\impl",
  "methodName" : "getStateStore",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "FederationStateStore getStateStore()\n{\r\n    return stateStore;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setup()\n{\r\n    conf.set(YarnConfiguration.RM_CLUSTER_ID, \"subclusterId\");\r\n    callback = new CountingCallback();\r\n    attemptId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0, 1), 1);\r\n    uam = new TestableUnmanagedApplicationManager(conf, attemptId.getApplicationId(), null, \"submitter\", \"appNameSuffix\", true, \"rm\");\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "waitForCallBackCountAndCheckZeroPending",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void waitForCallBackCountAndCheckZeroPending(CountingCallback callBack, int expectCallBackCount)\n{\r\n    synchronized (callBack) {\r\n        while (callBack.callBackCount != expectCallBackCount) {\r\n            try {\r\n                callBack.wait();\r\n            } catch (InterruptedException e) {\r\n            }\r\n        }\r\n        Assert.assertEquals(\"Non zero pending requests when number of allocate callbacks reaches \" + expectCallBackCount, 0, callBack.requestQueueSize);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "testBasicUsage",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testBasicUsage() throws YarnException, IOException, InterruptedException\n{\r\n    launchUAM(attemptId);\r\n    registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(null, 0, null), attemptId);\r\n    allocateAsync(AllocateRequest.newInstance(0, 0, null, null, null), callback, attemptId);\r\n    waitForCallBackCountAndCheckZeroPending(callback, 1);\r\n    finishApplicationMaster(FinishApplicationMasterRequest.newInstance(null, null, null), attemptId);\r\n    while (uam.isHeartbeatThreadAlive()) {\r\n        LOG.info(\"waiting for heartbeat thread to finish\");\r\n        Thread.sleep(100);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "testUAMReAttach",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testUAMReAttach() throws YarnException, IOException, InterruptedException\n{\r\n    launchUAM(attemptId);\r\n    registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(null, 0, null), attemptId);\r\n    allocateAsync(AllocateRequest.newInstance(0, 0, null, null, null), callback, attemptId);\r\n    waitForCallBackCountAndCheckZeroPending(callback, 1);\r\n    MockResourceManagerFacade rmProxy = uam.getRMProxy();\r\n    uam = new TestableUnmanagedApplicationManager(conf, attemptId.getApplicationId(), null, \"submitter\", \"appNameSuffix\", true, \"rm\");\r\n    uam.setRMProxy(rmProxy);\r\n    reAttachUAM(null, attemptId);\r\n    registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(null, 0, null), attemptId);\r\n    allocateAsync(AllocateRequest.newInstance(0, 0, null, null, null), callback, attemptId);\r\n    waitForCallBackCountAndCheckZeroPending(callback, 2);\r\n    finishApplicationMaster(FinishApplicationMasterRequest.newInstance(null, null, null), attemptId);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "testReRegister",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testReRegister() throws YarnException, IOException, InterruptedException\n{\r\n    launchUAM(attemptId);\r\n    registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(null, 0, null), attemptId);\r\n    uam.setShouldReRegisterNext();\r\n    allocateAsync(AllocateRequest.newInstance(0, 0, null, null, null), callback, attemptId);\r\n    waitForCallBackCountAndCheckZeroPending(callback, 1);\r\n    uam.setShouldReRegisterNext();\r\n    finishApplicationMaster(FinishApplicationMasterRequest.newInstance(null, null, null), attemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "testSlowRegisterCall",
  "errType" : [ "Exception", "Exception", "InterruptedException" ],
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testSlowRegisterCall() throws YarnException, IOException, InterruptedException\n{\r\n    Thread registerAMThread = new Thread(new Runnable() {\r\n\r\n        @Override\r\n        public void run() {\r\n            try {\r\n                launchUAM(attemptId);\r\n                registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(null, 1001, null), attemptId);\r\n            } catch (Exception e) {\r\n                LOG.info(\"Register thread exception\", e);\r\n            }\r\n        }\r\n    });\r\n    Object syncObj = MockResourceManagerFacade.getRegisterSyncObj();\r\n    synchronized (syncObj) {\r\n        LOG.info(\"Starting register thread\");\r\n        registerAMThread.start();\r\n        try {\r\n            LOG.info(\"Test main starts waiting\");\r\n            syncObj.wait();\r\n            LOG.info(\"Test main wait finished\");\r\n        } catch (Exception e) {\r\n            LOG.info(\"Test main wait interrupted\", e);\r\n        }\r\n    }\r\n    allocateAsync(AllocateRequest.newInstance(0, 0, null, null, null), callback, attemptId);\r\n    synchronized (syncObj) {\r\n        syncObj.notifyAll();\r\n    }\r\n    LOG.info(\"Test main wait for register thread to finish\");\r\n    registerAMThread.join();\r\n    LOG.info(\"Register thread finished\");\r\n    allocateAsync(AllocateRequest.newInstance(0, 0, null, null, null), callback, attemptId);\r\n    waitForCallBackCountAndCheckZeroPending(callback, 2);\r\n    finishApplicationMaster(FinishApplicationMasterRequest.newInstance(null, null, null), attemptId);\r\n    allocateAsync(AllocateRequest.newInstance(0, 0, null, null, null), callback, attemptId);\r\n    allocateAsync(AllocateRequest.newInstance(0, 0, null, null, null), callback, attemptId);\r\n    Assert.assertEquals(0, callback.requestQueueSize);\r\n    try {\r\n        Thread.sleep(100);\r\n    } catch (InterruptedException e) {\r\n    }\r\n    Assert.assertEquals(2, callback.callBackCount);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "testAllocateWithoutRegister",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testAllocateWithoutRegister() throws YarnException, IOException, InterruptedException\n{\r\n    allocateAsync(AllocateRequest.newInstance(0, 0, null, null, null), callback, attemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "testFinishWithoutRegister",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testFinishWithoutRegister() throws YarnException, IOException, InterruptedException\n{\r\n    finishApplicationMaster(FinishApplicationMasterRequest.newInstance(null, null, null), attemptId);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "testForceKill",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testForceKill() throws YarnException, IOException, InterruptedException\n{\r\n    launchUAM(attemptId);\r\n    registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(null, 0, null), attemptId);\r\n    uam.forceKillApplication();\r\n    while (uam.isHeartbeatThreadAlive()) {\r\n        LOG.info(\"waiting for heartbeat thread to finish\");\r\n        Thread.sleep(100);\r\n    }\r\n    try {\r\n        uam.forceKillApplication();\r\n        Assert.fail(\"Should fail because application is already killed\");\r\n    } catch (YarnException t) {\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "testShutDownConnections",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testShutDownConnections() throws YarnException, IOException, InterruptedException\n{\r\n    launchUAM(attemptId);\r\n    registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(null, 0, null), attemptId);\r\n    uam.shutDownConnections();\r\n    while (uam.isHeartbeatThreadAlive()) {\r\n        LOG.info(\"waiting for heartbeat thread to finish\");\r\n        Thread.sleep(100);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "getUGIWithToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UserGroupInformation getUGIWithToken(ApplicationAttemptId appAttemptId)\n{\r\n    UserGroupInformation ugi = UserGroupInformation.createRemoteUser(appAttemptId.toString());\r\n    AMRMTokenIdentifier token = new AMRMTokenIdentifier(appAttemptId, 1);\r\n    ugi.addTokenIdentifier(token);\r\n    return ugi;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "launchUAM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Token<AMRMTokenIdentifier> launchUAM(ApplicationAttemptId appAttemptId) throws IOException, InterruptedException\n{\r\n    return getUGIWithToken(appAttemptId).doAs(new PrivilegedExceptionAction<Token<AMRMTokenIdentifier>>() {\r\n\r\n        @Override\r\n        public Token<AMRMTokenIdentifier> run() throws Exception {\r\n            return uam.launchUAM();\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "reAttachUAM",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void reAttachUAM(final Token<AMRMTokenIdentifier> uamToken, ApplicationAttemptId appAttemptId) throws IOException, InterruptedException\n{\r\n    getUGIWithToken(appAttemptId).doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Token<AMRMTokenIdentifier> run() throws Exception {\r\n            uam.reAttachUAM(uamToken);\r\n            return null;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "registerApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(final RegisterApplicationMasterRequest request, ApplicationAttemptId appAttemptId) throws YarnException, IOException, InterruptedException\n{\r\n    return getUGIWithToken(appAttemptId).doAs(new PrivilegedExceptionAction<RegisterApplicationMasterResponse>() {\r\n\r\n        @Override\r\n        public RegisterApplicationMasterResponse run() throws YarnException, IOException {\r\n            return uam.registerApplicationMaster(request);\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "allocateAsync",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void allocateAsync(final AllocateRequest request, final AsyncCallback<AllocateResponse> callBack, ApplicationAttemptId appAttemptId) throws YarnException, IOException, InterruptedException\n{\r\n    getUGIWithToken(appAttemptId).doAs(new PrivilegedExceptionAction<Object>() {\r\n\r\n        @Override\r\n        public Object run() throws YarnException {\r\n            uam.allocateAsync(request, callBack);\r\n            return null;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\uam",
  "methodName" : "finishApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(final FinishApplicationMasterRequest request, ApplicationAttemptId appAttemptId) throws YarnException, IOException, InterruptedException\n{\r\n    return getUGIWithToken(appAttemptId).doAs(new PrivilegedExceptionAction<FinishApplicationMasterResponse>() {\r\n\r\n        @Override\r\n        public FinishApplicationMasterResponse run() throws YarnException, IOException {\r\n            FinishApplicationMasterResponse response = uam.finishApplicationMaster(request);\r\n            return response;\r\n        }\r\n    });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    setPolicy(new UniformRandomRouterPolicy());\r\n    setPolicyInfo(mock(WeightedPolicyInfo.class));\r\n    for (int i = 1; i <= 2; i++) {\r\n        SubClusterIdInfo sc = new SubClusterIdInfo(\"sc\" + i);\r\n        SubClusterInfo sci = mock(SubClusterInfo.class);\r\n        when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);\r\n        when(sci.getSubClusterId()).thenReturn(sc.toId());\r\n        getActiveSubclusters().put(sc.toId(), sci);\r\n    }\r\n    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(), mock(WeightedPolicyInfo.class), getActiveSubclusters());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testOneSubclusterIsChosen",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testOneSubclusterIsChosen() throws YarnException\n{\r\n    SubClusterId chosen = ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(getApplicationSubmissionContext(), null);\r\n    Assert.assertTrue(getActiveSubclusters().keySet().contains(chosen));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    setPolicy(new TestableLocalityMulticastAMRMProxyPolicy());\r\n    setPolicyInfo(new WeightedPolicyInfo());\r\n    Map<SubClusterIdInfo, Float> routerWeights = new HashMap<>();\r\n    Map<SubClusterIdInfo, Float> amrmWeights = new HashMap<>();\r\n    for (int i = 0; i < 6; i++) {\r\n        SubClusterIdInfo sc = new SubClusterIdInfo(\"subcluster\" + i);\r\n        if (i != 3) {\r\n            SubClusterInfo sci = mock(SubClusterInfo.class);\r\n            when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);\r\n            when(sci.getSubClusterId()).thenReturn(sc.toId());\r\n            getActiveSubclusters().put(sc.toId(), sci);\r\n        }\r\n        float weight = 1 / 10f;\r\n        routerWeights.put(sc, weight);\r\n        amrmWeights.put(sc, weight);\r\n        if (i == 4) {\r\n            routerWeights.put(sc, 0f);\r\n            amrmWeights.put(sc, 0f);\r\n        }\r\n    }\r\n    getPolicyInfo().setRouterPolicyWeights(routerWeights);\r\n    getPolicyInfo().setAMRMPolicyWeights(amrmWeights);\r\n    getPolicyInfo().setHeadroomAlpha(0.5f);\r\n    setHomeSubCluster(SubClusterId.newInstance(\"homesubcluster\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testReinitilialize",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testReinitilialize() throws YarnException\n{\r\n    initializePolicy();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "initializePolicy",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initializePolicy() throws YarnException\n{\r\n    initializePolicy(new YarnConfiguration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "initializePolicy",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void initializePolicy(Configuration conf) throws YarnException\n{\r\n    setFederationPolicyContext(new FederationPolicyInitializationContext());\r\n    SubClusterResolver resolver = FederationPoliciesTestUtil.initResolver();\r\n    getFederationPolicyContext().setFederationSubclusterResolver(resolver);\r\n    ByteBuffer buf = getPolicyInfo().toByteBuffer();\r\n    getFederationPolicyContext().setSubClusterPolicyConfiguration(SubClusterPolicyConfiguration.newInstance(\"queue1\", getPolicy().getClass().getCanonicalName(), buf));\r\n    getFederationPolicyContext().setHomeSubcluster(getHomeSubCluster());\r\n    FederationPoliciesTestUtil.initializePolicyContext(getFederationPolicyContext(), getPolicy(), getPolicyInfo(), getActiveSubclusters(), conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testNullWeights",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testNullWeights() throws Exception\n{\r\n    getPolicyInfo().setAMRMPolicyWeights(null);\r\n    initializePolicy();\r\n    fail();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testEmptyWeights",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testEmptyWeights() throws Exception\n{\r\n    getPolicyInfo().setAMRMPolicyWeights(new HashMap<SubClusterIdInfo, Float>());\r\n    initializePolicy();\r\n    fail();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testSplitBasedOnHeadroom",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testSplitBasedOnHeadroom() throws Exception\n{\r\n    getPolicyInfo().setHeadroomAlpha(1.0f);\r\n    initializePolicy();\r\n    List<ResourceRequest> resourceRequests = createSimpleRequest();\r\n    prepPolicyWithHeadroom(true);\r\n    Map<SubClusterId, List<ResourceRequest>> response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n    LOG.info(\"Initial headroom\");\r\n    prettyPrintRequests(response);\r\n    validateSplit(response, resourceRequests);\r\n    checkExpectedAllocation(response, \"subcluster0\", 1, 60);\r\n    checkExpectedAllocation(response, \"subcluster1\", 1, -1);\r\n    checkExpectedAllocation(response, \"subcluster2\", 1, 15);\r\n    checkExpectedAllocation(response, \"subcluster5\", 1, 25);\r\n    checkTotalContainerAllocation(response, 100);\r\n    AllocateResponse ar = getAllocateResponseWithTargetHeadroom(40);\r\n    ((FederationAMRMProxyPolicy) getPolicy()).notifyOfResponse(SubClusterId.newInstance(\"subcluster2\"), ar);\r\n    response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n    LOG.info(\"After headroom update\");\r\n    prettyPrintRequests(response);\r\n    validateSplit(response, resourceRequests);\r\n    checkExpectedAllocation(response, \"subcluster0\", 1, 37);\r\n    checkExpectedAllocation(response, \"subcluster1\", 1, -1);\r\n    checkExpectedAllocation(response, \"subcluster2\", 1, 37);\r\n    checkExpectedAllocation(response, \"subcluster5\", 1, 25);\r\n    checkTotalContainerAllocation(response, 100);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testStressPolicy",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testStressPolicy() throws Exception\n{\r\n    getPolicyInfo().setHeadroomAlpha(1.0f);\r\n    initializePolicy();\r\n    addHomeSubClusterAsActive();\r\n    int numRR = 1000;\r\n    List<ResourceRequest> resourceRequests = createLargeRandomList(numRR);\r\n    prepPolicyWithHeadroom(true);\r\n    int numIterations = 1000;\r\n    long tstart = System.currentTimeMillis();\r\n    for (int i = 0; i < numIterations; i++) {\r\n        Map<SubClusterId, List<ResourceRequest>> response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n        validateSplit(response, resourceRequests);\r\n    }\r\n    long tend = System.currentTimeMillis();\r\n    LOG.info(\"Performed \" + numIterations + \" policy invocations (and \" + \"validations) in \" + (tend - tstart) + \"ms\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testFWDAllZeroANY",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testFWDAllZeroANY() throws Exception\n{\r\n    getPolicyInfo().setHeadroomAlpha(0.5f);\r\n    initializePolicy();\r\n    List<ResourceRequest> resourceRequests = createZeroSizedANYRequest();\r\n    prepPolicyWithHeadroom(true);\r\n    Map<SubClusterId, List<ResourceRequest>> response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n    prettyPrintRequests(response);\r\n    validateSplit(response, resourceRequests);\r\n    checkExpectedAllocation(response, \"subcluster0\", 1, 0);\r\n    checkExpectedAllocation(response, \"subcluster1\", 1, 0);\r\n    checkExpectedAllocation(response, \"subcluster2\", 1, 0);\r\n    checkExpectedAllocation(response, \"subcluster3\", -1, -1);\r\n    checkExpectedAllocation(response, \"subcluster4\", -1, -1);\r\n    checkExpectedAllocation(response, \"subcluster5\", -1, -1);\r\n    checkTotalContainerAllocation(response, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testSplitBasedOnHeadroomAndWeights",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testSplitBasedOnHeadroomAndWeights() throws Exception\n{\r\n    getPolicyInfo().setHeadroomAlpha(0.5f);\r\n    initializePolicy();\r\n    List<ResourceRequest> resourceRequests = createSimpleRequest();\r\n    prepPolicyWithHeadroom(true);\r\n    Map<SubClusterId, List<ResourceRequest>> response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n    prettyPrintRequests(response);\r\n    validateSplit(response, resourceRequests);\r\n    checkExpectedAllocation(response, \"subcluster0\", 1, 42);\r\n    checkExpectedAllocation(response, \"subcluster1\", 1, 12);\r\n    checkExpectedAllocation(response, \"subcluster2\", 1, 20);\r\n    checkExpectedAllocation(response, \"subcluster3\", -1, -1);\r\n    checkExpectedAllocation(response, \"subcluster4\", -1, -1);\r\n    checkExpectedAllocation(response, \"subcluster5\", 1, 25);\r\n    checkTotalContainerAllocation(response, 100);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "prepPolicyWithHeadroom",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void prepPolicyWithHeadroom(boolean setSubCluster0) throws YarnException\n{\r\n    AllocateResponse ar = getAllocateResponseWithTargetHeadroom(40);\r\n    if (setSubCluster0) {\r\n        ((FederationAMRMProxyPolicy) getPolicy()).notifyOfResponse(SubClusterId.newInstance(\"subcluster0\"), ar);\r\n    }\r\n    ar = getAllocateResponseWithTargetHeadroom(0);\r\n    ((FederationAMRMProxyPolicy) getPolicy()).notifyOfResponse(SubClusterId.newInstance(\"subcluster1\"), ar);\r\n    ar = getAllocateResponseWithTargetHeadroom(10);\r\n    ((FederationAMRMProxyPolicy) getPolicy()).notifyOfResponse(SubClusterId.newInstance(\"subcluster2\"), ar);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "getAllocateResponseWithTargetHeadroom",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AllocateResponse getAllocateResponseWithTargetHeadroom(int numContainers)\n{\r\n    return AllocateResponse.newInstance(0, null, null, Collections.<NodeReport>emptyList(), Resource.newInstance(numContainers * 1024, numContainers), null, 10, null, Collections.<NMToken>emptyList());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "addHomeSubClusterAsActive",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void addHomeSubClusterAsActive()\n{\r\n    SubClusterInfo sci = mock(SubClusterInfo.class);\r\n    when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);\r\n    when(sci.getSubClusterId()).thenReturn(getHomeSubCluster());\r\n    getActiveSubclusters().put(getHomeSubCluster(), sci);\r\n    SubClusterIdInfo sc = new SubClusterIdInfo(getHomeSubCluster().getId());\r\n    getPolicyInfo().getRouterPolicyWeights().put(sc, 0.1f);\r\n    getPolicyInfo().getAMRMPolicyWeights().put(sc, 0.1f);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testSplitAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testSplitAllocateRequest() throws Exception\n{\r\n    initializePolicy();\r\n    addHomeSubClusterAsActive();\r\n    FederationPoliciesTestUtil.initializePolicyContext(getFederationPolicyContext(), getPolicy(), getPolicyInfo(), getActiveSubclusters(), new Configuration());\r\n    List<ResourceRequest> resourceRequests = createComplexRequest();\r\n    Map<SubClusterId, List<ResourceRequest>> response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n    validateSplit(response, resourceRequests);\r\n    prettyPrintRequests(response);\r\n    checkExpectedAllocation(response, getHomeSubCluster().getId(), 7, 29);\r\n    checkExpectedAllocation(response, \"subcluster0\", 10, 32);\r\n    checkExpectedAllocation(response, \"subcluster1\", 5, 26);\r\n    checkExpectedAllocation(response, \"subcluster2\", 4, 23);\r\n    checkExpectedAllocation(response, \"subcluster3\", -1, -1);\r\n    checkExpectedAllocation(response, \"subcluster4\", -1, -1);\r\n    checkExpectedAllocation(response, \"subcluster5\", 1, 20);\r\n    checkTotalContainerAllocation(response, 130);\r\n    for (ResourceRequest rr : response.get(getHomeSubCluster())) {\r\n        Assert.assertTrue(rr.getAllocationRequestId() == 2L || rr.getAllocationRequestId() == 4L || rr.getAllocationRequestId() == 5L);\r\n    }\r\n    List<ResourceRequest> rrs = response.get(SubClusterId.newInstance(\"subcluster0\"));\r\n    for (ResourceRequest rr : rrs) {\r\n        Assert.assertTrue(rr.getAllocationRequestId() != 1L);\r\n        Assert.assertTrue(rr.getAllocationRequestId() != 4L);\r\n    }\r\n    for (ResourceRequest rr : response.get(SubClusterId.newInstance(\"subcluster1\"))) {\r\n        Assert.assertTrue(rr.getAllocationRequestId() == 1L || rr.getAllocationRequestId() == 2L);\r\n    }\r\n    for (ResourceRequest rr : response.get(SubClusterId.newInstance(\"subcluster2\"))) {\r\n        Assert.assertTrue(rr.getAllocationRequestId() == 1L || rr.getAllocationRequestId() == 2L);\r\n    }\r\n    for (ResourceRequest rr : response.get(SubClusterId.newInstance(\"subcluster5\"))) {\r\n        Assert.assertTrue(rr.getAllocationRequestId() == 2);\r\n        Assert.assertTrue(rr.getRelaxLocality());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "checkExpectedAllocation",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void checkExpectedAllocation(Map<SubClusterId, List<ResourceRequest>> response, String subCluster, long totResourceRequests, long minimumTotalContainers)\n{\r\n    if (minimumTotalContainers == -1) {\r\n        Assert.assertNull(response.get(SubClusterId.newInstance(subCluster)));\r\n    } else {\r\n        SubClusterId sc = SubClusterId.newInstance(subCluster);\r\n        Assert.assertEquals(totResourceRequests, response.get(sc).size());\r\n        long actualContCount = 0;\r\n        for (ResourceRequest rr : response.get(sc)) {\r\n            actualContCount += rr.getNumContainers();\r\n        }\r\n        Assert.assertTrue(\"Actual count \" + actualContCount + \" should be at least \" + minimumTotalContainers, minimumTotalContainers <= actualContCount);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "checkTotalContainerAllocation",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void checkTotalContainerAllocation(Map<SubClusterId, List<ResourceRequest>> response, long totalContainers)\n{\r\n    long actualContCount = 0;\r\n    for (Map.Entry<SubClusterId, List<ResourceRequest>> entry : response.entrySet()) {\r\n        for (ResourceRequest rr : entry.getValue()) {\r\n            actualContCount += rr.getNumContainers();\r\n        }\r\n    }\r\n    Assert.assertEquals(totalContainers, actualContCount);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "validateSplit",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void validateSplit(Map<SubClusterId, List<ResourceRequest>> split, List<ResourceRequest> original) throws YarnException\n{\r\n    SubClusterResolver resolver = getFederationPolicyContext().getFederationSubclusterResolver();\r\n    int numUsedSubclusters = split.size();\r\n    Set<Long> originalIds = new HashSet<>();\r\n    Set<Long> splitIds = new HashSet<>();\r\n    int originalContainers = 0;\r\n    for (ResourceRequest rr : original) {\r\n        originalContainers += rr.getNumContainers();\r\n        originalIds.add(rr.getAllocationRequestId());\r\n    }\r\n    int splitContainers = 0;\r\n    for (Map.Entry<SubClusterId, List<ResourceRequest>> rrs : split.entrySet()) {\r\n        for (ResourceRequest rr : rrs.getValue()) {\r\n            splitContainers += rr.getNumContainers();\r\n            splitIds.add(rr.getAllocationRequestId());\r\n            SubClusterId fid = null;\r\n            try {\r\n                fid = resolver.getSubClusterForNode(rr.getResourceName());\r\n            } catch (YarnException e) {\r\n            }\r\n            if (!rrs.getKey().equals(getHomeSubCluster()) && fid != null && !fid.equals(rrs.getKey())) {\r\n                Assert.fail(\"A node-local (or resolvable rack-local) RR should not \" + \"be send to an RM other than what it resolves to.\");\r\n            }\r\n        }\r\n    }\r\n    Assert.assertEquals(originalIds, splitIds);\r\n    Assert.assertTrue(\" Containers requested (\" + splitContainers + \") should \" + \"not exceed the original count of containers (\" + originalContainers + \") by more than the number of subclusters (\" + numUsedSubclusters + \")\", originalContainers + numUsedSubclusters >= splitContainers);\r\n    for (SubClusterId targetId : split.keySet()) {\r\n        Assert.assertTrue(\"Target subcluster \" + targetId + \" should be in the active set\", getActiveSubclusters().containsKey(targetId));\r\n        Assert.assertTrue(\"Target subclusters (\" + targetId + \") should have weight >0 in \" + \"the policy \", getPolicyInfo().getRouterPolicyWeights().get(new SubClusterIdInfo(targetId)) > 0);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "prettyPrintRequests",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void prettyPrintRequests(Map<SubClusterId, List<ResourceRequest>> response)\n{\r\n    for (Map.Entry<SubClusterId, List<ResourceRequest>> entry : response.entrySet()) {\r\n        String str = \"\";\r\n        for (ResourceRequest rr : entry.getValue()) {\r\n            str += \" [id:\" + rr.getAllocationRequestId() + \" loc:\" + rr.getResourceName() + \" numCont:\" + rr.getNumContainers() + \"], \";\r\n        }\r\n        LOG.info(entry.getKey() + \" --> \" + str);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "createLargeRandomList",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "List<ResourceRequest> createLargeRandomList(int numRR) throws Exception\n{\r\n    List<ResourceRequest> out = new ArrayList<>();\r\n    Random rand = new Random(1);\r\n    DefaultSubClusterResolverImpl resolver = (DefaultSubClusterResolverImpl) getFederationPolicyContext().getFederationSubclusterResolver();\r\n    List<String> nodes = new ArrayList<>(resolver.getNodeToSubCluster().keySet());\r\n    for (int i = 0; i < numRR; i++) {\r\n        String nodeName = nodes.get(rand.nextInt(nodes.size()));\r\n        long allocationId = (long) rand.nextInt(20);\r\n        out.add(FederationPoliciesTestUtil.createResourceRequest(allocationId, nodeName, 1024, 1, 1, rand.nextInt(100), null, rand.nextBoolean()));\r\n    }\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "createSimpleRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ResourceRequest> createSimpleRequest() throws Exception\n{\r\n    List<ResourceRequest> out = new ArrayList<>();\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(0L, ResourceRequest.ANY, 1024, 1, 1, 100, null, true));\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "createZeroSizedANYRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<ResourceRequest> createZeroSizedANYRequest() throws Exception\n{\r\n    List<ResourceRequest> out = new ArrayList<>();\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(0L, ResourceRequest.ANY, 1024, 1, 1, 0, null, true));\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "createComplexRequest",
  "errType" : null,
  "containingMethodsNum" : 21,
  "sourceCodeText" : "List<ResourceRequest> createComplexRequest() throws Exception\n{\r\n    List<ResourceRequest> out = new ArrayList<>();\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(0L, \"subcluster0-rack0-host0\", 1024, 1, 1, 1, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(0L, \"subcluster0-rack0\", 1024, 1, 1, 1, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(0L, ResourceRequest.ANY, 1024, 1, 1, 1, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(1L, \"subcluster1-rack1-host1\", 1024, 1, 1, 1, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(1L, \"subcluster1-rack1-host2\", 1024, 1, 1, 1, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(1L, \"subcluster2-rack3-host3\", 1024, 1, 1, 1, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(1L, \"subcluster1-rack1\", 1024, 1, 1, 2, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(1L, \"subcluster2-rack3\", 1024, 1, 1, 1, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(1L, ResourceRequest.ANY, 1024, 1, 1, 3, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(2L, ResourceRequest.ANY, 1024, 1, 1, 100, null, true));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(3L, \"subcluster0-rack0-host0\", 1024, 1, 1, 1, null, true));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(3L, \"subcluster0-rack0\", 1024, 1, 1, 1, null, true));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(3L, ResourceRequest.ANY, 1024, 1, 1, 1, null, true));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(4L, \"unknownNode\", 1024, 1, 1, 1, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(4L, \"unknownRack\", 1024, 1, 1, 1, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(4L, ResourceRequest.ANY, 1024, 1, 1, 1, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(5L, \"subcluster0-rack0-host0\", 1024, 1, 1, 2, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(5L, \"subcluster0-rack0\", 1024, 1, 1, 2, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(5L, \"node4\", 1024, 1, 1, 2, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(5L, \"rack2\", 1024, 1, 1, 2, null, false));\r\n    out.add(FederationPoliciesTestUtil.createResourceRequest(5L, ResourceRequest.ANY, 1024, 1, 1, 4, null, false));\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "printList",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String printList(ArrayList<Integer> list)\n{\r\n    StringBuilder sb = new StringBuilder();\r\n    for (Integer entry : list) {\r\n        sb.append(entry + \", \");\r\n    }\r\n    return sb.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testIntegerAssignment",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testIntegerAssignment() throws YarnException\n{\r\n    float[] weights = new float[] { 0, 0.1f, 0.2f, 0.2f, -0.1f, 0.1f, 0.2f, 0.1f, 0.1f };\r\n    int[] expectedMin = new int[] { 0, 1, 3, 3, 0, 1, 3, 1, 1 };\r\n    ArrayList<Float> weightsList = new ArrayList<>();\r\n    for (float weight : weights) {\r\n        weightsList.add(weight);\r\n    }\r\n    LocalityMulticastAMRMProxyPolicy policy = (LocalityMulticastAMRMProxyPolicy) getPolicy();\r\n    for (int i = 0; i < 500000; i++) {\r\n        ArrayList<Integer> allocations = policy.computeIntegerAssignment(19, weightsList);\r\n        int sum = 0;\r\n        for (int j = 0; j < weights.length; j++) {\r\n            sum += allocations.get(j);\r\n            if (allocations.get(j) < expectedMin[j]) {\r\n                Assert.fail(allocations.get(j) + \" at index \" + j + \" should be at least \" + expectedMin[j] + \". Allocation array: \" + printList(allocations));\r\n            }\r\n        }\r\n        Assert.assertEquals(\"Expect sum to be 19 in array: \" + printList(allocations), 19, sum);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testCancelWithLocalizedResource",
  "errType" : null,
  "containingMethodsNum" : 23,
  "sourceCodeText" : "void testCancelWithLocalizedResource() throws YarnException\n{\r\n    getPolicyInfo().setHeadroomAlpha(1.0f);\r\n    initializePolicy();\r\n    List<ResourceRequest> resourceRequests = new ArrayList<>();\r\n    prepPolicyWithHeadroom(true);\r\n    resourceRequests.add(FederationPoliciesTestUtil.createResourceRequest(0L, \"subcluster0-rack0-host0\", 1024, 1, 1, 1, null, false));\r\n    resourceRequests.add(FederationPoliciesTestUtil.createResourceRequest(0L, \"subcluster0-rack0\", 1024, 1, 1, 1, null, false));\r\n    resourceRequests.add(FederationPoliciesTestUtil.createResourceRequest(0L, ResourceRequest.ANY, 1024, 1, 1, 0, null, false));\r\n    Map<SubClusterId, List<ResourceRequest>> response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n    checkExpectedAllocation(response, \"subcluster0\", 3, 1);\r\n    checkExpectedAllocation(response, \"subcluster1\", 1, 0);\r\n    checkExpectedAllocation(response, \"subcluster2\", 1, 0);\r\n    checkExpectedAllocation(response, \"subcluster3\", -1, -1);\r\n    checkExpectedAllocation(response, \"subcluster4\", -1, -1);\r\n    checkExpectedAllocation(response, \"subcluster5\", -1, -1);\r\n    resourceRequests.clear();\r\n    resourceRequests.add(FederationPoliciesTestUtil.createResourceRequest(0L, \"subcluster0-rack0-host0\", 1024, 1, 1, 0, null, false));\r\n    resourceRequests.add(FederationPoliciesTestUtil.createResourceRequest(0L, \"subcluster0-rack0\", 1024, 1, 1, 0, null, false));\r\n    resourceRequests.add(FederationPoliciesTestUtil.createResourceRequest(0L, ResourceRequest.ANY, 1024, 1, 1, 100, null, false));\r\n    response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n    checkExpectedAllocation(response, \"subcluster0\", 3, 60);\r\n    checkExpectedAllocation(response, \"subcluster1\", 1, -1);\r\n    checkExpectedAllocation(response, \"subcluster2\", 1, 15);\r\n    checkExpectedAllocation(response, \"subcluster5\", 1, 25);\r\n    checkTotalContainerAllocation(response, 100);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testSubClusterExpiry",
  "errType" : null,
  "containingMethodsNum" : 24,
  "sourceCodeText" : "void testSubClusterExpiry() throws Exception\n{\r\n    getPolicyInfo().setHeadroomAlpha(1.0f);\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.setLong(YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT, 500);\r\n    initializePolicy(conf);\r\n    List<ResourceRequest> resourceRequests = createSimpleRequest();\r\n    prepPolicyWithHeadroom(true);\r\n    Set<SubClusterId> expiredSCList = new HashSet<>();\r\n    Map<SubClusterId, List<ResourceRequest>> response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, expiredSCList);\r\n    prettyPrintRequests(response);\r\n    validateSplit(response, resourceRequests);\r\n    checkExpectedAllocation(response, \"subcluster0\", 1, 60);\r\n    checkExpectedAllocation(response, \"subcluster1\", 1, -1);\r\n    checkExpectedAllocation(response, \"subcluster2\", 1, 15);\r\n    checkExpectedAllocation(response, \"subcluster5\", 1, 25);\r\n    checkTotalContainerAllocation(response, 100);\r\n    Thread.sleep(800);\r\n    expiredSCList.add(SubClusterId.newInstance(\"subcluster0\"));\r\n    expiredSCList.add(SubClusterId.newInstance(\"subcluster5\"));\r\n    response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, expiredSCList);\r\n    prettyPrintRequests(response);\r\n    validateSplit(response, resourceRequests);\r\n    checkExpectedAllocation(response, \"subcluster0\", 1, -1);\r\n    checkExpectedAllocation(response, \"subcluster1\", 1, -1);\r\n    checkExpectedAllocation(response, \"subcluster2\", 1, 100);\r\n    checkExpectedAllocation(response, \"subcluster5\", 1, -1);\r\n    checkTotalContainerAllocation(response, 100);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    setPolicy(new WeightedRandomRouterPolicy());\r\n    setPolicyInfo(new WeightedPolicyInfo());\r\n    configureWeights(20);\r\n    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(), getPolicyInfo(), getActiveSubclusters());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "configureWeights",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void configureWeights(float numSubClusters)\n{\r\n    FederationPolicyUtils.setRand(5);\r\n    setRand(5);\r\n    Map<SubClusterIdInfo, Float> routerWeights = new HashMap<>();\r\n    Map<SubClusterIdInfo, Float> amrmWeights = new HashMap<>();\r\n    for (int i = 0; i < numSubClusters; i++) {\r\n        SubClusterIdInfo sc = new SubClusterIdInfo(\"sc\" + i);\r\n        if (getRand().nextFloat() < 0.95f) {\r\n            SubClusterInfo sci = mock(SubClusterInfo.class);\r\n            when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);\r\n            when(sci.getSubClusterId()).thenReturn(sc.toId());\r\n            getActiveSubclusters().put(sc.toId(), sci);\r\n        }\r\n        float weight = (0.8f * 1f / numSubClusters) + (0.2f * getRand().nextFloat());\r\n        if (i <= 5 || getRand().nextFloat() > 0.05f) {\r\n            routerWeights.put(sc, weight);\r\n            amrmWeights.put(sc, weight);\r\n        }\r\n    }\r\n    getPolicyInfo().setRouterPolicyWeights(routerWeights);\r\n    getPolicyInfo().setAMRMPolicyWeights(amrmWeights);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testClusterChosenWithRightProbability",
  "errType" : null,
  "containingMethodsNum" : 16,
  "sourceCodeText" : "void testClusterChosenWithRightProbability() throws YarnException\n{\r\n    ApplicationSubmissionContext context = mock(ApplicationSubmissionContext.class);\r\n    when(context.getQueue()).thenReturn(\"queue1\");\r\n    setApplicationSubmissionContext(context);\r\n    Map<SubClusterId, AtomicLong> counter = new HashMap<>();\r\n    for (SubClusterIdInfo id : getPolicyInfo().getRouterPolicyWeights().keySet()) {\r\n        counter.put(id.toId(), new AtomicLong(0));\r\n    }\r\n    float numberOfDraws = 10000;\r\n    for (float i = 0; i < numberOfDraws; i++) {\r\n        SubClusterId chosenId = ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(getApplicationSubmissionContext(), null);\r\n        counter.get(chosenId).incrementAndGet();\r\n    }\r\n    float totalActiveWeight = 0;\r\n    for (SubClusterId id : getActiveSubclusters().keySet()) {\r\n        SubClusterIdInfo idInfo = new SubClusterIdInfo(id);\r\n        if (getPolicyInfo().getRouterPolicyWeights().containsKey(idInfo)) {\r\n            totalActiveWeight += getPolicyInfo().getRouterPolicyWeights().get(idInfo);\r\n        }\r\n    }\r\n    for (Map.Entry<SubClusterId, AtomicLong> counterEntry : counter.entrySet()) {\r\n        float expectedWeight = getPolicyInfo().getRouterPolicyWeights().get(new SubClusterIdInfo(counterEntry.getKey())) / totalActiveWeight;\r\n        float actualWeight = counterEntry.getValue().floatValue() / numberOfDraws;\r\n        if (getActiveSubclusters().containsKey(counterEntry.getKey())) {\r\n            Assert.assertTrue(\"Id \" + counterEntry.getKey() + \" Actual weight: \" + actualWeight + \" expected weight: \" + expectedWeight, Math.abs(actualWeight - expectedWeight) < 0.01);\r\n        } else {\r\n            Assert.assertTrue(\"Id \" + counterEntry.getKey() + \" Actual weight: \" + actualWeight + \" expected weight: \" + expectedWeight, actualWeight == 0);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "testSerializeAndInstantiate",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSerializeAndInstantiate() throws Exception\n{\r\n    serializeAndDeserializePolicyManager(wfp, expectedPolicyManager, expectedAMRMProxyPolicy, expectedRouterPolicy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "testSerializeAndInstantiateBad1",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSerializeAndInstantiateBad1() throws Exception\n{\r\n    serializeAndDeserializePolicyManager(wfp, String.class, expectedAMRMProxyPolicy, expectedRouterPolicy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "testSerializeAndInstantiateBad2",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSerializeAndInstantiateBad2() throws Exception\n{\r\n    serializeAndDeserializePolicyManager(wfp, expectedPolicyManager, String.class, expectedRouterPolicy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "testSerializeAndInstantiateBad3",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testSerializeAndInstantiateBad3() throws Exception\n{\r\n    serializeAndDeserializePolicyManager(wfp, expectedPolicyManager, expectedAMRMProxyPolicy, String.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "serializeAndDeserializePolicyManager",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void serializeAndDeserializePolicyManager(FederationPolicyManager wfp, Class policyManagerType, Class expAMRMProxyPolicy, Class expRouterPolicy) throws Exception\n{\r\n    SubClusterPolicyConfiguration fpc = wfp.serializeConf();\r\n    fpc.setType(policyManagerType.getCanonicalName());\r\n    FederationPolicyInitializationContext context = new FederationPolicyInitializationContext();\r\n    context.setSubClusterPolicyConfiguration(fpc);\r\n    context.setFederationStateStoreFacade(FederationPoliciesTestUtil.initFacade());\r\n    context.setFederationSubclusterResolver(FederationPoliciesTestUtil.initResolver());\r\n    context.setHomeSubcluster(SubClusterId.newInstance(\"homesubcluster\"));\r\n    Class c = Class.forName(wfp.getClass().getCanonicalName());\r\n    FederationPolicyManager wfp2 = (FederationPolicyManager) c.newInstance();\r\n    FederationAMRMProxyPolicy federationAMRMProxyPolicy = wfp2.getAMRMPolicy(context, null);\r\n    FederationRouterPolicy federationRouterPolicy = wfp2.getRouterPolicy(context, null);\r\n    assertThat(federationAMRMProxyPolicy).isExactlyInstanceOf(expAMRMProxyPolicy);\r\n    assertThat(federationRouterPolicy).isExactlyInstanceOf(expRouterPolicy);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    setPolicy(new BroadcastAMRMProxyPolicy());\r\n    setPolicyInfo(mock(WeightedPolicyInfo.class));\r\n    for (int i = 1; i <= 2; i++) {\r\n        SubClusterIdInfo sc = new SubClusterIdInfo(\"sc\" + i);\r\n        SubClusterInfo sci = mock(SubClusterInfo.class);\r\n        when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);\r\n        when(sci.getSubClusterId()).thenReturn(sc.toId());\r\n        getActiveSubclusters().put(sc.toId(), sci);\r\n    }\r\n    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(), mock(WeightedPolicyInfo.class), getActiveSubclusters());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testSplitAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testSplitAllocateRequest() throws Exception\n{\r\n    String[] hosts = new String[] { \"host1\", \"host2\" };\r\n    List<ResourceRequest> resourceRequests = FederationPoliciesTestUtil.createResourceRequests(hosts, 2 * 1024, 2, 1, 3, null, false);\r\n    Map<SubClusterId, List<ResourceRequest>> response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n    Assert.assertTrue(response.size() == 2);\r\n    for (Map.Entry<SubClusterId, List<ResourceRequest>> entry : response.entrySet()) {\r\n        Assert.assertTrue(getActiveSubclusters().get(entry.getKey()) != null);\r\n        for (ResourceRequest r : entry.getValue()) {\r\n            Assert.assertTrue(resourceRequests.contains(r));\r\n        }\r\n    }\r\n    for (SubClusterId subClusterId : getActiveSubclusters().keySet()) {\r\n        for (ResourceRequest r : response.get(subClusterId)) {\r\n            Assert.assertTrue(resourceRequests.contains(r));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testNotifyOfResponseFromUnknownSubCluster",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testNotifyOfResponseFromUnknownSubCluster() throws Exception\n{\r\n    String[] hosts = new String[] { \"host1\", \"host2\" };\r\n    List<ResourceRequest> resourceRequests = FederationPoliciesTestUtil.createResourceRequests(hosts, 2 * 1024, 2, 1, 3, null, false);\r\n    Map<SubClusterId, List<ResourceRequest>> response = ((FederationAMRMProxyPolicy) getPolicy()).splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n    ((FederationAMRMProxyPolicy) getPolicy()).notifyOfResponse(SubClusterId.newInstance(\"sc3\"), mock(AllocateResponse.class));\r\n    ((FederationAMRMProxyPolicy) getPolicy()).notifyOfResponse(SubClusterId.newInstance(\"sc1\"), mock(AllocateResponse.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void setup() throws YarnException, IOException\n{\r\n    this.conf = new Configuration();\r\n    this.mockAMS = new MockApplicationMasterService();\r\n    this.homeRelayer = new AMRMClientRelayer(this.mockAMS, ApplicationId.newInstance(0, 0), this.homeID);\r\n    this.homeRelayer.registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(\"\", 0, \"\"));\r\n    this.uamRelayer = new AMRMClientRelayer(this.mockAMS, ApplicationId.newInstance(0, 0), this.uamID);\r\n    this.uamRelayer.registerApplicationMaster(RegisterApplicationMasterRequest.newInstance(\"\", 0, \"\"));\r\n    clearAllocateRequestLists();\r\n    AMRMClientRelayerMetrics.getInstance().setClientPending(homeID, RequestType.Guaranteed, 0);\r\n    AMRMClientRelayerMetrics.getInstance().setClientPending(homeID, RequestType.Opportunistic, 0);\r\n    AMRMClientRelayerMetrics.getInstance().setClientPending(homeID, RequestType.Promote, 0);\r\n    AMRMClientRelayerMetrics.getInstance().setClientPending(homeID, RequestType.Demote, 0);\r\n    AMRMClientRelayerMetrics.getInstance().setClientPending(uamID, RequestType.Guaranteed, 0);\r\n    AMRMClientRelayerMetrics.getInstance().setClientPending(uamID, RequestType.Opportunistic, 0);\r\n    AMRMClientRelayerMetrics.getInstance().setClientPending(uamID, RequestType.Promote, 0);\r\n    AMRMClientRelayerMetrics.getInstance().setClientPending(uamID, RequestType.Demote, 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "getAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "AllocateRequest getAllocateRequest()\n{\r\n    return AllocateRequest.newBuilder().responseId(0).progress(0).askList(asks).releaseList(new ArrayList<>(this.releases)).resourceBlacklistRequest(ResourceBlacklistRequest.newInstance(new ArrayList<>(this.blacklistAdditions), new ArrayList<>(this.blacklistRemoval))).updateRequests(new ArrayList<>(this.updates)).build();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "clearAllocateRequestLists",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void clearAllocateRequestLists()\n{\r\n    this.asks.clear();\r\n    this.releases.clear();\r\n    this.updates.clear();\r\n    this.blacklistAdditions.clear();\r\n    this.blacklistRemoval.clear();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "createPromote",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpdateContainerRequest createPromote(int id)\n{\r\n    return UpdateContainerRequest.newInstance(0, createContainerId(id), ContainerUpdateType.PROMOTE_EXECUTION_TYPE, Resource.newInstance(0, 0), ExecutionType.GUARANTEED);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "createDemote",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UpdateContainerRequest createDemote(int id)\n{\r\n    return UpdateContainerRequest.newInstance(0, createContainerId(id), ContainerUpdateType.DEMOTE_EXECUTION_TYPE, Resource.newInstance(0, 0), ExecutionType.OPPORTUNISTIC);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "createContainerId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ContainerId createContainerId(int id)\n{\r\n    return ContainerId.newContainerId(ApplicationAttemptId.newInstance(ApplicationId.newInstance(1, 1), 1), id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "createResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "ResourceRequest createResourceRequest(long id, String resource, int memory, int vCores, int priority, ExecutionType execType, int containers)\n{\r\n    ResourceRequest req = Records.newRecord(ResourceRequest.class);\r\n    req.setAllocationRequestId(id);\r\n    req.setResourceName(resource);\r\n    req.setCapability(Resource.newInstance(memory, vCores));\r\n    req.setPriority(Priority.newInstance(priority));\r\n    req.setExecutionTypeRequest(ExecutionTypeRequest.newInstance(execType));\r\n    req.setNumContainers(containers);\r\n    return req;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "testGPending",
  "errType" : null,
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testGPending() throws YarnException, IOException\n{\r\n    this.asks.add(createResourceRequest(0, \"node\", 2048, 1, 1, ExecutionType.GUARANTEED, 1));\r\n    this.asks.add(createResourceRequest(0, \"rack\", 2048, 1, 1, ExecutionType.GUARANTEED, 1));\r\n    this.asks.add(createResourceRequest(0, ResourceRequest.ANY, 2048, 1, 1, ExecutionType.GUARANTEED, 2));\r\n    this.homeRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Guaranteed).value());\r\n    Assert.assertEquals(0, AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID, RequestType.Guaranteed).value());\r\n    this.uamRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Guaranteed).value());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID, RequestType.Guaranteed).value());\r\n    this.asks.get(2).setNumContainers(3);\r\n    this.homeRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(3, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Guaranteed).value());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID, RequestType.Guaranteed).value());\r\n    this.asks.get(2).setNumContainers(2);\r\n    this.homeRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Guaranteed).value());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID, RequestType.Guaranteed).value());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "testPromotePending",
  "errType" : null,
  "containingMethodsNum" : 22,
  "sourceCodeText" : "void testPromotePending() throws YarnException, IOException\n{\r\n    this.updates.add(createPromote(1));\r\n    this.updates.add(createPromote(2));\r\n    this.updates.add(createPromote(3));\r\n    this.homeRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(3, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Promote).value());\r\n    this.updates.remove(createPromote(3));\r\n    this.updates.add(createDemote(3));\r\n    this.updates.add(createDemote(4));\r\n    this.homeRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Promote).value());\r\n    List<UpdatedContainer> updated = new ArrayList<>();\r\n    updated.add(UpdatedContainer.newInstance(ContainerUpdateType.PROMOTE_EXECUTION_TYPE, Container.newInstance(createContainerId(2), null, null, null, null, null)));\r\n    updated.add(UpdatedContainer.newInstance(ContainerUpdateType.PROMOTE_EXECUTION_TYPE, Container.newInstance(createContainerId(5), null, null, null, null, null)));\r\n    this.mockAMS.response.setUpdatedContainers(updated);\r\n    this.homeRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(1, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Promote).value());\r\n    this.mockAMS.response.getUpdatedContainers().clear();\r\n    this.updates.remove(createPromote(2));\r\n    List<ContainerStatus> completed = new ArrayList<>();\r\n    completed.add(ContainerStatus.newInstance(createContainerId(1), null, \"\", 0));\r\n    completed.add(ContainerStatus.newInstance(createContainerId(6), null, \"\", 0));\r\n    this.mockAMS.response.setCompletedContainersStatuses(completed);\r\n    this.homeRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(0, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Promote).value());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "testCleanUpOnFinish",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testCleanUpOnFinish() throws YarnException, IOException\n{\r\n    this.asks.add(createResourceRequest(0, \"node\", 2048, 1, 1, ExecutionType.GUARANTEED, 1));\r\n    this.asks.add(createResourceRequest(0, \"rack\", 2048, 1, 1, ExecutionType.GUARANTEED, 1));\r\n    this.asks.add(createResourceRequest(0, ResourceRequest.ANY, 2048, 1, 1, ExecutionType.GUARANTEED, 2));\r\n    this.updates.add(createPromote(1));\r\n    this.updates.add(createPromote(2));\r\n    this.updates.add(createPromote(3));\r\n    this.homeRelayer.allocate(getAllocateRequest());\r\n    this.homeRelayer.shutdown();\r\n    Assert.assertEquals(0, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Guaranteed).value());\r\n    Assert.assertEquals(0, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Promote).value());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "testFailover",
  "errType" : [ "YarnException", "YarnException" ],
  "containingMethodsNum" : 36,
  "sourceCodeText" : "void testFailover() throws YarnException, IOException\n{\r\n    this.asks.add(createResourceRequest(0, \"node\", 2048, 1, 1, ExecutionType.GUARANTEED, 1));\r\n    this.asks.add(createResourceRequest(0, \"rack\", 2048, 1, 1, ExecutionType.GUARANTEED, 1));\r\n    this.asks.add(createResourceRequest(0, ResourceRequest.ANY, 2048, 1, 1, ExecutionType.GUARANTEED, 2));\r\n    long previousSuccess = AMRMClientRelayerMetrics.getInstance().getHeartbeatSuccessMetric(homeID).value();\r\n    long previousFailover = AMRMClientRelayerMetrics.getInstance().getRMMasterSlaveSwitchMetric(homeID).value();\r\n    mockAMS.failover = true;\r\n    this.homeRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(++previousFailover, AMRMClientRelayerMetrics.getInstance().getRMMasterSlaveSwitchMetric(homeID).value());\r\n    Assert.assertEquals(++previousSuccess, AMRMClientRelayerMetrics.getInstance().getHeartbeatSuccessMetric(homeID).value());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Guaranteed).value());\r\n    Assert.assertEquals(0, AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID, RequestType.Guaranteed).value());\r\n    this.uamRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Guaranteed).value());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID, RequestType.Guaranteed).value());\r\n    this.asks.get(2).setNumContainers(3);\r\n    mockAMS.failover = true;\r\n    this.homeRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(++previousFailover, AMRMClientRelayerMetrics.getInstance().getRMMasterSlaveSwitchMetric(homeID).value());\r\n    Assert.assertEquals(++previousSuccess, AMRMClientRelayerMetrics.getInstance().getHeartbeatSuccessMetric(homeID).value());\r\n    Assert.assertEquals(3, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Guaranteed).value());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID, RequestType.Guaranteed).value());\r\n    this.asks.get(2).setNumContainers(2);\r\n    mockAMS.failover = true;\r\n    this.homeRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(++previousFailover, AMRMClientRelayerMetrics.getInstance().getRMMasterSlaveSwitchMetric(homeID).value());\r\n    Assert.assertEquals(++previousSuccess, AMRMClientRelayerMetrics.getInstance().getHeartbeatSuccessMetric(homeID).value());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Guaranteed).value());\r\n    Assert.assertEquals(2, AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID, RequestType.Guaranteed).value());\r\n    long previousFailure = AMRMClientRelayerMetrics.getInstance().getHeartbeatFailureMetric(homeID).value();\r\n    mockAMS.exception = true;\r\n    try {\r\n        this.homeRelayer.allocate(getAllocateRequest());\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n    }\r\n    Assert.assertEquals(previousFailover, AMRMClientRelayerMetrics.getInstance().getRMMasterSlaveSwitchMetric(homeID).value());\r\n    Assert.assertEquals(previousSuccess, AMRMClientRelayerMetrics.getInstance().getHeartbeatSuccessMetric(homeID).value());\r\n    Assert.assertEquals(++previousFailure, AMRMClientRelayerMetrics.getInstance().getHeartbeatFailureMetric(homeID).value());\r\n    mockAMS.failover = true;\r\n    mockAMS.exception = true;\r\n    try {\r\n        this.homeRelayer.allocate(getAllocateRequest());\r\n        Assert.fail();\r\n    } catch (YarnException e) {\r\n    }\r\n    Assert.assertEquals(++previousFailover, AMRMClientRelayerMetrics.getInstance().getRMMasterSlaveSwitchMetric(homeID).value());\r\n    Assert.assertEquals(previousSuccess, AMRMClientRelayerMetrics.getInstance().getHeartbeatSuccessMetric(homeID).value());\r\n    Assert.assertEquals(++previousFailure, AMRMClientRelayerMetrics.getInstance().getHeartbeatFailureMetric(homeID).value());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\metrics",
  "methodName" : "testNewEmptyRequest",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void testNewEmptyRequest() throws YarnException, IOException\n{\r\n    this.asks.add(createResourceRequest(1, ResourceRequest.ANY, 2048, 1, 1, ExecutionType.GUARANTEED, 0));\r\n    this.homeRelayer.allocate(getAllocateRequest());\r\n    Assert.assertEquals(0, AMRMClientRelayerMetrics.getInstance().getPendingMetric(homeID, RequestType.Guaranteed).value());\r\n    Assert.assertEquals(0, AMRMClientRelayerMetrics.getInstance().getPendingMetric(uamID, RequestType.Guaranteed).value());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void setup() throws YarnException\n{\r\n    FederationStateStoreFacade fedFacade = FederationStateStoreFacade.getInstance();\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    conf.set(YarnConfiguration.FEDERATION_CACHE_TIME_TO_LIVE_SECS, \"0\");\r\n    store = new MemoryFederationStateStore();\r\n    store.init(conf);\r\n    fedFacade.reinitialize(store, conf);\r\n    FederationStateStoreTestUtil storeTestUtil = new FederationStateStoreTestUtil(store);\r\n    storeTestUtil.registerSubClusters(10);\r\n    subClusterIds = storeTestUtil.getAllSubClusterIds(true);\r\n    store.setPolicyConfiguration(SetSubClusterPolicyConfigurationRequest.newInstance(getUniformPolicy(queue1)));\r\n    SubClusterResolver resolver = FederationPoliciesTestUtil.initResolver();\r\n    routerFacade = new RouterPolicyFacade(new YarnConfiguration(), fedFacade, resolver, subClusterIds.get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "testConfigurationUpdate",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testConfigurationUpdate() throws YarnException\n{\r\n    ApplicationSubmissionContext applicationSubmissionContext = mock(ApplicationSubmissionContext.class);\r\n    when(applicationSubmissionContext.getQueue()).thenReturn(queue1);\r\n    SubClusterId chosen = routerFacade.getHomeSubcluster(applicationSubmissionContext, null);\r\n    Assert.assertTrue(subClusterIds.contains(chosen));\r\n    Assert.assertTrue(routerFacade.globalPolicyMap.get(queue1) instanceof UniformRandomRouterPolicy);\r\n    store.setPolicyConfiguration(SetSubClusterPolicyConfigurationRequest.newInstance(getPriorityPolicy(queue1)));\r\n    chosen = routerFacade.getHomeSubcluster(applicationSubmissionContext, null);\r\n    Assert.assertTrue(chosen.equals(subClusterIds.get(0)));\r\n    Assert.assertTrue(routerFacade.globalPolicyMap.get(queue1) instanceof PriorityRouterPolicy);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "testGetHomeSubcluster",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void testGetHomeSubcluster() throws YarnException\n{\r\n    ApplicationSubmissionContext applicationSubmissionContext = mock(ApplicationSubmissionContext.class);\r\n    when(applicationSubmissionContext.getQueue()).thenReturn(queue1);\r\n    Assert.assertTrue(routerFacade.globalPolicyMap.containsKey(defQueueKey) && routerFacade.globalPolicyMap.size() == 1);\r\n    SubClusterId chosen = routerFacade.getHomeSubcluster(applicationSubmissionContext, null);\r\n    Assert.assertTrue(subClusterIds.contains(chosen));\r\n    Assert.assertTrue(routerFacade.globalPolicyMap.size() == 2);\r\n    Assert.assertTrue(routerFacade.globalPolicyMap.get(queue1) instanceof UniformRandomRouterPolicy);\r\n    routerFacade.reset();\r\n    Assert.assertTrue(routerFacade.globalPolicyMap.containsKey(defQueueKey) && routerFacade.globalPolicyMap.size() == 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "testFallbacks",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testFallbacks() throws YarnException\n{\r\n    ApplicationSubmissionContext applicationSubmissionContext = mock(ApplicationSubmissionContext.class);\r\n    String uninitQueue = \"non-initialized-queue\";\r\n    when(applicationSubmissionContext.getQueue()).thenReturn(uninitQueue);\r\n    SubClusterId chosen = routerFacade.getHomeSubcluster(applicationSubmissionContext, null);\r\n    Assert.assertTrue(subClusterIds.contains(chosen));\r\n    Assert.assertFalse(routerFacade.globalPolicyMap.containsKey(uninitQueue));\r\n    when(applicationSubmissionContext.getQueue()).thenReturn(\"\");\r\n    chosen = routerFacade.getHomeSubcluster(applicationSubmissionContext, null);\r\n    Assert.assertTrue(subClusterIds.contains(chosen));\r\n    Assert.assertFalse(routerFacade.globalPolicyMap.containsKey(uninitQueue));\r\n    when(applicationSubmissionContext.getQueue()).thenReturn(null);\r\n    chosen = routerFacade.getHomeSubcluster(applicationSubmissionContext, null);\r\n    Assert.assertTrue(subClusterIds.contains(chosen));\r\n    Assert.assertFalse(routerFacade.globalPolicyMap.containsKey(uninitQueue));\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getUniformPolicy",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "SubClusterPolicyConfiguration getUniformPolicy(String queue) throws FederationPolicyInitializationException\n{\r\n    UniformBroadcastPolicyManager wfp = new UniformBroadcastPolicyManager();\r\n    wfp.setQueue(queue);\r\n    SubClusterPolicyConfiguration fpc = wfp.serializeConf();\r\n    return fpc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies",
  "methodName" : "getPriorityPolicy",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "SubClusterPolicyConfiguration getPriorityPolicy(String queue) throws FederationPolicyInitializationException\n{\r\n    PriorityBroadcastPolicyManager wfp = new PriorityBroadcastPolicyManager();\r\n    Map<SubClusterIdInfo, Float> routerWeights = new HashMap<>();\r\n    for (SubClusterId s : subClusterIds) {\r\n        routerWeights.put(new SubClusterIdInfo(s), 0.9f / subClusterIds.size());\r\n    }\r\n    SubClusterIdInfo favorite = new SubClusterIdInfo((subClusterIds.get(0)));\r\n    routerWeights.put(favorite, (0.1f + 0.9f / subClusterIds.size()));\r\n    WeightedPolicyInfo policyInfo = new WeightedPolicyInfo();\r\n    policyInfo.setRouterPolicyWeights(routerWeights);\r\n    wfp.setWeightedPolicyInfo(policyInfo);\r\n    wfp.setQueue(queue);\r\n    SubClusterPolicyConfiguration fpc = wfp.serializeConf();\r\n    return fpc;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "start",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void start()\n{\r\n    InetSocketAddress address = new InetSocketAddress(0);\r\n    Configuration configuration = new Configuration();\r\n    ResourceTracker instance = new ResourceTrackerTestImpl();\r\n    server = RpcServerFactoryPBImpl.get().getServer(ResourceTracker.class, instance, address, configuration, null, 1);\r\n    server.start();\r\n    client = (ResourceTracker) RpcClientFactoryPBImpl.get().getClient(ResourceTracker.class, 1, NetUtils.getConnectAddress(server), configuration);\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stop()\n{\r\n    if (server != null) {\r\n        server.stop();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testResourceTrackerPBClientImpl",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testResourceTrackerPBClientImpl() throws Exception\n{\r\n    RegisterNodeManagerRequest request = recordFactory.newRecordInstance(RegisterNodeManagerRequest.class);\r\n    assertNotNull(client.registerNodeManager(request));\r\n    ResourceTrackerTestImpl.exception = true;\r\n    try {\r\n        client.registerNodeManager(request);\r\n        fail(\"there  should be YarnException\");\r\n    } catch (YarnException e) {\r\n        assertTrue(e.getMessage().startsWith(\"testMessage\"));\r\n    } finally {\r\n        ResourceTrackerTestImpl.exception = false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testNodeHeartbeat",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testNodeHeartbeat() throws Exception\n{\r\n    NodeHeartbeatRequest request = recordFactory.newRecordInstance(NodeHeartbeatRequest.class);\r\n    assertNotNull(client.nodeHeartbeat(request));\r\n    ResourceTrackerTestImpl.exception = true;\r\n    try {\r\n        client.nodeHeartbeat(request);\r\n        fail(\"there  should be YarnException\");\r\n    } catch (YarnException e) {\r\n        assertTrue(e.getMessage().startsWith(\"testMessage\"));\r\n    } finally {\r\n        ResourceTrackerTestImpl.exception = false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn",
  "methodName" : "testUnRegisterNodeManager",
  "errType" : [ "YarnException" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void testUnRegisterNodeManager() throws Exception\n{\r\n    UnRegisterNodeManagerRequest request = UnRegisterNodeManagerRequest.newInstance(NodeId.newInstance(\"host1\", 1234));\r\n    assertNotNull(client.unRegisterNodeManager(request));\r\n    ResourceTrackerTestImpl.exception = true;\r\n    try {\r\n        client.unRegisterNodeManager(request);\r\n        fail(\"there  should be YarnException\");\r\n    } catch (YarnException e) {\r\n        assertTrue(e.getMessage().startsWith(\"testMessage\"));\r\n    } finally {\r\n        ResourceTrackerTestImpl.exception = false;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    setPolicy(new PriorityRouterPolicy());\r\n    setPolicyInfo(new WeightedPolicyInfo());\r\n    Map<SubClusterIdInfo, Float> routerWeights = new HashMap<>();\r\n    Map<SubClusterIdInfo, Float> amrmWeights = new HashMap<>();\r\n    for (int i = 0; i < 20; i++) {\r\n        SubClusterIdInfo sc = new SubClusterIdInfo(\"sc\" + i);\r\n        if (getRand().nextFloat() < 0.95f || i == 5) {\r\n            SubClusterInfo sci = mock(SubClusterInfo.class);\r\n            when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);\r\n            when(sci.getSubClusterId()).thenReturn(sc.toId());\r\n            getActiveSubclusters().put(sc.toId(), sci);\r\n        }\r\n        float weight = getRand().nextFloat();\r\n        if (i == 5) {\r\n            weight = 1.1f;\r\n        }\r\n        if (i <= 5 || getRand().nextFloat() > 0.05f) {\r\n            routerWeights.put(sc, weight);\r\n            amrmWeights.put(sc, weight);\r\n        }\r\n    }\r\n    getPolicyInfo().setRouterPolicyWeights(routerWeights);\r\n    getPolicyInfo().setAMRMPolicyWeights(amrmWeights);\r\n    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(), getPolicyInfo(), getActiveSubclusters());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testPickLowestWeight",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testPickLowestWeight() throws YarnException\n{\r\n    SubClusterId chosen = ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(getApplicationSubmissionContext(), null);\r\n    Assert.assertEquals(\"sc5\", chosen.getId());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testZeroSubClustersWithPositiveWeight",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testZeroSubClustersWithPositiveWeight() throws Exception\n{\r\n    Map<SubClusterIdInfo, Float> routerWeights = new HashMap<>();\r\n    Map<SubClusterIdInfo, Float> amrmWeights = new HashMap<>();\r\n    for (int i = 0; i < 5; i++) {\r\n        SubClusterIdInfo sc = new SubClusterIdInfo(\"sc\" + i);\r\n        SubClusterInfo sci = mock(SubClusterInfo.class);\r\n        when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);\r\n        when(sci.getSubClusterId()).thenReturn(sc.toId());\r\n        getActiveSubclusters().put(sc.toId(), sci);\r\n        routerWeights.put(sc, 0.0f);\r\n        amrmWeights.put(sc, -1.0f);\r\n    }\r\n    getPolicyInfo().setRouterPolicyWeights(routerWeights);\r\n    getPolicyInfo().setAMRMPolicyWeights(amrmWeights);\r\n    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(), getPolicyInfo(), getActiveSubclusters());\r\n    intercept(FederationPolicyException.class, \"No Active Subcluster with weight vector greater than zero\", () -> ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(getApplicationSubmissionContext(), null));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "testResource",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testResource()\n{\r\n    final long mem = 123;\r\n    final int vcores = 456;\r\n    final Resource r = Resource.newInstance(mem, vcores);\r\n    Assert.assertFalse(r instanceof ResourcePBImpl);\r\n    Assert.assertEquals(mem, r.getMemorySize());\r\n    Assert.assertEquals(vcores, r.getVirtualCores());\r\n    ResourceProto proto = ProtoUtils.convertToProtoFormat(r);\r\n    Assert.assertEquals(mem, proto.getMemory());\r\n    Assert.assertEquals(vcores, proto.getVirtualCores());\r\n    Assert.assertEquals(r, ProtoUtils.convertFromProtoFormat(proto));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "testNMContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testNMContainerStatus()\n{\r\n    ApplicationId appId = ApplicationId.newInstance(123456789, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(attemptId, 1);\r\n    Resource resource = Resource.newInstance(1000, 200);\r\n    NMContainerStatus report = NMContainerStatus.newInstance(containerId, 0, ContainerState.COMPLETE, resource, \"diagnostics\", ContainerExitStatus.ABORTED, Priority.newInstance(10), 1234);\r\n    NMContainerStatus reportProto = new NMContainerStatusPBImpl(((NMContainerStatusPBImpl) report).getProto());\r\n    Assert.assertEquals(\"diagnostics\", reportProto.getDiagnostics());\r\n    Assert.assertEquals(resource, reportProto.getAllocatedResource());\r\n    Assert.assertEquals(ContainerExitStatus.ABORTED, reportProto.getContainerExitStatus());\r\n    Assert.assertEquals(ContainerState.COMPLETE, reportProto.getContainerState());\r\n    Assert.assertEquals(containerId, reportProto.getContainerId());\r\n    Assert.assertEquals(Priority.newInstance(10), reportProto.getPriority());\r\n    Assert.assertEquals(1234, reportProto.getCreationTime());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "testRegisterNodeManagerRequest",
  "errType" : null,
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testRegisterNodeManagerRequest()\n{\r\n    ApplicationId appId = ApplicationId.newInstance(123456789, 1);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(appId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(attemptId, 1);\r\n    NMContainerStatus containerReport = NMContainerStatus.newInstance(containerId, 0, ContainerState.RUNNING, Resource.newInstance(1024, 1), \"diagnostics\", 0, Priority.newInstance(10), 1234);\r\n    List<NMContainerStatus> reports = Arrays.asList(containerReport);\r\n    RegisterNodeManagerRequest request = RegisterNodeManagerRequest.newInstance(NodeId.newInstance(\"1.1.1.1\", 1000), 8080, Resource.newInstance(1024, 1), \"NM-version-id\", reports, Arrays.asList(appId));\r\n    RegisterNodeManagerRequest requestProto = new RegisterNodeManagerRequestPBImpl(((RegisterNodeManagerRequestPBImpl) request).getProto());\r\n    Assert.assertEquals(containerReport, requestProto.getNMContainerStatuses().get(0));\r\n    Assert.assertEquals(8080, requestProto.getHttpPort());\r\n    Assert.assertEquals(\"NM-version-id\", requestProto.getNMVersion());\r\n    Assert.assertEquals(NodeId.newInstance(\"1.1.1.1\", 1000), requestProto.getNodeId());\r\n    Assert.assertEquals(Resource.newInstance(1024, 1), requestProto.getResource());\r\n    Assert.assertEquals(1, requestProto.getRunningApplications().size());\r\n    Assert.assertEquals(appId, requestProto.getRunningApplications().get(0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "testNodeHeartBeatResponse",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testNodeHeartBeatResponse() throws IOException\n{\r\n    NodeHeartbeatResponse record = Records.newRecord(NodeHeartbeatResponse.class);\r\n    Map<ApplicationId, ByteBuffer> appCredentials = new HashMap<ApplicationId, ByteBuffer>();\r\n    Credentials app1Cred = new Credentials();\r\n    Token<DelegationTokenIdentifier> token1 = new Token<DelegationTokenIdentifier>();\r\n    token1.setKind(new Text(\"kind1\"));\r\n    app1Cred.addToken(new Text(\"token1\"), token1);\r\n    Token<DelegationTokenIdentifier> token2 = new Token<DelegationTokenIdentifier>();\r\n    token2.setKind(new Text(\"kind2\"));\r\n    app1Cred.addToken(new Text(\"token2\"), token2);\r\n    DataOutputBuffer dob = new DataOutputBuffer();\r\n    app1Cred.writeTokenStorageToStream(dob);\r\n    ByteBuffer byteBuffer = ByteBuffer.wrap(dob.getData(), 0, dob.getLength());\r\n    appCredentials.put(ApplicationId.newInstance(1234, 1), byteBuffer);\r\n    record.setSystemCredentialsForApps(YarnServerBuilderUtils.convertToProtoFormat(appCredentials));\r\n    NodeHeartbeatResponse proto = new NodeHeartbeatResponsePBImpl(((NodeHeartbeatResponsePBImpl) record).getProto());\r\n    Assert.assertEquals(appCredentials, YarnServerBuilderUtils.convertFromProtoFormat(proto.getSystemCredentialsForApps()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "testNodeHeartBeatRequest",
  "errType" : null,
  "containingMethodsNum" : 13,
  "sourceCodeText" : "void testNodeHeartBeatRequest() throws IOException\n{\r\n    NodeHeartbeatRequest record = Records.newRecord(NodeHeartbeatRequest.class);\r\n    NodeStatus nodeStatus = Records.newRecord(NodeStatus.class);\r\n    OpportunisticContainersStatus opportunisticContainersStatus = Records.newRecord(OpportunisticContainersStatus.class);\r\n    opportunisticContainersStatus.setEstimatedQueueWaitTime(123);\r\n    opportunisticContainersStatus.setWaitQueueLength(321);\r\n    nodeStatus.setOpportunisticContainersStatus(opportunisticContainersStatus);\r\n    record.setNodeStatus(nodeStatus);\r\n    Set<NodeAttribute> attributeSet = Sets.newHashSet(NodeAttribute.newInstance(\"attributeA\", NodeAttributeType.STRING, \"valueA\"), NodeAttribute.newInstance(\"attributeB\", NodeAttributeType.STRING, \"valueB\"));\r\n    record.setNodeAttributes(attributeSet);\r\n    NodeHeartbeatRequestPBImpl pb = new NodeHeartbeatRequestPBImpl(((NodeHeartbeatRequestPBImpl) record).getProto());\r\n    Assert.assertEquals(123, pb.getNodeStatus().getOpportunisticContainersStatus().getEstimatedQueueWaitTime());\r\n    Assert.assertEquals(321, pb.getNodeStatus().getOpportunisticContainersStatus().getWaitQueueLength());\r\n    Assert.assertEquals(2, pb.getNodeAttributes().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\api\\protocolrecords",
  "methodName" : "testContainerStatus",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testContainerStatus()\n{\r\n    ContainerStatus status = Records.newRecord(ContainerStatus.class);\r\n    List<String> ips = Arrays.asList(\"127.0.0.1\", \"139.5.25.2\");\r\n    status.setIPs(ips);\r\n    status.setHost(\"locahost123\");\r\n    ContainerStatusPBImpl pb = new ContainerStatusPBImpl(((ContainerStatusPBImpl) status).getProto());\r\n    Assert.assertEquals(ips, pb.getIPs());\r\n    Assert.assertEquals(\"locahost123\", pb.getHost());\r\n    Assert.assertEquals(ExecutionType.GUARANTEED, pb.getExecutionType());\r\n    status.setIPs(null);\r\n    Assert.assertNull(status.getIPs());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\api",
  "methodName" : "testDistributedProtocol",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testDistributedProtocol()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    try {\r\n        ServerRMProxy.createRMProxy(conf, DistributedSchedulingAMProtocol.class);\r\n    } catch (Exception e) {\r\n        Assert.fail(\"DistributedSchedulingAMProtocol fail in non HA\");\r\n    }\r\n    conf.setBoolean(YarnConfiguration.RM_HA_ENABLED, true);\r\n    conf.set(YarnConfiguration.RM_HA_IDS, \"rm1,rm2\");\r\n    conf.set(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME, \"rm1\"), \"0.0.0.0\");\r\n    conf.set(HAUtil.addSuffix(YarnConfiguration.RM_HOSTNAME, \"rm2\"), \"0.0.0.0\");\r\n    try {\r\n        ServerRMProxy.createRMProxy(conf, DistributedSchedulingAMProtocol.class);\r\n    } catch (Exception e) {\r\n        Assert.fail(\"DistributedSchedulingAMProtocol fail in HA\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setUp()\n{\r\n    subClusterId = SubClusterId.newInstance(\"abc\");\r\n    amRMServiceAddress = \"localhost:8032\";\r\n    clientRMServiceAddress = \"localhost:8034\";\r\n    rmAdminServiceAddress = \"localhost:8031\";\r\n    rmWebServiceAddress = \"localhost:8088\";\r\n    lastHeartBeat = 1000;\r\n    stateNew = SubClusterState.SC_NEW;\r\n    stateLost = SubClusterState.SC_LOST;\r\n    lastStartTime = 1000;\r\n    capability = \"Memory VCores\";\r\n    appId = ApplicationId.newInstance(lastStartTime, 1);\r\n    queue = \"default\";\r\n    type = \"random\";\r\n    params = ByteBuffer.allocate(10);\r\n    params.put((byte) 0xFF);\r\n    subClusterIdInvalid = SubClusterId.newInstance(\"\");\r\n    subClusterIdNull = null;\r\n    lastHeartBeatNegative = -10;\r\n    lastStartTimeNegative = -10;\r\n    stateNull = null;\r\n    appIdNull = null;\r\n    capabilityNull = null;\r\n    capabilityEmpty = \"\";\r\n    addressNull = null;\r\n    addressEmpty = \"\";\r\n    addressWrong = \"AddressWrong\";\r\n    addressWrongPort = \"Address:WrongPort\";\r\n    queueEmpty = \"\";\r\n    queueNull = null;\r\n    typeEmpty = \"\";\r\n    typeNull = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testValidateSubClusterRegisterRequest",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 39,
  "sourceCodeText" : "void testValidateSubClusterRegisterRequest()\n{\r\n    SubClusterInfo subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNew, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n    try {\r\n        SubClusterRegisterRequest request = null;\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubClusterRegister Request.\"));\r\n    }\r\n    subClusterInfo = null;\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Information.\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterIdNull, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNew, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Id information.\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterIdInvalid, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNew, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid SubCluster Id information.\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNull, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster State information.\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNew, lastStartTime, capabilityNull);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNew, lastStartTime, capabilityEmpty);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 8,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testValidateSubClusterRegisterRequestTimestamp",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testValidateSubClusterRegisterRequestTimestamp()\n{\r\n    SubClusterInfo subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeatNegative, stateNew, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid timestamp information.\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNew, lastStartTimeNegative, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid timestamp information.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testValidateSubClusterRegisterRequestAddress",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 48,
  "sourceCodeText" : "void testValidateSubClusterRegisterRequestAddress()\n{\r\n    SubClusterInfo subClusterInfo = SubClusterInfo.newInstance(subClusterId, addressNull, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNew, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Endpoint information.\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, addressEmpty, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNew, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Endpoint information.\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, addressNull, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNew, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Endpoint information.\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, addressEmpty, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNew, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Endpoint information.\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, addressNull, rmWebServiceAddress, lastHeartBeat, stateNew, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Endpoint information.\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, addressEmpty, rmWebServiceAddress, lastHeartBeat, stateNew, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Endpoint information.\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, addressNull, lastHeartBeat, stateNew, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Endpoint information.\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, addressEmpty, lastHeartBeat, stateNew, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Endpoint information.\"));\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 8,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testValidateSubClusterRegisterRequestAddressInvalid",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 48,
  "sourceCodeText" : "void testValidateSubClusterRegisterRequestAddressInvalid()\n{\r\n    SubClusterInfo subClusterInfo = SubClusterInfo.newInstance(subClusterId, addressWrong, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNull, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().contains(\"valid host:port authority:\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, addressWrong, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNull, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().contains(\"valid host:port authority:\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, addressWrong, rmWebServiceAddress, lastHeartBeat, stateNull, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().contains(\"valid host:port authority:\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, addressWrong, lastHeartBeat, stateNull, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().contains(\"valid host:port authority:\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, addressWrongPort, clientRMServiceAddress, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNull, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().contains(\"valid host:port authority:\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, addressWrongPort, rmAdminServiceAddress, rmWebServiceAddress, lastHeartBeat, stateNull, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().contains(\"valid host:port authority:\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, addressWrongPort, rmWebServiceAddress, lastHeartBeat, stateNull, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().contains(\"valid host:port authority:\"));\r\n    }\r\n    subClusterInfo = SubClusterInfo.newInstance(subClusterId, amRMServiceAddress, clientRMServiceAddress, rmAdminServiceAddress, addressWrongPort, lastHeartBeat, stateNull, lastStartTime, capability);\r\n    try {\r\n        SubClusterRegisterRequest request = SubClusterRegisterRequest.newInstance(subClusterInfo);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().contains(\"valid host:port authority:\"));\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 8,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testValidateSubClusterDeregisterRequest",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 27,
  "sourceCodeText" : "void testValidateSubClusterDeregisterRequest()\n{\r\n    try {\r\n        SubClusterDeregisterRequest request = SubClusterDeregisterRequest.newInstance(subClusterId, stateLost);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n    try {\r\n        SubClusterDeregisterRequest request = null;\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubClusterDeregister Request.\"));\r\n    }\r\n    try {\r\n        SubClusterDeregisterRequest request = SubClusterDeregisterRequest.newInstance(subClusterIdNull, stateLost);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Id information.\"));\r\n    }\r\n    try {\r\n        SubClusterDeregisterRequest request = SubClusterDeregisterRequest.newInstance(subClusterIdInvalid, stateLost);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid SubCluster Id information.\"));\r\n    }\r\n    try {\r\n        SubClusterDeregisterRequest request = SubClusterDeregisterRequest.newInstance(subClusterId, stateNull);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster State information.\"));\r\n    }\r\n    try {\r\n        SubClusterDeregisterRequest request = SubClusterDeregisterRequest.newInstance(subClusterId, stateNew);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid non-final state: \"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 6,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testSubClusterHeartbeatRequest",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 37,
  "sourceCodeText" : "void testSubClusterHeartbeatRequest()\n{\r\n    try {\r\n        SubClusterHeartbeatRequest request = SubClusterHeartbeatRequest.newInstance(subClusterId, lastHeartBeat, stateLost, capability);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n    try {\r\n        SubClusterHeartbeatRequest request = null;\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubClusterHeartbeat Request.\"));\r\n    }\r\n    try {\r\n        SubClusterHeartbeatRequest request = SubClusterHeartbeatRequest.newInstance(subClusterIdNull, lastHeartBeat, stateLost, capability);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Id information.\"));\r\n    }\r\n    try {\r\n        SubClusterHeartbeatRequest request = SubClusterHeartbeatRequest.newInstance(subClusterIdInvalid, lastHeartBeat, stateLost, capability);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid SubCluster Id information.\"));\r\n    }\r\n    try {\r\n        SubClusterHeartbeatRequest request = SubClusterHeartbeatRequest.newInstance(subClusterId, lastHeartBeat, stateNull, capability);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster State information.\"));\r\n    }\r\n    try {\r\n        SubClusterHeartbeatRequest request = SubClusterHeartbeatRequest.newInstance(subClusterId, lastHeartBeatNegative, stateLost, capability);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid timestamp information.\"));\r\n    }\r\n    try {\r\n        SubClusterHeartbeatRequest request = SubClusterHeartbeatRequest.newInstance(subClusterId, lastHeartBeat, stateLost, capabilityNull);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid capability information.\"));\r\n    }\r\n    try {\r\n        SubClusterHeartbeatRequest request = SubClusterHeartbeatRequest.newInstance(subClusterId, lastHeartBeat, stateLost, capabilityEmpty);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid capability information.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 8,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testGetSubClusterInfoRequest",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 17,
  "sourceCodeText" : "void testGetSubClusterInfoRequest()\n{\r\n    try {\r\n        GetSubClusterInfoRequest request = GetSubClusterInfoRequest.newInstance(subClusterId);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n    try {\r\n        GetSubClusterInfoRequest request = null;\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing GetSubClusterInfo Request.\"));\r\n    }\r\n    try {\r\n        GetSubClusterInfoRequest request = GetSubClusterInfoRequest.newInstance(subClusterIdNull);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Id information.\"));\r\n    }\r\n    try {\r\n        GetSubClusterInfoRequest request = GetSubClusterInfoRequest.newInstance(subClusterIdInvalid);\r\n        FederationMembershipStateStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid SubCluster Id information.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 4,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testAddApplicationHomeSubClusterRequest",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testAddApplicationHomeSubClusterRequest()\n{\r\n    ApplicationHomeSubCluster applicationHomeSubCluster = ApplicationHomeSubCluster.newInstance(appId, subClusterId);\r\n    try {\r\n        AddApplicationHomeSubClusterRequest request = AddApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n    try {\r\n        AddApplicationHomeSubClusterRequest request = null;\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing AddApplicationHomeSubCluster Request.\"));\r\n    }\r\n    applicationHomeSubCluster = null;\r\n    try {\r\n        AddApplicationHomeSubClusterRequest request = AddApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing ApplicationHomeSubCluster Info.\"));\r\n    }\r\n    applicationHomeSubCluster = ApplicationHomeSubCluster.newInstance(appId, subClusterIdNull);\r\n    try {\r\n        AddApplicationHomeSubClusterRequest request = AddApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Id information.\"));\r\n    }\r\n    applicationHomeSubCluster = ApplicationHomeSubCluster.newInstance(appId, subClusterIdInvalid);\r\n    try {\r\n        AddApplicationHomeSubClusterRequest request = AddApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid SubCluster Id information.\"));\r\n    }\r\n    applicationHomeSubCluster = ApplicationHomeSubCluster.newInstance(appIdNull, subClusterId);\r\n    try {\r\n        AddApplicationHomeSubClusterRequest request = AddApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing Application Id.\"));\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 6,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testUpdateApplicationHomeSubClusterRequest",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 28,
  "sourceCodeText" : "void testUpdateApplicationHomeSubClusterRequest()\n{\r\n    ApplicationHomeSubCluster applicationHomeSubCluster = ApplicationHomeSubCluster.newInstance(appId, subClusterId);\r\n    try {\r\n        UpdateApplicationHomeSubClusterRequest request = UpdateApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n    try {\r\n        UpdateApplicationHomeSubClusterRequest request = null;\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing UpdateApplicationHomeSubCluster Request.\"));\r\n    }\r\n    applicationHomeSubCluster = null;\r\n    try {\r\n        UpdateApplicationHomeSubClusterRequest request = UpdateApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing ApplicationHomeSubCluster Info.\"));\r\n    }\r\n    applicationHomeSubCluster = ApplicationHomeSubCluster.newInstance(appId, subClusterIdNull);\r\n    try {\r\n        UpdateApplicationHomeSubClusterRequest request = UpdateApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubCluster Id information.\"));\r\n    }\r\n    applicationHomeSubCluster = ApplicationHomeSubCluster.newInstance(appId, subClusterIdInvalid);\r\n    try {\r\n        UpdateApplicationHomeSubClusterRequest request = UpdateApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        LOG.info(e.getMessage());\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Invalid SubCluster Id information.\"));\r\n    }\r\n    applicationHomeSubCluster = ApplicationHomeSubCluster.newInstance(appIdNull, subClusterId);\r\n    try {\r\n        UpdateApplicationHomeSubClusterRequest request = UpdateApplicationHomeSubClusterRequest.newInstance(applicationHomeSubCluster);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing Application Id.\"));\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 6,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testGetApplicationHomeSubClusterRequest",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testGetApplicationHomeSubClusterRequest()\n{\r\n    try {\r\n        GetApplicationHomeSubClusterRequest request = GetApplicationHomeSubClusterRequest.newInstance(appId);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n    try {\r\n        GetApplicationHomeSubClusterRequest request = null;\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing GetApplicationHomeSubCluster Request.\"));\r\n    }\r\n    try {\r\n        GetApplicationHomeSubClusterRequest request = GetApplicationHomeSubClusterRequest.newInstance(appIdNull);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing Application Id.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testDeleteApplicationHomeSubClusterRequestNull",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testDeleteApplicationHomeSubClusterRequestNull()\n{\r\n    try {\r\n        DeleteApplicationHomeSubClusterRequest request = DeleteApplicationHomeSubClusterRequest.newInstance(appId);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n    try {\r\n        DeleteApplicationHomeSubClusterRequest request = null;\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing DeleteApplicationHomeSubCluster Request.\"));\r\n    }\r\n    try {\r\n        DeleteApplicationHomeSubClusterRequest request = DeleteApplicationHomeSubClusterRequest.newInstance(appIdNull);\r\n        FederationApplicationHomeSubClusterStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing Application Id.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 3,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testGetSubClusterPolicyConfigurationRequest",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 14,
  "sourceCodeText" : "void testGetSubClusterPolicyConfigurationRequest()\n{\r\n    try {\r\n        GetSubClusterPolicyConfigurationRequest request = GetSubClusterPolicyConfigurationRequest.newInstance(queue);\r\n        FederationPolicyStoreInputValidator.validate(request);\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n    try {\r\n        GetSubClusterPolicyConfigurationRequest request = null;\r\n        FederationPolicyStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing GetSubClusterPolicyConfiguration Request.\"));\r\n    }\r\n    try {\r\n        GetSubClusterPolicyConfigurationRequest request = GetSubClusterPolicyConfigurationRequest.newInstance(queueNull);\r\n        FederationPolicyStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing Queue.\"));\r\n    }\r\n    try {\r\n        GetSubClusterPolicyConfigurationRequest request = GetSubClusterPolicyConfigurationRequest.newInstance(queueEmpty);\r\n        FederationPolicyStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing Queue.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 4,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\store\\utils",
  "methodName" : "testSetSubClusterPolicyConfigurationRequest",
  "errType" : [ "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException", "FederationStateStoreInvalidInputException" ],
  "containingMethodsNum" : 31,
  "sourceCodeText" : "void testSetSubClusterPolicyConfigurationRequest()\n{\r\n    try {\r\n        SubClusterPolicyConfiguration policy = SubClusterPolicyConfiguration.newInstance(queue, type, params);\r\n        SetSubClusterPolicyConfigurationRequest request = SetSubClusterPolicyConfigurationRequest.newInstance(policy);\r\n        FederationPolicyStoreInputValidator.validate(request);\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.fail(e.getMessage());\r\n    }\r\n    try {\r\n        SetSubClusterPolicyConfigurationRequest request = null;\r\n        FederationPolicyStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SetSubClusterPolicyConfiguration Request.\"));\r\n    }\r\n    try {\r\n        SubClusterPolicyConfiguration policy = null;\r\n        SetSubClusterPolicyConfigurationRequest request = SetSubClusterPolicyConfigurationRequest.newInstance(policy);\r\n        FederationPolicyStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing SubClusterPolicyConfiguration.\"));\r\n    }\r\n    try {\r\n        SubClusterPolicyConfiguration policy = SubClusterPolicyConfiguration.newInstance(queueNull, type, params);\r\n        SetSubClusterPolicyConfigurationRequest request = SetSubClusterPolicyConfigurationRequest.newInstance(policy);\r\n        FederationPolicyStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing Queue.\"));\r\n    }\r\n    try {\r\n        SubClusterPolicyConfiguration policy = SubClusterPolicyConfiguration.newInstance(queueEmpty, type, params);\r\n        SetSubClusterPolicyConfigurationRequest request = SetSubClusterPolicyConfigurationRequest.newInstance(policy);\r\n        FederationPolicyStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing Queue.\"));\r\n    }\r\n    try {\r\n        SubClusterPolicyConfiguration policy = SubClusterPolicyConfiguration.newInstance(queue, typeNull, params);\r\n        SetSubClusterPolicyConfigurationRequest request = SetSubClusterPolicyConfigurationRequest.newInstance(policy);\r\n        FederationPolicyStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing Policy Type.\"));\r\n    }\r\n    try {\r\n        SubClusterPolicyConfiguration policy = SubClusterPolicyConfiguration.newInstance(queue, typeEmpty, params);\r\n        SetSubClusterPolicyConfigurationRequest request = SetSubClusterPolicyConfigurationRequest.newInstance(policy);\r\n        FederationPolicyStoreInputValidator.validate(request);\r\n        Assert.fail();\r\n    } catch (FederationStateStoreInvalidInputException e) {\r\n        Assert.assertTrue(e.getMessage().startsWith(\"Missing Policy Type.\"));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 7,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "getParameters",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Collection<Boolean[]> getParameters()\n{\r\n    return Arrays.asList(new Boolean[][] { { Boolean.FALSE }, { Boolean.TRUE } });\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setUp() throws IOException, YarnException\n{\r\n    stateStore = new MemoryFederationStateStore();\r\n    stateStore.init(conf);\r\n    facade.reinitialize(stateStore, conf);\r\n    stateStoreTestUtil = new FederationStateStoreTestUtil(stateStore);\r\n    stateStoreTestUtil.registerSubClusters(numSubClusters);\r\n    stateStoreTestUtil.addAppsHomeSC(clusterTs, numApps);\r\n    stateStoreTestUtil.addPolicyConfigs(numQueues);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "tearDown",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void tearDown() throws Exception\n{\r\n    stateStore.close();\r\n    stateStore = null;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testGetSubCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetSubCluster() throws YarnException\n{\r\n    for (int i = 0; i < numSubClusters; i++) {\r\n        SubClusterId subClusterId = SubClusterId.newInstance(FederationStateStoreTestUtil.SC_PREFIX + i);\r\n        Assert.assertEquals(stateStoreTestUtil.querySubClusterInfo(subClusterId), facade.getSubCluster(subClusterId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testInvalidGetSubCluster",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testInvalidGetSubCluster() throws YarnException\n{\r\n    SubClusterId subClusterId = SubClusterId.newInstance(FederationStateStoreTestUtil.INVALID);\r\n    Assert.assertNull(facade.getSubCluster(subClusterId));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testGetSubClusterFlushCache",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetSubClusterFlushCache() throws YarnException\n{\r\n    for (int i = 0; i < numSubClusters; i++) {\r\n        SubClusterId subClusterId = SubClusterId.newInstance(FederationStateStoreTestUtil.SC_PREFIX + i);\r\n        Assert.assertEquals(stateStoreTestUtil.querySubClusterInfo(subClusterId), facade.getSubCluster(subClusterId, true));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testGetSubClusters",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetSubClusters() throws YarnException\n{\r\n    Map<SubClusterId, SubClusterInfo> subClusters = facade.getSubClusters(false);\r\n    for (SubClusterId subClusterId : subClusters.keySet()) {\r\n        Assert.assertEquals(stateStoreTestUtil.querySubClusterInfo(subClusterId), subClusters.get(subClusterId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testGetPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testGetPolicyConfiguration() throws YarnException\n{\r\n    for (int i = 0; i < numQueues; i++) {\r\n        String queue = FederationStateStoreTestUtil.Q_PREFIX + i;\r\n        Assert.assertEquals(stateStoreTestUtil.queryPolicyConfiguration(queue), facade.getPolicyConfiguration(queue));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testSubClustersCache",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testSubClustersCache() throws YarnException\n{\r\n    Map<SubClusterId, SubClusterInfo> allClusters = facade.getSubClusters(false);\r\n    Assert.assertEquals(numSubClusters, allClusters.size());\r\n    SubClusterId clusterId = new ArrayList<>(allClusters.keySet()).get(0);\r\n    stateStoreTestUtil.deRegisterSubCluster(clusterId);\r\n    Map<SubClusterId, SubClusterInfo> activeClusters = facade.getSubClusters(true);\r\n    Assert.assertEquals(numSubClusters - 1, activeClusters.size());\r\n    allClusters = facade.getSubClusters(false);\r\n    Assert.assertEquals(numSubClusters, allClusters.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testInvalidGetPolicyConfiguration",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void testInvalidGetPolicyConfiguration() throws YarnException\n{\r\n    Assert.assertNull(facade.getPolicyConfiguration(FederationStateStoreTestUtil.INVALID));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testGetPoliciesConfigurations",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void testGetPoliciesConfigurations() throws YarnException\n{\r\n    Map<String, SubClusterPolicyConfiguration> queuePolicies = facade.getPoliciesConfigurations();\r\n    for (String queue : queuePolicies.keySet()) {\r\n        Assert.assertEquals(stateStoreTestUtil.queryPolicyConfiguration(queue), queuePolicies.get(queue));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testGetHomeSubClusterForApp",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testGetHomeSubClusterForApp() throws YarnException\n{\r\n    for (int i = 0; i < numApps; i++) {\r\n        ApplicationId appId = ApplicationId.newInstance(clusterTs, i);\r\n        Assert.assertEquals(stateStoreTestUtil.queryApplicationHomeSC(appId), facade.getApplicationHomeSubCluster(appId));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "testAddApplicationHomeSubCluster",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testAddApplicationHomeSubCluster() throws YarnException\n{\r\n    ApplicationId appId = ApplicationId.newInstance(clusterTs, numApps + 1);\r\n    SubClusterId subClusterId1 = SubClusterId.newInstance(\"Home1\");\r\n    ApplicationHomeSubCluster appHomeSubCluster = ApplicationHomeSubCluster.newInstance(appId, subClusterId1);\r\n    SubClusterId result = facade.addApplicationHomeSubCluster(appHomeSubCluster);\r\n    Assert.assertEquals(facade.getApplicationHomeSubCluster(appId), result);\r\n    Assert.assertEquals(subClusterId1, result);\r\n    SubClusterId subClusterId2 = SubClusterId.newInstance(\"Home2\");\r\n    appHomeSubCluster = ApplicationHomeSubCluster.newInstance(appId, subClusterId2);\r\n    result = facade.addApplicationHomeSubCluster(appHomeSubCluster);\r\n    Assert.assertEquals(facade.getApplicationHomeSubCluster(appId), result);\r\n    Assert.assertEquals(subClusterId1, result);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "createContainerReport",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "ContainerReport createContainerReport()\n{\r\n    ApplicationId applicationId = ApplicationId.newInstance(1234, 5);\r\n    ApplicationAttemptId attemptId = ApplicationAttemptId.newInstance(applicationId, 1);\r\n    ContainerId containerId = ContainerId.newContainerId(attemptId, 1);\r\n    Map<String, List<Map<String, String>>> ports = new HashMap<>();\r\n    List<Map<String, String>> list = new ArrayList<>();\r\n    Map<String, String> map = new HashMap<>();\r\n    map.put(\"abc\", \"123\");\r\n    list.add(map);\r\n    ports.put(\"192.168.0.1\", list);\r\n    ContainerReport container = ContainerReport.newInstance(containerId, null, NodeId.newInstance(\"host\", 1234), Priority.UNDEFINED, 1234, 5678, \"diagnosticInfo\", \"logURL\", 0, ContainerState.COMPLETE, \"http://\" + NodeId.newInstance(\"host\", 2345).toString());\r\n    container.setExposedPorts(ports);\r\n    return container;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\webapp",
  "methodName" : "testRenderResourcesString",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testRenderResourcesString()\n{\r\n    CustomResourceTypesConfigurationProvider.initResourceTypes(ResourceInformation.GPU_URI);\r\n    Resource resource = ResourceTypesTestHelper.newResource(DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_MB, DEFAULT_RM_SCHEDULER_MAXIMUM_ALLOCATION_VCORES, ImmutableMap.<String, String>builder().put(ResourceInformation.GPU_URI, \"5\").build());\r\n    ContainerBlock block = new ContainerBlock(mock(ApplicationBaseProtocol.class), mock(View.ViewContext.class));\r\n    ContainerReport containerReport = createContainerReport();\r\n    containerReport.setAllocatedResource(resource);\r\n    ContainerInfo containerInfo = new ContainerInfo(containerReport);\r\n    String resources = block.getResources(containerInfo);\r\n    Assert.assertEquals(\"8192 Memory, 4 VCores, 5 yarn.io/gpu\", resources);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void setup()\n{\r\n    SecurityUtil.setTokenServiceUseIp(false);\r\n    final MasterKey mKey = new MasterKey() {\r\n\r\n        @Override\r\n        public int getKeyId() {\r\n            return 1;\r\n        }\r\n\r\n        @Override\r\n        public void setKeyId(int keyId) {\r\n        }\r\n\r\n        @Override\r\n        public ByteBuffer getBytes() {\r\n            return ByteBuffer.allocate(8);\r\n        }\r\n\r\n        @Override\r\n        public void setBytes(ByteBuffer bytes) {\r\n        }\r\n    };\r\n    BaseContainerTokenSecretManager secMan = new BaseContainerTokenSecretManager(new Configuration()) {\r\n\r\n        @Override\r\n        public MasterKey getCurrentKey() {\r\n            return mKey;\r\n        }\r\n\r\n        @Override\r\n        public byte[] createPassword(ContainerTokenIdentifier identifier) {\r\n            return new byte[] { 1, 2 };\r\n        }\r\n    };\r\n    allocator = new DistributedOpportunisticContainerAllocator(secMan);\r\n    oppCntxt = new OpportunisticContainerContext();\r\n    oppCntxt.getAppParams().setMinResource(Resource.newInstance(1024, 1));\r\n    oppCntxt.getAppParams().setIncrementResource(Resource.newInstance(512, 1));\r\n    oppCntxt.getAppParams().setMaxResource(Resource.newInstance(1024, 10));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testSimpleAllocation",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testSimpleAllocation() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newInstance(PRIORITY_NORMAL, \"*\", CAPABILITY_1GB, 1, true, null, OPPORTUNISTIC_REQ));\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h1\", 1234), \"h1:1234\", \"/r1\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\");\r\n    Assert.assertEquals(1, containers.size());\r\n    Assert.assertEquals(0, oppCntxt.getOutstandingOpReqs().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testBlacklistRejection",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testBlacklistRejection() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(Arrays.asList(\"h1\", \"h2\"), new ArrayList<>());\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newInstance(PRIORITY_NORMAL, \"*\", CAPABILITY_1GB, 1, true, null, OPPORTUNISTIC_REQ));\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h1\", 1234), \"h1:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r2\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\");\r\n    Assert.assertEquals(0, containers.size());\r\n    Assert.assertEquals(1, oppCntxt.getOutstandingOpReqs().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testRoundRobinSimpleAllocation",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testRoundRobinSimpleAllocation() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newBuilder().allocationRequestId(1).priority(PRIORITY_NORMAL).resourceName(ResourceRequest.ANY).capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(2).priority(PRIORITY_NORMAL).resourceName(ResourceRequest.ANY).capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(3).priority(PRIORITY_NORMAL).resourceName(ResourceRequest.ANY).capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build());\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h1\", 1234), \"h1:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r1\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\");\r\n    LOG.info(\"Containers: {}\", containers);\r\n    Set<String> allocatedHosts = new HashSet<>();\r\n    for (Container c : containers) {\r\n        allocatedHosts.add(c.getNodeHttpAddress());\r\n    }\r\n    Assert.assertTrue(allocatedHosts.contains(\"h1:1234\"));\r\n    Assert.assertTrue(allocatedHosts.contains(\"h2:1234\"));\r\n    Assert.assertTrue(allocatedHosts.contains(\"h3:1234\"));\r\n    Assert.assertEquals(3, containers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testNodeLocalAllocation",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testNodeLocalAllocation() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newBuilder().allocationRequestId(1).priority(PRIORITY_NORMAL).resourceName(ResourceRequest.ANY).capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(2).priority(PRIORITY_NORMAL).resourceName(\"/r1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(2).priority(PRIORITY_NORMAL).resourceName(\"h1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(2).priority(PRIORITY_NORMAL).resourceName(ResourceRequest.ANY).capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(3).priority(PRIORITY_NORMAL).resourceName(\"/r1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(3).priority(PRIORITY_NORMAL).resourceName(\"h1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(3).priority(PRIORITY_NORMAL).resourceName(ResourceRequest.ANY).capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build());\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h1\", 1234), \"h1:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r1\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\");\r\n    LOG.info(\"Containers: {}\", containers);\r\n    Assert.assertEquals(3, containers.size());\r\n    for (Container c : containers) {\r\n        if (c.getAllocationRequestId() == 2 || c.getAllocationRequestId() == 3) {\r\n            Assert.assertEquals(\"h1:1234\", c.getNodeHttpAddress());\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testNodeLocalAllocationSameSchedKey",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testNodeLocalAllocationSameSchedKey() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newBuilder().allocationRequestId(2).numContainers(2).priority(PRIORITY_NORMAL).resourceName(\"/r1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(2).numContainers(2).priority(PRIORITY_NORMAL).resourceName(\"h1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(2).numContainers(2).priority(PRIORITY_NORMAL).resourceName(ResourceRequest.ANY).capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build());\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h1\", 1234), \"h1:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r1\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\");\r\n    LOG.info(\"Containers: {}\", containers);\r\n    Set<String> allocatedHosts = new HashSet<>();\r\n    for (Container c : containers) {\r\n        allocatedHosts.add(c.getNodeHttpAddress());\r\n    }\r\n    Assert.assertEquals(2, containers.size());\r\n    Assert.assertTrue(allocatedHosts.contains(\"h1:1234\"));\r\n    Assert.assertFalse(allocatedHosts.contains(\"h2:1234\"));\r\n    Assert.assertFalse(allocatedHosts.contains(\"h3:1234\"));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testSimpleRackLocalAllocation",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void testSimpleRackLocalAllocation() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newInstance(PRIORITY_NORMAL, \"*\", CAPABILITY_1GB, 1, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(PRIORITY_NORMAL, \"h1\", CAPABILITY_1GB, 1, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(PRIORITY_NORMAL, \"/r1\", CAPABILITY_1GB, 1, true, null, OPPORTUNISTIC_REQ));\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r2\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h4\", 1234), \"h4:1234\", \"/r2\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\");\r\n    Set<String> allocatedHosts = new HashSet<>();\r\n    for (Container c : containers) {\r\n        allocatedHosts.add(c.getNodeHttpAddress());\r\n    }\r\n    Assert.assertTrue(allocatedHosts.contains(\"h2:1234\"));\r\n    Assert.assertFalse(allocatedHosts.contains(\"h3:1234\"));\r\n    Assert.assertFalse(allocatedHosts.contains(\"h4:1234\"));\r\n    Assert.assertEquals(1, containers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testRoundRobinRackLocalAllocation",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testRoundRobinRackLocalAllocation() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newBuilder().allocationRequestId(1).priority(PRIORITY_NORMAL).resourceName(\"/r1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(1).priority(PRIORITY_NORMAL).resourceName(\"h1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(1).priority(PRIORITY_NORMAL).resourceName(ResourceRequest.ANY).capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(2).priority(PRIORITY_NORMAL).resourceName(\"/r1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(2).priority(PRIORITY_NORMAL).resourceName(\"h1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build(), ResourceRequest.newBuilder().allocationRequestId(2).priority(PRIORITY_NORMAL).resourceName(ResourceRequest.ANY).capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build());\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r2\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h5\", 1234), \"h5:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h4\", 1234), \"h4:1234\", \"/r2\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\");\r\n    Set<String> allocatedHosts = new HashSet<>();\r\n    for (Container c : containers) {\r\n        allocatedHosts.add(c.getNodeHttpAddress());\r\n    }\r\n    LOG.info(\"Containers: {}\", containers);\r\n    Assert.assertTrue(allocatedHosts.contains(\"h2:1234\"));\r\n    Assert.assertTrue(allocatedHosts.contains(\"h5:1234\"));\r\n    Assert.assertFalse(allocatedHosts.contains(\"h3:1234\"));\r\n    Assert.assertFalse(allocatedHosts.contains(\"h4:1234\"));\r\n    Assert.assertEquals(2, containers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testRoundRobinRackLocalAllocationSameSchedKey",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void testRoundRobinRackLocalAllocationSameSchedKey() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newInstance(PRIORITY_NORMAL, \"*\", CAPABILITY_1GB, 2, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(PRIORITY_NORMAL, \"h1\", CAPABILITY_1GB, 2, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(PRIORITY_NORMAL, \"/r1\", CAPABILITY_1GB, 2, true, null, OPPORTUNISTIC_REQ));\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r2\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h5\", 1234), \"h5:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h4\", 1234), \"h4:1234\", \"/r2\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\");\r\n    Set<String> allocatedHosts = new HashSet<>();\r\n    for (Container c : containers) {\r\n        allocatedHosts.add(c.getNodeHttpAddress());\r\n    }\r\n    LOG.info(\"Containers: {}\", containers);\r\n    Assert.assertTrue(allocatedHosts.contains(\"h2:1234\"));\r\n    Assert.assertTrue(allocatedHosts.contains(\"h5:1234\"));\r\n    Assert.assertFalse(allocatedHosts.contains(\"h3:1234\"));\r\n    Assert.assertFalse(allocatedHosts.contains(\"h4:1234\"));\r\n    Assert.assertEquals(2, containers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testOffSwitchAllocationWhenNoNodeOrRack",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testOffSwitchAllocationWhenNoNodeOrRack() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newInstance(PRIORITY_NORMAL, \"*\", CAPABILITY_1GB, 2, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(PRIORITY_NORMAL, \"h6\", CAPABILITY_1GB, 2, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(PRIORITY_NORMAL, \"/r3\", CAPABILITY_1GB, 2, true, null, OPPORTUNISTIC_REQ));\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r2\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h5\", 1234), \"h5:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h4\", 1234), \"h4:1234\", \"/r2\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\");\r\n    LOG.info(\"Containers: {}\", containers);\r\n    Assert.assertEquals(2, containers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testLotsOfContainersRackLocalAllocationSameSchedKey",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testLotsOfContainersRackLocalAllocationSameSchedKey() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newInstance(PRIORITY_NORMAL, \"*\", CAPABILITY_1GB, 1000, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(PRIORITY_NORMAL, \"h1\", CAPABILITY_1GB, 1000, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(PRIORITY_NORMAL, \"/r1\", CAPABILITY_1GB, 1000, true, null, OPPORTUNISTIC_REQ));\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r2\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h5\", 1234), \"h5:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h4\", 1234), \"h4:1234\", \"/r2\")));\r\n    List<Container> containers = new ArrayList<>();\r\n    for (int i = 0; i < 250; i++) {\r\n        containers.addAll(allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\"));\r\n    }\r\n    Assert.assertEquals(1000, containers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testLotsOfContainersRackLocalAllocation",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testLotsOfContainersRackLocalAllocation() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    List<ResourceRequest> reqs = new ArrayList<>();\r\n    for (int i = 0; i < 100; i++) {\r\n        reqs.add(ResourceRequest.newBuilder().allocationRequestId(i + 1).priority(PRIORITY_NORMAL).resourceName(\"*\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build());\r\n        reqs.add(ResourceRequest.newBuilder().allocationRequestId(i + 1).priority(PRIORITY_NORMAL).resourceName(\"h1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build());\r\n        reqs.add(ResourceRequest.newBuilder().allocationRequestId(i + 1).priority(PRIORITY_NORMAL).resourceName(\"/r1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build());\r\n    }\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r2\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h5\", 1234), \"h5:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h4\", 1234), \"h4:1234\", \"/r2\")));\r\n    List<Container> containers = new ArrayList<>();\r\n    for (int i = 0; i < 25; i++) {\r\n        containers.addAll(allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\"));\r\n    }\r\n    Assert.assertEquals(100, containers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testAllocationWithNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testAllocationWithNodeLabels() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newInstance(PRIORITY_NORMAL, \"*\", CAPABILITY_1GB, 1, true, \"label\", OPPORTUNISTIC_REQ));\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h1\", 1234), \"h1:1234\", \"/r1\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\");\r\n    Assert.assertEquals(0, containers.size());\r\n    Assert.assertEquals(1, oppCntxt.getOutstandingOpReqs().size());\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h1\", 1234), \"h1:1234\", \"/r1\", \"label\")));\r\n    containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\");\r\n    Assert.assertEquals(1, containers.size());\r\n    Assert.assertEquals(0, oppCntxt.getOutstandingOpReqs().size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testMaxAllocationsPerAMHeartbeat",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testMaxAllocationsPerAMHeartbeat() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    allocator.setMaxAllocationsPerAMHeartbeat(2);\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newInstance(PRIORITY_NORMAL, \"*\", CAPABILITY_1GB, 3, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(PRIORITY_NORMAL, \"h6\", CAPABILITY_1GB, 3, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(PRIORITY_NORMAL, \"/r3\", CAPABILITY_1GB, 3, true, null, OPPORTUNISTIC_REQ));\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r2\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h5\", 1234), \"h5:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h4\", 1234), \"h4:1234\", \"/r2\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"user1\");\r\n    LOG.info(\"Containers: {}\", containers);\r\n    Assert.assertEquals(2, containers.size());\r\n    containers = allocator.allocateContainers(blacklistRequest, new ArrayList<>(), appAttId, oppCntxt, 1L, \"user1\");\r\n    LOG.info(\"Containers: {}\", containers);\r\n    Assert.assertEquals(1, containers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testMaxAllocationsPerAMHeartbeatDifferentSchedKey",
  "errType" : null,
  "containingMethodsNum" : 15,
  "sourceCodeText" : "void testMaxAllocationsPerAMHeartbeatDifferentSchedKey() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    allocator.setMaxAllocationsPerAMHeartbeat(2);\r\n    final ExecutionTypeRequest oppRequest = ExecutionTypeRequest.newInstance(ExecutionType.OPPORTUNISTIC, true);\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newInstance(Priority.newInstance(1), \"*\", CAPABILITY_1GB, 1, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(Priority.newInstance(2), \"h6\", CAPABILITY_1GB, 2, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(Priority.newInstance(3), \"/r3\", CAPABILITY_1GB, 2, true, null, OPPORTUNISTIC_REQ));\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r2\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h5\", 1234), \"h5:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h4\", 1234), \"h4:1234\", \"/r2\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"user1\");\r\n    LOG.info(\"Containers: {}\", containers);\r\n    Assert.assertEquals(2, containers.size());\r\n    containers = allocator.allocateContainers(blacklistRequest, new ArrayList<>(), appAttId, oppCntxt, 1L, \"user1\");\r\n    LOG.info(\"Containers: {}\", containers);\r\n    Assert.assertEquals(2, containers.size());\r\n    containers = allocator.allocateContainers(blacklistRequest, new ArrayList<>(), appAttId, oppCntxt, 1L, \"user1\");\r\n    LOG.info(\"Containers: {}\", containers);\r\n    Assert.assertEquals(1, containers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testMaxAllocationsPerAMHeartbeatWithNoLimit",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testMaxAllocationsPerAMHeartbeatWithNoLimit() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    allocator.setMaxAllocationsPerAMHeartbeat(-1);\r\n    List<ResourceRequest> reqs = new ArrayList<>();\r\n    for (int i = 0; i < 20; i++) {\r\n        reqs.add(ResourceRequest.newBuilder().allocationRequestId(i + 1).priority(PRIORITY_NORMAL).resourceName(\"h1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build());\r\n    }\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h1\", 1234), \"h1:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"user1\");\r\n    Assert.assertEquals(20, containers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testMaxAllocationsPerAMHeartbeatWithHighLimit",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void testMaxAllocationsPerAMHeartbeatWithHighLimit() throws Exception\n{\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(new ArrayList<>(), new ArrayList<>());\r\n    allocator.setMaxAllocationsPerAMHeartbeat(100);\r\n    List<ResourceRequest> reqs = new ArrayList<>();\r\n    for (int i = 0; i < 20; i++) {\r\n        reqs.add(ResourceRequest.newBuilder().allocationRequestId(i + 1).priority(PRIORITY_NORMAL).resourceName(\"h1\").capability(CAPABILITY_1GB).relaxLocality(true).executionType(ExecutionType.OPPORTUNISTIC).build());\r\n    }\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h1\", 1234), \"h1:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"user1\");\r\n    Assert.assertEquals(20, containers.size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\scheduler",
  "methodName" : "testAllocationLatencyMetrics",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "void testAllocationLatencyMetrics() throws Exception\n{\r\n    oppCntxt = spy(oppCntxt);\r\n    OpportunisticSchedulerMetrics metrics = mock(OpportunisticSchedulerMetrics.class);\r\n    when(oppCntxt.getOppSchedulerMetrics()).thenReturn(metrics);\r\n    ResourceBlacklistRequest blacklistRequest = ResourceBlacklistRequest.newInstance(Collections.emptyList(), Collections.emptyList());\r\n    List<ResourceRequest> reqs = Arrays.asList(ResourceRequest.newInstance(PRIORITY_NORMAL, \"*\", CAPABILITY_1GB, 2, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(PRIORITY_NORMAL, \"h6\", CAPABILITY_1GB, 2, true, null, OPPORTUNISTIC_REQ), ResourceRequest.newInstance(PRIORITY_NORMAL, \"/r3\", CAPABILITY_1GB, 2, true, null, OPPORTUNISTIC_REQ));\r\n    ApplicationAttemptId appAttId = ApplicationAttemptId.newInstance(ApplicationId.newInstance(0L, 1), 1);\r\n    oppCntxt.updateNodeList(Arrays.asList(RemoteNode.newInstance(NodeId.newInstance(\"h3\", 1234), \"h3:1234\", \"/r2\"), RemoteNode.newInstance(NodeId.newInstance(\"h2\", 1234), \"h2:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h5\", 1234), \"h5:1234\", \"/r1\"), RemoteNode.newInstance(NodeId.newInstance(\"h4\", 1234), \"h4:1234\", \"/r2\")));\r\n    List<Container> containers = allocator.allocateContainers(blacklistRequest, reqs, appAttId, oppCntxt, 1L, \"luser\");\r\n    LOG.info(\"Containers: {}\", containers);\r\n    Assert.assertEquals(2, containers.size());\r\n    verify(metrics, times(2)).addAllocateOLatencyEntry(anyLong());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    setPolicy(new HashBasedRouterPolicy());\r\n    setMockActiveSubclusters(numSubclusters);\r\n    FederationPoliciesTestUtil.initializePolicyContext(getPolicy(), getPolicyInfo(), getActiveSubclusters());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\router",
  "methodName" : "testHashSpreadUniformlyAmongSubclusters",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void testHashSpreadUniformlyAmongSubclusters() throws YarnException\n{\r\n    SubClusterId chosen;\r\n    Map<SubClusterId, AtomicLong> counter = new HashMap<>();\r\n    for (SubClusterId id : getActiveSubclusters().keySet()) {\r\n        counter.put(id, new AtomicLong(0));\r\n    }\r\n    long jobPerSub = 100;\r\n    ApplicationSubmissionContext applicationSubmissionContext = mock(ApplicationSubmissionContext.class);\r\n    for (int i = 0; i < jobPerSub * numSubclusters; i++) {\r\n        when(applicationSubmissionContext.getQueue()).thenReturn(\"queue\" + i);\r\n        chosen = ((FederationRouterPolicy) getPolicy()).getHomeSubcluster(applicationSubmissionContext, null);\r\n        counter.get(chosen).addAndGet(1);\r\n    }\r\n    for (AtomicLong a : counter.values()) {\r\n        Assert.assertEquals(a.get(), jobPerSub);\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "setUp",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setUp() throws Exception\n{\r\n    setPolicy(new HomeAMRMProxyPolicy());\r\n    setPolicyInfo(mock(WeightedPolicyInfo.class));\r\n    for (int i = 0; i < NUM_SUBCLUSTERS; i++) {\r\n        SubClusterIdInfo sc = new SubClusterIdInfo(\"sc\" + i);\r\n        SubClusterInfo sci = mock(SubClusterInfo.class);\r\n        when(sci.getState()).thenReturn(SubClusterState.SC_RUNNING);\r\n        when(sci.getSubClusterId()).thenReturn(sc.toId());\r\n        getActiveSubclusters().put(sc.toId(), sci);\r\n    }\r\n    initializePolicyContext(getPolicy(), mock(WeightedPolicyInfo.class), getActiveSubclusters(), HOME_SC_NAME);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testSplitAllocateRequest",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testSplitAllocateRequest() throws YarnException\n{\r\n    String[] hosts = new String[] { \"host0\", \"host1\", \"host2\", \"host3\" };\r\n    List<ResourceRequest> resourceRequests = createResourceRequests(hosts, 2 * 1024, 2, 1, 3, null, false);\r\n    HomeAMRMProxyPolicy federationPolicy = (HomeAMRMProxyPolicy) getPolicy();\r\n    Map<SubClusterId, List<ResourceRequest>> response = federationPolicy.splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n    assertEquals(1, response.size());\r\n    assertNotNull(response.get(HOME_SC_ID));\r\n    assertEquals(9, response.get(HOME_SC_ID).size());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\amrmproxy",
  "methodName" : "testHomeSubclusterNotActive",
  "errType" : [ "FederationPolicyException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void testHomeSubclusterNotActive() throws YarnException\n{\r\n    initializePolicyContext(getPolicy(), mock(WeightedPolicyInfo.class), getActiveSubclusters(), \"badsc\");\r\n    try {\r\n        String[] hosts = new String[] { \"host0\", \"host1\", \"host2\", \"host3\" };\r\n        List<ResourceRequest> resourceRequests = createResourceRequests(hosts, 2 * 1024, 2, 1, 3, null, false);\r\n        HomeAMRMProxyPolicy federationPolicy = (HomeAMRMProxyPolicy) getPolicy();\r\n        federationPolicy.splitResourceRequests(resourceRequests, new HashSet<SubClusterId>());\r\n        fail(\"It should fail when the home subcluster is not active\");\r\n    } catch (FederationPolicyException e) {\r\n        GenericTestUtils.assertExceptionContains(\"is not active\", e);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getRegisterSyncObj",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Object getRegisterSyncObj()\n{\r\n    return registerSyncObj;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getAllocateSyncObj",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Object getAllocateSyncObj()\n{\r\n    return allocateSyncObj;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setShouldReRegisterNext",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setShouldReRegisterNext()\n{\r\n    shouldReRegisterNext = true;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setRunningMode",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setRunningMode(boolean mode)\n{\r\n    this.isRunning = mode;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getAppIdentifier",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "ApplicationAttemptId getAppIdentifier() throws IOException\n{\r\n    AMRMTokenIdentifier result = null;\r\n    UserGroupInformation remoteUgi = UserGroupInformation.getCurrentUser();\r\n    Set<TokenIdentifier> tokenIds = remoteUgi.getTokenIdentifiers();\r\n    for (TokenIdentifier tokenId : tokenIds) {\r\n        if (tokenId instanceof AMRMTokenIdentifier) {\r\n            result = (AMRMTokenIdentifier) tokenId;\r\n            break;\r\n        }\r\n    }\r\n    return result != null ? result.getApplicationAttemptId() : ApplicationAttemptId.newInstance(ApplicationId.newInstance(0, 0), 0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "validateRunning",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void validateRunning() throws ConnectException\n{\r\n    if (!isRunning) {\r\n        throw new ConnectException(\"RM is stopped\");\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "registerApplicationMaster",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "RegisterApplicationMasterResponse registerApplicationMaster(RegisterApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    ApplicationAttemptId attemptId = getAppIdentifier();\r\n    LOG.info(\"Registering application attempt: \" + attemptId);\r\n    ApplicationId appId = attemptId.getApplicationId();\r\n    List<Container> containersFromPreviousAttempt = null;\r\n    synchronized (applicationContainerIdMap) {\r\n        if (applicationContainerIdMap.containsKey(appId)) {\r\n            if (keepContainerOnUams.contains(appId)) {\r\n                containersFromPreviousAttempt = new ArrayList<>();\r\n                for (ContainerId containerId : applicationContainerIdMap.get(appId)) {\r\n                    containersFromPreviousAttempt.add(Container.newInstance(containerId, null, null, null, null, null));\r\n                }\r\n            } else if (!shouldReRegisterNext) {\r\n                throw new InvalidApplicationMasterRequestException(AMRMClientUtils.APP_ALREADY_REGISTERED_MESSAGE);\r\n            }\r\n        } else {\r\n            applicationContainerIdMap.put(appId, new ArrayList<ContainerId>());\r\n        }\r\n    }\r\n    shouldReRegisterNext = false;\r\n    synchronized (registerSyncObj) {\r\n        registerSyncObj.notifyAll();\r\n        if (request.getRpcPort() > 1000) {\r\n            LOG.info(\"Register call in RM start waiting\");\r\n            try {\r\n                registerSyncObj.wait();\r\n                LOG.info(\"Register call in RM wait finished\");\r\n            } catch (InterruptedException e) {\r\n                LOG.info(\"Register call in RM wait interrupted\", e);\r\n            }\r\n        }\r\n    }\r\n    return RegisterApplicationMasterResponse.newInstance(null, null, null, null, containersFromPreviousAttempt, request.getHost(), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "finishApplicationMaster",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "FinishApplicationMasterResponse finishApplicationMaster(FinishApplicationMasterRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    ApplicationAttemptId attemptId = getAppIdentifier();\r\n    LOG.info(\"Finishing application attempt: \" + attemptId);\r\n    ApplicationId appId = attemptId.getApplicationId();\r\n    if (shouldReRegisterNext) {\r\n        String message = \"AM is not registered, should re-register.\";\r\n        LOG.warn(message);\r\n        throw new ApplicationMasterNotRegisteredException(message);\r\n    }\r\n    synchronized (applicationContainerIdMap) {\r\n        Assert.assertTrue(\"The application id is NOT registered: \" + attemptId, applicationContainerIdMap.containsKey(appId));\r\n        applicationContainerIdMap.remove(appId);\r\n    }\r\n    return FinishApplicationMasterResponse.newInstance(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getApplicationId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationId getApplicationId(int id)\n{\r\n    return ApplicationId.newInstance(12345, id);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getApplicationAttemptId",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ApplicationAttemptId getApplicationAttemptId(int id)\n{\r\n    return ApplicationAttemptId.newInstance(getApplicationId(id), 1);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "allocate",
  "errType" : [ "InterruptedException" ],
  "containingMethodsNum" : 36,
  "sourceCodeText" : "AllocateResponse allocate(AllocateRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    ApplicationAttemptId attemptId = getAppIdentifier();\r\n    LOG.info(\"Allocate from application attempt: \" + attemptId);\r\n    ApplicationId appId = attemptId.getApplicationId();\r\n    if (shouldReRegisterNext) {\r\n        String message = \"AM is not registered, should re-register.\";\r\n        LOG.warn(message);\r\n        throw new ApplicationMasterNotRegisteredException(message);\r\n    }\r\n    synchronized (allocateSyncObj) {\r\n        if (shouldWaitForSyncNextAllocate) {\r\n            shouldWaitForSyncNextAllocate = false;\r\n            LOG.info(\"Allocate call in RM start waiting\");\r\n            try {\r\n                allocateSyncObj.wait();\r\n                LOG.info(\"Allocate call in RM wait finished\");\r\n            } catch (InterruptedException e) {\r\n                LOG.info(\"Allocate call in RM wait interrupted\", e);\r\n            }\r\n        }\r\n    }\r\n    ArrayList<Container> containerList = new ArrayList<Container>();\r\n    if (request.getAskList() != null) {\r\n        for (ResourceRequest rr : request.getAskList()) {\r\n            for (int i = 0; i < rr.getNumContainers(); i++) {\r\n                ContainerId containerId = ContainerId.newInstance(getApplicationAttemptId(1), containerIndex.incrementAndGet());\r\n                Container container = Records.newRecord(Container.class);\r\n                container.setId(containerId);\r\n                container.setPriority(rr.getPriority());\r\n                NodeId nodeId = NodeId.newInstance(!Strings.isNullOrEmpty(rr.getResourceName()) ? rr.getResourceName() : \"dummy\", 1000);\r\n                container.setNodeId(nodeId);\r\n                container.setResource(rr.getCapability());\r\n                containerList.add(container);\r\n                synchronized (applicationContainerIdMap) {\r\n                    Assert.assertTrue(\"The application id is Not registered before allocate(): \" + appId, applicationContainerIdMap.containsKey(appId));\r\n                    List<ContainerId> ids = applicationContainerIdMap.get(appId);\r\n                    ids.add(containerId);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    List<ContainerStatus> completedList = new ArrayList<>();\r\n    if (request.getReleaseList() != null && request.getReleaseList().size() > 0) {\r\n        LOG.info(\"Releasing containers: \" + request.getReleaseList().size());\r\n        synchronized (applicationContainerIdMap) {\r\n            Assert.assertTrue(\"The application id is not registered before allocate(): \" + appId, applicationContainerIdMap.containsKey(appId));\r\n            List<ContainerId> ids = applicationContainerIdMap.get(appId);\r\n            for (ContainerId id : request.getReleaseList()) {\r\n                boolean found = false;\r\n                for (ContainerId c : ids) {\r\n                    if (c.equals(id)) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                Assert.assertTrue(\"ContainerId \" + id + \" being released is not valid for application: \" + attemptId, found);\r\n                ids.remove(id);\r\n                completedList.add(ContainerStatus.newInstance(id, ContainerState.COMPLETE, \"\", 0));\r\n            }\r\n        }\r\n    }\r\n    LOG.info(\"Allocating containers: \" + containerList.size() + \" for application attempt: \" + attemptId);\r\n    Token newAMRMToken = Token.newInstance(new byte[0], Integer.toString(this.rmId), new byte[0], \"\");\r\n    return AllocateResponse.newInstance(0, completedList, containerList, new ArrayList<NodeReport>(), null, AMCommand.AM_RESYNC, 1, null, new ArrayList<NMToken>(), newAMRMToken, new ArrayList<UpdatedContainer>());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "setWaitForSyncNextAllocate",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void setWaitForSyncNextAllocate(boolean wait)\n{\r\n    synchronized (allocateSyncObj) {\r\n        shouldWaitForSyncNextAllocate = wait;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getApplicationReport",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "GetApplicationReportResponse getApplicationReport(GetApplicationReportRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    GetApplicationReportResponse response = Records.newRecord(GetApplicationReportResponse.class);\r\n    ApplicationReport report = Records.newRecord(ApplicationReport.class);\r\n    report.setYarnApplicationState(YarnApplicationState.ACCEPTED);\r\n    report.setApplicationId(request.getApplicationId());\r\n    report.setCurrentApplicationAttemptId(ApplicationAttemptId.newInstance(request.getApplicationId(), 1));\r\n    report.setAMRMToken(Token.newInstance(new byte[0], \"\", new byte[0], \"\"));\r\n    response.setApplicationReport(report);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getApplicationAttemptReport",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "GetApplicationAttemptReportResponse getApplicationAttemptReport(GetApplicationAttemptReportRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    GetApplicationAttemptReportResponse response = Records.newRecord(GetApplicationAttemptReportResponse.class);\r\n    ApplicationAttemptReport report = Records.newRecord(ApplicationAttemptReport.class);\r\n    report.setApplicationAttemptId(request.getApplicationAttemptId());\r\n    report.setYarnApplicationAttemptState(YarnApplicationAttemptState.LAUNCHED);\r\n    response.setApplicationAttemptReport(report);\r\n    return response;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getNewApplication",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNewApplicationResponse getNewApplication(GetNewApplicationRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return GetNewApplicationResponse.newInstance(ApplicationId.newInstance(subClusterId, applicationCounter.incrementAndGet()), null, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "submitApplication",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "SubmitApplicationResponse submitApplication(SubmitApplicationRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    ApplicationId appId = null;\r\n    if (request.getApplicationSubmissionContext() != null) {\r\n        appId = request.getApplicationSubmissionContext().getApplicationId();\r\n    }\r\n    LOG.info(\"Application submitted: \" + appId);\r\n    applicationMap.add(appId);\r\n    if (request.getApplicationSubmissionContext().getUnmanagedAM() || request.getApplicationSubmissionContext().getKeepContainersAcrossApplicationAttempts()) {\r\n        keepContainerOnUams.add(appId);\r\n    }\r\n    return SubmitApplicationResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "forceKillApplication",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "KillApplicationResponse forceKillApplication(KillApplicationRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    ApplicationId appId = null;\r\n    if (request.getApplicationId() != null) {\r\n        appId = request.getApplicationId();\r\n        if (!applicationMap.remove(appId)) {\r\n            throw new ApplicationNotFoundException(\"Trying to kill an absent application: \" + appId);\r\n        }\r\n    }\r\n    LOG.info(\"Force killing application: \" + appId);\r\n    return KillApplicationResponse.newInstance(true);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getClusterMetrics",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "GetClusterMetricsResponse getClusterMetrics(GetClusterMetricsRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    YarnClusterMetrics clusterMetrics = YarnClusterMetrics.newInstance(1);\r\n    return GetClusterMetricsResponse.newInstance(clusterMetrics);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getApplications",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationsResponse getApplications(GetApplicationsRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return GetApplicationsResponse.newInstance(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getClusterNodes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetClusterNodesResponse getClusterNodes(GetClusterNodesRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return GetClusterNodesResponse.newInstance(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getQueueInfo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetQueueInfoResponse getQueueInfo(GetQueueInfoRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return GetQueueInfoResponse.newInstance(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getQueueUserAcls",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetQueueUserAclsInfoResponse getQueueUserAcls(GetQueueUserAclsInfoRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return GetQueueUserAclsInfoResponse.newInstance(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetDelegationTokenResponse getDelegationToken(GetDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return GetDelegationTokenResponse.newInstance(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "renewDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RenewDelegationTokenResponse renewDelegationToken(RenewDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return RenewDelegationTokenResponse.newInstance(0);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "cancelDelegationToken",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CancelDelegationTokenResponse cancelDelegationToken(CancelDelegationTokenRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return CancelDelegationTokenResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "moveApplicationAcrossQueues",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "MoveApplicationAcrossQueuesResponse moveApplicationAcrossQueues(MoveApplicationAcrossQueuesRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return MoveApplicationAcrossQueuesResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getApplicationAttempts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetApplicationAttemptsResponse getApplicationAttempts(GetApplicationAttemptsRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return GetApplicationAttemptsResponse.newInstance(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getContainerReport",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetContainerReportResponse getContainerReport(GetContainerReportRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return GetContainerReportResponse.newInstance(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getContainers",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "GetContainersResponse getContainers(GetContainersRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    ApplicationId appId = request.getApplicationAttemptId().getApplicationId();\r\n    List<ContainerReport> containers = new ArrayList<>();\r\n    synchronized (applicationContainerIdMap) {\r\n        Assert.assertTrue(\"The application id is NOT registered: \" + appId, applicationContainerIdMap.containsKey(appId));\r\n        List<ContainerId> ids = applicationContainerIdMap.get(appId);\r\n        for (ContainerId c : ids) {\r\n            containers.add(ContainerReport.newInstance(c, null, null, null, 0, 0, null, null, 0, null, null));\r\n        }\r\n    }\r\n    return GetContainersResponse.newInstance(containers);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "submitReservation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationSubmissionResponse submitReservation(ReservationSubmissionRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return ReservationSubmissionResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "listReservations",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationListResponse listReservations(ReservationListRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return ReservationListResponse.newInstance(new ArrayList<ReservationAllocationState>());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "updateReservation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationUpdateResponse updateReservation(ReservationUpdateRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return ReservationUpdateResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "deleteReservation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReservationDeleteResponse deleteReservation(ReservationDeleteRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return ReservationDeleteResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getNodeToLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNodesToLabelsResponse getNodeToLabels(GetNodesToLabelsRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return GetNodesToLabelsResponse.newInstance(new HashMap<NodeId, Set<String>>());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetClusterNodeLabelsResponse getClusterNodeLabels(GetClusterNodeLabelsRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return GetClusterNodeLabelsResponse.newInstance(new ArrayList<NodeLabel>());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getLabelsToNodes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetLabelsToNodesResponse getLabelsToNodes(GetLabelsToNodesRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return GetLabelsToNodesResponse.newInstance(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getNewReservation",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "GetNewReservationResponse getNewReservation(GetNewReservationRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return GetNewReservationResponse.newInstance(ReservationId.newInstance(0, 0));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "failApplicationAttempt",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "FailApplicationAttemptResponse failApplicationAttempt(FailApplicationAttemptRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return FailApplicationAttemptResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "updateApplicationPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateApplicationPriorityResponse updateApplicationPriority(UpdateApplicationPriorityRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return UpdateApplicationPriorityResponse.newInstance(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "signalToContainer",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "SignalContainerResponse signalToContainer(SignalContainerRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return new SignalContainerResponsePBImpl();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "updateApplicationTimeouts",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateApplicationTimeoutsResponse updateApplicationTimeouts(UpdateApplicationTimeoutsRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return UpdateApplicationTimeoutsResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "refreshQueues",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshQueuesResponse refreshQueues(RefreshQueuesRequest request) throws StandbyException, YarnException, IOException\n{\r\n    validateRunning();\r\n    return RefreshQueuesResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "refreshNodes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshNodesResponse refreshNodes(RefreshNodesRequest request) throws StandbyException, YarnException, IOException\n{\r\n    validateRunning();\r\n    return RefreshNodesResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "refreshSuperUserGroupsConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshSuperUserGroupsConfigurationResponse refreshSuperUserGroupsConfiguration(RefreshSuperUserGroupsConfigurationRequest request) throws StandbyException, YarnException, IOException\n{\r\n    validateRunning();\r\n    return RefreshSuperUserGroupsConfigurationResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "refreshUserToGroupsMappings",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshUserToGroupsMappingsResponse refreshUserToGroupsMappings(RefreshUserToGroupsMappingsRequest request) throws StandbyException, YarnException, IOException\n{\r\n    validateRunning();\r\n    return RefreshUserToGroupsMappingsResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "refreshAdminAcls",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshAdminAclsResponse refreshAdminAcls(RefreshAdminAclsRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return RefreshAdminAclsResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "refreshServiceAcls",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshServiceAclsResponse refreshServiceAcls(RefreshServiceAclsRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return RefreshServiceAclsResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "updateNodeResource",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "UpdateNodeResourceResponse updateNodeResource(UpdateNodeResourceRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return UpdateNodeResourceResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "refreshNodesResources",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshNodesResourcesResponse refreshNodesResources(RefreshNodesResourcesRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return RefreshNodesResourcesResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "addToClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "AddToClusterNodeLabelsResponse addToClusterNodeLabels(AddToClusterNodeLabelsRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return AddToClusterNodeLabelsResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "removeFromClusterNodeLabels",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RemoveFromClusterNodeLabelsResponse removeFromClusterNodeLabels(RemoveFromClusterNodeLabelsRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return RemoveFromClusterNodeLabelsResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "replaceLabelsOnNode",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ReplaceLabelsOnNodeResponse replaceLabelsOnNode(ReplaceLabelsOnNodeRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return ReplaceLabelsOnNodeResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "checkForDecommissioningNodes",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "CheckForDecommissioningNodesResponse checkForDecommissioningNodes(CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return CheckForDecommissioningNodesResponse.newInstance(null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "refreshClusterMaxPriority",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "RefreshClusterMaxPriorityResponse refreshClusterMaxPriority(RefreshClusterMaxPriorityRequest request) throws YarnException, IOException\n{\r\n    validateRunning();\r\n    return RefreshClusterMaxPriorityResponse.newInstance();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getGroupsForUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String[] getGroupsForUser(String user) throws IOException\n{\r\n    validateRunning();\r\n    return new String[0];\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getResourceProfiles",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GetAllResourceProfilesResponse getResourceProfiles(GetAllResourceProfilesRequest request) throws YarnException, IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getResourceProfile",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GetResourceProfileResponse getResourceProfile(GetResourceProfileRequest request) throws YarnException, IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getResourceTypeInfo",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GetAllResourceTypeInfoResponse getResourceTypeInfo(GetAllResourceTypeInfoRequest request) throws YarnException, IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getAttributesToNodes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GetAttributesToNodesResponse getAttributesToNodes(GetAttributesToNodesRequest request) throws YarnException, IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getClusterNodeAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GetClusterNodeAttributesResponse getClusterNodeAttributes(GetClusterNodeAttributesRequest request) throws YarnException, IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "getNodesToAttributes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "GetNodesToAttributesResponse getNodesToAttributes(GetNodesToAttributesRequest request) throws YarnException, IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server",
  "methodName" : "mapAttributesToNodes",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "NodesToAttributesMappingResponse mapAttributesToNodes(NodesToAttributesMappingRequest request) throws YarnException, IOException\n{\r\n    return null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "createResourceRequests",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "List<ResourceRequest> createResourceRequests(String[] hosts, int memory, int vCores, int priority, int containers, String labelExpression, boolean relaxLocality) throws YarnException\n{\r\n    List<ResourceRequest> reqs = new ArrayList<ResourceRequest>();\r\n    for (String host : hosts) {\r\n        ResourceRequest hostReq = createResourceRequest(host, memory, vCores, priority, containers, labelExpression, relaxLocality);\r\n        reqs.add(hostReq);\r\n        ResourceRequest rackReq = createResourceRequest(\"/default-rack\", memory, vCores, priority, containers, labelExpression, relaxLocality);\r\n        reqs.add(rackReq);\r\n    }\r\n    ResourceRequest offRackReq = createResourceRequest(ResourceRequest.ANY, memory, vCores, priority, containers, labelExpression, relaxLocality);\r\n    reqs.add(offRackReq);\r\n    return reqs;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "createResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "ResourceRequest createResourceRequest(String resource, int memory, int vCores, int priority, int containers, boolean relaxLocality) throws YarnException\n{\r\n    return createResourceRequest(resource, memory, vCores, priority, containers, null, relaxLocality);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "createResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "ResourceRequest createResourceRequest(long id, String resource, int memory, int vCores, int priority, int containers, String labelExpression, boolean relaxLocality) throws YarnException\n{\r\n    ResourceRequest out = createResourceRequest(resource, memory, vCores, priority, containers, labelExpression, relaxLocality);\r\n    out.setAllocationRequestId(id);\r\n    return out;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "createResourceRequest",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "ResourceRequest createResourceRequest(String resource, int memory, int vCores, int priority, int containers, String labelExpression, boolean relaxLocality) throws YarnException\n{\r\n    ResourceRequest req = Records.newRecord(ResourceRequest.class);\r\n    req.setResourceName(resource);\r\n    req.setNumContainers(containers);\r\n    Priority pri = Records.newRecord(Priority.class);\r\n    pri.setPriority(priority);\r\n    req.setPriority(pri);\r\n    Resource capability = Records.newRecord(Resource.class);\r\n    capability.setMemorySize(memory);\r\n    capability.setVirtualCores(vCores);\r\n    req.setCapability(capability);\r\n    if (labelExpression != null) {\r\n        req.setNodeLabelExpression(labelExpression);\r\n    }\r\n    req.setRelaxLocality(relaxLocality);\r\n    return req;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "initializePolicyContext",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void initializePolicyContext(FederationPolicyInitializationContext fpc, ConfigurableFederationPolicy policy, WeightedPolicyInfo policyInfo, Map<SubClusterId, SubClusterInfo> activeSubclusters, Configuration conf) throws YarnException\n{\r\n    ByteBuffer buf = policyInfo.toByteBuffer();\r\n    fpc.setSubClusterPolicyConfiguration(SubClusterPolicyConfiguration.newInstance(\"queue1\", policy.getClass().getCanonicalName(), buf));\r\n    FederationStateStoreFacade facade = FederationStateStoreFacade.getInstance();\r\n    FederationStateStore fss = mock(FederationStateStore.class);\r\n    if (activeSubclusters == null) {\r\n        activeSubclusters = new HashMap<SubClusterId, SubClusterInfo>();\r\n    }\r\n    GetSubClustersInfoResponse response = GetSubClustersInfoResponse.newInstance(new ArrayList<SubClusterInfo>(activeSubclusters.values()));\r\n    when(fss.getSubClusters(any())).thenReturn(response);\r\n    facade.reinitialize(fss, conf);\r\n    fpc.setFederationStateStoreFacade(facade);\r\n    policy.reinitialize(fpc);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "initializePolicyContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void initializePolicyContext(ConfigurableFederationPolicy policy, WeightedPolicyInfo policyInfo, Map<SubClusterId, SubClusterInfo> activeSubclusters) throws YarnException\n{\r\n    initializePolicyContext(policy, policyInfo, activeSubclusters, \"homesubcluster\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "initializePolicyContext",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void initializePolicyContext(ConfigurableFederationPolicy policy, WeightedPolicyInfo policyInfo, Map<SubClusterId, SubClusterInfo> activeSubclusters, String subclusterId) throws YarnException\n{\r\n    FederationPolicyInitializationContext context = new FederationPolicyInitializationContext(null, initResolver(), initFacade(), SubClusterId.newInstance(subclusterId));\r\n    initializePolicyContext(context, policy, policyInfo, activeSubclusters, new Configuration());\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "initResolver",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "SubClusterResolver initResolver()\n{\r\n    YarnConfiguration conf = new YarnConfiguration();\r\n    SubClusterResolver resolver = new DefaultSubClusterResolverImpl();\r\n    URL url = Thread.currentThread().getContextClassLoader().getResource(\"nodes\");\r\n    if (url == null) {\r\n        throw new RuntimeException(\"Could not find 'nodes' dummy file in classpath\");\r\n    }\r\n    File file = new File(url.getPath());\r\n    conf.set(YarnConfiguration.FEDERATION_MACHINE_LIST, file.getPath());\r\n    resolver.setConf(conf);\r\n    resolver.load();\r\n    return resolver;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "initFacade",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "FederationStateStoreFacade initFacade(List<SubClusterInfo> subClusterInfos, SubClusterPolicyConfiguration policyConfiguration) throws YarnException\n{\r\n    FederationStateStoreFacade goodFacade = FederationStateStoreFacade.getInstance();\r\n    FederationStateStore fss = mock(FederationStateStore.class);\r\n    GetSubClustersInfoResponse response = GetSubClustersInfoResponse.newInstance(subClusterInfos);\r\n    when(fss.getSubClusters(any())).thenReturn(response);\r\n    List<SubClusterPolicyConfiguration> configurations = new ArrayList<>();\r\n    configurations.add(policyConfiguration);\r\n    GetSubClusterPoliciesConfigurationsResponse policiesResponse = GetSubClusterPoliciesConfigurationsResponse.newInstance(configurations);\r\n    when(fss.getPoliciesConfigurations(any())).thenReturn(policiesResponse);\r\n    GetSubClusterPolicyConfigurationResponse policyResponse = GetSubClusterPolicyConfigurationResponse.newInstance(policyConfiguration);\r\n    when(fss.getPolicyConfiguration(any())).thenReturn(policyResponse);\r\n    goodFacade.reinitialize(fss, new Configuration());\r\n    return goodFacade;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\utils",
  "methodName" : "initFacade",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "FederationStateStoreFacade initFacade() throws YarnException\n{\r\n    return initFacade(new ArrayList<>(), mock(SubClusterPolicyConfiguration.class));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "setup",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setup()\n{\r\n    wfp = new PriorityBroadcastPolicyManager();\r\n    wfp.setQueue(\"queue1\");\r\n    SubClusterId sc1 = SubClusterId.newInstance(\"sc1\");\r\n    SubClusterId sc2 = SubClusterId.newInstance(\"sc2\");\r\n    policyInfo = new WeightedPolicyInfo();\r\n    Map<SubClusterIdInfo, Float> routerWeights = new HashMap<>();\r\n    routerWeights.put(new SubClusterIdInfo(sc1), 0.2f);\r\n    routerWeights.put(new SubClusterIdInfo(sc2), 0.8f);\r\n    policyInfo.setRouterPolicyWeights(routerWeights);\r\n    ((PriorityBroadcastPolicyManager) wfp).setWeightedPolicyInfo(policyInfo);\r\n    expectedPolicyManager = PriorityBroadcastPolicyManager.class;\r\n    expectedAMRMProxyPolicy = BroadcastAMRMProxyPolicy.class;\r\n    expectedRouterPolicy = PriorityRouterPolicy.class;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-yarn-project\\hadoop-yarn\\hadoop-yarn-server\\hadoop-yarn-server-common\\src\\test\\java\\org\\apache\\hadoop\\yarn\\server\\federation\\policies\\manager",
  "methodName" : "testPolicyInfoSetCorrectly",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void testPolicyInfoSetCorrectly() throws Exception\n{\r\n    serializeAndDeserializePolicyManager(wfp, expectedPolicyManager, expectedAMRMProxyPolicy, expectedRouterPolicy);\r\n    Assert.assertEquals(((PriorityBroadcastPolicyManager) wfp).getWeightedPolicyInfo(), policyInfo);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
} ]