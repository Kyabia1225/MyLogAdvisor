[ {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "deprecateEnv",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void deprecateEnv(String varName, Configuration conf, String propName, String confFile)\n{\r\n    String value = System.getenv(varName);\r\n    if (value == null) {\r\n        return;\r\n    }\r\n    LOG.warn(\"Environment variable {} is deprecated and overriding\" + \" property {}, please set the property in {} instead.\", varName, propName, confFile);\r\n    conf.set(propName, value, \"environment variable \" + varName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "start",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void start() throws IOException\n{\r\n    httpServer.start();\r\n    DefaultMetricsSystem.initialize(processName);\r\n    final JvmMetrics jm = JvmMetrics.initSingleton(processName, sessionId);\r\n    jm.setPauseMonitor(pauseMonitor);\r\n    pauseMonitor.start();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "isRunning",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isRunning()\n{\r\n    return httpServer.isAlive();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "join",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void join() throws InterruptedException\n{\r\n    httpServer.join();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "stop",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void stop() throws Exception\n{\r\n    httpServer.stop();\r\n    pauseMonitor.stop();\r\n    JvmMetrics.shutdownSingleton();\r\n    DefaultMetricsSystem.shutdown();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKMSUrl",
  "errType" : [ "MalformedURLException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "URL getKMSUrl()\n{\r\n    InetSocketAddress addr = httpServer.getConnectorAddress(0);\r\n    if (null == addr) {\r\n        return null;\r\n    }\r\n    try {\r\n        return new URL(scheme, addr.getHostName(), addr.getPort(), SERVLET_PATH);\r\n    } catch (MalformedURLException ex) {\r\n        throw new RuntimeException(\"It should never happen: \" + ex.getMessage(), ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "main",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void main(String[] args) throws Exception\n{\r\n    KMSConfiguration.initLogging();\r\n    StringUtils.startupShutdownMessage(KMSWebServer.class, args, LOG);\r\n    Configuration conf = KMSConfiguration.getKMSConf();\r\n    Configuration sslConf = SSLFactory.readSSLConfiguration(conf, SSLFactory.Mode.SERVER);\r\n    KMSWebServer kmsWebServer = new KMSWebServer(conf, sslConf);\r\n    kmsWebServer.start();\r\n    kmsWebServer.join();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "rollNewVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "KeyVersion rollNewVersion(String name) throws NoSuchAlgorithmException, IOException\n{\r\n    KeyVersion keyVersion = super.rollNewVersion(name);\r\n    getExtension().drain(name);\r\n    return keyVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "rollNewVersion",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "KeyVersion rollNewVersion(String name, byte[] material) throws IOException\n{\r\n    KeyVersion keyVersion = super.rollNewVersion(name, material);\r\n    getExtension().drain(name);\r\n    return keyVersion;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "invalidateCache",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void invalidateCache(String name) throws IOException\n{\r\n    super.invalidateCache(name);\r\n    getExtension().drain(name);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "assertAccess",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertAccess(KMSACLs.Type aclType, UserGroupInformation ugi, KMSOp operation) throws AccessControlException\n{\r\n    KMSWebApp.getACLs().assertAccess(aclType, ugi, operation, null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "assertAccess",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertAccess(KMSACLs.Type aclType, UserGroupInformation ugi, KMSOp operation, String key) throws AccessControlException\n{\r\n    KMSWebApp.getACLs().assertAccess(aclType, ugi, operation, key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "assertAccess",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void assertAccess(EnumSet<KMSACLs.Type> aclTypes, UserGroupInformation ugi, KMSOp operation, String key) throws AccessControlException\n{\r\n    KMSWebApp.getACLs().assertAccess(aclTypes, ugi, operation, key);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "removeKeyMaterial",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "KeyProvider.KeyVersion removeKeyMaterial(KeyProvider.KeyVersion keyVersion)\n{\r\n    return new KMSClientProvider.KMSKeyVersion(keyVersion.getName(), keyVersion.getVersionName(), null);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKeyURI",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "URI getKeyURI(String domain, String keyName)\n{\r\n    return UriBuilder.fromPath(\"{a}/{b}/{c}\").build(domain, KMSRESTConstants.KEY_RESOURCE, keyName);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "createKey",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 30,
  "sourceCodeText" : "Response createKey(Map jsonKey) throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering createKey Method.\");\r\n        KMSWebApp.getAdminCallsMeter().mark();\r\n        UserGroupInformation user = HttpUserGroupInformation.get();\r\n        final String name = (String) jsonKey.get(KMSRESTConstants.NAME_FIELD);\r\n        checkNotEmpty(name, KMSRESTConstants.NAME_FIELD);\r\n        assertAccess(KMSACLs.Type.CREATE, user, KMSOp.CREATE_KEY, name);\r\n        String cipher = (String) jsonKey.get(KMSRESTConstants.CIPHER_FIELD);\r\n        final String material;\r\n        material = (String) jsonKey.get(KMSRESTConstants.MATERIAL_FIELD);\r\n        int length = (jsonKey.containsKey(KMSRESTConstants.LENGTH_FIELD)) ? (Integer) jsonKey.get(KMSRESTConstants.LENGTH_FIELD) : 0;\r\n        String description = (String) jsonKey.get(KMSRESTConstants.DESCRIPTION_FIELD);\r\n        LOG.debug(\"Creating key with name {}, cipher being used{}, \" + \"length of key {}, description of key {}\", name, cipher, length, description);\r\n        Map<String, String> attributes = (Map<String, String>) jsonKey.get(KMSRESTConstants.ATTRIBUTES_FIELD);\r\n        if (material != null) {\r\n            assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user, KMSOp.CREATE_KEY, name);\r\n        }\r\n        final KeyProvider.Options options = new KeyProvider.Options(KMSWebApp.getConfiguration());\r\n        if (cipher != null) {\r\n            options.setCipher(cipher);\r\n        }\r\n        if (length != 0) {\r\n            options.setBitLength(length);\r\n        }\r\n        options.setDescription(description);\r\n        options.setAttributes(attributes);\r\n        KeyProvider.KeyVersion keyVersion = user.doAs(new PrivilegedExceptionAction<KeyVersion>() {\r\n\r\n            @Override\r\n            public KeyVersion run() throws Exception {\r\n                KeyProvider.KeyVersion keyVersion = (material != null) ? provider.createKey(name, Base64.decodeBase64(material), options) : provider.createKey(name, options);\r\n                provider.flush();\r\n                return keyVersion;\r\n            }\r\n        });\r\n        kmsAudit.ok(user, KMSOp.CREATE_KEY, name, \"UserProvidedMaterial:\" + (material != null) + \" Description:\" + description);\r\n        if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\r\n            keyVersion = removeKeyMaterial(keyVersion);\r\n        }\r\n        Map json = KMSUtil.toJSON(keyVersion);\r\n        String requestURL = KMSMDCFilter.getURL();\r\n        int idx = requestURL.lastIndexOf(KMSRESTConstants.KEYS_RESOURCE);\r\n        requestURL = requestURL.substring(0, idx);\r\n        LOG.trace(\"Exiting createKey Method.\");\r\n        return Response.created(getKeyURI(KMSRESTConstants.SERVICE_VERSION, name)).type(MediaType.APPLICATION_JSON).header(\"Location\", getKeyURI(requestURL, name)).entity(json).build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in createKey.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "deleteKey",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Response deleteKey(@PathParam(\"name\") final String name) throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering deleteKey method.\");\r\n        KMSWebApp.getAdminCallsMeter().mark();\r\n        UserGroupInformation user = HttpUserGroupInformation.get();\r\n        assertAccess(KMSACLs.Type.DELETE, user, KMSOp.DELETE_KEY, name);\r\n        checkNotEmpty(name, \"name\");\r\n        LOG.debug(\"Deleting key with name {}.\", name);\r\n        user.doAs(new PrivilegedExceptionAction<Void>() {\r\n\r\n            @Override\r\n            public Void run() throws Exception {\r\n                provider.deleteKey(name);\r\n                provider.flush();\r\n                return null;\r\n            }\r\n        });\r\n        kmsAudit.ok(user, KMSOp.DELETE_KEY, name, \"\");\r\n        LOG.trace(\"Exiting deleteKey method.\");\r\n        return Response.ok().build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in deleteKey.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "rolloverKey",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 16,
  "sourceCodeText" : "Response rolloverKey(@PathParam(\"name\") final String name, Map jsonMaterial) throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering rolloverKey Method.\");\r\n        KMSWebApp.getAdminCallsMeter().mark();\r\n        UserGroupInformation user = HttpUserGroupInformation.get();\r\n        assertAccess(KMSACLs.Type.ROLLOVER, user, KMSOp.ROLL_NEW_VERSION, name);\r\n        checkNotEmpty(name, \"name\");\r\n        LOG.debug(\"Rolling key with name {}.\", name);\r\n        final String material = (String) jsonMaterial.get(KMSRESTConstants.MATERIAL_FIELD);\r\n        if (material != null) {\r\n            assertAccess(KMSACLs.Type.SET_KEY_MATERIAL, user, KMSOp.ROLL_NEW_VERSION, name);\r\n        }\r\n        KeyProvider.KeyVersion keyVersion = user.doAs(new PrivilegedExceptionAction<KeyVersion>() {\r\n\r\n            @Override\r\n            public KeyVersion run() throws Exception {\r\n                KeyVersion keyVersion = (material != null) ? provider.rollNewVersion(name, Base64.decodeBase64(material)) : provider.rollNewVersion(name);\r\n                provider.flush();\r\n                return keyVersion;\r\n            }\r\n        });\r\n        kmsAudit.ok(user, KMSOp.ROLL_NEW_VERSION, name, \"UserProvidedMaterial:\" + (material != null) + \" NewVersion:\" + keyVersion.getVersionName());\r\n        if (!KMSWebApp.getACLs().hasAccess(KMSACLs.Type.GET, user)) {\r\n            keyVersion = removeKeyMaterial(keyVersion);\r\n        }\r\n        Map json = KMSUtil.toJSON(keyVersion);\r\n        LOG.trace(\"Exiting rolloverKey Method.\");\r\n        return Response.ok().type(MediaType.APPLICATION_JSON).entity(json).build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in rolloverKey.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "invalidateCache",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Response invalidateCache(@PathParam(\"name\") final String name) throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering invalidateCache Method.\");\r\n        KMSWebApp.getAdminCallsMeter().mark();\r\n        checkNotEmpty(name, \"name\");\r\n        UserGroupInformation user = HttpUserGroupInformation.get();\r\n        assertAccess(INVALIDATE_CACHE_TYPES, user, KMSOp.INVALIDATE_CACHE, name);\r\n        LOG.debug(\"Invalidating cache with key name {}.\", name);\r\n        user.doAs(new PrivilegedExceptionAction<Void>() {\r\n\r\n            @Override\r\n            public Void run() throws Exception {\r\n                provider.invalidateCache(name);\r\n                provider.flush();\r\n                return null;\r\n            }\r\n        });\r\n        kmsAudit.ok(user, KMSOp.INVALIDATE_CACHE, name, \"\");\r\n        LOG.trace(\"Exiting invalidateCache for key name {}.\", name);\r\n        return Response.ok().build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in invalidateCache for key name {}.\", name, e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKeysMetadata",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 11,
  "sourceCodeText" : "Response getKeysMetadata(@QueryParam(KMSRESTConstants.KEY) List<String> keyNamesList) throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering getKeysMetadata method.\");\r\n        KMSWebApp.getAdminCallsMeter().mark();\r\n        UserGroupInformation user = HttpUserGroupInformation.get();\r\n        final String[] keyNames = keyNamesList.toArray(new String[keyNamesList.size()]);\r\n        assertAccess(KMSACLs.Type.GET_METADATA, user, KMSOp.GET_KEYS_METADATA);\r\n        KeyProvider.Metadata[] keysMeta = user.doAs(new PrivilegedExceptionAction<KeyProvider.Metadata[]>() {\r\n\r\n            @Override\r\n            public KeyProvider.Metadata[] run() throws Exception {\r\n                return provider.getKeysMetadata(keyNames);\r\n            }\r\n        });\r\n        Object json = KMSServerJSONUtils.toJSON(keyNames, keysMeta);\r\n        kmsAudit.ok(user, KMSOp.GET_KEYS_METADATA, \"\");\r\n        LOG.trace(\"Exiting getKeysMetadata method.\");\r\n        return Response.ok().type(MediaType.APPLICATION_JSON).entity(json).build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in getKeysmetadata.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKeyNames",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Response getKeyNames() throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering getKeyNames method.\");\r\n        KMSWebApp.getAdminCallsMeter().mark();\r\n        UserGroupInformation user = HttpUserGroupInformation.get();\r\n        assertAccess(KMSACLs.Type.GET_KEYS, user, KMSOp.GET_KEYS);\r\n        List<String> json = user.doAs(new PrivilegedExceptionAction<List<String>>() {\r\n\r\n            @Override\r\n            public List<String> run() throws Exception {\r\n                return provider.getKeys();\r\n            }\r\n        });\r\n        kmsAudit.ok(user, KMSOp.GET_KEYS, \"\");\r\n        LOG.trace(\"Exiting getKeyNames method.\");\r\n        return Response.ok().type(MediaType.APPLICATION_JSON).entity(json).build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in getkeyNames.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKey",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 5,
  "sourceCodeText" : "Response getKey(@PathParam(\"name\") String name) throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering getKey method.\");\r\n        LOG.debug(\"Getting key information for key with name {}.\", name);\r\n        LOG.trace(\"Exiting getKey method.\");\r\n        return getMetadata(name);\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in getKey.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getMetadata",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "Response getMetadata(@PathParam(\"name\") final String name) throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering getMetadata method.\");\r\n        UserGroupInformation user = HttpUserGroupInformation.get();\r\n        checkNotEmpty(name, \"name\");\r\n        KMSWebApp.getAdminCallsMeter().mark();\r\n        assertAccess(KMSACLs.Type.GET_METADATA, user, KMSOp.GET_METADATA, name);\r\n        LOG.debug(\"Getting metadata for key with name {}.\", name);\r\n        KeyProvider.Metadata metadata = user.doAs(new PrivilegedExceptionAction<KeyProvider.Metadata>() {\r\n\r\n            @Override\r\n            public KeyProvider.Metadata run() throws Exception {\r\n                return provider.getMetadata(name);\r\n            }\r\n        });\r\n        Object json = KMSServerJSONUtils.toJSON(name, metadata);\r\n        kmsAudit.ok(user, KMSOp.GET_METADATA, name, \"\");\r\n        LOG.trace(\"Exiting getMetadata method.\");\r\n        return Response.ok().type(MediaType.APPLICATION_JSON).entity(json).build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in getMetadata.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getCurrentVersion",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "Response getCurrentVersion(@PathParam(\"name\") final String name) throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering getCurrentVersion method.\");\r\n        UserGroupInformation user = HttpUserGroupInformation.get();\r\n        checkNotEmpty(name, \"name\");\r\n        KMSWebApp.getKeyCallsMeter().mark();\r\n        assertAccess(KMSACLs.Type.GET, user, KMSOp.GET_CURRENT_KEY, name);\r\n        LOG.debug(\"Getting key version for key with name {}.\", name);\r\n        KeyVersion keyVersion = user.doAs(new PrivilegedExceptionAction<KeyVersion>() {\r\n\r\n            @Override\r\n            public KeyVersion run() throws Exception {\r\n                return provider.getCurrentKey(name);\r\n            }\r\n        });\r\n        Object json = KMSUtil.toJSON(keyVersion);\r\n        kmsAudit.ok(user, KMSOp.GET_CURRENT_KEY, name, \"\");\r\n        LOG.trace(\"Exiting getCurrentVersion method.\");\r\n        return Response.ok().type(MediaType.APPLICATION_JSON).entity(json).build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in getCurrentVersion.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKeyVersion",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "Response getKeyVersion(@PathParam(\"versionName\") final String versionName) throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering getKeyVersion method.\");\r\n        UserGroupInformation user = HttpUserGroupInformation.get();\r\n        checkNotEmpty(versionName, \"versionName\");\r\n        KMSWebApp.getKeyCallsMeter().mark();\r\n        assertAccess(KMSACLs.Type.GET, user, KMSOp.GET_KEY_VERSION);\r\n        LOG.debug(\"Getting key with version name {}.\", versionName);\r\n        KeyVersion keyVersion = user.doAs(new PrivilegedExceptionAction<KeyVersion>() {\r\n\r\n            @Override\r\n            public KeyVersion run() throws Exception {\r\n                return provider.getKeyVersion(versionName);\r\n            }\r\n        });\r\n        if (keyVersion != null) {\r\n            kmsAudit.ok(user, KMSOp.GET_KEY_VERSION, keyVersion.getName(), \"\");\r\n        }\r\n        Object json = KMSUtil.toJSON(keyVersion);\r\n        LOG.trace(\"Exiting getKeyVersion method.\");\r\n        return Response.ok().type(MediaType.APPLICATION_JSON).entity(json).build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in getKeyVersion.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "generateEncryptedKeys",
  "errType" : [ "Exception", "Exception" ],
  "containingMethodsNum" : 23,
  "sourceCodeText" : "Response generateEncryptedKeys(@PathParam(\"name\") final String name, @QueryParam(KMSRESTConstants.EEK_OP) String edekOp, @DefaultValue(\"1\") @QueryParam(KMSRESTConstants.EEK_NUM_KEYS) final int numKeys) throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering generateEncryptedKeys method.\");\r\n        UserGroupInformation user = HttpUserGroupInformation.get();\r\n        checkNotEmpty(name, \"name\");\r\n        checkNotNull(edekOp, \"eekOp\");\r\n        LOG.debug(\"Generating encrypted key with name {},\" + \" the edek Operation is {}.\", name, edekOp);\r\n        Object retJSON;\r\n        if (edekOp.equals(KMSRESTConstants.EEK_GENERATE)) {\r\n            LOG.debug(\"edek Operation is Generate.\");\r\n            assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.GENERATE_EEK, name);\r\n            final List<EncryptedKeyVersion> retEdeks = new LinkedList<EncryptedKeyVersion>();\r\n            try {\r\n                user.doAs(new PrivilegedExceptionAction<Void>() {\r\n\r\n                    @Override\r\n                    public Void run() throws Exception {\r\n                        LOG.debug(\"Generated Encrypted key for {} number of \" + \"keys.\", numKeys);\r\n                        for (int i = 0; i < numKeys; i++) {\r\n                            retEdeks.add(provider.generateEncryptedKey(name));\r\n                        }\r\n                        return null;\r\n                    }\r\n                });\r\n            } catch (Exception e) {\r\n                LOG.error(\"Exception in generateEncryptedKeys:\", e);\r\n                throw new IOException(e);\r\n            }\r\n            kmsAudit.ok(user, KMSOp.GENERATE_EEK, name, \"\");\r\n            retJSON = new ArrayList();\r\n            for (EncryptedKeyVersion edek : retEdeks) {\r\n                ((ArrayList) retJSON).add(KMSUtil.toJSON(edek));\r\n            }\r\n        } else {\r\n            StringBuilder error;\r\n            error = new StringBuilder(\"IllegalArgumentException Wrong \");\r\n            error.append(KMSRESTConstants.EEK_OP);\r\n            error.append(\" value, it must be \");\r\n            error.append(KMSRESTConstants.EEK_GENERATE);\r\n            error.append(\" or \");\r\n            error.append(KMSRESTConstants.EEK_DECRYPT);\r\n            LOG.error(error.toString());\r\n            throw new IllegalArgumentException(error.toString());\r\n        }\r\n        KMSWebApp.getGenerateEEKCallsMeter().mark();\r\n        LOG.trace(\"Exiting generateEncryptedKeys method.\");\r\n        return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON).build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in generateEncryptedKeys.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 2,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "reencryptEncryptedKeys",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 21,
  "sourceCodeText" : "Response reencryptEncryptedKeys(@PathParam(\"name\") final String name, final List<Map> jsonPayload) throws Exception\n{\r\n    LOG.trace(\"Entering reencryptEncryptedKeys method.\");\r\n    try {\r\n        final StopWatch sw = new StopWatch().start();\r\n        checkNotEmpty(name, \"name\");\r\n        checkNotNull(jsonPayload, \"jsonPayload\");\r\n        final UserGroupInformation user = HttpUserGroupInformation.get();\r\n        KMSWebApp.getReencryptEEKBatchCallsMeter().mark();\r\n        if (jsonPayload.size() > MAX_NUM_PER_BATCH) {\r\n            LOG.warn(\"Payload size {} too big for reencryptEncryptedKeys from\" + \" user {}.\", jsonPayload.size(), user);\r\n        }\r\n        assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.REENCRYPT_EEK_BATCH, name);\r\n        LOG.debug(\"Batch reencrypting {} Encrypted Keys for key name {}\", jsonPayload.size(), name);\r\n        final List<EncryptedKeyVersion> ekvs = KMSUtil.parseJSONEncKeyVersions(name, jsonPayload);\r\n        Preconditions.checkArgument(ekvs.size() == jsonPayload.size(), \"EncryptedKey size mismatch after parsing from json\");\r\n        for (EncryptedKeyVersion ekv : ekvs) {\r\n            Preconditions.checkArgument(name.equals(ekv.getEncryptionKeyName()), \"All EncryptedKeys must be under the given key name \" + name);\r\n        }\r\n        user.doAs(new PrivilegedExceptionAction<Void>() {\r\n\r\n            @Override\r\n            public Void run() throws Exception {\r\n                provider.reencryptEncryptedKeys(ekvs);\r\n                return null;\r\n            }\r\n        });\r\n        List retJSON = new ArrayList<>(ekvs.size());\r\n        for (EncryptedKeyVersion ekv : ekvs) {\r\n            retJSON.add(KMSUtil.toJSON(ekv));\r\n        }\r\n        kmsAudit.ok(user, KMSOp.REENCRYPT_EEK_BATCH, name, \"reencrypted \" + ekvs.size() + \" keys\");\r\n        LOG.info(\"reencryptEncryptedKeys {} keys for key {} took {}\", jsonPayload.size(), name, sw.stop());\r\n        LOG.trace(\"Exiting reencryptEncryptedKeys method.\");\r\n        return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON).build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in reencryptEncryptedKeys.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "handleEncryptedKeyOp",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 34,
  "sourceCodeText" : "Response handleEncryptedKeyOp(@PathParam(\"versionName\") final String versionName, @QueryParam(KMSRESTConstants.EEK_OP) String eekOp, Map jsonPayload) throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering decryptEncryptedKey method.\");\r\n        UserGroupInformation user = HttpUserGroupInformation.get();\r\n        checkNotEmpty(versionName, \"versionName\");\r\n        checkNotNull(eekOp, \"eekOp\");\r\n        LOG.debug(\"Decrypting key for {}, the edek Operation is {}.\", versionName, eekOp);\r\n        final String keyName = (String) jsonPayload.get(KMSRESTConstants.NAME_FIELD);\r\n        String ivStr = (String) jsonPayload.get(KMSRESTConstants.IV_FIELD);\r\n        String encMaterialStr = (String) jsonPayload.get(KMSRESTConstants.MATERIAL_FIELD);\r\n        checkNotNull(ivStr, KMSRESTConstants.IV_FIELD);\r\n        final byte[] iv = Base64.decodeBase64(ivStr);\r\n        checkNotNull(encMaterialStr, KMSRESTConstants.MATERIAL_FIELD);\r\n        final byte[] encMaterial = Base64.decodeBase64(encMaterialStr);\r\n        Object retJSON;\r\n        if (eekOp.equals(KMSRESTConstants.EEK_DECRYPT)) {\r\n            KMSWebApp.getDecryptEEKCallsMeter().mark();\r\n            assertAccess(KMSACLs.Type.DECRYPT_EEK, user, KMSOp.DECRYPT_EEK, keyName);\r\n            KeyProvider.KeyVersion retKeyVersion = user.doAs(new PrivilegedExceptionAction<KeyVersion>() {\r\n\r\n                @Override\r\n                public KeyVersion run() throws Exception {\r\n                    return provider.decryptEncryptedKey(new KMSClientProvider.KMSEncryptedKeyVersion(keyName, versionName, iv, KeyProviderCryptoExtension.EEK, encMaterial));\r\n                }\r\n            });\r\n            retJSON = KMSUtil.toJSON(retKeyVersion);\r\n            kmsAudit.ok(user, KMSOp.DECRYPT_EEK, keyName, \"\");\r\n        } else if (eekOp.equals(KMSRESTConstants.EEK_REENCRYPT)) {\r\n            KMSWebApp.getReencryptEEKCallsMeter().mark();\r\n            assertAccess(KMSACLs.Type.GENERATE_EEK, user, KMSOp.REENCRYPT_EEK, keyName);\r\n            EncryptedKeyVersion retEncryptedKeyVersion = user.doAs(new PrivilegedExceptionAction<EncryptedKeyVersion>() {\r\n\r\n                @Override\r\n                public EncryptedKeyVersion run() throws Exception {\r\n                    return provider.reencryptEncryptedKey(new KMSClientProvider.KMSEncryptedKeyVersion(keyName, versionName, iv, KeyProviderCryptoExtension.EEK, encMaterial));\r\n                }\r\n            });\r\n            retJSON = KMSUtil.toJSON(retEncryptedKeyVersion);\r\n            kmsAudit.ok(user, KMSOp.REENCRYPT_EEK, keyName, \"\");\r\n        } else {\r\n            StringBuilder error;\r\n            error = new StringBuilder(\"IllegalArgumentException Wrong \");\r\n            error.append(KMSRESTConstants.EEK_OP);\r\n            error.append(\" value, it must be \");\r\n            error.append(KMSRESTConstants.EEK_GENERATE);\r\n            error.append(\" or \");\r\n            error.append(KMSRESTConstants.EEK_DECRYPT);\r\n            LOG.error(error.toString());\r\n            throw new IllegalArgumentException(error.toString());\r\n        }\r\n        LOG.trace(\"Exiting handleEncryptedKeyOp method.\");\r\n        return Response.ok().type(MediaType.APPLICATION_JSON).entity(retJSON).build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in handleEncryptedKeyOp.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKeyVersions",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "Response getKeyVersions(@PathParam(\"name\") final String name) throws Exception\n{\r\n    try {\r\n        LOG.trace(\"Entering getKeyVersions method.\");\r\n        UserGroupInformation user = HttpUserGroupInformation.get();\r\n        checkNotEmpty(name, \"name\");\r\n        KMSWebApp.getKeyCallsMeter().mark();\r\n        assertAccess(KMSACLs.Type.GET, user, KMSOp.GET_KEY_VERSIONS, name);\r\n        LOG.debug(\"Getting key versions for key {}\", name);\r\n        List<KeyVersion> ret = user.doAs(new PrivilegedExceptionAction<List<KeyVersion>>() {\r\n\r\n            @Override\r\n            public List<KeyVersion> run() throws Exception {\r\n                return provider.getKeyVersions(name);\r\n            }\r\n        });\r\n        Object json = KMSServerJSONUtils.toJSON(ret);\r\n        kmsAudit.ok(user, KMSOp.GET_KEY_VERSIONS, name, \"\");\r\n        LOG.trace(\"Exiting getKeyVersions method.\");\r\n        return Response.ok().type(MediaType.APPLICATION_JSON).entity(json).build();\r\n    } catch (Exception e) {\r\n        LOG.debug(\"Exception in getKeyVersions.\", e);\r\n        throw e;\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getConfiguration",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "Properties getConfiguration(String configPrefix, FilterConfig filterConfig)\n{\r\n    Configuration conf = KMSWebApp.getConfiguration();\r\n    return getKMSConfiguration(conf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKMSConfiguration",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "Properties getKMSConfiguration(Configuration conf)\n{\r\n    Properties props = new Properties();\r\n    Map<String, String> propsWithPrefixMap = conf.getPropsWithPrefix(CONFIG_PREFIX);\r\n    for (Map.Entry<String, String> entry : propsWithPrefixMap.entrySet()) {\r\n        props.setProperty(entry.getKey(), entry.getValue());\r\n    }\r\n    String authType = props.getProperty(AUTH_TYPE);\r\n    if (authType.equals(PseudoAuthenticationHandler.TYPE)) {\r\n        props.setProperty(AUTH_TYPE, PseudoDelegationTokenAuthenticationHandler.class.getName());\r\n    } else if (authType.equals(KerberosAuthenticationHandler.TYPE)) {\r\n        props.setProperty(AUTH_TYPE, KerberosDelegationTokenAuthenticationHandler.class.getName());\r\n    }\r\n    props.setProperty(DelegationTokenAuthenticationHandler.TOKEN_KIND, KMSDelegationToken.TOKEN_KIND_STR);\r\n    return props;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getProxyuserConfiguration",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "Configuration getProxyuserConfiguration(FilterConfig filterConfig)\n{\r\n    Map<String, String> proxyuserConf = KMSWebApp.getConfiguration().getValByRegex(\"hadoop\\\\.kms\\\\.proxyuser\\\\.\");\r\n    Configuration conf = new Configuration(false);\r\n    for (Map.Entry<String, String> entry : proxyuserConf.entrySet()) {\r\n        conf.set(entry.getKey().substring(\"hadoop.kms.\".length()), entry.getValue());\r\n    }\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "doFilter",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void doFilter(ServletRequest request, ServletResponse response, FilterChain filterChain) throws IOException, ServletException\n{\r\n    KMSResponse kmsResponse = new KMSResponse(response);\r\n    super.doFilter(request, kmsResponse, filterChain);\r\n    if (kmsResponse.statusCode != HttpServletResponse.SC_OK && kmsResponse.statusCode != HttpServletResponse.SC_CREATED && kmsResponse.statusCode != HttpServletResponse.SC_UNAUTHORIZED) {\r\n        KMSWebApp.getInvalidCallsMeter().mark();\r\n    }\r\n    if (kmsResponse.statusCode == HttpServletResponse.SC_UNAUTHORIZED) {\r\n        KMSWebApp.getUnauthenticatedCallsMeter().mark();\r\n        String method = ((HttpServletRequest) request).getMethod();\r\n        StringBuffer requestURL = ((HttpServletRequest) request).getRequestURL();\r\n        String queryString = ((HttpServletRequest) request).getQueryString();\r\n        if (queryString != null) {\r\n            requestURL.append(\"?\").append(queryString);\r\n        }\r\n        if (!method.equals(\"OPTIONS\")) {\r\n            KMSWebApp.getKMSAudit().unauthenticated(request.getRemoteHost(), method, requestURL.toString(), kmsResponse.msg);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "cleanup",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void cleanup() throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "initialize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void initialize(Configuration conf) throws IOException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "logAuditEvent",
  "errType" : null,
  "containingMethodsNum" : 8,
  "sourceCodeText" : "void logAuditEvent(final OpStatus status, final AuditEvent event)\n{\r\n    if (!Strings.isNullOrEmpty(event.getUser()) && !Strings.isNullOrEmpty(event.getKeyName()) && (event.getOp() != null) && KMSAudit.AGGREGATE_OPS_WHITELIST.contains(event.getOp())) {\r\n        switch(status) {\r\n            case OK:\r\n                auditLog.info(\"{}[op={}, key={}, user={}, accessCount={}, interval={}ms] {}\", status, event.getOp(), event.getKeyName(), event.getUser(), event.getAccessCount().get(), (event.getEndTime() - event.getStartTime()), event.getExtraMsg());\r\n                break;\r\n            case UNAUTHORIZED:\r\n                logAuditSimpleFormat(status, event);\r\n                break;\r\n            default:\r\n                logAuditSimpleFormat(status, event);\r\n                break;\r\n        }\r\n    } else {\r\n        logAuditSimpleFormat(status, event);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "logAuditSimpleFormat",
  "errType" : null,
  "containingMethodsNum" : 10,
  "sourceCodeText" : "void logAuditSimpleFormat(final OpStatus status, final AuditEvent event)\n{\r\n    final List<String> kvs = new LinkedList<>();\r\n    if (event.getOp() != null) {\r\n        kvs.add(\"op=\" + event.getOp());\r\n    }\r\n    if (!Strings.isNullOrEmpty(event.getKeyName())) {\r\n        kvs.add(\"key=\" + event.getKeyName());\r\n    }\r\n    if (!Strings.isNullOrEmpty(event.getUser())) {\r\n        kvs.add(\"user=\" + event.getUser());\r\n    }\r\n    if (kvs.isEmpty()) {\r\n        auditLog.info(\"{} {}\", status, event.getExtraMsg());\r\n    } else {\r\n        final String join = Joiner.on(\", \").join(kvs);\r\n        auditLog.info(\"{}[{}] {}\", status, join, event.getExtraMsg());\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getUgi",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UserGroupInformation getUgi()\n{\r\n    Data data = DATA_TL.get();\r\n    return data != null ? data.ugi : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getMethod",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getMethod()\n{\r\n    Data data = DATA_TL.get();\r\n    return data != null ? data.method : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getURL",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getURL()\n{\r\n    Data data = DATA_TL.get();\r\n    return data != null ? data.url : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getRemoteClientAddress",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "String getRemoteClientAddress()\n{\r\n    Data data = DATA_TL.get();\r\n    return data != null ? data.remoteClientAddress : null;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "init",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void init(FilterConfig config) throws ServletException\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "doFilter",
  "errType" : null,
  "containingMethodsNum" : 9,
  "sourceCodeText" : "void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException\n{\r\n    try {\r\n        clearContext();\r\n        UserGroupInformation ugi = HttpUserGroupInformation.get();\r\n        HttpServletRequest httpServletRequest = (HttpServletRequest) request;\r\n        String method = httpServletRequest.getMethod();\r\n        StringBuffer requestURL = httpServletRequest.getRequestURL();\r\n        String queryString = httpServletRequest.getQueryString();\r\n        if (queryString != null) {\r\n            requestURL.append(\"?\").append(queryString);\r\n        }\r\n        setContext(ugi, method, requestURL.toString(), request.getRemoteAddr());\r\n        chain.doFilter(request, response);\r\n    } finally {\r\n        clearContext();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "destroy",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void destroy()\n{\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "setContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void setContext(UserGroupInformation ugi, String method, String requestURL, String remoteAddr)\n{\r\n    DATA_TL.set(new Data(ugi, method, requestURL, remoteAddr));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "clearContext",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void clearContext()\n{\r\n    DATA_TL.remove();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getConfiguration",
  "errType" : [ "MalformedURLException" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Configuration getConfiguration(boolean loadHadoopDefaults, String... resources)\n{\r\n    Configuration conf = new Configuration(loadHadoopDefaults);\r\n    String confDir = System.getProperty(KMS_CONFIG_DIR);\r\n    if (confDir != null) {\r\n        try {\r\n            Path confPath = new Path(confDir);\r\n            if (!confPath.isUriPathAbsolute()) {\r\n                throw new RuntimeException(\"System property '\" + KMS_CONFIG_DIR + \"' must be an absolute path: \" + confDir);\r\n            }\r\n            for (String resource : resources) {\r\n                conf.addResource(new URL(\"file://\" + new Path(confDir, resource).toUri()));\r\n            }\r\n        } catch (MalformedURLException ex) {\r\n            throw new RuntimeException(ex);\r\n        }\r\n    } else {\r\n        for (String resource : resources) {\r\n            conf.addResource(resource);\r\n        }\r\n    }\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKMSConf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Configuration getKMSConf()\n{\r\n    return getConfiguration(true, \"core-site.xml\", KMS_SITE_XML);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getACLsConf",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Configuration getACLsConf()\n{\r\n    return getConfiguration(false, KMS_ACLS_XML);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "isACLsFileNewer",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "boolean isACLsFileNewer(long time)\n{\r\n    boolean newer = false;\r\n    String confDir = System.getProperty(KMS_CONFIG_DIR);\r\n    if (confDir != null) {\r\n        Path confPath = new Path(confDir);\r\n        if (!confPath.isUriPathAbsolute()) {\r\n            throw new RuntimeException(\"System property '\" + KMS_CONFIG_DIR + \"' must be an absolute path: \" + confDir);\r\n        }\r\n        File f = new File(confDir, KMS_ACLS_XML);\r\n        LOG.trace(\"Checking file {}, modification time is {}, last reload time is\" + \" {}\", f.getPath(), f.lastModified(), time);\r\n        newer = f.lastModified() - time > 100;\r\n    }\r\n    return newer;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "initLogging",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void initLogging()\n{\r\n    String confDir = System.getProperty(KMS_CONFIG_DIR);\r\n    if (confDir == null) {\r\n        throw new RuntimeException(\"System property '\" + KMSConfiguration.KMS_CONFIG_DIR + \"' not defined\");\r\n    }\r\n    if (System.getProperty(\"log4j.configuration\") == null) {\r\n        System.setProperty(\"log4j.defaultInitOverride\", \"true\");\r\n        boolean fromClasspath = true;\r\n        File log4jConf = new File(confDir, LOG4J_PROPERTIES).getAbsoluteFile();\r\n        if (log4jConf.exists()) {\r\n            PropertyConfigurator.configureAndWatch(log4jConf.getPath(), 1000);\r\n            fromClasspath = false;\r\n        } else {\r\n            ClassLoader cl = Thread.currentThread().getContextClassLoader();\r\n            URL log4jUrl = cl.getResource(LOG4J_PROPERTIES);\r\n            if (log4jUrl != null) {\r\n                PropertyConfigurator.configure(log4jUrl);\r\n            }\r\n        }\r\n        LOG.debug(\"KMS log starting\");\r\n        if (fromClasspath) {\r\n            LOG.warn(\"Log4j configuration file '{}' not found\", LOG4J_PROPERTIES);\r\n            LOG.warn(\"Logging with INFO level to standard output\");\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "authorizeCreateKey",
  "errType" : null,
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void authorizeCreateKey(String keyName, Options options, UserGroupInformation ugi) throws IOException\n{\r\n    Preconditions.checkNotNull(ugi, \"UserGroupInformation cannot be null\");\r\n    Map<String, String> attributes = options.getAttributes();\r\n    String aclName = attributes.get(KEY_ACL_NAME);\r\n    boolean success = false;\r\n    if (Strings.isNullOrEmpty(aclName)) {\r\n        if (acls.isACLPresent(keyName, KeyOpType.MANAGEMENT)) {\r\n            options.setAttributes(ImmutableMap.<String, String>builder().putAll(attributes).put(KEY_ACL_NAME, keyName).build());\r\n            success = acls.hasAccessToKey(keyName, ugi, KeyOpType.MANAGEMENT) || acls.hasAccessToKey(keyName, ugi, KeyOpType.ALL);\r\n        } else {\r\n            success = false;\r\n        }\r\n    } else {\r\n        success = acls.isACLPresent(aclName, KeyOpType.MANAGEMENT) && (acls.hasAccessToKey(aclName, ugi, KeyOpType.MANAGEMENT) || acls.hasAccessToKey(aclName, ugi, KeyOpType.ALL));\r\n    }\r\n    if (!success)\r\n        throw new AuthorizationException(String.format(\"User [%s] is not\" + \" authorized to create key !!\", ugi.getShortUserName()));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "checkAccess",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void checkAccess(String aclName, UserGroupInformation ugi, KeyOpType opType) throws AuthorizationException\n{\r\n    Preconditions.checkNotNull(aclName, \"Key ACL name cannot be null\");\r\n    Preconditions.checkNotNull(ugi, \"UserGroupInformation cannot be null\");\r\n    if (acls.isACLPresent(aclName, opType) && (acls.hasAccessToKey(aclName, ugi, opType) || acls.hasAccessToKey(aclName, ugi, KeyOpType.ALL))) {\r\n        return;\r\n    } else {\r\n        throw new AuthorizationException(String.format(\"User [%s] is not\" + \" authorized to perform [%s] on key with ACL name [%s]!!\", ugi.getShortUserName(), opType, aclName));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "createKey",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "KeyVersion createKey(String name, Options options) throws NoSuchAlgorithmException, IOException\n{\r\n    writeLock.lock();\r\n    try {\r\n        authorizeCreateKey(name, options, getUser());\r\n        return provider.createKey(name, options);\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "createKey",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "KeyVersion createKey(String name, byte[] material, Options options) throws IOException\n{\r\n    writeLock.lock();\r\n    try {\r\n        authorizeCreateKey(name, options, getUser());\r\n        return provider.createKey(name, material, options);\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "rollNewVersion",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "KeyVersion rollNewVersion(String name) throws NoSuchAlgorithmException, IOException\n{\r\n    writeLock.lock();\r\n    try {\r\n        doAccessCheck(name, KeyOpType.MANAGEMENT);\r\n        return provider.rollNewVersion(name);\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "deleteKey",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void deleteKey(String name) throws IOException\n{\r\n    writeLock.lock();\r\n    try {\r\n        doAccessCheck(name, KeyOpType.MANAGEMENT);\r\n        provider.deleteKey(name);\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "rollNewVersion",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "KeyVersion rollNewVersion(String name, byte[] material) throws IOException\n{\r\n    writeLock.lock();\r\n    try {\r\n        doAccessCheck(name, KeyOpType.MANAGEMENT);\r\n        return provider.rollNewVersion(name, material);\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "invalidateCache",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void invalidateCache(String name) throws IOException\n{\r\n    writeLock.lock();\r\n    try {\r\n        doAccessCheck(name, KeyOpType.MANAGEMENT);\r\n        provider.invalidateCache(name);\r\n    } finally {\r\n        writeLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "warmUpEncryptedKeys",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void warmUpEncryptedKeys(String... names) throws IOException\n{\r\n    readLock.lock();\r\n    try {\r\n        for (String name : names) {\r\n            doAccessCheck(name, KeyOpType.GENERATE_EEK);\r\n        }\r\n        provider.warmUpEncryptedKeys(names);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "generateEncryptedKey",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "EncryptedKeyVersion generateEncryptedKey(String encryptionKeyName) throws IOException, GeneralSecurityException\n{\r\n    readLock.lock();\r\n    try {\r\n        doAccessCheck(encryptionKeyName, KeyOpType.GENERATE_EEK);\r\n        return provider.generateEncryptedKey(encryptionKeyName);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "verifyKeyVersionBelongsToKey",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void verifyKeyVersionBelongsToKey(EncryptedKeyVersion ekv) throws IOException\n{\r\n    String kn = ekv.getEncryptionKeyName();\r\n    String kvn = ekv.getEncryptionKeyVersionName();\r\n    KeyVersion kv = provider.getKeyVersion(kvn);\r\n    if (kv == null) {\r\n        throw new IllegalArgumentException(String.format(\"'%s' not found\", kvn));\r\n    }\r\n    if (!kv.getName().equals(kn)) {\r\n        throw new IllegalArgumentException(String.format(\"KeyVersion '%s' does not belong to the key '%s'\", kvn, kn));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "decryptEncryptedKey",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "KeyVersion decryptEncryptedKey(EncryptedKeyVersion encryptedKeyVersion) throws IOException, GeneralSecurityException\n{\r\n    readLock.lock();\r\n    try {\r\n        verifyKeyVersionBelongsToKey(encryptedKeyVersion);\r\n        doAccessCheck(encryptedKeyVersion.getEncryptionKeyName(), KeyOpType.DECRYPT_EEK);\r\n        return provider.decryptEncryptedKey(encryptedKeyVersion);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "reencryptEncryptedKey",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "EncryptedKeyVersion reencryptEncryptedKey(EncryptedKeyVersion ekv) throws IOException, GeneralSecurityException\n{\r\n    readLock.lock();\r\n    try {\r\n        verifyKeyVersionBelongsToKey(ekv);\r\n        doAccessCheck(ekv.getEncryptionKeyName(), KeyOpType.GENERATE_EEK);\r\n        return provider.reencryptEncryptedKey(ekv);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "reencryptEncryptedKeys",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void reencryptEncryptedKeys(List<EncryptedKeyVersion> ekvs) throws IOException, GeneralSecurityException\n{\r\n    if (ekvs.isEmpty()) {\r\n        return;\r\n    }\r\n    readLock.lock();\r\n    try {\r\n        for (EncryptedKeyVersion ekv : ekvs) {\r\n            verifyKeyVersionBelongsToKey(ekv);\r\n        }\r\n        final String keyName = ekvs.get(0).getEncryptionKeyName();\r\n        doAccessCheck(keyName, KeyOpType.GENERATE_EEK);\r\n        provider.reencryptEncryptedKeys(ekvs);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKeyVersion",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "KeyVersion getKeyVersion(String versionName) throws IOException\n{\r\n    readLock.lock();\r\n    try {\r\n        KeyVersion keyVersion = provider.getKeyVersion(versionName);\r\n        if (keyVersion != null) {\r\n            doAccessCheck(keyVersion.getName(), KeyOpType.READ);\r\n        }\r\n        return keyVersion;\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKeys",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List<String> getKeys() throws IOException\n{\r\n    return provider.getKeys();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKeyVersions",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "List<KeyVersion> getKeyVersions(String name) throws IOException\n{\r\n    readLock.lock();\r\n    try {\r\n        doAccessCheck(name, KeyOpType.READ);\r\n        return provider.getKeyVersions(name);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getMetadata",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Metadata getMetadata(String name) throws IOException\n{\r\n    readLock.lock();\r\n    try {\r\n        doAccessCheck(name, KeyOpType.READ);\r\n        return provider.getMetadata(name);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKeysMetadata",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Metadata[] getKeysMetadata(String... names) throws IOException\n{\r\n    readLock.lock();\r\n    try {\r\n        for (String name : names) {\r\n            doAccessCheck(name, KeyOpType.READ);\r\n        }\r\n        return provider.getKeysMetadata(names);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getCurrentKey",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "KeyVersion getCurrentKey(String name) throws IOException\n{\r\n    readLock.lock();\r\n    try {\r\n        doAccessCheck(name, KeyOpType.READ);\r\n        return provider.getCurrentKey(name);\r\n    } finally {\r\n        readLock.unlock();\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "flush",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void flush() throws IOException\n{\r\n    provider.flush();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "isTransient",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "boolean isTransient()\n{\r\n    return provider.isTransient();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "doAccessCheck",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void doAccessCheck(String keyName, KeyOpType opType) throws IOException\n{\r\n    Metadata metadata = provider.getMetadata(keyName);\r\n    if (metadata != null) {\r\n        String aclName = metadata.getAttributes().get(KEY_ACL_NAME);\r\n        checkAccess((aclName == null) ? keyName : aclName, getUser(), opType);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getUser",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "UserGroupInformation getUser() throws IOException\n{\r\n    return UserGroupInformation.getCurrentUser();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKeyProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "KeyProvider getKeyProvider()\n{\r\n    return this;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "toString",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "String toString()\n{\r\n    return this.getClass().getName() + \": \" + provider.toString();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "isReadable",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)\n{\r\n    return type.isAssignableFrom(Map.class) || type.isAssignableFrom(List.class);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "readFrom",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Object readFrom(Class<Object> type, Type genericType, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, String> httpHeaders, InputStream entityStream) throws IOException, WebApplicationException\n{\r\n    return MAPPER.readValue(entityStream, type);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "contextInitialized",
  "errType" : [ "Throwable" ],
  "containingMethodsNum" : 43,
  "sourceCodeText" : "void contextInitialized(ServletContextEvent sce)\n{\r\n    try {\r\n        kmsConf = KMSConfiguration.getKMSConf();\r\n        UserGroupInformation.setConfiguration(kmsConf);\r\n        LOG.info(\"-------------------------------------------------------------\");\r\n        LOG.info(\"  Java runtime version : {}\", System.getProperty(\"java.runtime.version\"));\r\n        LOG.info(\"  User: {}\", System.getProperty(\"user.name\"));\r\n        LOG.info(\"  KMS Hadoop Version: \" + VersionInfo.getVersion());\r\n        LOG.info(\"-------------------------------------------------------------\");\r\n        kmsAcls = new KMSACLs();\r\n        kmsAcls.startReloader();\r\n        metricRegistry = new MetricRegistry();\r\n        jmxReporter = JmxReporter.forRegistry(metricRegistry).build();\r\n        jmxReporter.start();\r\n        generateEEKCallsMeter = metricRegistry.register(GENERATE_EEK_METER, new Meter());\r\n        decryptEEKCallsMeter = metricRegistry.register(DECRYPT_EEK_METER, new Meter());\r\n        reencryptEEKCallsMeter = metricRegistry.register(REENCRYPT_EEK_METER, new Meter());\r\n        reencryptEEKBatchCallsMeter = metricRegistry.register(REENCRYPT_EEK_BATCH_METER, new Meter());\r\n        adminCallsMeter = metricRegistry.register(ADMIN_CALLS_METER, new Meter());\r\n        keyCallsMeter = metricRegistry.register(KEY_CALLS_METER, new Meter());\r\n        invalidCallsMeter = metricRegistry.register(INVALID_CALLS_METER, new Meter());\r\n        unauthorizedCallsMeter = metricRegistry.register(UNAUTHORIZED_CALLS_METER, new Meter());\r\n        unauthenticatedCallsMeter = metricRegistry.register(UNAUTHENTICATED_CALLS_METER, new Meter());\r\n        kmsAudit = new KMSAudit(kmsConf);\r\n        String providerString = kmsConf.get(KMSConfiguration.KEY_PROVIDER_URI);\r\n        if (providerString == null) {\r\n            throw new IllegalStateException(\"No KeyProvider has been defined\");\r\n        }\r\n        KeyProvider keyProvider = KeyProviderFactory.get(new URI(providerString), kmsConf);\r\n        Preconditions.checkNotNull(keyProvider, String.format(\"No\" + \" KeyProvider has been initialized, please\" + \" check whether %s '%s' is configured correctly in\" + \" kms-site.xml.\", KMSConfiguration.KEY_PROVIDER_URI, providerString));\r\n        if (kmsConf.getBoolean(KMSConfiguration.KEY_CACHE_ENABLE, KMSConfiguration.KEY_CACHE_ENABLE_DEFAULT)) {\r\n            long keyTimeOutMillis = kmsConf.getLong(KMSConfiguration.KEY_CACHE_TIMEOUT_KEY, KMSConfiguration.KEY_CACHE_TIMEOUT_DEFAULT);\r\n            long currKeyTimeOutMillis = kmsConf.getLong(KMSConfiguration.CURR_KEY_CACHE_TIMEOUT_KEY, KMSConfiguration.CURR_KEY_CACHE_TIMEOUT_DEFAULT);\r\n            keyProvider = new CachingKeyProvider(keyProvider, keyTimeOutMillis, currKeyTimeOutMillis);\r\n        }\r\n        LOG.info(\"Initialized KeyProvider \" + keyProvider);\r\n        keyProviderCryptoExtension = KeyProviderCryptoExtension.createKeyProviderCryptoExtension(keyProvider);\r\n        keyProviderCryptoExtension = new EagerKeyGeneratorKeyProviderCryptoExtension(kmsConf, keyProviderCryptoExtension);\r\n        if (kmsConf.getBoolean(KMSConfiguration.KEY_AUTHORIZATION_ENABLE, KMSConfiguration.KEY_AUTHORIZATION_ENABLE_DEFAULT)) {\r\n            keyProviderCryptoExtension = new KeyAuthorizationKeyProvider(keyProviderCryptoExtension, kmsAcls);\r\n        }\r\n        LOG.info(\"Initialized KeyProviderCryptoExtension \" + keyProviderCryptoExtension);\r\n        final int defaultBitlength = kmsConf.getInt(KeyProvider.DEFAULT_BITLENGTH_NAME, KeyProvider.DEFAULT_BITLENGTH);\r\n        LOG.info(\"Default key bitlength is {}\", defaultBitlength);\r\n        LOG.info(\"KMS Started\");\r\n    } catch (Throwable ex) {\r\n        System.out.println();\r\n        System.out.println(\"ERROR: Hadoop KMS could not be started\");\r\n        System.out.println();\r\n        System.out.println(\"REASON: \" + ex.toString());\r\n        System.out.println();\r\n        System.out.println(\"Stacktrace:\");\r\n        System.out.println(\"---------------------------------------------------\");\r\n        ex.printStackTrace(System.out);\r\n        System.out.println(\"---------------------------------------------------\");\r\n        System.out.println();\r\n        System.exit(1);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "contextDestroyed",
  "errType" : [ "IOException" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void contextDestroyed(ServletContextEvent sce)\n{\r\n    try {\r\n        keyProviderCryptoExtension.close();\r\n    } catch (IOException ioe) {\r\n        LOG.error(\"Error closing KeyProviderCryptoExtension\", ioe);\r\n    }\r\n    kmsAudit.shutdown();\r\n    kmsAcls.stopReloader();\r\n    jmxReporter.stop();\r\n    jmxReporter.close();\r\n    metricRegistry = null;\r\n    LOG.info(\"KMS Stopped\");\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getConfiguration",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Configuration getConfiguration()\n{\r\n    return new Configuration(kmsConf);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getACLs",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "KMSACLs getACLs()\n{\r\n    return kmsAcls;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getAdminCallsMeter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Meter getAdminCallsMeter()\n{\r\n    return adminCallsMeter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKeyCallsMeter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Meter getKeyCallsMeter()\n{\r\n    return keyCallsMeter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getInvalidCallsMeter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Meter getInvalidCallsMeter()\n{\r\n    return invalidCallsMeter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getGenerateEEKCallsMeter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Meter getGenerateEEKCallsMeter()\n{\r\n    return generateEEKCallsMeter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getDecryptEEKCallsMeter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Meter getDecryptEEKCallsMeter()\n{\r\n    return decryptEEKCallsMeter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getReencryptEEKCallsMeter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Meter getReencryptEEKCallsMeter()\n{\r\n    return reencryptEEKCallsMeter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getReencryptEEKBatchCallsMeter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Meter getReencryptEEKBatchCallsMeter()\n{\r\n    return reencryptEEKBatchCallsMeter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getUnauthorizedCallsMeter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Meter getUnauthorizedCallsMeter()\n{\r\n    return unauthorizedCallsMeter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getUnauthenticatedCallsMeter",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "Meter getUnauthenticatedCallsMeter()\n{\r\n    return unauthenticatedCallsMeter;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKeyProvider",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "KeyProviderCryptoExtension getKeyProvider()\n{\r\n    return keyProviderCryptoExtension;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getKMSAudit",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "KMSAudit getKMSAudit()\n{\r\n    return kmsAudit;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "isWriteable",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "boolean isWriteable(Class<?> aClass, Type type, Annotation[] annotations, MediaType mediaType)\n{\r\n    return Map.class.isAssignableFrom(aClass) || List.class.isAssignableFrom(aClass);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getSize",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "long getSize(Object obj, Class<?> aClass, Type type, Annotation[] annotations, MediaType mediaType)\n{\r\n    return -1;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : true,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "writeTo",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void writeTo(Object obj, Class<?> aClass, Type type, Annotation[] annotations, MediaType mediaType, MultivaluedMap<String, Object> stringObjectMultivaluedMap, OutputStream outputStream) throws IOException, WebApplicationException\n{\r\n    Writer writer = new OutputStreamWriter(outputStream, Charset.forName(\"UTF-8\"));\r\n    JsonSerialization.writer().writeValue(writer, obj);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getAuditLoggerClasses",
  "errType" : [ "ClassNotFoundException" ],
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Set<Class<? extends KMSAuditLogger>> getAuditLoggerClasses(final Configuration conf)\n{\r\n    Set<Class<? extends KMSAuditLogger>> result = new HashSet<>();\r\n    Collection<String> classes = conf.getTrimmedStringCollection(KMSConfiguration.KMS_AUDIT_LOGGER_KEY);\r\n    if (classes.isEmpty()) {\r\n        LOG.info(\"No audit logger configured, using default.\");\r\n        result.add(SimpleKMSAuditLogger.class);\r\n        return result;\r\n    }\r\n    for (String c : classes) {\r\n        try {\r\n            Class<?> cls = conf.getClassByName(c);\r\n            result.add(cls.asSubclass(KMSAuditLogger.class));\r\n        } catch (ClassNotFoundException cnfe) {\r\n            throw new RuntimeException(\"Failed to load \" + c + \", please check \" + \"configuration \" + KMSConfiguration.KMS_AUDIT_LOGGER_KEY, cnfe);\r\n        }\r\n    }\r\n    return result;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "initializeAuditLoggers",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void initializeAuditLoggers(Configuration conf)\n{\r\n    Set<Class<? extends KMSAuditLogger>> classes = getAuditLoggerClasses(conf);\r\n    Preconditions.checkState(!classes.isEmpty(), \"Should have at least 1 audit logger.\");\r\n    for (Class<? extends KMSAuditLogger> c : classes) {\r\n        final KMSAuditLogger logger = ReflectionUtils.newInstance(c, conf);\r\n        auditLoggers.add(logger);\r\n    }\r\n    for (KMSAuditLogger logger : auditLoggers) {\r\n        try {\r\n            LOG.info(\"Initializing audit logger {}\", logger.getClass());\r\n            logger.initialize(conf);\r\n        } catch (Exception ex) {\r\n            throw new RuntimeException(\"Failed to initialize \" + logger.getClass().getName(), ex);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "logEvent",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void logEvent(final OpStatus status, AuditEvent event)\n{\r\n    event.setEndTime(Time.now());\r\n    for (KMSAuditLogger logger : auditLoggers) {\r\n        logger.logAuditEvent(status, event);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "op",
  "errType" : [ "ExecutionException" ],
  "containingMethodsNum" : 12,
  "sourceCodeText" : "void op(final OpStatus opStatus, final Object op, final UserGroupInformation ugi, final String key, final String remoteHost, final String extraMsg)\n{\r\n    final String user = ugi == null ? null : ugi.getUserName();\r\n    if (!Strings.isNullOrEmpty(user) && !Strings.isNullOrEmpty(key) && (op != null) && AGGREGATE_OPS_WHITELIST.contains(op)) {\r\n        String cacheKey = createCacheKey(user, key, op);\r\n        if (opStatus == OpStatus.UNAUTHORIZED) {\r\n            cache.invalidate(cacheKey);\r\n            logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\r\n        } else {\r\n            try {\r\n                AuditEvent event = cache.get(cacheKey, new Callable<AuditEvent>() {\r\n\r\n                    @Override\r\n                    public AuditEvent call() throws Exception {\r\n                        return new AuditEvent(op, ugi, key, remoteHost, extraMsg);\r\n                    }\r\n                });\r\n                if (event.getAccessCount().incrementAndGet() == 0) {\r\n                    event.getAccessCount().incrementAndGet();\r\n                    logEvent(opStatus, event);\r\n                }\r\n            } catch (ExecutionException ex) {\r\n                throw new RuntimeException(ex);\r\n            }\r\n        }\r\n    } else {\r\n        logEvent(opStatus, new AuditEvent(op, ugi, key, remoteHost, extraMsg));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "ok",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void ok(UserGroupInformation user, KMS.KMSOp op, String key, String extraMsg)\n{\r\n    op(OpStatus.OK, op, user, key, \"Unknown\", extraMsg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "ok",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void ok(UserGroupInformation user, KMS.KMSOp op, String extraMsg)\n{\r\n    op(OpStatus.OK, op, user, null, \"Unknown\", extraMsg);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "unauthorized",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void unauthorized(UserGroupInformation user, KMS.KMSOp op, String key)\n{\r\n    op(OpStatus.UNAUTHORIZED, op, user, key, \"Unknown\", \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "unauthorized",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void unauthorized(UserGroupInformation user, KeyOpType op, String key)\n{\r\n    op(OpStatus.UNAUTHORIZED, op, user, key, \"Unknown\", \"\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "error",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void error(UserGroupInformation user, String method, String url, String extraMsg)\n{\r\n    op(OpStatus.ERROR, null, user, null, \"Unknown\", \"Method:'\" + method + \"' Exception:'\" + extraMsg + \"'\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "unauthenticated",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void unauthenticated(String remoteHost, String method, String url, String extraMsg)\n{\r\n    op(OpStatus.UNAUTHENTICATED, null, null, null, remoteHost, \"RemoteHost:\" + remoteHost + \" Method:\" + method + \" URL:\" + url + \" ErrorMsg:'\" + extraMsg + \"'\");\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "createCacheKey",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "String createCacheKey(String user, String key, Object op)\n{\r\n    return user + \"#\" + key + \"#\" + op;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "shutdown",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 3,
  "sourceCodeText" : "void shutdown()\n{\r\n    executor.shutdownNow();\r\n    for (KMSAuditLogger logger : auditLoggers) {\r\n        try {\r\n            logger.cleanup();\r\n        } catch (Exception ex) {\r\n            LOG.error(\"Failed to cleanup logger {}\", logger.getClass(), ex);\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "evictCacheForTesting",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void evictCacheForTesting()\n{\r\n    cache.invalidateAll();\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "toJSON",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List toJSON(List<KeyProvider.KeyVersion> keyVersions)\n{\r\n    List json = new ArrayList();\r\n    if (keyVersions != null) {\r\n        for (KeyProvider.KeyVersion version : keyVersions) {\r\n            json.add(KMSUtil.toJSON(version));\r\n        }\r\n    }\r\n    return json;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "toJSON",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "Map toJSON(String keyName, KeyProvider.Metadata meta)\n{\r\n    Map json = new LinkedHashMap();\r\n    if (meta != null) {\r\n        json.put(KMSRESTConstants.NAME_FIELD, keyName);\r\n        json.put(KMSRESTConstants.CIPHER_FIELD, meta.getCipher());\r\n        json.put(KMSRESTConstants.LENGTH_FIELD, meta.getBitLength());\r\n        json.put(KMSRESTConstants.DESCRIPTION_FIELD, meta.getDescription());\r\n        json.put(KMSRESTConstants.ATTRIBUTES_FIELD, meta.getAttributes());\r\n        json.put(KMSRESTConstants.CREATED_FIELD, meta.getCreated().getTime());\r\n        json.put(KMSRESTConstants.VERSIONS_FIELD, (long) meta.getVersions());\r\n    }\r\n    return json;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "toJSON",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "List toJSON(String[] keyNames, KeyProvider.Metadata[] metas)\n{\r\n    List json = new ArrayList();\r\n    for (int i = 0; i < keyNames.length; i++) {\r\n        json.add(toJSON(keyNames[i], metas[i]));\r\n    }\r\n    return json;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "setKMSACLs",
  "errType" : null,
  "containingMethodsNum" : 7,
  "sourceCodeText" : "void setKMSACLs(Configuration conf)\n{\r\n    Map<Type, AccessControlList> tempAcls = new HashMap<Type, AccessControlList>();\r\n    Map<Type, AccessControlList> tempBlacklist = new HashMap<Type, AccessControlList>();\r\n    for (Type aclType : Type.values()) {\r\n        String aclStr = conf.get(aclType.getAclConfigKey(), ACL_DEFAULT);\r\n        tempAcls.put(aclType, new AccessControlList(aclStr));\r\n        String blacklistStr = conf.get(aclType.getBlacklistConfigKey());\r\n        if (blacklistStr != null) {\r\n            tempBlacklist.put(aclType, new AccessControlList(blacklistStr));\r\n            LOG.info(\"'{}' Blacklist '{}'\", aclType, blacklistStr);\r\n        }\r\n        LOG.info(\"'{}' ACL '{}'\", aclType, aclStr);\r\n    }\r\n    acls = tempAcls;\r\n    blacklistedAcls = tempBlacklist;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "setKeyACLs",
  "errType" : [ "IllegalArgumentException" ],
  "containingMethodsNum" : 18,
  "sourceCodeText" : "void setKeyACLs(Configuration conf)\n{\r\n    Map<String, HashMap<KeyOpType, AccessControlList>> tempKeyAcls = new HashMap<String, HashMap<KeyOpType, AccessControlList>>();\r\n    Map<String, String> allKeyACLS = conf.getValByRegex(KMSConfiguration.KEY_ACL_PREFIX_REGEX);\r\n    for (Map.Entry<String, String> keyAcl : allKeyACLS.entrySet()) {\r\n        String k = keyAcl.getKey();\r\n        int keyNameStarts = KMSConfiguration.KEY_ACL_PREFIX.length();\r\n        int keyNameEnds = k.lastIndexOf(\".\");\r\n        if (keyNameStarts >= keyNameEnds) {\r\n            LOG.warn(\"Invalid key name '{}'\", k);\r\n        } else {\r\n            String aclStr = keyAcl.getValue();\r\n            String keyName = k.substring(keyNameStarts, keyNameEnds);\r\n            String keyOp = k.substring(keyNameEnds + 1);\r\n            KeyOpType aclType = null;\r\n            try {\r\n                aclType = KeyOpType.valueOf(keyOp);\r\n            } catch (IllegalArgumentException e) {\r\n                LOG.warn(\"Invalid key Operation '{}'\", keyOp);\r\n            }\r\n            if (aclType != null) {\r\n                HashMap<KeyOpType, AccessControlList> aclMap = tempKeyAcls.get(keyName);\r\n                if (aclMap == null) {\r\n                    aclMap = new HashMap<KeyOpType, AccessControlList>();\r\n                    tempKeyAcls.put(keyName, aclMap);\r\n                }\r\n                aclMap.put(aclType, new AccessControlList(aclStr));\r\n                LOG.info(\"KEY_NAME '{}' KEY_OP '{}' ACL '{}'\", keyName, aclType, aclStr);\r\n            }\r\n        }\r\n    }\r\n    keyAcls = tempKeyAcls;\r\n    final Map<KeyOpType, AccessControlList> tempDefaults = new HashMap<>();\r\n    final Map<KeyOpType, AccessControlList> tempWhitelists = new HashMap<>();\r\n    for (KeyOpType keyOp : KeyOpType.values()) {\r\n        parseAclsWithPrefix(conf, KMSConfiguration.DEFAULT_KEY_ACL_PREFIX, keyOp, tempDefaults);\r\n        parseAclsWithPrefix(conf, KMSConfiguration.WHITELIST_KEY_ACL_PREFIX, keyOp, tempWhitelists);\r\n    }\r\n    defaultKeyAcls = tempDefaults;\r\n    whitelistKeyAcls = tempWhitelists;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "parseAclsWithPrefix",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "void parseAclsWithPrefix(final Configuration conf, final String prefix, final KeyOpType keyOp, Map<KeyOpType, AccessControlList> results)\n{\r\n    String confKey = prefix + keyOp;\r\n    String aclStr = conf.get(confKey);\r\n    if (aclStr != null) {\r\n        if (keyOp == KeyOpType.ALL) {\r\n            LOG.warn(\"Invalid KEY_OP '{}' for {}, ignoring\", keyOp, prefix);\r\n        } else {\r\n            if (aclStr.equals(\"*\")) {\r\n                LOG.info(\"{} for KEY_OP '{}' is set to '*'\", prefix, keyOp);\r\n            }\r\n            results.put(keyOp, new AccessControlList(aclStr));\r\n        }\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "run",
  "errType" : [ "Exception" ],
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void run()\n{\r\n    try {\r\n        if (KMSConfiguration.isACLsFileNewer(lastReload)) {\r\n            setKMSACLs(loadACLs());\r\n            setKeyACLs(loadACLs());\r\n        }\r\n    } catch (Exception ex) {\r\n        LOG.warn(String.format(\"Could not reload ACLs file: '%s'\", ex.toString()), ex);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 1,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "startReloader",
  "errType" : null,
  "containingMethodsNum" : 2,
  "sourceCodeText" : "void startReloader()\n{\r\n    if (executorService == null) {\r\n        executorService = Executors.newScheduledThreadPool(1);\r\n        executorService.scheduleAtFixedRate(this, RELOADER_SLEEP_MILLIS, RELOADER_SLEEP_MILLIS, TimeUnit.MILLISECONDS);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "stopReloader",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "void stopReloader()\n{\r\n    if (executorService != null) {\r\n        executorService.shutdownNow();\r\n        executorService = null;\r\n    }\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "loadACLs",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "Configuration loadACLs()\n{\r\n    LOG.debug(\"Loading ACLs file\");\r\n    lastReload = System.currentTimeMillis();\r\n    Configuration conf = KMSConfiguration.getACLsConf();\r\n    conf.get(Type.CREATE.getAclConfigKey());\r\n    return conf;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "hasAccess",
  "errType" : null,
  "containingMethodsNum" : 11,
  "sourceCodeText" : "boolean hasAccess(Type type, UserGroupInformation ugi)\n{\r\n    boolean access = acls.get(type).isUserAllowed(ugi);\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"Checking user [{}] for: {} {} \", ugi.getShortUserName(), type.toString(), acls.get(type).getAclString());\r\n    }\r\n    if (access) {\r\n        AccessControlList blacklist = blacklistedAcls.get(type);\r\n        access = (blacklist == null) || !blacklist.isUserInList(ugi);\r\n        if (LOG.isDebugEnabled()) {\r\n            if (blacklist == null) {\r\n                LOG.debug(\"No blacklist for {}\", type.toString());\r\n            } else if (access) {\r\n                LOG.debug(\"user is not in {}\", blacklist.getAclString());\r\n            } else {\r\n                LOG.debug(\"user is in {}\", blacklist.getAclString());\r\n            }\r\n        }\r\n    }\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"User: [{}], Type: {} Result: {}\", ugi.getShortUserName(), type.toString(), access);\r\n    }\r\n    return access;\r\n}\n",
  "settingFlag" : true,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "assertAccess",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void assertAccess(KMSACLs.Type aclType, UserGroupInformation ugi, KMSOp operation, String key) throws AccessControlException\n{\r\n    if (!KMSWebApp.getACLs().hasAccess(aclType, ugi)) {\r\n        KMSWebApp.getUnauthorizedCallsMeter().mark();\r\n        KMSWebApp.getKMSAudit().unauthorized(ugi, operation, key);\r\n        throw new AuthorizationException(String.format((key != null) ? UNAUTHORIZED_MSG_WITH_KEY : UNAUTHORIZED_MSG_WITHOUT_KEY, ugi.getShortUserName(), operation, key));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "assertAccess",
  "errType" : null,
  "containingMethodsNum" : 4,
  "sourceCodeText" : "void assertAccess(EnumSet<Type> aclTypes, UserGroupInformation ugi, KMSOp operation, String key) throws AccessControlException\n{\r\n    boolean accessAllowed = false;\r\n    for (KMSACLs.Type type : aclTypes) {\r\n        if (KMSWebApp.getACLs().hasAccess(type, ugi)) {\r\n            accessAllowed = true;\r\n            break;\r\n        }\r\n    }\r\n    if (!accessAllowed) {\r\n        KMSWebApp.getUnauthorizedCallsMeter().mark();\r\n        KMSWebApp.getKMSAudit().unauthorized(ugi, operation, key);\r\n        throw new AuthorizationException(String.format((key != null) ? UNAUTHORIZED_MSG_WITH_KEY : UNAUTHORIZED_MSG_WITHOUT_KEY, ugi.getShortUserName(), operation, key));\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : true,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "hasAccessToKey",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean hasAccessToKey(String keyName, UserGroupInformation ugi, KeyOpType opType)\n{\r\n    boolean access = checkKeyAccess(keyName, ugi, opType) || checkKeyAccess(whitelistKeyAcls, ugi, opType);\r\n    if (!access) {\r\n        KMSWebApp.getKMSAudit().unauthorized(ugi, opType, keyName);\r\n    }\r\n    return access;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "checkKeyAccess",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean checkKeyAccess(String keyName, UserGroupInformation ugi, KeyOpType opType)\n{\r\n    Map<KeyOpType, AccessControlList> keyAcl = keyAcls.get(keyName);\r\n    if (keyAcl == null) {\r\n        LOG.debug(\"Key: {} has no ACLs defined, using defaults.\", keyName);\r\n        keyAcl = defaultKeyAcls;\r\n    }\r\n    boolean access = checkKeyAccess(keyAcl, ugi, opType);\r\n    if (LOG.isDebugEnabled()) {\r\n        LOG.debug(\"User: [{}], OpType: {}, KeyName: {} Result: {}\", ugi.getShortUserName(), opType.toString(), keyName, access);\r\n    }\r\n    return access;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "checkKeyAccess",
  "errType" : null,
  "containingMethodsNum" : 5,
  "sourceCodeText" : "boolean checkKeyAccess(Map<KeyOpType, AccessControlList> keyAcl, UserGroupInformation ugi, KeyOpType opType)\n{\r\n    AccessControlList acl = keyAcl.get(opType);\r\n    if (acl == null) {\r\n        LOG.debug(\"No ACL available for key, denying access for {}\", opType);\r\n        return false;\r\n    } else {\r\n        if (LOG.isDebugEnabled()) {\r\n            LOG.debug(\"Checking user [{}] for: {}: {}\", ugi.getShortUserName(), opType.toString(), acl.getAclString());\r\n        }\r\n        return acl.isUserAllowed(ugi);\r\n    }\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "isACLPresent",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "boolean isACLPresent(String keyName, KeyOpType opType)\n{\r\n    return (keyAcls.containsKey(keyName) || defaultKeyAcls.containsKey(opType) || whitelistKeyAcls.containsKey(opType));\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "forceNextReloadForTesting",
  "errType" : null,
  "containingMethodsNum" : 0,
  "sourceCodeText" : "void forceNextReloadForTesting()\n{\r\n    lastReload = 0;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "createResponse",
  "errType" : null,
  "containingMethodsNum" : 1,
  "sourceCodeText" : "Response createResponse(Response.Status status, Throwable ex)\n{\r\n    return HttpExceptionUtils.createJerseyExceptionResponse(status, ex);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "getOneLineMessage",
  "errType" : null,
  "containingMethodsNum" : 3,
  "sourceCodeText" : "String getOneLineMessage(Throwable exception)\n{\r\n    String message = exception.getMessage();\r\n    if (message != null) {\r\n        int i = message.indexOf(ENTER);\r\n        if (i > -1) {\r\n            message = message.substring(0, i);\r\n        }\r\n    }\r\n    return message;\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : false
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "toResponse",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "Response toResponse(Exception exception)\n{\r\n    Response.Status status;\r\n    boolean doAudit = true;\r\n    Throwable throwable = exception;\r\n    if (exception instanceof ContainerException) {\r\n        throwable = exception.getCause();\r\n    }\r\n    if (throwable instanceof SecurityException) {\r\n        status = Response.Status.FORBIDDEN;\r\n    } else if (throwable instanceof AuthenticationException) {\r\n        status = Response.Status.FORBIDDEN;\r\n        doAudit = false;\r\n    } else if (throwable instanceof AuthorizationException) {\r\n        status = Response.Status.FORBIDDEN;\r\n        doAudit = false;\r\n    } else if (throwable instanceof AccessControlException) {\r\n        status = Response.Status.FORBIDDEN;\r\n    } else if (exception instanceof IOException) {\r\n        status = Response.Status.INTERNAL_SERVER_ERROR;\r\n        log(status, throwable);\r\n    } else if (exception instanceof UnsupportedOperationException) {\r\n        status = Response.Status.BAD_REQUEST;\r\n    } else if (exception instanceof IllegalArgumentException) {\r\n        status = Response.Status.BAD_REQUEST;\r\n    } else {\r\n        status = Response.Status.INTERNAL_SERVER_ERROR;\r\n        log(status, throwable);\r\n    }\r\n    if (doAudit) {\r\n        KMSWebApp.getKMSAudit().error(KMSMDCFilter.getUgi(), KMSMDCFilter.getMethod(), KMSMDCFilter.getURL(), getOneLineMessage(exception));\r\n    }\r\n    EXCEPTION_LOG.warn(\"User {} request {} {} caused exception.\", KMSMDCFilter.getUgi(), KMSMDCFilter.getMethod(), KMSMDCFilter.getURL(), exception);\r\n    return createResponse(status, throwable);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
}, {
  "directory" : "E:\\MyPaper\\hadoop\\hadoop-common-project\\hadoop-kms\\src\\main\\java\\org\\apache\\hadoop\\crypto\\key\\kms\\server",
  "methodName" : "log",
  "errType" : null,
  "containingMethodsNum" : 6,
  "sourceCodeText" : "void log(Response.Status status, Throwable ex)\n{\r\n    UserGroupInformation ugi = KMSMDCFilter.getUgi();\r\n    String method = KMSMDCFilter.getMethod();\r\n    String url = KMSMDCFilter.getURL();\r\n    String remoteClientAddress = KMSMDCFilter.getRemoteClientAddress();\r\n    String msg = getOneLineMessage(ex);\r\n    LOG.warn(\"User:'{}' Method:{} URL:{} From:{} Response:{}-{}\", ugi, method, url, remoteClientAddress, status, msg, ex);\r\n}\n",
  "settingFlag" : false,
  "hasThrow" : false,
  "returnSpecialValue" : false,
  "tryCatchBlockNum" : 0,
  "logged" : true
} ]